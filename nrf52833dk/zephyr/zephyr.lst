
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
			msg->len);
		if (!(msg->flags & I2C_MSG_READ)) {
			LOG_HEXDUMP_DBG(msg->buf, msg->len, "contents:");
		}
	}
}
   0:	80 51 00 20 51 58 00 00 f5 92 00 00 25 58 00 00     .Q. QX......%X..
  10:	25 58 00 00 25 58 00 00 25 58 00 00 00 00 00 00     %X..%X..%X......
	...
  2c:	e1 50 00 00 25 58 00 00 00 00 00 00 51 50 00 00     .P..%X......QP..
  3c:	25 58 00 00                                         %X..

00000040 <_irq_vector_table>:
  40:	51 52 00 00 51 52 00 00 51 52 00 00 51 52 00 00     QR..QR..QR..QR..
  50:	51 52 00 00 51 52 00 00 51 52 00 00 51 52 00 00     QR..QR..QR..QR..
  60:	51 52 00 00 51 52 00 00 51 52 00 00 51 52 00 00     QR..QR..QR..QR..
  70:	51 52 00 00 51 52 00 00 51 52 00 00 51 52 00 00     QR..QR..QR..QR..
  80:	51 52 00 00 51 52 00 00 51 52 00 00 51 52 00 00     QR..QR..QR..QR..
  90:	51 52 00 00 51 52 00 00 51 52 00 00 51 52 00 00     QR..QR..QR..QR..
  a0:	51 52 00 00 51 52 00 00 51 52 00 00 51 52 00 00     QR..QR..QR..QR..
  b0:	51 52 00 00 51 52 00 00 51 52 00 00 51 52 00 00     QR..QR..QR..QR..
  c0:	51 52 00 00 51 52 00 00 51 52 00 00 51 52 00 00     QR..QR..QR..QR..
  d0:	51 52 00 00 51 52 00 00 51 52 00 00 51 52 00 00     QR..QR..QR..QR..
  e0:	51 52 00 00 51 52 00 00 51 52 00 00 51 52 00 00     QR..QR..QR..QR..
  f0:	51 52 00 00 51 52 00 00 51 52 00 00 51 52 00 00     QR..QR..QR..QR..

Disassembly of section text:

00000100 <__aeabi_drsub>:
     100:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
     104:	e002      	b.n	10c <__adddf3>
     106:	bf00      	nop

00000108 <__aeabi_dsub>:
     108:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000010c <__adddf3>:
     10c:	b530      	push	{r4, r5, lr}
     10e:	ea4f 0441 	mov.w	r4, r1, lsl #1
     112:	ea4f 0543 	mov.w	r5, r3, lsl #1
     116:	ea94 0f05 	teq	r4, r5
     11a:	bf08      	it	eq
     11c:	ea90 0f02 	teqeq	r0, r2
     120:	bf1f      	itttt	ne
     122:	ea54 0c00 	orrsne.w	ip, r4, r0
     126:	ea55 0c02 	orrsne.w	ip, r5, r2
     12a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
     12e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     132:	f000 80e2 	beq.w	2fa <CONFIG_FLASH_SIZE+0xfa>
     136:	ea4f 5454 	mov.w	r4, r4, lsr #21
     13a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
     13e:	bfb8      	it	lt
     140:	426d      	neglt	r5, r5
     142:	dd0c      	ble.n	15e <CONFIG_IDLE_STACK_SIZE+0x1e>
     144:	442c      	add	r4, r5
     146:	ea80 0202 	eor.w	r2, r0, r2
     14a:	ea81 0303 	eor.w	r3, r1, r3
     14e:	ea82 0000 	eor.w	r0, r2, r0
     152:	ea83 0101 	eor.w	r1, r3, r1
     156:	ea80 0202 	eor.w	r2, r0, r2
     15a:	ea81 0303 	eor.w	r3, r1, r3
     15e:	2d36      	cmp	r5, #54	; 0x36
     160:	bf88      	it	hi
     162:	bd30      	pophi	{r4, r5, pc}
     164:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     168:	ea4f 3101 	mov.w	r1, r1, lsl #12
     16c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
     170:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
     174:	d002      	beq.n	17c <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xf>
     176:	4240      	negs	r0, r0
     178:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     17c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
     180:	ea4f 3303 	mov.w	r3, r3, lsl #12
     184:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
     188:	d002      	beq.n	190 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x23>
     18a:	4252      	negs	r2, r2
     18c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     190:	ea94 0f05 	teq	r4, r5
     194:	f000 80a7 	beq.w	2e6 <CONFIG_FLASH_SIZE+0xe6>
     198:	f1a4 0401 	sub.w	r4, r4, #1
     19c:	f1d5 0e20 	rsbs	lr, r5, #32
     1a0:	db0d      	blt.n	1be <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x51>
     1a2:	fa02 fc0e 	lsl.w	ip, r2, lr
     1a6:	fa22 f205 	lsr.w	r2, r2, r5
     1aa:	1880      	adds	r0, r0, r2
     1ac:	f141 0100 	adc.w	r1, r1, #0
     1b0:	fa03 f20e 	lsl.w	r2, r3, lr
     1b4:	1880      	adds	r0, r0, r2
     1b6:	fa43 f305 	asr.w	r3, r3, r5
     1ba:	4159      	adcs	r1, r3
     1bc:	e00e      	b.n	1dc <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x6f>
     1be:	f1a5 0520 	sub.w	r5, r5, #32
     1c2:	f10e 0e20 	add.w	lr, lr, #32
     1c6:	2a01      	cmp	r2, #1
     1c8:	fa03 fc0e 	lsl.w	ip, r3, lr
     1cc:	bf28      	it	cs
     1ce:	f04c 0c02 	orrcs.w	ip, ip, #2
     1d2:	fa43 f305 	asr.w	r3, r3, r5
     1d6:	18c0      	adds	r0, r0, r3
     1d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
     1dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     1e0:	d507      	bpl.n	1f2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x85>
     1e2:	f04f 0e00 	mov.w	lr, #0
     1e6:	f1dc 0c00 	rsbs	ip, ip, #0
     1ea:	eb7e 0000 	sbcs.w	r0, lr, r0
     1ee:	eb6e 0101 	sbc.w	r1, lr, r1
     1f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
     1f6:	d31b      	bcc.n	230 <CONFIG_FLASH_SIZE+0x30>
     1f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
     1fc:	d30c      	bcc.n	218 <CONFIG_FLASH_SIZE+0x18>
     1fe:	0849      	lsrs	r1, r1, #1
     200:	ea5f 0030 	movs.w	r0, r0, rrx
     204:	ea4f 0c3c 	mov.w	ip, ip, rrx
     208:	f104 0401 	add.w	r4, r4, #1
     20c:	ea4f 5244 	mov.w	r2, r4, lsl #21
     210:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
     214:	f080 809a 	bcs.w	34c <CONFIG_FLASH_SIZE+0x14c>
     218:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     21c:	bf08      	it	eq
     21e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     222:	f150 0000 	adcs.w	r0, r0, #0
     226:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     22a:	ea41 0105 	orr.w	r1, r1, r5
     22e:	bd30      	pop	{r4, r5, pc}
     230:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
     234:	4140      	adcs	r0, r0
     236:	eb41 0101 	adc.w	r1, r1, r1
     23a:	3c01      	subs	r4, #1
     23c:	bf28      	it	cs
     23e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
     242:	d2e9      	bcs.n	218 <CONFIG_FLASH_SIZE+0x18>
     244:	f091 0f00 	teq	r1, #0
     248:	bf04      	itt	eq
     24a:	4601      	moveq	r1, r0
     24c:	2000      	moveq	r0, #0
     24e:	fab1 f381 	clz	r3, r1
     252:	bf08      	it	eq
     254:	3320      	addeq	r3, #32
     256:	f1a3 030b 	sub.w	r3, r3, #11
     25a:	f1b3 0220 	subs.w	r2, r3, #32
     25e:	da0c      	bge.n	27a <CONFIG_FLASH_SIZE+0x7a>
     260:	320c      	adds	r2, #12
     262:	dd08      	ble.n	276 <CONFIG_FLASH_SIZE+0x76>
     264:	f102 0c14 	add.w	ip, r2, #20
     268:	f1c2 020c 	rsb	r2, r2, #12
     26c:	fa01 f00c 	lsl.w	r0, r1, ip
     270:	fa21 f102 	lsr.w	r1, r1, r2
     274:	e00c      	b.n	290 <CONFIG_FLASH_SIZE+0x90>
     276:	f102 0214 	add.w	r2, r2, #20
     27a:	bfd8      	it	le
     27c:	f1c2 0c20 	rsble	ip, r2, #32
     280:	fa01 f102 	lsl.w	r1, r1, r2
     284:	fa20 fc0c 	lsr.w	ip, r0, ip
     288:	bfdc      	itt	le
     28a:	ea41 010c 	orrle.w	r1, r1, ip
     28e:	4090      	lslle	r0, r2
     290:	1ae4      	subs	r4, r4, r3
     292:	bfa2      	ittt	ge
     294:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
     298:	4329      	orrge	r1, r5
     29a:	bd30      	popge	{r4, r5, pc}
     29c:	ea6f 0404 	mvn.w	r4, r4
     2a0:	3c1f      	subs	r4, #31
     2a2:	da1c      	bge.n	2de <CONFIG_FLASH_SIZE+0xde>
     2a4:	340c      	adds	r4, #12
     2a6:	dc0e      	bgt.n	2c6 <CONFIG_FLASH_SIZE+0xc6>
     2a8:	f104 0414 	add.w	r4, r4, #20
     2ac:	f1c4 0220 	rsb	r2, r4, #32
     2b0:	fa20 f004 	lsr.w	r0, r0, r4
     2b4:	fa01 f302 	lsl.w	r3, r1, r2
     2b8:	ea40 0003 	orr.w	r0, r0, r3
     2bc:	fa21 f304 	lsr.w	r3, r1, r4
     2c0:	ea45 0103 	orr.w	r1, r5, r3
     2c4:	bd30      	pop	{r4, r5, pc}
     2c6:	f1c4 040c 	rsb	r4, r4, #12
     2ca:	f1c4 0220 	rsb	r2, r4, #32
     2ce:	fa20 f002 	lsr.w	r0, r0, r2
     2d2:	fa01 f304 	lsl.w	r3, r1, r4
     2d6:	ea40 0003 	orr.w	r0, r0, r3
     2da:	4629      	mov	r1, r5
     2dc:	bd30      	pop	{r4, r5, pc}
     2de:	fa21 f004 	lsr.w	r0, r1, r4
     2e2:	4629      	mov	r1, r5
     2e4:	bd30      	pop	{r4, r5, pc}
     2e6:	f094 0f00 	teq	r4, #0
     2ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
     2ee:	bf06      	itte	eq
     2f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
     2f4:	3401      	addeq	r4, #1
     2f6:	3d01      	subne	r5, #1
     2f8:	e74e      	b.n	198 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2b>
     2fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     2fe:	bf18      	it	ne
     300:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     304:	d029      	beq.n	35a <CONFIG_FLASH_SIZE+0x15a>
     306:	ea94 0f05 	teq	r4, r5
     30a:	bf08      	it	eq
     30c:	ea90 0f02 	teqeq	r0, r2
     310:	d005      	beq.n	31e <CONFIG_FLASH_SIZE+0x11e>
     312:	ea54 0c00 	orrs.w	ip, r4, r0
     316:	bf04      	itt	eq
     318:	4619      	moveq	r1, r3
     31a:	4610      	moveq	r0, r2
     31c:	bd30      	pop	{r4, r5, pc}
     31e:	ea91 0f03 	teq	r1, r3
     322:	bf1e      	ittt	ne
     324:	2100      	movne	r1, #0
     326:	2000      	movne	r0, #0
     328:	bd30      	popne	{r4, r5, pc}
     32a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
     32e:	d105      	bne.n	33c <CONFIG_FLASH_SIZE+0x13c>
     330:	0040      	lsls	r0, r0, #1
     332:	4149      	adcs	r1, r1
     334:	bf28      	it	cs
     336:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
     33a:	bd30      	pop	{r4, r5, pc}
     33c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
     340:	bf3c      	itt	cc
     342:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
     346:	bd30      	popcc	{r4, r5, pc}
     348:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     34c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
     350:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     354:	f04f 0000 	mov.w	r0, #0
     358:	bd30      	pop	{r4, r5, pc}
     35a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     35e:	bf1a      	itte	ne
     360:	4619      	movne	r1, r3
     362:	4610      	movne	r0, r2
     364:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
     368:	bf1c      	itt	ne
     36a:	460b      	movne	r3, r1
     36c:	4602      	movne	r2, r0
     36e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     372:	bf06      	itte	eq
     374:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
     378:	ea91 0f03 	teqeq	r1, r3
     37c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
     380:	bd30      	pop	{r4, r5, pc}
     382:	bf00      	nop

00000384 <__aeabi_ui2d>:
     384:	f090 0f00 	teq	r0, #0
     388:	bf04      	itt	eq
     38a:	2100      	moveq	r1, #0
     38c:	4770      	bxeq	lr
     38e:	b530      	push	{r4, r5, lr}
     390:	f44f 6480 	mov.w	r4, #1024	; 0x400
     394:	f104 0432 	add.w	r4, r4, #50	; 0x32
     398:	f04f 0500 	mov.w	r5, #0
     39c:	f04f 0100 	mov.w	r1, #0
     3a0:	e750      	b.n	244 <CONFIG_FLASH_SIZE+0x44>
     3a2:	bf00      	nop

000003a4 <__aeabi_i2d>:
     3a4:	f090 0f00 	teq	r0, #0
     3a8:	bf04      	itt	eq
     3aa:	2100      	moveq	r1, #0
     3ac:	4770      	bxeq	lr
     3ae:	b530      	push	{r4, r5, lr}
     3b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
     3b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
     3b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
     3bc:	bf48      	it	mi
     3be:	4240      	negmi	r0, r0
     3c0:	f04f 0100 	mov.w	r1, #0
     3c4:	e73e      	b.n	244 <CONFIG_FLASH_SIZE+0x44>
     3c6:	bf00      	nop

000003c8 <__aeabi_f2d>:
     3c8:	0042      	lsls	r2, r0, #1
     3ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
     3ce:	ea4f 0131 	mov.w	r1, r1, rrx
     3d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
     3d6:	bf1f      	itttt	ne
     3d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
     3dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     3e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
     3e4:	4770      	bxne	lr
     3e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
     3ea:	bf08      	it	eq
     3ec:	4770      	bxeq	lr
     3ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
     3f2:	bf04      	itt	eq
     3f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
     3f8:	4770      	bxeq	lr
     3fa:	b530      	push	{r4, r5, lr}
     3fc:	f44f 7460 	mov.w	r4, #896	; 0x380
     400:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     404:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     408:	e71c      	b.n	244 <CONFIG_FLASH_SIZE+0x44>
     40a:	bf00      	nop

0000040c <__aeabi_ul2d>:
     40c:	ea50 0201 	orrs.w	r2, r0, r1
     410:	bf08      	it	eq
     412:	4770      	bxeq	lr
     414:	b530      	push	{r4, r5, lr}
     416:	f04f 0500 	mov.w	r5, #0
     41a:	e00a      	b.n	432 <__aeabi_l2d+0x16>

0000041c <__aeabi_l2d>:
     41c:	ea50 0201 	orrs.w	r2, r0, r1
     420:	bf08      	it	eq
     422:	4770      	bxeq	lr
     424:	b530      	push	{r4, r5, lr}
     426:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
     42a:	d502      	bpl.n	432 <__aeabi_l2d+0x16>
     42c:	4240      	negs	r0, r0
     42e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     432:	f44f 6480 	mov.w	r4, #1024	; 0x400
     436:	f104 0432 	add.w	r4, r4, #50	; 0x32
     43a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
     43e:	f43f aed8 	beq.w	1f2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x85>
     442:	f04f 0203 	mov.w	r2, #3
     446:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     44a:	bf18      	it	ne
     44c:	3203      	addne	r2, #3
     44e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     452:	bf18      	it	ne
     454:	3203      	addne	r2, #3
     456:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
     45a:	f1c2 0320 	rsb	r3, r2, #32
     45e:	fa00 fc03 	lsl.w	ip, r0, r3
     462:	fa20 f002 	lsr.w	r0, r0, r2
     466:	fa01 fe03 	lsl.w	lr, r1, r3
     46a:	ea40 000e 	orr.w	r0, r0, lr
     46e:	fa21 f102 	lsr.w	r1, r1, r2
     472:	4414      	add	r4, r2
     474:	e6bd      	b.n	1f2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x85>
     476:	bf00      	nop

00000478 <__aeabi_dmul>:
     478:	b570      	push	{r4, r5, r6, lr}
     47a:	f04f 0cff 	mov.w	ip, #255	; 0xff
     47e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     482:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     486:	bf1d      	ittte	ne
     488:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     48c:	ea94 0f0c 	teqne	r4, ip
     490:	ea95 0f0c 	teqne	r5, ip
     494:	f000 f8de 	bleq	654 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x16c>
     498:	442c      	add	r4, r5
     49a:	ea81 0603 	eor.w	r6, r1, r3
     49e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
     4a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
     4a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
     4aa:	bf18      	it	ne
     4ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
     4b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     4b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     4b8:	d038      	beq.n	52c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x44>
     4ba:	fba0 ce02 	umull	ip, lr, r0, r2
     4be:	f04f 0500 	mov.w	r5, #0
     4c2:	fbe1 e502 	umlal	lr, r5, r1, r2
     4c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
     4ca:	fbe0 e503 	umlal	lr, r5, r0, r3
     4ce:	f04f 0600 	mov.w	r6, #0
     4d2:	fbe1 5603 	umlal	r5, r6, r1, r3
     4d6:	f09c 0f00 	teq	ip, #0
     4da:	bf18      	it	ne
     4dc:	f04e 0e01 	orrne.w	lr, lr, #1
     4e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
     4e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
     4e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
     4ec:	d204      	bcs.n	4f8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x10>
     4ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
     4f2:	416d      	adcs	r5, r5
     4f4:	eb46 0606 	adc.w	r6, r6, r6
     4f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
     4fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
     500:	ea4f 20c5 	mov.w	r0, r5, lsl #11
     504:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
     508:	ea4f 2ece 	mov.w	lr, lr, lsl #11
     50c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     510:	bf88      	it	hi
     512:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     516:	d81e      	bhi.n	556 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6e>
     518:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
     51c:	bf08      	it	eq
     51e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
     522:	f150 0000 	adcs.w	r0, r0, #0
     526:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     52a:	bd70      	pop	{r4, r5, r6, pc}
     52c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
     530:	ea46 0101 	orr.w	r1, r6, r1
     534:	ea40 0002 	orr.w	r0, r0, r2
     538:	ea81 0103 	eor.w	r1, r1, r3
     53c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
     540:	bfc2      	ittt	gt
     542:	ebd4 050c 	rsbsgt	r5, r4, ip
     546:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     54a:	bd70      	popgt	{r4, r5, r6, pc}
     54c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     550:	f04f 0e00 	mov.w	lr, #0
     554:	3c01      	subs	r4, #1
     556:	f300 80ab 	bgt.w	6b0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1c8>
     55a:	f114 0f36 	cmn.w	r4, #54	; 0x36
     55e:	bfde      	ittt	le
     560:	2000      	movle	r0, #0
     562:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
     566:	bd70      	pople	{r4, r5, r6, pc}
     568:	f1c4 0400 	rsb	r4, r4, #0
     56c:	3c20      	subs	r4, #32
     56e:	da35      	bge.n	5dc <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xf4>
     570:	340c      	adds	r4, #12
     572:	dc1b      	bgt.n	5ac <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc4>
     574:	f104 0414 	add.w	r4, r4, #20
     578:	f1c4 0520 	rsb	r5, r4, #32
     57c:	fa00 f305 	lsl.w	r3, r0, r5
     580:	fa20 f004 	lsr.w	r0, r0, r4
     584:	fa01 f205 	lsl.w	r2, r1, r5
     588:	ea40 0002 	orr.w	r0, r0, r2
     58c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
     590:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     594:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     598:	fa21 f604 	lsr.w	r6, r1, r4
     59c:	eb42 0106 	adc.w	r1, r2, r6
     5a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5a4:	bf08      	it	eq
     5a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     5aa:	bd70      	pop	{r4, r5, r6, pc}
     5ac:	f1c4 040c 	rsb	r4, r4, #12
     5b0:	f1c4 0520 	rsb	r5, r4, #32
     5b4:	fa00 f304 	lsl.w	r3, r0, r4
     5b8:	fa20 f005 	lsr.w	r0, r0, r5
     5bc:	fa01 f204 	lsl.w	r2, r1, r4
     5c0:	ea40 0002 	orr.w	r0, r0, r2
     5c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     5c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     5cc:	f141 0100 	adc.w	r1, r1, #0
     5d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5d4:	bf08      	it	eq
     5d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     5da:	bd70      	pop	{r4, r5, r6, pc}
     5dc:	f1c4 0520 	rsb	r5, r4, #32
     5e0:	fa00 f205 	lsl.w	r2, r0, r5
     5e4:	ea4e 0e02 	orr.w	lr, lr, r2
     5e8:	fa20 f304 	lsr.w	r3, r0, r4
     5ec:	fa01 f205 	lsl.w	r2, r1, r5
     5f0:	ea43 0302 	orr.w	r3, r3, r2
     5f4:	fa21 f004 	lsr.w	r0, r1, r4
     5f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     5fc:	fa21 f204 	lsr.w	r2, r1, r4
     600:	ea20 0002 	bic.w	r0, r0, r2
     604:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
     608:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     60c:	bf08      	it	eq
     60e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     612:	bd70      	pop	{r4, r5, r6, pc}
     614:	f094 0f00 	teq	r4, #0
     618:	d10f      	bne.n	63a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x152>
     61a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
     61e:	0040      	lsls	r0, r0, #1
     620:	eb41 0101 	adc.w	r1, r1, r1
     624:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     628:	bf08      	it	eq
     62a:	3c01      	subeq	r4, #1
     62c:	d0f7      	beq.n	61e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x136>
     62e:	ea41 0106 	orr.w	r1, r1, r6
     632:	f095 0f00 	teq	r5, #0
     636:	bf18      	it	ne
     638:	4770      	bxne	lr
     63a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
     63e:	0052      	lsls	r2, r2, #1
     640:	eb43 0303 	adc.w	r3, r3, r3
     644:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
     648:	bf08      	it	eq
     64a:	3d01      	subeq	r5, #1
     64c:	d0f7      	beq.n	63e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x156>
     64e:	ea43 0306 	orr.w	r3, r3, r6
     652:	4770      	bx	lr
     654:	ea94 0f0c 	teq	r4, ip
     658:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     65c:	bf18      	it	ne
     65e:	ea95 0f0c 	teqne	r5, ip
     662:	d00c      	beq.n	67e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x196>
     664:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     668:	bf18      	it	ne
     66a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     66e:	d1d1      	bne.n	614 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x12c>
     670:	ea81 0103 	eor.w	r1, r1, r3
     674:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     678:	f04f 0000 	mov.w	r0, #0
     67c:	bd70      	pop	{r4, r5, r6, pc}
     67e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     682:	bf06      	itte	eq
     684:	4610      	moveq	r0, r2
     686:	4619      	moveq	r1, r3
     688:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     68c:	d019      	beq.n	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>
     68e:	ea94 0f0c 	teq	r4, ip
     692:	d102      	bne.n	69a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1b2>
     694:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
     698:	d113      	bne.n	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>
     69a:	ea95 0f0c 	teq	r5, ip
     69e:	d105      	bne.n	6ac <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1c4>
     6a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
     6a4:	bf1c      	itt	ne
     6a6:	4610      	movne	r0, r2
     6a8:	4619      	movne	r1, r3
     6aa:	d10a      	bne.n	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>
     6ac:	ea81 0103 	eor.w	r1, r1, r3
     6b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     6b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     6b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     6bc:	f04f 0000 	mov.w	r0, #0
     6c0:	bd70      	pop	{r4, r5, r6, pc}
     6c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     6c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
     6ca:	bd70      	pop	{r4, r5, r6, pc}

000006cc <__aeabi_ddiv>:
     6cc:	b570      	push	{r4, r5, r6, lr}
     6ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
     6d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     6d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     6da:	bf1d      	ittte	ne
     6dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     6e0:	ea94 0f0c 	teqne	r4, ip
     6e4:	ea95 0f0c 	teqne	r5, ip
     6e8:	f000 f8a7 	bleq	83a <CONFIG_ISR_STACK_SIZE+0x3a>
     6ec:	eba4 0405 	sub.w	r4, r4, r5
     6f0:	ea81 0e03 	eor.w	lr, r1, r3
     6f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     6f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
     6fc:	f000 8088 	beq.w	810 <CONFIG_ISR_STACK_SIZE+0x10>
     700:	ea4f 3303 	mov.w	r3, r3, lsl #12
     704:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
     708:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
     70c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
     710:	ea4f 2202 	mov.w	r2, r2, lsl #8
     714:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
     718:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
     71c:	ea4f 2600 	mov.w	r6, r0, lsl #8
     720:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
     724:	429d      	cmp	r5, r3
     726:	bf08      	it	eq
     728:	4296      	cmpeq	r6, r2
     72a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
     72e:	f504 7440 	add.w	r4, r4, #768	; 0x300
     732:	d202      	bcs.n	73a <__aeabi_ddiv+0x6e>
     734:	085b      	lsrs	r3, r3, #1
     736:	ea4f 0232 	mov.w	r2, r2, rrx
     73a:	1ab6      	subs	r6, r6, r2
     73c:	eb65 0503 	sbc.w	r5, r5, r3
     740:	085b      	lsrs	r3, r3, #1
     742:	ea4f 0232 	mov.w	r2, r2, rrx
     746:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
     74a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
     74e:	ebb6 0e02 	subs.w	lr, r6, r2
     752:	eb75 0e03 	sbcs.w	lr, r5, r3
     756:	bf22      	ittt	cs
     758:	1ab6      	subcs	r6, r6, r2
     75a:	4675      	movcs	r5, lr
     75c:	ea40 000c 	orrcs.w	r0, r0, ip
     760:	085b      	lsrs	r3, r3, #1
     762:	ea4f 0232 	mov.w	r2, r2, rrx
     766:	ebb6 0e02 	subs.w	lr, r6, r2
     76a:	eb75 0e03 	sbcs.w	lr, r5, r3
     76e:	bf22      	ittt	cs
     770:	1ab6      	subcs	r6, r6, r2
     772:	4675      	movcs	r5, lr
     774:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     778:	085b      	lsrs	r3, r3, #1
     77a:	ea4f 0232 	mov.w	r2, r2, rrx
     77e:	ebb6 0e02 	subs.w	lr, r6, r2
     782:	eb75 0e03 	sbcs.w	lr, r5, r3
     786:	bf22      	ittt	cs
     788:	1ab6      	subcs	r6, r6, r2
     78a:	4675      	movcs	r5, lr
     78c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     790:	085b      	lsrs	r3, r3, #1
     792:	ea4f 0232 	mov.w	r2, r2, rrx
     796:	ebb6 0e02 	subs.w	lr, r6, r2
     79a:	eb75 0e03 	sbcs.w	lr, r5, r3
     79e:	bf22      	ittt	cs
     7a0:	1ab6      	subcs	r6, r6, r2
     7a2:	4675      	movcs	r5, lr
     7a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     7a8:	ea55 0e06 	orrs.w	lr, r5, r6
     7ac:	d018      	beq.n	7e0 <__aeabi_ddiv+0x114>
     7ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
     7b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
     7b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
     7ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
     7be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
     7c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
     7c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
     7ca:	d1c0      	bne.n	74e <__aeabi_ddiv+0x82>
     7cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     7d0:	d10b      	bne.n	7ea <__aeabi_ddiv+0x11e>
     7d2:	ea41 0100 	orr.w	r1, r1, r0
     7d6:	f04f 0000 	mov.w	r0, #0
     7da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
     7de:	e7b6      	b.n	74e <__aeabi_ddiv+0x82>
     7e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     7e4:	bf04      	itt	eq
     7e6:	4301      	orreq	r1, r0
     7e8:	2000      	moveq	r0, #0
     7ea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     7ee:	bf88      	it	hi
     7f0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     7f4:	f63f aeaf 	bhi.w	556 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6e>
     7f8:	ebb5 0c03 	subs.w	ip, r5, r3
     7fc:	bf04      	itt	eq
     7fe:	ebb6 0c02 	subseq.w	ip, r6, r2
     802:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     806:	f150 0000 	adcs.w	r0, r0, #0
     80a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     80e:	bd70      	pop	{r4, r5, r6, pc}
     810:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
     814:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
     818:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
     81c:	bfc2      	ittt	gt
     81e:	ebd4 050c 	rsbsgt	r5, r4, ip
     822:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     826:	bd70      	popgt	{r4, r5, r6, pc}
     828:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     82c:	f04f 0e00 	mov.w	lr, #0
     830:	3c01      	subs	r4, #1
     832:	e690      	b.n	556 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6e>
     834:	ea45 0e06 	orr.w	lr, r5, r6
     838:	e68d      	b.n	556 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6e>
     83a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     83e:	ea94 0f0c 	teq	r4, ip
     842:	bf08      	it	eq
     844:	ea95 0f0c 	teqeq	r5, ip
     848:	f43f af3b 	beq.w	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>
     84c:	ea94 0f0c 	teq	r4, ip
     850:	d10a      	bne.n	868 <CONFIG_ISR_STACK_SIZE+0x68>
     852:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     856:	f47f af34 	bne.w	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>
     85a:	ea95 0f0c 	teq	r5, ip
     85e:	f47f af25 	bne.w	6ac <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1c4>
     862:	4610      	mov	r0, r2
     864:	4619      	mov	r1, r3
     866:	e72c      	b.n	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>
     868:	ea95 0f0c 	teq	r5, ip
     86c:	d106      	bne.n	87c <CONFIG_ISR_STACK_SIZE+0x7c>
     86e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     872:	f43f aefd 	beq.w	670 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x188>
     876:	4610      	mov	r0, r2
     878:	4619      	mov	r1, r3
     87a:	e722      	b.n	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>
     87c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     880:	bf18      	it	ne
     882:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     886:	f47f aec5 	bne.w	614 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x12c>
     88a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
     88e:	f47f af0d 	bne.w	6ac <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1c4>
     892:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
     896:	f47f aeeb 	bne.w	670 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x188>
     89a:	e712      	b.n	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>

0000089c <__gedf2>:
     89c:	f04f 3cff 	mov.w	ip, #4294967295
     8a0:	e006      	b.n	8b0 <__cmpdf2+0x4>
     8a2:	bf00      	nop

000008a4 <__ledf2>:
     8a4:	f04f 0c01 	mov.w	ip, #1
     8a8:	e002      	b.n	8b0 <__cmpdf2+0x4>
     8aa:	bf00      	nop

000008ac <__cmpdf2>:
     8ac:	f04f 0c01 	mov.w	ip, #1
     8b0:	f84d cd04 	str.w	ip, [sp, #-4]!
     8b4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     8b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     8bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     8c0:	bf18      	it	ne
     8c2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
     8c6:	d01b      	beq.n	900 <__cmpdf2+0x54>
     8c8:	b001      	add	sp, #4
     8ca:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
     8ce:	bf0c      	ite	eq
     8d0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
     8d4:	ea91 0f03 	teqne	r1, r3
     8d8:	bf02      	ittt	eq
     8da:	ea90 0f02 	teqeq	r0, r2
     8de:	2000      	moveq	r0, #0
     8e0:	4770      	bxeq	lr
     8e2:	f110 0f00 	cmn.w	r0, #0
     8e6:	ea91 0f03 	teq	r1, r3
     8ea:	bf58      	it	pl
     8ec:	4299      	cmppl	r1, r3
     8ee:	bf08      	it	eq
     8f0:	4290      	cmpeq	r0, r2
     8f2:	bf2c      	ite	cs
     8f4:	17d8      	asrcs	r0, r3, #31
     8f6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
     8fa:	f040 0001 	orr.w	r0, r0, #1
     8fe:	4770      	bx	lr
     900:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     904:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     908:	d102      	bne.n	910 <__cmpdf2+0x64>
     90a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
     90e:	d107      	bne.n	920 <__cmpdf2+0x74>
     910:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     914:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     918:	d1d6      	bne.n	8c8 <__cmpdf2+0x1c>
     91a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
     91e:	d0d3      	beq.n	8c8 <__cmpdf2+0x1c>
     920:	f85d 0b04 	ldr.w	r0, [sp], #4
     924:	4770      	bx	lr
     926:	bf00      	nop

00000928 <__aeabi_cdrcmple>:
     928:	4684      	mov	ip, r0
     92a:	4610      	mov	r0, r2
     92c:	4662      	mov	r2, ip
     92e:	468c      	mov	ip, r1
     930:	4619      	mov	r1, r3
     932:	4663      	mov	r3, ip
     934:	e000      	b.n	938 <__aeabi_cdcmpeq>
     936:	bf00      	nop

00000938 <__aeabi_cdcmpeq>:
     938:	b501      	push	{r0, lr}
     93a:	f7ff ffb7 	bl	8ac <__cmpdf2>
     93e:	2800      	cmp	r0, #0
     940:	bf48      	it	mi
     942:	f110 0f00 	cmnmi.w	r0, #0
     946:	bd01      	pop	{r0, pc}

00000948 <__aeabi_dcmpeq>:
     948:	f84d ed08 	str.w	lr, [sp, #-8]!
     94c:	f7ff fff4 	bl	938 <__aeabi_cdcmpeq>
     950:	bf0c      	ite	eq
     952:	2001      	moveq	r0, #1
     954:	2000      	movne	r0, #0
     956:	f85d fb08 	ldr.w	pc, [sp], #8
     95a:	bf00      	nop

0000095c <__aeabi_dcmplt>:
     95c:	f84d ed08 	str.w	lr, [sp, #-8]!
     960:	f7ff ffea 	bl	938 <__aeabi_cdcmpeq>
     964:	bf34      	ite	cc
     966:	2001      	movcc	r0, #1
     968:	2000      	movcs	r0, #0
     96a:	f85d fb08 	ldr.w	pc, [sp], #8
     96e:	bf00      	nop

00000970 <__aeabi_dcmple>:
     970:	f84d ed08 	str.w	lr, [sp, #-8]!
     974:	f7ff ffe0 	bl	938 <__aeabi_cdcmpeq>
     978:	bf94      	ite	ls
     97a:	2001      	movls	r0, #1
     97c:	2000      	movhi	r0, #0
     97e:	f85d fb08 	ldr.w	pc, [sp], #8
     982:	bf00      	nop

00000984 <__aeabi_dcmpge>:
     984:	f84d ed08 	str.w	lr, [sp, #-8]!
     988:	f7ff ffce 	bl	928 <__aeabi_cdrcmple>
     98c:	bf94      	ite	ls
     98e:	2001      	movls	r0, #1
     990:	2000      	movhi	r0, #0
     992:	f85d fb08 	ldr.w	pc, [sp], #8
     996:	bf00      	nop

00000998 <__aeabi_dcmpgt>:
     998:	f84d ed08 	str.w	lr, [sp, #-8]!
     99c:	f7ff ffc4 	bl	928 <__aeabi_cdrcmple>
     9a0:	bf34      	ite	cc
     9a2:	2001      	movcc	r0, #1
     9a4:	2000      	movcs	r0, #0
     9a6:	f85d fb08 	ldr.w	pc, [sp], #8
     9aa:	bf00      	nop

000009ac <__aeabi_d2iz>:
     9ac:	ea4f 0241 	mov.w	r2, r1, lsl #1
     9b0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
     9b4:	d215      	bcs.n	9e2 <__aeabi_d2iz+0x36>
     9b6:	d511      	bpl.n	9dc <__aeabi_d2iz+0x30>
     9b8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
     9bc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
     9c0:	d912      	bls.n	9e8 <__aeabi_d2iz+0x3c>
     9c2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     9c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     9ca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
     9ce:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     9d2:	fa23 f002 	lsr.w	r0, r3, r2
     9d6:	bf18      	it	ne
     9d8:	4240      	negne	r0, r0
     9da:	4770      	bx	lr
     9dc:	f04f 0000 	mov.w	r0, #0
     9e0:	4770      	bx	lr
     9e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
     9e6:	d105      	bne.n	9f4 <__aeabi_d2iz+0x48>
     9e8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
     9ec:	bf08      	it	eq
     9ee:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
     9f2:	4770      	bx	lr
     9f4:	f04f 0000 	mov.w	r0, #0
     9f8:	4770      	bx	lr
     9fa:	bf00      	nop

000009fc <__aeabi_d2uiz>:
     9fc:	004a      	lsls	r2, r1, #1
     9fe:	d211      	bcs.n	a24 <__aeabi_d2uiz+0x28>
     a00:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
     a04:	d211      	bcs.n	a2a <__aeabi_d2uiz+0x2e>
     a06:	d50d      	bpl.n	a24 <__aeabi_d2uiz+0x28>
     a08:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
     a0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
     a10:	d40e      	bmi.n	a30 <__aeabi_d2uiz+0x34>
     a12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     a16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     a1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
     a1e:	fa23 f002 	lsr.w	r0, r3, r2
     a22:	4770      	bx	lr
     a24:	f04f 0000 	mov.w	r0, #0
     a28:	4770      	bx	lr
     a2a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
     a2e:	d102      	bne.n	a36 <__aeabi_d2uiz+0x3a>
     a30:	f04f 30ff 	mov.w	r0, #4294967295
     a34:	4770      	bx	lr
     a36:	f04f 0000 	mov.w	r0, #0
     a3a:	4770      	bx	lr

00000a3c <__aeabi_d2f>:
     a3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
     a40:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
     a44:	bf24      	itt	cs
     a46:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
     a4a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
     a4e:	d90d      	bls.n	a6c <__aeabi_d2f+0x30>
     a50:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     a54:	ea4f 02c0 	mov.w	r2, r0, lsl #3
     a58:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
     a5c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
     a60:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
     a64:	bf08      	it	eq
     a66:	f020 0001 	biceq.w	r0, r0, #1
     a6a:	4770      	bx	lr
     a6c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
     a70:	d121      	bne.n	ab6 <__aeabi_d2f+0x7a>
     a72:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
     a76:	bfbc      	itt	lt
     a78:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
     a7c:	4770      	bxlt	lr
     a7e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     a82:	ea4f 5252 	mov.w	r2, r2, lsr #21
     a86:	f1c2 0218 	rsb	r2, r2, #24
     a8a:	f1c2 0c20 	rsb	ip, r2, #32
     a8e:	fa10 f30c 	lsls.w	r3, r0, ip
     a92:	fa20 f002 	lsr.w	r0, r0, r2
     a96:	bf18      	it	ne
     a98:	f040 0001 	orrne.w	r0, r0, #1
     a9c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     aa0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
     aa4:	fa03 fc0c 	lsl.w	ip, r3, ip
     aa8:	ea40 000c 	orr.w	r0, r0, ip
     aac:	fa23 f302 	lsr.w	r3, r3, r2
     ab0:	ea4f 0343 	mov.w	r3, r3, lsl #1
     ab4:	e7cc      	b.n	a50 <__aeabi_d2f+0x14>
     ab6:	ea7f 5362 	mvns.w	r3, r2, asr #21
     aba:	d107      	bne.n	acc <__aeabi_d2f+0x90>
     abc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
     ac0:	bf1e      	ittt	ne
     ac2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
     ac6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
     aca:	4770      	bxne	lr
     acc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
     ad0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     ad4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     ad8:	4770      	bx	lr
     ada:	bf00      	nop

00000adc <__aeabi_uldivmod>:
     adc:	b953      	cbnz	r3, af4 <__aeabi_uldivmod+0x18>
     ade:	b94a      	cbnz	r2, af4 <__aeabi_uldivmod+0x18>
     ae0:	2900      	cmp	r1, #0
     ae2:	bf08      	it	eq
     ae4:	2800      	cmpeq	r0, #0
     ae6:	bf1c      	itt	ne
     ae8:	f04f 31ff 	movne.w	r1, #4294967295
     aec:	f04f 30ff 	movne.w	r0, #4294967295
     af0:	f000 b80c 	b.w	b0c <__aeabi_idiv0>
     af4:	f1ad 0c08 	sub.w	ip, sp, #8
     af8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     afc:	f000 f81e 	bl	b3c <__udivmoddi4>
     b00:	f8dd e004 	ldr.w	lr, [sp, #4]
     b04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     b08:	b004      	add	sp, #16
     b0a:	4770      	bx	lr

00000b0c <__aeabi_idiv0>:
     b0c:	4770      	bx	lr
     b0e:	bf00      	nop

00000b10 <__aeabi_dcmpun>:
     b10:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     b14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     b18:	d102      	bne.n	b20 <__aeabi_dcmpun+0x10>
     b1a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
     b1e:	d10a      	bne.n	b36 <__aeabi_dcmpun+0x26>
     b20:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     b24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     b28:	d102      	bne.n	b30 <__aeabi_dcmpun+0x20>
     b2a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
     b2e:	d102      	bne.n	b36 <__aeabi_dcmpun+0x26>
     b30:	f04f 0000 	mov.w	r0, #0
     b34:	4770      	bx	lr
     b36:	f04f 0001 	mov.w	r0, #1
     b3a:	4770      	bx	lr

00000b3c <__udivmoddi4>:
     b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     b40:	4686      	mov	lr, r0
     b42:	468c      	mov	ip, r1
     b44:	4608      	mov	r0, r1
     b46:	9e08      	ldr	r6, [sp, #32]
     b48:	4615      	mov	r5, r2
     b4a:	4674      	mov	r4, lr
     b4c:	4619      	mov	r1, r3
     b4e:	2b00      	cmp	r3, #0
     b50:	f040 80c2 	bne.w	cd8 <__udivmoddi4+0x19c>
     b54:	4285      	cmp	r5, r0
     b56:	fab2 f282 	clz	r2, r2
     b5a:	d945      	bls.n	be8 <__udivmoddi4+0xac>
     b5c:	b14a      	cbz	r2, b72 <__udivmoddi4+0x36>
     b5e:	f1c2 0320 	rsb	r3, r2, #32
     b62:	fa00 fc02 	lsl.w	ip, r0, r2
     b66:	fa2e f303 	lsr.w	r3, lr, r3
     b6a:	4095      	lsls	r5, r2
     b6c:	ea43 0c0c 	orr.w	ip, r3, ip
     b70:	4094      	lsls	r4, r2
     b72:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     b76:	b2a8      	uxth	r0, r5
     b78:	fbbc f8fe 	udiv	r8, ip, lr
     b7c:	0c23      	lsrs	r3, r4, #16
     b7e:	fb0e cc18 	mls	ip, lr, r8, ip
     b82:	fb08 f900 	mul.w	r9, r8, r0
     b86:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
     b8a:	4599      	cmp	r9, r3
     b8c:	d928      	bls.n	be0 <__udivmoddi4+0xa4>
     b8e:	18eb      	adds	r3, r5, r3
     b90:	f108 37ff 	add.w	r7, r8, #4294967295
     b94:	d204      	bcs.n	ba0 <__udivmoddi4+0x64>
     b96:	4599      	cmp	r9, r3
     b98:	d902      	bls.n	ba0 <__udivmoddi4+0x64>
     b9a:	f1a8 0702 	sub.w	r7, r8, #2
     b9e:	442b      	add	r3, r5
     ba0:	eba3 0309 	sub.w	r3, r3, r9
     ba4:	b2a4      	uxth	r4, r4
     ba6:	fbb3 fcfe 	udiv	ip, r3, lr
     baa:	fb0e 331c 	mls	r3, lr, ip, r3
     bae:	fb0c f000 	mul.w	r0, ip, r0
     bb2:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     bb6:	42a0      	cmp	r0, r4
     bb8:	d914      	bls.n	be4 <__udivmoddi4+0xa8>
     bba:	192c      	adds	r4, r5, r4
     bbc:	f10c 33ff 	add.w	r3, ip, #4294967295
     bc0:	d204      	bcs.n	bcc <__udivmoddi4+0x90>
     bc2:	42a0      	cmp	r0, r4
     bc4:	d902      	bls.n	bcc <__udivmoddi4+0x90>
     bc6:	f1ac 0302 	sub.w	r3, ip, #2
     bca:	442c      	add	r4, r5
     bcc:	1a24      	subs	r4, r4, r0
     bce:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
     bd2:	b11e      	cbz	r6, bdc <__udivmoddi4+0xa0>
     bd4:	40d4      	lsrs	r4, r2
     bd6:	2300      	movs	r3, #0
     bd8:	6034      	str	r4, [r6, #0]
     bda:	6073      	str	r3, [r6, #4]
     bdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     be0:	4647      	mov	r7, r8
     be2:	e7dd      	b.n	ba0 <__udivmoddi4+0x64>
     be4:	4663      	mov	r3, ip
     be6:	e7f1      	b.n	bcc <__udivmoddi4+0x90>
     be8:	bb92      	cbnz	r2, c50 <__udivmoddi4+0x114>
     bea:	1b43      	subs	r3, r0, r5
     bec:	2101      	movs	r1, #1
     bee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     bf2:	b2af      	uxth	r7, r5
     bf4:	fbb3 fcfe 	udiv	ip, r3, lr
     bf8:	0c20      	lsrs	r0, r4, #16
     bfa:	fb0e 331c 	mls	r3, lr, ip, r3
     bfe:	fb0c f807 	mul.w	r8, ip, r7
     c02:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     c06:	4598      	cmp	r8, r3
     c08:	d962      	bls.n	cd0 <__udivmoddi4+0x194>
     c0a:	18eb      	adds	r3, r5, r3
     c0c:	f10c 30ff 	add.w	r0, ip, #4294967295
     c10:	d204      	bcs.n	c1c <__udivmoddi4+0xe0>
     c12:	4598      	cmp	r8, r3
     c14:	d902      	bls.n	c1c <__udivmoddi4+0xe0>
     c16:	f1ac 0002 	sub.w	r0, ip, #2
     c1a:	442b      	add	r3, r5
     c1c:	eba3 0308 	sub.w	r3, r3, r8
     c20:	b2a4      	uxth	r4, r4
     c22:	fbb3 fcfe 	udiv	ip, r3, lr
     c26:	fb0e 331c 	mls	r3, lr, ip, r3
     c2a:	fb0c f707 	mul.w	r7, ip, r7
     c2e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     c32:	42a7      	cmp	r7, r4
     c34:	d94e      	bls.n	cd4 <__udivmoddi4+0x198>
     c36:	192c      	adds	r4, r5, r4
     c38:	f10c 33ff 	add.w	r3, ip, #4294967295
     c3c:	d204      	bcs.n	c48 <__udivmoddi4+0x10c>
     c3e:	42a7      	cmp	r7, r4
     c40:	d902      	bls.n	c48 <__udivmoddi4+0x10c>
     c42:	f1ac 0302 	sub.w	r3, ip, #2
     c46:	442c      	add	r4, r5
     c48:	1be4      	subs	r4, r4, r7
     c4a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     c4e:	e7c0      	b.n	bd2 <__udivmoddi4+0x96>
     c50:	f1c2 0320 	rsb	r3, r2, #32
     c54:	fa20 f103 	lsr.w	r1, r0, r3
     c58:	4095      	lsls	r5, r2
     c5a:	4090      	lsls	r0, r2
     c5c:	fa2e f303 	lsr.w	r3, lr, r3
     c60:	4303      	orrs	r3, r0
     c62:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     c66:	b2af      	uxth	r7, r5
     c68:	fbb1 fcfe 	udiv	ip, r1, lr
     c6c:	fb0e 101c 	mls	r0, lr, ip, r1
     c70:	0c19      	lsrs	r1, r3, #16
     c72:	fb0c f807 	mul.w	r8, ip, r7
     c76:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     c7a:	4588      	cmp	r8, r1
     c7c:	fa04 f402 	lsl.w	r4, r4, r2
     c80:	d922      	bls.n	cc8 <__udivmoddi4+0x18c>
     c82:	1869      	adds	r1, r5, r1
     c84:	f10c 30ff 	add.w	r0, ip, #4294967295
     c88:	d204      	bcs.n	c94 <__udivmoddi4+0x158>
     c8a:	4588      	cmp	r8, r1
     c8c:	d902      	bls.n	c94 <__udivmoddi4+0x158>
     c8e:	f1ac 0002 	sub.w	r0, ip, #2
     c92:	4429      	add	r1, r5
     c94:	eba1 0108 	sub.w	r1, r1, r8
     c98:	b29b      	uxth	r3, r3
     c9a:	fbb1 fcfe 	udiv	ip, r1, lr
     c9e:	fb0e 111c 	mls	r1, lr, ip, r1
     ca2:	fb0c f707 	mul.w	r7, ip, r7
     ca6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     caa:	429f      	cmp	r7, r3
     cac:	d90e      	bls.n	ccc <__udivmoddi4+0x190>
     cae:	18eb      	adds	r3, r5, r3
     cb0:	f10c 31ff 	add.w	r1, ip, #4294967295
     cb4:	d204      	bcs.n	cc0 <__udivmoddi4+0x184>
     cb6:	429f      	cmp	r7, r3
     cb8:	d902      	bls.n	cc0 <__udivmoddi4+0x184>
     cba:	f1ac 0102 	sub.w	r1, ip, #2
     cbe:	442b      	add	r3, r5
     cc0:	1bdb      	subs	r3, r3, r7
     cc2:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     cc6:	e792      	b.n	bee <__udivmoddi4+0xb2>
     cc8:	4660      	mov	r0, ip
     cca:	e7e3      	b.n	c94 <__udivmoddi4+0x158>
     ccc:	4661      	mov	r1, ip
     cce:	e7f7      	b.n	cc0 <__udivmoddi4+0x184>
     cd0:	4660      	mov	r0, ip
     cd2:	e7a3      	b.n	c1c <__udivmoddi4+0xe0>
     cd4:	4663      	mov	r3, ip
     cd6:	e7b7      	b.n	c48 <__udivmoddi4+0x10c>
     cd8:	4283      	cmp	r3, r0
     cda:	d906      	bls.n	cea <__udivmoddi4+0x1ae>
     cdc:	b916      	cbnz	r6, ce4 <__udivmoddi4+0x1a8>
     cde:	2100      	movs	r1, #0
     ce0:	4608      	mov	r0, r1
     ce2:	e77b      	b.n	bdc <__udivmoddi4+0xa0>
     ce4:	e9c6 e000 	strd	lr, r0, [r6]
     ce8:	e7f9      	b.n	cde <__udivmoddi4+0x1a2>
     cea:	fab3 f783 	clz	r7, r3
     cee:	b98f      	cbnz	r7, d14 <__udivmoddi4+0x1d8>
     cf0:	4283      	cmp	r3, r0
     cf2:	d301      	bcc.n	cf8 <__udivmoddi4+0x1bc>
     cf4:	4572      	cmp	r2, lr
     cf6:	d808      	bhi.n	d0a <__udivmoddi4+0x1ce>
     cf8:	ebbe 0402 	subs.w	r4, lr, r2
     cfc:	eb60 0303 	sbc.w	r3, r0, r3
     d00:	2001      	movs	r0, #1
     d02:	469c      	mov	ip, r3
     d04:	b91e      	cbnz	r6, d0e <__udivmoddi4+0x1d2>
     d06:	2100      	movs	r1, #0
     d08:	e768      	b.n	bdc <__udivmoddi4+0xa0>
     d0a:	4638      	mov	r0, r7
     d0c:	e7fa      	b.n	d04 <__udivmoddi4+0x1c8>
     d0e:	e9c6 4c00 	strd	r4, ip, [r6]
     d12:	e7f8      	b.n	d06 <__udivmoddi4+0x1ca>
     d14:	f1c7 0c20 	rsb	ip, r7, #32
     d18:	40bb      	lsls	r3, r7
     d1a:	fa22 f40c 	lsr.w	r4, r2, ip
     d1e:	431c      	orrs	r4, r3
     d20:	fa2e f10c 	lsr.w	r1, lr, ip
     d24:	fa20 f30c 	lsr.w	r3, r0, ip
     d28:	40b8      	lsls	r0, r7
     d2a:	4301      	orrs	r1, r0
     d2c:	ea4f 4914 	mov.w	r9, r4, lsr #16
     d30:	fa0e f507 	lsl.w	r5, lr, r7
     d34:	fbb3 f8f9 	udiv	r8, r3, r9
     d38:	fa1f fe84 	uxth.w	lr, r4
     d3c:	fb09 3018 	mls	r0, r9, r8, r3
     d40:	0c0b      	lsrs	r3, r1, #16
     d42:	fb08 fa0e 	mul.w	sl, r8, lr
     d46:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
     d4a:	459a      	cmp	sl, r3
     d4c:	fa02 f207 	lsl.w	r2, r2, r7
     d50:	d940      	bls.n	dd4 <__udivmoddi4+0x298>
     d52:	18e3      	adds	r3, r4, r3
     d54:	f108 30ff 	add.w	r0, r8, #4294967295
     d58:	d204      	bcs.n	d64 <__udivmoddi4+0x228>
     d5a:	459a      	cmp	sl, r3
     d5c:	d902      	bls.n	d64 <__udivmoddi4+0x228>
     d5e:	f1a8 0002 	sub.w	r0, r8, #2
     d62:	4423      	add	r3, r4
     d64:	eba3 030a 	sub.w	r3, r3, sl
     d68:	b289      	uxth	r1, r1
     d6a:	fbb3 f8f9 	udiv	r8, r3, r9
     d6e:	fb09 3318 	mls	r3, r9, r8, r3
     d72:	fb08 fe0e 	mul.w	lr, r8, lr
     d76:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
     d7a:	458e      	cmp	lr, r1
     d7c:	d92c      	bls.n	dd8 <__udivmoddi4+0x29c>
     d7e:	1861      	adds	r1, r4, r1
     d80:	f108 33ff 	add.w	r3, r8, #4294967295
     d84:	d204      	bcs.n	d90 <__udivmoddi4+0x254>
     d86:	458e      	cmp	lr, r1
     d88:	d902      	bls.n	d90 <__udivmoddi4+0x254>
     d8a:	f1a8 0302 	sub.w	r3, r8, #2
     d8e:	4421      	add	r1, r4
     d90:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     d94:	fba0 9802 	umull	r9, r8, r0, r2
     d98:	eba1 010e 	sub.w	r1, r1, lr
     d9c:	4541      	cmp	r1, r8
     d9e:	46ce      	mov	lr, r9
     da0:	4643      	mov	r3, r8
     da2:	d302      	bcc.n	daa <__udivmoddi4+0x26e>
     da4:	d106      	bne.n	db4 <__udivmoddi4+0x278>
     da6:	454d      	cmp	r5, r9
     da8:	d204      	bcs.n	db4 <__udivmoddi4+0x278>
     daa:	ebb9 0e02 	subs.w	lr, r9, r2
     dae:	eb68 0304 	sbc.w	r3, r8, r4
     db2:	3801      	subs	r0, #1
     db4:	2e00      	cmp	r6, #0
     db6:	d0a6      	beq.n	d06 <__udivmoddi4+0x1ca>
     db8:	ebb5 020e 	subs.w	r2, r5, lr
     dbc:	eb61 0103 	sbc.w	r1, r1, r3
     dc0:	fa01 fc0c 	lsl.w	ip, r1, ip
     dc4:	fa22 f307 	lsr.w	r3, r2, r7
     dc8:	ea4c 0303 	orr.w	r3, ip, r3
     dcc:	40f9      	lsrs	r1, r7
     dce:	e9c6 3100 	strd	r3, r1, [r6]
     dd2:	e798      	b.n	d06 <__udivmoddi4+0x1ca>
     dd4:	4640      	mov	r0, r8
     dd6:	e7c5      	b.n	d64 <__udivmoddi4+0x228>
     dd8:	4643      	mov	r3, r8
     dda:	e7d9      	b.n	d90 <__udivmoddi4+0x254>

00000ddc <strlen>:
     ddc:	4603      	mov	r3, r0
     dde:	f813 2b01 	ldrb.w	r2, [r3], #1
     de2:	2a00      	cmp	r2, #0
     de4:	d1fb      	bne.n	dde <strlen+0x2>
     de6:	1a18      	subs	r0, r3, r0
     de8:	3801      	subs	r0, #1
     dea:	4770      	bx	lr
     dec:	0000      	movs	r0, r0
	...

00000df0 <ExtractAlphaParameters>:
}

//------------------------------------------------------------------------------

static void ExtractAlphaParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
     df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     df4:	ed2d 8b04 	vpush	{d8-d9}
    uint8_t accRemScale;
    float alphaTemp[768];
    float temp;
    

    accRemScale = MLX90640_NIBBLE1(eeData[32]);
     df8:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
    accColumnScale = MLX90640_NIBBLE2(eeData[32]);
    accRowScale = MLX90640_NIBBLE3(eeData[32]);
    alphaScale = MLX90640_NIBBLE4(eeData[32]) + 30;
    alphaRef = eeData[33];
     dfc:	4606      	mov	r6, r0
{
     dfe:	f6ad 4dfc 	subw	sp, sp, #3324	; 0xcfc
    accColumnScale = MLX90640_NIBBLE2(eeData[32]);
     e02:	f3c3 1203 	ubfx	r2, r3, #4, #4
    accRemScale = MLX90640_NIBBLE1(eeData[32]);
     e06:	f003 050f 	and.w	r5, r3, #15
    accRowScale = MLX90640_NIBBLE3(eeData[32]);
     e0a:	f3c3 2b03 	ubfx	fp, r3, #8, #4
    alphaScale = MLX90640_NIBBLE4(eeData[32]) + 30;
     e0e:	0b1b      	lsrs	r3, r3, #12
     e10:	331e      	adds	r3, #30
     e12:	af06      	add	r7, sp, #24
    alphaRef = eeData[33];
     e14:	f836 af42 	ldrh.w	sl, [r6, #66]!
    accColumnScale = MLX90640_NIBBLE2(eeData[32]);
     e18:	9204      	str	r2, [sp, #16]
    alphaScale = MLX90640_NIBBLE4(eeData[32]) + 30;
     e1a:	9305      	str	r3, [sp, #20]
{
     e1c:	460c      	mov	r4, r1
     e1e:	f100 034e 	add.w	r3, r0, #78	; 0x4e
    alphaRef = eeData[33];
     e22:	463a      	mov	r2, r7
    
    for(int i = 0; i < 6; i++)
    {
        p = i * 4;
        accRow[p + 0] = MLX90640_NIBBLE1(eeData[34 + i]);
     e24:	f836 1f02 	ldrh.w	r1, [r6, #2]!
     e28:	f001 0c0f 	and.w	ip, r1, #15
     e2c:	f8c2 c000 	str.w	ip, [r2]
        accRow[p + 1] = MLX90640_NIBBLE2(eeData[34 + i]);
     e30:	f3c1 1c03 	ubfx	ip, r1, #4, #4
     e34:	f8c2 c004 	str.w	ip, [r2, #4]
    for(int i = 0; i < 6; i++)
     e38:	429e      	cmp	r6, r3
        accRow[p + 2] = MLX90640_NIBBLE3(eeData[34 + i]);
     e3a:	f3c1 2c03 	ubfx	ip, r1, #8, #4
        accRow[p + 3] = MLX90640_NIBBLE4(eeData[34 + i]);
     e3e:	ea4f 3111 	mov.w	r1, r1, lsr #12
        accRow[p + 2] = MLX90640_NIBBLE3(eeData[34 + i]);
     e42:	f8c2 c008 	str.w	ip, [r2, #8]
        accRow[p + 3] = MLX90640_NIBBLE4(eeData[34 + i]);
     e46:	60d1      	str	r1, [r2, #12]
    for(int i = 0; i < 6; i++)
     e48:	f102 0210 	add.w	r2, r2, #16
     e4c:	d1ea      	bne.n	e24 <ExtractAlphaParameters+0x34>
    }
    
    for(int i = 0; i < MLX90640_LINE_NUM; i++)
     e4e:	2100      	movs	r1, #0
    {
        if (accRow[i] > 7)
     e50:	f857 2b04 	ldr.w	r2, [r7], #4
     e54:	2a07      	cmp	r2, #7
        {
            accRow[i] = accRow[i] - 16;
     e56:	bfc8      	it	gt
     e58:	3a10      	subgt	r2, #16
    for(int i = 0; i < MLX90640_LINE_NUM; i++)
     e5a:	f101 0101 	add.w	r1, r1, #1
            accRow[i] = accRow[i] - 16;
     e5e:	bfc8      	it	gt
     e60:	f847 2c04 	strgt.w	r2, [r7, #-4]
    for(int i = 0; i < MLX90640_LINE_NUM; i++)
     e64:	2918      	cmp	r1, #24
     e66:	d1f3      	bne.n	e50 <ExtractAlphaParameters+0x60>
     e68:	ae1e      	add	r6, sp, #120	; 0x78
     e6a:	f100 075e 	add.w	r7, r0, #94	; 0x5e
     e6e:	4632      	mov	r2, r6
    }
    
    for(int i = 0; i < 8; i++)
    {
        p = i * 4;
        accColumn[p + 0] = MLX90640_NIBBLE1(eeData[40 + i]);
     e70:	f833 1f02 	ldrh.w	r1, [r3, #2]!
     e74:	f001 0c0f 	and.w	ip, r1, #15
     e78:	f8c2 c000 	str.w	ip, [r2]
        accColumn[p + 1] = MLX90640_NIBBLE2(eeData[40 + i]);
     e7c:	f3c1 1c03 	ubfx	ip, r1, #4, #4
     e80:	f8c2 c004 	str.w	ip, [r2, #4]
    for(int i = 0; i < 8; i++)
     e84:	429f      	cmp	r7, r3
        accColumn[p + 2] = MLX90640_NIBBLE3(eeData[40 + i]);
     e86:	f3c1 2c03 	ubfx	ip, r1, #8, #4
        accColumn[p + 3] = MLX90640_NIBBLE4(eeData[40 + i]);
     e8a:	ea4f 3111 	mov.w	r1, r1, lsr #12
        accColumn[p + 2] = MLX90640_NIBBLE3(eeData[40 + i]);
     e8e:	f8c2 c008 	str.w	ip, [r2, #8]
        accColumn[p + 3] = MLX90640_NIBBLE4(eeData[40 + i]);
     e92:	60d1      	str	r1, [r2, #12]
    for(int i = 0; i < 8; i++)
     e94:	f102 0210 	add.w	r2, r2, #16
     e98:	d1ea      	bne.n	e70 <ExtractAlphaParameters+0x80>
    }
    
    for(int i = 0; i < MLX90640_COLUMN_NUM; i++)
     e9a:	2200      	movs	r2, #0
    {
        if (accColumn[i] > 7)
     e9c:	f856 3b04 	ldr.w	r3, [r6], #4
     ea0:	2b07      	cmp	r3, #7
        {
            accColumn[i] = accColumn[i] - 16;
     ea2:	bfc8      	it	gt
     ea4:	3b10      	subgt	r3, #16
    for(int i = 0; i < MLX90640_COLUMN_NUM; i++)
     ea6:	f102 0201 	add.w	r2, r2, #1
            accColumn[i] = accColumn[i] - 16;
     eaa:	bfc8      	it	gt
     eac:	f846 3c04 	strgt.w	r3, [r6, #-4]
    for(int i = 0; i < MLX90640_COLUMN_NUM; i++)
     eb0:	2a20      	cmp	r2, #32
     eb2:	d1f3      	bne.n	e9c <ExtractAlphaParameters+0xac>
            alphaTemp[p] = (eeData[64 + p] & 0x03F0) >> 4;
            if (alphaTemp[p] > 31)
            {
                alphaTemp[p] = alphaTemp[p] - 64;
            }
            alphaTemp[p] = alphaTemp[p]*(1 << accRemScale);
     eb4:	2301      	movs	r3, #1
     eb6:	40ab      	lsls	r3, r5
     eb8:	ee07 3a90 	vmov	s15, r3
            alphaTemp[p] = (alphaRef + (accRow[i] << accRowScale) + (accColumn[j] << accColumnScale) + alphaTemp[p]);
            alphaTemp[p] = alphaTemp[p] / POW2(alphaScale);
     ebc:	ed9f 9b6c 	vldr	d9, [pc, #432]	; 1070 <CONFIG_FPROTECT_BLOCK_SIZE+0x70>
            alphaTemp[p] = alphaTemp[p]*(1 << accRemScale);
     ec0:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
                alphaTemp[p] = alphaTemp[p] - 64;
     ec4:	eddf 8a70 	vldr	s17, [pc, #448]	; 1088 <CONFIG_FPROTECT_BLOCK_SIZE+0x88>
     ec8:	f100 057e 	add.w	r5, r0, #126	; 0x7e
    for(int i = 0; i < MLX90640_LINE_NUM; i++)
     ecc:	2700      	movs	r7, #0
        for(int j = 0; j < MLX90640_COLUMN_NUM; j ++)
     ece:	ab3e      	add	r3, sp, #248	; 0xf8
     ed0:	9301      	str	r3, [sp, #4]
     ed2:	eb03 16c7 	add.w	r6, r3, r7, lsl #7
    for(int i = 0; i < MLX90640_COLUMN_NUM; i++)
     ed6:	46a9      	mov	r9, r5
        for(int j = 0; j < MLX90640_COLUMN_NUM; j ++)
     ed8:	f04f 0800 	mov.w	r8, #0
            alphaTemp[p] = (eeData[64 + p] & 0x03F0) >> 4;
     edc:	f839 3f02 	ldrh.w	r3, [r9, #2]!
     ee0:	f3c3 1305 	ubfx	r3, r3, #4, #6
     ee4:	ee07 3a90 	vmov	s15, r3
     ee8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
            if (alphaTemp[p] > 31)
     eec:	eeb3 7a0f 	vmov.f32	s14, #63	; 0x41f80000  31.0
     ef0:	eef4 7ac7 	vcmpe.f32	s15, s14
     ef4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                alphaTemp[p] = alphaTemp[p] - 64;
     ef8:	bfc8      	it	gt
     efa:	ee77 7ae8 	vsubgt.f32	s15, s15, s17
            alphaTemp[p] = (alphaRef + (accRow[i] << accRowScale) + (accColumn[j] << accColumnScale) + alphaTemp[p]);
     efe:	ab06      	add	r3, sp, #24
                alphaTemp[p] = alphaTemp[p] - 64;
     f00:	edc6 7a00 	vstr	s15, [r6]
            alphaTemp[p] = (alphaRef + (accRow[i] << accRowScale) + (accColumn[j] << accColumnScale) + alphaTemp[p]);
     f04:	aa1e      	add	r2, sp, #120	; 0x78
     f06:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
     f0a:	f852 2028 	ldr.w	r2, [r2, r8, lsl #2]
     f0e:	9904      	ldr	r1, [sp, #16]
            alphaTemp[p] = alphaTemp[p]*(1 << accRemScale);
     f10:	ed96 7a00 	vldr	s14, [r6]
            alphaTemp[p] = (alphaRef + (accRow[i] << accRowScale) + (accColumn[j] << accColumnScale) + alphaTemp[p]);
     f14:	fa03 f30b 	lsl.w	r3, r3, fp
     f18:	408a      	lsls	r2, r1
     f1a:	4453      	add	r3, sl
     f1c:	4413      	add	r3, r2
     f1e:	ee07 3a90 	vmov	s15, r3
     f22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
            alphaTemp[p] = alphaTemp[p] / POW2(alphaScale);
     f26:	ee47 7a08 	vmla.f32	s15, s14, s16
        for(int j = 0; j < MLX90640_COLUMN_NUM; j ++)
     f2a:	f108 0801 	add.w	r8, r8, #1
            alphaTemp[p] = alphaTemp[p] / POW2(alphaScale);
     f2e:	ee17 0a90 	vmov	r0, s15
     f32:	f7ff fa49 	bl	3c8 <__aeabi_f2d>
     f36:	e9cd 0102 	strd	r0, r1, [sp, #8]
     f3a:	9805      	ldr	r0, [sp, #20]
     f3c:	f7ff fa22 	bl	384 <__aeabi_ui2d>
     f40:	eeb0 0a49 	vmov.f32	s0, s18
     f44:	eef0 0a69 	vmov.f32	s1, s19
     f48:	ec41 0b11 	vmov	d1, r0, r1
     f4c:	f007 fc8e 	bl	886c <pow>
     f50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
     f54:	ec53 2b10 	vmov	r2, r3, d0
     f58:	f7ff fbb8 	bl	6cc <__aeabi_ddiv>
     f5c:	f7ff fd6e 	bl	a3c <__aeabi_d2f>
            alphaTemp[p] = alphaTemp[p] - mlx90640->tgc * (mlx90640->cpAlpha[0] + mlx90640->cpAlpha[1])/2;
     f60:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
     f64:	ed93 7a95 	vldr	s14, [r3, #596]	; 0x254
     f68:	edd3 7a94 	vldr	s15, [r3, #592]	; 0x250
     f6c:	ee77 7a87 	vadd.f32	s15, s15, s14
     f70:	ed94 7a06 	vldr	s14, [r4, #24]
            alphaTemp[p] = alphaTemp[p] / POW2(alphaScale);
     f74:	ee06 0a90 	vmov	s13, r0
            alphaTemp[p] = alphaTemp[p] - mlx90640->tgc * (mlx90640->cpAlpha[0] + mlx90640->cpAlpha[1])/2;
     f78:	ee67 7a87 	vmul.f32	s15, s15, s14
            alphaTemp[p] = SCALEALPHA/alphaTemp[p];
     f7c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
     f80:	ee47 6ac7 	vmls.f32	s13, s15, s14
     f84:	ee16 0a90 	vmov	r0, s13
     f88:	f7ff fa1e 	bl	3c8 <__aeabi_f2d>
     f8c:	4602      	mov	r2, r0
     f8e:	460b      	mov	r3, r1
     f90:	a139      	add	r1, pc, #228	; (adr r1, 1078 <CONFIG_FPROTECT_BLOCK_SIZE+0x78>)
     f92:	e9d1 0100 	ldrd	r0, r1, [r1]
     f96:	f7ff fb99 	bl	6cc <__aeabi_ddiv>
     f9a:	f7ff fd4f 	bl	a3c <__aeabi_d2f>
        for(int j = 0; j < MLX90640_COLUMN_NUM; j ++)
     f9e:	f1b8 0f20 	cmp.w	r8, #32
            alphaTemp[p] = SCALEALPHA/alphaTemp[p];
     fa2:	f846 0b04 	str.w	r0, [r6], #4
        for(int j = 0; j < MLX90640_COLUMN_NUM; j ++)
     fa6:	d199      	bne.n	edc <ExtractAlphaParameters+0xec>
    for(int i = 0; i < MLX90640_LINE_NUM; i++)
     fa8:	3701      	adds	r7, #1
     faa:	2f18      	cmp	r7, #24
     fac:	f105 0540 	add.w	r5, r5, #64	; 0x40
     fb0:	d18d      	bne.n	ece <ExtractAlphaParameters+0xde>
        }
    }
    
    temp = alphaTemp[0];
     fb2:	ed9d 8a3e 	vldr	s16, [sp, #248]	; 0xf8
    for(int i = 1; i < MLX90640_PIXEL_NUM; i++)
     fb6:	aa3f      	add	r2, sp, #252	; 0xfc
     fb8:	2301      	movs	r3, #1
    {
        if (alphaTemp[i] > temp)
     fba:	ecf2 7a01 	vldmia	r2!, {s15}
        {
            temp = alphaTemp[i];
     fbe:	eef4 7a48 	vcmp.f32	s15, s16
     fc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    for(int i = 1; i < MLX90640_PIXEL_NUM; i++)
     fc6:	f103 0301 	add.w	r3, r3, #1
            temp = alphaTemp[i];
     fca:	bfc8      	it	gt
     fcc:	eeb0 8a67 	vmovgt.f32	s16, s15
    for(int i = 1; i < MLX90640_PIXEL_NUM; i++)
     fd0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
     fd4:	d1f1      	bne.n	fba <ExtractAlphaParameters+0x1ca>
        }
    }
    
    alphaScale = 0;
    while(temp < 32767.4)
     fd6:	a72a      	add	r7, pc, #168	; (adr r7, 1080 <CONFIG_FPROTECT_BLOCK_SIZE+0x80>)
     fd8:	e9d7 6700 	ldrd	r6, r7, [r7]
     fdc:	2500      	movs	r5, #0
     fde:	ee18 0a10 	vmov	r0, s16
     fe2:	f7ff f9f1 	bl	3c8 <__aeabi_f2d>
     fe6:	4632      	mov	r2, r6
     fe8:	463b      	mov	r3, r7
     fea:	f105 0801 	add.w	r8, r5, #1
     fee:	f7ff fcb5 	bl	95c <__aeabi_dcmplt>
     ff2:	bbc8      	cbnz	r0, 1068 <CONFIG_FPROTECT_BLOCK_SIZE+0x68>
        alphaScale = alphaScale + 1;
    } 
    
    for(int i = 0; i < MLX90640_PIXEL_NUM; i++)
    {
        temp = alphaTemp[i] * POW2(alphaScale);        
     ff4:	ed9f 8b1e 	vldr	d8, [pc, #120]	; 1070 <CONFIG_FPROTECT_BLOCK_SIZE+0x70>
        mlx90640->alpha[i] = (temp + 0.5);        
     ff8:	f8df 9090 	ldr.w	r9, [pc, #144]	; 108c <CONFIG_FPROTECT_BLOCK_SIZE+0x8c>
     ffc:	b2ed      	uxtb	r5, r5
     ffe:	f104 0a48 	add.w	sl, r4, #72	; 0x48
    1002:	f504 6bc9 	add.w	fp, r4, #1608	; 0x648
    1006:	f04f 0800 	mov.w	r8, #0
        temp = alphaTemp[i] * POW2(alphaScale);        
    100a:	9b01      	ldr	r3, [sp, #4]
    100c:	f853 0b04 	ldr.w	r0, [r3], #4
    1010:	9301      	str	r3, [sp, #4]
    1012:	f7ff f9d9 	bl	3c8 <__aeabi_f2d>
    1016:	4606      	mov	r6, r0
    1018:	4628      	mov	r0, r5
    101a:	460f      	mov	r7, r1
    101c:	f7ff f9b2 	bl	384 <__aeabi_ui2d>
    1020:	eeb0 0a48 	vmov.f32	s0, s16
    1024:	eef0 0a68 	vmov.f32	s1, s17
    1028:	ec41 0b11 	vmov	d1, r0, r1
    102c:	f007 fc1e 	bl	886c <pow>
    1030:	4630      	mov	r0, r6
    1032:	ec53 2b10 	vmov	r2, r3, d0
    1036:	4639      	mov	r1, r7
    1038:	f7ff fa1e 	bl	478 <__aeabi_dmul>
    103c:	f7ff fcfe 	bl	a3c <__aeabi_d2f>
        mlx90640->alpha[i] = (temp + 0.5);        
    1040:	f7ff f9c2 	bl	3c8 <__aeabi_f2d>
    1044:	4642      	mov	r2, r8
    1046:	464b      	mov	r3, r9
    1048:	f7ff f860 	bl	10c <__adddf3>
    104c:	f7ff fcd6 	bl	9fc <__aeabi_d2uiz>
    1050:	f82a 0f02 	strh.w	r0, [sl, #2]!
    for(int i = 0; i < MLX90640_PIXEL_NUM; i++)
    1054:	45d3      	cmp	fp, sl
    1056:	d1d8      	bne.n	100a <CONFIG_FPROTECT_BLOCK_SIZE+0xa>
        
    } 
    
    mlx90640->alphaScale = alphaScale;      
    1058:	f884 564a 	strb.w	r5, [r4, #1610]	; 0x64a
   
}
    105c:	f60d 4dfc 	addw	sp, sp, #3324	; 0xcfc
    1060:	ecbd 8b04 	vpop	{d8-d9}
    1064:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = temp*2;
    1068:	ee38 8a08 	vadd.f32	s16, s16, s16
    106c:	4645      	mov	r5, r8
    106e:	e7b6      	b.n	fde <ExtractAlphaParameters+0x1ee>
    1070:	00000000 	.word	0x00000000
    1074:	40000000 	.word	0x40000000
    1078:	a0b5ed8d 	.word	0xa0b5ed8d
    107c:	3eb0c6f7 	.word	0x3eb0c6f7
    1080:	9999999a 	.word	0x9999999a
    1084:	40dfffd9 	.word	0x40dfffd9
    1088:	42800000 	.word	0x42800000
    108c:	3fe00000 	.word	0x3fe00000

00001090 <ExtractKtaPixelParameters>:
}

//------------------------------------------------------------------------------

static void ExtractKtaPixelParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
    1090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1094:	ed2d 8b04 	vpush	{d8-d9}
    1098:	f6ad 4d1c 	subw	sp, sp, #3100	; 0xc1c
    uint8_t ktaScale2;
    uint8_t split;
    float ktaTemp[768];
    float temp;
    
    KtaRC[0] = (int8_t)MLX90640_MS_BYTE(eeData[54]);;
    109c:	f10d 0814 	add.w	r8, sp, #20
    10a0:	f8b0 306c 	ldrh.w	r3, [r0, #108]	; 0x6c
    KtaRC[2] = (int8_t)MLX90640_LS_BYTE(eeData[54]);;
    10a4:	f888 3002 	strb.w	r3, [r8, #2]
    KtaRC[0] = (int8_t)MLX90640_MS_BYTE(eeData[54]);;
    10a8:	0a1a      	lsrs	r2, r3, #8
    KtaRC[1] = (int8_t)MLX90640_MS_BYTE(eeData[55]);;
    10aa:	f8b0 306e 	ldrh.w	r3, [r0, #110]	; 0x6e
    KtaRC[0] = (int8_t)MLX90640_MS_BYTE(eeData[54]);;
    10ae:	f888 2000 	strb.w	r2, [r8]
    KtaRC[3] = (int8_t)MLX90640_LS_BYTE(eeData[55]);;
    10b2:	f888 3003 	strb.w	r3, [r8, #3]
    KtaRC[1] = (int8_t)MLX90640_MS_BYTE(eeData[55]);;
    10b6:	0a1a      	lsrs	r2, r3, #8
      
    ktaScale1 = MLX90640_NIBBLE2(eeData[56]) + 8;
    10b8:	f8b0 3070 	ldrh.w	r3, [r0, #112]	; 0x70
    KtaRC[1] = (int8_t)MLX90640_MS_BYTE(eeData[55]);;
    10bc:	f888 2001 	strb.w	r2, [r8, #1]
    ktaScale1 = MLX90640_NIBBLE2(eeData[56]) + 8;
    10c0:	f3c3 1203 	ubfx	r2, r3, #4, #4
    10c4:	3208      	adds	r2, #8
    10c6:	9203      	str	r2, [sp, #12]
            ktaTemp[p] = (eeData[64 + p] & 0x000E) >> 1;
            if (ktaTemp[p] > 3)
            {
                ktaTemp[p] = ktaTemp[p] - 8;
            }
            ktaTemp[p] = ktaTemp[p] * (1 << ktaScale2);
    10c8:	f003 020f 	and.w	r2, r3, #15
    10cc:	2301      	movs	r3, #1
    10ce:	4093      	lsls	r3, r2
    10d0:	ee07 3a90 	vmov	s15, r3
            ktaTemp[p] = KtaRC[split] + ktaTemp[p];
            ktaTemp[p] = ktaTemp[p] / POW2(ktaScale1);
    10d4:	ed9f 9b76 	vldr	d9, [pc, #472]	; 12b0 <ExtractKtaPixelParameters+0x220>
    10d8:	ad06      	add	r5, sp, #24
            ktaTemp[p] = ktaTemp[p] * (1 << ktaScale2);
    10da:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
{
    10de:	468b      	mov	fp, r1
            ktaTemp[p] = ktaTemp[p] * (1 << ktaScale2);
    10e0:	46aa      	mov	sl, r5
    10e2:	f04f 0900 	mov.w	r9, #0
            ktaTemp[p] = (eeData[64 + p] & 0x000E) >> 1;
    10e6:	f100 0680 	add.w	r6, r0, #128	; 0x80
            if (ktaTemp[p] > 3)
    10ea:	eef0 8a08 	vmov.f32	s17, #8	; 0x40400000  3.0
{
    10ee:	4657      	mov	r7, sl
    10f0:	464c      	mov	r4, r9
            split = 2*(p/32 - (p/64)*2) + p%2;
    10f2:	f3c4 1340 	ubfx	r3, r4, #5, #1
    10f6:	f004 0201 	and.w	r2, r4, #1
    10fa:	eb02 0243 	add.w	r2, r2, r3, lsl #1
            ktaTemp[p] = (eeData[64 + p] & 0x000E) >> 1;
    10fe:	f836 3014 	ldrh.w	r3, [r6, r4, lsl #1]
    1102:	f3c3 0342 	ubfx	r3, r3, #1, #3
    1106:	ee07 3a90 	vmov	s15, r3
    110a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        for(int j = 0; j < MLX90640_COLUMN_NUM; j ++)
    110e:	3401      	adds	r4, #1
            if (ktaTemp[p] > 3)
    1110:	eef4 7ae8 	vcmpe.f32	s15, s17
    1114:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                ktaTemp[p] = ktaTemp[p] - 8;
    1118:	bfc4      	itt	gt
    111a:	eeb2 7a00 	vmovgt.f32	s14, #32	; 0x41000000  8.0
    111e:	ee77 7ac7 	vsubgt.f32	s15, s15, s14
    1122:	edc7 7a00 	vstr	s15, [r7]
            ktaTemp[p] = KtaRC[split] + ktaTemp[p];
    1126:	f918 3002 	ldrsb.w	r3, [r8, r2]
            ktaTemp[p] = ktaTemp[p] * (1 << ktaScale2);
    112a:	ed97 7a00 	vldr	s14, [r7]
            ktaTemp[p] = KtaRC[split] + ktaTemp[p];
    112e:	ee07 3a90 	vmov	s15, r3
    1132:	eef8 7ae7 	vcvt.f32.s32	s15, s15
            ktaTemp[p] = ktaTemp[p] / POW2(ktaScale1);
    1136:	ee47 7a08 	vmla.f32	s15, s14, s16
    113a:	ee17 0a90 	vmov	r0, s15
    113e:	f7ff f943 	bl	3c8 <__aeabi_f2d>
    1142:	e9cd 0100 	strd	r0, r1, [sp]
    1146:	9803      	ldr	r0, [sp, #12]
    1148:	f7ff f91c 	bl	384 <__aeabi_ui2d>
    114c:	eeb0 0a49 	vmov.f32	s0, s18
    1150:	eef0 0a69 	vmov.f32	s1, s19
    1154:	ec41 0b11 	vmov	d1, r0, r1
    1158:	f007 fb88 	bl	886c <pow>
    115c:	e9dd 0100 	ldrd	r0, r1, [sp]
    1160:	ec53 2b10 	vmov	r2, r3, d0
    1164:	f7ff fab2 	bl	6cc <__aeabi_ddiv>
    1168:	f7ff fc68 	bl	a3c <__aeabi_d2f>
    116c:	f109 0320 	add.w	r3, r9, #32
        for(int j = 0; j < MLX90640_COLUMN_NUM; j ++)
    1170:	42a3      	cmp	r3, r4
            ktaTemp[p] = ktaTemp[p] / POW2(ktaScale1);
    1172:	f847 0b04 	str.w	r0, [r7], #4
        for(int j = 0; j < MLX90640_COLUMN_NUM; j ++)
    1176:	d1bc      	bne.n	10f2 <ExtractKtaPixelParameters+0x62>
    for(int i = 0; i < MLX90640_LINE_NUM; i++)
    1178:	f5b4 7f40 	cmp.w	r4, #768	; 0x300
    117c:	f10a 0a80 	add.w	sl, sl, #128	; 0x80
    1180:	d001      	beq.n	1186 <ExtractKtaPixelParameters+0xf6>
    1182:	46a1      	mov	r9, r4
    1184:	e7b3      	b.n	10ee <ExtractKtaPixelParameters+0x5e>
            
        }
    }
    
    temp = fabs(ktaTemp[0]);
    1186:	6828      	ldr	r0, [r5, #0]
    1188:	f7ff f91e 	bl	3c8 <__aeabi_f2d>
    118c:	ec41 0b10 	vmov	d0, r0, r1
    1190:	f008 fd1a 	bl	9bc8 <fabs>
    1194:	ec51 0b10 	vmov	r0, r1, d0
    1198:	f7ff fc50 	bl	a3c <__aeabi_d2f>
    119c:	ee08 0a10 	vmov	s16, r0
    for(int i = 1; i < MLX90640_PIXEL_NUM; i++)
    11a0:	f10d 081c 	add.w	r8, sp, #28
    11a4:	2401      	movs	r4, #1
    {
        if (fabs(ktaTemp[i]) > temp)
    11a6:	f858 0b04 	ldr.w	r0, [r8], #4
    11aa:	f7ff f90d 	bl	3c8 <__aeabi_f2d>
    11ae:	ec41 0b19 	vmov	d9, r0, r1
    11b2:	eeb0 0a49 	vmov.f32	s0, s18
    11b6:	eef0 0a69 	vmov.f32	s1, s19
    11ba:	f008 fd05 	bl	9bc8 <fabs>
    11be:	ee18 0a10 	vmov	r0, s16
    11c2:	ec57 6b10 	vmov	r6, r7, d0
    11c6:	f7ff f8ff 	bl	3c8 <__aeabi_f2d>
    11ca:	4602      	mov	r2, r0
    11cc:	460b      	mov	r3, r1
    11ce:	4630      	mov	r0, r6
    11d0:	4639      	mov	r1, r7
    11d2:	f7ff fbe1 	bl	998 <__aeabi_dcmpgt>
    11d6:	b158      	cbz	r0, 11f0 <ExtractKtaPixelParameters+0x160>
        {
            temp = fabs(ktaTemp[i]);
    11d8:	eeb0 0a49 	vmov.f32	s0, s18
    11dc:	eef0 0a69 	vmov.f32	s1, s19
    11e0:	f008 fcf2 	bl	9bc8 <fabs>
    11e4:	ec51 0b10 	vmov	r0, r1, d0
    11e8:	f7ff fc28 	bl	a3c <__aeabi_d2f>
    11ec:	ee08 0a10 	vmov	s16, r0
    for(int i = 1; i < MLX90640_PIXEL_NUM; i++)
    11f0:	3401      	adds	r4, #1
    11f2:	f5b4 7f40 	cmp.w	r4, #768	; 0x300
    11f6:	d1d6      	bne.n	11a6 <ExtractKtaPixelParameters+0x116>
        }
    }
    
    ktaScale1 = 0;
    while(temp < 63.4)
    11f8:	a72f      	add	r7, pc, #188	; (adr r7, 12b8 <ExtractKtaPixelParameters+0x228>)
    11fa:	e9d7 6700 	ldrd	r6, r7, [r7]
    11fe:	2400      	movs	r4, #0
    1200:	ee18 0a10 	vmov	r0, s16
    1204:	f7ff f8e0 	bl	3c8 <__aeabi_f2d>
    1208:	4632      	mov	r2, r6
    120a:	463b      	mov	r3, r7
    120c:	f104 0801 	add.w	r8, r4, #1
    1210:	f7ff fba4 	bl	95c <__aeabi_dcmplt>
    1214:	2800      	cmp	r0, #0
    1216:	d13f      	bne.n	1298 <ExtractKtaPixelParameters+0x208>
        ktaScale1 = ktaScale1 + 1;
    }    
     
    for(int i = 0; i < MLX90640_PIXEL_NUM; i++)
    {
        temp = ktaTemp[i] * POW2(ktaScale1);
    1218:	ed9f 8b25 	vldr	d8, [pc, #148]	; 12b0 <ExtractKtaPixelParameters+0x220>
        {
            mlx90640->kta[i] = (temp - 0.5);
        }
        else
        {
            mlx90640->kta[i] = (temp + 0.5);
    121c:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 12c0 <ExtractKtaPixelParameters+0x230>
    1220:	b2e4      	uxtb	r4, r4
    1222:	f60b 4a4b 	addw	sl, fp, #3147	; 0xc4b
    1226:	f60b 764b 	addw	r6, fp, #3915	; 0xf4b
    122a:	f04f 0800 	mov.w	r8, #0
        temp = ktaTemp[i] * POW2(ktaScale1);
    122e:	f855 0b04 	ldr.w	r0, [r5], #4
    1232:	f7ff f8c9 	bl	3c8 <__aeabi_f2d>
    1236:	e9cd 0100 	strd	r0, r1, [sp]
    123a:	4620      	mov	r0, r4
    123c:	f7ff f8a2 	bl	384 <__aeabi_ui2d>
    1240:	eeb0 0a48 	vmov.f32	s0, s16
    1244:	eef0 0a68 	vmov.f32	s1, s17
    1248:	ec41 0b11 	vmov	d1, r0, r1
    124c:	f007 fb0e 	bl	886c <pow>
    1250:	e9dd 0100 	ldrd	r0, r1, [sp]
    1254:	ec53 2b10 	vmov	r2, r3, d0
    1258:	f7ff f90e 	bl	478 <__aeabi_dmul>
    125c:	f7ff fbee 	bl	a3c <__aeabi_d2f>
    1260:	ee07 0a90 	vmov	s15, r0
        if (temp < 0)
    1264:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    1268:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    126c:	d518      	bpl.n	12a0 <ExtractKtaPixelParameters+0x210>
            mlx90640->kta[i] = (temp - 0.5);
    126e:	f7ff f8ab 	bl	3c8 <__aeabi_f2d>
    1272:	4642      	mov	r2, r8
    1274:	464b      	mov	r3, r9
    1276:	f7fe ff47 	bl	108 <__aeabi_dsub>
            mlx90640->kta[i] = (temp + 0.5);
    127a:	f7ff fb97 	bl	9ac <__aeabi_d2iz>
    127e:	b240      	sxtb	r0, r0
    1280:	f80a 0f01 	strb.w	r0, [sl, #1]!
    for(int i = 0; i < MLX90640_PIXEL_NUM; i++)
    1284:	4556      	cmp	r6, sl
    1286:	d1d2      	bne.n	122e <ExtractKtaPixelParameters+0x19e>
        }        
        
    } 
    
    mlx90640->ktaScale = ktaScale1;           
    1288:	f88b 4f4c 	strb.w	r4, [fp, #3916]	; 0xf4c
}
    128c:	f60d 4d1c 	addw	sp, sp, #3100	; 0xc1c
    1290:	ecbd 8b04 	vpop	{d8-d9}
    1294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = temp*2;
    1298:	ee38 8a08 	vadd.f32	s16, s16, s16
    129c:	4644      	mov	r4, r8
    129e:	e7af      	b.n	1200 <ExtractKtaPixelParameters+0x170>
            mlx90640->kta[i] = (temp + 0.5);
    12a0:	f7ff f892 	bl	3c8 <__aeabi_f2d>
    12a4:	4642      	mov	r2, r8
    12a6:	464b      	mov	r3, r9
    12a8:	f7fe ff30 	bl	10c <__adddf3>
    12ac:	e7e5      	b.n	127a <ExtractKtaPixelParameters+0x1ea>
    12ae:	bf00      	nop
    12b0:	00000000 	.word	0x00000000
    12b4:	40000000 	.word	0x40000000
    12b8:	33333333 	.word	0x33333333
    12bc:	404fb333 	.word	0x404fb333
    12c0:	3fe00000 	.word	0x3fe00000
    12c4:	00000000 	.word	0x00000000

000012c8 <ExtractKvPixelParameters>:


//------------------------------------------------------------------------------

static void ExtractKvPixelParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
    12c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    12cc:	ed2d 8b04 	vpush	{d8-d9}
    uint8_t kvScale;
    uint8_t split;
    float kvTemp[768];
    float temp;

    KvRoCo = MLX90640_NIBBLE4(eeData[52]);
    12d0:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
{
    12d4:	f6ad 4d14 	subw	sp, sp, #3092	; 0xc14
    KvRoCo = MLX90640_NIBBLE4(eeData[52]);
    12d8:	0b1a      	lsrs	r2, r3, #12
    if (KvRoCo > 7)
    12da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    {
        KvRoCo = KvRoCo - 16;
    }
    KvT[0] = KvRoCo;
    12de:	ad03      	add	r5, sp, #12
        KvRoCo = KvRoCo - 16;
    12e0:	bf28      	it	cs
    12e2:	3a10      	subcs	r2, #16
    12e4:	b252      	sxtb	r2, r2
    
    KvReCo = MLX90640_NIBBLE3(eeData[52]);
    if (KvReCo > 7)
    12e6:	051e      	lsls	r6, r3, #20
    KvT[0] = KvRoCo;
    12e8:	702a      	strb	r2, [r5, #0]
    KvReCo = MLX90640_NIBBLE3(eeData[52]);
    12ea:	f3c3 2203 	ubfx	r2, r3, #8, #4
    {
        KvReCo = KvReCo - 16;
    12ee:	bf48      	it	mi
    12f0:	3a10      	submi	r2, #16
{
    12f2:	460c      	mov	r4, r1
    }
    KvT[2] = KvReCo;
    12f4:	70aa      	strb	r2, [r5, #2]
      
    KvRoCe = MLX90640_NIBBLE2(eeData[52]);
    if (KvRoCe > 7)
    12f6:	0619      	lsls	r1, r3, #24
    KvRoCe = MLX90640_NIBBLE2(eeData[52]);
    12f8:	f3c3 1203 	ubfx	r2, r3, #4, #4
    {
        KvRoCe = KvRoCe - 16;
    12fc:	bf48      	it	mi
    12fe:	3a10      	submi	r2, #16
    }
    KvT[1] = KvRoCe;
    1300:	706a      	strb	r2, [r5, #1]
        for(int j = 0; j < MLX90640_COLUMN_NUM; j ++)
        {
            p = 32 * i +j;
            split = 2*(p/32 - (p/64)*2) + p%2;
            kvTemp[p] = KvT[split];
            kvTemp[p] = kvTemp[p] / POW2(kvScale);
    1302:	ed9f 8b6d 	vldr	d8, [pc, #436]	; 14b8 <ExtractKvPixelParameters+0x1f0>
    KvReCe = MLX90640_NIBBLE1(eeData[52]);
    1306:	f003 020f 	and.w	r2, r3, #15
    if (KvReCe > 7)
    130a:	071b      	lsls	r3, r3, #28
    kvScale = MLX90640_NIBBLE3(eeData[56]);
    130c:	f8b0 3070 	ldrh.w	r3, [r0, #112]	; 0x70
        KvReCe = KvReCe - 16;
    1310:	bf48      	it	mi
    1312:	3a10      	submi	r2, #16
    KvT[3] = KvReCe;
    1314:	ae04      	add	r6, sp, #16
    1316:	70ea      	strb	r2, [r5, #3]
    kvScale = MLX90640_NIBBLE3(eeData[56]);
    1318:	f3c3 2b03 	ubfx	fp, r3, #8, #4
    131c:	46b1      	mov	r9, r6
    131e:	f04f 0800 	mov.w	r8, #0
{
    1322:	46ca      	mov	sl, r9
        for(int j = 0; j < MLX90640_COLUMN_NUM; j ++)
    1324:	2700      	movs	r7, #0
            p = 32 * i +j;
    1326:	eb07 0308 	add.w	r3, r7, r8
            split = 2*(p/32 - (p/64)*2) + p%2;
    132a:	f3c3 1240 	ubfx	r2, r3, #5, #1
    132e:	f003 0301 	and.w	r3, r3, #1
            kvTemp[p] = KvT[split];
    1332:	eb03 0342 	add.w	r3, r3, r2, lsl #1
        for(int j = 0; j < MLX90640_COLUMN_NUM; j ++)
    1336:	3701      	adds	r7, #1
            kvTemp[p] = KvT[split];
    1338:	56e8      	ldrsb	r0, [r5, r3]
            kvTemp[p] = kvTemp[p] / POW2(kvScale);
    133a:	ee07 0a90 	vmov	s15, r0
    133e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    1342:	ee17 0a90 	vmov	r0, s15
    1346:	f7ff f83f 	bl	3c8 <__aeabi_f2d>
    134a:	e9cd 0100 	strd	r0, r1, [sp]
    134e:	4658      	mov	r0, fp
    1350:	f7ff f818 	bl	384 <__aeabi_ui2d>
    1354:	eeb0 0a48 	vmov.f32	s0, s16
    1358:	eef0 0a68 	vmov.f32	s1, s17
    135c:	ec41 0b11 	vmov	d1, r0, r1
    1360:	f007 fa84 	bl	886c <pow>
    1364:	e9dd 0100 	ldrd	r0, r1, [sp]
    1368:	ec53 2b10 	vmov	r2, r3, d0
    136c:	f7ff f9ae 	bl	6cc <__aeabi_ddiv>
    1370:	f7ff fb64 	bl	a3c <__aeabi_d2f>
        for(int j = 0; j < MLX90640_COLUMN_NUM; j ++)
    1374:	2f20      	cmp	r7, #32
            kvTemp[p] = kvTemp[p] / POW2(kvScale);
    1376:	f84a 0b04 	str.w	r0, [sl], #4
        for(int j = 0; j < MLX90640_COLUMN_NUM; j ++)
    137a:	d1d4      	bne.n	1326 <ExtractKvPixelParameters+0x5e>
    for(int i = 0; i < MLX90640_LINE_NUM; i++)
    137c:	f108 0820 	add.w	r8, r8, #32
    1380:	f5b8 7f40 	cmp.w	r8, #768	; 0x300
    1384:	f109 0980 	add.w	r9, r9, #128	; 0x80
    1388:	d1cb      	bne.n	1322 <ExtractKvPixelParameters+0x5a>
        }
    }
    
    temp = fabs(kvTemp[0]);
    138a:	6830      	ldr	r0, [r6, #0]
    138c:	f7ff f81c 	bl	3c8 <__aeabi_f2d>
    1390:	ec41 0b10 	vmov	d0, r0, r1
    1394:	f008 fc18 	bl	9bc8 <fabs>
    1398:	ec51 0b10 	vmov	r0, r1, d0
    139c:	f7ff fb4e 	bl	a3c <__aeabi_d2f>
    13a0:	ee08 0a10 	vmov	s16, r0
    for(int i = 1; i < MLX90640_PIXEL_NUM; i++)
    13a4:	af05      	add	r7, sp, #20
    13a6:	2501      	movs	r5, #1
    {
        if (fabs(kvTemp[i]) > temp)
    13a8:	f857 0b04 	ldr.w	r0, [r7], #4
    13ac:	f7ff f80c 	bl	3c8 <__aeabi_f2d>
    13b0:	ec41 0b19 	vmov	d9, r0, r1
    13b4:	eeb0 0a49 	vmov.f32	s0, s18
    13b8:	eef0 0a69 	vmov.f32	s1, s19
    13bc:	f008 fc04 	bl	9bc8 <fabs>
    13c0:	ee18 0a10 	vmov	r0, s16
    13c4:	ec59 8b10 	vmov	r8, r9, d0
    13c8:	f7fe fffe 	bl	3c8 <__aeabi_f2d>
    13cc:	4602      	mov	r2, r0
    13ce:	460b      	mov	r3, r1
    13d0:	4640      	mov	r0, r8
    13d2:	4649      	mov	r1, r9
    13d4:	f7ff fae0 	bl	998 <__aeabi_dcmpgt>
    13d8:	b158      	cbz	r0, 13f2 <ExtractKvPixelParameters+0x12a>
        {
            temp = fabs(kvTemp[i]);
    13da:	eeb0 0a49 	vmov.f32	s0, s18
    13de:	eef0 0a69 	vmov.f32	s1, s19
    13e2:	f008 fbf1 	bl	9bc8 <fabs>
    13e6:	ec51 0b10 	vmov	r0, r1, d0
    13ea:	f7ff fb27 	bl	a3c <__aeabi_d2f>
    13ee:	ee08 0a10 	vmov	s16, r0
    for(int i = 1; i < MLX90640_PIXEL_NUM; i++)
    13f2:	3501      	adds	r5, #1
    13f4:	f5b5 7f40 	cmp.w	r5, #768	; 0x300
    13f8:	d1d6      	bne.n	13a8 <ExtractKvPixelParameters+0xe0>
        }
    }
    
    kvScale = 0;
    while(temp < 63.4)
    13fa:	f20f 09c4 	addw	r9, pc, #196	; 0xc4
    13fe:	e9d9 8900 	ldrd	r8, r9, [r9]
    1402:	2500      	movs	r5, #0
    1404:	ee18 0a10 	vmov	r0, s16
    1408:	f7fe ffde 	bl	3c8 <__aeabi_f2d>
    140c:	4642      	mov	r2, r8
    140e:	464b      	mov	r3, r9
    1410:	1c6f      	adds	r7, r5, #1
    1412:	f7ff faa3 	bl	95c <__aeabi_dcmplt>
    1416:	2800      	cmp	r0, #0
    1418:	d143      	bne.n	14a2 <ExtractKvPixelParameters+0x1da>
        kvScale = kvScale + 1;
    }    
     
    for(int i = 0; i < MLX90640_PIXEL_NUM; i++)
    {
        temp = kvTemp[i] * POW2(kvScale);
    141a:	ed9f 8b27 	vldr	d8, [pc, #156]	; 14b8 <ExtractKvPixelParameters+0x1f0>
    141e:	f504 5a92 	add.w	sl, r4, #4672	; 0x1240
        {
            mlx90640->kv[i] = (temp - 0.5);
        }
        else
        {
            mlx90640->kv[i] = (temp + 0.5);
    1422:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 14c8 <ExtractKvPixelParameters+0x200>
    1426:	b2ed      	uxtb	r5, r5
    1428:	f604 774c 	addw	r7, r4, #3916	; 0xf4c
    142c:	f10a 0a0c 	add.w	sl, sl, #12
    1430:	f04f 0800 	mov.w	r8, #0
        temp = kvTemp[i] * POW2(kvScale);
    1434:	f856 0b04 	ldr.w	r0, [r6], #4
    1438:	f7fe ffc6 	bl	3c8 <__aeabi_f2d>
    143c:	e9cd 0100 	strd	r0, r1, [sp]
    1440:	4628      	mov	r0, r5
    1442:	f7fe ff9f 	bl	384 <__aeabi_ui2d>
    1446:	eeb0 0a48 	vmov.f32	s0, s16
    144a:	eef0 0a68 	vmov.f32	s1, s17
    144e:	ec41 0b11 	vmov	d1, r0, r1
    1452:	f007 fa0b 	bl	886c <pow>
    1456:	e9dd 0100 	ldrd	r0, r1, [sp]
    145a:	ec53 2b10 	vmov	r2, r3, d0
    145e:	f7ff f80b 	bl	478 <__aeabi_dmul>
    1462:	f7ff faeb 	bl	a3c <__aeabi_d2f>
    1466:	ee07 0a90 	vmov	s15, r0
        if (temp < 0)
    146a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    146e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1472:	d51a      	bpl.n	14aa <ExtractKvPixelParameters+0x1e2>
            mlx90640->kv[i] = (temp - 0.5);
    1474:	f7fe ffa8 	bl	3c8 <__aeabi_f2d>
    1478:	4642      	mov	r2, r8
    147a:	464b      	mov	r3, r9
    147c:	f7fe fe44 	bl	108 <__aeabi_dsub>
            mlx90640->kv[i] = (temp + 0.5);
    1480:	f7ff fa94 	bl	9ac <__aeabi_d2iz>
    1484:	b240      	sxtb	r0, r0
    1486:	f807 0f01 	strb.w	r0, [r7, #1]!
    for(int i = 0; i < MLX90640_PIXEL_NUM; i++)
    148a:	45ba      	cmp	sl, r7
    148c:	d1d2      	bne.n	1434 <ExtractKvPixelParameters+0x16c>
        }        
        
    } 
    
    mlx90640->kvScale = kvScale;        
    148e:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
    1492:	f884 524d 	strb.w	r5, [r4, #589]	; 0x24d
}
    1496:	f60d 4d14 	addw	sp, sp, #3092	; 0xc14
    149a:	ecbd 8b04 	vpop	{d8-d9}
    149e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = temp*2;
    14a2:	ee38 8a08 	vadd.f32	s16, s16, s16
    14a6:	463d      	mov	r5, r7
    14a8:	e7ac      	b.n	1404 <ExtractKvPixelParameters+0x13c>
            mlx90640->kv[i] = (temp + 0.5);
    14aa:	f7fe ff8d 	bl	3c8 <__aeabi_f2d>
    14ae:	4642      	mov	r2, r8
    14b0:	464b      	mov	r3, r9
    14b2:	f7fe fe2b 	bl	10c <__adddf3>
    14b6:	e7e3      	b.n	1480 <ExtractKvPixelParameters+0x1b8>
    14b8:	00000000 	.word	0x00000000
    14bc:	40000000 	.word	0x40000000
    14c0:	33333333 	.word	0x33333333
    14c4:	404fb333 	.word	0x404fb333
    14c8:	3fe00000 	.word	0x3fe00000
    14cc:	00000000 	.word	0x00000000

000014d0 <MLX90640_ExtractParameters>:
{
    14d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    14d4:	ed2d 8b06 	vpush	{d8-d10}
    kVdd = MLX90640_MS_BYTE(eeData[51]);
    14d8:	f8b0 3066 	ldrh.w	r3, [r0, #102]	; 0x66
    mlx90640->kVdd = 32 * kVdd;
    14dc:	f990 2067 	ldrsb.w	r2, [r0, #103]	; 0x67
    if(KtPTAT > 511)
    14e0:	ed9f aae7 	vldr	s20, [pc, #924]	; 1880 <MLX90640_ExtractParameters+0x3b0>
    vdd25 = ((vdd25 - 256) << 5) - 8192;
    14e4:	f063 03ff 	orn	r3, r3, #255	; 0xff
    14e8:	015b      	lsls	r3, r3, #5
    mlx90640->kVdd = 32 * kVdd;
    14ea:	0152      	lsls	r2, r2, #5
    vdd25 = ((vdd25 - 256) << 5) - 8192;
    14ec:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
    mlx90640->kVdd = 32 * kVdd;
    14f0:	800a      	strh	r2, [r1, #0]
    mlx90640->vdd25 = vdd25; 
    14f2:	804b      	strh	r3, [r1, #2]
    KvPTAT = (eeData[50] & MLX90640_MSBITS_6_MASK) >> 10;
    14f4:	f8b0 3064 	ldrh.w	r3, [r0, #100]	; 0x64
    vPTAT25 = eeData[49];
    14f8:	f8b0 5062 	ldrh.w	r5, [r0, #98]	; 0x62
    KvPTAT = (eeData[50] & MLX90640_MSBITS_6_MASK) >> 10;
    14fc:	0a9a      	lsrs	r2, r3, #10
    14fe:	ee07 2a90 	vmov	s15, r2
    1502:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    if(KvPTAT > 31)
    1506:	eef3 9a0f 	vmov.f32	s19, #63	; 0x41f80000  31.0
    150a:	eef4 7ae9 	vcmpe.f32	s15, s19
    150e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        KvPTAT = KvPTAT - 64;
    1512:	bfc4      	itt	gt
    1514:	ed9f 7ae0 	vldrgt	s14, [pc, #896]	; 1898 <MLX90640_ExtractParameters+0x3c8>
    1518:	ee77 7ac7 	vsubgt.f32	s15, s15, s14
    KvPTAT = KvPTAT/4096;
    151c:	ed9f 7ad9 	vldr	s14, [pc, #868]	; 1884 <MLX90640_ExtractParameters+0x3b4>
    KtPTAT = eeData[50] & MLX90640_LSBITS_10_MASK;
    1520:	f3c3 0309 	ubfx	r3, r3, #0, #10
    KvPTAT = KvPTAT/4096;
    1524:	ee27 9a87 	vmul.f32	s18, s15, s14
    KtPTAT = eeData[50] & MLX90640_LSBITS_10_MASK;
    1528:	ee07 3a90 	vmov	s15, r3
    152c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
{
    1530:	4604      	mov	r4, r0
    if(KtPTAT > 511)
    1532:	eef4 7aca 	vcmpe.f32	s15, s20
    1536:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        KtPTAT = KtPTAT - 1024;
    153a:	bfc8      	it	gt
    153c:	ed9f 7ad2 	vldrgt	s14, [pc, #840]	; 1888 <MLX90640_ExtractParameters+0x3b8>
    alphaPTAT = (eeData[16] & MLX90640_NIBBLE4_MASK) / POW2(14) + 8.0f;
    1540:	8c00      	ldrh	r0, [r0, #32]
        KtPTAT = KtPTAT - 1024;
    1542:	bfc8      	it	gt
    1544:	ee77 7ac7 	vsubgt.f32	s15, s15, s14
{
    1548:	b0bb      	sub	sp, #236	; 0xec
    KtPTAT = KtPTAT/8;
    154a:	eef4 8a00 	vmov.f32	s17, #64	; 0x3e000000  0.125
    alphaPTAT = (eeData[16] & MLX90640_NIBBLE4_MASK) / POW2(14) + 8.0f;
    154e:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
{
    1552:	4689      	mov	r9, r1
    KtPTAT = KtPTAT/8;
    1554:	ee27 8aa8 	vmul.f32	s16, s15, s17
    alphaPTAT = (eeData[16] & MLX90640_NIBBLE4_MASK) / POW2(14) + 8.0f;
    1558:	f7fe ff24 	bl	3a4 <__aeabi_i2d>
    155c:	ed9f 1bc4 	vldr	d1, [pc, #784]	; 1870 <MLX90640_ExtractParameters+0x3a0>
    1560:	ed9f 0bc5 	vldr	d0, [pc, #788]	; 1878 <MLX90640_ExtractParameters+0x3a8>
    1564:	4606      	mov	r6, r0
    1566:	460f      	mov	r7, r1
    1568:	f007 f980 	bl	886c <pow>
    mlx90640->KvPTAT = KvPTAT;
    156c:	ed89 9a01 	vstr	s18, [r9, #4]
    alphaPTAT = (eeData[16] & MLX90640_NIBBLE4_MASK) / POW2(14) + 8.0f;
    1570:	ec53 2b10 	vmov	r2, r3, d0
    mlx90640->KtPTAT = KtPTAT;    
    1574:	ed89 8a02 	vstr	s16, [r9, #8]
    mlx90640->vPTAT25 = vPTAT25;
    1578:	f8a9 500c 	strh.w	r5, [r9, #12]
    alphaPTAT = (eeData[16] & MLX90640_NIBBLE4_MASK) / POW2(14) + 8.0f;
    157c:	4630      	mov	r0, r6
    157e:	4639      	mov	r1, r7
    1580:	f7ff f8a4 	bl	6cc <__aeabi_ddiv>
    1584:	4bc1      	ldr	r3, [pc, #772]	; (188c <MLX90640_ExtractParameters+0x3bc>)
    1586:	2200      	movs	r2, #0
    1588:	f7fe fdc0 	bl	10c <__adddf3>
    158c:	f7ff fa56 	bl	a3c <__aeabi_d2f>
    1590:	f8c9 0010 	str.w	r0, [r9, #16]
    mlx90640->gainEE = (int16_t)eeData[48];;    
    1594:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
    1598:	f8a9 3014 	strh.w	r3, [r9, #20]
    mlx90640->tgc = (int8_t)MLX90640_LS_BYTE(eeData[60]) / 32.0f;
    159c:	f994 3078 	ldrsb.w	r3, [r4, #120]	; 0x78
    15a0:	ee07 3a90 	vmov	s15, r3
    15a4:	eefa 7aed 	vcvt.f32.s32	s15, s15, #5
    alphaSP[1] = (eeData[57] & MLX90640_MSBITS_6_MASK) >> 10;
    if (alphaSP[1] > 31)
    {
        alphaSP[1] = alphaSP[1] - 64;
    }
    alphaSP[1] = (1 + alphaSP[1]/128) * alphaSP[0];
    15a8:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
    mlx90640->tgc = (int8_t)MLX90640_LS_BYTE(eeData[60]) / 32.0f;
    15ac:	edc9 7a06 	vstr	s15, [r9, #24]
    resolutionEE = (eeData[56] & 0x3000) >> 12;    
    15b0:	f8b4 3070 	ldrh.w	r3, [r4, #112]	; 0x70
    15b4:	f3c3 3301 	ubfx	r3, r3, #12, #2
    mlx90640->resolutionEE = resolutionEE;
    15b8:	f889 3024 	strb.w	r3, [r9, #36]	; 0x24
    mlx90640->KsTa = (int8_t)MLX90640_MS_BYTE(eeData[60]) / 8192.0f;
    15bc:	f994 3079 	ldrsb.w	r3, [r4, #121]	; 0x79
    15c0:	ee07 3a90 	vmov	s15, r3
    15c4:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
    mlx90640->ct[0] = -40;
    15c8:	f64f 73d8 	movw	r3, #65496	; 0xffd8
    mlx90640->KsTa = (int8_t)MLX90640_MS_BYTE(eeData[60]) / 8192.0f;
    15cc:	edc9 7a0a 	vstr	s15, [r9, #40]	; 0x28
    step = ((eeData[63] & 0x3000) >> 12) * 10;
    15d0:	f8b4 207e 	ldrh.w	r2, [r4, #126]	; 0x7e
    mlx90640->ct[0] = -40;
    15d4:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
    mlx90640->ct[2] = MLX90640_NIBBLE2(eeData[63]);
    15d8:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
    step = ((eeData[63] & 0x3000) >> 12) * 10;
    15dc:	f3c2 3201 	ubfx	r2, r2, #12, #2
    mlx90640->ct[2] = MLX90640_NIBBLE2(eeData[63]);
    15e0:	f3c3 1303 	ubfx	r3, r3, #4, #4
    15e4:	f8a9 3044 	strh.w	r3, [r9, #68]	; 0x44
    step = ((eeData[63] & 0x3000) >> 12) * 10;
    15e8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    mlx90640->ct[3] = MLX90640_NIBBLE3(eeData[63]);
    15ec:	f8b4 107e 	ldrh.w	r1, [r4, #126]	; 0x7e
    step = ((eeData[63] & 0x3000) >> 12) * 10;
    15f0:	0052      	lsls	r2, r2, #1
    mlx90640->ct[2] = mlx90640->ct[2]*step;
    15f2:	fb13 f302 	smulbb	r3, r3, r2
    mlx90640->ct[3] = MLX90640_NIBBLE3(eeData[63]);
    15f6:	f3c1 2103 	ubfx	r1, r1, #8, #4
    mlx90640->ct[2] = mlx90640->ct[2]*step;
    15fa:	b29b      	uxth	r3, r3
    15fc:	f8a9 3044 	strh.w	r3, [r9, #68]	; 0x44
    mlx90640->ct[3] = mlx90640->ct[2] + mlx90640->ct[3]*step;
    1600:	fb01 3302 	mla	r3, r1, r2, r3
    1604:	f8a9 3046 	strh.w	r3, [r9, #70]	; 0x46
    mlx90640->ct[4] = 400;
    1608:	f44f 73c8 	mov.w	r3, #400	; 0x190
    160c:	f8a9 3048 	strh.w	r3, [r9, #72]	; 0x48
    KsToScale = MLX90640_NIBBLE1(eeData[63]) + 8;
    1610:	f8b4 207e 	ldrh.w	r2, [r4, #126]	; 0x7e
    1614:	f002 020f 	and.w	r2, r2, #15
    1618:	3208      	adds	r2, #8
    KsToScale = 1UL << KsToScale;
    161a:	2301      	movs	r3, #1
    161c:	4093      	lsls	r3, r2
    mlx90640->ksTo[0] = (int8_t)MLX90640_LS_BYTE(eeData[61]) / (float)KsToScale;
    161e:	ee07 3a90 	vmov	s15, r3
    1622:	f994 307a 	ldrsb.w	r3, [r4, #122]	; 0x7a
    1626:	ee07 3a10 	vmov	s14, r3
    162a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    162e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    1632:	eec7 6a27 	vdiv.f32	s13, s14, s15
    1636:	edc9 6a0b 	vstr	s13, [r9, #44]	; 0x2c
    mlx90640->ksTo[1] = (int8_t)MLX90640_MS_BYTE(eeData[61]) / (float)KsToScale;
    163a:	f994 307b 	ldrsb.w	r3, [r4, #123]	; 0x7b
    163e:	ee07 3a10 	vmov	s14, r3
    1642:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    1646:	eec7 6a27 	vdiv.f32	s13, s14, s15
    164a:	edc9 6a0c 	vstr	s13, [r9, #48]	; 0x30
    mlx90640->ksTo[2] = (int8_t)MLX90640_LS_BYTE(eeData[62]) / (float)KsToScale;
    164e:	f994 307c 	ldrsb.w	r3, [r4, #124]	; 0x7c
    1652:	ee07 3a10 	vmov	s14, r3
    1656:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    165a:	eec7 6a27 	vdiv.f32	s13, s14, s15
    165e:	edc9 6a0d 	vstr	s13, [r9, #52]	; 0x34
    mlx90640->ksTo[3] = (int8_t)MLX90640_MS_BYTE(eeData[62]) / (float)KsToScale;
    1662:	f994 307d 	ldrsb.w	r3, [r4, #125]	; 0x7d
    1666:	ee07 3a10 	vmov	s14, r3
    166a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    mlx90640->ksTo[4] = -0.0002;
    166e:	4b88      	ldr	r3, [pc, #544]	; (1890 <MLX90640_ExtractParameters+0x3c0>)
    1670:	f8c9 303c 	str.w	r3, [r9, #60]	; 0x3c
    mlx90640->ksTo[3] = (int8_t)MLX90640_MS_BYTE(eeData[62]) / (float)KsToScale;
    1674:	eec7 6a27 	vdiv.f32	s13, s14, s15
    1678:	edc9 6a0e 	vstr	s13, [r9, #56]	; 0x38
    offsetSP[0] = (eeData[58] & MLX90640_LSBITS_10_MASK);
    167c:	f8b4 2074 	ldrh.w	r2, [r4, #116]	; 0x74
    alphaScale = MLX90640_NIBBLE4(eeData[32]) + 27;
    1680:	f8b4 a040 	ldrh.w	sl, [r4, #64]	; 0x40
    1684:	f3c2 0509 	ubfx	r5, r2, #0, #10
    if (offsetSP[0] > 511)
    1688:	0590      	lsls	r0, r2, #22
        offsetSP[0] = offsetSP[0] - 1024;
    168a:	bf48      	it	mi
    168c:	f5a5 6580 	submi.w	r5, r5, #1024	; 0x400
    offsetSP[1] = (eeData[58] & MLX90640_MSBITS_6_MASK) >> 10;
    1690:	ea4f 2392 	mov.w	r3, r2, lsr #10
        offsetSP[0] = offsetSP[0] - 1024;
    1694:	bf48      	it	mi
    1696:	b2ad      	uxthmi	r5, r5
    if (offsetSP[1] > 31)
    1698:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
        offsetSP[1] = offsetSP[1] - 64;
    169c:	bf24      	itt	cs
    169e:	3b40      	subcs	r3, #64	; 0x40
    16a0:	b29b      	uxthcs	r3, r3
    16a2:	fa0f f885 	sxth.w	r8, r5
    offsetSP[1] = offsetSP[1] + offsetSP[0]; 
    16a6:	441d      	add	r5, r3
    alphaSP[0] = (eeData[57] & MLX90640_LSBITS_10_MASK);
    16a8:	f8b4 3072 	ldrh.w	r3, [r4, #114]	; 0x72
    16ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
    16b0:	ee07 3a90 	vmov	s15, r3
    16b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    alphaScale = MLX90640_NIBBLE4(eeData[32]) + 27;
    16b8:	ea4f 3a1a 	mov.w	sl, sl, lsr #12
    if (alphaSP[0] > 511)
    16bc:	eef4 7aca 	vcmpe.f32	s15, s20
    16c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        alphaSP[0] = alphaSP[0] - 1024;
    16c4:	bfc4      	itt	gt
    16c6:	ed9f 7a70 	vldrgt	s14, [pc, #448]	; 1888 <MLX90640_ExtractParameters+0x3b8>
    16ca:	ee77 7ac7 	vsubgt.f32	s15, s15, s14
    alphaScale = MLX90640_NIBBLE4(eeData[32]) + 27;
    16ce:	f10a 0a1b 	add.w	sl, sl, #27
    alphaSP[0] = alphaSP[0] /  POW2(alphaScale);
    16d2:	ee17 0a90 	vmov	r0, s15
    16d6:	f7fe fe77 	bl	3c8 <__aeabi_f2d>
    16da:	4606      	mov	r6, r0
    16dc:	4650      	mov	r0, sl
    16de:	460f      	mov	r7, r1
    16e0:	f7fe fe50 	bl	384 <__aeabi_ui2d>
    16e4:	ed9f 0b64 	vldr	d0, [pc, #400]	; 1878 <MLX90640_ExtractParameters+0x3a8>
    16e8:	ec41 0b11 	vmov	d1, r0, r1
    16ec:	f007 f8be 	bl	886c <pow>
    16f0:	4630      	mov	r0, r6
    16f2:	ec53 2b10 	vmov	r2, r3, d0
    16f6:	4639      	mov	r1, r7
    16f8:	f7fe ffe8 	bl	6cc <__aeabi_ddiv>
    16fc:	f7ff f99e 	bl	a3c <__aeabi_d2f>
    alphaSP[1] = (eeData[57] & MLX90640_MSBITS_6_MASK) >> 10;
    1700:	f8b4 3072 	ldrh.w	r3, [r4, #114]	; 0x72
    1704:	0a9b      	lsrs	r3, r3, #10
    1706:	ee07 3a90 	vmov	s15, r3
    170a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    alphaSP[0] = alphaSP[0] /  POW2(alphaScale);
    170e:	ee09 0a10 	vmov	s18, r0
    if (alphaSP[1] > 31)
    1712:	eef4 7ae9 	vcmpe.f32	s15, s19
    1716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        alphaSP[1] = alphaSP[1] - 64;
    171a:	bfc8      	it	gt
    171c:	ed9f 7a5e 	vldrgt	s14, [pc, #376]	; 1898 <MLX90640_ExtractParameters+0x3c8>
    
    cpKta = (int8_t)MLX90640_LS_BYTE(eeData[59]);
    1720:	f994 0076 	ldrsb.w	r0, [r4, #118]	; 0x76
        alphaSP[1] = alphaSP[1] - 64;
    1724:	bfc8      	it	gt
    1726:	ee77 7ac7 	vsubgt.f32	s15, s15, s14
    alphaSP[1] = (1 + alphaSP[1]/128) * alphaSP[0];
    172a:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 1894 <MLX90640_ExtractParameters+0x3c4>
    172e:	ee07 8a87 	vmla.f32	s16, s15, s14
    offsetSP[1] = offsetSP[1] + offsetSP[0]; 
    1732:	b22d      	sxth	r5, r5
    
    ktaScale1 = MLX90640_NIBBLE2(eeData[56]) + 8;    
    mlx90640->cpKta = cpKta / POW2(ktaScale1);
    1734:	ee07 0a90 	vmov	s15, r0
    1738:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    alphaSP[1] = (1 + alphaSP[1]/128) * alphaSP[0];
    173c:	ee28 8a09 	vmul.f32	s16, s16, s18
    mlx90640->cpKta = cpKta / POW2(ktaScale1);
    1740:	ee17 0a90 	vmov	r0, s15
    1744:	f7fe fe40 	bl	3c8 <__aeabi_f2d>
    1748:	4606      	mov	r6, r0
    ktaScale1 = MLX90640_NIBBLE2(eeData[56]) + 8;    
    174a:	f8b4 0070 	ldrh.w	r0, [r4, #112]	; 0x70
    174e:	f3c0 1003 	ubfx	r0, r0, #4, #4
    mlx90640->cpKta = cpKta / POW2(ktaScale1);
    1752:	3008      	adds	r0, #8
    1754:	460f      	mov	r7, r1
    1756:	f7fe fe15 	bl	384 <__aeabi_ui2d>
    175a:	ed9f 0b47 	vldr	d0, [pc, #284]	; 1878 <MLX90640_ExtractParameters+0x3a8>
    175e:	ec41 0b11 	vmov	d1, r0, r1
    1762:	f007 f883 	bl	886c <pow>
    1766:	4630      	mov	r0, r6
    1768:	ec53 2b10 	vmov	r2, r3, d0
    176c:	4639      	mov	r1, r7
    176e:	f7fe ffad 	bl	6cc <__aeabi_ddiv>
    1772:	f7ff f963 	bl	a3c <__aeabi_d2f>
    1776:	f8c9 0020 	str.w	r0, [r9, #32]
    
    cpKv = (int8_t)MLX90640_MS_BYTE(eeData[59]);
    177a:	f994 0077 	ldrsb.w	r0, [r4, #119]	; 0x77
    
    kvScale = MLX90640_NIBBLE3(eeData[56]);
    mlx90640->cpKv = cpKv / POW2(kvScale);
    177e:	ee07 0a90 	vmov	s15, r0
    1782:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    1786:	ee17 0a90 	vmov	r0, s15
    178a:	f7fe fe1d 	bl	3c8 <__aeabi_f2d>
    178e:	4606      	mov	r6, r0
    kvScale = MLX90640_NIBBLE3(eeData[56]);
    1790:	f8b4 0070 	ldrh.w	r0, [r4, #112]	; 0x70
    mlx90640->cpKv = cpKv / POW2(kvScale);
    1794:	f3c0 2003 	ubfx	r0, r0, #8, #4
    1798:	460f      	mov	r7, r1
    179a:	f7fe fdf3 	bl	384 <__aeabi_ui2d>
    179e:	ed9f 0b36 	vldr	d0, [pc, #216]	; 1878 <MLX90640_ExtractParameters+0x3a8>
    17a2:	ec41 0b11 	vmov	d1, r0, r1
    17a6:	f007 f861 	bl	886c <pow>
    17aa:	4630      	mov	r0, r6
    17ac:	ec53 2b10 	vmov	r2, r3, d0
    17b0:	4639      	mov	r1, r7
    17b2:	f7fe ff8b 	bl	6cc <__aeabi_ddiv>
    17b6:	f7ff f941 	bl	a3c <__aeabi_d2f>
       
    mlx90640->cpAlpha[0] = alphaSP[0];
    17ba:	f509 5380 	add.w	r3, r9, #4096	; 0x1000
    mlx90640->cpKv = cpKv / POW2(kvScale);
    17be:	f8c9 001c 	str.w	r0, [r9, #28]
    ExtractAlphaParameters(eeData, mlx90640);
    17c2:	4649      	mov	r1, r9
    mlx90640->cpAlpha[1] = alphaSP[1];
    mlx90640->cpOffset[0] = offsetSP[0];
    17c4:	f8a3 8258 	strh.w	r8, [r3, #600]	; 0x258
    mlx90640->cpOffset[1] = offsetSP[1];  
    17c8:	f8a3 525a 	strh.w	r5, [r3, #602]	; 0x25a
    mlx90640->cpAlpha[0] = alphaSP[0];
    17cc:	ed83 9a94 	vstr	s18, [r3, #592]	; 0x250
    mlx90640->cpAlpha[1] = alphaSP[1];
    17d0:	ed83 8a95 	vstr	s16, [r3, #596]	; 0x254
    ExtractAlphaParameters(eeData, mlx90640);
    17d4:	4620      	mov	r0, r4
    17d6:	f7ff fb0b 	bl	df0 <ExtractAlphaParameters>
    occRemScale = MLX90640_NIBBLE1(eeData[16]);
    17da:	8c21      	ldrh	r1, [r4, #32]
    offsetRef = (int16_t)eeData[17];
    17dc:	4620      	mov	r0, r4
    occRowScale = MLX90640_NIBBLE3(eeData[16]);
    17de:	f3c1 2303 	ubfx	r3, r1, #8, #4
    17e2:	9300      	str	r3, [sp, #0]
    17e4:	ad02      	add	r5, sp, #8
    offsetRef = (int16_t)eeData[17];
    17e6:	f830 3f22 	ldrh.w	r3, [r0, #34]!
    17ea:	9301      	str	r3, [sp, #4]
    occRemScale = MLX90640_NIBBLE1(eeData[16]);
    17ec:	f001 080f 	and.w	r8, r1, #15
    occColumnScale = MLX90640_NIBBLE2(eeData[16]);
    17f0:	f3c1 1a03 	ubfx	sl, r1, #4, #4
    for(int i = 0; i < 6; i++)
    17f4:	f104 062e 	add.w	r6, r4, #46	; 0x2e
    offsetRef = (int16_t)eeData[17];
    17f8:	462b      	mov	r3, r5
        occRow[p + 0] = MLX90640_NIBBLE1(eeData[18 + i]);
    17fa:	f830 2f02 	ldrh.w	r2, [r0, #2]!
    17fe:	f002 070f 	and.w	r7, r2, #15
    1802:	601f      	str	r7, [r3, #0]
        occRow[p + 1] = MLX90640_NIBBLE2(eeData[18 + i]);
    1804:	f3c2 1703 	ubfx	r7, r2, #4, #4
    1808:	605f      	str	r7, [r3, #4]
    for(int i = 0; i < 6; i++)
    180a:	42b0      	cmp	r0, r6
        occRow[p + 2] = MLX90640_NIBBLE3(eeData[18 + i]);
    180c:	f3c2 2703 	ubfx	r7, r2, #8, #4
        occRow[p + 3] = MLX90640_NIBBLE4(eeData[18 + i]);
    1810:	ea4f 3212 	mov.w	r2, r2, lsr #12
        occRow[p + 2] = MLX90640_NIBBLE3(eeData[18 + i]);
    1814:	609f      	str	r7, [r3, #8]
        occRow[p + 3] = MLX90640_NIBBLE4(eeData[18 + i]);
    1816:	60da      	str	r2, [r3, #12]
    for(int i = 0; i < 6; i++)
    1818:	f103 0310 	add.w	r3, r3, #16
    181c:	d1ed      	bne.n	17fa <MLX90640_ExtractParameters+0x32a>
    181e:	4628      	mov	r0, r5
    for(int i = 0; i < MLX90640_LINE_NUM; i++)
    1820:	2200      	movs	r2, #0
        if (occRow[i] > 7)
    1822:	f850 3b04 	ldr.w	r3, [r0], #4
    1826:	2b07      	cmp	r3, #7
            occRow[i] = occRow[i] - 16;
    1828:	bfc8      	it	gt
    182a:	3b10      	subgt	r3, #16
    for(int i = 0; i < MLX90640_LINE_NUM; i++)
    182c:	f102 0201 	add.w	r2, r2, #1
            occRow[i] = occRow[i] - 16;
    1830:	bfc8      	it	gt
    1832:	f840 3c04 	strgt.w	r3, [r0, #-4]
    for(int i = 0; i < MLX90640_LINE_NUM; i++)
    1836:	2a18      	cmp	r2, #24
    1838:	d1f3      	bne.n	1822 <MLX90640_ExtractParameters+0x352>
    183a:	4630      	mov	r0, r6
    183c:	ab1a      	add	r3, sp, #104	; 0x68
    183e:	f104 063e 	add.w	r6, r4, #62	; 0x3e
        occColumn[p + 0] = MLX90640_NIBBLE1(eeData[24 + i]);
    1842:	f830 2f02 	ldrh.w	r2, [r0, #2]!
    1846:	f002 070f 	and.w	r7, r2, #15
    184a:	601f      	str	r7, [r3, #0]
        occColumn[p + 1] = MLX90640_NIBBLE2(eeData[24 + i]);
    184c:	f3c2 1703 	ubfx	r7, r2, #4, #4
    1850:	605f      	str	r7, [r3, #4]
    for(int i = 0; i < 8; i++)
    1852:	42b0      	cmp	r0, r6
        occColumn[p + 2] = MLX90640_NIBBLE3(eeData[24 + i]);
    1854:	f3c2 2703 	ubfx	r7, r2, #8, #4
        occColumn[p + 3] = MLX90640_NIBBLE4(eeData[24 + i]);
    1858:	ea4f 3212 	mov.w	r2, r2, lsr #12
        occColumn[p + 2] = MLX90640_NIBBLE3(eeData[24 + i]);
    185c:	609f      	str	r7, [r3, #8]
        occColumn[p + 3] = MLX90640_NIBBLE4(eeData[24 + i]);
    185e:	60da      	str	r2, [r3, #12]
    for(int i = 0; i < 8; i++)
    1860:	f103 0310 	add.w	r3, r3, #16
    1864:	d1ed      	bne.n	1842 <MLX90640_ExtractParameters+0x372>
    1866:	a81a      	add	r0, sp, #104	; 0x68
    for(int i = 0; i < MLX90640_COLUMN_NUM; i ++)
    1868:	2200      	movs	r2, #0
    186a:	e01b      	b.n	18a4 <MLX90640_ExtractParameters+0x3d4>
    186c:	f3af 8000 	nop.w
    1870:	00000000 	.word	0x00000000
    1874:	402c0000 	.word	0x402c0000
    1878:	00000000 	.word	0x00000000
    187c:	40000000 	.word	0x40000000
    1880:	43ff8000 	.word	0x43ff8000
    1884:	39800000 	.word	0x39800000
    1888:	44800000 	.word	0x44800000
    188c:	40200000 	.word	0x40200000
    1890:	b951b717 	.word	0xb951b717
    1894:	3c000000 	.word	0x3c000000
    1898:	42800000 	.word	0x42800000
    189c:	3d800000 	.word	0x3d800000
    18a0:	42000000 	.word	0x42000000
        if (occColumn[i] > 7)
    18a4:	f850 3b04 	ldr.w	r3, [r0], #4
    18a8:	2b07      	cmp	r3, #7
            occColumn[i] = occColumn[i] - 16;
    18aa:	bfc8      	it	gt
    18ac:	3b10      	subgt	r3, #16
    for(int i = 0; i < MLX90640_COLUMN_NUM; i ++)
    18ae:	f102 0201 	add.w	r2, r2, #1
            occColumn[i] = occColumn[i] - 16;
    18b2:	bfc8      	it	gt
    18b4:	f840 3c04 	strgt.w	r3, [r0, #-4]
    for(int i = 0; i < MLX90640_COLUMN_NUM; i ++)
    18b8:	2a20      	cmp	r2, #32
    18ba:	d1f3      	bne.n	18a4 <MLX90640_ExtractParameters+0x3d4>
    18bc:	f104 00be 	add.w	r0, r4, #190	; 0xbe
    18c0:	f209 664a 	addw	r6, r9, #1610	; 0x64a
    18c4:	f04f 0c00 	mov.w	ip, #0
            mlx90640->offset[p] = (offsetRef + (occRow[i] << occRowScale) + (occColumn[j] << occColumnScale) + mlx90640->offset[p]);
    18c8:	9a00      	ldr	r2, [sp, #0]
    18ca:	f855 3b04 	ldr.w	r3, [r5], #4
    18ce:	4093      	lsls	r3, r2
    18d0:	9a01      	ldr	r2, [sp, #4]
    18d2:	4413      	add	r3, r2
    18d4:	b29b      	uxth	r3, r3
    18d6:	4619      	mov	r1, r3
    18d8:	f1a0 0740 	sub.w	r7, r0, #64	; 0x40
    18dc:	f10d 0e68 	add.w	lr, sp, #104	; 0x68
    18e0:	4632      	mov	r2, r6
            mlx90640->offset[p] = (eeData[64 + p] & MLX90640_MSBITS_6_MASK) >> 10;
    18e2:	f837 bf02 	ldrh.w	fp, [r7, #2]!
    18e6:	ea4f 239b 	mov.w	r3, fp, lsr #10
            if (mlx90640->offset[p] > 31)
    18ea:	f5bb 4f00 	cmp.w	fp, #32768	; 0x8000
                mlx90640->offset[p] = mlx90640->offset[p] - 64;
    18ee:	bf28      	it	cs
    18f0:	3b40      	subcs	r3, #64	; 0x40
    18f2:	8053      	strh	r3, [r2, #2]
            mlx90640->offset[p] = (offsetRef + (occRow[i] << occRowScale) + (occColumn[j] << occColumnScale) + mlx90640->offset[p]);
    18f4:	f85e 3b04 	ldr.w	r3, [lr], #4
            mlx90640->offset[p] = mlx90640->offset[p]*(1 << occRemScale);
    18f8:	f932 bf02 	ldrsh.w	fp, [r2, #2]!
            mlx90640->offset[p] = (offsetRef + (occRow[i] << occRowScale) + (occColumn[j] << occColumnScale) + mlx90640->offset[p]);
    18fc:	fa03 f30a 	lsl.w	r3, r3, sl
    1900:	440b      	add	r3, r1
            mlx90640->offset[p] = mlx90640->offset[p]*(1 << occRemScale);
    1902:	fa0b fb08 	lsl.w	fp, fp, r8
            mlx90640->offset[p] = (offsetRef + (occRow[i] << occRowScale) + (occColumn[j] << occColumnScale) + mlx90640->offset[p]);
    1906:	445b      	add	r3, fp
        for(int j = 0; j < MLX90640_COLUMN_NUM; j ++)
    1908:	42b8      	cmp	r0, r7
            mlx90640->offset[p] = (offsetRef + (occRow[i] << occRowScale) + (occColumn[j] << occColumnScale) + mlx90640->offset[p]);
    190a:	8013      	strh	r3, [r2, #0]
        for(int j = 0; j < MLX90640_COLUMN_NUM; j ++)
    190c:	d1e9      	bne.n	18e2 <MLX90640_ExtractParameters+0x412>
    for(int i = 0; i < MLX90640_LINE_NUM; i++)
    190e:	f10c 0c20 	add.w	ip, ip, #32
    1912:	f5bc 7f40 	cmp.w	ip, #768	; 0x300
    1916:	f100 0040 	add.w	r0, r0, #64	; 0x40
    191a:	f106 0640 	add.w	r6, r6, #64	; 0x40
    191e:	d1d3      	bne.n	18c8 <MLX90640_ExtractParameters+0x3f8>
    ExtractKtaPixelParameters(eeData, mlx90640);
    1920:	4620      	mov	r0, r4
    1922:	4649      	mov	r1, r9
    1924:	f7ff fbb4 	bl	1090 <ExtractKtaPixelParameters>
    ExtractKvPixelParameters(eeData, mlx90640);
    1928:	4649      	mov	r1, r9
    192a:	4620      	mov	r0, r4
    192c:	f7ff fccc 	bl	12c8 <ExtractKvPixelParameters>
    uint8_t calibrationModeEE;
    
    calibrationModeEE = (eeData[10] & 0x0800) >> 4;
    calibrationModeEE = calibrationModeEE ^ 0x80;

    ilChessC[0] = (eeData[53] & 0x003F);
    1930:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
    calibrationModeEE = (eeData[10] & 0x0800) >> 4;
    1934:	8aa2      	ldrh	r2, [r4, #20]
    ilChessC[0] = (eeData[53] & 0x003F);
    1936:	f003 013f 	and.w	r1, r3, #63	; 0x3f
    193a:	ee07 1a90 	vmov	s15, r1
    193e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    {
        ilChessC[0] = ilChessC[0] - 64;
    }
    ilChessC[0] = ilChessC[0] / 16.0f;
    
    ilChessC[1] = (eeData[53] & 0x07C0) >> 6;
    1942:	f3c3 1184 	ubfx	r1, r3, #6, #5
    if (ilChessC[0] > 31)
    1946:	eef4 7ae9 	vcmpe.f32	s15, s19
    194a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        ilChessC[0] = ilChessC[0] - 64;
    194e:	bfc4      	itt	gt
    1950:	ed1f 7a2f 	vldrgt	s14, [pc, #-188]	; 1898 <MLX90640_ExtractParameters+0x3c8>
    1954:	ee77 7ac7 	vsubgt.f32	s15, s15, s14
    ilChessC[0] = ilChessC[0] / 16.0f;
    1958:	ed1f 7a30 	vldr	s14, [pc, #-192]	; 189c <MLX90640_ExtractParameters+0x3cc>
    195c:	ee67 6a87 	vmul.f32	s13, s15, s14
    ilChessC[1] = (eeData[53] & 0x07C0) >> 6;
    1960:	ee07 1a90 	vmov	s15, r1
    1964:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    if (ilChessC[1] > 15)
    1968:	eeb2 6a0e 	vmov.f32	s12, #46	; 0x41700000  15.0
    196c:	eef4 7ac6 	vcmpe.f32	s15, s12
    1970:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    {
        ilChessC[1] = ilChessC[1] - 32;
    1974:	bfc4      	itt	gt
    1976:	ed1f 7a36 	vldrgt	s14, [pc, #-216]	; 18a0 <MLX90640_ExtractParameters+0x3d0>
    197a:	ee77 7ac7 	vsubgt.f32	s15, s15, s14
    }
    ilChessC[1] = ilChessC[1] / 2.0f;
    
    ilChessC[2] = (eeData[53] & 0xF800) >> 11;
    197e:	0adb      	lsrs	r3, r3, #11
    ilChessC[1] = ilChessC[1] / 2.0f;
    1980:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    1984:	ee27 7a87 	vmul.f32	s14, s15, s14
    ilChessC[2] = (eeData[53] & 0xF800) >> 11;
    1988:	ee07 3a90 	vmov	s15, r3
    198c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    calibrationModeEE = calibrationModeEE ^ 0x80;
    1990:	ea6f 1212 	mvn.w	r2, r2, lsr #4
    if (ilChessC[2] > 15)
    1994:	eef4 7ac6 	vcmpe.f32	s15, s12
    1998:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    {
        ilChessC[2] = ilChessC[2] - 32;
    199c:	bfc4      	itt	gt
    199e:	ed1f 6a40 	vldrgt	s12, [pc, #-256]	; 18a0 <MLX90640_ExtractParameters+0x3d0>
    19a2:	ee77 7ac6 	vsubgt.f32	s15, s15, s12
    }
    ilChessC[2] = ilChessC[2] / 8.0f;
    
    mlx90640->calibrationModeEE = calibrationModeEE;
    mlx90640->ilChessC[0] = ilChessC[0];
    19a6:	f509 5380 	add.w	r3, r9, #4096	; 0x1000
    calibrationModeEE = calibrationModeEE ^ 0x80;
    19aa:	f002 0280 	and.w	r2, r2, #128	; 0x80
    ilChessC[2] = ilChessC[2] / 8.0f;
    19ae:	ee67 7aa8 	vmul.f32	s15, s15, s17
    mlx90640->calibrationModeEE = calibrationModeEE;
    19b2:	f889 2025 	strb.w	r2, [r9, #37]	; 0x25

static int ExtractDeviatingPixels(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
    uint16_t pixCnt = 0;
    uint16_t brokenPixCnt = 0;
    uint16_t outlierPixCnt = 0;
    19b6:	2500      	movs	r5, #0
    int warn = 0;
    int i;
    
    for(pixCnt = 0; pixCnt<5; pixCnt++)
    {
        mlx90640->brokenPixels[pixCnt] = 0xFFFF;
    19b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
    mlx90640->ilChessC[0] = ilChessC[0];
    19bc:	edc3 6a97 	vstr	s13, [r3, #604]	; 0x25c
    mlx90640->ilChessC[1] = ilChessC[1];
    19c0:	ed83 7a98 	vstr	s14, [r3, #608]	; 0x260
    mlx90640->ilChessC[2] = ilChessC[2];
    19c4:	edc3 7a99 	vstr	s15, [r3, #612]	; 0x264
        mlx90640->brokenPixels[pixCnt] = 0xFFFF;
    19c8:	f8a3 2268 	strh.w	r2, [r3, #616]	; 0x268
        mlx90640->outlierPixels[pixCnt] = 0xFFFF;
    19cc:	f8a3 2272 	strh.w	r2, [r3, #626]	; 0x272
        mlx90640->brokenPixels[pixCnt] = 0xFFFF;
    19d0:	f8a3 226a 	strh.w	r2, [r3, #618]	; 0x26a
        mlx90640->outlierPixels[pixCnt] = 0xFFFF;
    19d4:	f8a3 2274 	strh.w	r2, [r3, #628]	; 0x274
        mlx90640->brokenPixels[pixCnt] = 0xFFFF;
    19d8:	f8a3 226c 	strh.w	r2, [r3, #620]	; 0x26c
        mlx90640->outlierPixels[pixCnt] = 0xFFFF;
    19dc:	f8a3 2276 	strh.w	r2, [r3, #630]	; 0x276
        mlx90640->brokenPixels[pixCnt] = 0xFFFF;
    19e0:	f8a3 226e 	strh.w	r2, [r3, #622]	; 0x26e
        mlx90640->outlierPixels[pixCnt] = 0xFFFF;
    19e4:	f8a3 2278 	strh.w	r2, [r3, #632]	; 0x278
        mlx90640->brokenPixels[pixCnt] = 0xFFFF;
    19e8:	f8a3 2270 	strh.w	r2, [r3, #624]	; 0x270
        mlx90640->outlierPixels[pixCnt] = 0xFFFF;
    19ec:	f8a3 227a 	strh.w	r2, [r3, #634]	; 0x27a
    for(pixCnt = 0; pixCnt<5; pixCnt++)
    19f0:	347e      	adds	r4, #126	; 0x7e
    uint16_t brokenPixCnt = 0;
    19f2:	462e      	mov	r6, r5
    }
        
    pixCnt = 0;    
    19f4:	462b      	mov	r3, r5
    while (pixCnt < MLX90640_PIXEL_NUM && brokenPixCnt < 5 && outlierPixCnt < 5)
    {
        if(eeData[pixCnt+64] == 0)
    19f6:	f834 1f02 	ldrh.w	r1, [r4, #2]!
    19fa:	1c5a      	adds	r2, r3, #1
    19fc:	b971      	cbnz	r1, 1a1c <MLX90640_ExtractParameters+0x54c>
        {
            mlx90640->brokenPixels[brokenPixCnt] = pixCnt;
    19fe:	f606 1134 	addw	r1, r6, #2356	; 0x934
            brokenPixCnt = brokenPixCnt + 1;
    1a02:	3601      	adds	r6, #1
            mlx90640->brokenPixels[brokenPixCnt] = pixCnt;
    1a04:	f829 3011 	strh.w	r3, [r9, r1, lsl #1]
        {
            mlx90640->outlierPixels[outlierPixCnt] = pixCnt;
            outlierPixCnt = outlierPixCnt + 1;
        }    
        
        pixCnt = pixCnt + 1;
    1a08:	b293      	uxth	r3, r2
    while (pixCnt < MLX90640_PIXEL_NUM && brokenPixCnt < 5 && outlierPixCnt < 5)
    1a0a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
            brokenPixCnt = brokenPixCnt + 1;
    1a0e:	b2b6      	uxth	r6, r6
    while (pixCnt < MLX90640_PIXEL_NUM && brokenPixCnt < 5 && outlierPixCnt < 5)
    1a10:	d01b      	beq.n	1a4a <MLX90640_ExtractParameters+0x57a>
    1a12:	2e05      	cmp	r6, #5
    1a14:	d1ef      	bne.n	19f6 <MLX90640_ExtractParameters+0x526>
        
    } 
    
    if(brokenPixCnt > 4)  
    {
        warn = -MLX90640_BROKEN_PIXELS_NUM_ERROR;
    1a16:	f06f 0002 	mvn.w	r0, #2
    1a1a:	e011      	b.n	1a40 <MLX90640_ExtractParameters+0x570>
        else if((eeData[pixCnt+64] & 0x0001) != 0)
    1a1c:	07c9      	lsls	r1, r1, #31
            mlx90640->outlierPixels[outlierPixCnt] = pixCnt;
    1a1e:	bf41      	itttt	mi
    1a20:	f605 1138 	addwmi	r1, r5, #2360	; 0x938
    1a24:	eb09 0141 	addmi.w	r1, r9, r1, lsl #1
            outlierPixCnt = outlierPixCnt + 1;
    1a28:	3501      	addmi	r5, #1
            mlx90640->outlierPixels[outlierPixCnt] = pixCnt;
    1a2a:	804b      	strhmi	r3, [r1, #2]
        pixCnt = pixCnt + 1;
    1a2c:	b293      	uxth	r3, r2
            outlierPixCnt = outlierPixCnt + 1;
    1a2e:	bf48      	it	mi
    1a30:	b2ad      	uxthmi	r5, r5
    while (pixCnt < MLX90640_PIXEL_NUM && brokenPixCnt < 5 && outlierPixCnt < 5)
    1a32:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
    1a36:	d008      	beq.n	1a4a <MLX90640_ExtractParameters+0x57a>
    1a38:	2d05      	cmp	r5, #5
    1a3a:	d1dc      	bne.n	19f6 <MLX90640_ExtractParameters+0x526>
    }         
    else if(outlierPixCnt > 4)  
    {
        warn = -MLX90640_OUTLIER_PIXELS_NUM_ERROR;
    1a3c:	f06f 0003 	mvn.w	r0, #3
}
    1a40:	b03b      	add	sp, #236	; 0xec
    1a42:	ecbd 8b06 	vpop	{d8-d10}
    1a46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(brokenPixCnt > 4)  
    1a4a:	2e05      	cmp	r6, #5
    1a4c:	d0e3      	beq.n	1a16 <MLX90640_ExtractParameters+0x546>
    else if(outlierPixCnt > 4)  
    1a4e:	2d05      	cmp	r5, #5
    1a50:	d0f4      	beq.n	1a3c <MLX90640_ExtractParameters+0x56c>
    }
    else if((brokenPixCnt + outlierPixCnt) > 4)  
    1a52:	1973      	adds	r3, r6, r5
    1a54:	2b04      	cmp	r3, #4
    1a56:	dc4b      	bgt.n	1af0 <MLX90640_ExtractParameters+0x620>
    1a58:	f509 5793 	add.w	r7, r9, #4704	; 0x1260
    1a5c:	2400      	movs	r4, #0
    1a5e:	3708      	adds	r7, #8
    {
        warn = -MLX90640_BAD_PIXELS_NUM_ERROR;
    } 
    else
    {
        for(pixCnt=0; pixCnt<brokenPixCnt; pixCnt++)
    1a60:	b2a3      	uxth	r3, r4
    1a62:	429e      	cmp	r6, r3
    1a64:	d815      	bhi.n	1a92 <MLX90640_ExtractParameters+0x5c2>
    1a66:	f509 5793 	add.w	r7, r9, #4704	; 0x1260
    1a6a:	2400      	movs	r4, #0
    1a6c:	3712      	adds	r7, #18
                    return warn;
                }    
            }    
        }
        
        for(pixCnt=0; pixCnt<outlierPixCnt; pixCnt++)
    1a6e:	b2a3      	uxth	r3, r4
    1a70:	429d      	cmp	r5, r3
    1a72:	d820      	bhi.n	1ab6 <MLX90640_ExtractParameters+0x5e6>
    1a74:	f509 5493 	add.w	r4, r9, #4704	; 0x1260
    1a78:	f509 5993 	add.w	r9, r9, #4704	; 0x1260
    1a7c:	3408      	adds	r4, #8
    1a7e:	f109 0910 	add.w	r9, r9, #16
    1a82:	eb04 0646 	add.w	r6, r4, r6, lsl #1
    1a86:	eb09 0545 	add.w	r5, r9, r5, lsl #1
                    return warn;
                }    
            }    
        } 
        
        for(pixCnt=0; pixCnt<brokenPixCnt; pixCnt++)
    1a8a:	42a6      	cmp	r6, r4
    1a8c:	d033      	beq.n	1af6 <MLX90640_ExtractParameters+0x626>
    1a8e:	464f      	mov	r7, r9
    1a90:	e02a      	b.n	1ae8 <MLX90640_ExtractParameters+0x618>
            for(i=pixCnt+1; i<brokenPixCnt; i++)
    1a92:	f104 0a01 	add.w	sl, r4, #1
    1a96:	46d0      	mov	r8, sl
    1a98:	4546      	cmp	r6, r8
    1a9a:	dc01      	bgt.n	1aa0 <MLX90640_ExtractParameters+0x5d0>
    1a9c:	4654      	mov	r4, sl
    1a9e:	e7df      	b.n	1a60 <MLX90640_ExtractParameters+0x590>
                warn = CheckAdjacentPixels(mlx90640->brokenPixels[pixCnt],mlx90640->brokenPixels[i]);
    1aa0:	f837 1018 	ldrh.w	r1, [r7, r8, lsl #1]
    1aa4:	f837 0014 	ldrh.w	r0, [r7, r4, lsl #1]
    1aa8:	f007 f917 	bl	8cda <CheckAdjacentPixels>
                if(warn != 0)
    1aac:	2800      	cmp	r0, #0
    1aae:	d1c7      	bne.n	1a40 <MLX90640_ExtractParameters+0x570>
            for(i=pixCnt+1; i<brokenPixCnt; i++)
    1ab0:	f108 0801 	add.w	r8, r8, #1
    1ab4:	e7f0      	b.n	1a98 <MLX90640_ExtractParameters+0x5c8>
            for(i=pixCnt+1; i<outlierPixCnt; i++)
    1ab6:	f104 0a01 	add.w	sl, r4, #1
    1aba:	46d0      	mov	r8, sl
    1abc:	4545      	cmp	r5, r8
    1abe:	dc01      	bgt.n	1ac4 <MLX90640_ExtractParameters+0x5f4>
    1ac0:	4654      	mov	r4, sl
    1ac2:	e7d4      	b.n	1a6e <MLX90640_ExtractParameters+0x59e>
                warn = CheckAdjacentPixels(mlx90640->outlierPixels[pixCnt],mlx90640->outlierPixels[i]);
    1ac4:	f837 1018 	ldrh.w	r1, [r7, r8, lsl #1]
    1ac8:	f837 0014 	ldrh.w	r0, [r7, r4, lsl #1]
    1acc:	f007 f905 	bl	8cda <CheckAdjacentPixels>
                if(warn != 0)
    1ad0:	2800      	cmp	r0, #0
    1ad2:	d1b5      	bne.n	1a40 <MLX90640_ExtractParameters+0x570>
            for(i=pixCnt+1; i<outlierPixCnt; i++)
    1ad4:	f108 0801 	add.w	r8, r8, #1
    1ad8:	e7f0      	b.n	1abc <MLX90640_ExtractParameters+0x5ec>
        {
            for(i=0; i<outlierPixCnt; i++)
            {
                warn = CheckAdjacentPixels(mlx90640->brokenPixels[pixCnt],mlx90640->outlierPixels[i]);
    1ada:	f837 1f02 	ldrh.w	r1, [r7, #2]!
    1ade:	8820      	ldrh	r0, [r4, #0]
    1ae0:	f007 f8fb 	bl	8cda <CheckAdjacentPixels>
                if(warn != 0)
    1ae4:	2800      	cmp	r0, #0
    1ae6:	d1ab      	bne.n	1a40 <MLX90640_ExtractParameters+0x570>
            for(i=0; i<outlierPixCnt; i++)
    1ae8:	42bd      	cmp	r5, r7
    1aea:	d1f6      	bne.n	1ada <MLX90640_ExtractParameters+0x60a>
        for(pixCnt=0; pixCnt<brokenPixCnt; pixCnt++)
    1aec:	3402      	adds	r4, #2
    1aee:	e7cc      	b.n	1a8a <MLX90640_ExtractParameters+0x5ba>
        warn = -MLX90640_BAD_PIXELS_NUM_ERROR;
    1af0:	f06f 0004 	mvn.w	r0, #4
    1af4:	e7a4      	b.n	1a40 <MLX90640_ExtractParameters+0x570>
    1af6:	2000      	movs	r0, #0
    return error;
    1af8:	e7a2      	b.n	1a40 <MLX90640_ExtractParameters+0x570>
    1afa:	bf00      	nop
    1afc:	0000      	movs	r0, r0
	...

00001b00 <MLX90640_GetVdd>:
{
    1b00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1b04:	ed2d 8b02 	vpush	{d8}
    1b08:	4605      	mov	r5, r0
    resolutionRAM = (frameData[832] & ~MLX90640_CTRL_RESOLUTION_MASK) >> MLX90640_CTRL_RESOLUTION_SHIFT;   
    1b0a:	f8b0 8680 	ldrh.w	r8, [r0, #1664]	; 0x680
    resolutionCorrection = POW2(params->resolutionEE) / POW2(resolutionRAM);
    1b0e:	f891 0024 	ldrb.w	r0, [r1, #36]	; 0x24
    1b12:	ed9f 8b27 	vldr	d8, [pc, #156]	; 1bb0 <MLX90640_GetVdd+0xb0>
{
    1b16:	460c      	mov	r4, r1
    resolutionCorrection = POW2(params->resolutionEE) / POW2(resolutionRAM);
    1b18:	f7fe fc34 	bl	384 <__aeabi_ui2d>
    1b1c:	eeb0 0a48 	vmov.f32	s0, s16
    1b20:	eef0 0a68 	vmov.f32	s1, s17
    1b24:	ec41 0b11 	vmov	d1, r0, r1
    1b28:	f006 fea0 	bl	886c <pow>
    resolutionRAM = (frameData[832] & ~MLX90640_CTRL_RESOLUTION_MASK) >> MLX90640_CTRL_RESOLUTION_SHIFT;   
    1b2c:	f3c8 2881 	ubfx	r8, r8, #10, #2
    resolutionCorrection = POW2(params->resolutionEE) / POW2(resolutionRAM);
    1b30:	4640      	mov	r0, r8
    1b32:	ec57 6b10 	vmov	r6, r7, d0
    1b36:	f7fe fc25 	bl	384 <__aeabi_ui2d>
    1b3a:	eeb0 0a48 	vmov.f32	s0, s16
    1b3e:	eef0 0a68 	vmov.f32	s1, s17
    1b42:	ec41 0b11 	vmov	d1, r0, r1
    1b46:	f006 fe91 	bl	886c <pow>
    vdd = (resolutionCorrection * (int16_t)frameData[810] - params->vdd25) / params->kVdd + 3.3;
    1b4a:	f9b5 1654 	ldrsh.w	r1, [r5, #1620]	; 0x654
    resolutionCorrection = POW2(params->resolutionEE) / POW2(resolutionRAM);
    1b4e:	ec53 2b10 	vmov	r2, r3, d0
    vdd = (resolutionCorrection * (int16_t)frameData[810] - params->vdd25) / params->kVdd + 3.3;
    1b52:	ee08 1a10 	vmov	s16, r1
    resolutionCorrection = POW2(params->resolutionEE) / POW2(resolutionRAM);
    1b56:	4630      	mov	r0, r6
    1b58:	4639      	mov	r1, r7
    1b5a:	f7fe fdb7 	bl	6cc <__aeabi_ddiv>
    1b5e:	f7fe ff6d 	bl	a3c <__aeabi_d2f>
    vdd = (resolutionCorrection * (int16_t)frameData[810] - params->vdd25) / params->kVdd + 3.3;
    1b62:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
    1b66:	ee07 3a90 	vmov	s15, r3
    resolutionCorrection = POW2(params->resolutionEE) / POW2(resolutionRAM);
    1b6a:	ee07 0a10 	vmov	s14, r0
    vdd = (resolutionCorrection * (int16_t)frameData[810] - params->vdd25) / params->kVdd + 3.3;
    1b6e:	f9b4 3000 	ldrsh.w	r3, [r4]
    1b72:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
    1b76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    1b7a:	ee58 7a07 	vnmls.f32	s15, s16, s14
    1b7e:	ee07 3a10 	vmov	s14, r3
    1b82:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    1b86:	eec7 7a87 	vdiv.f32	s15, s15, s14
    1b8a:	ee17 0a90 	vmov	r0, s15
    1b8e:	f7fe fc1b 	bl	3c8 <__aeabi_f2d>
    1b92:	a309      	add	r3, pc, #36	; (adr r3, 1bb8 <MLX90640_GetVdd+0xb8>)
    1b94:	e9d3 2300 	ldrd	r2, r3, [r3]
    1b98:	f7fe fab8 	bl	10c <__adddf3>
    1b9c:	f7fe ff4e 	bl	a3c <__aeabi_d2f>
}
    1ba0:	ecbd 8b02 	vpop	{d8}
    1ba4:	ee00 0a10 	vmov	s0, r0
    1ba8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1bac:	f3af 8000 	nop.w
    1bb0:	00000000 	.word	0x00000000
    1bb4:	40000000 	.word	0x40000000
    1bb8:	66666666 	.word	0x66666666
    1bbc:	400a6666 	.word	0x400a6666

00001bc0 <MLX90640_GetTa>:
{
    1bc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1bc4:	4606      	mov	r6, r0
    1bc6:	460c      	mov	r4, r1
    vdd = MLX90640_GetVdd(frameData, params);
    1bc8:	f7ff ff9a 	bl	1b00 <MLX90640_GetVdd>
    ptatArt = (ptat / (ptat * params->alphaPTAT + (int16_t)frameData[768])) * POW2(18);
    1bcc:	f9b6 3640 	ldrsh.w	r3, [r6, #1600]	; 0x640
    1bd0:	edd4 6a04 	vldr	s13, [r4, #16]
    1bd4:	ee07 3a10 	vmov	s14, r3
    1bd8:	f9b6 3600 	ldrsh.w	r3, [r6, #1536]	; 0x600
    1bdc:	ee07 3a90 	vmov	s15, r3
    1be0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    1be4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    1be8:	ee47 7a26 	vmla.f32	s15, s14, s13
    vdd = MLX90640_GetVdd(frameData, params);
    1bec:	ee10 5a10 	vmov	r5, s0
    ptatArt = (ptat / (ptat * params->alphaPTAT + (int16_t)frameData[768])) * POW2(18);
    1bf0:	eec7 7a27 	vdiv.f32	s15, s14, s15
    1bf4:	ee17 0a90 	vmov	r0, s15
    1bf8:	f7fe fbe6 	bl	3c8 <__aeabi_f2d>
    1bfc:	ed9f 1b24 	vldr	d1, [pc, #144]	; 1c90 <MLX90640_GetTa+0xd0>
    1c00:	ed9f 0b25 	vldr	d0, [pc, #148]	; 1c98 <MLX90640_GetTa+0xd8>
    1c04:	4606      	mov	r6, r0
    1c06:	460f      	mov	r7, r1
    1c08:	f006 fe30 	bl	886c <pow>
    1c0c:	4630      	mov	r0, r6
    1c0e:	ec53 2b10 	vmov	r2, r3, d0
    1c12:	4639      	mov	r1, r7
    1c14:	f7fe fc30 	bl	478 <__aeabi_dmul>
    1c18:	f7fe ff10 	bl	a3c <__aeabi_d2f>
    ta = (ptatArt / (1 + params->KvPTAT * (vdd - 3.3)) - params->vPTAT25);
    1c1c:	f7fe fbd4 	bl	3c8 <__aeabi_f2d>
    1c20:	4606      	mov	r6, r0
    1c22:	6860      	ldr	r0, [r4, #4]
    1c24:	460f      	mov	r7, r1
    1c26:	f7fe fbcf 	bl	3c8 <__aeabi_f2d>
    1c2a:	4680      	mov	r8, r0
    1c2c:	4628      	mov	r0, r5
    1c2e:	4689      	mov	r9, r1
    1c30:	f7fe fbca 	bl	3c8 <__aeabi_f2d>
    1c34:	a31b      	add	r3, pc, #108	; (adr r3, 1ca4 <MLX90640_GetTa+0xe4>)
    1c36:	e9d3 2300 	ldrd	r2, r3, [r3]
    1c3a:	f7fe fa65 	bl	108 <__aeabi_dsub>
    1c3e:	4602      	mov	r2, r0
    1c40:	460b      	mov	r3, r1
    1c42:	4640      	mov	r0, r8
    1c44:	4649      	mov	r1, r9
    1c46:	f7fe fc17 	bl	478 <__aeabi_dmul>
    1c4a:	4b15      	ldr	r3, [pc, #84]	; (1ca0 <MLX90640_GetTa+0xe0>)
    1c4c:	2200      	movs	r2, #0
    1c4e:	f7fe fa5d 	bl	10c <__adddf3>
    1c52:	4602      	mov	r2, r0
    1c54:	460b      	mov	r3, r1
    1c56:	4630      	mov	r0, r6
    1c58:	4639      	mov	r1, r7
    1c5a:	f7fe fd37 	bl	6cc <__aeabi_ddiv>
    1c5e:	4606      	mov	r6, r0
    1c60:	89a0      	ldrh	r0, [r4, #12]
    1c62:	460f      	mov	r7, r1
    1c64:	f7fe fb9e 	bl	3a4 <__aeabi_i2d>
    1c68:	4602      	mov	r2, r0
    1c6a:	460b      	mov	r3, r1
    1c6c:	4630      	mov	r0, r6
    1c6e:	4639      	mov	r1, r7
    1c70:	f7fe fa4a 	bl	108 <__aeabi_dsub>
    1c74:	f7fe fee2 	bl	a3c <__aeabi_d2f>
    ta = ta / params->KtPTAT + 25;
    1c78:	edd4 7a02 	vldr	s15, [r4, #8]
    ta = (ptatArt / (1 + params->KvPTAT * (vdd - 3.3)) - params->vPTAT25);
    1c7c:	ee07 0a10 	vmov	s14, r0
    ta = ta / params->KtPTAT + 25;
    1c80:	ee87 0a27 	vdiv.f32	s0, s14, s15
}
    1c84:	eef3 7a09 	vmov.f32	s15, #57	; 0x41c80000  25.0
    1c88:	ee30 0a27 	vadd.f32	s0, s0, s15
    1c8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1c90:	00000000 	.word	0x00000000
    1c94:	40320000 	.word	0x40320000
    1c98:	00000000 	.word	0x00000000
    1c9c:	40000000 	.word	0x40000000
    1ca0:	3ff00000 	.word	0x3ff00000
    1ca4:	66666666 	.word	0x66666666
    1ca8:	400a6666 	.word	0x400a6666
    1cac:	00000000 	.word	0x00000000

00001cb0 <MLX90640_CalculateTo>:
{
    1cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1cb4:	ed2d 8b0a 	vpush	{d8-d12}
    1cb8:	b095      	sub	sp, #84	; 0x54
    subPage = frameData[833];
    1cba:	f8b0 3682 	ldrh.w	r3, [r0, #1666]	; 0x682
    1cbe:	930a      	str	r3, [sp, #40]	; 0x28
{
    1cc0:	460c      	mov	r4, r1
    1cc2:	ee10 5a90 	vmov	r5, s1
    1cc6:	4681      	mov	r9, r0
    1cc8:	4690      	mov	r8, r2
    1cca:	eeb0 aa40 	vmov.f32	s20, s0
    vdd = MLX90640_GetVdd(frameData, params);
    1cce:	f7ff ff17 	bl	1b00 <MLX90640_GetVdd>
    ta = MLX90640_GetTa(frameData, params);
    1cd2:	4621      	mov	r1, r4
    1cd4:	4648      	mov	r0, r9
    vdd = MLX90640_GetVdd(frameData, params);
    1cd6:	ee10 6a10 	vmov	r6, s0
    ta = MLX90640_GetTa(frameData, params);
    1cda:	f7ff ff71 	bl	1bc0 <MLX90640_GetTa>
    ta4 = (ta + 273.15);
    1cde:	ee10 0a10 	vmov	r0, s0
    ta = MLX90640_GetTa(frameData, params);
    1ce2:	eef0 9a40 	vmov.f32	s19, s0
    ta4 = (ta + 273.15);
    1ce6:	f7fe fb6f 	bl	3c8 <__aeabi_f2d>
    1cea:	f20f 431c 	addw	r3, pc, #1052	; 0x41c
    1cee:	e9d3 2300 	ldrd	r2, r3, [r3]
    1cf2:	f7fe fa0b 	bl	10c <__adddf3>
    1cf6:	f7fe fea1 	bl	a3c <__aeabi_d2f>
    1cfa:	ee08 0a90 	vmov	s17, r0
    tr4 = (tr + 273.15);
    1cfe:	4628      	mov	r0, r5
    1d00:	f7fe fb62 	bl	3c8 <__aeabi_f2d>
    1d04:	f20f 4300 	addw	r3, pc, #1024	; 0x400
    1d08:	e9d3 2300 	ldrd	r2, r3, [r3]
    1d0c:	f7fe f9fe 	bl	10c <__adddf3>
    1d10:	f7fe fe94 	bl	a3c <__aeabi_d2f>
    1d14:	ee08 0a10 	vmov	s16, r0
    tr4 = tr4 * tr4;
    1d18:	ee28 8a08 	vmul.f32	s16, s16, s16
    ta4 = ta4 * ta4;
    1d1c:	ee68 8aa8 	vmul.f32	s17, s17, s17
    tr4 = tr4 * tr4;
    1d20:	ee28 8a08 	vmul.f32	s16, s16, s16
    ktaScale = POW2(params->ktaScale);
    1d24:	f894 0f4c 	ldrb.w	r0, [r4, #3916]	; 0xf4c
    taTr = tr4 - (tr4-ta4)/emissivity;
    1d28:	eeb0 7a48 	vmov.f32	s14, s16
    1d2c:	ee08 7ae8 	vmls.f32	s14, s17, s17
    kvScale = POW2(params->kvScale);
    1d30:	f504 5580 	add.w	r5, r4, #4096	; 0x1000
    alphaCorrR[0] = 1 / (1 + params->ksTo[0] * 40);
    1d34:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
    taTr = tr4 - (tr4-ta4)/emissivity;
    1d38:	eec7 7a0a 	vdiv.f32	s15, s14, s20
    irDataCP[0] = irDataCP[0] - params->cpOffset[0] * (1 + params->cpKta * (ta - 25)) * (1 + params->cpKv * (vdd - 3.3));
    1d3c:	eef0 ca49 	vmov.f32	s25, s18
    taTr = tr4 - (tr4-ta4)/emissivity;
    1d40:	ee38 8a67 	vsub.f32	s16, s16, s15
    ktaScale = POW2(params->ktaScale);
    1d44:	f7fe fb1e 	bl	384 <__aeabi_ui2d>
    1d48:	ed9f 0be7 	vldr	d0, [pc, #924]	; 20e8 <CONFIG_MAIN_STACK_SIZE+0xe8>
    1d4c:	ec41 0b11 	vmov	d1, r0, r1
    1d50:	f006 fd8c 	bl	886c <pow>
    1d54:	ec51 0b10 	vmov	r0, r1, d0
    1d58:	f7fe fe70 	bl	a3c <__aeabi_d2f>
    1d5c:	ee0a 0a90 	vmov	s21, r0
    kvScale = POW2(params->kvScale);
    1d60:	f895 024d 	ldrb.w	r0, [r5, #589]	; 0x24d
    1d64:	f7fe fb0e 	bl	384 <__aeabi_ui2d>
    1d68:	ed9f 0bdf 	vldr	d0, [pc, #892]	; 20e8 <CONFIG_MAIN_STACK_SIZE+0xe8>
    1d6c:	ec41 0b11 	vmov	d1, r0, r1
    1d70:	f006 fd7c 	bl	886c <pow>
    1d74:	ec51 0b10 	vmov	r0, r1, d0
    1d78:	f7fe fe60 	bl	a3c <__aeabi_d2f>
    1d7c:	ee0b 0a10 	vmov	s22, r0
    alphaScale = POW2(params->alphaScale);
    1d80:	f894 064a 	ldrb.w	r0, [r4, #1610]	; 0x64a
    1d84:	f7fe fafe 	bl	384 <__aeabi_ui2d>
    1d88:	ed9f 0bd7 	vldr	d0, [pc, #860]	; 20e8 <CONFIG_MAIN_STACK_SIZE+0xe8>
    1d8c:	ec41 0b11 	vmov	d1, r0, r1
    1d90:	f006 fd6c 	bl	886c <pow>
    1d94:	ec51 0b10 	vmov	r0, r1, d0
    1d98:	f7fe fe50 	bl	a3c <__aeabi_d2f>
    alphaCorrR[0] = 1 / (1 + params->ksTo[0] * 40);
    1d9c:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
    1da0:	eddf 7ad7 	vldr	s15, [pc, #860]	; 2100 <CONFIG_MAIN_STACK_SIZE+0x100>
    alphaCorrR[2] = (1 + params->ksTo[1] * params->ct[2]);
    1da4:	f9b4 2044 	ldrsh.w	r2, [r4, #68]	; 0x44
    alphaCorrR[3] = alphaCorrR[2] * (1 + params->ksTo[2] * (params->ct[3] - params->ct[2]));
    1da8:	f9b4 3046 	ldrsh.w	r3, [r4, #70]	; 0x46
    1dac:	ed94 6a0d 	vldr	s12, [r4, #52]	; 0x34
    alphaScale = POW2(params->alphaScale);
    1db0:	900b      	str	r0, [sp, #44]	; 0x2c
    alphaCorrR[0] = 1 / (1 + params->ksTo[0] * 40);
    1db2:	eeb0 7a49 	vmov.f32	s14, s18
    1db6:	ee06 7aa7 	vmla.f32	s14, s13, s15
    alphaCorrR[3] = alphaCorrR[2] * (1 + params->ksTo[2] * (params->ct[3] - params->ct[2]));
    1dba:	1a9b      	subs	r3, r3, r2
    irDataCP[0] = irDataCP[0] - params->cpOffset[0] * (1 + params->cpKta * (ta - 25)) * (1 + params->cpKv * (vdd - 3.3));
    1dbc:	4630      	mov	r0, r6
    alphaCorrR[2] = (1 + params->ksTo[1] * params->ct[2]);
    1dbe:	eef0 6a49 	vmov.f32	s13, s18
    alphaCorrR[0] = 1 / (1 + params->ksTo[0] * 40);
    1dc2:	eec9 7a07 	vdiv.f32	s15, s18, s14
    alphaCorrR[1] = 1 ;
    1dc6:	ed8d 9a11 	vstr	s18, [sp, #68]	; 0x44
    alphaCorrR[0] = 1 / (1 + params->ksTo[0] * 40);
    1dca:	edcd 7a10 	vstr	s15, [sp, #64]	; 0x40
    alphaCorrR[2] = (1 + params->ksTo[1] * params->ct[2]);
    1dce:	ee07 2a90 	vmov	s15, r2
    1dd2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    1dd6:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
    1dda:	ee47 6a27 	vmla.f32	s13, s14, s15
    alphaCorrR[3] = alphaCorrR[2] * (1 + params->ksTo[2] * (params->ct[3] - params->ct[2]));
    1dde:	ee07 3a90 	vmov	s15, r3
    1de2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    1de6:	eeb0 7a49 	vmov.f32	s14, s18
    1dea:	ee07 7a86 	vmla.f32	s14, s15, s12
    gain = (float)params->gainEE / (int16_t)frameData[778]; 
    1dee:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
    alphaCorrR[2] = (1 + params->ksTo[1] * params->ct[2]);
    1df2:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
    alphaCorrR[3] = alphaCorrR[2] * (1 + params->ksTo[2] * (params->ct[3] - params->ct[2]));
    1df6:	ee67 7a26 	vmul.f32	s15, s14, s13
    gain = (float)params->gainEE / (int16_t)frameData[778]; 
    1dfa:	ee07 3a10 	vmov	s14, r3
    1dfe:	f9b9 3614 	ldrsh.w	r3, [r9, #1556]	; 0x614
    alphaCorrR[3] = alphaCorrR[2] * (1 + params->ksTo[2] * (params->ct[3] - params->ct[2]));
    1e02:	edcd 7a13 	vstr	s15, [sp, #76]	; 0x4c
    gain = (float)params->gainEE / (int16_t)frameData[778]; 
    1e06:	ee07 3a90 	vmov	s15, r3
    mode = (frameData[832] & MLX90640_CTRL_MEAS_MODE_MASK) >> 5;
    1e0a:	f8b9 3680 	ldrh.w	r3, [r9, #1664]	; 0x680
    gain = (float)params->gainEE / (int16_t)frameData[778]; 
    1e0e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    1e12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    mode = (frameData[832] & MLX90640_CTRL_MEAS_MODE_MASK) >> 5;
    1e16:	095b      	lsrs	r3, r3, #5
    gain = (float)params->gainEE / (int16_t)frameData[778]; 
    1e18:	eec7 ba27 	vdiv.f32	s23, s14, s15
    mode = (frameData[832] & MLX90640_CTRL_MEAS_MODE_MASK) >> 5;
    1e1c:	9306      	str	r3, [sp, #24]
    1e1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    1e22:	9307      	str	r3, [sp, #28]
    irDataCP[1] = (int16_t)frameData[808] * gain;
    1e24:	f9b9 3650 	ldrsh.w	r3, [r9, #1616]	; 0x650
    irDataCP[0] = irDataCP[0] - params->cpOffset[0] * (1 + params->cpKta * (ta - 25)) * (1 + params->cpKv * (vdd - 3.3));
    1e28:	eef3 7a09 	vmov.f32	s15, #57	; 0x41c80000  25.0
    1e2c:	ee79 9ae7 	vsub.f32	s19, s19, s15
    1e30:	edd4 7a08 	vldr	s15, [r4, #32]
    irDataCP[1] = (int16_t)frameData[808] * gain;
    1e34:	ee0c 3a10 	vmov	s24, r3
    irDataCP[0] = irDataCP[0] - params->cpOffset[0] * (1 + params->cpKta * (ta - 25)) * (1 + params->cpKv * (vdd - 3.3));
    1e38:	ee49 caa7 	vmla.f32	s25, s19, s15
    1e3c:	f7fe fac4 	bl	3c8 <__aeabi_f2d>
    1e40:	a3ab      	add	r3, pc, #684	; (adr r3, 20f0 <CONFIG_MAIN_STACK_SIZE+0xf0>)
    1e42:	e9d3 2300 	ldrd	r2, r3, [r3]
    1e46:	f7fe f95f 	bl	108 <__aeabi_dsub>
    1e4a:	e9cd 0104 	strd	r0, r1, [sp, #16]
    1e4e:	69e0      	ldr	r0, [r4, #28]
    1e50:	f7fe faba 	bl	3c8 <__aeabi_f2d>
    1e54:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    1e58:	f7fe fb0e 	bl	478 <__aeabi_dmul>
    1e5c:	2200      	movs	r2, #0
    1e5e:	4ba9      	ldr	r3, [pc, #676]	; (2104 <CONFIG_MAIN_STACK_SIZE+0x104>)
    1e60:	f7fe f954 	bl	10c <__adddf3>
    irDataCP[0] = (int16_t)frameData[776] * gain;
    1e64:	f9b9 3610 	ldrsh.w	r3, [r9, #1552]	; 0x610
    1e68:	ee07 3a90 	vmov	s15, r3
    1e6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    irDataCP[0] = irDataCP[0] - params->cpOffset[0] * (1 + params->cpKta * (ta - 25)) * (1 + params->cpKv * (vdd - 3.3));
    1e70:	4682      	mov	sl, r0
    1e72:	ee67 7aab 	vmul.f32	s15, s15, s23
    1e76:	468b      	mov	fp, r1
    1e78:	ee17 0a90 	vmov	r0, s15
    1e7c:	f7fe faa4 	bl	3c8 <__aeabi_f2d>
    1e80:	f9b5 3258 	ldrsh.w	r3, [r5, #600]	; 0x258
    1e84:	ee07 3a90 	vmov	s15, r3
    1e88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    1e8c:	4606      	mov	r6, r0
    1e8e:	ee67 7aac 	vmul.f32	s15, s15, s25
    1e92:	460f      	mov	r7, r1
    1e94:	ee17 0a90 	vmov	r0, s15
    1e98:	f7fe fa96 	bl	3c8 <__aeabi_f2d>
    1e9c:	4652      	mov	r2, sl
    1e9e:	465b      	mov	r3, fp
    1ea0:	f7fe faea 	bl	478 <__aeabi_dmul>
    1ea4:	4602      	mov	r2, r0
    1ea6:	460b      	mov	r3, r1
    1ea8:	4630      	mov	r0, r6
    1eaa:	4639      	mov	r1, r7
    1eac:	f7fe f92c 	bl	108 <__aeabi_dsub>
    1eb0:	f7fe fdc4 	bl	a3c <__aeabi_d2f>
    irDataCP[1] = (int16_t)frameData[808] * gain;
    1eb4:	eeb8 cacc 	vcvt.f32.s32	s24, s24
    if( mode ==  params->calibrationModeEE)
    1eb8:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
    1ebc:	9a07      	ldr	r2, [sp, #28]
    irDataCP[0] = irDataCP[0] - params->cpOffset[0] * (1 + params->cpKta * (ta - 25)) * (1 + params->cpKv * (vdd - 3.3));
    1ebe:	900e      	str	r0, [sp, #56]	; 0x38
    irDataCP[1] = (int16_t)frameData[808] * gain;
    1ec0:	ee2c ca2b 	vmul.f32	s24, s24, s23
    if( mode ==  params->calibrationModeEE)
    1ec4:	4293      	cmp	r3, r2
    1ec6:	f9b5 325a 	ldrsh.w	r3, [r5, #602]	; 0x25a
        irDataCP[1] = irDataCP[1] - params->cpOffset[1] * (1 + params->cpKta * (ta - 25)) * (1 + params->cpKv * (vdd - 3.3));
    1eca:	ee1c 0a10 	vmov	r0, s24
    1ece:	ee08 3a90 	vmov	s17, r3
    if( mode ==  params->calibrationModeEE)
    1ed2:	f040 81d7 	bne.w	2284 <CONFIG_MAIN_STACK_SIZE+0x284>
        irDataCP[1] = irDataCP[1] - params->cpOffset[1] * (1 + params->cpKta * (ta - 25)) * (1 + params->cpKv * (vdd - 3.3));
    1ed6:	f7fe fa77 	bl	3c8 <__aeabi_f2d>
    1eda:	eef8 8ae8 	vcvt.f32.s32	s17, s17
    1ede:	4606      	mov	r6, r0
    1ee0:	460f      	mov	r7, r1
    1ee2:	ee68 7aac 	vmul.f32	s15, s17, s25
{
    1ee6:	2500      	movs	r5, #0
        irDataCP[1] = irDataCP[1] - params->cpOffset[1] * (1 + params->cpKta * (ta - 25)) * (1 + params->cpKv * (vdd - 3.3));
    1ee8:	ee17 0a90 	vmov	r0, s15
    1eec:	f7fe fa6c 	bl	3c8 <__aeabi_f2d>
    1ef0:	4652      	mov	r2, sl
    1ef2:	465b      	mov	r3, fp
    1ef4:	f7fe fac0 	bl	478 <__aeabi_dmul>
    1ef8:	460b      	mov	r3, r1
    1efa:	4602      	mov	r2, r0
    1efc:	4639      	mov	r1, r7
    1efe:	4630      	mov	r0, r6
    1f00:	f7fe f902 	bl	108 <__aeabi_dsub>
    1f04:	f7fe fd9a 	bl	a3c <__aeabi_d2f>
    1f08:	f104 034a 	add.w	r3, r4, #74	; 0x4a
    1f0c:	9302      	str	r3, [sp, #8]
    1f0e:	f604 434c 	addw	r3, r4, #3148	; 0xc4c
    1f12:	900f      	str	r0, [sp, #60]	; 0x3c
    for( int pixelNumber = 0; pixelNumber < 768; pixelNumber++)
    1f14:	f8cd 800c 	str.w	r8, [sp, #12]
    1f18:	9301      	str	r3, [sp, #4]
        if(mode == 0)
    1f1a:	9b06      	ldr	r3, [sp, #24]
        if(pattern == frameData[833])
    1f1c:	f8b9 2682 	ldrh.w	r2, [r9, #1666]	; 0x682
        if(mode == 0)
    1f20:	061b      	lsls	r3, r3, #24
    1f22:	46aa      	mov	sl, r5
        ilPattern = pixelNumber / 32 - (pixelNumber / 64) * 2; 
    1f24:	f3c5 1840 	ubfx	r8, r5, #5, #1
        chessPattern = ilPattern ^ (pixelNumber - (pixelNumber/2)*2); 
    1f28:	bf46      	itte	mi
    1f2a:	f00a 0301 	andmi.w	r3, sl, #1
    1f2e:	ea88 0303 	eormi.w	r3, r8, r3
          pattern = ilPattern; 
    1f32:	4643      	movpl	r3, r8
        if(pattern == frameData[833])
    1f34:	4293      	cmp	r3, r2
    1f36:	f105 0501 	add.w	r5, r5, #1
    1f3a:	f040 8190 	bne.w	225e <CONFIG_MAIN_STACK_SIZE+0x25e>
            irData = (int16_t)frameData[pixelNumber] * gain;
    1f3e:	f939 301a 	ldrsh.w	r3, [r9, sl, lsl #1]
    1f42:	ee07 3a90 	vmov	s15, r3
    1f46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
            irData = irData - params->offset[pixelNumber]*(1 + kta*(ta - 25))*(1 + kv*(vdd - 3.3));
    1f4a:	ee67 7aab 	vmul.f32	s15, s15, s23
    1f4e:	ee17 0a90 	vmov	r0, s15
    1f52:	f7fe fa39 	bl	3c8 <__aeabi_f2d>
            kta = params->kta[pixelNumber]/ktaScale;
    1f56:	9b01      	ldr	r3, [sp, #4]
    1f58:	f993 3000 	ldrsb.w	r3, [r3]
    1f5c:	ee07 3a90 	vmov	s15, r3
    1f60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
            irData = irData - params->offset[pixelNumber]*(1 + kta*(ta - 25))*(1 + kv*(vdd - 3.3));
    1f64:	9b02      	ldr	r3, [sp, #8]
            kta = params->kta[pixelNumber]/ktaScale;
    1f66:	eec7 6aaa 	vdiv.f32	s13, s15, s21
            irData = irData - params->offset[pixelNumber]*(1 + kta*(ta - 25))*(1 + kv*(vdd - 3.3));
    1f6a:	f9b3 3602 	ldrsh.w	r3, [r3, #1538]	; 0x602
    1f6e:	e9cd 0108 	strd	r0, r1, [sp, #32]
    1f72:	eeb0 7a49 	vmov.f32	s14, s18
    1f76:	ee06 7aa9 	vmla.f32	s14, s13, s19
    1f7a:	ee07 3a90 	vmov	s15, r3
    1f7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    1f82:	ee67 7a27 	vmul.f32	s15, s14, s15
    1f86:	ee17 0a90 	vmov	r0, s15
    1f8a:	f7fe fa1d 	bl	3c8 <__aeabi_f2d>
            kv = params->kv[pixelNumber]/kvScale;
    1f8e:	9b01      	ldr	r3, [sp, #4]
    1f90:	f993 3301 	ldrsb.w	r3, [r3, #769]	; 0x301
    1f94:	ee07 3a90 	vmov	s15, r3
    1f98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
            irData = irData - params->offset[pixelNumber]*(1 + kta*(ta - 25))*(1 + kv*(vdd - 3.3));
    1f9c:	4606      	mov	r6, r0
    1f9e:	eec7 7a8b 	vdiv.f32	s15, s15, s22
    1fa2:	460f      	mov	r7, r1
    1fa4:	ee17 0a90 	vmov	r0, s15
    1fa8:	f7fe fa0e 	bl	3c8 <__aeabi_f2d>
    1fac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    1fb0:	f7fe fa62 	bl	478 <__aeabi_dmul>
    1fb4:	4b53      	ldr	r3, [pc, #332]	; (2104 <CONFIG_MAIN_STACK_SIZE+0x104>)
    1fb6:	2200      	movs	r2, #0
    1fb8:	f7fe f8a8 	bl	10c <__adddf3>
    1fbc:	4602      	mov	r2, r0
    1fbe:	460b      	mov	r3, r1
    1fc0:	4630      	mov	r0, r6
    1fc2:	4639      	mov	r1, r7
    1fc4:	f7fe fa58 	bl	478 <__aeabi_dmul>
    1fc8:	4602      	mov	r2, r0
    1fca:	460b      	mov	r3, r1
    1fcc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    1fd0:	f7fe f89a 	bl	108 <__aeabi_dsub>
    1fd4:	f7fe fd32 	bl	a3c <__aeabi_d2f>
            if(mode !=  params->calibrationModeEE)
    1fd8:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
    1fdc:	9a07      	ldr	r2, [sp, #28]
            irData = irData - params->offset[pixelNumber]*(1 + kta*(ta - 25))*(1 + kv*(vdd - 3.3));
    1fde:	ee07 0a90 	vmov	s15, r0
            if(mode !=  params->calibrationModeEE)
    1fe2:	4293      	cmp	r3, r2
            irData = irData - params->offset[pixelNumber]*(1 + kta*(ta - 25))*(1 + kv*(vdd - 3.3));
    1fe4:	eeb0 7a67 	vmov.f32	s14, s15
            if(mode !=  params->calibrationModeEE)
    1fe8:	d031      	beq.n	204e <CONFIG_MAIN_STACK_SIZE+0x4e>
        conversionPattern = ((pixelNumber + 2) / 4 - (pixelNumber + 3) / 4 + (pixelNumber + 1) / 4 - pixelNumber / 4) * (1 - 2 * ilPattern);
    1fea:	ea4f 0848 	mov.w	r8, r8, lsl #1
              irData = irData + params->ilChessC[2] * (2 * ilPattern - 1) - params->ilChessC[1] * conversionPattern; 
    1fee:	f108 33ff 	add.w	r3, r8, #4294967295
    1ff2:	ee06 3a90 	vmov	s13, r3
    1ff6:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
        conversionPattern = ((pixelNumber + 2) / 4 - (pixelNumber + 3) / 4 + (pixelNumber + 1) / 4 - pixelNumber / 4) * (1 - 2 * ilPattern);
    1ffa:	f11a 0203 	adds.w	r2, sl, #3
              irData = irData + params->ilChessC[2] * (2 * ilPattern - 1) - params->ilChessC[1] * conversionPattern; 
    1ffe:	ed93 6a99 	vldr	s12, [r3, #612]	; 0x264
        conversionPattern = ((pixelNumber + 2) / 4 - (pixelNumber + 3) / 4 + (pixelNumber + 1) / 4 - pixelNumber / 4) * (1 - 2 * ilPattern);
    2002:	f10a 0302 	add.w	r3, sl, #2
              irData = irData + params->ilChessC[2] * (2 * ilPattern - 1) - params->ilChessC[1] * conversionPattern; 
    2006:	eef8 6ae6 	vcvt.f32.s32	s13, s13
        conversionPattern = ((pixelNumber + 2) / 4 - (pixelNumber + 3) / 4 + (pixelNumber + 1) / 4 - pixelNumber / 4) * (1 - 2 * ilPattern);
    200a:	bf48      	it	mi
    200c:	f10a 0206 	addmi.w	r2, sl, #6
    2010:	109b      	asrs	r3, r3, #2
    2012:	f1ba 0f00 	cmp.w	sl, #0
    2016:	eba3 03a2 	sub.w	r3, r3, r2, asr #2
              irData = irData + params->ilChessC[2] * (2 * ilPattern - 1) - params->ilChessC[1] * conversionPattern; 
    201a:	ee46 7a86 	vmla.f32	s15, s13, s12
        conversionPattern = ((pixelNumber + 2) / 4 - (pixelNumber + 3) / 4 + (pixelNumber + 1) / 4 - pixelNumber / 4) * (1 - 2 * ilPattern);
    201e:	eb03 03a5 	add.w	r3, r3, r5, asr #2
    2022:	bfb8      	it	lt
    2024:	f10a 0a03 	addlt.w	sl, sl, #3
    2028:	eba3 03aa 	sub.w	r3, r3, sl, asr #2
    202c:	f1c8 0801 	rsb	r8, r8, #1
    2030:	fb13 f308 	smulbb	r3, r3, r8
              irData = irData + params->ilChessC[2] * (2 * ilPattern - 1) - params->ilChessC[1] * conversionPattern; 
    2034:	b25b      	sxtb	r3, r3
    2036:	eeb0 7a67 	vmov.f32	s14, s15
    203a:	ee07 3a90 	vmov	s15, r3
    203e:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
    2042:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    2046:	edd3 6a98 	vldr	s13, [r3, #608]	; 0x260
    204a:	ee07 7ae6 	vmls.f32	s14, s15, s13
            irData = irData - params->tgc * irDataCP[subPage];
    204e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
            alphaCompensated = SCALEALPHA*alphaScale/params->alpha[pixelNumber];
    2050:	980b      	ldr	r0, [sp, #44]	; 0x2c
            irData = irData - params->tgc * irDataCP[subPage];
    2052:	edd4 6a06 	vldr	s13, [r4, #24]
    2056:	aa14      	add	r2, sp, #80	; 0x50
    2058:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    205c:	ed53 7a06 	vldr	s15, [r3, #-24]	; 0xffffffe8
    2060:	ee06 7ae7 	vmls.f32	s14, s13, s15
            alphaCompensated = alphaCompensated*(1 + params->KsTa * (ta - 25));
    2064:	eef0 8a49 	vmov.f32	s17, s18
            irData = irData / emissivity;
    2068:	ee87 ca0a 	vdiv.f32	s24, s14, s20
            alphaCompensated = SCALEALPHA*alphaScale/params->alpha[pixelNumber];
    206c:	f7fe f9ac 	bl	3c8 <__aeabi_f2d>
    2070:	a321      	add	r3, pc, #132	; (adr r3, 20f8 <CONFIG_MAIN_STACK_SIZE+0xf8>)
    2072:	e9d3 2300 	ldrd	r2, r3, [r3]
    2076:	f7fe f9ff 	bl	478 <__aeabi_dmul>
    207a:	9b02      	ldr	r3, [sp, #8]
    207c:	4606      	mov	r6, r0
    207e:	8818      	ldrh	r0, [r3, #0]
    2080:	460f      	mov	r7, r1
    2082:	f7fe f98f 	bl	3a4 <__aeabi_i2d>
    2086:	4602      	mov	r2, r0
    2088:	460b      	mov	r3, r1
    208a:	4630      	mov	r0, r6
    208c:	4639      	mov	r1, r7
    208e:	f7fe fb1d 	bl	6cc <__aeabi_ddiv>
    2092:	f7fe fcd3 	bl	a3c <__aeabi_d2f>
            alphaCompensated = alphaCompensated*(1 + params->KsTa * (ta - 25));
    2096:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
    209a:	ee49 8a87 	vmla.f32	s17, s19, s14
            alphaCompensated = SCALEALPHA*alphaScale/params->alpha[pixelNumber];
    209e:	ee07 0a90 	vmov	s15, r0
            alphaCompensated = alphaCompensated*(1 + params->KsTa * (ta - 25));
    20a2:	ee68 8aa7 	vmul.f32	s17, s17, s15
            Sx = alphaCompensated * alphaCompensated * alphaCompensated * (irData + alphaCompensated * taTr);
    20a6:	eeb0 7a4c 	vmov.f32	s14, s24
    20aa:	ee08 7a28 	vmla.f32	s14, s16, s17
    20ae:	ee68 7aa8 	vmul.f32	s15, s17, s17
    20b2:	ee67 7aa8 	vmul.f32	s15, s15, s17
            Sx = sqrt(sqrt(Sx)) * params->ksTo[1];            
    20b6:	ee67 7a87 	vmul.f32	s15, s15, s14
    20ba:	ee17 0a90 	vmov	r0, s15
    20be:	f7fe f983 	bl	3c8 <__aeabi_f2d>
    20c2:	ec41 0b10 	vmov	d0, r0, r1
    20c6:	f006 fc81 	bl	89cc <sqrt>
    20ca:	f006 fc7f 	bl	89cc <sqrt>
    20ce:	6b20      	ldr	r0, [r4, #48]	; 0x30
    20d0:	ed8d 0b08 	vstr	d0, [sp, #32]
    20d4:	f7fe f978 	bl	3c8 <__aeabi_f2d>
    20d8:	4682      	mov	sl, r0
            To = sqrt(sqrt(irData/(alphaCompensated * (1 - params->ksTo[1] * 273.15) + Sx) + taTr)) - 273.15;                     
    20da:	ee1c 0a10 	vmov	r0, s24
            Sx = sqrt(sqrt(Sx)) * params->ksTo[1];            
    20de:	468b      	mov	fp, r1
            To = sqrt(sqrt(irData/(alphaCompensated * (1 - params->ksTo[1] * 273.15) + Sx) + taTr)) - 273.15;                     
    20e0:	f7fe f972 	bl	3c8 <__aeabi_f2d>
    20e4:	e014      	b.n	2110 <CONFIG_MAIN_STACK_SIZE+0x110>
    20e6:	bf00      	nop
    20e8:	00000000 	.word	0x00000000
    20ec:	40000000 	.word	0x40000000
    20f0:	66666666 	.word	0x66666666
    20f4:	400a6666 	.word	0x400a6666
    20f8:	a0b5ed8d 	.word	0xa0b5ed8d
    20fc:	3eb0c6f7 	.word	0x3eb0c6f7
    2100:	42200000 	.word	0x42200000
    2104:	3ff00000 	.word	0x3ff00000
    2108:	66666666 	.word	0x66666666
    210c:	40711266 	.word	0x40711266
    2110:	a365      	add	r3, pc, #404	; (adr r3, 22a8 <CONFIG_MAIN_STACK_SIZE+0x2a8>)
    2112:	e9d3 2300 	ldrd	r2, r3, [r3]
    2116:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
    211a:	4650      	mov	r0, sl
    211c:	4659      	mov	r1, fp
    211e:	f7fe f9ab 	bl	478 <__aeabi_dmul>
    2122:	4602      	mov	r2, r0
    2124:	460b      	mov	r3, r1
    2126:	2000      	movs	r0, #0
    2128:	4961      	ldr	r1, [pc, #388]	; (22b0 <CONFIG_MAIN_STACK_SIZE+0x2b0>)
    212a:	f7fd ffed 	bl	108 <__aeabi_dsub>
    212e:	4606      	mov	r6, r0
    2130:	ee18 0a90 	vmov	r0, s17
    2134:	460f      	mov	r7, r1
    2136:	f7fe f947 	bl	3c8 <__aeabi_f2d>
    213a:	4602      	mov	r2, r0
    213c:	460b      	mov	r3, r1
    213e:	4630      	mov	r0, r6
    2140:	4639      	mov	r1, r7
    2142:	f7fe f999 	bl	478 <__aeabi_dmul>
            Sx = sqrt(sqrt(Sx)) * params->ksTo[1];            
    2146:	4652      	mov	r2, sl
    2148:	465b      	mov	r3, fp
            To = sqrt(sqrt(irData/(alphaCompensated * (1 - params->ksTo[1] * 273.15) + Sx) + taTr)) - 273.15;                     
    214a:	4606      	mov	r6, r0
    214c:	460f      	mov	r7, r1
            Sx = sqrt(sqrt(Sx)) * params->ksTo[1];            
    214e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    2152:	f7fe f991 	bl	478 <__aeabi_dmul>
    2156:	f7fe fc71 	bl	a3c <__aeabi_d2f>
            To = sqrt(sqrt(irData/(alphaCompensated * (1 - params->ksTo[1] * 273.15) + Sx) + taTr)) - 273.15;                     
    215a:	f7fe f935 	bl	3c8 <__aeabi_f2d>
    215e:	4602      	mov	r2, r0
    2160:	460b      	mov	r3, r1
    2162:	4630      	mov	r0, r6
    2164:	4639      	mov	r1, r7
    2166:	f7fd ffd1 	bl	10c <__adddf3>
    216a:	4602      	mov	r2, r0
    216c:	460b      	mov	r3, r1
    216e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    2172:	f7fe faab 	bl	6cc <__aeabi_ddiv>
    2176:	4606      	mov	r6, r0
    2178:	ee18 0a10 	vmov	r0, s16
    217c:	460f      	mov	r7, r1
    217e:	f7fe f923 	bl	3c8 <__aeabi_f2d>
    2182:	4602      	mov	r2, r0
    2184:	460b      	mov	r3, r1
    2186:	4630      	mov	r0, r6
    2188:	4639      	mov	r1, r7
    218a:	f7fd ffbf 	bl	10c <__adddf3>
    218e:	ec41 0b10 	vmov	d0, r0, r1
    2192:	f006 fc1b 	bl	89cc <sqrt>
    2196:	f006 fc19 	bl	89cc <sqrt>
    219a:	a343      	add	r3, pc, #268	; (adr r3, 22a8 <CONFIG_MAIN_STACK_SIZE+0x2a8>)
    219c:	e9d3 2300 	ldrd	r2, r3, [r3]
    21a0:	ec51 0b10 	vmov	r0, r1, d0
    21a4:	f7fd ffb0 	bl	108 <__aeabi_dsub>
    21a8:	f7fe fc48 	bl	a3c <__aeabi_d2f>
            if(To < params->ct[1])
    21ac:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
    21b0:	ee07 3a10 	vmov	s14, r3
            To = sqrt(sqrt(irData/(alphaCompensated * (1 - params->ksTo[1] * 273.15) + Sx) + taTr)) - 273.15;                     
    21b4:	ee07 0a90 	vmov	s15, r0
            if(To < params->ct[1])
    21b8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    21bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
    21c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    21c4:	dc69      	bgt.n	229a <CONFIG_MAIN_STACK_SIZE+0x29a>
            else if(To < params->ct[2])   
    21c6:	f9b4 3044 	ldrsh.w	r3, [r4, #68]	; 0x44
    21ca:	ee07 3a10 	vmov	s14, r3
    21ce:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    21d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
    21d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    21da:	dc60      	bgt.n	229e <CONFIG_MAIN_STACK_SIZE+0x29e>
            else if(To < params->ct[3])
    21dc:	f9b4 3046 	ldrsh.w	r3, [r4, #70]	; 0x46
    21e0:	ee07 3a10 	vmov	s14, r3
    21e4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
                range = 3;            
    21e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
    21ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    21f0:	bfcc      	ite	gt
    21f2:	2302      	movgt	r3, #2
    21f4:	2303      	movle	r3, #3
            To = sqrt(sqrt(irData / (alphaCompensated * alphaCorrR[range] * (1 + params->ksTo[range] * (To - params->ct[range]))) + taTr)) - 273.15;
    21f6:	f103 0220 	add.w	r2, r3, #32
    21fa:	f934 2012 	ldrsh.w	r2, [r4, r2, lsl #1]
    21fe:	ee07 2a10 	vmov	s14, r2
    2202:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    2206:	eb04 0283 	add.w	r2, r4, r3, lsl #2
    220a:	edd2 6a0b 	vldr	s13, [r2, #44]	; 0x2c
    220e:	ee77 7ac7 	vsub.f32	s15, s15, s14
    2212:	aa14      	add	r2, sp, #80	; 0x50
    2214:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2218:	eeb0 7a49 	vmov.f32	s14, s18
    221c:	ee07 7aa6 	vmla.f32	s14, s15, s13
    2220:	ed53 7a04 	vldr	s15, [r3, #-16]
    2224:	ee68 8aa7 	vmul.f32	s17, s17, s15
    2228:	ee67 7a28 	vmul.f32	s15, s14, s17
    222c:	ee8c 7a27 	vdiv.f32	s14, s24, s15
    2230:	ee77 7a08 	vadd.f32	s15, s14, s16
    2234:	ee17 0a90 	vmov	r0, s15
    2238:	f7fe f8c6 	bl	3c8 <__aeabi_f2d>
    223c:	ec41 0b10 	vmov	d0, r0, r1
    2240:	f006 fbc4 	bl	89cc <sqrt>
    2244:	f006 fbc2 	bl	89cc <sqrt>
    2248:	a317      	add	r3, pc, #92	; (adr r3, 22a8 <CONFIG_MAIN_STACK_SIZE+0x2a8>)
    224a:	e9d3 2300 	ldrd	r2, r3, [r3]
    224e:	ec51 0b10 	vmov	r0, r1, d0
    2252:	f7fd ff59 	bl	108 <__aeabi_dsub>
    2256:	f7fe fbf1 	bl	a3c <__aeabi_d2f>
    225a:	9b03      	ldr	r3, [sp, #12]
    225c:	6018      	str	r0, [r3, #0]
    for( int pixelNumber = 0; pixelNumber < 768; pixelNumber++)
    225e:	9b03      	ldr	r3, [sp, #12]
    2260:	3304      	adds	r3, #4
    2262:	9303      	str	r3, [sp, #12]
    2264:	9b02      	ldr	r3, [sp, #8]
    2266:	3302      	adds	r3, #2
    2268:	9302      	str	r3, [sp, #8]
    226a:	9b01      	ldr	r3, [sp, #4]
    226c:	f5b5 7f40 	cmp.w	r5, #768	; 0x300
    2270:	f103 0301 	add.w	r3, r3, #1
    2274:	9301      	str	r3, [sp, #4]
    2276:	f47f ae50 	bne.w	1f1a <MLX90640_CalculateTo+0x26a>
}
    227a:	b015      	add	sp, #84	; 0x54
    227c:	ecbd 8b0a 	vpop	{d8-d12}
    2280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      irDataCP[1] = irDataCP[1] - (params->cpOffset[1] + params->ilChessC[0]) * (1 + params->cpKta * (ta - 25)) * (1 + params->cpKv * (vdd - 3.3));
    2284:	f7fe f8a0 	bl	3c8 <__aeabi_f2d>
    2288:	eef8 8ae8 	vcvt.f32.s32	s17, s17
    228c:	edd5 7a97 	vldr	s15, [r5, #604]	; 0x25c
    2290:	4606      	mov	r6, r0
    2292:	ee78 8aa7 	vadd.f32	s17, s17, s15
    2296:	460f      	mov	r7, r1
    2298:	e623      	b.n	1ee2 <MLX90640_CalculateTo+0x232>
                range = 0;
    229a:	2300      	movs	r3, #0
    229c:	e7ab      	b.n	21f6 <CONFIG_MAIN_STACK_SIZE+0x1f6>
                range = 1;            
    229e:	2301      	movs	r3, #1
    22a0:	e7a9      	b.n	21f6 <CONFIG_MAIN_STACK_SIZE+0x1f6>
    22a2:	bf00      	nop
    22a4:	f3af 8000 	nop.w
    22a8:	66666666 	.word	0x66666666
    22ac:	40711266 	.word	0x40711266
    22b0:	3ff00000 	.word	0x3ff00000
    22b4:	00000000 	.word	0x00000000

000022b8 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
    22b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    22bc:	b09f      	sub	sp, #124	; 0x7c
    22be:	4682      	mov	sl, r0
    22c0:	9103      	str	r1, [sp, #12]
    22c2:	4616      	mov	r6, r2
    22c4:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    22c6:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    22c8:	7830      	ldrb	r0, [r6, #0]
    22ca:	b910      	cbnz	r0, 22d2 <z_cbvprintf_impl+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
    22cc:	4628      	mov	r0, r5
    22ce:	f000 bd85 	b.w	2ddc <z_cbvprintf_impl+0xb24>
			OUTC(*fp++);
    22d2:	1c73      	adds	r3, r6, #1
		if (*fp != '%') {
    22d4:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
    22d6:	9306      	str	r3, [sp, #24]
		if (*fp != '%') {
    22d8:	d006      	beq.n	22e8 <z_cbvprintf_impl+0x30>
			OUTC(*fp++);
    22da:	9903      	ldr	r1, [sp, #12]
			OUTC('%');
    22dc:	47d0      	blx	sl
    22de:	2800      	cmp	r0, #0
    22e0:	f2c0 857c 	blt.w	2ddc <z_cbvprintf_impl+0xb24>
    22e4:	3501      	adds	r5, #1
		if (bps == NULL) {
    22e6:	e21b      	b.n	2720 <z_cbvprintf_impl+0x468>
		} state = {
    22e8:	2218      	movs	r2, #24
    22ea:	2100      	movs	r1, #0
    22ec:	a810      	add	r0, sp, #64	; 0x40
    22ee:	f007 fc8c 	bl	9c0a <memset>
	if (*sp == '%') {
    22f2:	7873      	ldrb	r3, [r6, #1]
    22f4:	2b25      	cmp	r3, #37	; 0x25
    22f6:	f000 80ba 	beq.w	246e <z_cbvprintf_impl+0x1b6>
    22fa:	2300      	movs	r3, #0
    22fc:	1c71      	adds	r1, r6, #1
    22fe:	4698      	mov	r8, r3
    2300:	469e      	mov	lr, r3
    2302:	469c      	mov	ip, r3
    2304:	4618      	mov	r0, r3
    2306:	460f      	mov	r7, r1
		switch (*sp) {
    2308:	f811 2b01 	ldrb.w	r2, [r1], #1
    230c:	2a2b      	cmp	r2, #43	; 0x2b
    230e:	f000 80dd 	beq.w	24cc <z_cbvprintf_impl+0x214>
    2312:	f200 80d4 	bhi.w	24be <z_cbvprintf_impl+0x206>
    2316:	2a20      	cmp	r2, #32
    2318:	f000 80db 	beq.w	24d2 <z_cbvprintf_impl+0x21a>
    231c:	2a23      	cmp	r2, #35	; 0x23
    231e:	f000 80db 	beq.w	24d8 <z_cbvprintf_impl+0x220>
    2322:	b12b      	cbz	r3, 2330 <z_cbvprintf_impl+0x78>
    2324:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    2328:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    232c:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    2330:	f1b8 0f00 	cmp.w	r8, #0
    2334:	d005      	beq.n	2342 <z_cbvprintf_impl+0x8a>
    2336:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    233a:	f043 0320 	orr.w	r3, r3, #32
    233e:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    2342:	f1be 0f00 	cmp.w	lr, #0
    2346:	d005      	beq.n	2354 <z_cbvprintf_impl+0x9c>
    2348:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    234c:	f043 0310 	orr.w	r3, r3, #16
    2350:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    2354:	f1bc 0f00 	cmp.w	ip, #0
    2358:	d005      	beq.n	2366 <z_cbvprintf_impl+0xae>
    235a:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    235e:	f043 0308 	orr.w	r3, r3, #8
    2362:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    2366:	b128      	cbz	r0, 2374 <z_cbvprintf_impl+0xbc>
    2368:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    236c:	f043 0304 	orr.w	r3, r3, #4
    2370:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (conv->flag_zero && conv->flag_dash) {
    2374:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    2378:	f003 0144 	and.w	r1, r3, #68	; 0x44
    237c:	2944      	cmp	r1, #68	; 0x44
    237e:	d103      	bne.n	2388 <z_cbvprintf_impl+0xd0>
		conv->flag_zero = false;
    2380:	f36f 1386 	bfc	r3, #6, #1
    2384:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	conv->width_present = true;
    2388:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    238c:	970e      	str	r7, [sp, #56]	; 0x38
    238e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
	if (*sp == '*') {
    2392:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
    2394:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (*sp == '*') {
    2398:	f040 80a3 	bne.w	24e2 <z_cbvprintf_impl+0x22a>
		conv->width_star = true;
    239c:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    23a0:	f043 0301 	orr.w	r3, r3, #1
    23a4:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
		return ++sp;
    23a8:	1c7b      	adds	r3, r7, #1
	conv->prec_present = (*sp == '.');
    23aa:	781a      	ldrb	r2, [r3, #0]
    23ac:	2a2e      	cmp	r2, #46	; 0x2e
    23ae:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    23b2:	bf0c      	ite	eq
    23b4:	2101      	moveq	r1, #1
    23b6:	2100      	movne	r1, #0
    23b8:	f361 0241 	bfi	r2, r1, #1, #1
    23bc:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
	if (!conv->prec_present) {
    23c0:	d10c      	bne.n	23dc <z_cbvprintf_impl+0x124>
	++sp;
    23c2:	1c5a      	adds	r2, r3, #1
    23c4:	920e      	str	r2, [sp, #56]	; 0x38
	if (*sp == '*') {
    23c6:	785a      	ldrb	r2, [r3, #1]
    23c8:	2a2a      	cmp	r2, #42	; 0x2a
    23ca:	f040 809a 	bne.w	2502 <z_cbvprintf_impl+0x24a>
		conv->prec_star = true;
    23ce:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    23d2:	f042 0204 	orr.w	r2, r2, #4
    23d6:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
		return ++sp;
    23da:	3302      	adds	r3, #2
	switch (*sp) {
    23dc:	781a      	ldrb	r2, [r3, #0]
    23de:	2a6c      	cmp	r2, #108	; 0x6c
    23e0:	f000 80bb 	beq.w	255a <z_cbvprintf_impl+0x2a2>
    23e4:	f200 809d 	bhi.w	2522 <z_cbvprintf_impl+0x26a>
    23e8:	2a68      	cmp	r2, #104	; 0x68
    23ea:	f000 80a3 	beq.w	2534 <z_cbvprintf_impl+0x27c>
    23ee:	2a6a      	cmp	r2, #106	; 0x6a
    23f0:	f000 80bc 	beq.w	256c <z_cbvprintf_impl+0x2b4>
    23f4:	2a4c      	cmp	r2, #76	; 0x4c
    23f6:	f000 80c1 	beq.w	257c <z_cbvprintf_impl+0x2c4>
	conv->specifier = *sp++;
    23fa:	f813 2b01 	ldrb.w	r2, [r3], #1
    23fe:	9306      	str	r3, [sp, #24]
	switch (conv->specifier) {
    2400:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
    2402:	f88d 204b 	strb.w	r2, [sp, #75]	; 0x4b
	switch (conv->specifier) {
    2406:	f200 8101 	bhi.w	260c <z_cbvprintf_impl+0x354>
    240a:	2a6d      	cmp	r2, #109	; 0x6d
    240c:	f200 80c3 	bhi.w	2596 <z_cbvprintf_impl+0x2de>
    2410:	2a69      	cmp	r2, #105	; 0x69
    2412:	f200 80fb 	bhi.w	260c <z_cbvprintf_impl+0x354>
    2416:	2a57      	cmp	r2, #87	; 0x57
    2418:	f200 80da 	bhi.w	25d0 <z_cbvprintf_impl+0x318>
    241c:	2a41      	cmp	r2, #65	; 0x41
    241e:	d004      	beq.n	242a <z_cbvprintf_impl+0x172>
    2420:	f1a2 0345 	sub.w	r3, r2, #69	; 0x45
    2424:	2b02      	cmp	r3, #2
    2426:	f200 80f1 	bhi.w	260c <z_cbvprintf_impl+0x354>
		conv->specifier_cat = SPECIFIER_FP;
    242a:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
			|| (conv->specifier == 'A');
    242e:	f002 02df 	and.w	r2, r2, #223	; 0xdf
		conv->specifier_cat = SPECIFIER_FP;
    2432:	2104      	movs	r1, #4
			|| (conv->specifier == 'A');
    2434:	f1a2 0741 	sub.w	r7, r2, #65	; 0x41
		conv->specifier_cat = SPECIFIER_FP;
    2438:	f361 0302 	bfi	r3, r1, #0, #3
			|| (conv->specifier == 'A');
    243c:	427a      	negs	r2, r7
		conv->specifier_a = (conv->specifier == 'a')
    243e:	f89d 1049 	ldrb.w	r1, [sp, #73]	; 0x49
		conv->specifier_cat = SPECIFIER_FP;
    2442:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
			|| (conv->specifier == 'A');
    2446:	417a      	adcs	r2, r7
		conv->specifier_a = (conv->specifier == 'a')
    2448:	f362 11c7 	bfi	r1, r2, #7, #1
		if (conv->specifier_a
    244c:	060a      	lsls	r2, r1, #24
		conv->specifier_a = (conv->specifier == 'a')
    244e:	f88d 1049 	strb.w	r1, [sp, #73]	; 0x49
		if (conv->specifier_a
    2452:	b2cb      	uxtb	r3, r1
    2454:	f100 8119 	bmi.w	268a <z_cbvprintf_impl+0x3d2>
		if (conv->length_mod == LENGTH_L) {
    2458:	f003 0278 	and.w	r2, r3, #120	; 0x78
    245c:	2a18      	cmp	r2, #24
    245e:	f040 8103 	bne.w	2668 <z_cbvprintf_impl+0x3b0>
			conv->length_mod = LENGTH_NONE;
    2462:	f36f 03c6 	bfc	r3, #3, #4
    2466:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
	bool unsupported = false;
    246a:	2300      	movs	r3, #0
    246c:	e0f2      	b.n	2654 <z_cbvprintf_impl+0x39c>
		conv->specifier = *sp++;
    246e:	1cb2      	adds	r2, r6, #2
    2470:	9206      	str	r2, [sp, #24]
    2472:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
		if (conv->width_star) {
    2476:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    247a:	07d9      	lsls	r1, r3, #31
    247c:	f140 8107 	bpl.w	268e <z_cbvprintf_impl+0x3d6>
			width = va_arg(ap, int);
    2480:	f854 2b04 	ldr.w	r2, [r4], #4
    2484:	9204      	str	r2, [sp, #16]
			if (width < 0) {
    2486:	2a00      	cmp	r2, #0
    2488:	da08      	bge.n	249c <z_cbvprintf_impl+0x1e4>
				conv->flag_dash = true;
    248a:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
    248e:	f042 0204 	orr.w	r2, r2, #4
    2492:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
				width = -width;
    2496:	9a04      	ldr	r2, [sp, #16]
    2498:	4252      	negs	r2, r2
		int width = -1;
    249a:	9204      	str	r2, [sp, #16]
		if (conv->prec_star) {
    249c:	075a      	lsls	r2, r3, #29
    249e:	f140 80fe 	bpl.w	269e <z_cbvprintf_impl+0x3e6>
			int arg = va_arg(ap, int);
    24a2:	f854 7b04 	ldr.w	r7, [r4], #4
			if (arg < 0) {
    24a6:	2f00      	cmp	r7, #0
    24a8:	f280 80fd 	bge.w	26a6 <z_cbvprintf_impl+0x3ee>
				conv->prec_present = false;
    24ac:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    24b0:	f36f 0341 	bfc	r3, #1, #1
    24b4:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
		int precision = -1;
    24b8:	f04f 37ff 	mov.w	r7, #4294967295
    24bc:	e0f3      	b.n	26a6 <z_cbvprintf_impl+0x3ee>
		switch (*sp) {
    24be:	2a2d      	cmp	r2, #45	; 0x2d
    24c0:	d00d      	beq.n	24de <z_cbvprintf_impl+0x226>
    24c2:	2a30      	cmp	r2, #48	; 0x30
    24c4:	f47f af2d 	bne.w	2322 <z_cbvprintf_impl+0x6a>
    24c8:	2301      	movs	r3, #1
	} while (loop);
    24ca:	e71c      	b.n	2306 <z_cbvprintf_impl+0x4e>
		switch (*sp) {
    24cc:	f04f 0c01 	mov.w	ip, #1
    24d0:	e719      	b.n	2306 <z_cbvprintf_impl+0x4e>
    24d2:	f04f 0e01 	mov.w	lr, #1
    24d6:	e716      	b.n	2306 <z_cbvprintf_impl+0x4e>
    24d8:	f04f 0801 	mov.w	r8, #1
    24dc:	e713      	b.n	2306 <z_cbvprintf_impl+0x4e>
    24de:	2001      	movs	r0, #1
    24e0:	e711      	b.n	2306 <z_cbvprintf_impl+0x4e>
	size_t width = extract_decimal(&sp);
    24e2:	a80e      	add	r0, sp, #56	; 0x38
    24e4:	f001 ff78 	bl	43d8 <extract_decimal>
	if (sp != wp) {
    24e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    24ea:	42bb      	cmp	r3, r7
    24ec:	f43f af5d 	beq.w	23aa <z_cbvprintf_impl+0xf2>
		conv->unsupported |= ((conv->width_value < 0)
    24f0:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
		conv->width_value = width;
    24f4:	9013      	str	r0, [sp, #76]	; 0x4c
				      || (width != (size_t)conv->width_value));
    24f6:	0fc0      	lsrs	r0, r0, #31
		conv->unsupported |= ((conv->width_value < 0)
    24f8:	f360 0241 	bfi	r2, r0, #1, #1
    24fc:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
    2500:	e753      	b.n	23aa <z_cbvprintf_impl+0xf2>
	size_t prec = extract_decimal(&sp);
    2502:	a80e      	add	r0, sp, #56	; 0x38
    2504:	f001 ff68 	bl	43d8 <extract_decimal>
	conv->unsupported |= ((conv->prec_value < 0)
    2508:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
	conv->prec_value = prec;
    250c:	9014      	str	r0, [sp, #80]	; 0x50
	conv->unsupported |= ((conv->prec_value < 0)
    250e:	f3c3 0240 	ubfx	r2, r3, #1, #1
    2512:	ea42 72d0 	orr.w	r2, r2, r0, lsr #31
    2516:	f362 0341 	bfi	r3, r2, #1, #1
    251a:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	return sp;
    251e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    2520:	e75c      	b.n	23dc <z_cbvprintf_impl+0x124>
	switch (*sp) {
    2522:	2a74      	cmp	r2, #116	; 0x74
    2524:	d026      	beq.n	2574 <z_cbvprintf_impl+0x2bc>
    2526:	2a7a      	cmp	r2, #122	; 0x7a
    2528:	f47f af67 	bne.w	23fa <z_cbvprintf_impl+0x142>
		conv->length_mod = LENGTH_Z;
    252c:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    2530:	2106      	movs	r1, #6
    2532:	e00c      	b.n	254e <z_cbvprintf_impl+0x296>
		if (*++sp == 'h') {
    2534:	785a      	ldrb	r2, [r3, #1]
    2536:	2a68      	cmp	r2, #104	; 0x68
    2538:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    253c:	d106      	bne.n	254c <z_cbvprintf_impl+0x294>
			conv->length_mod = LENGTH_HH;
    253e:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    2540:	f361 02c6 	bfi	r2, r1, #3, #4
    2544:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
			++sp;
    2548:	3302      	adds	r3, #2
    254a:	e756      	b.n	23fa <z_cbvprintf_impl+0x142>
			conv->length_mod = LENGTH_H;
    254c:	2102      	movs	r1, #2
    254e:	f361 02c6 	bfi	r2, r1, #3, #4
    2552:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
		if (*++sp == 'h') {
    2556:	3301      	adds	r3, #1
    2558:	e74f      	b.n	23fa <z_cbvprintf_impl+0x142>
		if (*++sp == 'l') {
    255a:	785a      	ldrb	r2, [r3, #1]
    255c:	2a6c      	cmp	r2, #108	; 0x6c
    255e:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    2562:	d101      	bne.n	2568 <z_cbvprintf_impl+0x2b0>
			conv->length_mod = LENGTH_LL;
    2564:	2104      	movs	r1, #4
    2566:	e7eb      	b.n	2540 <z_cbvprintf_impl+0x288>
			conv->length_mod = LENGTH_L;
    2568:	2103      	movs	r1, #3
    256a:	e7f0      	b.n	254e <z_cbvprintf_impl+0x296>
		conv->length_mod = LENGTH_J;
    256c:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    2570:	2105      	movs	r1, #5
    2572:	e7ec      	b.n	254e <z_cbvprintf_impl+0x296>
		conv->length_mod = LENGTH_T;
    2574:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    2578:	2107      	movs	r1, #7
    257a:	e7e8      	b.n	254e <z_cbvprintf_impl+0x296>
		conv->unsupported = true;
    257c:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
    2580:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
    2584:	f022 0202 	bic.w	r2, r2, #2
    2588:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
    258c:	f042 0202 	orr.w	r2, r2, #2
    2590:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
		break;
    2594:	e7df      	b.n	2556 <z_cbvprintf_impl+0x29e>
	switch (conv->specifier) {
    2596:	3a6e      	subs	r2, #110	; 0x6e
    2598:	b2d3      	uxtb	r3, r2
    259a:	2201      	movs	r2, #1
    259c:	409a      	lsls	r2, r3
    259e:	f240 4382 	movw	r3, #1154	; 0x482
    25a2:	421a      	tst	r2, r3
    25a4:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    25a8:	d137      	bne.n	261a <z_cbvprintf_impl+0x362>
    25aa:	f012 0f24 	tst.w	r2, #36	; 0x24
    25ae:	d15f      	bne.n	2670 <z_cbvprintf_impl+0x3b8>
    25b0:	07d1      	lsls	r1, r2, #31
    25b2:	d52b      	bpl.n	260c <z_cbvprintf_impl+0x354>
		conv->specifier_cat = SPECIFIER_PTR;
    25b4:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
    25b8:	f003 0378 	and.w	r3, r3, #120	; 0x78
    25bc:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
    25c0:	2103      	movs	r1, #3
    25c2:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    25c6:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
    25c8:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
    25cc:	4143      	adcs	r3, r0
    25ce:	e041      	b.n	2654 <z_cbvprintf_impl+0x39c>
	switch (conv->specifier) {
    25d0:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
    25d4:	b2c9      	uxtb	r1, r1
    25d6:	2001      	movs	r0, #1
    25d8:	fa00 f101 	lsl.w	r1, r0, r1
    25dc:	f411 4f62 	tst.w	r1, #57856	; 0xe200
    25e0:	f47f af23 	bne.w	242a <z_cbvprintf_impl+0x172>
    25e4:	f640 0301 	movw	r3, #2049	; 0x801
    25e8:	4219      	tst	r1, r3
    25ea:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
    25ee:	d11a      	bne.n	2626 <z_cbvprintf_impl+0x36e>
    25f0:	f411 3f04 	tst.w	r1, #135168	; 0x21000
    25f4:	d00a      	beq.n	260c <z_cbvprintf_impl+0x354>
		conv->specifier_cat = SPECIFIER_SINT;
    25f6:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
    25fa:	f360 0202 	bfi	r2, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    25fe:	f003 0378 	and.w	r3, r3, #120	; 0x78
    2602:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    2604:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
    2608:	f47f af2f 	bne.w	246a <z_cbvprintf_impl+0x1b2>
		conv->invalid = true;
    260c:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    2610:	f043 0301 	orr.w	r3, r3, #1
    2614:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
		break;
    2618:	e727      	b.n	246a <z_cbvprintf_impl+0x1b2>
		conv->specifier_cat = SPECIFIER_UINT;
    261a:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
    261e:	2102      	movs	r1, #2
    2620:	f361 0202 	bfi	r2, r1, #0, #3
    2624:	e7eb      	b.n	25fe <z_cbvprintf_impl+0x346>
    2626:	f89d 104a 	ldrb.w	r1, [sp, #74]	; 0x4a
    262a:	2002      	movs	r0, #2
		if (conv->length_mod == LENGTH_UPPER_L) {
    262c:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    2630:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    2634:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    2636:	f88d 104a 	strb.w	r1, [sp, #74]	; 0x4a
			conv->invalid = true;
    263a:	bf02      	ittt	eq
    263c:	f89d 1048 	ldrbeq.w	r1, [sp, #72]	; 0x48
    2640:	f041 0101 	orreq.w	r1, r1, #1
    2644:	f88d 1048 	strbeq.w	r1, [sp, #72]	; 0x48
		if (conv->specifier == 'c') {
    2648:	2a63      	cmp	r2, #99	; 0x63
    264a:	f47f af0e 	bne.w	246a <z_cbvprintf_impl+0x1b2>
			unsupported = (conv->length_mod != LENGTH_NONE);
    264e:	3b00      	subs	r3, #0
    2650:	bf18      	it	ne
    2652:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
    2654:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
    2658:	f3c2 0140 	ubfx	r1, r2, #1, #1
    265c:	430b      	orrs	r3, r1
    265e:	f363 0241 	bfi	r2, r3, #1, #1
    2662:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
	return sp;
    2666:	e706      	b.n	2476 <z_cbvprintf_impl+0x1be>
		} else if ((conv->length_mod != LENGTH_NONE)
    2668:	f013 0f38 	tst.w	r3, #56	; 0x38
    266c:	d1ce      	bne.n	260c <z_cbvprintf_impl+0x354>
    266e:	e6fc      	b.n	246a <z_cbvprintf_impl+0x1b2>
		conv->specifier_cat = SPECIFIER_PTR;
    2670:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
    2674:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
    2676:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    267a:	f361 0202 	bfi	r2, r1, #0, #3
    267e:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod != LENGTH_NONE) {
    2682:	bf14      	ite	ne
    2684:	2301      	movne	r3, #1
    2686:	2300      	moveq	r3, #0
    2688:	e7e4      	b.n	2654 <z_cbvprintf_impl+0x39c>
			unsupported = true;
    268a:	2301      	movs	r3, #1
    268c:	e7e2      	b.n	2654 <z_cbvprintf_impl+0x39c>
		} else if (conv->width_present) {
    268e:	f99d 2048 	ldrsb.w	r2, [sp, #72]	; 0x48
    2692:	2a00      	cmp	r2, #0
			width = conv->width_value;
    2694:	bfb4      	ite	lt
    2696:	9a13      	ldrlt	r2, [sp, #76]	; 0x4c
		int width = -1;
    2698:	f04f 32ff 	movge.w	r2, #4294967295
    269c:	e6fd      	b.n	249a <z_cbvprintf_impl+0x1e2>
		} else if (conv->prec_present) {
    269e:	079f      	lsls	r7, r3, #30
    26a0:	f57f af0a 	bpl.w	24b8 <z_cbvprintf_impl+0x200>
			precision = conv->prec_value;
    26a4:	9f14      	ldr	r7, [sp, #80]	; 0x50
		conv->pad0_value = 0;
    26a6:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    26a8:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
		    && (conv->specifier_cat == SPECIFIER_FP)
    26ac:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT)
    26b0:	f003 0207 	and.w	r2, r3, #7
    26b4:	2a04      	cmp	r2, #4
    26b6:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
    26ba:	d107      	bne.n	26cc <z_cbvprintf_impl+0x414>
		    && !conv->prec_present) {
    26bc:	0790      	lsls	r0, r2, #30
    26be:	d405      	bmi.n	26cc <z_cbvprintf_impl+0x414>
			if (conv->specifier_a) {
    26c0:	f99d 1049 	ldrsb.w	r1, [sp, #73]	; 0x49
				precision = FRACTION_HEX;
    26c4:	2900      	cmp	r1, #0
    26c6:	bfac      	ite	ge
    26c8:	2706      	movge	r7, #6
    26ca:	270d      	movlt	r7, #13
		enum specifier_cat_enum specifier_cat
    26cc:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    26d0:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    26d2:	f3c2 02c3 	ubfx	r2, r2, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    26d6:	d133      	bne.n	2740 <z_cbvprintf_impl+0x488>
			switch (length_mod) {
    26d8:	1ed3      	subs	r3, r2, #3
    26da:	2b04      	cmp	r3, #4
    26dc:	d804      	bhi.n	26e8 <z_cbvprintf_impl+0x430>
    26de:	e8df f003 	tbb	[pc, r3]
    26e2:	4621      	.short	0x4621
    26e4:	2146      	.short	0x2146
    26e6:	21          	.byte	0x21
    26e7:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
    26e8:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
    26ea:	2a01      	cmp	r2, #1
				value->sint = va_arg(ap, int);
    26ec:	ea4f 71e3 	mov.w	r1, r3, asr #31
    26f0:	e9cd 3110 	strd	r3, r1, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
    26f4:	d11c      	bne.n	2730 <z_cbvprintf_impl+0x478>
				value->sint = (signed char)value->sint;
    26f6:	f99d 3040 	ldrsb.w	r3, [sp, #64]	; 0x40
    26fa:	17d9      	asrs	r1, r3, #31
    26fc:	e9cd 3110 	strd	r3, r1, [sp, #64]	; 0x40
				value->sint = va_arg(ap, int);
    2700:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
    2702:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    2706:	9307      	str	r3, [sp, #28]
    2708:	0799      	lsls	r1, r3, #30
    270a:	d050      	beq.n	27ae <z_cbvprintf_impl+0x4f6>
			OUTS(sp, fp);
    270c:	9b06      	ldr	r3, [sp, #24]
    270e:	9903      	ldr	r1, [sp, #12]
    2710:	4632      	mov	r2, r6
    2712:	4650      	mov	r0, sl
    2714:	f006 fd3e 	bl	9194 <outs>
    2718:	2800      	cmp	r0, #0
    271a:	f2c0 835f 	blt.w	2ddc <z_cbvprintf_impl+0xb24>
    271e:	4405      	add	r5, r0
			continue;
    2720:	9e06      	ldr	r6, [sp, #24]
    2722:	e5d1      	b.n	22c8 <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    2724:	f854 3b04 	ldr.w	r3, [r4], #4
    2728:	17d9      	asrs	r1, r3, #31
				value->uint = (unsigned char)value->uint;
    272a:	e9cd 3110 	strd	r3, r1, [sp, #64]	; 0x40
    272e:	e7e8      	b.n	2702 <z_cbvprintf_impl+0x44a>
			} else if (length_mod == LENGTH_H) {
    2730:	2a02      	cmp	r2, #2
    2732:	d1e5      	bne.n	2700 <z_cbvprintf_impl+0x448>
				value->sint = (short)value->sint;
    2734:	b219      	sxth	r1, r3
    2736:	f343 33c0 	sbfx	r3, r3, #15, #1
    273a:	e9cd 1310 	strd	r1, r3, [sp, #64]	; 0x40
    273e:	e7df      	b.n	2700 <z_cbvprintf_impl+0x448>
		} else if (specifier_cat == SPECIFIER_UINT) {
    2740:	2b02      	cmp	r3, #2
    2742:	d124      	bne.n	278e <z_cbvprintf_impl+0x4d6>
			switch (length_mod) {
    2744:	1ed3      	subs	r3, r2, #3
    2746:	2b04      	cmp	r3, #4
    2748:	d804      	bhi.n	2754 <z_cbvprintf_impl+0x49c>
    274a:	e8df f003 	tbb	[pc, r3]
    274e:	1018      	.short	0x1018
    2750:	1810      	.short	0x1810
    2752:	18          	.byte	0x18
    2753:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
    2754:	2a01      	cmp	r2, #1
				value->uint = va_arg(ap, unsigned int);
    2756:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    275a:	f04f 0100 	mov.w	r1, #0
    275e:	d014      	beq.n	278a <z_cbvprintf_impl+0x4d2>
			} else if (length_mod == LENGTH_H) {
    2760:	2a02      	cmp	r2, #2
				value->uint = va_arg(ap, unsigned int);
    2762:	e9cd 3110 	strd	r3, r1, [sp, #64]	; 0x40
			} else if (length_mod == LENGTH_H) {
    2766:	d1cc      	bne.n	2702 <z_cbvprintf_impl+0x44a>
				value->uint = (unsigned short)value->uint;
    2768:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
    276a:	9310      	str	r3, [sp, #64]	; 0x40
    276c:	e7c9      	b.n	2702 <z_cbvprintf_impl+0x44a>
					(uint_value_type)va_arg(ap,
    276e:	3407      	adds	r4, #7
    2770:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
    2774:	e8f4 0102 	ldrd	r0, r1, [r4], #8
    2778:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
    277c:	e7c1      	b.n	2702 <z_cbvprintf_impl+0x44a>
					(uint_value_type)va_arg(ap, size_t);
    277e:	f854 3b04 	ldr.w	r3, [r4], #4
    2782:	9310      	str	r3, [sp, #64]	; 0x40
    2784:	2300      	movs	r3, #0
    2786:	9311      	str	r3, [sp, #68]	; 0x44
			} else if (length_mod == LENGTH_H) {
    2788:	e7bb      	b.n	2702 <z_cbvprintf_impl+0x44a>
				value->uint = (unsigned char)value->uint;
    278a:	b2db      	uxtb	r3, r3
    278c:	e7cd      	b.n	272a <z_cbvprintf_impl+0x472>
		} else if (specifier_cat == SPECIFIER_FP) {
    278e:	2b04      	cmp	r3, #4
    2790:	d108      	bne.n	27a4 <z_cbvprintf_impl+0x4ec>
					(sint_value_type)va_arg(ap, long long);
    2792:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
    2794:	f024 0407 	bic.w	r4, r4, #7
    2798:	e9d4 0100 	ldrd	r0, r1, [r4]
    279c:	3408      	adds	r4, #8
    279e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    27a2:	e7ae      	b.n	2702 <z_cbvprintf_impl+0x44a>
		} else if (specifier_cat == SPECIFIER_PTR) {
    27a4:	2b03      	cmp	r3, #3
    27a6:	d1ac      	bne.n	2702 <z_cbvprintf_impl+0x44a>
			value->ptr = va_arg(ap, void *);
    27a8:	f854 3b04 	ldr.w	r3, [r4], #4
    27ac:	e7dd      	b.n	276a <z_cbvprintf_impl+0x4b2>
		switch (conv->specifier) {
    27ae:	f89d b04b 	ldrb.w	fp, [sp, #75]	; 0x4b
    27b2:	f1bb 0f78 	cmp.w	fp, #120	; 0x78
    27b6:	d8b3      	bhi.n	2720 <z_cbvprintf_impl+0x468>
    27b8:	f1bb 0f57 	cmp.w	fp, #87	; 0x57
    27bc:	d849      	bhi.n	2852 <z_cbvprintf_impl+0x59a>
    27be:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
    27c2:	f000 8091 	beq.w	28e8 <z_cbvprintf_impl+0x630>
    27c6:	f1bb 0f24 	cmp.w	fp, #36	; 0x24
    27ca:	d9a9      	bls.n	2720 <z_cbvprintf_impl+0x468>
    27cc:	f1bb 0f41 	cmp.w	fp, #65	; 0x41
    27d0:	d003      	beq.n	27da <z_cbvprintf_impl+0x522>
    27d2:	f1ab 0245 	sub.w	r2, fp, #69	; 0x45
    27d6:	2a02      	cmp	r2, #2
    27d8:	d8a2      	bhi.n	2720 <z_cbvprintf_impl+0x468>
	} u = {
    27da:	e9dd 1210 	ldrd	r1, r2, [sp, #64]	; 0x40
	if ((u.u64 & SIGN_MASK) != 0U) {
    27de:	2a00      	cmp	r2, #0
    27e0:	f2c0 8136 	blt.w	2a50 <z_cbvprintf_impl+0x798>
	} else if (conv->flag_plus) {
    27e4:	9b07      	ldr	r3, [sp, #28]
    27e6:	071e      	lsls	r6, r3, #28
    27e8:	f100 8135 	bmi.w	2a56 <z_cbvprintf_impl+0x79e>
	} else if (conv->flag_space) {
    27ec:	f3c3 1900 	ubfx	r9, r3, #4, #1
    27f0:	ea4f 1949 	mov.w	r9, r9, lsl #5
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
    27f4:	f3c2 500a 	ubfx	r0, r2, #20, #11
	uint64_t fract = u.u64 & BIT64_MASK(FRACTION_BITS);
    27f8:	f3c2 0213 	ubfx	r2, r2, #0, #20
	bool is_subnormal = (expo == 0) && (fract != 0);
    27fc:	2800      	cmp	r0, #0
    27fe:	f040 812d 	bne.w	2a5c <z_cbvprintf_impl+0x7a4>
    2802:	ea51 0602 	orrs.w	r6, r1, r2
    2806:	bf14      	ite	ne
    2808:	2601      	movne	r6, #1
    280a:	2600      	moveq	r6, #0
	fract <<= EXPONENT_BITS;
    280c:	02d2      	lsls	r2, r2, #11
    280e:	ea42 5251 	orr.w	r2, r2, r1, lsr #21
    2812:	02c9      	lsls	r1, r1, #11
		c = 'f';
    2814:	f1bb 0f46 	cmp.w	fp, #70	; 0x46
	if ((expo | fract) != 0) {
    2818:	ea40 0e01 	orr.w	lr, r0, r1
    281c:	ea42 7ce0 	orr.w	ip, r2, r0, asr #31
		c = 'f';
    2820:	bf08      	it	eq
    2822:	f04f 0b66 	moveq.w	fp, #102	; 0x66
	if ((expo | fract) != 0) {
    2826:	ea5e 0c0c 	orrs.w	ip, lr, ip
	fract &= ~SIGN_MASK;
    282a:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
	if ((expo | fract) != 0) {
    282e:	f000 819c 	beq.w	2b6a <z_cbvprintf_impl+0x8b2>
		if (is_subnormal) {
    2832:	2e00      	cmp	r6, #0
    2834:	f040 8149 	bne.w	2aca <z_cbvprintf_impl+0x812>
		fract |= BIT_63;
    2838:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    283a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
		expo -= (1023 - 1);	/* +1 since .1 vs 1. */
    283e:	f2a0 38fe 	subw	r8, r0, #1022	; 0x3fe
		fract |= BIT_63;
    2842:	920d      	str	r2, [sp, #52]	; 0x34
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
    2844:	2000      	movs	r0, #0
    2846:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
    284a:	4606      	mov	r6, r0
		fract *= 5U;
    284c:	f04f 0c05 	mov.w	ip, #5
    2850:	e155      	b.n	2afe <z_cbvprintf_impl+0x846>
		switch (conv->specifier) {
    2852:	f1ab 0158 	sub.w	r1, fp, #88	; 0x58
    2856:	2920      	cmp	r1, #32
    2858:	f63f af62 	bhi.w	2720 <z_cbvprintf_impl+0x468>
    285c:	a001      	add	r0, pc, #4	; (adr r0, 2864 <z_cbvprintf_impl+0x5ac>)
    285e:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
    2862:	bf00      	nop
    2864:	000029ef 	.word	0x000029ef
    2868:	00002721 	.word	0x00002721
    286c:	00002721 	.word	0x00002721
    2870:	00002721 	.word	0x00002721
    2874:	00002721 	.word	0x00002721
    2878:	00002721 	.word	0x00002721
    287c:	00002721 	.word	0x00002721
    2880:	00002721 	.word	0x00002721
    2884:	00002721 	.word	0x00002721
    2888:	000027db 	.word	0x000027db
    288c:	00002721 	.word	0x00002721
    2890:	00002973 	.word	0x00002973
    2894:	00002987 	.word	0x00002987
    2898:	000027db 	.word	0x000027db
    289c:	000027db 	.word	0x000027db
    28a0:	000027db 	.word	0x000027db
    28a4:	00002721 	.word	0x00002721
    28a8:	00002987 	.word	0x00002987
    28ac:	00002721 	.word	0x00002721
    28b0:	00002721 	.word	0x00002721
    28b4:	00002721 	.word	0x00002721
    28b8:	00002721 	.word	0x00002721
    28bc:	00002a29 	.word	0x00002a29
    28c0:	000029ef 	.word	0x000029ef
    28c4:	000029f5 	.word	0x000029f5
    28c8:	00002721 	.word	0x00002721
    28cc:	00002721 	.word	0x00002721
    28d0:	000028ef 	.word	0x000028ef
    28d4:	00002721 	.word	0x00002721
    28d8:	000029ef 	.word	0x000029ef
    28dc:	00002721 	.word	0x00002721
    28e0:	00002721 	.word	0x00002721
    28e4:	000029ef 	.word	0x000029ef
			OUTC('%');
    28e8:	9903      	ldr	r1, [sp, #12]
    28ea:	4658      	mov	r0, fp
    28ec:	e4f6      	b.n	22dc <z_cbvprintf_impl+0x24>
			if (precision >= 0) {
    28ee:	2f00      	cmp	r7, #0
			bps = (const char *)value->ptr;
    28f0:	9e10      	ldr	r6, [sp, #64]	; 0x40
			if (precision >= 0) {
    28f2:	db3a      	blt.n	296a <z_cbvprintf_impl+0x6b2>
				len = strnlen(bps, precision);
    28f4:	4639      	mov	r1, r7
    28f6:	4630      	mov	r0, r6
    28f8:	f007 f98f 	bl	9c1a <strnlen>
			bpe = bps + len;
    28fc:	1837      	adds	r7, r6, r0
		if (bps == NULL) {
    28fe:	2e00      	cmp	r6, #0
    2900:	f43f af0e 	beq.w	2720 <z_cbvprintf_impl+0x468>
		char sign = 0;
    2904:	f04f 0900 	mov.w	r9, #0
		if (conv->altform_0c) {
    2908:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    290c:	f013 0210 	ands.w	r2, r3, #16
    2910:	9205      	str	r2, [sp, #20]
    2912:	f000 8258 	beq.w	2dc6 <z_cbvprintf_impl+0xb0e>
			nj_len += 2U;
    2916:	3002      	adds	r0, #2
		if (conv->pad_fp) {
    2918:	f013 0340 	ands.w	r3, r3, #64	; 0x40
		nj_len += conv->pad0_value;
    291c:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
		if (conv->pad_fp) {
    2920:	9308      	str	r3, [sp, #32]
			nj_len += conv->pad0_pre_exp;
    2922:	bf18      	it	ne
    2924:	9b14      	ldrne	r3, [sp, #80]	; 0x50
		nj_len += conv->pad0_value;
    2926:	f8cd 801c 	str.w	r8, [sp, #28]
    292a:	4440      	add	r0, r8
			nj_len += conv->pad0_pre_exp;
    292c:	bf18      	it	ne
    292e:	18c0      	addne	r0, r0, r3
		if (width > 0) {
    2930:	9b04      	ldr	r3, [sp, #16]
    2932:	2b00      	cmp	r3, #0
    2934:	f340 8262 	ble.w	2dfc <z_cbvprintf_impl+0xb44>
			if (!conv->flag_dash) {
    2938:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
			width -= (int)nj_len;
    293c:	1a1b      	subs	r3, r3, r0
			if (!conv->flag_dash) {
    293e:	0750      	lsls	r0, r2, #29
			width -= (int)nj_len;
    2940:	9304      	str	r3, [sp, #16]
			if (!conv->flag_dash) {
    2942:	f3c2 0b80 	ubfx	fp, r2, #2, #1
    2946:	f100 8259 	bmi.w	2dfc <z_cbvprintf_impl+0xb44>
				if (conv->flag_zero) {
    294a:	0651      	lsls	r1, r2, #25
    294c:	f140 8249 	bpl.w	2de2 <z_cbvprintf_impl+0xb2a>
					if (sign != 0) {
    2950:	f1b9 0f00 	cmp.w	r9, #0
    2954:	d007      	beq.n	2966 <z_cbvprintf_impl+0x6ae>
						OUTC(sign);
    2956:	9903      	ldr	r1, [sp, #12]
    2958:	4648      	mov	r0, r9
    295a:	47d0      	blx	sl
    295c:	2800      	cmp	r0, #0
    295e:	f2c0 823d 	blt.w	2ddc <z_cbvprintf_impl+0xb24>
    2962:	3501      	adds	r5, #1
						sign = 0;
    2964:	46d9      	mov	r9, fp
					pad = '0';
    2966:	2230      	movs	r2, #48	; 0x30
    2968:	e23c      	b.n	2de4 <z_cbvprintf_impl+0xb2c>
				len = strlen(bps);
    296a:	4630      	mov	r0, r6
    296c:	f7fe fa36 	bl	ddc <strlen>
    2970:	e7c4      	b.n	28fc <z_cbvprintf_impl+0x644>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    2972:	9b10      	ldr	r3, [sp, #64]	; 0x40
    2974:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
		char sign = 0;
    2978:	f04f 0900 	mov.w	r9, #0
			bpe = buf + 1;
    297c:	f10d 075d 	add.w	r7, sp, #93	; 0x5d
			bps = buf;
    2980:	ae17      	add	r6, sp, #92	; 0x5c
		size_t nj_len = (bpe - bps);
    2982:	2001      	movs	r0, #1
    2984:	e7c0      	b.n	2908 <z_cbvprintf_impl+0x650>
			if (conv->flag_plus) {
    2986:	9b07      	ldr	r3, [sp, #28]
    2988:	071a      	lsls	r2, r3, #28
			} else if (conv->flag_space) {
    298a:	bf58      	it	pl
    298c:	f3c3 1900 	ubfxpl	r9, r3, #4, #1
			sint = value->sint;
    2990:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
			} else if (conv->flag_space) {
    2994:	bf54      	ite	pl
    2996:	ea4f 1949 	movpl.w	r9, r9, lsl #5
				sign = '+';
    299a:	f04f 092b 	movmi.w	r9, #43	; 0x2b
			if (sint < 0) {
    299e:	2b00      	cmp	r3, #0
    29a0:	da06      	bge.n	29b0 <z_cbvprintf_impl+0x6f8>
				value->uint = (uint_value_type)-sint;
    29a2:	4252      	negs	r2, r2
    29a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    29a8:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
				sign = '-';
    29ac:	f04f 092d 	mov.w	r9, #45	; 0x2d
			bps = encode_uint(value->uint, conv, buf, bpe);
    29b0:	f10d 0375 	add.w	r3, sp, #117	; 0x75
    29b4:	9300      	str	r3, [sp, #0]
    29b6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    29ba:	ab17      	add	r3, sp, #92	; 0x5c
    29bc:	aa12      	add	r2, sp, #72	; 0x48
    29be:	f001 fd21 	bl	4404 <encode_uint>
    29c2:	4606      	mov	r6, r0
			if (precision >= 0) {
    29c4:	2f00      	cmp	r7, #0
    29c6:	db0c      	blt.n	29e2 <z_cbvprintf_impl+0x72a>
				conv->flag_zero = false;
    29c8:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
				size_t len = bpe - bps;
    29cc:	f10d 0375 	add.w	r3, sp, #117	; 0x75
    29d0:	1b9b      	subs	r3, r3, r6
				conv->flag_zero = false;
    29d2:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    29d6:	429f      	cmp	r7, r3
				conv->flag_zero = false;
    29d8:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
				if (len < (size_t)precision) {
    29dc:	d901      	bls.n	29e2 <z_cbvprintf_impl+0x72a>
					conv->pad0_value = precision - (int)len;
    29de:	1afb      	subs	r3, r7, r3
    29e0:	9313      	str	r3, [sp, #76]	; 0x4c
		if (bps == NULL) {
    29e2:	2e00      	cmp	r6, #0
    29e4:	f43f ae9c 	beq.w	2720 <z_cbvprintf_impl+0x468>
    29e8:	f10d 0775 	add.w	r7, sp, #117	; 0x75
    29ec:	e05b      	b.n	2aa6 <z_cbvprintf_impl+0x7ee>
		switch (conv->specifier) {
    29ee:	f04f 0900 	mov.w	r9, #0
    29f2:	e7dd      	b.n	29b0 <z_cbvprintf_impl+0x6f8>
			if (value->ptr != NULL) {
    29f4:	9810      	ldr	r0, [sp, #64]	; 0x40
    29f6:	2800      	cmp	r0, #0
    29f8:	f000 81e0 	beq.w	2dbc <z_cbvprintf_impl+0xb04>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    29fc:	f10d 0375 	add.w	r3, sp, #117	; 0x75
    2a00:	9300      	str	r3, [sp, #0]
    2a02:	aa12      	add	r2, sp, #72	; 0x48
    2a04:	ab17      	add	r3, sp, #92	; 0x5c
    2a06:	2100      	movs	r1, #0
    2a08:	f001 fcfc 	bl	4404 <encode_uint>
				conv->altform_0c = true;
    2a0c:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
    2a10:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    2a14:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    2a18:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    2a1c:	4606      	mov	r6, r0
				conv->altform_0c = true;
    2a1e:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
		char sign = 0;
    2a22:	f04f 0900 	mov.w	r9, #0
				goto prec_int_pad0;
    2a26:	e7cd      	b.n	29c4 <z_cbvprintf_impl+0x70c>
				store_count(conv, value->ptr, count);
    2a28:	9b10      	ldr	r3, [sp, #64]	; 0x40
	switch ((enum length_mod_enum)conv->length_mod) {
    2a2a:	2a07      	cmp	r2, #7
    2a2c:	f63f ae78 	bhi.w	2720 <z_cbvprintf_impl+0x468>
    2a30:	e8df f002 	tbb	[pc, r2]
    2a34:	0c06040c 	.word	0x0c06040c
    2a38:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
    2a3c:	701d      	strb	r5, [r3, #0]
		break;
    2a3e:	e66f      	b.n	2720 <z_cbvprintf_impl+0x468>
		*(short *)dp = (short)count;
    2a40:	801d      	strh	r5, [r3, #0]
		break;
    2a42:	e66d      	b.n	2720 <z_cbvprintf_impl+0x468>
		*(intmax_t *)dp = (intmax_t)count;
    2a44:	17ea      	asrs	r2, r5, #31
    2a46:	e9c3 5200 	strd	r5, r2, [r3]
		break;
    2a4a:	e669      	b.n	2720 <z_cbvprintf_impl+0x468>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    2a4c:	601d      	str	r5, [r3, #0]
		break;
    2a4e:	e667      	b.n	2720 <z_cbvprintf_impl+0x468>
		*sign = '-';
    2a50:	f04f 092d 	mov.w	r9, #45	; 0x2d
    2a54:	e6ce      	b.n	27f4 <z_cbvprintf_impl+0x53c>
		*sign = '+';
    2a56:	f04f 092b 	mov.w	r9, #43	; 0x2b
    2a5a:	e6cb      	b.n	27f4 <z_cbvprintf_impl+0x53c>
	if (expo == BIT_MASK(EXPONENT_BITS)) {
    2a5c:	f240 76ff 	movw	r6, #2047	; 0x7ff
    2a60:	42b0      	cmp	r0, r6
    2a62:	d12f      	bne.n	2ac4 <z_cbvprintf_impl+0x80c>
			if (isupper((unsigned char)c)) {
    2a64:	f10b 0301 	add.w	r3, fp, #1
    2a68:	489f      	ldr	r0, [pc, #636]	; (2ce8 <z_cbvprintf_impl+0xa30>)
    2a6a:	b2db      	uxtb	r3, r3
		if (fract == 0) {
    2a6c:	430a      	orrs	r2, r1
    2a6e:	5cc3      	ldrb	r3, [r0, r3]
    2a70:	f003 0303 	and.w	r3, r3, #3
    2a74:	d11e      	bne.n	2ab4 <z_cbvprintf_impl+0x7fc>
			if (isupper((unsigned char)c)) {
    2a76:	2b01      	cmp	r3, #1
    2a78:	bf0b      	itete	eq
    2a7a:	2349      	moveq	r3, #73	; 0x49
    2a7c:	2369      	movne	r3, #105	; 0x69
    2a7e:	214e      	moveq	r1, #78	; 0x4e
    2a80:	216e      	movne	r1, #110	; 0x6e
    2a82:	bf0c      	ite	eq
    2a84:	2246      	moveq	r2, #70	; 0x46
    2a86:	2266      	movne	r2, #102	; 0x66
				*buf++ = 'I';
    2a88:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
		conv->flag_zero = false;
    2a8c:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
				*buf++ = 'N';
    2a90:	f88d 105d 	strb.w	r1, [sp, #93]	; 0x5d
		conv->flag_zero = false;
    2a94:	f36f 1386 	bfc	r3, #6, #1
				*buf++ = 'F';
    2a98:	f88d 205e 	strb.w	r2, [sp, #94]	; 0x5e
		conv->flag_zero = false;
    2a9c:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
		*bpe = buf;
    2aa0:	f10d 075f 	add.w	r7, sp, #95	; 0x5f
				bps = encode_float(value->dbl, conv, precision,
    2aa4:	ae17      	add	r6, sp, #92	; 0x5c
		size_t nj_len = (bpe - bps);
    2aa6:	1bb8      	subs	r0, r7, r6
		if (sign != 0) {
    2aa8:	f1b9 0f00 	cmp.w	r9, #0
    2aac:	f43f af2c 	beq.w	2908 <z_cbvprintf_impl+0x650>
			nj_len += 1U;
    2ab0:	3001      	adds	r0, #1
    2ab2:	e729      	b.n	2908 <z_cbvprintf_impl+0x650>
			if (isupper((unsigned char)c)) {
    2ab4:	2b01      	cmp	r3, #1
    2ab6:	bf15      	itete	ne
    2ab8:	236e      	movne	r3, #110	; 0x6e
    2aba:	234e      	moveq	r3, #78	; 0x4e
    2abc:	2161      	movne	r1, #97	; 0x61
    2abe:	2141      	moveq	r1, #65	; 0x41
    2ac0:	461a      	mov	r2, r3
    2ac2:	e7e1      	b.n	2a88 <z_cbvprintf_impl+0x7d0>
	bool is_subnormal = (expo == 0) && (fract != 0);
    2ac4:	2600      	movs	r6, #0
    2ac6:	e6a1      	b.n	280c <z_cbvprintf_impl+0x554>
				expo--;
    2ac8:	3801      	subs	r0, #1
			while (((fract <<= 1) & BIT_63) == 0) {
    2aca:	1849      	adds	r1, r1, r1
    2acc:	4152      	adcs	r2, r2
    2ace:	2a00      	cmp	r2, #0
    2ad0:	dafa      	bge.n	2ac8 <z_cbvprintf_impl+0x810>
    2ad2:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
    2ad6:	e6af      	b.n	2838 <z_cbvprintf_impl+0x580>
			fract >>= 1;
    2ad8:	0849      	lsrs	r1, r1, #1
    2ada:	ea41 71c2 	orr.w	r1, r1, r2, lsl #31
    2ade:	0852      	lsrs	r2, r2, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
    2ae0:	f1b2 3f33 	cmp.w	r2, #858993459	; 0x33333333
    2ae4:	4640      	mov	r0, r8
			expo++;
    2ae6:	f108 0801 	add.w	r8, r8, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
    2aea:	d2f5      	bcs.n	2ad8 <z_cbvprintf_impl+0x820>
		fract *= 5U;
    2aec:	fb0c fe02 	mul.w	lr, ip, r2
    2af0:	fba1 120c 	umull	r1, r2, r1, ip
		expo++;
    2af4:	f100 0802 	add.w	r8, r0, #2
		fract *= 5U;
    2af8:	4472      	add	r2, lr
		decexp--;
    2afa:	3e01      	subs	r6, #1
    2afc:	2001      	movs	r0, #1
	while (expo < -2) {
    2afe:	f118 0f02 	cmn.w	r8, #2
    2b02:	dbe9      	blt.n	2ad8 <z_cbvprintf_impl+0x820>
    2b04:	b108      	cbz	r0, 2b0a <z_cbvprintf_impl+0x852>
    2b06:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
	while (expo > 0) {
    2b0a:	f1b8 0f00 	cmp.w	r8, #0
		fract += 2;
    2b0e:	e9dd 210c 	ldrd	r2, r1, [sp, #48]	; 0x30
	while (expo > 0) {
    2b12:	dc2d      	bgt.n	2b70 <z_cbvprintf_impl+0x8b8>
	fract >>= (4 - expo);
    2b14:	f1c8 0004 	rsb	r0, r8, #4
    2b18:	f1a0 0c20 	sub.w	ip, r0, #32
    2b1c:	f108 081c 	add.w	r8, r8, #28
    2b20:	40c2      	lsrs	r2, r0
    2b22:	fa01 f808 	lsl.w	r8, r1, r8
    2b26:	fa21 fc0c 	lsr.w	ip, r1, ip
    2b2a:	40c1      	lsrs	r1, r0
	if ((c == 'g') || (c == 'G')) {
    2b2c:	f00b 00df 	and.w	r0, fp, #223	; 0xdf
	fract >>= (4 - expo);
    2b30:	ea42 0208 	orr.w	r2, r2, r8
	if ((c == 'g') || (c == 'G')) {
    2b34:	2847      	cmp	r0, #71	; 0x47
	fract >>= (4 - expo);
    2b36:	ea42 020c 	orr.w	r2, r2, ip
	if ((c == 'g') || (c == 'G')) {
    2b3a:	d13a      	bne.n	2bb2 <z_cbvprintf_impl+0x8fa>
		if (decexp < (-4 + 1) || decexp > precision) {
    2b3c:	1cf0      	adds	r0, r6, #3
    2b3e:	db01      	blt.n	2b44 <z_cbvprintf_impl+0x88c>
    2b40:	42b7      	cmp	r7, r6
    2b42:	da2b      	bge.n	2b9c <z_cbvprintf_impl+0x8e4>
			c += 'e' - 'g';  /* e or E */
    2b44:	f1ab 0302 	sub.w	r3, fp, #2
			if (precision > 0) {
    2b48:	2f00      	cmp	r7, #0
			c += 'e' - 'g';  /* e or E */
    2b4a:	fa5f fb83 	uxtb.w	fp, r3
			if (precision > 0) {
    2b4e:	dd7d      	ble.n	2c4c <z_cbvprintf_impl+0x994>
		if (!conv->flag_hash && (precision > 0)) {
    2b50:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
    2b54:	0683      	lsls	r3, r0, #26
				precision--;
    2b56:	f107 37ff 	add.w	r7, r7, #4294967295
		if (!conv->flag_hash && (precision > 0)) {
    2b5a:	d477      	bmi.n	2c4c <z_cbvprintf_impl+0x994>
    2b5c:	1e3b      	subs	r3, r7, #0
    2b5e:	bf18      	it	ne
    2b60:	2301      	movne	r3, #1
	bool prune_zero = false;
    2b62:	9305      	str	r3, [sp, #20]
		decimals = precision + 1;
    2b64:	f107 0801 	add.w	r8, r7, #1
    2b68:	e02d      	b.n	2bc6 <z_cbvprintf_impl+0x90e>
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
    2b6a:	f04f 0800 	mov.w	r8, #0
    2b6e:	e669      	b.n	2844 <z_cbvprintf_impl+0x58c>
		fract += 2;
    2b70:	3202      	adds	r2, #2
    2b72:	f141 0100 	adc.w	r1, r1, #0
		_ldiv5(&fract);
    2b76:	a80c      	add	r0, sp, #48	; 0x30
		fract += 2;
    2b78:	e9cd 210c 	strd	r2, r1, [sp, #48]	; 0x30
		_ldiv5(&fract);
    2b7c:	f006 fadb 	bl	9136 <_ldiv5>
		expo--;
    2b80:	e9dd 210c 	ldrd	r2, r1, [sp, #48]	; 0x30
    2b84:	f108 38ff 	add.w	r8, r8, #4294967295
		decexp++;
    2b88:	3601      	adds	r6, #1
			fract <<= 1;
    2b8a:	1892      	adds	r2, r2, r2
    2b8c:	4149      	adcs	r1, r1
		} while (!(fract & BIT_63));
    2b8e:	2900      	cmp	r1, #0
			expo--;
    2b90:	f108 38ff 	add.w	r8, r8, #4294967295
		} while (!(fract & BIT_63));
    2b94:	daf9      	bge.n	2b8a <z_cbvprintf_impl+0x8d2>
    2b96:	e9cd 210c 	strd	r2, r1, [sp, #48]	; 0x30
    2b9a:	e7b6      	b.n	2b0a <z_cbvprintf_impl+0x852>
		if (!conv->flag_hash && (precision > 0)) {
    2b9c:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    2ba0:	0698      	lsls	r0, r3, #26
			precision -= decexp;
    2ba2:	eba7 0706 	sub.w	r7, r7, r6
		if (!conv->flag_hash && (precision > 0)) {
    2ba6:	d44f      	bmi.n	2c48 <z_cbvprintf_impl+0x990>
    2ba8:	1e3b      	subs	r3, r7, #0
    2baa:	bf18      	it	ne
    2bac:	2301      	movne	r3, #1
	bool prune_zero = false;
    2bae:	9305      	str	r3, [sp, #20]
    2bb0:	e004      	b.n	2bbc <z_cbvprintf_impl+0x904>
    2bb2:	2300      	movs	r3, #0
	if (c == 'f') {
    2bb4:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
	bool prune_zero = false;
    2bb8:	9305      	str	r3, [sp, #20]
	if (c == 'f') {
    2bba:	d1d3      	bne.n	2b64 <z_cbvprintf_impl+0x8ac>
		if (decimals < 0) {
    2bbc:	eb17 0806 	adds.w	r8, r7, r6
    2bc0:	f04f 0b66 	mov.w	fp, #102	; 0x66
    2bc4:	d444      	bmi.n	2c50 <z_cbvprintf_impl+0x998>
	if (decimals > 16) {
    2bc6:	f1b8 0f10 	cmp.w	r8, #16
    2bca:	bfa8      	it	ge
    2bcc:	f04f 0810 	movge.w	r8, #16
	uint64_t round = BIT64(59); /* 0.5 */
    2bd0:	ed9f 7b43 	vldr	d7, [pc, #268]	; 2ce0 <z_cbvprintf_impl+0xa28>
    2bd4:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
    2bd8:	2010      	movs	r0, #16
    2bda:	900b      	str	r0, [sp, #44]	; 0x2c
	*v >>= 1;
    2bdc:	e9dd 030e 	ldrd	r0, r3, [sp, #56]	; 0x38
	while (decimals--) {
    2be0:	f1b8 0f00 	cmp.w	r8, #0
    2be4:	d137      	bne.n	2c56 <z_cbvprintf_impl+0x99e>
	fract += round;
    2be6:	1812      	adds	r2, r2, r0
    2be8:	eb41 0103 	adc.w	r1, r1, r3
	if (fract >= BIT64(60)) {
    2bec:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
    2bf0:	d241      	bcs.n	2c76 <z_cbvprintf_impl+0x9be>
	fract += round;
    2bf2:	e9cd 210c 	strd	r2, r1, [sp, #48]	; 0x30
		if (conv->flag_hash || (precision > 0)) {
    2bf6:	9b07      	ldr	r3, [sp, #28]
	if (c == 'f') {
    2bf8:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
		if (conv->flag_hash || (precision > 0)) {
    2bfc:	f003 0220 	and.w	r2, r3, #32
	if (c == 'f') {
    2c00:	f040 80bb 	bne.w	2d7a <z_cbvprintf_impl+0xac2>
		if (decexp > 0) {
    2c04:	2e00      	cmp	r6, #0
    2c06:	dc41      	bgt.n	2c8c <z_cbvprintf_impl+0x9d4>
			*buf++ = '0';
    2c08:	2130      	movs	r1, #48	; 0x30
    2c0a:	f88d 105c 	strb.w	r1, [sp, #92]	; 0x5c
		if (conv->flag_hash || (precision > 0)) {
    2c0e:	2a00      	cmp	r2, #0
    2c10:	d16c      	bne.n	2cec <z_cbvprintf_impl+0xa34>
    2c12:	2f00      	cmp	r7, #0
    2c14:	f340 81b5 	ble.w	2f82 <z_cbvprintf_impl+0xcca>
			*buf++ = '.';
    2c18:	222e      	movs	r2, #46	; 0x2e
    2c1a:	f88d 205d 	strb.w	r2, [sp, #93]	; 0x5d
		if (decexp < 0 && precision > 0) {
    2c1e:	b186      	cbz	r6, 2c42 <z_cbvprintf_impl+0x98a>
			conv->pad0_value = -decexp;
    2c20:	4272      	negs	r2, r6
    2c22:	42ba      	cmp	r2, r7
    2c24:	bfa8      	it	ge
    2c26:	463a      	movge	r2, r7
			conv->pad_postdp = (conv->pad0_value > 0);
    2c28:	f89d 104a 	ldrb.w	r1, [sp, #74]	; 0x4a
    2c2c:	9213      	str	r2, [sp, #76]	; 0x4c
    2c2e:	2a00      	cmp	r2, #0
			precision -= conv->pad0_value;
    2c30:	eba7 0702 	sub.w	r7, r7, r2
			conv->pad_postdp = (conv->pad0_value > 0);
    2c34:	bfd4      	ite	le
    2c36:	2200      	movle	r2, #0
    2c38:	2201      	movgt	r2, #1
    2c3a:	f362 1145 	bfi	r1, r2, #5, #1
    2c3e:	f88d 104a 	strb.w	r1, [sp, #74]	; 0x4a
			*buf++ = '.';
    2c42:	f10d 085e 	add.w	r8, sp, #94	; 0x5e
    2c46:	e039      	b.n	2cbc <z_cbvprintf_impl+0xa04>
	bool prune_zero = false;
    2c48:	2300      	movs	r3, #0
    2c4a:	e7b0      	b.n	2bae <z_cbvprintf_impl+0x8f6>
    2c4c:	2300      	movs	r3, #0
    2c4e:	e788      	b.n	2b62 <z_cbvprintf_impl+0x8aa>
			decimals = 0;
    2c50:	f04f 0800 	mov.w	r8, #0
    2c54:	e7bc      	b.n	2bd0 <z_cbvprintf_impl+0x918>
	*v >>= 1;
    2c56:	0840      	lsrs	r0, r0, #1
    2c58:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
    2c5c:	085b      	lsrs	r3, r3, #1
    2c5e:	e9cd 030e 	strd	r0, r3, [sp, #56]	; 0x38
	_ldiv5(v);
    2c62:	a80e      	add	r0, sp, #56	; 0x38
    2c64:	e9cd 2108 	strd	r2, r1, [sp, #32]
    2c68:	f108 38ff 	add.w	r8, r8, #4294967295
    2c6c:	f006 fa63 	bl	9136 <_ldiv5>
    2c70:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
}
    2c74:	e7b2      	b.n	2bdc <z_cbvprintf_impl+0x924>
	*v >>= 1;
    2c76:	0852      	lsrs	r2, r2, #1
    2c78:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
	_ldiv5(v);
    2c7c:	a80c      	add	r0, sp, #48	; 0x30
	*v >>= 1;
    2c7e:	0849      	lsrs	r1, r1, #1
    2c80:	e9cd 210c 	strd	r2, r1, [sp, #48]	; 0x30
		decexp++;
    2c84:	3601      	adds	r6, #1
	_ldiv5(v);
    2c86:	f006 fa56 	bl	9136 <_ldiv5>
		decexp++;
    2c8a:	e7b4      	b.n	2bf6 <z_cbvprintf_impl+0x93e>
	char *buf = bps;
    2c8c:	f10d 085c 	add.w	r8, sp, #92	; 0x5c
			while (decexp > 0 && digit_count > 0) {
    2c90:	990b      	ldr	r1, [sp, #44]	; 0x2c
    2c92:	2900      	cmp	r1, #0
    2c94:	dd09      	ble.n	2caa <z_cbvprintf_impl+0x9f2>
				*buf++ = _get_digit(&fract, &digit_count);
    2c96:	a90b      	add	r1, sp, #44	; 0x2c
    2c98:	a80c      	add	r0, sp, #48	; 0x30
    2c9a:	9207      	str	r2, [sp, #28]
    2c9c:	f006 fa63 	bl	9166 <_get_digit>
			while (decexp > 0 && digit_count > 0) {
    2ca0:	3e01      	subs	r6, #1
				*buf++ = _get_digit(&fract, &digit_count);
    2ca2:	f808 0b01 	strb.w	r0, [r8], #1
			while (decexp > 0 && digit_count > 0) {
    2ca6:	9a07      	ldr	r2, [sp, #28]
    2ca8:	d1f2      	bne.n	2c90 <z_cbvprintf_impl+0x9d8>
			conv->pad0_value = decexp;
    2caa:	9613      	str	r6, [sp, #76]	; 0x4c
		if (conv->flag_hash || (precision > 0)) {
    2cac:	b99a      	cbnz	r2, 2cd6 <z_cbvprintf_impl+0xa1e>
    2cae:	2f00      	cmp	r7, #0
    2cb0:	f340 8165 	ble.w	2f7e <z_cbvprintf_impl+0xcc6>
			*buf++ = '.';
    2cb4:	212e      	movs	r1, #46	; 0x2e
    2cb6:	f808 1b01 	strb.w	r1, [r8], #1
    2cba:	2600      	movs	r6, #0
	while (precision > 0 && digit_count > 0) {
    2cbc:	2f00      	cmp	r7, #0
    2cbe:	dd1e      	ble.n	2cfe <z_cbvprintf_impl+0xa46>
    2cc0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    2cc2:	2a00      	cmp	r2, #0
    2cc4:	dd1b      	ble.n	2cfe <z_cbvprintf_impl+0xa46>
		*buf++ = _get_digit(&fract, &digit_count);
    2cc6:	a90b      	add	r1, sp, #44	; 0x2c
    2cc8:	a80c      	add	r0, sp, #48	; 0x30
    2cca:	f006 fa4c 	bl	9166 <_get_digit>
		precision--;
    2cce:	3f01      	subs	r7, #1
		*buf++ = _get_digit(&fract, &digit_count);
    2cd0:	f808 0b01 	strb.w	r0, [r8], #1
		precision--;
    2cd4:	e7f2      	b.n	2cbc <z_cbvprintf_impl+0xa04>
			*buf++ = '.';
    2cd6:	222e      	movs	r2, #46	; 0x2e
    2cd8:	f808 2b01 	strb.w	r2, [r8], #1
    2cdc:	e7ed      	b.n	2cba <z_cbvprintf_impl+0xa02>
    2cde:	bf00      	nop
    2ce0:	00000000 	.word	0x00000000
    2ce4:	08000000 	.word	0x08000000
    2ce8:	0000aa7f 	.word	0x0000aa7f
    2cec:	222e      	movs	r2, #46	; 0x2e
    2cee:	f88d 205d 	strb.w	r2, [sp, #93]	; 0x5d
		if (decexp < 0 && precision > 0) {
    2cf2:	2e00      	cmp	r6, #0
    2cf4:	d0a5      	beq.n	2c42 <z_cbvprintf_impl+0x98a>
    2cf6:	2f00      	cmp	r7, #0
    2cf8:	dc92      	bgt.n	2c20 <z_cbvprintf_impl+0x968>
			*buf++ = '.';
    2cfa:	f10d 085e 	add.w	r8, sp, #94	; 0x5e
	if (prune_zero) {
    2cfe:	9b05      	ldr	r3, [sp, #20]
    2d00:	2b00      	cmp	r3, #0
    2d02:	d14e      	bne.n	2da2 <z_cbvprintf_impl+0xaea>
	conv->pad0_pre_exp = precision;
    2d04:	9714      	str	r7, [sp, #80]	; 0x50
    2d06:	4647      	mov	r7, r8
	if ((c == 'e') || (c == 'E')) {
    2d08:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
    2d0c:	2a45      	cmp	r2, #69	; 0x45
    2d0e:	d123      	bne.n	2d58 <z_cbvprintf_impl+0xaa0>
		if (decexp < 0) {
    2d10:	2e00      	cmp	r6, #0
			decexp = -decexp;
    2d12:	bfba      	itte	lt
    2d14:	4276      	neglt	r6, r6
			*buf++ = '-';
    2d16:	232d      	movlt	r3, #45	; 0x2d
			*buf++ = '+';
    2d18:	232b      	movge	r3, #43	; 0x2b
		if (decexp >= 100) {
    2d1a:	2e63      	cmp	r6, #99	; 0x63
			*buf++ = (decexp / 100) + '0';
    2d1c:	bfc8      	it	gt
    2d1e:	2164      	movgt	r1, #100	; 0x64
    2d20:	707b      	strb	r3, [r7, #1]
			*buf++ = '-';
    2d22:	bfd1      	iteee	le
    2d24:	1cba      	addle	r2, r7, #2
			*buf++ = (decexp / 100) + '0';
    2d26:	fbb6 f3f1 	udivgt	r3, r6, r1
    2d2a:	1cfa      	addgt	r2, r7, #3
    2d2c:	f103 0030 	addgt.w	r0, r3, #48	; 0x30
			decexp %= 100;
    2d30:	bfc8      	it	gt
    2d32:	fb01 6613 	mlsgt	r6, r1, r3, r6
		*buf++ = (decexp / 10) + '0';
    2d36:	f04f 010a 	mov.w	r1, #10
			*buf++ = (decexp / 100) + '0';
    2d3a:	bfc8      	it	gt
    2d3c:	70b8      	strbgt	r0, [r7, #2]
		*buf++ = c;
    2d3e:	f887 b000 	strb.w	fp, [r7]
		*buf++ = (decexp / 10) + '0';
    2d42:	fbb6 f3f1 	udiv	r3, r6, r1
    2d46:	4617      	mov	r7, r2
    2d48:	f103 0030 	add.w	r0, r3, #48	; 0x30
		*buf++ = (decexp % 10) + '0';
    2d4c:	fb01 6313 	mls	r3, r1, r3, r6
    2d50:	3330      	adds	r3, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
    2d52:	f807 0b02 	strb.w	r0, [r7], #2
		*buf++ = (decexp % 10) + '0';
    2d56:	7053      	strb	r3, [r2, #1]
		|| (conv->pad0_pre_exp > 0);
    2d58:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    2d5a:	2b00      	cmp	r3, #0
    2d5c:	dc2c      	bgt.n	2db8 <z_cbvprintf_impl+0xb00>
    2d5e:	9b14      	ldr	r3, [sp, #80]	; 0x50
    2d60:	2b00      	cmp	r3, #0
    2d62:	bfd4      	ite	le
    2d64:	2300      	movle	r3, #0
    2d66:	2301      	movgt	r3, #1
	conv->pad_fp = (conv->pad0_value > 0)
    2d68:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
    2d6c:	f363 1286 	bfi	r2, r3, #6, #1
	*buf = 0;
    2d70:	2300      	movs	r3, #0
	conv->pad_fp = (conv->pad0_value > 0)
    2d72:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
	*buf = 0;
    2d76:	703b      	strb	r3, [r7, #0]
	return bps;
    2d78:	e694      	b.n	2aa4 <z_cbvprintf_impl+0x7ec>
		*buf = _get_digit(&fract, &digit_count);
    2d7a:	a90b      	add	r1, sp, #44	; 0x2c
    2d7c:	a80c      	add	r0, sp, #48	; 0x30
    2d7e:	9207      	str	r2, [sp, #28]
    2d80:	f006 f9f1 	bl	9166 <_get_digit>
		if (*buf++ != '0') {
    2d84:	9a07      	ldr	r2, [sp, #28]
		*buf = _get_digit(&fract, &digit_count);
    2d86:	f88d 005c 	strb.w	r0, [sp, #92]	; 0x5c
		if (*buf++ != '0') {
    2d8a:	2830      	cmp	r0, #48	; 0x30
			decexp--;
    2d8c:	bf18      	it	ne
    2d8e:	f106 36ff 	addne.w	r6, r6, #4294967295
		if (conv->flag_hash || (precision > 0)) {
    2d92:	b912      	cbnz	r2, 2d9a <z_cbvprintf_impl+0xae2>
    2d94:	2f00      	cmp	r7, #0
    2d96:	f340 80f4 	ble.w	2f82 <z_cbvprintf_impl+0xcca>
			*buf++ = '.';
    2d9a:	222e      	movs	r2, #46	; 0x2e
    2d9c:	f88d 205d 	strb.w	r2, [sp, #93]	; 0x5d
    2da0:	e74f      	b.n	2c42 <z_cbvprintf_impl+0x98a>
		while (*--buf == '0') {
    2da2:	4647      	mov	r7, r8
    2da4:	f108 38ff 	add.w	r8, r8, #4294967295
    2da8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
    2dac:	2a30      	cmp	r2, #48	; 0x30
    2dae:	d0f8      	beq.n	2da2 <z_cbvprintf_impl+0xaea>
    2db0:	2a2e      	cmp	r2, #46	; 0x2e
    2db2:	bf08      	it	eq
    2db4:	4647      	moveq	r7, r8
    2db6:	e7a7      	b.n	2d08 <z_cbvprintf_impl+0xa50>
		|| (conv->pad0_pre_exp > 0);
    2db8:	2301      	movs	r3, #1
    2dba:	e7d5      	b.n	2d68 <z_cbvprintf_impl+0xab0>
			bpe = bps + 5;
    2dbc:	4f72      	ldr	r7, [pc, #456]	; (2f88 <z_cbvprintf_impl+0xcd0>)
		char sign = 0;
    2dbe:	4681      	mov	r9, r0
			bps = "(nil)";
    2dc0:	1f7e      	subs	r6, r7, #5
		size_t nj_len = (bpe - bps);
    2dc2:	2005      	movs	r0, #5
    2dc4:	e5a0      	b.n	2908 <z_cbvprintf_impl+0x650>
		} else if (conv->altform_0) {
    2dc6:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
    2dc8:	bf48      	it	mi
    2dca:	3001      	addmi	r0, #1
    2dcc:	e5a4      	b.n	2918 <z_cbvprintf_impl+0x660>
					OUTC(pad);
    2dce:	4610      	mov	r0, r2
    2dd0:	9209      	str	r2, [sp, #36]	; 0x24
    2dd2:	9903      	ldr	r1, [sp, #12]
    2dd4:	47d0      	blx	sl
    2dd6:	2800      	cmp	r0, #0
    2dd8:	9a09      	ldr	r2, [sp, #36]	; 0x24
    2dda:	da05      	bge.n	2de8 <z_cbvprintf_impl+0xb30>
#undef OUTS
#undef OUTC
}
    2ddc:	b01f      	add	sp, #124	; 0x7c
    2dde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    2de2:	2220      	movs	r2, #32
					pad = '0';
    2de4:	f8dd b010 	ldr.w	fp, [sp, #16]
				while (width-- > 0) {
    2de8:	4659      	mov	r1, fp
    2dea:	2900      	cmp	r1, #0
    2dec:	f10b 3bff 	add.w	fp, fp, #4294967295
    2df0:	dced      	bgt.n	2dce <z_cbvprintf_impl+0xb16>
    2df2:	9b04      	ldr	r3, [sp, #16]
    2df4:	f8cd b010 	str.w	fp, [sp, #16]
    2df8:	442b      	add	r3, r5
    2dfa:	1a5d      	subs	r5, r3, r1
		if (sign != 0) {
    2dfc:	f1b9 0f00 	cmp.w	r9, #0
    2e00:	d005      	beq.n	2e0e <z_cbvprintf_impl+0xb56>
			OUTC(sign);
    2e02:	9903      	ldr	r1, [sp, #12]
    2e04:	4648      	mov	r0, r9
    2e06:	47d0      	blx	sl
    2e08:	2800      	cmp	r0, #0
    2e0a:	dbe7      	blt.n	2ddc <z_cbvprintf_impl+0xb24>
    2e0c:	3501      	adds	r5, #1
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT) && conv->pad_fp) {
    2e0e:	9b08      	ldr	r3, [sp, #32]
    2e10:	2b00      	cmp	r3, #0
    2e12:	d079      	beq.n	2f08 <z_cbvprintf_impl+0xc50>
			if (conv->specifier_a) {
    2e14:	f99d 3049 	ldrsb.w	r3, [sp, #73]	; 0x49
    2e18:	2b00      	cmp	r3, #0
    2e1a:	db29      	blt.n	2e70 <z_cbvprintf_impl+0xbb8>
				while (isdigit((unsigned char)*cp)) {
    2e1c:	f8df 916c 	ldr.w	r9, [pc, #364]	; 2f8c <z_cbvprintf_impl+0xcd4>
			if (conv->specifier_a) {
    2e20:	4633      	mov	r3, r6
				while (isdigit((unsigned char)*cp)) {
    2e22:	7818      	ldrb	r0, [r3, #0]
    2e24:	f819 2000 	ldrb.w	r2, [r9, r0]
    2e28:	0752      	lsls	r2, r2, #29
    2e2a:	469b      	mov	fp, r3
    2e2c:	f103 0301 	add.w	r3, r3, #1
    2e30:	d43f      	bmi.n	2eb2 <z_cbvprintf_impl+0xbfa>
				if (!conv->pad_postdp) {
    2e32:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    2e36:	1bae      	subs	r6, r5, r6
    2e38:	0698      	lsls	r0, r3, #26
    2e3a:	445e      	add	r6, fp
    2e3c:	d407      	bmi.n	2e4e <z_cbvprintf_impl+0xb96>
					while (pad_len-- > 0) {
    2e3e:	4642      	mov	r2, r8
    2e40:	2a00      	cmp	r2, #0
    2e42:	f108 38ff 	add.w	r8, r8, #4294967295
    2e46:	dc3b      	bgt.n	2ec0 <z_cbvprintf_impl+0xc08>
    2e48:	9b07      	ldr	r3, [sp, #28]
    2e4a:	4433      	add	r3, r6
    2e4c:	1a9e      	subs	r6, r3, r2
				if (*cp == '.') {
    2e4e:	f89b 0000 	ldrb.w	r0, [fp]
    2e52:	282e      	cmp	r0, #46	; 0x2e
    2e54:	d10a      	bne.n	2e6c <z_cbvprintf_impl+0xbb4>
					OUTC(*cp++);
    2e56:	9903      	ldr	r1, [sp, #12]
    2e58:	47d0      	blx	sl
						OUTC('0');
    2e5a:	2800      	cmp	r0, #0
    2e5c:	dbbe      	blt.n	2ddc <z_cbvprintf_impl+0xb24>
					while (pad_len-- > 0) {
    2e5e:	f1b8 0f00 	cmp.w	r8, #0
						OUTC('0');
    2e62:	f106 0601 	add.w	r6, r6, #1
					while (pad_len-- > 0) {
    2e66:	dc31      	bgt.n	2ecc <z_cbvprintf_impl+0xc14>
					OUTC(*cp++);
    2e68:	f10b 0b01 	add.w	fp, fp, #1
			if (conv->specifier_a) {
    2e6c:	465d      	mov	r5, fp
    2e6e:	e038      	b.n	2ee2 <z_cbvprintf_impl+0xc2a>
    2e70:	46b1      	mov	r9, r6
				while (*cp != 'p') {
    2e72:	f899 0000 	ldrb.w	r0, [r9]
    2e76:	2870      	cmp	r0, #112	; 0x70
    2e78:	46c8      	mov	r8, r9
    2e7a:	f109 0901 	add.w	r9, r9, #1
    2e7e:	d113      	bne.n	2ea8 <z_cbvprintf_impl+0xbf0>
    2e80:	1bae      	subs	r6, r5, r6
    2e82:	9d14      	ldr	r5, [sp, #80]	; 0x50
    2e84:	4446      	add	r6, r8
			while (pad_len-- > 0) {
    2e86:	4435      	add	r5, r6
    2e88:	1bab      	subs	r3, r5, r6
    2e8a:	2b00      	cmp	r3, #0
    2e8c:	dc34      	bgt.n	2ef8 <z_cbvprintf_impl+0xc40>
			OUTS(cp, bpe);
    2e8e:	9903      	ldr	r1, [sp, #12]
    2e90:	463b      	mov	r3, r7
    2e92:	4642      	mov	r2, r8
    2e94:	4650      	mov	r0, sl
    2e96:	f006 f97d 	bl	9194 <outs>
    2e9a:	2800      	cmp	r0, #0
    2e9c:	db9e      	blt.n	2ddc <z_cbvprintf_impl+0xb24>
    2e9e:	4430      	add	r0, r6
    2ea0:	9e04      	ldr	r6, [sp, #16]
			while (pad_len-- > 0) {
    2ea2:	4605      	mov	r5, r0
    2ea4:	4406      	add	r6, r0
    2ea6:	e065      	b.n	2f74 <z_cbvprintf_impl+0xcbc>
					OUTC(*cp++);
    2ea8:	9903      	ldr	r1, [sp, #12]
    2eaa:	47d0      	blx	sl
    2eac:	2800      	cmp	r0, #0
    2eae:	dae0      	bge.n	2e72 <z_cbvprintf_impl+0xbba>
    2eb0:	e794      	b.n	2ddc <z_cbvprintf_impl+0xb24>
    2eb2:	9305      	str	r3, [sp, #20]
					OUTC(*cp++);
    2eb4:	9903      	ldr	r1, [sp, #12]
    2eb6:	47d0      	blx	sl
    2eb8:	2800      	cmp	r0, #0
    2eba:	9b05      	ldr	r3, [sp, #20]
    2ebc:	dab1      	bge.n	2e22 <z_cbvprintf_impl+0xb6a>
    2ebe:	e78d      	b.n	2ddc <z_cbvprintf_impl+0xb24>
						OUTC('0');
    2ec0:	9903      	ldr	r1, [sp, #12]
    2ec2:	2030      	movs	r0, #48	; 0x30
    2ec4:	47d0      	blx	sl
    2ec6:	2800      	cmp	r0, #0
    2ec8:	dab9      	bge.n	2e3e <z_cbvprintf_impl+0xb86>
    2eca:	e787      	b.n	2ddc <z_cbvprintf_impl+0xb24>
						OUTC('0');
    2ecc:	9903      	ldr	r1, [sp, #12]
    2ece:	2030      	movs	r0, #48	; 0x30
    2ed0:	47d0      	blx	sl
    2ed2:	f108 38ff 	add.w	r8, r8, #4294967295
    2ed6:	e7c0      	b.n	2e5a <z_cbvprintf_impl+0xba2>
					OUTC(*cp++);
    2ed8:	9903      	ldr	r1, [sp, #12]
    2eda:	47d0      	blx	sl
    2edc:	2800      	cmp	r0, #0
    2ede:	f6ff af7d 	blt.w	2ddc <z_cbvprintf_impl+0xb24>
				while (isdigit((unsigned char)*cp)) {
    2ee2:	7828      	ldrb	r0, [r5, #0]
    2ee4:	f819 3000 	ldrb.w	r3, [r9, r0]
    2ee8:	0759      	lsls	r1, r3, #29
    2eea:	46a8      	mov	r8, r5
    2eec:	f105 0501 	add.w	r5, r5, #1
    2ef0:	d4f2      	bmi.n	2ed8 <z_cbvprintf_impl+0xc20>
    2ef2:	eba6 060b 	sub.w	r6, r6, fp
    2ef6:	e7c4      	b.n	2e82 <z_cbvprintf_impl+0xbca>
				OUTC('0');
    2ef8:	9903      	ldr	r1, [sp, #12]
    2efa:	2030      	movs	r0, #48	; 0x30
    2efc:	47d0      	blx	sl
    2efe:	2800      	cmp	r0, #0
    2f00:	f6ff af6c 	blt.w	2ddc <z_cbvprintf_impl+0xb24>
    2f04:	3601      	adds	r6, #1
    2f06:	e7bf      	b.n	2e88 <z_cbvprintf_impl+0xbd0>
			if (conv->altform_0c | conv->altform_0) {
    2f08:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    2f0c:	06da      	lsls	r2, r3, #27
    2f0e:	d401      	bmi.n	2f14 <z_cbvprintf_impl+0xc5c>
    2f10:	071b      	lsls	r3, r3, #28
    2f12:	d506      	bpl.n	2f22 <z_cbvprintf_impl+0xc6a>
				OUTC('0');
    2f14:	9903      	ldr	r1, [sp, #12]
    2f16:	2030      	movs	r0, #48	; 0x30
    2f18:	47d0      	blx	sl
    2f1a:	2800      	cmp	r0, #0
    2f1c:	f6ff af5e 	blt.w	2ddc <z_cbvprintf_impl+0xb24>
    2f20:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    2f22:	9b05      	ldr	r3, [sp, #20]
    2f24:	b13b      	cbz	r3, 2f36 <z_cbvprintf_impl+0xc7e>
				OUTC(conv->specifier);
    2f26:	9903      	ldr	r1, [sp, #12]
    2f28:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
    2f2c:	47d0      	blx	sl
    2f2e:	2800      	cmp	r0, #0
    2f30:	f6ff af54 	blt.w	2ddc <z_cbvprintf_impl+0xb24>
    2f34:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    2f36:	44a8      	add	r8, r5
    2f38:	e006      	b.n	2f48 <z_cbvprintf_impl+0xc90>
				OUTC('0');
    2f3a:	9903      	ldr	r1, [sp, #12]
    2f3c:	2030      	movs	r0, #48	; 0x30
    2f3e:	47d0      	blx	sl
    2f40:	2800      	cmp	r0, #0
    2f42:	f6ff af4b 	blt.w	2ddc <z_cbvprintf_impl+0xb24>
    2f46:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    2f48:	eba8 0305 	sub.w	r3, r8, r5
    2f4c:	2b00      	cmp	r3, #0
    2f4e:	dcf4      	bgt.n	2f3a <z_cbvprintf_impl+0xc82>
			OUTS(bps, bpe);
    2f50:	9903      	ldr	r1, [sp, #12]
    2f52:	463b      	mov	r3, r7
    2f54:	4632      	mov	r2, r6
    2f56:	4650      	mov	r0, sl
    2f58:	f006 f91c 	bl	9194 <outs>
    2f5c:	2800      	cmp	r0, #0
    2f5e:	f6ff af3d 	blt.w	2ddc <z_cbvprintf_impl+0xb24>
    2f62:	4428      	add	r0, r5
    2f64:	e79c      	b.n	2ea0 <z_cbvprintf_impl+0xbe8>
			OUTC(' ');
    2f66:	9903      	ldr	r1, [sp, #12]
    2f68:	2020      	movs	r0, #32
    2f6a:	47d0      	blx	sl
    2f6c:	2800      	cmp	r0, #0
    2f6e:	f6ff af35 	blt.w	2ddc <z_cbvprintf_impl+0xb24>
    2f72:	3501      	adds	r5, #1
		while (width > 0) {
    2f74:	1b73      	subs	r3, r6, r5
    2f76:	2b00      	cmp	r3, #0
    2f78:	dcf5      	bgt.n	2f66 <z_cbvprintf_impl+0xcae>
    2f7a:	f7ff bbd1 	b.w	2720 <z_cbvprintf_impl+0x468>
			decexp = 0;
    2f7e:	4616      	mov	r6, r2
    2f80:	e6bd      	b.n	2cfe <z_cbvprintf_impl+0xa46>
		if (*buf++ != '0') {
    2f82:	f10d 085d 	add.w	r8, sp, #93	; 0x5d
	while (precision > 0 && digit_count > 0) {
    2f86:	e6ba      	b.n	2cfe <z_cbvprintf_impl+0xa46>
    2f88:	0000a338 	.word	0x0000a338
    2f8c:	0000aa80 	.word	0x0000aa80

00002f90 <__ieee754_pow>:
    2f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2f94:	b091      	sub	sp, #68	; 0x44
    2f96:	ed8d 1b00 	vstr	d1, [sp]
    2f9a:	e9dd 3800 	ldrd	r3, r8, [sp]
    2f9e:	f028 4900 	bic.w	r9, r8, #2147483648	; 0x80000000
    2fa2:	ea59 0203 	orrs.w	r2, r9, r3
    2fa6:	ec57 6b10 	vmov	r6, r7, d0
    2faa:	f000 80a5 	beq.w	30f8 <__ieee754_pow+0x168>
    2fae:	4a88      	ldr	r2, [pc, #544]	; (31d0 <__ieee754_pow+0x240>)
    2fb0:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
    2fb4:	4294      	cmp	r4, r2
    2fb6:	463d      	mov	r5, r7
    2fb8:	46b2      	mov	sl, r6
    2fba:	9402      	str	r4, [sp, #8]
    2fbc:	d819      	bhi.n	2ff2 <__ieee754_pow+0x62>
    2fbe:	d113      	bne.n	2fe8 <__ieee754_pow+0x58>
    2fc0:	b9f6      	cbnz	r6, 3000 <__ieee754_pow+0x70>
    2fc2:	45a1      	cmp	r9, r4
    2fc4:	d81c      	bhi.n	3000 <__ieee754_pow+0x70>
    2fc6:	d121      	bne.n	300c <__ieee754_pow+0x7c>
    2fc8:	b9d3      	cbnz	r3, 3000 <__ieee754_pow+0x70>
    2fca:	4b82      	ldr	r3, [pc, #520]	; (31d4 <__ieee754_pow+0x244>)
    2fcc:	429c      	cmp	r4, r3
    2fce:	f240 8096 	bls.w	30fe <__ieee754_pow+0x16e>
    2fd2:	f1b8 0f00 	cmp.w	r8, #0
    2fd6:	f280 84c6 	bge.w	3966 <__ieee754_pow+0x9d6>
    2fda:	2000      	movs	r0, #0
    2fdc:	2100      	movs	r1, #0
    2fde:	ec41 0b10 	vmov	d0, r0, r1
    2fe2:	b011      	add	sp, #68	; 0x44
    2fe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2fe8:	4591      	cmp	r9, r2
    2fea:	d802      	bhi.n	2ff2 <__ieee754_pow+0x62>
    2fec:	d10e      	bne.n	300c <__ieee754_pow+0x7c>
    2fee:	2b00      	cmp	r3, #0
    2ff0:	d07b      	beq.n	30ea <__ieee754_pow+0x15a>
    2ff2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
    2ff6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
    2ffa:	ea54 040a 	orrs.w	r4, r4, sl
    2ffe:	d07b      	beq.n	30f8 <__ieee754_pow+0x168>
    3000:	4875      	ldr	r0, [pc, #468]	; (31d8 <__ieee754_pow+0x248>)
    3002:	b011      	add	sp, #68	; 0x44
    3004:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3008:	f000 bcee 	b.w	39e8 <nan>
    300c:	2d00      	cmp	r5, #0
    300e:	da08      	bge.n	3022 <__ieee754_pow+0x92>
    3010:	4a72      	ldr	r2, [pc, #456]	; (31dc <__ieee754_pow+0x24c>)
    3012:	4591      	cmp	r9, r2
    3014:	d90b      	bls.n	302e <__ieee754_pow+0x9e>
    3016:	2b00      	cmp	r3, #0
    3018:	f000 80a2 	beq.w	3160 <__ieee754_pow+0x1d0>
    301c:	f04f 0b02 	mov.w	fp, #2
    3020:	e023      	b.n	306a <__ieee754_pow+0xda>
    3022:	2b00      	cmp	r3, #0
    3024:	f000 808b 	beq.w	313e <__ieee754_pow+0x1ae>
    3028:	f04f 0b00 	mov.w	fp, #0
    302c:	e01d      	b.n	306a <__ieee754_pow+0xda>
    302e:	4a69      	ldr	r2, [pc, #420]	; (31d4 <__ieee754_pow+0x244>)
    3030:	4591      	cmp	r9, r2
    3032:	d806      	bhi.n	3042 <__ieee754_pow+0xb2>
    3034:	2b00      	cmp	r3, #0
    3036:	d1f7      	bne.n	3028 <__ieee754_pow+0x98>
    3038:	f1b8 4f80 	cmp.w	r8, #1073741824	; 0x40000000
    303c:	d06b      	beq.n	3116 <__ieee754_pow+0x186>
    303e:	469b      	mov	fp, r3
    3040:	e013      	b.n	306a <__ieee754_pow+0xda>
    3042:	ea4f 5229 	mov.w	r2, r9, asr #20
    3046:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
    304a:	2a14      	cmp	r2, #20
    304c:	dd38      	ble.n	30c0 <__ieee754_pow+0x130>
    304e:	f1c2 0234 	rsb	r2, r2, #52	; 0x34
    3052:	fa23 f102 	lsr.w	r1, r3, r2
    3056:	fa01 f202 	lsl.w	r2, r1, r2
    305a:	429a      	cmp	r2, r3
    305c:	d1ea      	bne.n	3034 <__ieee754_pow+0xa4>
    305e:	f001 0101 	and.w	r1, r1, #1
    3062:	f1c1 0b02 	rsb	fp, r1, #2
    3066:	2b00      	cmp	r3, #0
    3068:	d052      	beq.n	3110 <__ieee754_pow+0x180>
    306a:	ec47 6b10 	vmov	d0, r6, r7
    306e:	f006 fdab 	bl	9bc8 <fabs>
    3072:	ec51 0b10 	vmov	r0, r1, d0
    3076:	f1ba 0f00 	cmp.w	sl, #0
    307a:	d17e      	bne.n	317a <__ieee754_pow+0x1ea>
    307c:	4b58      	ldr	r3, [pc, #352]	; (31e0 <__ieee754_pow+0x250>)
    307e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
    3082:	429a      	cmp	r2, r3
    3084:	d001      	beq.n	308a <__ieee754_pow+0xfa>
    3086:	2c00      	cmp	r4, #0
    3088:	d177      	bne.n	317a <__ieee754_pow+0x1ea>
    308a:	f1b8 0f00 	cmp.w	r8, #0
    308e:	da05      	bge.n	309c <__ieee754_pow+0x10c>
    3090:	4602      	mov	r2, r0
    3092:	460b      	mov	r3, r1
    3094:	2000      	movs	r0, #0
    3096:	4952      	ldr	r1, [pc, #328]	; (31e0 <__ieee754_pow+0x250>)
    3098:	f7fd fb18 	bl	6cc <__aeabi_ddiv>
    309c:	2d00      	cmp	r5, #0
    309e:	da9e      	bge.n	2fde <__ieee754_pow+0x4e>
    30a0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
    30a4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
    30a8:	ea54 040b 	orrs.w	r4, r4, fp
    30ac:	d15d      	bne.n	316a <__ieee754_pow+0x1da>
    30ae:	4602      	mov	r2, r0
    30b0:	460b      	mov	r3, r1
    30b2:	4610      	mov	r0, r2
    30b4:	4619      	mov	r1, r3
    30b6:	f7fd f827 	bl	108 <__aeabi_dsub>
    30ba:	4602      	mov	r2, r0
    30bc:	460b      	mov	r3, r1
    30be:	e03b      	b.n	3138 <__ieee754_pow+0x1a8>
    30c0:	2b00      	cmp	r3, #0
    30c2:	d1b1      	bne.n	3028 <__ieee754_pow+0x98>
    30c4:	f1c2 0214 	rsb	r2, r2, #20
    30c8:	fa49 f102 	asr.w	r1, r9, r2
    30cc:	fa01 f202 	lsl.w	r2, r1, r2
    30d0:	454a      	cmp	r2, r9
    30d2:	4a43      	ldr	r2, [pc, #268]	; (31e0 <__ieee754_pow+0x250>)
    30d4:	d126      	bne.n	3124 <__ieee754_pow+0x194>
    30d6:	4591      	cmp	r9, r2
    30d8:	d026      	beq.n	3128 <__ieee754_pow+0x198>
    30da:	f1b8 4f80 	cmp.w	r8, #1073741824	; 0x40000000
    30de:	d01a      	beq.n	3116 <__ieee754_pow+0x186>
    30e0:	f001 0101 	and.w	r1, r1, #1
    30e4:	f1c1 0b02 	rsb	fp, r1, #2
    30e8:	e7bf      	b.n	306a <__ieee754_pow+0xda>
    30ea:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
    30ee:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
    30f2:	4333      	orrs	r3, r6
    30f4:	f47f af69 	bne.w	2fca <__ieee754_pow+0x3a>
    30f8:	4939      	ldr	r1, [pc, #228]	; (31e0 <__ieee754_pow+0x250>)
    30fa:	2000      	movs	r0, #0
    30fc:	e76f      	b.n	2fde <__ieee754_pow+0x4e>
    30fe:	f1b8 0f00 	cmp.w	r8, #0
    3102:	f6bf af6a 	bge.w	2fda <__ieee754_pow+0x4a>
    3106:	e9dd 0300 	ldrd	r0, r3, [sp]
    310a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
    310e:	e766      	b.n	2fde <__ieee754_pow+0x4e>
    3110:	f1b8 4f80 	cmp.w	r8, #1073741824	; 0x40000000
    3114:	d1a9      	bne.n	306a <__ieee754_pow+0xda>
    3116:	4632      	mov	r2, r6
    3118:	463b      	mov	r3, r7
    311a:	4610      	mov	r0, r2
    311c:	4619      	mov	r1, r3
    311e:	f7fd f9ab 	bl	478 <__aeabi_dmul>
    3122:	e75c      	b.n	2fde <__ieee754_pow+0x4e>
    3124:	4591      	cmp	r9, r2
    3126:	d187      	bne.n	3038 <__ieee754_pow+0xa8>
    3128:	f1b8 0f00 	cmp.w	r8, #0
    312c:	f280 841f 	bge.w	396e <__ieee754_pow+0x9de>
    3130:	492b      	ldr	r1, [pc, #172]	; (31e0 <__ieee754_pow+0x250>)
    3132:	4632      	mov	r2, r6
    3134:	463b      	mov	r3, r7
    3136:	2000      	movs	r0, #0
    3138:	f7fd fac8 	bl	6cc <__aeabi_ddiv>
    313c:	e74f      	b.n	2fde <__ieee754_pow+0x4e>
    313e:	4a28      	ldr	r2, [pc, #160]	; (31e0 <__ieee754_pow+0x250>)
    3140:	4591      	cmp	r9, r2
    3142:	d0f1      	beq.n	3128 <__ieee754_pow+0x198>
    3144:	f1b8 4f80 	cmp.w	r8, #1073741824	; 0x40000000
    3148:	d0e5      	beq.n	3116 <__ieee754_pow+0x186>
    314a:	4a26      	ldr	r2, [pc, #152]	; (31e4 <__ieee754_pow+0x254>)
    314c:	4590      	cmp	r8, r2
    314e:	f47f af76 	bne.w	303e <__ieee754_pow+0xae>
    3152:	ec47 6b10 	vmov	d0, r6, r7
    3156:	b011      	add	sp, #68	; 0x44
    3158:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    315c:	f005 bc6a 	b.w	8a34 <__ieee754_sqrt>
    3160:	f1b8 4f80 	cmp.w	r8, #1073741824	; 0x40000000
    3164:	f47f af5a 	bne.w	301c <__ieee754_pow+0x8c>
    3168:	e7d5      	b.n	3116 <__ieee754_pow+0x186>
    316a:	f1bb 0f01 	cmp.w	fp, #1
    316e:	f47f af36 	bne.w	2fde <__ieee754_pow+0x4e>
    3172:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    3176:	4619      	mov	r1, r3
    3178:	e731      	b.n	2fde <__ieee754_pow+0x4e>
    317a:	0feb      	lsrs	r3, r5, #31
    317c:	3b01      	subs	r3, #1
    317e:	930c      	str	r3, [sp, #48]	; 0x30
    3180:	ea5b 0303 	orrs.w	r3, fp, r3
    3184:	d102      	bne.n	318c <__ieee754_pow+0x1fc>
    3186:	4632      	mov	r2, r6
    3188:	463b      	mov	r3, r7
    318a:	e792      	b.n	30b2 <__ieee754_pow+0x122>
    318c:	4b16      	ldr	r3, [pc, #88]	; (31e8 <__ieee754_pow+0x258>)
    318e:	4599      	cmp	r9, r3
    3190:	f240 80fe 	bls.w	3390 <__ieee754_pow+0x400>
    3194:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
    3198:	4599      	cmp	r9, r3
    319a:	4b0e      	ldr	r3, [pc, #56]	; (31d4 <__ieee754_pow+0x244>)
    319c:	d909      	bls.n	31b2 <__ieee754_pow+0x222>
    319e:	429c      	cmp	r4, r3
    31a0:	d80c      	bhi.n	31bc <__ieee754_pow+0x22c>
    31a2:	f1b8 0f00 	cmp.w	r8, #0
    31a6:	f6bf af18 	bge.w	2fda <__ieee754_pow+0x4a>
    31aa:	a307      	add	r3, pc, #28	; (adr r3, 31c8 <__ieee754_pow+0x238>)
    31ac:	e9d3 2300 	ldrd	r2, r3, [r3]
    31b0:	e7b3      	b.n	311a <__ieee754_pow+0x18a>
    31b2:	429c      	cmp	r4, r3
    31b4:	d3f5      	bcc.n	31a2 <__ieee754_pow+0x212>
    31b6:	4b0a      	ldr	r3, [pc, #40]	; (31e0 <__ieee754_pow+0x250>)
    31b8:	429c      	cmp	r4, r3
    31ba:	d917      	bls.n	31ec <__ieee754_pow+0x25c>
    31bc:	f1b8 0f00 	cmp.w	r8, #0
    31c0:	dcf3      	bgt.n	31aa <__ieee754_pow+0x21a>
    31c2:	e70a      	b.n	2fda <__ieee754_pow+0x4a>
    31c4:	f3af 8000 	nop.w
    31c8:	8800759c 	.word	0x8800759c
    31cc:	7e37e43c 	.word	0x7e37e43c
    31d0:	7ff00000 	.word	0x7ff00000
    31d4:	3fefffff 	.word	0x3fefffff
    31d8:	0000a348 	.word	0x0000a348
    31dc:	433fffff 	.word	0x433fffff
    31e0:	3ff00000 	.word	0x3ff00000
    31e4:	3fe00000 	.word	0x3fe00000
    31e8:	41e00000 	.word	0x41e00000
    31ec:	4b64      	ldr	r3, [pc, #400]	; (3380 <__ieee754_pow+0x3f0>)
    31ee:	2200      	movs	r2, #0
    31f0:	f7fc ff8a 	bl	108 <__aeabi_dsub>
    31f4:	a356      	add	r3, pc, #344	; (adr r3, 3350 <__ieee754_pow+0x3c0>)
    31f6:	e9d3 2300 	ldrd	r2, r3, [r3]
    31fa:	4604      	mov	r4, r0
    31fc:	460d      	mov	r5, r1
    31fe:	f7fd f93b 	bl	478 <__aeabi_dmul>
    3202:	a355      	add	r3, pc, #340	; (adr r3, 3358 <__ieee754_pow+0x3c8>)
    3204:	e9d3 2300 	ldrd	r2, r3, [r3]
    3208:	4606      	mov	r6, r0
    320a:	460f      	mov	r7, r1
    320c:	4620      	mov	r0, r4
    320e:	4629      	mov	r1, r5
    3210:	f7fd f932 	bl	478 <__aeabi_dmul>
    3214:	4b5b      	ldr	r3, [pc, #364]	; (3384 <__ieee754_pow+0x3f4>)
    3216:	e9cd 0102 	strd	r0, r1, [sp, #8]
    321a:	2200      	movs	r2, #0
    321c:	4620      	mov	r0, r4
    321e:	4629      	mov	r1, r5
    3220:	f7fd f92a 	bl	478 <__aeabi_dmul>
    3224:	4602      	mov	r2, r0
    3226:	460b      	mov	r3, r1
    3228:	a14d      	add	r1, pc, #308	; (adr r1, 3360 <__ieee754_pow+0x3d0>)
    322a:	e9d1 0100 	ldrd	r0, r1, [r1]
    322e:	f7fc ff6b 	bl	108 <__aeabi_dsub>
    3232:	4622      	mov	r2, r4
    3234:	462b      	mov	r3, r5
    3236:	f7fd f91f 	bl	478 <__aeabi_dmul>
    323a:	4602      	mov	r2, r0
    323c:	460b      	mov	r3, r1
    323e:	2000      	movs	r0, #0
    3240:	4951      	ldr	r1, [pc, #324]	; (3388 <__ieee754_pow+0x3f8>)
    3242:	f7fc ff61 	bl	108 <__aeabi_dsub>
    3246:	4622      	mov	r2, r4
    3248:	4680      	mov	r8, r0
    324a:	4689      	mov	r9, r1
    324c:	462b      	mov	r3, r5
    324e:	4620      	mov	r0, r4
    3250:	4629      	mov	r1, r5
    3252:	f7fd f911 	bl	478 <__aeabi_dmul>
    3256:	4602      	mov	r2, r0
    3258:	460b      	mov	r3, r1
    325a:	4640      	mov	r0, r8
    325c:	4649      	mov	r1, r9
    325e:	f7fd f90b 	bl	478 <__aeabi_dmul>
    3262:	a341      	add	r3, pc, #260	; (adr r3, 3368 <__ieee754_pow+0x3d8>)
    3264:	e9d3 2300 	ldrd	r2, r3, [r3]
    3268:	f7fd f906 	bl	478 <__aeabi_dmul>
    326c:	4602      	mov	r2, r0
    326e:	460b      	mov	r3, r1
    3270:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    3274:	f7fc ff48 	bl	108 <__aeabi_dsub>
    3278:	4602      	mov	r2, r0
    327a:	460b      	mov	r3, r1
    327c:	4680      	mov	r8, r0
    327e:	4689      	mov	r9, r1
    3280:	4630      	mov	r0, r6
    3282:	4639      	mov	r1, r7
    3284:	f7fc ff42 	bl	10c <__adddf3>
    3288:	2400      	movs	r4, #0
    328a:	4632      	mov	r2, r6
    328c:	463b      	mov	r3, r7
    328e:	4620      	mov	r0, r4
    3290:	460d      	mov	r5, r1
    3292:	f7fc ff39 	bl	108 <__aeabi_dsub>
    3296:	4602      	mov	r2, r0
    3298:	460b      	mov	r3, r1
    329a:	4640      	mov	r0, r8
    329c:	4649      	mov	r1, r9
    329e:	f7fc ff33 	bl	108 <__aeabi_dsub>
    32a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    32a4:	f10b 33ff 	add.w	r3, fp, #4294967295
    32a8:	4313      	orrs	r3, r2
    32aa:	4606      	mov	r6, r0
    32ac:	460f      	mov	r7, r1
    32ae:	f000 822b 	beq.w	3708 <__ieee754_pow+0x778>
    32b2:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 3370 <__ieee754_pow+0x3e0>
    32b6:	e9dd 2300 	ldrd	r2, r3, [sp]
    32ba:	e9cd 2304 	strd	r2, r3, [sp, #16]
    32be:	2300      	movs	r3, #0
    32c0:	9304      	str	r3, [sp, #16]
    32c2:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
    32c6:	e9dd 0100 	ldrd	r0, r1, [sp]
    32ca:	465b      	mov	r3, fp
    32cc:	4652      	mov	r2, sl
    32ce:	ed8d 7b02 	vstr	d7, [sp, #8]
    32d2:	f7fc ff19 	bl	108 <__aeabi_dsub>
    32d6:	4622      	mov	r2, r4
    32d8:	462b      	mov	r3, r5
    32da:	f7fd f8cd 	bl	478 <__aeabi_dmul>
    32de:	e9dd 2300 	ldrd	r2, r3, [sp]
    32e2:	4680      	mov	r8, r0
    32e4:	4689      	mov	r9, r1
    32e6:	4630      	mov	r0, r6
    32e8:	4639      	mov	r1, r7
    32ea:	f7fd f8c5 	bl	478 <__aeabi_dmul>
    32ee:	4602      	mov	r2, r0
    32f0:	460b      	mov	r3, r1
    32f2:	4640      	mov	r0, r8
    32f4:	4649      	mov	r1, r9
    32f6:	f7fc ff09 	bl	10c <__adddf3>
    32fa:	465b      	mov	r3, fp
    32fc:	4606      	mov	r6, r0
    32fe:	460f      	mov	r7, r1
    3300:	4652      	mov	r2, sl
    3302:	4620      	mov	r0, r4
    3304:	4629      	mov	r1, r5
    3306:	f7fd f8b7 	bl	478 <__aeabi_dmul>
    330a:	460b      	mov	r3, r1
    330c:	4602      	mov	r2, r0
    330e:	4680      	mov	r8, r0
    3310:	4689      	mov	r9, r1
    3312:	4630      	mov	r0, r6
    3314:	4639      	mov	r1, r7
    3316:	f7fc fef9 	bl	10c <__adddf3>
    331a:	4b1c      	ldr	r3, [pc, #112]	; (338c <__ieee754_pow+0x3fc>)
    331c:	4299      	cmp	r1, r3
    331e:	4604      	mov	r4, r0
    3320:	460d      	mov	r5, r1
    3322:	468b      	mov	fp, r1
    3324:	f340 820e 	ble.w	3744 <__ieee754_pow+0x7b4>
    3328:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
    332c:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
    3330:	4303      	orrs	r3, r0
    3332:	f000 81ec 	beq.w	370e <__ieee754_pow+0x77e>
    3336:	a310      	add	r3, pc, #64	; (adr r3, 3378 <__ieee754_pow+0x3e8>)
    3338:	e9d3 2300 	ldrd	r2, r3, [r3]
    333c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    3340:	f7fd f89a 	bl	478 <__aeabi_dmul>
    3344:	a30c      	add	r3, pc, #48	; (adr r3, 3378 <__ieee754_pow+0x3e8>)
    3346:	e9d3 2300 	ldrd	r2, r3, [r3]
    334a:	e6e8      	b.n	311e <__ieee754_pow+0x18e>
    334c:	f3af 8000 	nop.w
    3350:	60000000 	.word	0x60000000
    3354:	3ff71547 	.word	0x3ff71547
    3358:	f85ddf44 	.word	0xf85ddf44
    335c:	3e54ae0b 	.word	0x3e54ae0b
    3360:	55555555 	.word	0x55555555
    3364:	3fd55555 	.word	0x3fd55555
    3368:	652b82fe 	.word	0x652b82fe
    336c:	3ff71547 	.word	0x3ff71547
    3370:	00000000 	.word	0x00000000
    3374:	3ff00000 	.word	0x3ff00000
    3378:	8800759c 	.word	0x8800759c
    337c:	7e37e43c 	.word	0x7e37e43c
    3380:	3ff00000 	.word	0x3ff00000
    3384:	3fd00000 	.word	0x3fd00000
    3388:	3fe00000 	.word	0x3fe00000
    338c:	408fffff 	.word	0x408fffff
    3390:	4bd1      	ldr	r3, [pc, #836]	; (36d8 <__ieee754_pow+0x748>)
    3392:	402b      	ands	r3, r5
    3394:	2200      	movs	r2, #0
    3396:	b92b      	cbnz	r3, 33a4 <__ieee754_pow+0x414>
    3398:	4bd0      	ldr	r3, [pc, #832]	; (36dc <__ieee754_pow+0x74c>)
    339a:	f7fd f86d 	bl	478 <__aeabi_dmul>
    339e:	f06f 0234 	mvn.w	r2, #52	; 0x34
    33a2:	9102      	str	r1, [sp, #8]
    33a4:	9b02      	ldr	r3, [sp, #8]
    33a6:	151b      	asrs	r3, r3, #20
    33a8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
    33ac:	4413      	add	r3, r2
    33ae:	9309      	str	r3, [sp, #36]	; 0x24
    33b0:	9b02      	ldr	r3, [sp, #8]
    33b2:	f3c3 0a13 	ubfx	sl, r3, #0, #20
    33b6:	4bca      	ldr	r3, [pc, #808]	; (36e0 <__ieee754_pow+0x750>)
    33b8:	f04a 557f 	orr.w	r5, sl, #1069547520	; 0x3fc00000
    33bc:	459a      	cmp	sl, r3
    33be:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
    33c2:	dd08      	ble.n	33d6 <__ieee754_pow+0x446>
    33c4:	4bc7      	ldr	r3, [pc, #796]	; (36e4 <__ieee754_pow+0x754>)
    33c6:	459a      	cmp	sl, r3
    33c8:	f340 819b 	ble.w	3702 <__ieee754_pow+0x772>
    33cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    33ce:	3301      	adds	r3, #1
    33d0:	9309      	str	r3, [sp, #36]	; 0x24
    33d2:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
    33d6:	f04f 0a00 	mov.w	sl, #0
    33da:	ea4f 03ca 	mov.w	r3, sl, lsl #3
    33de:	930d      	str	r3, [sp, #52]	; 0x34
    33e0:	4bc1      	ldr	r3, [pc, #772]	; (36e8 <__ieee754_pow+0x758>)
    33e2:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
    33e6:	ed93 7b00 	vldr	d7, [r3]
    33ea:	4629      	mov	r1, r5
    33ec:	ec53 2b17 	vmov	r2, r3, d7
    33f0:	ed8d 7b06 	vstr	d7, [sp, #24]
    33f4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
    33f8:	f7fc fe86 	bl	108 <__aeabi_dsub>
    33fc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
    3400:	4606      	mov	r6, r0
    3402:	460f      	mov	r7, r1
    3404:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    3408:	f7fc fe80 	bl	10c <__adddf3>
    340c:	4602      	mov	r2, r0
    340e:	460b      	mov	r3, r1
    3410:	2000      	movs	r0, #0
    3412:	49b6      	ldr	r1, [pc, #728]	; (36ec <__ieee754_pow+0x75c>)
    3414:	f7fd f95a 	bl	6cc <__aeabi_ddiv>
    3418:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
    341c:	4602      	mov	r2, r0
    341e:	460b      	mov	r3, r1
    3420:	4630      	mov	r0, r6
    3422:	4639      	mov	r1, r7
    3424:	f7fd f828 	bl	478 <__aeabi_dmul>
    3428:	e9cd 0104 	strd	r0, r1, [sp, #16]
    342c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
    3430:	e9cd 3402 	strd	r3, r4, [sp, #8]
    3434:	2300      	movs	r3, #0
    3436:	9302      	str	r3, [sp, #8]
    3438:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
    343c:	106d      	asrs	r5, r5, #1
    343e:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
    3442:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
    3446:	2200      	movs	r2, #0
    3448:	eb05 438a 	add.w	r3, r5, sl, lsl #18
    344c:	4640      	mov	r0, r8
    344e:	4649      	mov	r1, r9
    3450:	4614      	mov	r4, r2
    3452:	461d      	mov	r5, r3
    3454:	f7fd f810 	bl	478 <__aeabi_dmul>
    3458:	4602      	mov	r2, r0
    345a:	460b      	mov	r3, r1
    345c:	4630      	mov	r0, r6
    345e:	4639      	mov	r1, r7
    3460:	f7fc fe52 	bl	108 <__aeabi_dsub>
    3464:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    3468:	4606      	mov	r6, r0
    346a:	460f      	mov	r7, r1
    346c:	4620      	mov	r0, r4
    346e:	4629      	mov	r1, r5
    3470:	f7fc fe4a 	bl	108 <__aeabi_dsub>
    3474:	4602      	mov	r2, r0
    3476:	460b      	mov	r3, r1
    3478:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    347c:	f7fc fe44 	bl	108 <__aeabi_dsub>
    3480:	4642      	mov	r2, r8
    3482:	464b      	mov	r3, r9
    3484:	f7fc fff8 	bl	478 <__aeabi_dmul>
    3488:	4602      	mov	r2, r0
    348a:	460b      	mov	r3, r1
    348c:	4630      	mov	r0, r6
    348e:	4639      	mov	r1, r7
    3490:	f7fc fe3a 	bl	108 <__aeabi_dsub>
    3494:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    3498:	f7fc ffee 	bl	478 <__aeabi_dmul>
    349c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    34a0:	e9cd 0106 	strd	r0, r1, [sp, #24]
    34a4:	4610      	mov	r0, r2
    34a6:	4619      	mov	r1, r3
    34a8:	f7fc ffe6 	bl	478 <__aeabi_dmul>
    34ac:	a378      	add	r3, pc, #480	; (adr r3, 3690 <__ieee754_pow+0x700>)
    34ae:	e9d3 2300 	ldrd	r2, r3, [r3]
    34b2:	4604      	mov	r4, r0
    34b4:	460d      	mov	r5, r1
    34b6:	f7fc ffdf 	bl	478 <__aeabi_dmul>
    34ba:	a377      	add	r3, pc, #476	; (adr r3, 3698 <__ieee754_pow+0x708>)
    34bc:	e9d3 2300 	ldrd	r2, r3, [r3]
    34c0:	f7fc fe24 	bl	10c <__adddf3>
    34c4:	4622      	mov	r2, r4
    34c6:	462b      	mov	r3, r5
    34c8:	f7fc ffd6 	bl	478 <__aeabi_dmul>
    34cc:	a374      	add	r3, pc, #464	; (adr r3, 36a0 <__ieee754_pow+0x710>)
    34ce:	e9d3 2300 	ldrd	r2, r3, [r3]
    34d2:	f7fc fe1b 	bl	10c <__adddf3>
    34d6:	4622      	mov	r2, r4
    34d8:	462b      	mov	r3, r5
    34da:	f7fc ffcd 	bl	478 <__aeabi_dmul>
    34de:	a372      	add	r3, pc, #456	; (adr r3, 36a8 <__ieee754_pow+0x718>)
    34e0:	e9d3 2300 	ldrd	r2, r3, [r3]
    34e4:	f7fc fe12 	bl	10c <__adddf3>
    34e8:	4622      	mov	r2, r4
    34ea:	462b      	mov	r3, r5
    34ec:	f7fc ffc4 	bl	478 <__aeabi_dmul>
    34f0:	a36f      	add	r3, pc, #444	; (adr r3, 36b0 <__ieee754_pow+0x720>)
    34f2:	e9d3 2300 	ldrd	r2, r3, [r3]
    34f6:	f7fc fe09 	bl	10c <__adddf3>
    34fa:	4622      	mov	r2, r4
    34fc:	462b      	mov	r3, r5
    34fe:	f7fc ffbb 	bl	478 <__aeabi_dmul>
    3502:	a36d      	add	r3, pc, #436	; (adr r3, 36b8 <__ieee754_pow+0x728>)
    3504:	e9d3 2300 	ldrd	r2, r3, [r3]
    3508:	f7fc fe00 	bl	10c <__adddf3>
    350c:	4622      	mov	r2, r4
    350e:	4606      	mov	r6, r0
    3510:	460f      	mov	r7, r1
    3512:	462b      	mov	r3, r5
    3514:	4620      	mov	r0, r4
    3516:	4629      	mov	r1, r5
    3518:	f7fc ffae 	bl	478 <__aeabi_dmul>
    351c:	4602      	mov	r2, r0
    351e:	460b      	mov	r3, r1
    3520:	4630      	mov	r0, r6
    3522:	4639      	mov	r1, r7
    3524:	f7fc ffa8 	bl	478 <__aeabi_dmul>
    3528:	4642      	mov	r2, r8
    352a:	4604      	mov	r4, r0
    352c:	460d      	mov	r5, r1
    352e:	464b      	mov	r3, r9
    3530:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    3534:	f7fc fdea 	bl	10c <__adddf3>
    3538:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    353c:	f7fc ff9c 	bl	478 <__aeabi_dmul>
    3540:	4622      	mov	r2, r4
    3542:	462b      	mov	r3, r5
    3544:	f7fc fde2 	bl	10c <__adddf3>
    3548:	4642      	mov	r2, r8
    354a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
    354e:	464b      	mov	r3, r9
    3550:	4640      	mov	r0, r8
    3552:	4649      	mov	r1, r9
    3554:	f7fc ff90 	bl	478 <__aeabi_dmul>
    3558:	4b65      	ldr	r3, [pc, #404]	; (36f0 <__ieee754_pow+0x760>)
    355a:	2200      	movs	r2, #0
    355c:	4606      	mov	r6, r0
    355e:	460f      	mov	r7, r1
    3560:	f7fc fdd4 	bl	10c <__adddf3>
    3564:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
    3568:	f7fc fdd0 	bl	10c <__adddf3>
    356c:	2400      	movs	r4, #0
    356e:	460d      	mov	r5, r1
    3570:	4622      	mov	r2, r4
    3572:	460b      	mov	r3, r1
    3574:	4640      	mov	r0, r8
    3576:	4649      	mov	r1, r9
    3578:	f7fc ff7e 	bl	478 <__aeabi_dmul>
    357c:	4b5c      	ldr	r3, [pc, #368]	; (36f0 <__ieee754_pow+0x760>)
    357e:	4680      	mov	r8, r0
    3580:	4689      	mov	r9, r1
    3582:	2200      	movs	r2, #0
    3584:	4620      	mov	r0, r4
    3586:	4629      	mov	r1, r5
    3588:	f7fc fdbe 	bl	108 <__aeabi_dsub>
    358c:	4632      	mov	r2, r6
    358e:	463b      	mov	r3, r7
    3590:	f7fc fdba 	bl	108 <__aeabi_dsub>
    3594:	4602      	mov	r2, r0
    3596:	460b      	mov	r3, r1
    3598:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    359c:	f7fc fdb4 	bl	108 <__aeabi_dsub>
    35a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    35a4:	f7fc ff68 	bl	478 <__aeabi_dmul>
    35a8:	4622      	mov	r2, r4
    35aa:	4606      	mov	r6, r0
    35ac:	460f      	mov	r7, r1
    35ae:	462b      	mov	r3, r5
    35b0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    35b4:	f7fc ff60 	bl	478 <__aeabi_dmul>
    35b8:	4602      	mov	r2, r0
    35ba:	460b      	mov	r3, r1
    35bc:	4630      	mov	r0, r6
    35be:	4639      	mov	r1, r7
    35c0:	f7fc fda4 	bl	10c <__adddf3>
    35c4:	4606      	mov	r6, r0
    35c6:	460f      	mov	r7, r1
    35c8:	4602      	mov	r2, r0
    35ca:	460b      	mov	r3, r1
    35cc:	4640      	mov	r0, r8
    35ce:	4649      	mov	r1, r9
    35d0:	f7fc fd9c 	bl	10c <__adddf3>
    35d4:	2400      	movs	r4, #0
    35d6:	a33a      	add	r3, pc, #232	; (adr r3, 36c0 <__ieee754_pow+0x730>)
    35d8:	e9d3 2300 	ldrd	r2, r3, [r3]
    35dc:	4620      	mov	r0, r4
    35de:	460d      	mov	r5, r1
    35e0:	f7fc ff4a 	bl	478 <__aeabi_dmul>
    35e4:	4642      	mov	r2, r8
    35e6:	e9cd 0104 	strd	r0, r1, [sp, #16]
    35ea:	464b      	mov	r3, r9
    35ec:	4620      	mov	r0, r4
    35ee:	4629      	mov	r1, r5
    35f0:	f7fc fd8a 	bl	108 <__aeabi_dsub>
    35f4:	4602      	mov	r2, r0
    35f6:	460b      	mov	r3, r1
    35f8:	4630      	mov	r0, r6
    35fa:	4639      	mov	r1, r7
    35fc:	f7fc fd84 	bl	108 <__aeabi_dsub>
    3600:	a331      	add	r3, pc, #196	; (adr r3, 36c8 <__ieee754_pow+0x738>)
    3602:	e9d3 2300 	ldrd	r2, r3, [r3]
    3606:	f7fc ff37 	bl	478 <__aeabi_dmul>
    360a:	a331      	add	r3, pc, #196	; (adr r3, 36d0 <__ieee754_pow+0x740>)
    360c:	e9d3 2300 	ldrd	r2, r3, [r3]
    3610:	4606      	mov	r6, r0
    3612:	460f      	mov	r7, r1
    3614:	4620      	mov	r0, r4
    3616:	4629      	mov	r1, r5
    3618:	f7fc ff2e 	bl	478 <__aeabi_dmul>
    361c:	4602      	mov	r2, r0
    361e:	460b      	mov	r3, r1
    3620:	4630      	mov	r0, r6
    3622:	4639      	mov	r1, r7
    3624:	f7fc fd72 	bl	10c <__adddf3>
    3628:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    362a:	4b32      	ldr	r3, [pc, #200]	; (36f4 <__ieee754_pow+0x764>)
    362c:	4413      	add	r3, r2
    362e:	e9d3 2300 	ldrd	r2, r3, [r3]
    3632:	f7fc fd6b 	bl	10c <__adddf3>
    3636:	e9cd 0106 	strd	r0, r1, [sp, #24]
    363a:	9809      	ldr	r0, [sp, #36]	; 0x24
    363c:	f7fc feb2 	bl	3a4 <__aeabi_i2d>
    3640:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    3642:	4b2d      	ldr	r3, [pc, #180]	; (36f8 <__ieee754_pow+0x768>)
    3644:	4413      	add	r3, r2
    3646:	e9d3 8900 	ldrd	r8, r9, [r3]
    364a:	4606      	mov	r6, r0
    364c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    3650:	460f      	mov	r7, r1
    3652:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    3656:	f7fc fd59 	bl	10c <__adddf3>
    365a:	4642      	mov	r2, r8
    365c:	464b      	mov	r3, r9
    365e:	f7fc fd55 	bl	10c <__adddf3>
    3662:	4632      	mov	r2, r6
    3664:	463b      	mov	r3, r7
    3666:	f7fc fd51 	bl	10c <__adddf3>
    366a:	2400      	movs	r4, #0
    366c:	4632      	mov	r2, r6
    366e:	463b      	mov	r3, r7
    3670:	4620      	mov	r0, r4
    3672:	460d      	mov	r5, r1
    3674:	f7fc fd48 	bl	108 <__aeabi_dsub>
    3678:	4642      	mov	r2, r8
    367a:	464b      	mov	r3, r9
    367c:	f7fc fd44 	bl	108 <__aeabi_dsub>
    3680:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    3684:	f7fc fd40 	bl	108 <__aeabi_dsub>
    3688:	4602      	mov	r2, r0
    368a:	460b      	mov	r3, r1
    368c:	e036      	b.n	36fc <__ieee754_pow+0x76c>
    368e:	bf00      	nop
    3690:	4a454eef 	.word	0x4a454eef
    3694:	3fca7e28 	.word	0x3fca7e28
    3698:	93c9db65 	.word	0x93c9db65
    369c:	3fcd864a 	.word	0x3fcd864a
    36a0:	a91d4101 	.word	0xa91d4101
    36a4:	3fd17460 	.word	0x3fd17460
    36a8:	518f264d 	.word	0x518f264d
    36ac:	3fd55555 	.word	0x3fd55555
    36b0:	db6fabff 	.word	0xdb6fabff
    36b4:	3fdb6db6 	.word	0x3fdb6db6
    36b8:	33333303 	.word	0x33333303
    36bc:	3fe33333 	.word	0x3fe33333
    36c0:	e0000000 	.word	0xe0000000
    36c4:	3feec709 	.word	0x3feec709
    36c8:	dc3a03fd 	.word	0xdc3a03fd
    36cc:	3feec709 	.word	0x3feec709
    36d0:	145b01f5 	.word	0x145b01f5
    36d4:	be3e2fe0 	.word	0xbe3e2fe0
    36d8:	7ff00000 	.word	0x7ff00000
    36dc:	43400000 	.word	0x43400000
    36e0:	0003988e 	.word	0x0003988e
    36e4:	000bb679 	.word	0x000bb679
    36e8:	00009f38 	.word	0x00009f38
    36ec:	3ff00000 	.word	0x3ff00000
    36f0:	40080000 	.word	0x40080000
    36f4:	00009f18 	.word	0x00009f18
    36f8:	00009f28 	.word	0x00009f28
    36fc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    3700:	e5cd      	b.n	329e <__ieee754_pow+0x30e>
    3702:	f04f 0a01 	mov.w	sl, #1
    3706:	e668      	b.n	33da <__ieee754_pow+0x44a>
    3708:	ed9f 7b9b 	vldr	d7, [pc, #620]	; 3978 <__ieee754_pow+0x9e8>
    370c:	e5d3      	b.n	32b6 <__ieee754_pow+0x326>
    370e:	a3b3      	add	r3, pc, #716	; (adr r3, 39dc <__ieee754_pow+0xa4c>)
    3710:	e9d3 2300 	ldrd	r2, r3, [r3]
    3714:	4630      	mov	r0, r6
    3716:	4639      	mov	r1, r7
    3718:	f7fc fcf8 	bl	10c <__adddf3>
    371c:	4642      	mov	r2, r8
    371e:	e9cd 0100 	strd	r0, r1, [sp]
    3722:	464b      	mov	r3, r9
    3724:	4620      	mov	r0, r4
    3726:	4629      	mov	r1, r5
    3728:	f7fc fcee 	bl	108 <__aeabi_dsub>
    372c:	4602      	mov	r2, r0
    372e:	460b      	mov	r3, r1
    3730:	e9dd 0100 	ldrd	r0, r1, [sp]
    3734:	f7fd f930 	bl	998 <__aeabi_dcmpgt>
    3738:	2800      	cmp	r0, #0
    373a:	f47f adfc 	bne.w	3336 <__ieee754_pow+0x3a6>
    373e:	f240 4309 	movw	r3, #1033	; 0x409
    3742:	e023      	b.n	378c <__ieee754_pow+0x7fc>
    3744:	4ca0      	ldr	r4, [pc, #640]	; (39c8 <__ieee754_pow+0xa38>)
    3746:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
    374a:	42a3      	cmp	r3, r4
    374c:	d919      	bls.n	3782 <__ieee754_pow+0x7f2>
    374e:	4b9f      	ldr	r3, [pc, #636]	; (39cc <__ieee754_pow+0xa3c>)
    3750:	440b      	add	r3, r1
    3752:	4303      	orrs	r3, r0
    3754:	d00a      	beq.n	376c <__ieee754_pow+0x7dc>
    3756:	a38a      	add	r3, pc, #552	; (adr r3, 3980 <__ieee754_pow+0x9f0>)
    3758:	e9d3 2300 	ldrd	r2, r3, [r3]
    375c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    3760:	f7fc fe8a 	bl	478 <__aeabi_dmul>
    3764:	a386      	add	r3, pc, #536	; (adr r3, 3980 <__ieee754_pow+0x9f0>)
    3766:	e9d3 2300 	ldrd	r2, r3, [r3]
    376a:	e4d8      	b.n	311e <__ieee754_pow+0x18e>
    376c:	4642      	mov	r2, r8
    376e:	464b      	mov	r3, r9
    3770:	f7fc fcca 	bl	108 <__aeabi_dsub>
    3774:	4632      	mov	r2, r6
    3776:	463b      	mov	r3, r7
    3778:	f7fd f904 	bl	984 <__aeabi_dcmpge>
    377c:	2800      	cmp	r0, #0
    377e:	d0de      	beq.n	373e <__ieee754_pow+0x7ae>
    3780:	e7e9      	b.n	3756 <__ieee754_pow+0x7c6>
    3782:	4a93      	ldr	r2, [pc, #588]	; (39d0 <__ieee754_pow+0xa40>)
    3784:	4293      	cmp	r3, r2
    3786:	f240 80e7 	bls.w	3958 <__ieee754_pow+0x9c8>
    378a:	151b      	asrs	r3, r3, #20
    378c:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
    3790:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
    3794:	fa4a fa03 	asr.w	sl, sl, r3
    3798:	44da      	add	sl, fp
    379a:	f3ca 510a 	ubfx	r1, sl, #20, #11
    379e:	488d      	ldr	r0, [pc, #564]	; (39d4 <__ieee754_pow+0xa44>)
    37a0:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
    37a4:	4108      	asrs	r0, r1
    37a6:	ea00 030a 	and.w	r3, r0, sl
    37aa:	f3ca 0a13 	ubfx	sl, sl, #0, #20
    37ae:	f1c1 0114 	rsb	r1, r1, #20
    37b2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
    37b6:	fa4a fa01 	asr.w	sl, sl, r1
    37ba:	f1bb 0f00 	cmp.w	fp, #0
    37be:	4640      	mov	r0, r8
    37c0:	4649      	mov	r1, r9
    37c2:	f04f 0200 	mov.w	r2, #0
    37c6:	bfb8      	it	lt
    37c8:	f1ca 0a00 	rsblt	sl, sl, #0
    37cc:	f7fc fc9c 	bl	108 <__aeabi_dsub>
    37d0:	4680      	mov	r8, r0
    37d2:	4689      	mov	r9, r1
    37d4:	4632      	mov	r2, r6
    37d6:	463b      	mov	r3, r7
    37d8:	4640      	mov	r0, r8
    37da:	4649      	mov	r1, r9
    37dc:	f7fc fc96 	bl	10c <__adddf3>
    37e0:	2400      	movs	r4, #0
    37e2:	a369      	add	r3, pc, #420	; (adr r3, 3988 <__ieee754_pow+0x9f8>)
    37e4:	e9d3 2300 	ldrd	r2, r3, [r3]
    37e8:	4620      	mov	r0, r4
    37ea:	460d      	mov	r5, r1
    37ec:	f7fc fe44 	bl	478 <__aeabi_dmul>
    37f0:	4642      	mov	r2, r8
    37f2:	e9cd 0100 	strd	r0, r1, [sp]
    37f6:	464b      	mov	r3, r9
    37f8:	4620      	mov	r0, r4
    37fa:	4629      	mov	r1, r5
    37fc:	f7fc fc84 	bl	108 <__aeabi_dsub>
    3800:	4602      	mov	r2, r0
    3802:	460b      	mov	r3, r1
    3804:	4630      	mov	r0, r6
    3806:	4639      	mov	r1, r7
    3808:	f7fc fc7e 	bl	108 <__aeabi_dsub>
    380c:	a360      	add	r3, pc, #384	; (adr r3, 3990 <__ieee754_pow+0xa00>)
    380e:	e9d3 2300 	ldrd	r2, r3, [r3]
    3812:	f7fc fe31 	bl	478 <__aeabi_dmul>
    3816:	a360      	add	r3, pc, #384	; (adr r3, 3998 <__ieee754_pow+0xa08>)
    3818:	e9d3 2300 	ldrd	r2, r3, [r3]
    381c:	4680      	mov	r8, r0
    381e:	4689      	mov	r9, r1
    3820:	4620      	mov	r0, r4
    3822:	4629      	mov	r1, r5
    3824:	f7fc fe28 	bl	478 <__aeabi_dmul>
    3828:	4602      	mov	r2, r0
    382a:	460b      	mov	r3, r1
    382c:	4640      	mov	r0, r8
    382e:	4649      	mov	r1, r9
    3830:	f7fc fc6c 	bl	10c <__adddf3>
    3834:	4604      	mov	r4, r0
    3836:	460d      	mov	r5, r1
    3838:	4602      	mov	r2, r0
    383a:	460b      	mov	r3, r1
    383c:	e9dd 0100 	ldrd	r0, r1, [sp]
    3840:	f7fc fc64 	bl	10c <__adddf3>
    3844:	e9dd 2300 	ldrd	r2, r3, [sp]
    3848:	4680      	mov	r8, r0
    384a:	4689      	mov	r9, r1
    384c:	f7fc fc5c 	bl	108 <__aeabi_dsub>
    3850:	4602      	mov	r2, r0
    3852:	460b      	mov	r3, r1
    3854:	4620      	mov	r0, r4
    3856:	4629      	mov	r1, r5
    3858:	f7fc fc56 	bl	108 <__aeabi_dsub>
    385c:	4642      	mov	r2, r8
    385e:	4606      	mov	r6, r0
    3860:	460f      	mov	r7, r1
    3862:	464b      	mov	r3, r9
    3864:	4640      	mov	r0, r8
    3866:	4649      	mov	r1, r9
    3868:	f7fc fe06 	bl	478 <__aeabi_dmul>
    386c:	a34c      	add	r3, pc, #304	; (adr r3, 39a0 <__ieee754_pow+0xa10>)
    386e:	e9d3 2300 	ldrd	r2, r3, [r3]
    3872:	4604      	mov	r4, r0
    3874:	460d      	mov	r5, r1
    3876:	f7fc fdff 	bl	478 <__aeabi_dmul>
    387a:	a34b      	add	r3, pc, #300	; (adr r3, 39a8 <__ieee754_pow+0xa18>)
    387c:	e9d3 2300 	ldrd	r2, r3, [r3]
    3880:	f7fc fc42 	bl	108 <__aeabi_dsub>
    3884:	4622      	mov	r2, r4
    3886:	462b      	mov	r3, r5
    3888:	f7fc fdf6 	bl	478 <__aeabi_dmul>
    388c:	a348      	add	r3, pc, #288	; (adr r3, 39b0 <__ieee754_pow+0xa20>)
    388e:	e9d3 2300 	ldrd	r2, r3, [r3]
    3892:	f7fc fc3b 	bl	10c <__adddf3>
    3896:	4622      	mov	r2, r4
    3898:	462b      	mov	r3, r5
    389a:	f7fc fded 	bl	478 <__aeabi_dmul>
    389e:	a346      	add	r3, pc, #280	; (adr r3, 39b8 <__ieee754_pow+0xa28>)
    38a0:	e9d3 2300 	ldrd	r2, r3, [r3]
    38a4:	f7fc fc30 	bl	108 <__aeabi_dsub>
    38a8:	4622      	mov	r2, r4
    38aa:	462b      	mov	r3, r5
    38ac:	f7fc fde4 	bl	478 <__aeabi_dmul>
    38b0:	a343      	add	r3, pc, #268	; (adr r3, 39c0 <__ieee754_pow+0xa30>)
    38b2:	e9d3 2300 	ldrd	r2, r3, [r3]
    38b6:	f7fc fc29 	bl	10c <__adddf3>
    38ba:	4622      	mov	r2, r4
    38bc:	462b      	mov	r3, r5
    38be:	f7fc fddb 	bl	478 <__aeabi_dmul>
    38c2:	4602      	mov	r2, r0
    38c4:	460b      	mov	r3, r1
    38c6:	4640      	mov	r0, r8
    38c8:	4649      	mov	r1, r9
    38ca:	f7fc fc1d 	bl	108 <__aeabi_dsub>
    38ce:	4604      	mov	r4, r0
    38d0:	460d      	mov	r5, r1
    38d2:	4602      	mov	r2, r0
    38d4:	460b      	mov	r3, r1
    38d6:	4640      	mov	r0, r8
    38d8:	4649      	mov	r1, r9
    38da:	f7fc fdcd 	bl	478 <__aeabi_dmul>
    38de:	2200      	movs	r2, #0
    38e0:	e9cd 0100 	strd	r0, r1, [sp]
    38e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    38e8:	4620      	mov	r0, r4
    38ea:	4629      	mov	r1, r5
    38ec:	f7fc fc0c 	bl	108 <__aeabi_dsub>
    38f0:	4602      	mov	r2, r0
    38f2:	460b      	mov	r3, r1
    38f4:	e9dd 0100 	ldrd	r0, r1, [sp]
    38f8:	f7fc fee8 	bl	6cc <__aeabi_ddiv>
    38fc:	4632      	mov	r2, r6
    38fe:	4604      	mov	r4, r0
    3900:	460d      	mov	r5, r1
    3902:	463b      	mov	r3, r7
    3904:	4640      	mov	r0, r8
    3906:	4649      	mov	r1, r9
    3908:	f7fc fdb6 	bl	478 <__aeabi_dmul>
    390c:	4632      	mov	r2, r6
    390e:	463b      	mov	r3, r7
    3910:	f7fc fbfc 	bl	10c <__adddf3>
    3914:	4602      	mov	r2, r0
    3916:	460b      	mov	r3, r1
    3918:	4620      	mov	r0, r4
    391a:	4629      	mov	r1, r5
    391c:	f7fc fbf4 	bl	108 <__aeabi_dsub>
    3920:	4642      	mov	r2, r8
    3922:	464b      	mov	r3, r9
    3924:	f7fc fbf0 	bl	108 <__aeabi_dsub>
    3928:	460b      	mov	r3, r1
    392a:	4602      	mov	r2, r0
    392c:	492a      	ldr	r1, [pc, #168]	; (39d8 <__ieee754_pow+0xa48>)
    392e:	2000      	movs	r0, #0
    3930:	f7fc fbea 	bl	108 <__aeabi_dsub>
    3934:	ec41 0b10 	vmov	d0, r0, r1
    3938:	ee10 3a90 	vmov	r3, s1
    393c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
    3940:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    3944:	da0b      	bge.n	395e <__ieee754_pow+0x9ce>
    3946:	4650      	mov	r0, sl
    3948:	f000 f856 	bl	39f8 <scalbn>
    394c:	ec51 0b10 	vmov	r0, r1, d0
    3950:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    3954:	f7ff bbe3 	b.w	311e <__ieee754_pow+0x18e>
    3958:	f8dd a010 	ldr.w	sl, [sp, #16]
    395c:	e73a      	b.n	37d4 <__ieee754_pow+0x844>
    395e:	ec51 0b10 	vmov	r0, r1, d0
    3962:	4619      	mov	r1, r3
    3964:	e7f4      	b.n	3950 <__ieee754_pow+0x9c0>
    3966:	e9dd 0100 	ldrd	r0, r1, [sp]
    396a:	f7ff bb38 	b.w	2fde <__ieee754_pow+0x4e>
    396e:	4630      	mov	r0, r6
    3970:	4639      	mov	r1, r7
    3972:	f7ff bb34 	b.w	2fde <__ieee754_pow+0x4e>
    3976:	bf00      	nop
    3978:	00000000 	.word	0x00000000
    397c:	bff00000 	.word	0xbff00000
    3980:	c2f8f359 	.word	0xc2f8f359
    3984:	01a56e1f 	.word	0x01a56e1f
    3988:	00000000 	.word	0x00000000
    398c:	3fe62e43 	.word	0x3fe62e43
    3990:	fefa39ef 	.word	0xfefa39ef
    3994:	3fe62e42 	.word	0x3fe62e42
    3998:	0ca86c39 	.word	0x0ca86c39
    399c:	be205c61 	.word	0xbe205c61
    39a0:	72bea4d0 	.word	0x72bea4d0
    39a4:	3e663769 	.word	0x3e663769
    39a8:	c5d26bf1 	.word	0xc5d26bf1
    39ac:	3ebbbd41 	.word	0x3ebbbd41
    39b0:	af25de2c 	.word	0xaf25de2c
    39b4:	3f11566a 	.word	0x3f11566a
    39b8:	16bebd93 	.word	0x16bebd93
    39bc:	3f66c16c 	.word	0x3f66c16c
    39c0:	5555553e 	.word	0x5555553e
    39c4:	3fc55555 	.word	0x3fc55555
    39c8:	4090cbff 	.word	0x4090cbff
    39cc:	3f6f3400 	.word	0x3f6f3400
    39d0:	3fe00000 	.word	0x3fe00000
    39d4:	fff00000 	.word	0xfff00000
    39d8:	3ff00000 	.word	0x3ff00000
    39dc:	652b82fe 	.word	0x652b82fe
    39e0:	3c971547 	.word	0x3c971547
    39e4:	00000000 	.word	0x00000000

000039e8 <nan>:
    39e8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 39f0 <nan+0x8>
    39ec:	4770      	bx	lr
    39ee:	bf00      	nop
    39f0:	00000000 	.word	0x00000000
    39f4:	7ff80000 	.word	0x7ff80000

000039f8 <scalbn>:
    39f8:	b570      	push	{r4, r5, r6, lr}
    39fa:	ec55 4b10 	vmov	r4, r5, d0
    39fe:	f3c5 520a 	ubfx	r2, r5, #20, #11
    3a02:	4606      	mov	r6, r0
    3a04:	462b      	mov	r3, r5
    3a06:	b992      	cbnz	r2, 3a2e <scalbn+0x36>
    3a08:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
    3a0c:	4323      	orrs	r3, r4
    3a0e:	d039      	beq.n	3a84 <scalbn+0x8c>
    3a10:	4b33      	ldr	r3, [pc, #204]	; (3ae0 <scalbn+0xe8>)
    3a12:	4620      	mov	r0, r4
    3a14:	4629      	mov	r1, r5
    3a16:	2200      	movs	r2, #0
    3a18:	f7fc fd2e 	bl	478 <__aeabi_dmul>
    3a1c:	4b31      	ldr	r3, [pc, #196]	; (3ae4 <scalbn+0xec>)
    3a1e:	429e      	cmp	r6, r3
    3a20:	4604      	mov	r4, r0
    3a22:	460d      	mov	r5, r1
    3a24:	da0f      	bge.n	3a46 <scalbn+0x4e>
    3a26:	a326      	add	r3, pc, #152	; (adr r3, 3ac0 <scalbn+0xc8>)
    3a28:	e9d3 2300 	ldrd	r2, r3, [r3]
    3a2c:	e01f      	b.n	3a6e <scalbn+0x76>
    3a2e:	f240 71ff 	movw	r1, #2047	; 0x7ff
    3a32:	428a      	cmp	r2, r1
    3a34:	d10b      	bne.n	3a4e <scalbn+0x56>
    3a36:	4622      	mov	r2, r4
    3a38:	4620      	mov	r0, r4
    3a3a:	4629      	mov	r1, r5
    3a3c:	f7fc fb66 	bl	10c <__adddf3>
    3a40:	4604      	mov	r4, r0
    3a42:	460d      	mov	r5, r1
    3a44:	e01e      	b.n	3a84 <scalbn+0x8c>
    3a46:	f3c1 520a 	ubfx	r2, r1, #20, #11
    3a4a:	460b      	mov	r3, r1
    3a4c:	3a36      	subs	r2, #54	; 0x36
    3a4e:	4432      	add	r2, r6
    3a50:	f240 71fe 	movw	r1, #2046	; 0x7fe
    3a54:	428a      	cmp	r2, r1
    3a56:	dd0d      	ble.n	3a74 <scalbn+0x7c>
    3a58:	2d00      	cmp	r5, #0
    3a5a:	a11b      	add	r1, pc, #108	; (adr r1, 3ac8 <scalbn+0xd0>)
    3a5c:	e9d1 0100 	ldrd	r0, r1, [r1]
    3a60:	da02      	bge.n	3a68 <scalbn+0x70>
    3a62:	a11b      	add	r1, pc, #108	; (adr r1, 3ad0 <scalbn+0xd8>)
    3a64:	e9d1 0100 	ldrd	r0, r1, [r1]
    3a68:	a317      	add	r3, pc, #92	; (adr r3, 3ac8 <scalbn+0xd0>)
    3a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
    3a6e:	f7fc fd03 	bl	478 <__aeabi_dmul>
    3a72:	e7e5      	b.n	3a40 <scalbn+0x48>
    3a74:	2a00      	cmp	r2, #0
    3a76:	dd08      	ble.n	3a8a <scalbn+0x92>
    3a78:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
    3a7c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
    3a80:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
    3a84:	ec45 4b10 	vmov	d0, r4, r5
    3a88:	bd70      	pop	{r4, r5, r6, pc}
    3a8a:	f112 0f35 	cmn.w	r2, #53	; 0x35
    3a8e:	da08      	bge.n	3aa2 <scalbn+0xaa>
    3a90:	2d00      	cmp	r5, #0
    3a92:	a10b      	add	r1, pc, #44	; (adr r1, 3ac0 <scalbn+0xc8>)
    3a94:	e9d1 0100 	ldrd	r0, r1, [r1]
    3a98:	dac5      	bge.n	3a26 <scalbn+0x2e>
    3a9a:	a10f      	add	r1, pc, #60	; (adr r1, 3ad8 <scalbn+0xe0>)
    3a9c:	e9d1 0100 	ldrd	r0, r1, [r1]
    3aa0:	e7c1      	b.n	3a26 <scalbn+0x2e>
    3aa2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
    3aa6:	3236      	adds	r2, #54	; 0x36
    3aa8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
    3aac:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
    3ab0:	4620      	mov	r0, r4
    3ab2:	4b0d      	ldr	r3, [pc, #52]	; (3ae8 <scalbn+0xf0>)
    3ab4:	4629      	mov	r1, r5
    3ab6:	2200      	movs	r2, #0
    3ab8:	e7d9      	b.n	3a6e <scalbn+0x76>
    3aba:	bf00      	nop
    3abc:	f3af 8000 	nop.w
    3ac0:	c2f8f359 	.word	0xc2f8f359
    3ac4:	01a56e1f 	.word	0x01a56e1f
    3ac8:	8800759c 	.word	0x8800759c
    3acc:	7e37e43c 	.word	0x7e37e43c
    3ad0:	8800759c 	.word	0x8800759c
    3ad4:	fe37e43c 	.word	0xfe37e43c
    3ad8:	c2f8f359 	.word	0xc2f8f359
    3adc:	81a56e1f 	.word	0x81a56e1f
    3ae0:	43500000 	.word	0x43500000
    3ae4:	ffff3cb0 	.word	0xffff3cb0
    3ae8:	3c900000 	.word	0x3c900000

00003aec <MLX90640_I2CRead>:

    return 0;
}

int MLX90640_I2CRead(uint8_t slaveAddr, uint16_t startAddress, uint16_t nMemAddressRead, uint16_t *data)
{                          
    3aec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3af0:	f2ad 6db4 	subw	sp, sp, #1716	; 0x6b4
    int ack = 0;                               
    int cnt = 0;
    int i = 0;
    char cmd[2] = {0,0};
    char i2cData[1664] = {0};
    3af4:	f04f 0800 	mov.w	r8, #0
{                          
    3af8:	4681      	mov	r9, r0
    3afa:	460d      	mov	r5, r1
    3afc:	4614      	mov	r4, r2
    char i2cData[1664] = {0};
    3afe:	4641      	mov	r1, r8
    3b00:	f240 627c 	movw	r2, #1660	; 0x67c
    3b04:	a80d      	add	r0, sp, #52	; 0x34
{                          
    3b06:	461f      	mov	r7, r3
    char i2cData[1664] = {0};
    3b08:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
    3b0c:	f006 f87d 	bl	9c0a <memset>
    uint16_t *p;

    p = data;
    cmd[0] = startAddress >> 8;
    3b10:	ab05      	add	r3, sp, #20
    char i2cData[1664] = {0};
    3b12:	ae0c      	add	r6, sp, #48	; 0x30
    cmd[0] = startAddress >> 8;
    3b14:	ba6d      	rev16	r5, r5
				 const void *write_buf, size_t num_write,
				 void *read_buf, size_t num_read)
{
	struct i2c_msg msg[2];

	msg[0].buf = (uint8_t *)write_buf;
    3b16:	9306      	str	r3, [sp, #24]
	msg[0].len = num_write;
    3b18:	2202      	movs	r2, #2
    cmd[1] = startAddress & 0x00FF;

    ack = i2c_write_read(i2c_dev, slaveAddr, cmd, 2, i2cData, 2*nMemAddressRead);
    3b1a:	0064      	lsls	r4, r4, #1
	msg[0].flags = I2C_MSG_WRITE;

	msg[1].buf = (uint8_t *)read_buf;
	msg[1].len = num_read;
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    3b1c:	2307      	movs	r3, #7
    cmd[0] = startAddress >> 8;
    3b1e:	f8ad 5014 	strh.w	r5, [sp, #20]
	msg[0].len = num_write;
    3b22:	9207      	str	r2, [sp, #28]
	msg[0].flags = I2C_MSG_WRITE;
    3b24:	f88d 8020 	strb.w	r8, [sp, #32]
	msg[1].buf = (uint8_t *)read_buf;
    3b28:	9609      	str	r6, [sp, #36]	; 0x24
	msg[1].len = num_read;
    3b2a:	940a      	str	r4, [sp, #40]	; 0x28
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    3b2c:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	int res =  api->transfer(dev, msgs, num_msgs, addr);
    3b30:	4813      	ldr	r0, [pc, #76]	; (3b80 <MLX90640_I2CRead+0x94>)
    3b32:	6883      	ldr	r3, [r0, #8]
    3b34:	a906      	add	r1, sp, #24
    3b36:	689d      	ldr	r5, [r3, #8]
    3b38:	464b      	mov	r3, r9
    3b3a:	47a8      	blx	r5

    if (ack != 0x00)
    3b3c:	b970      	cbnz	r0, 3b5c <MLX90640_I2CRead+0x70>
    3b3e:	4632      	mov	r2, r6
    3b40:	443c      	add	r4, r7
    {
        LOG_ERR("Error reading from MLX90640 over I2C");
        return -1;
    }

    for(cnt=0; cnt < nMemAddressRead; cnt++)    // this just turns uint8_t[2*nMemAddressRead] into uint16_t[nMemAddressRead]
    3b42:	42a7      	cmp	r7, r4
    3b44:	f102 0202 	add.w	r2, r2, #2
    3b48:	d015      	beq.n	3b76 <MLX90640_I2CRead+0x8a>
    {
        i = cnt << 1;
        *p++ = (uint16_t)i2cData[i]*256 + (uint16_t)i2cData[i+1];
    3b4a:	f812 1c02 	ldrb.w	r1, [r2, #-2]
    3b4e:	f812 3c01 	ldrb.w	r3, [r2, #-1]
    3b52:	eb03 2301 	add.w	r3, r3, r1, lsl #8
    3b56:	f827 3b02 	strh.w	r3, [r7], #2
    for(cnt=0; cnt < nMemAddressRead; cnt++)    // this just turns uint8_t[2*nMemAddressRead] into uint16_t[nMemAddressRead]
    3b5a:	e7f2      	b.n	3b42 <MLX90640_I2CRead+0x56>
        LOG_ERR("Error reading from MLX90640 over I2C");
    3b5c:	4b09      	ldr	r3, [pc, #36]	; (3b84 <MLX90640_I2CRead+0x98>)
    3b5e:	490a      	ldr	r1, [pc, #40]	; (3b88 <MLX90640_I2CRead+0x9c>)
    3b60:	f8cd 8000 	str.w	r8, [sp]
    3b64:	e9cd 8301 	strd	r8, r3, [sp, #4]
    3b68:	4640      	mov	r0, r8
    3b6a:	4643      	mov	r3, r8
    3b6c:	2201      	movs	r2, #1
    3b6e:	f005 f8a5 	bl	8cbc <z_log_msg_runtime_create.constprop.0>
        return -1;
    3b72:	f04f 30ff 	mov.w	r0, #4294967295
    }

    return 0;   
} 
    3b76:	f20d 6db4 	addw	sp, sp, #1716	; 0x6b4
    3b7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    3b7e:	bf00      	nop
    3b80:	00009cd4 	.word	0x00009cd4
    3b84:	0000a0ec 	.word	0x0000a0ec
    3b88:	00009ef4 	.word	0x00009ef4

00003b8c <MLX90640_I2CWrite>:

int MLX90640_I2CWrite(uint8_t slaveAddr, uint16_t writeAddress, uint16_t data)
{
    3b8c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    int ack = 0;
    char cmd[4] = {0,0,0,0};
    static uint16_t dataCheck;

    cmd[0] = writeAddress >> 8;
    3b90:	ba4b      	rev16	r3, r1
    3b92:	f8ad 3000 	strh.w	r3, [sp]
    cmd[1] = writeAddress & 0x00FF;
    cmd[2] = data >> 8;
    3b96:	ba53      	rev16	r3, r2
    3b98:	f8ad 3002 	strh.w	r3, [sp, #2]
	msg.len = num_bytes;
    3b9c:	2304      	movs	r3, #4
    3b9e:	9302      	str	r3, [sp, #8]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
    3ba0:	2302      	movs	r3, #2
{
    3ba2:	4606      	mov	r6, r0
    3ba4:	460f      	mov	r7, r1
    3ba6:	4615      	mov	r5, r2
	msg.buf = (uint8_t *)buf;
    3ba8:	f8cd d004 	str.w	sp, [sp, #4]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
    3bac:	f88d 300c 	strb.w	r3, [sp, #12]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
    3bb0:	480e      	ldr	r0, [pc, #56]	; (3bec <MLX90640_I2CWrite+0x60>)
    3bb2:	6883      	ldr	r3, [r0, #8]
    3bb4:	2201      	movs	r2, #1
    3bb6:	689c      	ldr	r4, [r3, #8]
    3bb8:	a901      	add	r1, sp, #4
    3bba:	4633      	mov	r3, r6
    3bbc:	47a0      	blx	r4

    //k_sleep(K_USEC(5));

    ack = i2c_write(i2c_dev, cmd, 4, slaveAddr);

    if (ack != 0x00)
    3bbe:	4604      	mov	r4, r0
    3bc0:	b988      	cbnz	r0, 3be6 <MLX90640_I2CWrite+0x5a>
    {
        //LOG_ERR("Error writing to MLX90640 over I2C");
        return -1;
    }         

    MLX90640_I2CRead(slaveAddr, writeAddress, 1, &dataCheck);
    3bc2:	f8df 802c 	ldr.w	r8, [pc, #44]	; 3bf0 <MLX90640_I2CWrite+0x64>
    3bc6:	2201      	movs	r2, #1
    3bc8:	4643      	mov	r3, r8
    3bca:	4639      	mov	r1, r7
    3bcc:	4630      	mov	r0, r6
    3bce:	f7ff ff8d 	bl	3aec <MLX90640_I2CRead>

    if (dataCheck != data)
    3bd2:	f8b8 3000 	ldrh.w	r3, [r8]
    {
        //LOG_ERR("Error writing to MLX90640, readback failed");
        //LOG_ERR("dataCheck: %d  data: %d", dataCheck, data);
        return -2;
    3bd6:	42ab      	cmp	r3, r5
    3bd8:	bf18      	it	ne
    3bda:	f06f 0401 	mvnne.w	r4, #1
    }    

    return 0;
    3bde:	4620      	mov	r0, r4
    3be0:	b004      	add	sp, #16
    3be2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return -1;
    3be6:	f04f 34ff 	mov.w	r4, #4294967295
    3bea:	e7f8      	b.n	3bde <MLX90640_I2CWrite+0x52>
    3bec:	00009cd4 	.word	0x00009cd4
    3bf0:	20002320 	.word	0x20002320

00003bf4 <MLX_start>:
float Vdd;
float Ta;


void MLX_start(void)
{
    3bf4:	b500      	push	{lr}
    3bf6:	f2ad 6d94 	subw	sp, sp, #1684	; 0x694
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm0 = { .val = timeout };
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
    3bfa:	2100      	movs	r1, #0
    3bfc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    3c00:	f004 fc54 	bl	84ac <z_impl_k_sleep>
	//k_sleep(K_MSEC(500));	// wait one refresh rate? default refresh rate?
	k_sleep(K_MSEC(1000));	//datasheet is weird so just wait 1 second to be safe

	uint16_t eeMLX90640[MLX90640_EEPROM_DUMP_NUM];

	status = MLX90640_DumpEE(MLX_ADDR, eeMLX90640);
    3c04:	a904      	add	r1, sp, #16
    3c06:	2033      	movs	r0, #51	; 0x33
    3c08:	f005 f880 	bl	8d0c <MLX90640_DumpEE>
    3c0c:	4603      	mov	r3, r0
	if (status != 0) {
    3c0e:	2800      	cmp	r0, #0
    3c10:	d042      	beq.n	3c98 <MLX_start+0xa4>
		LOG_ERR("Failed to load system parameters, MLX90640_DumpEE() returned %d", status);
    3c12:	4b33      	ldr	r3, [pc, #204]	; (3ce0 <MLX_start+0xec>)
    3c14:	9302      	str	r3, [sp, #8]
    3c16:	2300      	movs	r3, #0
    3c18:	9003      	str	r0, [sp, #12]
    3c1a:	e9cd 3300 	strd	r3, r3, [sp]
    3c1e:	4931      	ldr	r1, [pc, #196]	; (3ce4 <MLX_start+0xf0>)
    3c20:	2201      	movs	r2, #1
    3c22:	4618      	mov	r0, r3
    3c24:	f005 f954 	bl	8ed0 <z_log_msg_runtime_create.constprop.0>
	} else {
		LOG_INF("Dumped MLX EE");
	}

	status = MLX90640_ExtractParameters(eeMLX90640, &mlx90640);
    3c28:	492f      	ldr	r1, [pc, #188]	; (3ce8 <MLX_start+0xf4>)
    3c2a:	a804      	add	r0, sp, #16
    3c2c:	f7fd fc50 	bl	14d0 <MLX90640_ExtractParameters>
    3c30:	4603      	mov	r3, r0
	if (status != 0) {
    3c32:	2800      	cmp	r0, #0
    3c34:	d039      	beq.n	3caa <MLX_start+0xb6>
		LOG_ERR("Parameter extraction failed, MLX90640_ExtractParameters() returned %d", status);
    3c36:	4b2d      	ldr	r3, [pc, #180]	; (3cec <MLX_start+0xf8>)
    3c38:	9302      	str	r3, [sp, #8]
    3c3a:	2300      	movs	r3, #0
    3c3c:	9003      	str	r0, [sp, #12]
    3c3e:	e9cd 3300 	strd	r3, r3, [sp]
    3c42:	4928      	ldr	r1, [pc, #160]	; (3ce4 <MLX_start+0xf0>)
    3c44:	2201      	movs	r2, #1
    3c46:	4618      	mov	r0, r3
    3c48:	f005 f942 	bl	8ed0 <z_log_msg_runtime_create.constprop.0>
	} else {
		LOG_INF("Extracted MLX parameters");
	}

	status = MLX90640_SetRefreshRate(MLX_ADDR, temp_freq);
    3c4c:	4b28      	ldr	r3, [pc, #160]	; (3cf0 <MLX_start+0xfc>)
    3c4e:	2033      	movs	r0, #51	; 0x33
    3c50:	7819      	ldrb	r1, [r3, #0]
    3c52:	f005 f922 	bl	8e9a <MLX90640_SetRefreshRate>
    3c56:	4603      	mov	r3, r0
	if (status != 0) {
    3c58:	b380      	cbz	r0, 3cbc <MLX_start+0xc8>
		LOG_ERR("Setting refresh rate failed, MLX90640_SetRefreshRate() returned %d", status);
    3c5a:	4b26      	ldr	r3, [pc, #152]	; (3cf4 <MLX_start+0x100>)
    3c5c:	9302      	str	r3, [sp, #8]
    3c5e:	2300      	movs	r3, #0
    3c60:	9003      	str	r0, [sp, #12]
    3c62:	e9cd 3300 	strd	r3, r3, [sp]
    3c66:	491f      	ldr	r1, [pc, #124]	; (3ce4 <MLX_start+0xf0>)
    3c68:	2201      	movs	r2, #1
    3c6a:	4618      	mov	r0, r3
    3c6c:	f005 f930 	bl	8ed0 <z_log_msg_runtime_create.constprop.0>
	} else {
		LOG_INF("Set MLX refresh rate");
	}

	status = MLX90640_SynchFrame(MLX_ADDR);
    3c70:	2033      	movs	r0, #51	; 0x33
    3c72:	f005 f852 	bl	8d1a <MLX90640_SynchFrame>
    3c76:	4603      	mov	r3, r0
	if (status != 0) {
    3c78:	b348      	cbz	r0, 3cce <MLX_start+0xda>
		LOG_ERR("Synchronizing MLX frame failed, MLX90640_SynchFrame() returned %d", status);
    3c7a:	4b1f      	ldr	r3, [pc, #124]	; (3cf8 <MLX_start+0x104>)
    3c7c:	9302      	str	r3, [sp, #8]
    3c7e:	2300      	movs	r3, #0
    3c80:	9003      	str	r0, [sp, #12]
    3c82:	e9cd 3300 	strd	r3, r3, [sp]
    3c86:	4917      	ldr	r1, [pc, #92]	; (3ce4 <MLX_start+0xf0>)
    3c88:	2201      	movs	r2, #1
    3c8a:	4618      	mov	r0, r3
    3c8c:	f005 f920 	bl	8ed0 <z_log_msg_runtime_create.constprop.0>
	} else {
		LOG_INF("Synchronized MLX frame");
	}

}
    3c90:	f20d 6d94 	addw	sp, sp, #1684	; 0x694
    3c94:	f85d fb04 	ldr.w	pc, [sp], #4
		LOG_INF("Dumped MLX EE");
    3c98:	4a18      	ldr	r2, [pc, #96]	; (3cfc <MLX_start+0x108>)
    3c9a:	4912      	ldr	r1, [pc, #72]	; (3ce4 <MLX_start+0xf0>)
    3c9c:	9000      	str	r0, [sp, #0]
    3c9e:	e9cd 0201 	strd	r0, r2, [sp, #4]
    3ca2:	2203      	movs	r2, #3
    3ca4:	f005 f914 	bl	8ed0 <z_log_msg_runtime_create.constprop.0>
    3ca8:	e7be      	b.n	3c28 <MLX_start+0x34>
		LOG_INF("Extracted MLX parameters");
    3caa:	4a15      	ldr	r2, [pc, #84]	; (3d00 <MLX_start+0x10c>)
    3cac:	490d      	ldr	r1, [pc, #52]	; (3ce4 <MLX_start+0xf0>)
    3cae:	9000      	str	r0, [sp, #0]
    3cb0:	e9cd 0201 	strd	r0, r2, [sp, #4]
    3cb4:	2203      	movs	r2, #3
    3cb6:	f005 f90b 	bl	8ed0 <z_log_msg_runtime_create.constprop.0>
    3cba:	e7c7      	b.n	3c4c <MLX_start+0x58>
		LOG_INF("Set MLX refresh rate");
    3cbc:	4a11      	ldr	r2, [pc, #68]	; (3d04 <MLX_start+0x110>)
    3cbe:	4909      	ldr	r1, [pc, #36]	; (3ce4 <MLX_start+0xf0>)
    3cc0:	9000      	str	r0, [sp, #0]
    3cc2:	e9cd 0201 	strd	r0, r2, [sp, #4]
    3cc6:	2203      	movs	r2, #3
    3cc8:	f005 f902 	bl	8ed0 <z_log_msg_runtime_create.constprop.0>
    3ccc:	e7d0      	b.n	3c70 <MLX_start+0x7c>
		LOG_INF("Synchronized MLX frame");
    3cce:	4a0e      	ldr	r2, [pc, #56]	; (3d08 <MLX_start+0x114>)
    3cd0:	4904      	ldr	r1, [pc, #16]	; (3ce4 <MLX_start+0xf0>)
    3cd2:	9000      	str	r0, [sp, #0]
    3cd4:	e9cd 0201 	strd	r0, r2, [sp, #4]
    3cd8:	2203      	movs	r2, #3
    3cda:	f005 f8f9 	bl	8ed0 <z_log_msg_runtime_create.constprop.0>
}
    3cde:	e7d7      	b.n	3c90 <MLX_start+0x9c>
    3ce0:	0000a111 	.word	0x0000a111
    3ce4:	00009ef4 	.word	0x00009ef4
    3ce8:	20000e90 	.word	0x20000e90
    3cec:	0000a15f 	.word	0x0000a15f
    3cf0:	200000bc 	.word	0x200000bc
    3cf4:	0000a1be 	.word	0x0000a1be
    3cf8:	0000a216 	.word	0x0000a216
    3cfc:	0000a151 	.word	0x0000a151
    3d00:	0000a1a5 	.word	0x0000a1a5
    3d04:	0000a201 	.word	0x0000a201
    3d08:	0000a258 	.word	0x0000a258

00003d0c <main>:
	#endif
}


void main(void)
{
    3d0c:	b5f0      	push	{r4, r5, r6, r7, lr}
    3d0e:	f2ad 6dac 	subw	sp, sp, #1708	; 0x6ac
	LOG_INF("Running ttpms_v2_external_front on %s", CONFIG_BOARD);
    3d12:	4b2f      	ldr	r3, [pc, #188]	; (3dd0 <main+0xc4>)
    3d14:	9303      	str	r3, [sp, #12]
    3d16:	2400      	movs	r4, #0
    3d18:	4b2e      	ldr	r3, [pc, #184]	; (3dd4 <main+0xc8>)
    3d1a:	492f      	ldr	r1, [pc, #188]	; (3dd8 <main+0xcc>)
    3d1c:	9302      	str	r3, [sp, #8]
    3d1e:	4620      	mov	r0, r4
    3d20:	4623      	mov	r3, r4
    3d22:	e9cd 4400 	strd	r4, r4, [sp]
    3d26:	2203      	movs	r2, #3
    3d28:	f005 f8d2 	bl	8ed0 <z_log_msg_runtime_create.constprop.0>

	LOG_INF("Starting MLX sensor");
    3d2c:	4b2b      	ldr	r3, [pc, #172]	; (3ddc <main+0xd0>)
    3d2e:	492a      	ldr	r1, [pc, #168]	; (3dd8 <main+0xcc>)
    3d30:	9400      	str	r4, [sp, #0]
    3d32:	e9cd 4301 	strd	r4, r3, [sp, #4]
    3d36:	4620      	mov	r0, r4
    3d38:	4623      	mov	r3, r4
    3d3a:	2203      	movs	r2, #3
    3d3c:	f005 f8c8 	bl	8ed0 <z_log_msg_runtime_create.constprop.0>
	MLX_start();
    3d40:	f7ff ff58 	bl	3bf4 <MLX_start>

		//k_sleep(K_MSEC(10));

		status = MLX90640_GetFrameData(MLX_ADDR, frame);	// this function waits until data is available
		if (status < 0) {
			LOG_ERR("Getting MLX frame data failed, MLX90640_GetFrameData() returned %d", status);
    3d44:	4f26      	ldr	r7, [pc, #152]	; (3de0 <main+0xd4>)
    3d46:	4d24      	ldr	r5, [pc, #144]	; (3dd8 <main+0xcc>)
		}

		Vdd = MLX90640_GetVdd(frame, &mlx90640);
    3d48:	4c26      	ldr	r4, [pc, #152]	; (3de4 <main+0xd8>)
		status = MLX90640_GetFrameData(MLX_ADDR, frame);	// this function waits until data is available
    3d4a:	a909      	add	r1, sp, #36	; 0x24
    3d4c:	2033      	movs	r0, #51	; 0x33
    3d4e:	f004 fffc 	bl	8d4a <MLX90640_GetFrameData>
		if (status < 0) {
    3d52:	2800      	cmp	r0, #0
    3d54:	da09      	bge.n	3d6a <main+0x5e>
			LOG_ERR("Getting MLX frame data failed, MLX90640_GetFrameData() returned %d", status);
    3d56:	2300      	movs	r3, #0
    3d58:	e9cd 7002 	strd	r7, r0, [sp, #8]
    3d5c:	e9cd 3300 	strd	r3, r3, [sp]
    3d60:	2201      	movs	r2, #1
    3d62:	4629      	mov	r1, r5
    3d64:	4618      	mov	r0, r3
    3d66:	f005 f8b3 	bl	8ed0 <z_log_msg_runtime_create.constprop.0>
		Vdd = MLX90640_GetVdd(frame, &mlx90640);
    3d6a:	4621      	mov	r1, r4
    3d6c:	a809      	add	r0, sp, #36	; 0x24
    3d6e:	f7fd fec7 	bl	1b00 <MLX90640_GetVdd>
    3d72:	4b1d      	ldr	r3, [pc, #116]	; (3de8 <main+0xdc>)

		//LOG_INF("started temp processing");
		MLX90640_CalculateTo(frame, &mlx90640, emissivity, tr, mlx90640To);
		//LOG_INF("finished temp processing");

		LOG_INF("Pixel 400: %f Pixel 401: %f", mlx90640To[399], mlx90640To[400]);
    3d74:	4e1d      	ldr	r6, [pc, #116]	; (3dec <main+0xe0>)
		Vdd = MLX90640_GetVdd(frame, &mlx90640);
    3d76:	ed83 0a00 	vstr	s0, [r3]
		Ta = MLX90640_GetTa(frame, &mlx90640);
    3d7a:	4621      	mov	r1, r4
    3d7c:	a809      	add	r0, sp, #36	; 0x24
    3d7e:	f7fd ff1f 	bl	1bc0 <MLX90640_GetTa>
    3d82:	4b1b      	ldr	r3, [pc, #108]	; (3df0 <main+0xe4>)
		MLX90640_CalculateTo(frame, &mlx90640, emissivity, tr, mlx90640To);
    3d84:	4a1b      	ldr	r2, [pc, #108]	; (3df4 <main+0xe8>)
		Ta = MLX90640_GetTa(frame, &mlx90640);
    3d86:	ed83 0a00 	vstr	s0, [r3]
		float tr = Ta - ta_shift; //Reflected temperature based on the sensor ambient temperature
    3d8a:	4b1b      	ldr	r3, [pc, #108]	; (3df8 <main+0xec>)
    3d8c:	edd3 0a00 	vldr	s1, [r3]
		MLX90640_CalculateTo(frame, &mlx90640, emissivity, tr, mlx90640To);
    3d90:	4b1a      	ldr	r3, [pc, #104]	; (3dfc <main+0xf0>)
    3d92:	ee70 0a60 	vsub.f32	s1, s0, s1
    3d96:	4621      	mov	r1, r4
    3d98:	ed93 0a00 	vldr	s0, [r3]
    3d9c:	a809      	add	r0, sp, #36	; 0x24
    3d9e:	f7fd ff87 	bl	1cb0 <MLX90640_CalculateTo>
		LOG_INF("Pixel 400: %f Pixel 401: %f", mlx90640To[399], mlx90640To[400]);
    3da2:	6830      	ldr	r0, [r6, #0]
    3da4:	f7fc fb10 	bl	3c8 <__aeabi_f2d>
    3da8:	e9cd 0106 	strd	r0, r1, [sp, #24]
    3dac:	f856 0c04 	ldr.w	r0, [r6, #-4]
    3db0:	f7fc fb0a 	bl	3c8 <__aeabi_f2d>
    3db4:	4b12      	ldr	r3, [pc, #72]	; (3e00 <main+0xf4>)
    3db6:	9302      	str	r3, [sp, #8]
    3db8:	2300      	movs	r3, #0
    3dba:	e9cd 0104 	strd	r0, r1, [sp, #16]
    3dbe:	e9cd 3300 	strd	r3, r3, [sp]
    3dc2:	2203      	movs	r2, #3
    3dc4:	4629      	mov	r1, r5
    3dc6:	4618      	mov	r0, r3
    3dc8:	f005 f882 	bl	8ed0 <z_log_msg_runtime_create.constprop.0>
	{
    3dcc:	e7bd      	b.n	3d4a <main+0x3e>
    3dce:	bf00      	nop
    3dd0:	0000a26f 	.word	0x0000a26f
    3dd4:	0000a283 	.word	0x0000a283
    3dd8:	00009ef4 	.word	0x00009ef4
    3ddc:	0000a2a9 	.word	0x0000a2a9
    3de0:	0000a2bd 	.word	0x0000a2bd
    3de4:	20000e90 	.word	0x20000e90
    3de8:	2000028c 	.word	0x2000028c
    3dec:	200008d0 	.word	0x200008d0
    3df0:	20000288 	.word	0x20000288
    3df4:	20000290 	.word	0x20000290
    3df8:	20000004 	.word	0x20000004
    3dfc:	20000000 	.word	0x20000000
    3e00:	0000a300 	.word	0x0000a300

00003e04 <cbvprintf_package>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
    3e04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3e08:	b091      	sub	sp, #68	; 0x44
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
	bool is_str_arg = false;
	union cbprintf_package_hdr *pkg_hdr = packaged;

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
    3e0a:	0784      	lsls	r4, r0, #30
{
    3e0c:	9300      	str	r3, [sp, #0]
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
    3e0e:	f002 0304 	and.w	r3, r2, #4
    3e12:	9302      	str	r3, [sp, #8]
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
    3e14:	f3c2 03c2 	ubfx	r3, r2, #3, #3
    3e18:	f103 0301 	add.w	r3, r3, #1
    3e1c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
{
    3e20:	9203      	str	r2, [sp, #12]
    3e22:	4605      	mov	r5, r0
    3e24:	460e      	mov	r6, r1
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
    3e26:	9305      	str	r3, [sp, #20]
	if ((uintptr_t)packaged % sizeof(void *)) {
    3e28:	f040 81be 	bne.w	41a8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1a8>
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * multiple of pointer size for the above to preserve alignment.
	 *
	 * Refer to union cbprintf_package_hdr for more details.
	 */
	buf += sizeof(*pkg_hdr);
    3e2c:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
    3e2e:	b130      	cbz	r0, 3e3e <cbvprintf_package+0x3a>

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
    3e30:	2907      	cmp	r1, #7
    3e32:	d809      	bhi.n	3e48 <cbvprintf_package+0x44>
		return -ENOSPC;
    3e34:	f06f 001b 	mvn.w	r0, #27
	return BUF_OFFSET;

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
    3e38:	b011      	add	sp, #68	; 0x44
    3e3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
    3e3e:	f001 0607 	and.w	r6, r1, #7
    3e42:	1d34      	adds	r4, r6, #4
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
    3e44:	f1c6 0608 	rsb	r6, r6, #8
	s = fmt--;
    3e48:	9b00      	ldr	r3, [sp, #0]
	unsigned int s_ro_cnt = 0; /* number of ro strings */
    3e4a:	f04f 0900 	mov.w	r9, #0
	s = fmt--;
    3e4e:	1e59      	subs	r1, r3, #1
	align = VA_STACK_ALIGN(char *);
    3e50:	f04f 0a04 	mov.w	sl, #4
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
    3e54:	f04f 33ff 	mov.w	r3, #4294967295
    3e58:	9301      	str	r3, [sp, #4]
	unsigned int s_rw_cnt = 0; /* number of rw strings */
    3e5a:	f8cd 9010 	str.w	r9, [sp, #16]
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
    3e5e:	464f      	mov	r7, r9
	bool parsing = false;
    3e60:	46cb      	mov	fp, r9
	size = sizeof(char *);
    3e62:	4653      	mov	r3, sl
			if (buf0 != NULL) {
    3e64:	b10d      	cbz	r5, 3e6a <cbvprintf_package+0x66>
				*(const char **)buf = s;
    3e66:	9800      	ldr	r0, [sp, #0]
    3e68:	6020      	str	r0, [r4, #0]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    3e6a:	9805      	ldr	r0, [sp, #20]
    3e6c:	2800      	cmp	r0, #0
    3e6e:	f300 80eb 	bgt.w	4048 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x48>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
    3e72:	489a      	ldr	r0, [pc, #616]	; (40dc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xdc>)
    3e74:	9a00      	ldr	r2, [sp, #0]
    3e76:	4282      	cmp	r2, r0
    3e78:	d303      	bcc.n	3e82 <cbvprintf_package+0x7e>
    3e7a:	4899      	ldr	r0, [pc, #612]	; (40e0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xe0>)
    3e7c:	4282      	cmp	r2, r0
    3e7e:	f0c0 80e3 	bcc.w	4048 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x48>
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    3e82:	9a03      	ldr	r2, [sp, #12]
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
    3e84:	eba4 0e05 	sub.w	lr, r4, r5
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    3e88:	0792      	lsls	r2, r2, #30
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
    3e8a:	ea4f 009e 	mov.w	r0, lr, lsr #2
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    3e8e:	f100 8106 	bmi.w	409e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x9e>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
    3e92:	2f0f      	cmp	r7, #15
    3e94:	f200 80b4 	bhi.w	4000 <CONFIG_COVERAGE_GCOV_HEAP_SIZE>
				if (buf0 != NULL) {
    3e98:	2d00      	cmp	r5, #0
    3e9a:	f000 8108 	beq.w	40ae <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xae>
					str_ptr_pos[s_idx] = s_ptr_idx;
    3e9e:	f107 0240 	add.w	r2, r7, #64	; 0x40
    3ea2:	eb0d 0c02 	add.w	ip, sp, r2
					str_ptr_arg[s_idx] = arg_idx;
    3ea6:	9a01      	ldr	r2, [sp, #4]
					str_ptr_pos[s_idx] = s_ptr_idx;
    3ea8:	f80c 0c20 	strb.w	r0, [ip, #-32]
					str_ptr_arg[s_idx] = arg_idx;
    3eac:	f80c 2c10 	strb.w	r2, [ip, #-16]
						s_rw_cnt++;
    3eb0:	9804      	ldr	r0, [sp, #16]
    3eb2:	3001      	adds	r0, #1
    3eb4:	9004      	str	r0, [sp, #16]
    3eb6:	e0ea      	b.n	408e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x8e>
			switch (*fmt) {
    3eb8:	287a      	cmp	r0, #122	; 0x7a
    3eba:	d860      	bhi.n	3f7e <cbvprintf_package+0x17a>
    3ebc:	284b      	cmp	r0, #75	; 0x4b
    3ebe:	d80e      	bhi.n	3ede <cbvprintf_package+0xda>
    3ec0:	2847      	cmp	r0, #71	; 0x47
    3ec2:	d85c      	bhi.n	3f7e <cbvprintf_package+0x17a>
    3ec4:	2829      	cmp	r0, #41	; 0x29
    3ec6:	d82f      	bhi.n	3f28 <cbvprintf_package+0x124>
    3ec8:	2825      	cmp	r0, #37	; 0x25
    3eca:	d055      	beq.n	3f78 <cbvprintf_package+0x174>
    3ecc:	d857      	bhi.n	3f7e <cbvprintf_package+0x17a>
    3ece:	2820      	cmp	r0, #32
    3ed0:	d07d      	beq.n	3fce <cbvprintf_package+0x1ca>
    3ed2:	3823      	subs	r0, #35	; 0x23
    3ed4:	f1d0 0b00 	rsbs	fp, r0, #0
    3ed8:	eb4b 0b00 	adc.w	fp, fp, r0
    3edc:	e077      	b.n	3fce <cbvprintf_package+0x1ca>
    3ede:	f1a0 0c4c 	sub.w	ip, r0, #76	; 0x4c
    3ee2:	f1bc 0f2e 	cmp.w	ip, #46	; 0x2e
    3ee6:	d84a      	bhi.n	3f7e <cbvprintf_package+0x17a>
    3ee8:	e8df f00c 	tbb	[pc, ip]
    3eec:	49494971 	.word	0x49494971
    3ef0:	49494949 	.word	0x49494949
    3ef4:	49494949 	.word	0x49494949
    3ef8:	4949494c 	.word	0x4949494c
    3efc:	49494949 	.word	0x49494949
    3f00:	4c495a49 	.word	0x4c495a49
    3f04:	5a5a5a4c 	.word	0x5a5a5a4c
    3f08:	496e4c71 	.word	0x496e4c71
    3f0c:	4c184971 	.word	0x4c184971
    3f10:	83494918 	.word	0x83494918
    3f14:	49494c80 	.word	0x49494c80
    3f18:	494c      	.short	0x494c
    3f1a:	80          	.byte	0x80
    3f1b:	00          	.byte	0x00
    3f1c:	2000      	movs	r0, #0
    3f1e:	f04f 0b00 	mov.w	fp, #0
				align = VA_STACK_ALIGN(void *);
    3f22:	f04f 0a04 	mov.w	sl, #4
    3f26:	e039      	b.n	3f9c <cbvprintf_package+0x198>
			switch (*fmt) {
    3f28:	f1a0 0c2a 	sub.w	ip, r0, #42	; 0x2a
    3f2c:	fa5f fc8c 	uxtb.w	ip, ip
    3f30:	2201      	movs	r2, #1
    3f32:	fa02 fc0c 	lsl.w	ip, r2, ip
    3f36:	ea1c 0f0e 	tst.w	ip, lr
    3f3a:	d148      	bne.n	3fce <cbvprintf_package+0x1ca>
    3f3c:	f01c 5062 	ands.w	r0, ip, #947912704	; 0x38800000
    3f40:	d12e      	bne.n	3fa0 <cbvprintf_package+0x19c>
    3f42:	ea1c 0b02 	ands.w	fp, ip, r2
    3f46:	d042      	beq.n	3fce <cbvprintf_package+0x1ca>
		buf = (void *) ROUND_UP(buf, align);
    3f48:	3c01      	subs	r4, #1
    3f4a:	4454      	add	r4, sl
    3f4c:	f1ca 0c00 	rsb	ip, sl, #0
    3f50:	ea04 040c 	and.w	r4, r4, ip
		if (buf0 != NULL && BUF_OFFSET + size > len) {
    3f54:	2d00      	cmp	r5, #0
    3f56:	d061      	beq.n	401c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1c>
    3f58:	eba3 0c05 	sub.w	ip, r3, r5
    3f5c:	44a4      	add	ip, r4
    3f5e:	4566      	cmp	r6, ip
    3f60:	f4ff af68 	bcc.w	3e34 <cbvprintf_package+0x30>
		if (is_str_arg) {
    3f64:	2800      	cmp	r0, #0
    3f66:	d168      	bne.n	403a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x3a>
		} else if (size == sizeof(int)) {
    3f68:	2b04      	cmp	r3, #4
    3f6a:	d147      	bne.n	3ffc <cbvprintf_package+0x1f8>
			int v = va_arg(ap, int);
    3f6c:	f858 3b04 	ldr.w	r3, [r8], #4
				*(int *)buf = v;
    3f70:	6023      	str	r3, [r4, #0]
			buf += sizeof(int);
    3f72:	3404      	adds	r4, #4
    3f74:	2304      	movs	r3, #4
    3f76:	e02a      	b.n	3fce <cbvprintf_package+0x1ca>
				arg_idx--;
    3f78:	9a01      	ldr	r2, [sp, #4]
    3f7a:	3a01      	subs	r2, #1
    3f7c:	9201      	str	r2, [sp, #4]
				parsing = false;
    3f7e:	f04f 0b00 	mov.w	fp, #0
				continue;
    3f82:	e024      	b.n	3fce <cbvprintf_package+0x1ca>
				if (fmt[-1] == 'l') {
    3f84:	f811 0c01 	ldrb.w	r0, [r1, #-1]
    3f88:	286c      	cmp	r0, #108	; 0x6c
    3f8a:	d134      	bne.n	3ff6 <cbvprintf_package+0x1f2>
					if (fmt[-2] == 'l') {
    3f8c:	f811 3c02 	ldrb.w	r3, [r1, #-2]
    3f90:	2000      	movs	r0, #0
    3f92:	2b6c      	cmp	r3, #108	; 0x6c
				parsing = false;
    3f94:	4683      	mov	fp, r0
					if (fmt[-2] == 'l') {
    3f96:	d1c4      	bne.n	3f22 <cbvprintf_package+0x11e>
						align = VA_STACK_ALIGN(long long);
    3f98:	f04f 0a08 	mov.w	sl, #8
				size = sizeof(void *);
    3f9c:	4653      	mov	r3, sl
    3f9e:	e7d3      	b.n	3f48 <cbvprintf_package+0x144>
					v.ld = va_arg(ap, long double);
    3fa0:	f108 0807 	add.w	r8, r8, #7
    3fa4:	f028 0807 	bic.w	r8, r8, #7
				buf = (void *) ROUND_UP(buf, align);
    3fa8:	3407      	adds	r4, #7
					v.ld = va_arg(ap, long double);
    3faa:	e8f8 ab02 	ldrd	sl, fp, [r8], #8
				buf = (void *) ROUND_UP(buf, align);
    3fae:	f024 0407 	bic.w	r4, r4, #7
				if (buf0 != NULL) {
    3fb2:	b135      	cbz	r5, 3fc2 <cbvprintf_package+0x1be>
					if (BUF_OFFSET + size > len) {
    3fb4:	9806      	ldr	r0, [sp, #24]
    3fb6:	4420      	add	r0, r4
    3fb8:	42b0      	cmp	r0, r6
    3fba:	f63f af3b 	bhi.w	3e34 <cbvprintf_package+0x30>
						*(long double *)buf = v.ld;
    3fbe:	e9c4 ab00 	strd	sl, fp, [r4]
				buf += size;
    3fc2:	3408      	adds	r4, #8
				parsing = false;
    3fc4:	f04f 0b00 	mov.w	fp, #0
			switch (*fmt) {
    3fc8:	f04f 0a08 	mov.w	sl, #8
    3fcc:	4653      	mov	r3, sl
			if (*++fmt == '\0') {
    3fce:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    3fd2:	2800      	cmp	r0, #0
    3fd4:	d078      	beq.n	40c8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xc8>
			if (!parsing) {
    3fd6:	f1bb 0f00 	cmp.w	fp, #0
    3fda:	f47f af6d 	bne.w	3eb8 <cbvprintf_package+0xb4>
				if (*fmt == '%') {
    3fde:	2825      	cmp	r0, #37	; 0x25
    3fe0:	d1f5      	bne.n	3fce <cbvprintf_package+0x1ca>
					arg_idx++;
    3fe2:	9b01      	ldr	r3, [sp, #4]
    3fe4:	3301      	adds	r3, #1
    3fe6:	9301      	str	r3, [sp, #4]
					parsing = true;
    3fe8:	f04f 0b01 	mov.w	fp, #1
				align = VA_STACK_ALIGN(size_t);
    3fec:	f04f 0a04 	mov.w	sl, #4
    3ff0:	e7ec      	b.n	3fcc <cbvprintf_package+0x1c8>
			switch (*fmt) {
    3ff2:	4658      	mov	r0, fp
    3ff4:	e793      	b.n	3f1e <cbvprintf_package+0x11a>
    3ff6:	2000      	movs	r0, #0
				parsing = false;
    3ff8:	4683      	mov	fp, r0
    3ffa:	e7a5      	b.n	3f48 <cbvprintf_package+0x144>
		} else if (size == sizeof(long long)) {
    3ffc:	2b08      	cmp	r3, #8
    3ffe:	d002      	beq.n	4006 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x6>
					return -EINVAL;
    4000:	f06f 0015 	mvn.w	r0, #21
    4004:	e718      	b.n	3e38 <cbvprintf_package+0x34>
			long long v = va_arg(ap, long long);
    4006:	f108 0807 	add.w	r8, r8, #7
    400a:	f028 0807 	bic.w	r8, r8, #7
    400e:	ecb8 7b02 	vldmia	r8!, {d7}
					*(long long *)buf = v;
    4012:	ed84 7b00 	vstr	d7, [r4]
			buf += sizeof(long long);
    4016:	3408      	adds	r4, #8
    4018:	2308      	movs	r3, #8
    401a:	e7d8      	b.n	3fce <cbvprintf_package+0x1ca>
		if (is_str_arg) {
    401c:	b968      	cbnz	r0, 403a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x3a>
		} else if (size == sizeof(int)) {
    401e:	2b04      	cmp	r3, #4
    4020:	d102      	bne.n	4028 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x28>
			int v = va_arg(ap, int);
    4022:	f108 0804 	add.w	r8, r8, #4
			if (buf0 != NULL) {
    4026:	e7a4      	b.n	3f72 <cbvprintf_package+0x16e>
		} else if (size == sizeof(long long)) {
    4028:	2b08      	cmp	r3, #8
    402a:	d1e9      	bne.n	4000 <CONFIG_COVERAGE_GCOV_HEAP_SIZE>
			long long v = va_arg(ap, long long);
    402c:	f108 0807 	add.w	r8, r8, #7
    4030:	f028 0807 	bic.w	r8, r8, #7
    4034:	f108 0808 	add.w	r8, r8, #8
			if (buf0 != NULL) {
    4038:	e7ed      	b.n	4016 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x16>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    403a:	9805      	ldr	r0, [sp, #20]
    403c:	3801      	subs	r0, #1
    403e:	9005      	str	r0, [sp, #20]
			s = va_arg(ap, char *);
    4040:	f858 0b04 	ldr.w	r0, [r8], #4
    4044:	9000      	str	r0, [sp, #0]
    4046:	e70d      	b.n	3e64 <cbvprintf_package+0x60>
			if (is_ro && !do_ro) {
    4048:	9a03      	ldr	r2, [sp, #12]
    404a:	0790      	lsls	r0, r2, #30
    404c:	d520      	bpl.n	4090 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x90>
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
    404e:	eba4 0e05 	sub.w	lr, r4, r5
    4052:	ea4f 009e 	mov.w	r0, lr, lsr #2
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    4056:	f04f 0c01 	mov.w	ip, #1
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    405a:	f5be 7f00 	cmp.w	lr, #512	; 0x200
    405e:	d2cf      	bcs.n	4000 <CONFIG_COVERAGE_GCOV_HEAP_SIZE>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
    4060:	2f0f      	cmp	r7, #15
    4062:	d8cd      	bhi.n	4000 <CONFIG_COVERAGE_GCOV_HEAP_SIZE>
				if (buf0 != NULL) {
    4064:	b1f5      	cbz	r5, 40a4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xa4>
					str_ptr_pos[s_idx] = s_ptr_idx;
    4066:	f107 0240 	add.w	r2, r7, #64	; 0x40
    406a:	eb0d 0e02 	add.w	lr, sp, r2
    406e:	b2c0      	uxtb	r0, r0
					str_ptr_arg[s_idx] = arg_idx;
    4070:	9a01      	ldr	r2, [sp, #4]
					str_ptr_pos[s_idx] = s_ptr_idx;
    4072:	f80e 0c20 	strb.w	r0, [lr, #-32]
					str_ptr_arg[s_idx] = arg_idx;
    4076:	f80e 2c10 	strb.w	r2, [lr, #-16]
					if (is_ro) {
    407a:	f1bc 0f00 	cmp.w	ip, #0
    407e:	f43f af17 	beq.w	3eb0 <cbvprintf_package+0xac>
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
    4082:	f060 007f 	orn	r0, r0, #127	; 0x7f
    4086:	f80e 0c20 	strb.w	r0, [lr, #-32]
						s_ro_cnt++;
    408a:	f109 0901 	add.w	r9, r9, #1
				s_idx++;
    408e:	3701      	adds	r7, #1
					if (BUF_OFFSET + size > len) {
    4090:	f1c5 0208 	rsb	r2, r5, #8
			buf += sizeof(char *);
    4094:	3404      	adds	r4, #4
					if (BUF_OFFSET + size > len) {
    4096:	9206      	str	r2, [sp, #24]
			switch (*fmt) {
    4098:	f64f 7eda 	movw	lr, #65498	; 0xffda
    409c:	e797      	b.n	3fce <cbvprintf_package+0x1ca>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    409e:	f04f 0c00 	mov.w	ip, #0
    40a2:	e7da      	b.n	405a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5a>
				} else if (is_ro) {
    40a4:	f1bc 0f00 	cmp.w	ip, #0
    40a8:	d001      	beq.n	40ae <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xae>
					len += 1;
    40aa:	3601      	adds	r6, #1
    40ac:	e7ef      	b.n	408e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x8e>
				} else if (rws_pos_en) {
    40ae:	9a02      	ldr	r2, [sp, #8]
					len += 2;
    40b0:	3602      	adds	r6, #2
				} else if (rws_pos_en) {
    40b2:	2a00      	cmp	r2, #0
    40b4:	d1eb      	bne.n	408e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x8e>
					len += strlen(s) + 1 + 1;
    40b6:	9800      	ldr	r0, [sp, #0]
    40b8:	e9cd 3106 	strd	r3, r1, [sp, #24]
    40bc:	f7fc fe8e 	bl	ddc <strlen>
    40c0:	e9dd 3106 	ldrd	r3, r1, [sp, #24]
    40c4:	4406      	add	r6, r0
    40c6:	e7e2      	b.n	408e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x8e>
	if (BUF_OFFSET / sizeof(int) > 255) {
    40c8:	1b63      	subs	r3, r4, r5
    40ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    40ce:	d297      	bcs.n	4000 <CONFIG_COVERAGE_GCOV_HEAP_SIZE>
	if (buf0 == NULL) {
    40d0:	b945      	cbnz	r5, 40e4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xe4>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
    40d2:	f1a6 0408 	sub.w	r4, r6, #8
    40d6:	18e0      	adds	r0, r4, r3
    40d8:	e6ae      	b.n	3e38 <cbvprintf_package+0x34>
    40da:	bf00      	nop
    40dc:	00009c3c 	.word	0x00009c3c
    40e0:	0000ab80 	.word	0x0000ab80
	if (rws_pos_en) {
    40e4:	9a02      	ldr	r2, [sp, #8]
	*(char **)buf0 = NULL;
    40e6:	6028      	str	r0, [r5, #0]
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
    40e8:	089b      	lsrs	r3, r3, #2
    40ea:	702b      	strb	r3, [r5, #0]
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
    40ec:	f89d 3010 	ldrb.w	r3, [sp, #16]
	if (rws_pos_en) {
    40f0:	b1c2      	cbz	r2, 4124 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x124>
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
    40f2:	70eb      	strb	r3, [r5, #3]
	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
    40f4:	f885 9002 	strb.w	r9, [r5, #2]
	if (s_ro_cnt) {
    40f8:	f1b9 0f00 	cmp.w	r9, #0
    40fc:	d005      	beq.n	410a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x10a>
    40fe:	a808      	add	r0, sp, #32
		for (i = 0; i < s_idx; i++) {
    4100:	2200      	movs	r2, #0
			if (BUF_OFFSET + 1 > len) {
    4102:	f1c5 0c01 	rsb	ip, r5, #1
		for (i = 0; i < s_idx; i++) {
    4106:	4297      	cmp	r7, r2
    4108:	d10e      	bne.n	4128 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x128>
		if (BUF_OFFSET + 1 + size > len) {
    410a:	f1c5 0301 	rsb	r3, r5, #1
    410e:	f10d 0820 	add.w	r8, sp, #32
			*buf++ = str_ptr_arg[i];
    4112:	f04f 0a00 	mov.w	sl, #0
		if (BUF_OFFSET + 1 + size > len) {
    4116:	9301      	str	r3, [sp, #4]
			*buf++ = str_ptr_arg[i];
    4118:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
	for (i = 0; i < s_idx; i++) {
    411c:	4557      	cmp	r7, sl
    411e:	d112      	bne.n	4146 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x146>
	return BUF_OFFSET;
    4120:	1b60      	subs	r0, r4, r5
    4122:	e689      	b.n	3e38 <cbvprintf_package+0x34>
		pkg_hdr->desc.str_cnt = s_rw_cnt;
    4124:	706b      	strb	r3, [r5, #1]
		pkg_hdr->desc.rw_str_cnt = 0;
    4126:	e7e5      	b.n	40f4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xf4>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
    4128:	f810 3b01 	ldrb.w	r3, [r0], #1
    412c:	0619      	lsls	r1, r3, #24
    412e:	d508      	bpl.n	4142 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x142>
			if (BUF_OFFSET + 1 > len) {
    4130:	eb04 0e0c 	add.w	lr, r4, ip
    4134:	4576      	cmp	r6, lr
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
    4136:	f003 037f 	and.w	r3, r3, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
    413a:	f4ff ae7b 	bcc.w	3e34 <cbvprintf_package+0x30>
			*buf++ = pos;
    413e:	f804 3b01 	strb.w	r3, [r4], #1
		for (i = 0; i < s_idx; i++) {
    4142:	3201      	adds	r2, #1
    4144:	e7df      	b.n	4106 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x106>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
    4146:	f1b9 0f00 	cmp.w	r9, #0
    414a:	d003      	beq.n	4154 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x154>
    414c:	f998 2000 	ldrsb.w	r2, [r8]
    4150:	2a00      	cmp	r2, #0
    4152:	db17      	blt.n	4184 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x184>
		if (rws_pos_en) {
    4154:	9b02      	ldr	r3, [sp, #8]
    4156:	b1d3      	cbz	r3, 418e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x18e>
			*buf++ = str_ptr_arg[i];
    4158:	f81a 200b 	ldrb.w	r2, [sl, fp]
    415c:	f804 2b01 	strb.w	r2, [r4], #1
			size = 0;
    4160:	2200      	movs	r2, #0
		if (BUF_OFFSET + 1 + size > len) {
    4162:	9b01      	ldr	r3, [sp, #4]
    4164:	1898      	adds	r0, r3, r2
    4166:	4420      	add	r0, r4
    4168:	4286      	cmp	r6, r0
    416a:	f4ff ae63 	bcc.w	3e34 <cbvprintf_package+0x30>
		*buf++ = str_ptr_pos[i];
    416e:	f898 0000 	ldrb.w	r0, [r8]
    4172:	f804 0b01 	strb.w	r0, [r4], #1
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    4176:	9900      	ldr	r1, [sp, #0]
    4178:	9203      	str	r2, [sp, #12]
    417a:	4620      	mov	r0, r4
    417c:	f005 fd37 	bl	9bee <memcpy>
		buf += size;
    4180:	9a03      	ldr	r2, [sp, #12]
    4182:	4414      	add	r4, r2
	for (i = 0; i < s_idx; i++) {
    4184:	f10a 0a01 	add.w	sl, sl, #1
    4188:	f108 0801 	add.w	r8, r8, #1
    418c:	e7c6      	b.n	411c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x11c>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
    418e:	f898 2000 	ldrb.w	r2, [r8]
    4192:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
    4196:	9300      	str	r3, [sp, #0]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
    4198:	9b02      	ldr	r3, [sp, #8]
    419a:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
			size = strlen(s) + 1;
    419e:	9800      	ldr	r0, [sp, #0]
    41a0:	f7fc fe1c 	bl	ddc <strlen>
    41a4:	1c42      	adds	r2, r0, #1
    41a6:	e7dc      	b.n	4162 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x162>
		return -EFAULT;
    41a8:	f06f 000d 	mvn.w	r0, #13
    41ac:	e644      	b.n	3e38 <cbvprintf_package+0x34>
    41ae:	bf00      	nop

000041b0 <__printk_hook_install>:
 * routine that outputs one ASCII character at a time.
 * @param fn putc routine to install
 */
void __printk_hook_install(int (*fn)(int c))
{
	_char_out = fn;
    41b0:	4b01      	ldr	r3, [pc, #4]	; (41b8 <__printk_hook_install+0x8>)
    41b2:	6018      	str	r0, [r3, #0]
}
    41b4:	4770      	bx	lr
    41b6:	bf00      	nop
    41b8:	20000008 	.word	0x20000008

000041bc <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    41bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    41c0:	8b05      	ldrh	r5, [r0, #24]
{
    41c2:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    41c4:	0728      	lsls	r0, r5, #28
{
    41c6:	4690      	mov	r8, r2
	if (processing) {
    41c8:	d411      	bmi.n	41ee <process_event+0x32>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
    41ca:	2902      	cmp	r1, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    41cc:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
    41d0:	f040 80cd 	bne.w	436e <process_event+0x1b2>
			evt = process_recheck(mgr);
    41d4:	4620      	mov	r0, r4
    41d6:	f004 fed4 	bl	8f82 <process_recheck>
		}

		if (evt == EVT_NOP) {
    41da:	b178      	cbz	r0, 41fc <process_event+0x40>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
    41dc:	3801      	subs	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    41de:	8b21      	ldrh	r1, [r4, #24]
    41e0:	2804      	cmp	r0, #4
    41e2:	d811      	bhi.n	4208 <process_event+0x4c>
    41e4:	e8df f000 	tbb	[pc, r0]
    41e8:	856d10c3 	.word	0x856d10c3
    41ec:	95          	.byte	0x95
    41ed:	00          	.byte	0x00
		if (evt == EVT_COMPLETE) {
    41ee:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    41f0:	bf0c      	ite	eq
    41f2:	f045 0510 	orreq.w	r5, r5, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
    41f6:	f045 0520 	orrne.w	r5, r5, #32
    41fa:	8325      	strh	r5, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    41fc:	f388 8811 	msr	BASEPRI, r8
    4200:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    4204:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    4208:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    420c:	45aa      	cmp	sl, r5
    420e:	f000 80a6 	beq.w	435e <process_event+0x1a2>
	 * a memory barrier when used like this, and we don't have a
	 * Zephyr framework for that.
	 */
	atomic_clear(&l->locked);
#endif
	arch_irq_unlock(key.key);
    4212:	2700      	movs	r7, #0
    4214:	46b9      	mov	r9, r7
    4216:	463e      	mov	r6, r7
    4218:	68a3      	ldr	r3, [r4, #8]
    421a:	2b00      	cmp	r3, #0
    421c:	f000 80bd 	beq.w	439a <process_event+0x1de>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    4220:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    4224:	8321      	strh	r1, [r4, #24]
    4226:	f388 8811 	msr	BASEPRI, r8
    422a:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    422e:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    4230:	2900      	cmp	r1, #0
    4232:	f000 80bb 	beq.w	43ac <process_event+0x1f0>
	return node->next;
    4236:	680d      	ldr	r5, [r1, #0]
    4238:	2900      	cmp	r1, #0
    423a:	f000 80b7 	beq.w	43ac <process_event+0x1f0>
		mon->callback(mgr, mon, state, res);
    423e:	f8d1 8004 	ldr.w	r8, [r1, #4]
    4242:	4633      	mov	r3, r6
    4244:	4652      	mov	r2, sl
    4246:	4620      	mov	r0, r4
    4248:	47c0      	blx	r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    424a:	2d00      	cmp	r5, #0
    424c:	d076      	beq.n	433c <process_event+0x180>
    424e:	682b      	ldr	r3, [r5, #0]
    4250:	4629      	mov	r1, r5
    4252:	461d      	mov	r5, r3
    4254:	e7f0      	b.n	4238 <process_event+0x7c>
    4256:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    425a:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    425c:	2a01      	cmp	r2, #1
    425e:	d81b      	bhi.n	4298 <process_event+0xdc>
	list->head = NULL;
    4260:	2200      	movs	r2, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    4262:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    4266:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    4268:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    426a:	b289      	uxth	r1, r1
	list->tail = NULL;
    426c:	e9c4 2200 	strd	r2, r2, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    4270:	d109      	bne.n	4286 <process_event+0xca>
    4272:	463b      	mov	r3, r7
    4274:	e003      	b.n	427e <process_event+0xc2>
				mgr->refs += 1U;
    4276:	8b62      	ldrh	r2, [r4, #26]
    4278:	3201      	adds	r2, #1
    427a:	8362      	strh	r2, [r4, #26]
	return node->next;
    427c:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    427e:	2b00      	cmp	r3, #0
    4280:	d1f9      	bne.n	4276 <process_event+0xba>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    4282:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    4286:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    4288:	4620      	mov	r0, r4
    428a:	f004 fe7a 	bl	8f82 <process_recheck>
    428e:	2800      	cmp	r0, #0
    4290:	d07b      	beq.n	438a <process_event+0x1ce>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    4292:	f041 0120 	orr.w	r1, r1, #32
    4296:	e077      	b.n	4388 <process_event+0x1cc>
	} else if (state == ONOFF_STATE_TO_OFF) {
    4298:	2b04      	cmp	r3, #4
    429a:	d10a      	bne.n	42b2 <process_event+0xf6>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    429c:	f021 0107 	bic.w	r1, r1, #7
    42a0:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
    42a2:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    42a4:	4620      	mov	r0, r4
    42a6:	f004 fe6c 	bl	8f82 <process_recheck>
    42aa:	b110      	cbz	r0, 42b2 <process_event+0xf6>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    42ac:	f041 0120 	orr.w	r1, r1, #32
    42b0:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    42b2:	8b21      	ldrh	r1, [r4, #24]
    42b4:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    42b8:	45aa      	cmp	sl, r5
    42ba:	d050      	beq.n	435e <process_event+0x1a2>
    42bc:	2700      	movs	r7, #0
		onoff_transition_fn transit = NULL;
    42be:	46b9      	mov	r9, r7
    42c0:	e7aa      	b.n	4218 <process_event+0x5c>
			transit = mgr->transitions->start;
    42c2:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    42c4:	f021 0107 	bic.w	r1, r1, #7
    42c8:	f041 0106 	orr.w	r1, r1, #6
				   && !sys_slist_is_empty(&mgr->monitors);
    42cc:	2d06      	cmp	r5, #6
			transit = mgr->transitions->start;
    42ce:	f8d3 9000 	ldr.w	r9, [r3]
	mgr->flags = (state & ONOFF_STATE_MASK)
    42d2:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    42d4:	d12d      	bne.n	4332 <process_event+0x176>
		    || (transit != NULL)) {
    42d6:	f1b9 0f00 	cmp.w	r9, #0
    42da:	d040      	beq.n	435e <process_event+0x1a2>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    42dc:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    42e0:	8321      	strh	r1, [r4, #24]
    42e2:	f388 8811 	msr	BASEPRI, r8
    42e6:	f3bf 8f6f 	isb	sy
				transit(mgr, transition_complete);
    42ea:	493a      	ldr	r1, [pc, #232]	; (43d4 <process_event+0x218>)
    42ec:	4620      	mov	r0, r4
    42ee:	47c8      	blx	r9
    42f0:	e029      	b.n	4346 <process_event+0x18a>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    42f2:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->stop;
    42f6:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    42f8:	f041 0104 	orr.w	r1, r1, #4
    42fc:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
    42fe:	2d04      	cmp	r5, #4
			transit = mgr->transitions->stop;
    4300:	f8d3 9004 	ldr.w	r9, [r3, #4]
	mgr->flags = (state & ONOFF_STATE_MASK)
    4304:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    4306:	d0e6      	beq.n	42d6 <process_event+0x11a>
    4308:	2700      	movs	r7, #0
		res = 0;
    430a:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    430c:	f04f 0a04 	mov.w	sl, #4
    4310:	e782      	b.n	4218 <process_event+0x5c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    4312:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->reset;
    4316:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    4318:	f041 0105 	orr.w	r1, r1, #5
    431c:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
    431e:	2d05      	cmp	r5, #5
			transit = mgr->transitions->reset;
    4320:	f8d3 9008 	ldr.w	r9, [r3, #8]
	mgr->flags = (state & ONOFF_STATE_MASK)
    4324:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    4326:	d0d6      	beq.n	42d6 <process_event+0x11a>
    4328:	2700      	movs	r7, #0
		res = 0;
    432a:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    432c:	f04f 0a05 	mov.w	sl, #5
    4330:	e772      	b.n	4218 <process_event+0x5c>
				   && !sys_slist_is_empty(&mgr->monitors);
    4332:	2700      	movs	r7, #0
		res = 0;
    4334:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    4336:	f04f 0a06 	mov.w	sl, #6
    433a:	e76d      	b.n	4218 <process_event+0x5c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    433c:	462b      	mov	r3, r5
    433e:	e787      	b.n	4250 <process_event+0x94>
			if (transit != NULL) {
    4340:	f1b9 0f00 	cmp.w	r9, #0
    4344:	d1d1      	bne.n	42ea <process_event+0x12e>
	__asm__ volatile(
    4346:	f04f 0320 	mov.w	r3, #32
    434a:	f3ef 8811 	mrs	r8, BASEPRI
    434e:	f383 8812 	msr	BASEPRI_MAX, r3
    4352:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    4356:	8b23      	ldrh	r3, [r4, #24]
    4358:	f023 0308 	bic.w	r3, r3, #8
    435c:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    435e:	8b25      	ldrh	r5, [r4, #24]
    4360:	06ea      	lsls	r2, r5, #27
    4362:	d52e      	bpl.n	43c2 <process_event+0x206>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    4364:	f025 0310 	bic.w	r3, r5, #16
    4368:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    436a:	f005 0507 	and.w	r5, r5, #7
			res = mgr->last_res;
    436e:	6966      	ldr	r6, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    4370:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    4372:	2e00      	cmp	r6, #0
    4374:	f6bf af6f 	bge.w	4256 <process_event+0x9a>
	list->head = NULL;
    4378:	2300      	movs	r3, #0
		*clients = mgr->clients;
    437a:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
    437c:	e9c4 3300 	strd	r3, r3, [r4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    4380:	f021 0107 	bic.w	r1, r1, #7
    4384:	f041 0101 	orr.w	r1, r1, #1
			mgr->flags |= ONOFF_FLAG_RECHECK;
    4388:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    438a:	8b21      	ldrh	r1, [r4, #24]
    438c:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    4390:	45aa      	cmp	sl, r5
    4392:	f04f 0900 	mov.w	r9, #0
    4396:	f47f af3f 	bne.w	4218 <process_event+0x5c>
		    || !sys_slist_is_empty(&clients)
    439a:	2f00      	cmp	r7, #0
    439c:	d09b      	beq.n	42d6 <process_event+0x11a>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    439e:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    43a2:	8321      	strh	r1, [r4, #24]
	__asm__ volatile(
    43a4:	f388 8811 	msr	BASEPRI, r8
    43a8:	f3bf 8f6f 	isb	sy
			if (!sys_slist_is_empty(&clients)) {
    43ac:	2f00      	cmp	r7, #0
    43ae:	d0c7      	beq.n	4340 <process_event+0x184>
	return node->next;
    43b0:	683d      	ldr	r5, [r7, #0]
		notify_one(mgr, cli, state, res);
    43b2:	4639      	mov	r1, r7
    43b4:	4633      	mov	r3, r6
    43b6:	4652      	mov	r2, sl
    43b8:	4620      	mov	r0, r4
    43ba:	f004 fe0e 	bl	8fda <notify_one>
	list->head = node;
    43be:	462f      	mov	r7, r5
	while (!sys_slist_is_empty(list)) {
    43c0:	e7f4      	b.n	43ac <process_event+0x1f0>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    43c2:	06ab      	lsls	r3, r5, #26
    43c4:	f57f af1a 	bpl.w	41fc <process_event+0x40>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    43c8:	f025 0320 	bic.w	r3, r5, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    43cc:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    43ce:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
    43d2:	e6ff      	b.n	41d4 <process_event+0x18>
    43d4:	00009007 	.word	0x00009007

000043d8 <extract_decimal>:
{
    43d8:	b5f0      	push	{r4, r5, r6, r7, lr}
	while (isdigit((int)(unsigned char)*sp)) {
    43da:	4e09      	ldr	r6, [pc, #36]	; (4400 <extract_decimal+0x28>)
    43dc:	6801      	ldr	r1, [r0, #0]
{
    43de:	4602      	mov	r2, r0
		val = 10U * val + *sp++ - '0';
    43e0:	270a      	movs	r7, #10
	size_t val = 0;
    43e2:	2000      	movs	r0, #0
    43e4:	460b      	mov	r3, r1
	while (isdigit((int)(unsigned char)*sp)) {
    43e6:	3101      	adds	r1, #1
    43e8:	781c      	ldrb	r4, [r3, #0]
    43ea:	5d35      	ldrb	r5, [r6, r4]
    43ec:	076d      	lsls	r5, r5, #29
    43ee:	d401      	bmi.n	43f4 <extract_decimal+0x1c>
	*str = sp;
    43f0:	6013      	str	r3, [r2, #0]
}
    43f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		val = 10U * val + *sp++ - '0';
    43f4:	fb07 4300 	mla	r3, r7, r0, r4
    43f8:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    43fc:	e7f2      	b.n	43e4 <extract_decimal+0xc>
    43fe:	bf00      	nop
    4400:	0000aa80 	.word	0x0000aa80

00004404 <encode_uint>:
{
    4404:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4408:	4615      	mov	r5, r2
    440a:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
    440c:	78d3      	ldrb	r3, [r2, #3]
    440e:	4a22      	ldr	r2, [pc, #136]	; (4498 <encode_uint+0x94>)
    4410:	f812 b003 	ldrb.w	fp, [r2, r3]
	switch (specifier) {
    4414:	2b6f      	cmp	r3, #111	; 0x6f
{
    4416:	4680      	mov	r8, r0
    4418:	460f      	mov	r7, r1
    441a:	f00b 0b03 	and.w	fp, fp, #3
	switch (specifier) {
    441e:	d029      	beq.n	4474 <encode_uint+0x70>
    4420:	d824      	bhi.n	446c <encode_uint+0x68>
		return 10;
    4422:	2b58      	cmp	r3, #88	; 0x58
    4424:	bf0c      	ite	eq
    4426:	2610      	moveq	r6, #16
    4428:	260a      	movne	r6, #10
	char *bp = bps + (bpe - bps);
    442a:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
    442e:	4632      	mov	r2, r6
    4430:	2300      	movs	r3, #0
    4432:	4640      	mov	r0, r8
    4434:	4639      	mov	r1, r7
    4436:	f7fc fb51 	bl	adc <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    443a:	2a09      	cmp	r2, #9
    443c:	b2d4      	uxtb	r4, r2
    443e:	d81e      	bhi.n	447e <encode_uint+0x7a>
    4440:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    4442:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
    4444:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
    4446:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
    444a:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
    444e:	d301      	bcc.n	4454 <encode_uint+0x50>
    4450:	45d1      	cmp	r9, sl
    4452:	d811      	bhi.n	4478 <encode_uint+0x74>
	if (conv->flag_hash) {
    4454:	782b      	ldrb	r3, [r5, #0]
    4456:	069b      	lsls	r3, r3, #26
    4458:	d505      	bpl.n	4466 <encode_uint+0x62>
		if (radix == 8) {
    445a:	2e08      	cmp	r6, #8
    445c:	d115      	bne.n	448a <encode_uint+0x86>
			conv->altform_0 = true;
    445e:	78ab      	ldrb	r3, [r5, #2]
    4460:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    4464:	70ab      	strb	r3, [r5, #2]
}
    4466:	4648      	mov	r0, r9
    4468:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    446c:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
    4470:	2b70      	cmp	r3, #112	; 0x70
    4472:	e7d7      	b.n	4424 <encode_uint+0x20>
	switch (specifier) {
    4474:	2608      	movs	r6, #8
    4476:	e7d8      	b.n	442a <encode_uint+0x26>
		value /= radix;
    4478:	4680      	mov	r8, r0
    447a:	460f      	mov	r7, r1
    447c:	e7d7      	b.n	442e <encode_uint+0x2a>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    447e:	f1bb 0f01 	cmp.w	fp, #1
    4482:	bf0c      	ite	eq
    4484:	3437      	addeq	r4, #55	; 0x37
    4486:	3457      	addne	r4, #87	; 0x57
    4488:	e7db      	b.n	4442 <encode_uint+0x3e>
		} else if (radix == 16) {
    448a:	2e10      	cmp	r6, #16
    448c:	d1eb      	bne.n	4466 <encode_uint+0x62>
			conv->altform_0c = true;
    448e:	78ab      	ldrb	r3, [r5, #2]
    4490:	f043 0310 	orr.w	r3, r3, #16
    4494:	e7e6      	b.n	4464 <encode_uint+0x60>
    4496:	bf00      	nop
    4498:	0000aa80 	.word	0x0000aa80

0000449c <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    449c:	f002 ba0e 	b.w	68bc <SystemInit>

000044a0 <z_log_init.isra.0>:
	}

	return mask;
}

static uint32_t z_log_init(bool blocking, bool can_sleep)
    44a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    44a4:	4681      	mov	r9, r0
		return 0;
	}

	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);

	if (atomic_inc(&initialized) != 0) {
    44a6:	482f      	ldr	r0, [pc, #188]	; (4564 <z_log_init.isra.0+0xc4>)
static uint32_t z_log_init(bool blocking, bool can_sleep)
    44a8:	460f      	mov	r7, r1
	if (atomic_inc(&initialized) != 0) {
    44aa:	f004 fe8f 	bl	91cc <atomic_inc>
    44ae:	4606      	mov	r6, r0
    44b0:	b970      	cbnz	r0, 44d0 <z_log_init.isra.0+0x30>
		z_log_links_initiate();
	}


	/* Assign ids to backends. */
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    44b2:	4c2d      	ldr	r4, [pc, #180]	; (4568 <z_log_init.isra.0+0xc8>)
    44b4:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 456c <z_log_init.isra.0+0xcc>
	uint32_t mask = 0;
    44b8:	4605      	mov	r5, r0
    44ba:	46a0      	mov	r8, r4
			if (log_backend_is_ready(backend) == 0) {
				log_backend_enable(backend,
						   backend->cb->ctx,
						   CONFIG_LOG_MAX_LEVEL);
			} else {
				mask |= BIT(i);
    44bc:	f04f 0b01 	mov.w	fp, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    44c0:	4554      	cmp	r4, sl
    44c2:	d307      	bcc.n	44d4 <z_log_init.isra.0+0x34>
			i++;
		}
	}

	/* If blocking init, wait until all backends are activated. */
	if (blocking) {
    44c4:	f1b9 0f00 	cmp.w	r9, #0
    44c8:	d002      	beq.n	44d0 <z_log_init.isra.0+0x30>
		mask_cpy &= ~BIT(i);
    44ca:	f04f 0a01 	mov.w	sl, #1
		while (mask) {
    44ce:	b9e5      	cbnz	r5, 450a <z_log_init.isra.0+0x6a>
			}
		}
	}

	return mask;
}
    44d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (backend->autostart) {
    44d4:	7b23      	ldrb	r3, [r4, #12]
    44d6:	b173      	cbz	r3, 44f6 <z_log_init.isra.0+0x56>
 * @param[in] backend  Pointer to the backend instance.
 */
static inline void log_backend_init(const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	if (backend->api->init) {
    44d8:	6823      	ldr	r3, [r4, #0]
    44da:	68db      	ldr	r3, [r3, #12]
    44dc:	b10b      	cbz	r3, 44e2 <z_log_init.isra.0+0x42>
		backend->api->init(backend);
    44de:	4620      	mov	r0, r4
    44e0:	4798      	blx	r3
 * @retval -EBUSY if backend is not yet ready.
 */
static inline int log_backend_is_ready(const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	if (backend->api->is_ready != NULL) {
    44e2:	6823      	ldr	r3, [r4, #0]
    44e4:	691b      	ldr	r3, [r3, #16]
    44e6:	b943      	cbnz	r3, 44fa <z_log_init.isra.0+0x5a>
				log_backend_enable(backend,
    44e8:	6863      	ldr	r3, [r4, #4]
    44ea:	2204      	movs	r2, #4
    44ec:	6819      	ldr	r1, [r3, #0]
    44ee:	4620      	mov	r0, r4
    44f0:	f000 f8c4 	bl	467c <log_backend_enable>
			i++;
    44f4:	3601      	adds	r6, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    44f6:	3410      	adds	r4, #16
    44f8:	e7e2      	b.n	44c0 <z_log_init.isra.0+0x20>
		return backend->api->is_ready(backend);
    44fa:	4620      	mov	r0, r4
    44fc:	4798      	blx	r3
			if (log_backend_is_ready(backend) == 0) {
    44fe:	2800      	cmp	r0, #0
    4500:	d0f2      	beq.n	44e8 <z_log_init.isra.0+0x48>
				mask |= BIT(i);
    4502:	fa0b f306 	lsl.w	r3, fp, r6
    4506:	431d      	orrs	r5, r3
    4508:	e7f4      	b.n	44f4 <z_log_init.isra.0+0x54>
    450a:	46a9      	mov	r9, r5
		uint32_t i = __builtin_ctz(mask_cpy);
    450c:	fa95 f4a5 	rbit	r4, r5
    4510:	fab4 f484 	clz	r4, r4
		mask_cpy &= ~BIT(i);
    4514:	fa0a f304 	lsl.w	r3, sl, r4
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    4518:	0126      	lsls	r6, r4, #4
    451a:	eb08 1404 	add.w	r4, r8, r4, lsl #4
		mask_cpy &= ~BIT(i);
    451e:	ea6f 0b03 	mvn.w	fp, r3
    4522:	ea25 0503 	bic.w	r5, r5, r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    4526:	7b23      	ldrb	r3, [r4, #12]
    4528:	b163      	cbz	r3, 4544 <z_log_init.isra.0+0xa4>
	if (backend->api->is_ready != NULL) {
    452a:	f858 3006 	ldr.w	r3, [r8, r6]
    452e:	691b      	ldr	r3, [r3, #16]
    4530:	b993      	cbnz	r3, 4558 <z_log_init.isra.0+0xb8>
					   backend->cb->ctx,
    4532:	4446      	add	r6, r8
			log_backend_enable(backend,
    4534:	2204      	movs	r2, #4
    4536:	6873      	ldr	r3, [r6, #4]
    4538:	4620      	mov	r0, r4
    453a:	6819      	ldr	r1, [r3, #0]
			mask &= ~BIT(i);
    453c:	ea09 090b 	and.w	r9, r9, fp
			log_backend_enable(backend,
    4540:	f000 f89c 	bl	467c <log_backend_enable>
	while (mask_cpy) {
    4544:	2d00      	cmp	r5, #0
    4546:	d1e1      	bne.n	450c <z_log_init.isra.0+0x6c>
			if (IS_ENABLED(CONFIG_MULTITHREADING) && can_sleep) {
    4548:	b127      	cbz	r7, 4554 <z_log_init.isra.0+0xb4>
    454a:	f44f 70a4 	mov.w	r0, #328	; 0x148
    454e:	2100      	movs	r1, #0
    4550:	f003 ffac 	bl	84ac <z_impl_k_sleep>
    4554:	464d      	mov	r5, r9
    4556:	e7ba      	b.n	44ce <z_log_init.isra.0+0x2e>
		return backend->api->is_ready(backend);
    4558:	4620      	mov	r0, r4
    455a:	4798      	blx	r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    455c:	2800      	cmp	r0, #0
    455e:	d1f1      	bne.n	4544 <z_log_init.isra.0+0xa4>
    4560:	e7e7      	b.n	4532 <z_log_init.isra.0+0x92>
    4562:	bf00      	nop
    4564:	20002114 	.word	0x20002114
    4568:	00009efc 	.word	0x00009efc
    456c:	00009f0c 	.word	0x00009f0c

00004570 <log_format_func_t_get>:
}
    4570:	4b01      	ldr	r3, [pc, #4]	; (4578 <log_format_func_t_get+0x8>)
    4572:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    4576:	4770      	bx	lr
    4578:	00009f58 	.word	0x00009f58

0000457c <log_set_timestamp_func>:
		thread_set(process_tid);
	}
}

int log_set_timestamp_func(log_timestamp_get_t timestamp_getter, uint32_t freq)
{
    457c:	b508      	push	{r3, lr}
    457e:	4603      	mov	r3, r0
    4580:	4608      	mov	r0, r1
	if (timestamp_getter == NULL) {
    4582:	b12b      	cbz	r3, 4590 <log_set_timestamp_func+0x14>
		return -EINVAL;
	}

	timestamp_func = timestamp_getter;
    4584:	4a04      	ldr	r2, [pc, #16]	; (4598 <log_set_timestamp_func+0x1c>)
    4586:	6013      	str	r3, [r2, #0]
	if (CONFIG_LOG_PROCESSING_LATENCY_US) {
		proc_latency = (freq * CONFIG_LOG_PROCESSING_LATENCY_US) / 1000000;
	}

	if (IS_ENABLED(CONFIG_LOG_OUTPUT)) {
		log_output_timestamp_freq_set(freq);
    4588:	f000 fa80 	bl	4a8c <log_output_timestamp_freq_set>
	}

	return 0;
    458c:	2000      	movs	r0, #0
}
    458e:	bd08      	pop	{r3, pc}
		return -EINVAL;
    4590:	f06f 0015 	mvn.w	r0, #21
    4594:	e7fb      	b.n	458e <log_set_timestamp_func+0x12>
    4596:	bf00      	nop
    4598:	2000000c 	.word	0x2000000c

0000459c <log_core_init>:
	panic_mode = false;
    459c:	4a04      	ldr	r2, [pc, #16]	; (45b0 <log_core_init+0x14>)
		log_set_timestamp_func(default_get_timestamp,
    459e:	4805      	ldr	r0, [pc, #20]	; (45b4 <log_core_init+0x18>)
	panic_mode = false;
    45a0:	2300      	movs	r3, #0
    45a2:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
    45a4:	4a04      	ldr	r2, [pc, #16]	; (45b8 <log_core_init+0x1c>)
		log_set_timestamp_func(default_get_timestamp,
    45a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
	dropped_cnt = 0;
    45aa:	6013      	str	r3, [r2, #0]
		log_set_timestamp_func(default_get_timestamp,
    45ac:	f7ff bfe6 	b.w	457c <log_set_timestamp_func>
    45b0:	20002322 	.word	0x20002322
    45b4:	000091c9 	.word	0x000091c9
    45b8:	2000210c 	.word	0x2000210c

000045bc <z_impl_log_panic>:

void z_impl_log_panic(void)
{
    45bc:	b570      	push	{r4, r5, r6, lr}
	if (panic_mode) {
    45be:	4d0b      	ldr	r5, [pc, #44]	; (45ec <z_impl_log_panic+0x30>)
    45c0:	7829      	ldrb	r1, [r5, #0]
    45c2:	b941      	cbnz	r1, 45d6 <z_impl_log_panic+0x1a>
	}

	/* If panic happened early logger might not be initialized.
	 * Forcing initialization of the logger and auto-starting backends.
	 */
	(void)z_log_init(true, false);
    45c4:	2001      	movs	r0, #1
    45c6:	f7ff ff6b 	bl	44a0 <z_log_init.isra.0>
		if (IS_ENABLED(CONFIG_LOG_FRONTEND_ONLY)) {
			goto out;
		}
	}

	STRUCT_SECTION_FOREACH(log_backend, backend) {
    45ca:	4c09      	ldr	r4, [pc, #36]	; (45f0 <z_impl_log_panic+0x34>)
    45cc:	4e09      	ldr	r6, [pc, #36]	; (45f4 <z_impl_log_panic+0x38>)
    45ce:	42b4      	cmp	r4, r6
    45d0:	d302      	bcc.n	45d8 <z_impl_log_panic+0x1c>
		while (log_process() == true) {
		}
	}

out:
	panic_mode = true;
    45d2:	2301      	movs	r3, #1
    45d4:	702b      	strb	r3, [r5, #0]
}
    45d6:	bd70      	pop	{r4, r5, r6, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    45d8:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    45da:	795b      	ldrb	r3, [r3, #5]
    45dc:	b11b      	cbz	r3, 45e6 <z_impl_log_panic+0x2a>
	backend->api->panic(backend);
    45de:	6823      	ldr	r3, [r4, #0]
    45e0:	4620      	mov	r0, r4
    45e2:	689b      	ldr	r3, [r3, #8]
    45e4:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    45e6:	3410      	adds	r4, #16
    45e8:	e7f1      	b.n	45ce <z_impl_log_panic+0x12>
    45ea:	bf00      	nop
    45ec:	20002322 	.word	0x20002322
    45f0:	00009efc 	.word	0x00009efc
    45f4:	00009f0c 	.word	0x00009f0c

000045f8 <z_log_dropped>:
}
#include <syscalls/log_buffered_cnt_mrsh.c>
#endif

void z_log_dropped(bool buffered)
{
    45f8:	b510      	push	{r4, lr}
    45fa:	4604      	mov	r4, r0
	atomic_inc(&dropped_cnt);
    45fc:	4808      	ldr	r0, [pc, #32]	; (4620 <z_log_dropped+0x28>)
    45fe:	f004 fde5 	bl	91cc <atomic_inc>
	if (buffered) {
    4602:	b15c      	cbz	r4, 461c <z_log_dropped+0x24>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    4604:	f3bf 8f5b 	dmb	ish
    4608:	4b06      	ldr	r3, [pc, #24]	; (4624 <z_log_dropped+0x2c>)
    460a:	e853 1f00 	ldrex	r1, [r3]
    460e:	3901      	subs	r1, #1
    4610:	e843 1200 	strex	r2, r1, [r3]
    4614:	2a00      	cmp	r2, #0
    4616:	d1f8      	bne.n	460a <z_log_dropped+0x12>
    4618:	f3bf 8f5b 	dmb	ish
		atomic_dec(&buffered_cnt);
	}
}
    461c:	bd10      	pop	{r4, pc}
    461e:	bf00      	nop
    4620:	2000210c 	.word	0x2000210c
    4624:	20002110 	.word	0x20002110

00004628 <z_log_msg_commit>:
	mpsc_pbuf_commit(buffer, &m->buf);
	z_log_msg_post_finalize();
}

void z_log_msg_commit(struct log_msg *msg)
{
    4628:	b570      	push	{r4, r5, r6, lr}
	msg->hdr.timestamp = timestamp_func();
    462a:	4b0a      	ldr	r3, [pc, #40]	; (4654 <z_log_msg_commit+0x2c>)
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    462c:	4c0a      	ldr	r4, [pc, #40]	; (4658 <z_log_msg_commit+0x30>)
	msg->hdr.timestamp = timestamp_func();
    462e:	681b      	ldr	r3, [r3, #0]
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    4630:	4e0a      	ldr	r6, [pc, #40]	; (465c <z_log_msg_commit+0x34>)
{
    4632:	4605      	mov	r5, r0
	msg->hdr.timestamp = timestamp_func();
    4634:	4798      	blx	r3
    4636:	60a8      	str	r0, [r5, #8]
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    4638:	42b4      	cmp	r4, r6
    463a:	d300      	bcc.n	463e <z_log_msg_commit+0x16>
	msg_commit(&log_buffer, msg);
}
    463c:	bd70      	pop	{r4, r5, r6, pc}
	return backend->cb->active;
    463e:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend) &&
    4640:	795b      	ldrb	r3, [r3, #5]
    4642:	b123      	cbz	r3, 464e <z_log_msg_commit+0x26>
	backend->api->process(backend, msg);
    4644:	6823      	ldr	r3, [r4, #0]
    4646:	4629      	mov	r1, r5
    4648:	681b      	ldr	r3, [r3, #0]
    464a:	4620      	mov	r0, r4
    464c:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    464e:	3410      	adds	r4, #16
    4650:	e7f2      	b.n	4638 <z_log_msg_commit+0x10>
    4652:	bf00      	nop
    4654:	2000000c 	.word	0x2000000c
    4658:	00009efc 	.word	0x00009efc
    465c:	00009f0c 	.word	0x00009f0c

00004660 <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
    4660:	4a04      	ldr	r2, [pc, #16]	; (4674 <log_source_name_get+0x14>)
    4662:	4b05      	ldr	r3, [pc, #20]	; (4678 <log_source_name_get+0x18>)
    4664:	1a9b      	subs	r3, r3, r2
}

const char *log_source_name_get(uint32_t domain_id, uint32_t source_id)
{
	if (z_log_is_local_domain(domain_id)) {
		if (source_id < log_src_cnt_get(domain_id)) {
    4666:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
			return __log_const_start[source_id].name;
    466a:	bf34      	ite	cc
    466c:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
		} else {
			return NULL;
    4670:	2000      	movcs	r0, #0
		}
	}

	return link_source_name_get(domain_id, source_id);
}
    4672:	4770      	bx	lr
    4674:	00009e84 	.word	0x00009e84
    4678:	00009efc 	.word	0x00009efc

0000467c <log_backend_enable>:
			uint32_t level)
{
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
    467c:	4b08      	ldr	r3, [pc, #32]	; (46a0 <log_backend_enable+0x24>)
    467e:	1ac3      	subs	r3, r0, r3
{
    4680:	b410      	push	{r4}
	id += backend - log_backend_get(0);
    4682:	111b      	asrs	r3, r3, #4
	backend->cb->id = id;
    4684:	6844      	ldr	r4, [r0, #4]
    4686:	3301      	adds	r3, #1

	log_backend_id_set(backend, id);
    4688:	7123      	strb	r3, [r4, #4]
	backend->cb->level = level;
    468a:	6843      	ldr	r3, [r0, #4]
    468c:	719a      	strb	r2, [r3, #6]
	backend->cb->ctx = ctx;
    468e:	6843      	ldr	r3, [r0, #4]
    4690:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
    4692:	6843      	ldr	r3, [r0, #4]
    4694:	2201      	movs	r2, #1
    4696:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
}
    4698:	f85d 4b04 	ldr.w	r4, [sp], #4
	z_log_notify_backend_enabled();
    469c:	f004 bdb8 	b.w	9210 <z_log_notify_backend_enabled>
    46a0:	00009efc 	.word	0x00009efc

000046a4 <z_impl_z_log_msg_runtime_vcreate>:
#endif

void z_impl_z_log_msg_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
    46a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    46a8:	b085      	sub	sp, #20
    46aa:	af02      	add	r7, sp, #8
    46ac:	e9d7 a90e 	ldrd	sl, r9, [r7, #56]	; 0x38
    46b0:	6b3d      	ldr	r5, [r7, #48]	; 0x30
    46b2:	4604      	mov	r4, r0
    46b4:	460e      	mov	r6, r1
    46b6:	4693      	mov	fp, r2
    46b8:	4698      	mov	r8, r3
	int plen;

	if (fmt) {
    46ba:	f1ba 0f00 	cmp.w	sl, #0
    46be:	d035      	beq.n	472c <z_impl_z_log_msg_runtime_vcreate+0x88>
		va_list ap2;

		va_copy(ap2, ap);
    46c0:	f8c7 9004 	str.w	r9, [r7, #4]
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET,
    46c4:	f8cd 9000 	str.w	r9, [sp]
    46c8:	2110      	movs	r1, #16
    46ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    46cc:	4653      	mov	r3, sl
    46ce:	2000      	movs	r0, #0
    46d0:	f7ff fb98 	bl	3e04 <cbvprintf_package>
    46d4:	4601      	mov	r1, r0
	}

	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
	struct log_msg *msg;
	uint8_t *pkg;
	struct log_msg_desc desc =
    46d6:	4a16      	ldr	r2, [pc, #88]	; (4730 <z_impl_z_log_msg_runtime_vcreate+0x8c>)
    46d8:	f004 0407 	and.w	r4, r4, #7
    46dc:	f00b 0b07 	and.w	fp, fp, #7
    46e0:	00e4      	lsls	r4, r4, #3
    46e2:	ea02 2241 	and.w	r2, r2, r1, lsl #9
    46e6:	ea44 148b 	orr.w	r4, r4, fp, lsl #6
    46ea:	4314      	orrs	r4, r2
    46ec:	4a11      	ldr	r2, [pc, #68]	; (4734 <z_impl_z_log_msg_runtime_vcreate+0x90>)
    46ee:	ea02 42c5 	and.w	r2, r2, r5, lsl #19
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
    46f2:	3517      	adds	r5, #23
    46f4:	440d      	add	r5, r1
			pkg = alloca(plen);
		} else {
			pkg = msg ? msg->data : NULL;
		}
	} else {
		msg = alloca(msg_wlen * sizeof(int));
    46f6:	f025 0507 	bic.w	r5, r5, #7
    46fa:	ebad 0d05 	sub.w	sp, sp, r5
	struct log_msg_desc desc =
    46fe:	4314      	orrs	r4, r2
		msg = alloca(msg_wlen * sizeof(int));
    4700:	ad02      	add	r5, sp, #8
		pkg = msg->data;
	}

	if (pkg && fmt) {
    4702:	f1ba 0f00 	cmp.w	sl, #0
    4706:	d007      	beq.n	4718 <z_impl_z_log_msg_runtime_vcreate+0x74>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
    4708:	f8cd 9000 	str.w	r9, [sp]
    470c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    470e:	4653      	mov	r3, sl
    4710:	f105 0010 	add.w	r0, r5, #16
    4714:	f7ff fb76 	bl	3e04 <cbvprintf_package>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg_finalize(msg, source, desc, data);
    4718:	4643      	mov	r3, r8
    471a:	4622      	mov	r2, r4
    471c:	4631      	mov	r1, r6
    471e:	4628      	mov	r0, r5
    4720:	f004 fd79 	bl	9216 <z_log_msg_finalize>
	}
}
    4724:	370c      	adds	r7, #12
    4726:	46bd      	mov	sp, r7
    4728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		plen = 0;
    472c:	4651      	mov	r1, sl
    472e:	e7d2      	b.n	46d6 <z_impl_z_log_msg_runtime_vcreate+0x32>
    4730:	0007fe00 	.word	0x0007fe00
    4734:	7ff80000 	.word	0x7ff80000

00004738 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    4738:	b40e      	push	{r1, r2, r3}
    473a:	b503      	push	{r0, r1, lr}
    473c:	ab03      	add	r3, sp, #12
    473e:	4601      	mov	r1, r0
    4740:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
    4744:	4804      	ldr	r0, [pc, #16]	; (4758 <print_formatted+0x20>)
	va_start(args, fmt);
    4746:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    4748:	f004 fda8 	bl	929c <cbvprintf>
	va_end(args);

	return length;
}
    474c:	b002      	add	sp, #8
    474e:	f85d eb04 	ldr.w	lr, [sp], #4
    4752:	b003      	add	sp, #12
    4754:	4770      	bx	lr
    4756:	bf00      	nop
    4758:	0000924b 	.word	0x0000924b

0000475c <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    475c:	06ca      	lsls	r2, r1, #27
    475e:	d405      	bmi.n	476c <newline_print+0x10>
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    4760:	068b      	lsls	r3, r1, #26
		print_formatted(ctx, "\n");
    4762:	bf4c      	ite	mi
    4764:	4902      	ldrmi	r1, [pc, #8]	; (4770 <newline_print+0x14>)
	} else {
		print_formatted(ctx, "\r\n");
    4766:	4903      	ldrpl	r1, [pc, #12]	; (4774 <newline_print+0x18>)
    4768:	f7ff bfe6 	b.w	4738 <print_formatted>
	}
}
    476c:	4770      	bx	lr
    476e:	bf00      	nop
    4770:	0000a347 	.word	0x0000a347
    4774:	0000a346 	.word	0x0000a346

00004778 <log_output_process>:
			uint8_t level,
			const uint8_t *package,
			const uint8_t *data,
			size_t data_len,
			uint32_t flags)
{
    4778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    477c:	b08b      	sub	sp, #44	; 0x2c
    477e:	469a      	mov	sl, r3
    4780:	e9dd 7315 	ldrd	r7, r3, [sp, #84]	; 0x54
    4784:	f89d b050 	ldrb.w	fp, [sp, #80]	; 0x50
    4788:	9306      	str	r3, [sp, #24]
    478a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    478c:	9e18      	ldr	r6, [sp, #96]	; 0x60
    478e:	9208      	str	r2, [sp, #32]
    4790:	4604      	mov	r4, r0
    4792:	460d      	mov	r5, r1
    4794:	9305      	str	r3, [sp, #20]
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;
	cbprintf_cb cb;

	if (!raw_string) {
    4796:	f1bb 0f00 	cmp.w	fp, #0
    479a:	f000 8085 	beq.w	48a8 <log_output_process+0x130>
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    479e:	f006 0301 	and.w	r3, r6, #1
    47a2:	9309      	str	r3, [sp, #36]	; 0x24
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    47a4:	f006 0308 	and.w	r3, r6, #8
    47a8:	9307      	str	r3, [sp, #28]
	const char *tag = IS_ENABLED(CONFIG_LOG) ? z_log_get_tag() : NULL;
    47aa:	f004 fd32 	bl	9212 <z_log_get_tag>
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
    47ae:	f006 0902 	and.w	r9, r6, #2
	if (tag) {
    47b2:	4602      	mov	r2, r0
    47b4:	2800      	cmp	r0, #0
    47b6:	d047      	beq.n	4848 <log_output_process+0xd0>
		length += print_formatted(output, "%s ", tag);
    47b8:	4984      	ldr	r1, [pc, #528]	; (49cc <log_output_process+0x254>)
    47ba:	4620      	mov	r0, r4
    47bc:	f7ff ffbc 	bl	4738 <print_formatted>
    47c0:	4680      	mov	r8, r0
	if (stamp) {
    47c2:	f1b9 0f00 	cmp.w	r9, #0
    47c6:	d008      	beq.n	47da <log_output_process+0x62>
	if (!format) {
    47c8:	f016 0f44 	tst.w	r6, #68	; 0x44
    47cc:	d13e      	bne.n	484c <log_output_process+0xd4>
		length = print_formatted(output, "[%08lu] ", timestamp);
    47ce:	4980      	ldr	r1, [pc, #512]	; (49d0 <log_output_process+0x258>)
    47d0:	462a      	mov	r2, r5
    47d2:	4620      	mov	r0, r4
    47d4:	f7ff ffb0 	bl	4738 <print_formatted>
		length += timestamp_print(output, flags, timestamp);
    47d8:	4480      	add	r8, r0
	if (color) {
    47da:	9b09      	ldr	r3, [sp, #36]	; 0x24
    47dc:	b153      	cbz	r3, 47f4 <log_output_process+0x7c>
		const char *log_color = start && (colors[level] != NULL) ?
    47de:	4b7d      	ldr	r3, [pc, #500]	; (49d4 <log_output_process+0x25c>)
		print_formatted(output, "%s", log_color);
    47e0:	497d      	ldr	r1, [pc, #500]	; (49d8 <log_output_process+0x260>)
		const char *log_color = start && (colors[level] != NULL) ?
    47e2:	f853 202b 	ldr.w	r2, [r3, fp, lsl #2]
		print_formatted(output, "%s", log_color);
    47e6:	4b7d      	ldr	r3, [pc, #500]	; (49dc <log_output_process+0x264>)
    47e8:	4620      	mov	r0, r4
    47ea:	2a00      	cmp	r2, #0
    47ec:	bf08      	it	eq
    47ee:	461a      	moveq	r2, r3
    47f0:	f7ff ffa2 	bl	4738 <print_formatted>
	if (level_on) {
    47f4:	9b07      	ldr	r3, [sp, #28]
    47f6:	2b00      	cmp	r3, #0
    47f8:	d054      	beq.n	48a4 <log_output_process+0x12c>
		total += print_formatted(output, "<%s> ", severity[level]);
    47fa:	4b79      	ldr	r3, [pc, #484]	; (49e0 <log_output_process+0x268>)
    47fc:	4979      	ldr	r1, [pc, #484]	; (49e4 <log_output_process+0x26c>)
    47fe:	f853 202b 	ldr.w	r2, [r3, fp, lsl #2]
    4802:	4620      	mov	r0, r4
    4804:	f7ff ff98 	bl	4738 <print_formatted>
    4808:	4605      	mov	r5, r0
	if (domain) {
    480a:	9b08      	ldr	r3, [sp, #32]
    480c:	b12b      	cbz	r3, 481a <log_output_process+0xa2>
		total += print_formatted(output, "%s/", domain);
    480e:	4976      	ldr	r1, [pc, #472]	; (49e8 <log_output_process+0x270>)
    4810:	461a      	mov	r2, r3
    4812:	4620      	mov	r0, r4
    4814:	f7ff ff90 	bl	4738 <print_formatted>
    4818:	4405      	add	r5, r0
	if (source) {
    481a:	f1ba 0f00 	cmp.w	sl, #0
    481e:	d005      	beq.n	482c <log_output_process+0xb4>
		total += print_formatted(output,
    4820:	4972      	ldr	r1, [pc, #456]	; (49ec <log_output_process+0x274>)
    4822:	4652      	mov	r2, sl
    4824:	4620      	mov	r0, r4
    4826:	f7ff ff87 	bl	4738 <print_formatted>
    482a:	4405      	add	r5, r0
	length += ids_print(output, level_on, func_on, domain, source, level);
    482c:	4445      	add	r5, r8
		 * appending <CR> to the new line character).
		 */
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
	}

	if (package) {
    482e:	2f00      	cmp	r7, #0
    4830:	d148      	bne.n	48c4 <log_output_process+0x14c>

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	if (data_len) {
    4832:	9b05      	ldr	r3, [sp, #20]
    4834:	2b00      	cmp	r3, #0
    4836:	d14e      	bne.n	48d6 <log_output_process+0x15e>
	if (color) {
    4838:	07f3      	lsls	r3, r6, #31
    483a:	f100 80c0 	bmi.w	49be <log_output_process+0x246>
	newline_print(output, flags);
    483e:	4631      	mov	r1, r6
    4840:	4620      	mov	r0, r4
    4842:	f7ff ff8b 	bl	475c <newline_print>
}
    4846:	e0b4      	b.n	49b2 <log_output_process+0x23a>
	uint32_t length = 0U;
    4848:	4680      	mov	r8, r0
    484a:	e7ba      	b.n	47c2 <log_output_process+0x4a>
	} else if (freq != 0U) {
    484c:	4b68      	ldr	r3, [pc, #416]	; (49f0 <log_output_process+0x278>)
    484e:	6818      	ldr	r0, [r3, #0]
    4850:	2800      	cmp	r0, #0
    4852:	d0c1      	beq.n	47d8 <log_output_process+0x60>
		timestamp /= timestamp_div;
    4854:	4b67      	ldr	r3, [pc, #412]	; (49f4 <log_output_process+0x27c>)
		ms = (remainder * 1000U) / freq;
    4856:	f44f 797a 	mov.w	r9, #1000	; 0x3e8
		timestamp /= timestamp_div;
    485a:	681b      	ldr	r3, [r3, #0]
    485c:	fbb5 f5f3 	udiv	r5, r5, r3
		total_seconds = timestamp / freq;
    4860:	f44f 6161 	mov.w	r1, #3600	; 0xe10
    4864:	fbb5 f3f0 	udiv	r3, r5, r0
		remainder = timestamp % freq;
    4868:	fb00 5513 	mls	r5, r0, r3, r5
		ms = (remainder * 1000U) / freq;
    486c:	fb09 f505 	mul.w	r5, r9, r5
		mins = seconds / 60U;
    4870:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
    4874:	fbb3 f2f1 	udiv	r2, r3, r1
    4878:	fb01 3112 	mls	r1, r1, r2, r3
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    487c:	fbb5 fef0 	udiv	lr, r5, r0
		mins = seconds / 60U;
    4880:	fbb1 f3fc 	udiv	r3, r1, ip
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    4884:	fb00 551e 	mls	r5, r0, lr, r5
				length = print_formatted(output,
    4888:	fb0c 1113 	mls	r1, ip, r3, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    488c:	fb09 f505 	mul.w	r5, r9, r5
				length = print_formatted(output,
    4890:	9100      	str	r1, [sp, #0]
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    4892:	fbb5 f5f0 	udiv	r5, r5, r0
				length = print_formatted(output,
    4896:	4958      	ldr	r1, [pc, #352]	; (49f8 <log_output_process+0x280>)
    4898:	e9cd e501 	strd	lr, r5, [sp, #4]
    489c:	4620      	mov	r0, r4
    489e:	f7ff ff4b 	bl	4738 <print_formatted>
    48a2:	e799      	b.n	47d8 <log_output_process+0x60>
	int total = 0;
    48a4:	9d07      	ldr	r5, [sp, #28]
    48a6:	e7b0      	b.n	480a <log_output_process+0x92>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    48a8:	f1ba 0f01 	cmp.w	sl, #1
    48ac:	d106      	bne.n	48bc <log_output_process+0x144>
	if (package) {
    48ae:	2f00      	cmp	r7, #0
    48b0:	d165      	bne.n	497e <log_output_process+0x206>
	if (data_len) {
    48b2:	9b05      	ldr	r3, [sp, #20]
    48b4:	2b00      	cmp	r3, #0
    48b6:	d07c      	beq.n	49b2 <log_output_process+0x23a>
		prefix_offset = 0;
    48b8:	2500      	movs	r5, #0
    48ba:	e00c      	b.n	48d6 <log_output_process+0x15e>
	if (package) {
    48bc:	2f00      	cmp	r7, #0
    48be:	d0f8      	beq.n	48b2 <log_output_process+0x13a>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    48c0:	484e      	ldr	r0, [pc, #312]	; (49fc <log_output_process+0x284>)
    48c2:	e05d      	b.n	4980 <log_output_process+0x208>
		cb = out_func;
    48c4:	484e      	ldr	r0, [pc, #312]	; (4a00 <log_output_process+0x288>)
		return cbpprintf_external(out, cbvprintf_tagged_args,
					  ctx, packaged);
	}
#endif

	return cbpprintf_external(out, cbvprintf, ctx, packaged);
    48c6:	494f      	ldr	r1, [pc, #316]	; (4a04 <log_output_process+0x28c>)
    48c8:	463b      	mov	r3, r7
    48ca:	4622      	mov	r2, r4
    48cc:	f004 fb0f 	bl	8eee <cbpprintf_external>
	if (data_len) {
    48d0:	9b05      	ldr	r3, [sp, #20]
    48d2:	2b00      	cmp	r3, #0
    48d4:	d069      	beq.n	49aa <log_output_process+0x232>
		print_formatted(output, " ");
    48d6:	f8df 8140 	ldr.w	r8, [pc, #320]	; 4a18 <log_output_process+0x2a0>
			print_formatted(output, "%02x ", data[i]);
    48da:	f8df 9140 	ldr.w	r9, [pc, #320]	; 4a1c <log_output_process+0x2a4>
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    48de:	9f05      	ldr	r7, [sp, #20]
	newline_print(output, flags);
    48e0:	4631      	mov	r1, r6
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    48e2:	2f10      	cmp	r7, #16
	newline_print(output, flags);
    48e4:	4620      	mov	r0, r4
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    48e6:	bf28      	it	cs
    48e8:	2710      	movcs	r7, #16
	newline_print(output, flags);
    48ea:	f7ff ff37 	bl	475c <newline_print>
	for (int i = 0; i < prefix_offset; i++) {
    48ee:	f04f 0a00 	mov.w	sl, #0
    48f2:	4555      	cmp	r5, sl
    48f4:	dc46      	bgt.n	4984 <log_output_process+0x20c>
			print_formatted(output, "%02x ", data[i]);
    48f6:	9b06      	ldr	r3, [sp, #24]
    48f8:	4649      	mov	r1, r9
    48fa:	781a      	ldrb	r2, [r3, #0]
    48fc:	4620      	mov	r0, r4
    48fe:	f7ff ff1b 	bl	4738 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    4902:	f04f 0a01 	mov.w	sl, #1
		if (i > 0 && !(i % 8)) {
    4906:	f01a 0f07 	tst.w	sl, #7
    490a:	d103      	bne.n	4914 <log_output_process+0x19c>
			print_formatted(output, " ");
    490c:	4641      	mov	r1, r8
    490e:	4620      	mov	r0, r4
    4910:	f7ff ff12 	bl	4738 <print_formatted>
		if (i < length) {
    4914:	4557      	cmp	r7, sl
    4916:	d93c      	bls.n	4992 <log_output_process+0x21a>
			print_formatted(output, "%02x ", data[i]);
    4918:	9b06      	ldr	r3, [sp, #24]
    491a:	4649      	mov	r1, r9
    491c:	f813 200a 	ldrb.w	r2, [r3, sl]
    4920:	4620      	mov	r0, r4
    4922:	f7ff ff09 	bl	4738 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    4926:	f10a 0a01 	add.w	sl, sl, #1
    492a:	f1ba 0f10 	cmp.w	sl, #16
    492e:	d1ea      	bne.n	4906 <log_output_process+0x18e>
	print_formatted(output, "|");
    4930:	4935      	ldr	r1, [pc, #212]	; (4a08 <log_output_process+0x290>)
    4932:	4620      	mov	r0, r4
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    4934:	f04f 0a00 	mov.w	sl, #0
	print_formatted(output, "|");
    4938:	f7ff fefe 	bl	4738 <print_formatted>
		if (i < length) {
    493c:	4652      	mov	r2, sl
			unsigned char c = (unsigned char)data[i];
    493e:	9b06      	ldr	r3, [sp, #24]
    4940:	5c9a      	ldrb	r2, [r3, r2]
			print_formatted(output, "%c",
    4942:	4b32      	ldr	r3, [pc, #200]	; (4a0c <log_output_process+0x294>)
    4944:	5c99      	ldrb	r1, [r3, r2]
    4946:	f011 0f97 	tst.w	r1, #151	; 0x97
    494a:	bf08      	it	eq
    494c:	222e      	moveq	r2, #46	; 0x2e
    494e:	4930      	ldr	r1, [pc, #192]	; (4a10 <log_output_process+0x298>)
    4950:	4620      	mov	r0, r4
    4952:	f7ff fef1 	bl	4738 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    4956:	f10a 0a01 	add.w	sl, sl, #1
    495a:	f1ba 0f10 	cmp.w	sl, #16
    495e:	d01d      	beq.n	499c <log_output_process+0x224>
		if (i > 0 && !(i % 8)) {
    4960:	f01a 0f07 	tst.w	sl, #7
    4964:	d103      	bne.n	496e <log_output_process+0x1f6>
			print_formatted(output, " ");
    4966:	4641      	mov	r1, r8
    4968:	4620      	mov	r0, r4
    496a:	f7ff fee5 	bl	4738 <print_formatted>
		if (i < length) {
    496e:	4557      	cmp	r7, sl
    4970:	4652      	mov	r2, sl
    4972:	d8e4      	bhi.n	493e <log_output_process+0x1c6>
			print_formatted(output, " ");
    4974:	4641      	mov	r1, r8
    4976:	4620      	mov	r0, r4
    4978:	f7ff fede 	bl	4738 <print_formatted>
    497c:	e7eb      	b.n	4956 <log_output_process+0x1de>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    497e:	4820      	ldr	r0, [pc, #128]	; (4a00 <log_output_process+0x288>)
		prefix_offset = 0;
    4980:	465d      	mov	r5, fp
    4982:	e7a0      	b.n	48c6 <log_output_process+0x14e>
		print_formatted(output, " ");
    4984:	4641      	mov	r1, r8
    4986:	4620      	mov	r0, r4
    4988:	f7ff fed6 	bl	4738 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    498c:	f10a 0a01 	add.w	sl, sl, #1
    4990:	e7af      	b.n	48f2 <log_output_process+0x17a>
			print_formatted(output, "   ");
    4992:	4920      	ldr	r1, [pc, #128]	; (4a14 <log_output_process+0x29c>)
    4994:	4620      	mov	r0, r4
    4996:	f7ff fecf 	bl	4738 <print_formatted>
    499a:	e7c4      	b.n	4926 <log_output_process+0x1ae>
		data += length;
    499c:	9b06      	ldr	r3, [sp, #24]
    499e:	443b      	add	r3, r7
    49a0:	9306      	str	r3, [sp, #24]
	} while (len);
    49a2:	9b05      	ldr	r3, [sp, #20]
    49a4:	1bdb      	subs	r3, r3, r7
    49a6:	9305      	str	r3, [sp, #20]
    49a8:	d199      	bne.n	48de <log_output_process+0x166>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
	}

	if (!raw_string) {
    49aa:	f1bb 0f00 	cmp.w	fp, #0
    49ae:	f47f af43 	bne.w	4838 <log_output_process+0xc0>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
    49b2:	4620      	mov	r0, r4
}
    49b4:	b00b      	add	sp, #44	; 0x2c
    49b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	log_output_flush(output);
    49ba:	f004 bc76 	b.w	92aa <log_output_flush>
		print_formatted(output, "%s", log_color);
    49be:	4a07      	ldr	r2, [pc, #28]	; (49dc <log_output_process+0x264>)
    49c0:	4905      	ldr	r1, [pc, #20]	; (49d8 <log_output_process+0x260>)
    49c2:	4620      	mov	r0, r4
    49c4:	f7ff feb8 	bl	4738 <print_formatted>
}
    49c8:	e739      	b.n	483e <log_output_process+0xc6>
    49ca:	bf00      	nop
    49cc:	0000a34e 	.word	0x0000a34e
    49d0:	0000a352 	.word	0x0000a352
    49d4:	00009f68 	.word	0x00009f68
    49d8:	0000a8cb 	.word	0x0000a8cb
    49dc:	0000a349 	.word	0x0000a349
    49e0:	00009f7c 	.word	0x00009f7c
    49e4:	0000a377 	.word	0x0000a377
    49e8:	0000a37d 	.word	0x0000a37d
    49ec:	0000a381 	.word	0x0000a381
    49f0:	2000211c 	.word	0x2000211c
    49f4:	20002118 	.word	0x20002118
    49f8:	0000a35b 	.word	0x0000a35b
    49fc:	00009267 	.word	0x00009267
    4a00:	0000924b 	.word	0x0000924b
    4a04:	0000929d 	.word	0x0000929d
    4a08:	0000a390 	.word	0x0000a390
    4a0c:	0000aa80 	.word	0x0000aa80
    4a10:	0000a392 	.word	0x0000a392
    4a14:	0000a38c 	.word	0x0000a38c
    4a18:	0000a38e 	.word	0x0000a38e
    4a1c:	0000a386 	.word	0x0000a386

00004a20 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg, uint32_t flags)
{
    4a20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 *
 * @return Log level.
 */
static inline uint8_t log_msg_get_level(struct log_msg *msg)
{
	return msg->hdr.desc.level;
    4a24:	880f      	ldrh	r7, [r1, #0]
 *
 * @return Pointer to the source data.
 */
static inline const void *log_msg_get_source(struct log_msg *msg)
{
	return msg->hdr.source;
    4a26:	684b      	ldr	r3, [r1, #4]
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg_get_timestamp(struct log_msg *msg)
{
	return msg->hdr.timestamp;
    4a28:	688e      	ldr	r6, [r1, #8]
    4a2a:	b086      	sub	sp, #24
    4a2c:	4605      	mov	r5, r0
    4a2e:	460c      	mov	r4, r1
    4a30:	4690      	mov	r8, r2
	return msg->hdr.desc.level;
    4a32:	f3c7 1782 	ubfx	r7, r7, #6, #3
		/* Remote domain is converting source pointer to ID */
		source_id = (int16_t)(uintptr_t)log_msg_get_source(msg);
	} else {
		void *source = (void *)log_msg_get_source(msg);

		if (source != NULL) {
    4a36:	b15b      	cbz	r3, 4a50 <log_output_msg_process+0x30>
    4a38:	4a13      	ldr	r2, [pc, #76]	; (4a88 <log_output_msg_process+0x68>)
    4a3a:	1a9b      	subs	r3, r3, r2
			source_id = IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
    4a3c:	f343 01cf 	sbfx	r1, r3, #3, #16
		} else {
			source_id = -1;
		}
	}

	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
    4a40:	2900      	cmp	r1, #0
    4a42:	db1f      	blt.n	4a84 <log_output_msg_process+0x64>
	return msg->hdr.desc.domain;
    4a44:	7820      	ldrb	r0, [r4, #0]
    4a46:	f3c0 00c2 	ubfx	r0, r0, #3, #3
    4a4a:	f7ff fe09 	bl	4660 <log_source_name_get>
    4a4e:	4603      	mov	r3, r0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg_get_package(struct log_msg *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
    4a50:	4621      	mov	r1, r4
	*len = msg->hdr.desc.data_len;
    4a52:	8860      	ldrh	r0, [r4, #2]
	*len = msg->hdr.desc.package_len;
    4a54:	f851 2b10 	ldr.w	r2, [r1], #16
	size_t plen, dlen;
	uint8_t *package = log_msg_get_package(msg, &plen);
	uint8_t *data = log_msg_get_data(msg, &dlen);

	log_output_process(output, timestamp, NULL, sname, level,
    4a58:	9700      	str	r7, [sp, #0]
    4a5a:	f3c2 2249 	ubfx	r2, r2, #9, #10
    4a5e:	2a00      	cmp	r2, #0
	return msg->data + msg->hdr.desc.package_len;
    4a60:	eb01 0402 	add.w	r4, r1, r2
	*len = msg->hdr.desc.data_len;
    4a64:	f3c0 00cb 	ubfx	r0, r0, #3, #12
    4a68:	bf08      	it	eq
    4a6a:	2100      	moveq	r1, #0
    4a6c:	e9cd 0803 	strd	r0, r8, [sp, #12]
    4a70:	e9cd 1401 	strd	r1, r4, [sp, #4]
    4a74:	2200      	movs	r2, #0
    4a76:	4631      	mov	r1, r6
    4a78:	4628      	mov	r0, r5
    4a7a:	f7ff fe7d 	bl	4778 <log_output_process>
			   plen > 0 ? package : NULL, data, dlen, flags);
}
    4a7e:	b006      	add	sp, #24
    4a80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
    4a84:	2300      	movs	r3, #0
    4a86:	e7e3      	b.n	4a50 <log_output_msg_process+0x30>
    4a88:	00009e84 	.word	0x00009e84

00004a8c <log_output_timestamp_freq_set>:
{
	timestamp_div = 1U;
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    4a8c:	4a07      	ldr	r2, [pc, #28]	; (4aac <log_output_timestamp_freq_set+0x20>)
    4a8e:	2100      	movs	r1, #0
    4a90:	2301      	movs	r3, #1
    4a92:	4290      	cmp	r0, r2
    4a94:	d806      	bhi.n	4aa4 <log_output_timestamp_freq_set+0x18>
    4a96:	4a06      	ldr	r2, [pc, #24]	; (4ab0 <log_output_timestamp_freq_set+0x24>)
    4a98:	b901      	cbnz	r1, 4a9c <log_output_timestamp_freq_set+0x10>
	timestamp_div = 1U;
    4a9a:	2301      	movs	r3, #1
    4a9c:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    4a9e:	4b05      	ldr	r3, [pc, #20]	; (4ab4 <log_output_timestamp_freq_set+0x28>)
    4aa0:	6018      	str	r0, [r3, #0]
}
    4aa2:	4770      	bx	lr
		frequency /= 2U;
    4aa4:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    4aa6:	005b      	lsls	r3, r3, #1
    4aa8:	2101      	movs	r1, #1
    4aaa:	e7f2      	b.n	4a92 <log_output_timestamp_freq_set+0x6>
    4aac:	000f4240 	.word	0x000f4240
    4ab0:	20002118 	.word	0x20002118
    4ab4:	2000211c 	.word	0x2000211c

00004ab8 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
    4ab8:	4b01      	ldr	r3, [pc, #4]	; (4ac0 <log_backend_rtt_init+0x8>)
    4aba:	2201      	movs	r2, #1
    4abc:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
    4abe:	4770      	bx	lr
    4ac0:	20002323 	.word	0x20002323

00004ac4 <format_set>:
	log_output_func(&log_output_rtt, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    4ac4:	4b01      	ldr	r3, [pc, #4]	; (4acc <format_set+0x8>)
	return 0;
}
    4ac6:	2000      	movs	r0, #0
	log_format_current = log_type;
    4ac8:	6019      	str	r1, [r3, #0]
}
    4aca:	4770      	bx	lr
    4acc:	20002134 	.word	0x20002134

00004ad0 <panic>:
	panic_mode = true;
    4ad0:	4b02      	ldr	r3, [pc, #8]	; (4adc <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    4ad2:	4803      	ldr	r0, [pc, #12]	; (4ae0 <panic+0x10>)
    4ad4:	2201      	movs	r2, #1
    4ad6:	701a      	strb	r2, [r3, #0]
    4ad8:	f004 bbe7 	b.w	92aa <log_output_flush>
    4adc:	20002324 	.word	0x20002324
    4ae0:	00009fac 	.word	0x00009fac

00004ae4 <process>:
{
    4ae4:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    4ae6:	4b06      	ldr	r3, [pc, #24]	; (4b00 <process+0x1c>)
    4ae8:	6818      	ldr	r0, [r3, #0]
{
    4aea:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    4aec:	f7ff fd40 	bl	4570 <log_format_func_t_get>
	log_output_func(&log_output_rtt, &msg->log, flags);
    4af0:	4621      	mov	r1, r4
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    4af2:	4603      	mov	r3, r0
}
    4af4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_output_func(&log_output_rtt, &msg->log, flags);
    4af8:	4802      	ldr	r0, [pc, #8]	; (4b04 <process+0x20>)
    4afa:	220f      	movs	r2, #15
    4afc:	4718      	bx	r3
    4afe:	bf00      	nop
    4b00:	20002134 	.word	0x20002134
    4b04:	00009fac 	.word	0x00009fac

00004b08 <data_out_block_mode>:
{
    4b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4b0a:	4d19      	ldr	r5, [pc, #100]	; (4b70 <data_out_block_mode+0x68>)
    4b0c:	4607      	mov	r7, r0
    4b0e:	460e      	mov	r6, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
    4b10:	2404      	movs	r4, #4
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    4b12:	4632      	mov	r2, r6
    4b14:	4639      	mov	r1, r7
    4b16:	2000      	movs	r0, #0
    4b18:	f002 fe70 	bl	77fc <SEGGER_RTT_WriteSkipNoLock>
		if (ret) {
    4b1c:	b1c8      	cbz	r0, 4b52 <data_out_block_mode+0x4a>
	host_present = true;
    4b1e:	2301      	movs	r3, #1
    4b20:	702b      	strb	r3, [r5, #0]
	return panic_mode;
    4b22:	4b14      	ldr	r3, [pc, #80]	; (4b74 <data_out_block_mode+0x6c>)
	if (is_panic_mode()) {
    4b24:	781b      	ldrb	r3, [r3, #0]
    4b26:	b92b      	cbnz	r3, 4b34 <data_out_block_mode+0x2c>
}
    4b28:	4630      	mov	r0, r6
    4b2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (retry_cnt == 0) {
    4b2c:	b95c      	cbnz	r4, 4b46 <data_out_block_mode+0x3e>
		host_present = false;
    4b2e:	702c      	strb	r4, [r5, #0]
    4b30:	f04f 34ff 	mov.w	r4, #4294967295
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
    4b34:	2000      	movs	r0, #0
    4b36:	f002 fed5 	bl	78e4 <SEGGER_RTT_HasDataUp>
    4b3a:	2800      	cmp	r0, #0
    4b3c:	d0f4      	beq.n	4b28 <data_out_block_mode+0x20>
    4b3e:	782b      	ldrb	r3, [r5, #0]
    4b40:	2b00      	cmp	r3, #0
    4b42:	d1f3      	bne.n	4b2c <data_out_block_mode+0x24>
    4b44:	e7f0      	b.n	4b28 <data_out_block_mode+0x20>
			on_failed_write(retry_cnt--);
    4b46:	3c01      	subs	r4, #1
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_BUSY_WAIT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_busy_wait(usec_to_wait);
    4b48:	f241 3088 	movw	r0, #5000	; 0x1388
    4b4c:	f005 f837 	bl	9bbe <z_impl_k_busy_wait>
}
    4b50:	e7f0      	b.n	4b34 <data_out_block_mode+0x2c>
		} else if (host_present) {
    4b52:	782b      	ldrb	r3, [r5, #0]
    4b54:	b113      	cbz	r3, 4b5c <data_out_block_mode+0x54>
	if (retry_cnt == 0) {
    4b56:	3c01      	subs	r4, #1
    4b58:	d104      	bne.n	4b64 <data_out_block_mode+0x5c>
		host_present = false;
    4b5a:	702c      	strb	r4, [r5, #0]
	} while ((ret == 0) && host_present);
    4b5c:	782b      	ldrb	r3, [r5, #0]
    4b5e:	2b00      	cmp	r3, #0
    4b60:	d1d7      	bne.n	4b12 <data_out_block_mode+0xa>
    4b62:	e7e1      	b.n	4b28 <data_out_block_mode+0x20>
	z_impl_k_busy_wait(usec_to_wait);
    4b64:	f241 3088 	movw	r0, #5000	; 0x1388
    4b68:	f005 f829 	bl	9bbe <z_impl_k_busy_wait>
    4b6c:	e7f6      	b.n	4b5c <data_out_block_mode+0x54>
    4b6e:	bf00      	nop
    4b70:	20002323 	.word	0x20002323
    4b74:	20002324 	.word	0x20002324

00004b78 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    4b78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4b7c:	4605      	mov	r5, r0
	__asm__ volatile(
    4b7e:	f04f 0320 	mov.w	r3, #32
    4b82:	f3ef 8611 	mrs	r6, BASEPRI
    4b86:	f383 8812 	msr	BASEPRI_MAX, r3
    4b8a:	f3bf 8f6f 	isb	sy
	return list->head;
    4b8e:	4b0e      	ldr	r3, [pc, #56]	; (4bc8 <pm_state_notify+0x50>)
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
    4b90:	4f0e      	ldr	r7, [pc, #56]	; (4bcc <pm_state_notify+0x54>)
    4b92:	681c      	ldr	r4, [r3, #0]
    4b94:	f8df 8038 	ldr.w	r8, [pc, #56]	; 4bd0 <pm_state_notify+0x58>
    4b98:	f04f 090c 	mov.w	r9, #12
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    4b9c:	b92c      	cbnz	r4, 4baa <pm_state_notify+0x32>
	__asm__ volatile(
    4b9e:	f386 8811 	msr	BASEPRI, r6
    4ba2:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    4ba6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			callback = notifier->state_exit;
    4baa:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
    4bae:	2d00      	cmp	r5, #0
    4bb0:	bf18      	it	ne
    4bb2:	4613      	movne	r3, r2
		if (callback) {
    4bb4:	b12b      	cbz	r3, 4bc2 <pm_state_notify+0x4a>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    4bb6:	f898 2014 	ldrb.w	r2, [r8, #20]
    4bba:	fb09 f202 	mul.w	r2, r9, r2
    4bbe:	5cb8      	ldrb	r0, [r7, r2]
    4bc0:	4798      	blx	r3
	return node->next;
    4bc2:	6824      	ldr	r4, [r4, #0]
    4bc4:	e7ea      	b.n	4b9c <pm_state_notify+0x24>
    4bc6:	bf00      	nop
    4bc8:	20002150 	.word	0x20002150
    4bcc:	20002144 	.word	0x20002144
    4bd0:	200022e0 	.word	0x200022e0

00004bd4 <pm_system_resume>:

void pm_system_resume(void)
{
    4bd4:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
    4bd6:	4b19      	ldr	r3, [pc, #100]	; (4c3c <pm_system_resume+0x68>)
    4bd8:	7d1c      	ldrb	r4, [r3, #20]
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    4bda:	f3bf 8f5b 	dmb	ish
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    4bde:	f004 031f 	and.w	r3, r4, #31
    4be2:	2201      	movs	r2, #1
    4be4:	409a      	lsls	r2, r3
    4be6:	4b16      	ldr	r3, [pc, #88]	; (4c40 <pm_system_resume+0x6c>)
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    4be8:	0961      	lsrs	r1, r4, #5
    4bea:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    4bee:	43d0      	mvns	r0, r2
    4bf0:	e853 1f00 	ldrex	r1, [r3]
    4bf4:	ea01 0500 	and.w	r5, r1, r0
    4bf8:	e843 5600 	strex	r6, r5, [r3]
    4bfc:	2e00      	cmp	r6, #0
    4bfe:	d1f7      	bne.n	4bf0 <pm_system_resume+0x1c>
    4c00:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    4c04:	420a      	tst	r2, r1
    4c06:	d013      	beq.n	4c30 <pm_system_resume+0x5c>
	if (pm_state_exit_post_ops != NULL) {
    4c08:	4b0e      	ldr	r3, [pc, #56]	; (4c44 <pm_system_resume+0x70>)
    4c0a:	4d0f      	ldr	r5, [pc, #60]	; (4c48 <pm_system_resume+0x74>)
    4c0c:	b18b      	cbz	r3, 4c32 <pm_system_resume+0x5e>
		pm_state_exit_post_ops(info->state, info->substate_id);
    4c0e:	230c      	movs	r3, #12
    4c10:	4363      	muls	r3, r4
    4c12:	18ea      	adds	r2, r5, r3
    4c14:	5ce8      	ldrb	r0, [r5, r3]
    4c16:	7851      	ldrb	r1, [r2, #1]
    4c18:	f004 fba6 	bl	9368 <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
    4c1c:	2000      	movs	r0, #0
    4c1e:	f7ff ffab 	bl	4b78 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    4c22:	230c      	movs	r3, #12
    4c24:	435c      	muls	r4, r3
    4c26:	192a      	adds	r2, r5, r4
    4c28:	2300      	movs	r3, #0
    4c2a:	512b      	str	r3, [r5, r4]
    4c2c:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    4c30:	bd70      	pop	{r4, r5, r6, pc}
    4c32:	f383 8811 	msr	BASEPRI, r3
    4c36:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    4c3a:	e7ef      	b.n	4c1c <pm_system_resume+0x48>
    4c3c:	200022e0 	.word	0x200022e0
    4c40:	20002158 	.word	0x20002158
    4c44:	00009369 	.word	0x00009369
    4c48:	20002144 	.word	0x20002144

00004c4c <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
    4c4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t id = CURRENT_CPU;
    4c50:	4b35      	ldr	r3, [pc, #212]	; (4d28 <pm_system_suspend+0xdc>)
{
    4c52:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
    4c54:	7d1d      	ldrb	r5, [r3, #20]
	__asm__ volatile(
    4c56:	f04f 0320 	mov.w	r3, #32
    4c5a:	f3ef 8811 	mrs	r8, BASEPRI
    4c5e:	f383 8812 	msr	BASEPRI_MAX, r3
    4c62:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
    4c66:	240c      	movs	r4, #12
    4c68:	4b30      	ldr	r3, [pc, #192]	; (4d2c <pm_system_suspend+0xe0>)
    4c6a:	4e31      	ldr	r6, [pc, #196]	; (4d30 <pm_system_suspend+0xe4>)
    4c6c:	436c      	muls	r4, r5
    4c6e:	191a      	adds	r2, r3, r4
    4c70:	5d19      	ldrb	r1, [r3, r4]
    4c72:	2900      	cmp	r1, #0
    4c74:	d04c      	beq.n	4d10 <pm_system_suspend+0xc4>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
    4c76:	ca07      	ldmia	r2, {r0, r1, r2}
    4c78:	eb06 0c04 	add.w	ip, r6, r4
    4c7c:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
    4c80:	2200      	movs	r2, #0
    4c82:	551a      	strb	r2, [r3, r4]
	__asm__ volatile(
    4c84:	f388 8811 	msr	BASEPRI, r8
    4c88:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    4c8c:	230c      	movs	r3, #12
    4c8e:	436b      	muls	r3, r5
    4c90:	18f2      	adds	r2, r6, r3
    4c92:	5cf0      	ldrb	r0, [r6, r3]
    4c94:	2800      	cmp	r0, #0
    4c96:	d039      	beq.n	4d0c <pm_system_suspend+0xc0>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
    4c98:	1c7b      	adds	r3, r7, #1
    4c9a:	d010      	beq.n	4cbe <pm_system_suspend+0x72>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    4c9c:	f8d2 c008 	ldr.w	ip, [r2, #8]
    4ca0:	4c24      	ldr	r4, [pc, #144]	; (4d34 <pm_system_suspend+0xe8>)
    4ca2:	4a25      	ldr	r2, [pc, #148]	; (4d38 <pm_system_suspend+0xec>)
    4ca4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    4ca8:	2100      	movs	r1, #0
    4caa:	fbec 4100 	umlal	r4, r1, ip, r0
    4cae:	2300      	movs	r3, #0
    4cb0:	4620      	mov	r0, r4
    4cb2:	f7fb ff13 	bl	adc <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
    4cb6:	2101      	movs	r1, #1
    4cb8:	1a38      	subs	r0, r7, r0
    4cba:	f004 ff60 	bl	9b7e <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    4cbe:	f003 fb37 	bl	8330 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
    4cc2:	2001      	movs	r0, #1
    4cc4:	f7ff ff58 	bl	4b78 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    4cc8:	f3bf 8f5b 	dmb	ish
    4ccc:	4b1b      	ldr	r3, [pc, #108]	; (4d3c <pm_system_suspend+0xf0>)
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    4cce:	096a      	lsrs	r2, r5, #5
    4cd0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
    4cd4:	f005 011f 	and.w	r1, r5, #31
    4cd8:	2201      	movs	r2, #1
    4cda:	408a      	lsls	r2, r1
    4cdc:	e853 0f00 	ldrex	r0, [r3]
    4ce0:	4310      	orrs	r0, r2
    4ce2:	e843 0100 	strex	r1, r0, [r3]
    4ce6:	2900      	cmp	r1, #0
    4ce8:	d1f8      	bne.n	4cdc <pm_system_suspend+0x90>
    4cea:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
    4cee:	4b14      	ldr	r3, [pc, #80]	; (4d40 <pm_system_suspend+0xf4>)
    4cf0:	b13b      	cbz	r3, 4d02 <pm_system_suspend+0xb6>
		pm_state_set(info->state, info->substate_id);
    4cf2:	230c      	movs	r3, #12
    4cf4:	fb03 f005 	mul.w	r0, r3, r5
    4cf8:	1833      	adds	r3, r6, r0
    4cfa:	5c30      	ldrb	r0, [r6, r0]
    4cfc:	7859      	ldrb	r1, [r3, #1]
    4cfe:	f004 fb27 	bl	9350 <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
    4d02:	f7ff ff67 	bl	4bd4 <pm_system_resume>
	k_sched_unlock();
    4d06:	f003 fb27 	bl	8358 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
    4d0a:	2001      	movs	r0, #1
}
    4d0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		info = pm_policy_next_state(id, ticks);
    4d10:	4601      	mov	r1, r0
    4d12:	4628      	mov	r0, r5
    4d14:	f000 f816 	bl	4d44 <pm_policy_next_state>
		if (info != NULL) {
    4d18:	2800      	cmp	r0, #0
    4d1a:	d0b3      	beq.n	4c84 <pm_system_suspend+0x38>
			z_cpus_pm_state[id] = *info;
    4d1c:	c807      	ldmia	r0, {r0, r1, r2}
    4d1e:	4434      	add	r4, r6
    4d20:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    4d24:	e7ae      	b.n	4c84 <pm_system_suspend+0x38>
    4d26:	bf00      	nop
    4d28:	200022e0 	.word	0x200022e0
    4d2c:	20002138 	.word	0x20002138
    4d30:	20002144 	.word	0x20002144
    4d34:	000f423f 	.word	0x000f423f
    4d38:	000f4240 	.word	0x000f4240
    4d3c:	20002158 	.word	0x20002158
    4d40:	00009351 	.word	0x00009351

00004d44 <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
    4d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4d48:	b085      	sub	sp, #20
    4d4a:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    4d4c:	a903      	add	r1, sp, #12
    4d4e:	f000 f843 	bl	4dd8 <pm_state_cpu_get_all>

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    4d52:	4b1e      	ldr	r3, [pc, #120]	; (4dcc <pm_policy_next_state+0x88>)
    4d54:	9d03      	ldr	r5, [sp, #12]
    4d56:	f8d3 a000 	ldr.w	sl, [r3]
    4d5a:	f8df 8078 	ldr.w	r8, [pc, #120]	; 4dd4 <pm_policy_next_state+0x90>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    4d5e:	1e43      	subs	r3, r0, #1
    4d60:	b21b      	sxth	r3, r3
    4d62:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    4d66:	4604      	mov	r4, r0
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    4d68:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    4d6c:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    4d70:	f04f 0b00 	mov.w	fp, #0
    4d74:	b924      	cbnz	r4, 4d80 <pm_policy_next_state+0x3c>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
    4d76:	46a1      	mov	r9, r4
}
    4d78:	4648      	mov	r0, r9
    4d7a:	b005      	add	sp, #20
    4d7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4d80:	6868      	ldr	r0, [r5, #4]
    4d82:	4a13      	ldr	r2, [pc, #76]	; (4dd0 <pm_policy_next_state+0x8c>)
    4d84:	46c4      	mov	ip, r8
    4d86:	4659      	mov	r1, fp
    4d88:	fbe0 c107 	umlal	ip, r1, r0, r7
    4d8c:	2300      	movs	r3, #0
    4d8e:	4660      	mov	r0, ip
    4d90:	f7fb fea4 	bl	adc <__aeabi_uldivmod>
    4d94:	9001      	str	r0, [sp, #4]
    4d96:	68a8      	ldr	r0, [r5, #8]
    4d98:	4a0d      	ldr	r2, [pc, #52]	; (4dd0 <pm_policy_next_state+0x8c>)
    4d9a:	46c4      	mov	ip, r8
    4d9c:	4659      	mov	r1, fp
    4d9e:	fbe0 c107 	umlal	ip, r1, r0, r7
    4da2:	2300      	movs	r3, #0
    4da4:	4660      	mov	r0, ip
    4da6:	f7fb fe99 	bl	adc <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    4daa:	f1ba 3fff 	cmp.w	sl, #4294967295
		const struct pm_state_info *state = &cpu_states[i];
    4dae:	46a9      	mov	r9, r5
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    4db0:	d001      	beq.n	4db6 <pm_policy_next_state+0x72>
    4db2:	4582      	cmp	sl, r0
    4db4:	d905      	bls.n	4dc2 <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
    4db6:	1c73      	adds	r3, r6, #1
    4db8:	d0de      	beq.n	4d78 <pm_policy_next_state+0x34>
		    (ticks >= (min_residency + exit_latency))) {
    4dba:	9b01      	ldr	r3, [sp, #4]
    4dbc:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
    4dbe:	42b0      	cmp	r0, r6
    4dc0:	d9da      	bls.n	4d78 <pm_policy_next_state+0x34>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    4dc2:	3c01      	subs	r4, #1
    4dc4:	b2a4      	uxth	r4, r4
    4dc6:	3d0c      	subs	r5, #12
    4dc8:	e7d4      	b.n	4d74 <pm_policy_next_state+0x30>
    4dca:	bf00      	nop
    4dcc:	20000010 	.word	0x20000010
    4dd0:	000f4240 	.word	0x000f4240
    4dd4:	000f423f 	.word	0x000f423f

00004dd8 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    4dd8:	b908      	cbnz	r0, 4dde <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    4dda:	4b02      	ldr	r3, [pc, #8]	; (4de4 <pm_state_cpu_get_all+0xc>)
    4ddc:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    4dde:	2000      	movs	r0, #0
    4de0:	4770      	bx	lr
    4de2:	bf00      	nop
    4de4:	00009fbc 	.word	0x00009fbc

00004de8 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    4de8:	4901      	ldr	r1, [pc, #4]	; (4df0 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    4dea:	2210      	movs	r2, #16
	str	r2, [r1]
    4dec:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    4dee:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    4df0:	e000ed10 	.word	0xe000ed10

00004df4 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    4df4:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    4df6:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    4df8:	f380 8811 	msr	BASEPRI, r0
	isb
    4dfc:	f3bf 8f6f 	isb	sy
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
    4e00:	f3bf 8f4f 	dsb	sy
    4e04:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    4e06:	b662      	cpsie	i
	isb
    4e08:	f3bf 8f6f 	isb	sy

	bx	lr
    4e0c:	4770      	bx	lr
    4e0e:	bf00      	nop

00004e10 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    4e10:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    4e12:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    4e14:	f381 8811 	msr	BASEPRI, r1

	_sleep_if_allowed wfe
    4e18:	f3bf 8f4f 	dsb	sy
    4e1c:	bf20      	wfe

	msr	BASEPRI, r0
    4e1e:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    4e22:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    4e24:	4770      	bx	lr
    4e26:	bf00      	nop

00004e28 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    4e28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4e2c:	4680      	mov	r8, r0
    4e2e:	b08c      	sub	sp, #48	; 0x30

	if (esf != NULL) {
    4e30:	460d      	mov	r5, r1
    4e32:	2900      	cmp	r1, #0
    4e34:	d077      	beq.n	4f26 <z_arm_fatal_error+0xfe>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    4e36:	688b      	ldr	r3, [r1, #8]
    4e38:	9305      	str	r3, [sp, #20]
    4e3a:	684b      	ldr	r3, [r1, #4]
    4e3c:	9304      	str	r3, [sp, #16]
    4e3e:	680b      	ldr	r3, [r1, #0]
    4e40:	9303      	str	r3, [sp, #12]
    4e42:	2400      	movs	r4, #0
    4e44:	4b3b      	ldr	r3, [pc, #236]	; (4f34 <z_arm_fatal_error+0x10c>)
    4e46:	493c      	ldr	r1, [pc, #240]	; (4f38 <z_arm_fatal_error+0x110>)
    4e48:	9302      	str	r3, [sp, #8]
    4e4a:	2201      	movs	r2, #1
    4e4c:	4623      	mov	r3, r4
    4e4e:	4620      	mov	r0, r4
    4e50:	e9cd 4400 	strd	r4, r4, [sp]
    4e54:	f004 fa36 	bl	92c4 <z_log_msg_runtime_create.constprop.0>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    4e58:	696b      	ldr	r3, [r5, #20]
    4e5a:	9305      	str	r3, [sp, #20]
    4e5c:	692b      	ldr	r3, [r5, #16]
    4e5e:	9304      	str	r3, [sp, #16]
    4e60:	68eb      	ldr	r3, [r5, #12]
    4e62:	9303      	str	r3, [sp, #12]
    4e64:	4b35      	ldr	r3, [pc, #212]	; (4f3c <z_arm_fatal_error+0x114>)
    4e66:	4934      	ldr	r1, [pc, #208]	; (4f38 <z_arm_fatal_error+0x110>)
    4e68:	9400      	str	r4, [sp, #0]
    4e6a:	e9cd 4301 	strd	r4, r3, [sp, #4]
    4e6e:	2201      	movs	r2, #1
    4e70:	4623      	mov	r3, r4
    4e72:	4620      	mov	r0, r4
    4e74:	f004 fa26 	bl	92c4 <z_log_msg_runtime_create.constprop.0>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    4e78:	69eb      	ldr	r3, [r5, #28]
    4e7a:	9303      	str	r3, [sp, #12]
    4e7c:	4b30      	ldr	r3, [pc, #192]	; (4f40 <z_arm_fatal_error+0x118>)
    4e7e:	492e      	ldr	r1, [pc, #184]	; (4f38 <z_arm_fatal_error+0x110>)
    4e80:	9400      	str	r4, [sp, #0]
    4e82:	e9cd 4301 	strd	r4, r3, [sp, #4]
    4e86:	2201      	movs	r2, #1
    4e88:	4623      	mov	r3, r4
    4e8a:	4620      	mov	r0, r4
    4e8c:	f004 fa1a 	bl	92c4 <z_log_msg_runtime_create.constprop.0>
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
    4e90:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 4f4c <z_arm_fatal_error+0x124>
    4e94:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 4f38 <z_arm_fatal_error+0x110>
    4e98:	462f      	mov	r7, r5
    4e9a:	4626      	mov	r6, r4
    4e9c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
    4ea0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    4ea4:	1ce3      	adds	r3, r4, #3
    4ea6:	9309      	str	r3, [sp, #36]	; 0x24
    4ea8:	edcd 7a0a 	vstr	s15, [sp, #40]	; 0x28
    4eac:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
    4eb0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    4eb4:	1ca3      	adds	r3, r4, #2
    4eb6:	9307      	str	r3, [sp, #28]
    4eb8:	edcd 7a08 	vstr	s15, [sp, #32]
    4ebc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
    4ec0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    4ec4:	1c63      	adds	r3, r4, #1
    4ec6:	9305      	str	r3, [sp, #20]
    4ec8:	edcd 7a06 	vstr	s15, [sp, #24]
    4ecc:	edd7 7a08 	vldr	s15, [r7, #32]
    4ed0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    4ed4:	2300      	movs	r3, #0
    4ed6:	e9cd 9402 	strd	r9, r4, [sp, #8]
    4eda:	e9cd 6600 	strd	r6, r6, [sp]
    4ede:	edcd 7a04 	vstr	s15, [sp, #16]
    4ee2:	2201      	movs	r2, #1
    4ee4:	4651      	mov	r1, sl
    4ee6:	4618      	mov	r0, r3
	for (int i = 0; i < ARRAY_SIZE(esf->fpu.s); i += 4) {
    4ee8:	3404      	adds	r4, #4
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
    4eea:	f004 f9eb 	bl	92c4 <z_log_msg_runtime_create.constprop.0>
	for (int i = 0; i < ARRAY_SIZE(esf->fpu.s); i += 4) {
    4eee:	2c10      	cmp	r4, #16
    4ef0:	f107 0710 	add.w	r7, r7, #16
    4ef4:	d1d2      	bne.n	4e9c <z_arm_fatal_error+0x74>
	LOG_ERR("fpscr:  0x%08x", esf->fpu.fpscr);
    4ef6:	6e2b      	ldr	r3, [r5, #96]	; 0x60
    4ef8:	9303      	str	r3, [sp, #12]
    4efa:	4b12      	ldr	r3, [pc, #72]	; (4f44 <z_arm_fatal_error+0x11c>)
    4efc:	490e      	ldr	r1, [pc, #56]	; (4f38 <z_arm_fatal_error+0x110>)
    4efe:	9600      	str	r6, [sp, #0]
    4f00:	e9cd 6301 	strd	r6, r3, [sp, #4]
    4f04:	2300      	movs	r3, #0
    4f06:	4618      	mov	r0, r3
    4f08:	2201      	movs	r2, #1
    4f0a:	f004 f9db 	bl	92c4 <z_log_msg_runtime_create.constprop.0>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    4f0e:	69ab      	ldr	r3, [r5, #24]
    4f10:	9303      	str	r3, [sp, #12]
    4f12:	4b0d      	ldr	r3, [pc, #52]	; (4f48 <z_arm_fatal_error+0x120>)
    4f14:	4908      	ldr	r1, [pc, #32]	; (4f38 <z_arm_fatal_error+0x110>)
    4f16:	9600      	str	r6, [sp, #0]
    4f18:	e9cd 6301 	strd	r6, r3, [sp, #4]
    4f1c:	2300      	movs	r3, #0
    4f1e:	2201      	movs	r2, #1
    4f20:	4618      	mov	r0, r3
    4f22:	f004 f9cf 	bl	92c4 <z_log_msg_runtime_create.constprop.0>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    4f26:	4629      	mov	r1, r5
    4f28:	4640      	mov	r0, r8
}
    4f2a:	b00c      	add	sp, #48	; 0x30
    4f2c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_fatal_error(reason, esf);
    4f30:	f002 bcf8 	b.w	7924 <z_fatal_error>
    4f34:	0000a3c8 	.word	0x0000a3c8
    4f38:	00009edc 	.word	0x00009edc
    4f3c:	0000a3f7 	.word	0x0000a3f7
    4f40:	0000a426 	.word	0x0000a426
    4f44:	0000a478 	.word	0x0000a478
    4f48:	0000a487 	.word	0x0000a487
    4f4c:	0000a435 	.word	0x0000a435

00004f50 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    4f50:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    4f52:	2800      	cmp	r0, #0
    4f54:	db07      	blt.n	4f66 <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4f56:	4a04      	ldr	r2, [pc, #16]	; (4f68 <arch_irq_enable+0x18>)
    4f58:	0941      	lsrs	r1, r0, #5
    4f5a:	2301      	movs	r3, #1
    4f5c:	f000 001f 	and.w	r0, r0, #31
    4f60:	4083      	lsls	r3, r0
    4f62:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    4f66:	4770      	bx	lr
    4f68:	e000e100 	.word	0xe000e100

00004f6c <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    4f6c:	4b05      	ldr	r3, [pc, #20]	; (4f84 <arch_irq_is_enabled+0x18>)
    4f6e:	0942      	lsrs	r2, r0, #5
    4f70:	f000 001f 	and.w	r0, r0, #31
    4f74:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    4f78:	2301      	movs	r3, #1
    4f7a:	fa03 f000 	lsl.w	r0, r3, r0
}
    4f7e:	4010      	ands	r0, r2
    4f80:	4770      	bx	lr
    4f82:	bf00      	nop
    4f84:	e000e100 	.word	0xe000e100

00004f88 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    4f88:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    4f8a:	2800      	cmp	r0, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4f8c:	bfa8      	it	ge
    4f8e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
    4f92:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4f96:	bfb8      	it	lt
    4f98:	4b06      	ldrlt	r3, [pc, #24]	; (4fb4 <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4f9a:	ea4f 1141 	mov.w	r1, r1, lsl #5
    4f9e:	bfac      	ite	ge
    4fa0:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4fa4:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4fa8:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4faa:	bfb4      	ite	lt
    4fac:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4fae:	f880 1300 	strbge.w	r1, [r0, #768]	; 0x300
}
    4fb2:	4770      	bx	lr
    4fb4:	e000ed14 	.word	0xe000ed14

00004fb8 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    4fb8:	bf30      	wfi
    b z_SysNmiOnReset
    4fba:	f7ff bffd 	b.w	4fb8 <z_SysNmiOnReset>
    4fbe:	bf00      	nop

00004fc0 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    4fc0:	4a14      	ldr	r2, [pc, #80]	; (5014 <z_arm_prep_c+0x54>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    4fc2:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    4fc4:	4b14      	ldr	r3, [pc, #80]	; (5018 <z_arm_prep_c+0x58>)
    4fc6:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    4fca:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    4fcc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4fd0:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    4fd4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    4fd8:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    4fdc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
    4fe0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    4fe4:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
    4fe8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR = FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk;
    4fec:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
    4ff0:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  __ASM volatile ("dsb 0xF":::"memory");
    4ff4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4ff8:	f3bf 8f6f 	isb	sy
     (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
#if __has_builtin(__builtin_arm_set_fpscr)
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  __builtin_arm_set_fpscr(fpscr);
    4ffc:	2300      	movs	r3, #0
    4ffe:	eee1 3a10 	vmsr	fpscr, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    5002:	f002 fd2f 	bl	7a64 <z_bss_zero>
	z_data_copy();
    5006:	f003 fad1 	bl	85ac <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    500a:	f000 fc15 	bl	5838 <z_arm_interrupt_init>
	z_cstart();
    500e:	f002 fd6d 	bl	7aec <z_cstart>
    5012:	bf00      	nop
    5014:	00000000 	.word	0x00000000
    5018:	e000ed00 	.word	0xe000ed00

0000501c <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    501c:	4a09      	ldr	r2, [pc, #36]	; (5044 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    501e:	490a      	ldr	r1, [pc, #40]	; (5048 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    5020:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    5022:	6809      	ldr	r1, [r1, #0]
    5024:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    5026:	4909      	ldr	r1, [pc, #36]	; (504c <arch_swap+0x30>)
	_current->arch.basepri = key;
    5028:	6758      	str	r0, [r3, #116]	; 0x74
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    502a:	684b      	ldr	r3, [r1, #4]
    502c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    5030:	604b      	str	r3, [r1, #4]
    5032:	2300      	movs	r3, #0
    5034:	f383 8811 	msr	BASEPRI, r3
    5038:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    503c:	6893      	ldr	r3, [r2, #8]
}
    503e:	6f98      	ldr	r0, [r3, #120]	; 0x78
    5040:	4770      	bx	lr
    5042:	bf00      	nop
    5044:	200022e0 	.word	0x200022e0
    5048:	0000a0bc 	.word	0x0000a0bc
    504c:	e000ed00 	.word	0xe000ed00

00005050 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    5050:	4921      	ldr	r1, [pc, #132]	; (50d8 <in_fp_endif+0x2a>)
    ldr r2, [r1, #_kernel_offset_to_current]
    5052:	688a      	ldr	r2, [r1, #8]

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
    5054:	f882 e0bd 	strb.w	lr, [r2, #189]	; 0xbd
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    5058:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    505c:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    505e:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    5062:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-out thread had been using the FP registers. */
    tst lr, #_EXC_RETURN_FTYPE_Msk
    5066:	f01e 0f10 	tst.w	lr, #16
    bne out_fp_endif
    506a:	d103      	bne.n	5074 <out_fp_endif>
    /* FP context active: set FP state and store callee-saved registers.
     * Note: if Lazy FP stacking is enabled, storing the callee-saved
     * registers will automatically trigger FP state preservation in
     * the thread's stack. This will also clear the FPCCR.LSPACT flag.
     */
    add r0, r2, #_thread_offset_to_preempt_float
    506c:	f102 007c 	add.w	r0, r2, #124	; 0x7c
    vstmia r0, {s16-s31}
    5070:	ec80 8a10 	vstmia	r0, {s16-s31}

00005074 <out_fp_endif>:

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    5074:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    5076:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    507a:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    507e:	4f17      	ldr	r7, [pc, #92]	; (50dc <in_fp_endif+0x2e>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    5080:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    5084:	6a0a      	ldr	r2, [r1, #32]

    str r2, [r1, #_kernel_offset_to_current]
    5086:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    5088:	603e      	str	r6, [r7, #0]

#endif

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Restore EXC_RETURN value. */
    ldrsb lr, [r2, #_thread_offset_to_mode_exc_return]
    508a:	f992 e0bd 	ldrsb.w	lr, [r2, #189]	; 0xbd

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    508e:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    5090:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    5092:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    5094:	f380 8811 	msr	BASEPRI, r0

#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-in thread had been using the FP registers. */
    tst lr, #_EXC_RETURN_FTYPE_Msk
    5098:	f01e 0f10 	tst.w	lr, #16
    beq in_fp_active
    509c:	d003      	beq.n	50a6 <in_fp_active>
    /* FP context inactive for swapped-in thread:
     * - reset FPSCR to 0
     * - set EXC_RETURN.F_Type (prevents FP frame un-stacking when returning
     *   from pendSV)
     */
    movs.n r3, #0
    509e:	2300      	movs	r3, #0
    vmsr fpscr, r3
    50a0:	eee1 3a10 	vmsr	fpscr, r3
    b in_fp_endif
    50a4:	e003      	b.n	50ae <in_fp_endif>

000050a6 <in_fp_active>:
    /* FP context active:
     * - clear EXC_RETURN.F_Type
     * - FPSCR and caller-saved registers will be restored automatically
     * - restore callee-saved FP registers
     */
    add r0, r2, #_thread_offset_to_preempt_float
    50a6:	f102 007c 	add.w	r0, r2, #124	; 0x7c
    vldmia r0, {s16-s31}
    50aa:	ec90 8a10 	vldmia	r0, {s16-s31}

000050ae <in_fp_endif>:
in_fp_endif:
    /* Clear CONTROL.FPCA that may have been set by FP instructions */
    mrs r3, CONTROL
    50ae:	f3ef 8314 	mrs	r3, CONTROL
    bic r3, #_CONTROL_FPCA_Msk
    50b2:	f023 0304 	bic.w	r3, r3, #4
    msr CONTROL, r3
    50b6:	f383 8814 	msr	CONTROL, r3
    isb
    50ba:	f3bf 8f6f 	isb	sy
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    50be:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    50c0:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    50c2:	f000 fc55 	bl	5970 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    50c6:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    50ca:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    50ce:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    50d2:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    50d6:	4770      	bx	lr
    ldr r1, =_kernel
    50d8:	200022e0 	.word	0x200022e0
    ldr v4, =_SCS_ICSR
    50dc:	e000ed04 	.word	0xe000ed04

000050e0 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    50e0:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    50e4:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    50e6:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    50ea:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    50ee:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    50f0:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    50f4:	2902      	cmp	r1, #2
    beq _oops
    50f6:	d0ff      	beq.n	50f8 <_oops>

000050f8 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    50f8:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
    50fa:	f004 f8f3 	bl	92e4 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
    50fe:	bd01      	pop	{r0, pc}

00005100 <arch_new_thread>:
		thread->stack_info.start += MPU_GUARD_ALIGN_AND_SIZE;
		thread->stack_info.size -= MPU_GUARD_ALIGN_AND_SIZE;
	}
#endif /* CONFIG_USERSPACE */
#if FP_GUARD_EXTRA_SIZE > 0
	if ((thread->base.user_options & K_FP_REGS) != 0) {
    5100:	7b01      	ldrb	r1, [r0, #12]
    5102:	0789      	lsls	r1, r1, #30
    5104:	d505      	bpl.n	5112 <arch_new_thread+0x12>
		/* Larger guard needed due to lazy stacking of FP regs may
		 * overshoot the guard area without writing anything. We
		 * carve it out of the stack buffer as-needed instead of
		 * unconditionally reserving it.
		 */
		thread->stack_info.start += FP_GUARD_EXTRA_SIZE;
    5106:	6e41      	ldr	r1, [r0, #100]	; 0x64
    5108:	3140      	adds	r1, #64	; 0x40
    510a:	6641      	str	r1, [r0, #100]	; 0x64
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
    510c:	6e81      	ldr	r1, [r0, #104]	; 0x68
    510e:	3940      	subs	r1, #64	; 0x40
    5110:	6681      	str	r1, [r0, #104]	; 0x68

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    5112:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    5116:	9b00      	ldr	r3, [sp, #0]
    5118:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    511c:	490f      	ldr	r1, [pc, #60]	; (515c <arch_new_thread+0x5c>)
	iframe->a3 = (uint32_t)p2;
    511e:	9b01      	ldr	r3, [sp, #4]
    5120:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    5124:	9b02      	ldr	r3, [sp, #8]
    5126:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    512a:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    512e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    5132:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    5136:	f842 1c08 	str.w	r1, [r2, #-8]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    513a:	2300      	movs	r3, #0
    513c:	6743      	str	r3, [r0, #116]	; 0x74
	thread->arch.mode = 0;
#if defined(CONFIG_ARM_STORE_EXC_RETURN)
	thread->arch.mode_exc_return = DEFAULT_EXC_RETURN;
#endif
#if FP_GUARD_EXTRA_SIZE > 0
	if ((thread->base.user_options & K_FP_REGS) != 0) {
    513e:	7b03      	ldrb	r3, [r0, #12]
		thread->arch.mode |= Z_ARM_MODE_MPU_GUARD_FLOAT_Msk;
    5140:	f013 0f02 	tst.w	r3, #2
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    5144:	f1a2 0220 	sub.w	r2, r2, #32
		thread->arch.mode |= Z_ARM_MODE_MPU_GUARD_FLOAT_Msk;
    5148:	f64f 5308 	movw	r3, #64776	; 0xfd08
    514c:	bf08      	it	eq
    514e:	f44f 437d 	moveq.w	r3, #64768	; 0xfd00
	thread->callee_saved.psp = (uint32_t)iframe;
    5152:	6502      	str	r2, [r0, #80]	; 0x50
	if ((thread->base.user_options & K_FP_REGS) != 0) {
    5154:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    5158:	4770      	bx	lr
    515a:	bf00      	nop
    515c:	00008f6f 	.word	0x00008f6f

00005160 <z_arm_mpu_stack_guard_and_fpu_adjust>:
 * policy and the stack_info values for the thread that is
 * being switched in.
 */
uint32_t z_arm_mpu_stack_guard_and_fpu_adjust(struct k_thread *thread)
{
	if (((thread->base.user_options & K_FP_REGS) != 0) ||
    5160:	7b03      	ldrb	r3, [r0, #12]
    5162:	f013 0f02 	tst.w	r3, #2
    5166:	4b19      	ldr	r3, [pc, #100]	; (51cc <z_arm_mpu_stack_guard_and_fpu_adjust+0x6c>)
    5168:	d103      	bne.n	5172 <z_arm_mpu_stack_guard_and_fpu_adjust+0x12>
    516a:	f890 20bd 	ldrb.w	r2, [r0, #189]	; 0xbd
    516e:	06d2      	lsls	r2, r2, #27
    5170:	d417      	bmi.n	51a2 <z_arm_mpu_stack_guard_and_fpu_adjust+0x42>
		 * The thread is not pre-tagged with K_FP_REGS, but it has
		 * generated an FP context. Activate lazy stacking and
		 * program a large MPU guard to detect privilege thread
		 * stack overflows.
		 */
		FPU->FPCCR |= FPU_FPCCR_LSPEN_Msk;
    5172:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    5174:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
    5178:	635a      	str	r2, [r3, #52]	; 0x34
		if ((thread->arch.mode &
    517a:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
    517e:	0719      	lsls	r1, r3, #28
    5180:	d409      	bmi.n	5196 <z_arm_mpu_stack_guard_and_fpu_adjust+0x36>
			thread->arch.mode |= Z_ARM_MODE_MPU_GUARD_FLOAT_Msk;
    5182:	f043 0308 	orr.w	r3, r3, #8
    5186:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
				thread->stack_info.start +=
    518a:	6e43      	ldr	r3, [r0, #100]	; 0x64
    518c:	3340      	adds	r3, #64	; 0x40
    518e:	6643      	str	r3, [r0, #100]	; 0x64
				thread->stack_info.size -=
    5190:	6e83      	ldr	r3, [r0, #104]	; 0x68
    5192:	3b40      	subs	r3, #64	; 0x40
    5194:	6683      	str	r3, [r0, #104]	; 0x68

		z_arm_thread_stack_info_adjust(thread, true);

		/* Tag the thread with K_FP_REGS */
		thread->base.user_options |= K_FP_REGS;
    5196:	7b03      	ldrb	r3, [r0, #12]
    5198:	f043 0302 	orr.w	r3, r3, #2
    519c:	7303      	strb	r3, [r0, #12]

		return MPU_GUARD_ALIGN_AND_SIZE_FLOAT;
    519e:	2080      	movs	r0, #128	; 0x80
    51a0:	4770      	bx	lr
	/* Thread is not pre-tagged with K_FP_REGS, and it has
	 * not been using the FPU. Since there is no active FPU
	 * context, de-activate lazy stacking and program the
	 * default MPU guard size.
	 */
	FPU->FPCCR &= (~FPU_FPCCR_LSPEN_Msk);
    51a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    51a4:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
    51a8:	635a      	str	r2, [r3, #52]	; 0x34
		if ((thread->arch.mode &
    51aa:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
    51ae:	071a      	lsls	r2, r3, #28
    51b0:	d401      	bmi.n	51b6 <z_arm_mpu_stack_guard_and_fpu_adjust+0x56>

	z_arm_thread_stack_info_adjust(thread, false);

	return MPU_GUARD_ALIGN_AND_SIZE;
    51b2:	2040      	movs	r0, #64	; 0x40
}
    51b4:	4770      	bx	lr
			thread->arch.mode &= ~Z_ARM_MODE_MPU_GUARD_FLOAT_Msk;
    51b6:	f023 0308 	bic.w	r3, r3, #8
    51ba:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
				thread->stack_info.start -=
    51be:	6e43      	ldr	r3, [r0, #100]	; 0x64
    51c0:	3b40      	subs	r3, #64	; 0x40
    51c2:	6643      	str	r3, [r0, #100]	; 0x64
				thread->stack_info.size +=
    51c4:	6e83      	ldr	r3, [r0, #104]	; 0x68
    51c6:	3340      	adds	r3, #64	; 0x40
    51c8:	6683      	str	r3, [r0, #104]	; 0x68
    51ca:	e7f2      	b.n	51b2 <z_arm_mpu_stack_guard_and_fpu_adjust+0x52>
    51cc:	e000ef00 	.word	0xe000ef00

000051d0 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    51d0:	4a0c      	ldr	r2, [pc, #48]	; (5204 <z_check_thread_stack_fail+0x34>)
{
    51d2:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    51d4:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
    51d6:	b1a0      	cbz	r0, 5202 <z_check_thread_stack_fail+0x32>
#endif

#if (defined(CONFIG_FPU) && defined(CONFIG_FPU_SHARING)) && \
	defined(CONFIG_MPU_STACK_GUARD)
	uint32_t guard_len =
		((_current->arch.mode & Z_ARM_MODE_MPU_GUARD_FLOAT_Msk) != 0) ?
    51d8:	f8d0 20bc 	ldr.w	r2, [r0, #188]	; 0xbc
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    51dc:	6e40      	ldr	r0, [r0, #100]	; 0x64
		MPU_GUARD_ALIGN_AND_SIZE_FLOAT : MPU_GUARD_ALIGN_AND_SIZE;
    51de:	f012 0f08 	tst.w	r2, #8
    51e2:	bf0c      	ite	eq
    51e4:	2240      	moveq	r2, #64	; 0x40
    51e6:	2280      	movne	r2, #128	; 0x80
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    51e8:	f113 0f16 	cmn.w	r3, #22
    51ec:	d004      	beq.n	51f8 <z_check_thread_stack_fail+0x28>
    51ee:	1a82      	subs	r2, r0, r2
    51f0:	429a      	cmp	r2, r3
    51f2:	d805      	bhi.n	5200 <z_check_thread_stack_fail+0x30>
    51f4:	4283      	cmp	r3, r0
    51f6:	d203      	bcs.n	5200 <z_check_thread_stack_fail+0x30>
		return 0;
    51f8:	4281      	cmp	r1, r0
    51fa:	bf28      	it	cs
    51fc:	2000      	movcs	r0, #0
    51fe:	4770      	bx	lr
    5200:	2000      	movs	r0, #0
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
}
    5202:	4770      	bx	lr
    5204:	200022e0 	.word	0x200022e0

00005208 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    5208:	b508      	push	{r3, lr}
    520a:	4614      	mov	r4, r2
    520c:	460d      	mov	r5, r1
    520e:	2200      	movs	r2, #0
    5210:	eee1 2a10 	vmsr	fpscr, r2
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    5214:	f3ef 8214 	mrs	r2, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    5218:	f022 0204 	bic.w	r2, r2, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    521c:	f382 8814 	msr	CONTROL, r2
  __ASM volatile ("isb 0xF":::"memory");
    5220:	f3bf 8f6f 	isb	sy
    5224:	f3bf 8f6f 	isb	sy
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    5228:	4a08      	ldr	r2, [pc, #32]	; (524c <arch_switch_to_main_thread+0x44>)
    522a:	6090      	str	r0, [r2, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    522c:	f000 fba0 	bl	5970 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    5230:	4620      	mov	r0, r4
    5232:	f385 8809 	msr	PSP, r5
    5236:	2100      	movs	r1, #0
    5238:	b663      	cpsie	if
    523a:	f381 8811 	msr	BASEPRI, r1
    523e:	f3bf 8f6f 	isb	sy
    5242:	2200      	movs	r2, #0
    5244:	2300      	movs	r3, #0
    5246:	f003 fe92 	bl	8f6e <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    524a:	bf00      	nop
    524c:	200022e0 	.word	0x200022e0

00005250 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    5250:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    5252:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    5254:	4a0b      	ldr	r2, [pc, #44]	; (5284 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    5256:	69d0      	ldr	r0, [r2, #28]
	cmp r0, #0
    5258:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    525a:	bf1e      	ittt	ne
	movne	r1, #0
    525c:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    525e:	61d1      	strne	r1, [r2, #28]
		blne	z_pm_save_idle_exit
    5260:	f004 fbba 	blne	99d8 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    5264:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    5266:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    526a:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    526e:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    5272:	4905      	ldr	r1, [pc, #20]	; (5288 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    5274:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    5276:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    5278:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    527a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    527e:	4903      	ldr	r1, [pc, #12]	; (528c <_isr_wrapper+0x3c>)
	bx r1
    5280:	4708      	bx	r1
    5282:	0000      	.short	0x0000
	ldr r2, =_kernel
    5284:	200022e0 	.word	0x200022e0
	ldr r1, =_sw_isr_table
    5288:	00009cec 	.word	0x00009cec
	ldr r1, =z_arm_int_exit
    528c:	00005291 	.word	0x00005291

00005290 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    5290:	4b04      	ldr	r3, [pc, #16]	; (52a4 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    5292:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    5294:	6a18      	ldr	r0, [r3, #32]
	cmp r0, r1
    5296:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    5298:	d003      	beq.n	52a2 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    529a:	4903      	ldr	r1, [pc, #12]	; (52a8 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    529c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    52a0:	600a      	str	r2, [r1, #0]

000052a2 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    52a2:	4770      	bx	lr
	ldr r3, =_kernel
    52a4:	200022e0 	.word	0x200022e0
	ldr r1, =_SCS_ICSR
    52a8:	e000ed04 	.word	0xe000ed04

000052ac <bus_fault.constprop.0>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    52ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    52ae:	b085      	sub	sp, #20
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");
    52b0:	2400      	movs	r4, #0
    52b2:	4b3b      	ldr	r3, [pc, #236]	; (53a0 <bus_fault.constprop.0+0xf4>)
    52b4:	9302      	str	r3, [sp, #8]
    52b6:	e9cd 4400 	strd	r4, r4, [sp]
    52ba:	4623      	mov	r3, r4
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    52bc:	4607      	mov	r7, r0
    52be:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    52c0:	2201      	movs	r2, #1
    52c2:	4938      	ldr	r1, [pc, #224]	; (53a4 <bus_fault.constprop.0+0xf8>)
    52c4:	4620      	mov	r0, r4
    52c6:	f004 f81c 	bl	9302 <z_log_msg_runtime_create.constprop.0>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    52ca:	4b37      	ldr	r3, [pc, #220]	; (53a8 <bus_fault.constprop.0+0xfc>)
    52cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    52ce:	04db      	lsls	r3, r3, #19
    52d0:	d509      	bpl.n	52e6 <bus_fault.constprop.0+0x3a>
		PR_FAULT_INFO("  Stacking error");
    52d2:	4b36      	ldr	r3, [pc, #216]	; (53ac <bus_fault.constprop.0+0x100>)
    52d4:	4933      	ldr	r1, [pc, #204]	; (53a4 <bus_fault.constprop.0+0xf8>)
    52d6:	9400      	str	r4, [sp, #0]
    52d8:	e9cd 4301 	strd	r4, r3, [sp, #4]
    52dc:	2201      	movs	r2, #1
    52de:	4623      	mov	r3, r4
    52e0:	4620      	mov	r0, r4
    52e2:	f004 f80e 	bl	9302 <z_log_msg_runtime_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    52e6:	4b30      	ldr	r3, [pc, #192]	; (53a8 <bus_fault.constprop.0+0xfc>)
    52e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    52ea:	051d      	lsls	r5, r3, #20
    52ec:	d509      	bpl.n	5302 <bus_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Unstacking error");
    52ee:	4b30      	ldr	r3, [pc, #192]	; (53b0 <bus_fault.constprop.0+0x104>)
    52f0:	9302      	str	r3, [sp, #8]
    52f2:	2300      	movs	r3, #0
    52f4:	e9cd 3300 	strd	r3, r3, [sp]
    52f8:	492a      	ldr	r1, [pc, #168]	; (53a4 <bus_fault.constprop.0+0xf8>)
    52fa:	2201      	movs	r2, #1
    52fc:	4618      	mov	r0, r3
    52fe:	f004 f800 	bl	9302 <z_log_msg_runtime_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    5302:	4d29      	ldr	r5, [pc, #164]	; (53a8 <bus_fault.constprop.0+0xfc>)
    5304:	6aab      	ldr	r3, [r5, #40]	; 0x28
    5306:	059c      	lsls	r4, r3, #22
    5308:	d51e      	bpl.n	5348 <bus_fault.constprop.0+0x9c>
		PR_FAULT_INFO("  Precise data bus error");
    530a:	2400      	movs	r4, #0
    530c:	4b29      	ldr	r3, [pc, #164]	; (53b4 <bus_fault.constprop.0+0x108>)
    530e:	9302      	str	r3, [sp, #8]
    5310:	2201      	movs	r2, #1
    5312:	4623      	mov	r3, r4
    5314:	4620      	mov	r0, r4
    5316:	e9cd 4400 	strd	r4, r4, [sp]
    531a:	4922      	ldr	r1, [pc, #136]	; (53a4 <bus_fault.constprop.0+0xf8>)
    531c:	f003 fff1 	bl	9302 <z_log_msg_runtime_create.constprop.0>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    5320:	6bab      	ldr	r3, [r5, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    5322:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    5324:	0410      	lsls	r0, r2, #16
    5326:	d50f      	bpl.n	5348 <bus_fault.constprop.0+0x9c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    5328:	9303      	str	r3, [sp, #12]
    532a:	4b23      	ldr	r3, [pc, #140]	; (53b8 <bus_fault.constprop.0+0x10c>)
    532c:	491d      	ldr	r1, [pc, #116]	; (53a4 <bus_fault.constprop.0+0xf8>)
    532e:	9400      	str	r4, [sp, #0]
    5330:	e9cd 4301 	strd	r4, r3, [sp, #4]
    5334:	2201      	movs	r2, #1
    5336:	4623      	mov	r3, r4
    5338:	4620      	mov	r0, r4
    533a:	f003 ffe2 	bl	9302 <z_log_msg_runtime_create.constprop.0>
			if (from_hard_fault != 0) {
    533e:	b11f      	cbz	r7, 5348 <bus_fault.constprop.0+0x9c>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    5340:	6aab      	ldr	r3, [r5, #40]	; 0x28
    5342:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    5346:	62ab      	str	r3, [r5, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    5348:	4b17      	ldr	r3, [pc, #92]	; (53a8 <bus_fault.constprop.0+0xfc>)
    534a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    534c:	0559      	lsls	r1, r3, #21
    534e:	d509      	bpl.n	5364 <bus_fault.constprop.0+0xb8>
		PR_FAULT_INFO("  Imprecise data bus error");
    5350:	4b1a      	ldr	r3, [pc, #104]	; (53bc <bus_fault.constprop.0+0x110>)
    5352:	9302      	str	r3, [sp, #8]
    5354:	2300      	movs	r3, #0
    5356:	e9cd 3300 	strd	r3, r3, [sp]
    535a:	4912      	ldr	r1, [pc, #72]	; (53a4 <bus_fault.constprop.0+0xf8>)
    535c:	2201      	movs	r2, #1
    535e:	4618      	mov	r0, r3
    5360:	f003 ffcf 	bl	9302 <z_log_msg_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    5364:	4a10      	ldr	r2, [pc, #64]	; (53a8 <bus_fault.constprop.0+0xfc>)
    5366:	6a93      	ldr	r3, [r2, #40]	; 0x28
    5368:	f413 7380 	ands.w	r3, r3, #256	; 0x100
    536c:	d012      	beq.n	5394 <bus_fault.constprop.0+0xe8>
		PR_FAULT_INFO("  Instruction bus error");
    536e:	4b14      	ldr	r3, [pc, #80]	; (53c0 <bus_fault.constprop.0+0x114>)
    5370:	9302      	str	r3, [sp, #8]
    5372:	2300      	movs	r3, #0
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    5374:	e9cd 3300 	strd	r3, r3, [sp]
    5378:	490a      	ldr	r1, [pc, #40]	; (53a4 <bus_fault.constprop.0+0xf8>)
    537a:	2201      	movs	r2, #1
    537c:	4618      	mov	r0, r3
    537e:	f003 ffc0 	bl	9302 <z_log_msg_runtime_create.constprop.0>
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    5382:	4a09      	ldr	r2, [pc, #36]	; (53a8 <bus_fault.constprop.0+0xfc>)
    5384:	6a93      	ldr	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    5386:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    5388:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    538c:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    538e:	7030      	strb	r0, [r6, #0]

	return reason;
}
    5390:	b005      	add	sp, #20
    5392:	bdf0      	pop	{r4, r5, r6, r7, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    5394:	6a92      	ldr	r2, [r2, #40]	; 0x28
    5396:	0492      	lsls	r2, r2, #18
    5398:	d5f3      	bpl.n	5382 <bus_fault.constprop.0+0xd6>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    539a:	4a0a      	ldr	r2, [pc, #40]	; (53c4 <bus_fault.constprop.0+0x118>)
    539c:	9202      	str	r2, [sp, #8]
    539e:	e7e9      	b.n	5374 <bus_fault.constprop.0+0xc8>
    53a0:	0000a4b5 	.word	0x0000a4b5
    53a4:	00009edc 	.word	0x00009edc
    53a8:	e000ed00 	.word	0xe000ed00
    53ac:	0000a4cb 	.word	0x0000a4cb
    53b0:	0000a4dc 	.word	0x0000a4dc
    53b4:	0000a4ef 	.word	0x0000a4ef
    53b8:	0000a508 	.word	0x0000a508
    53bc:	0000a51d 	.word	0x0000a51d
    53c0:	0000a538 	.word	0x0000a538
    53c4:	0000a550 	.word	0x0000a550

000053c8 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    53c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
    53ca:	2400      	movs	r4, #0
    53cc:	4b33      	ldr	r3, [pc, #204]	; (549c <usage_fault.constprop.0+0xd4>)
    53ce:	9302      	str	r3, [sp, #8]
    53d0:	e9cd 4400 	strd	r4, r4, [sp]
    53d4:	4623      	mov	r3, r4
    53d6:	4932      	ldr	r1, [pc, #200]	; (54a0 <usage_fault.constprop.0+0xd8>)
    53d8:	2201      	movs	r2, #1
    53da:	4620      	mov	r0, r4
    53dc:	f003 ff91 	bl	9302 <z_log_msg_runtime_create.constprop.0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    53e0:	4b30      	ldr	r3, [pc, #192]	; (54a4 <usage_fault.constprop.0+0xdc>)
    53e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    53e4:	019b      	lsls	r3, r3, #6
    53e6:	d509      	bpl.n	53fc <usage_fault.constprop.0+0x34>
		PR_FAULT_INFO("  Division by zero");
    53e8:	4b2f      	ldr	r3, [pc, #188]	; (54a8 <usage_fault.constprop.0+0xe0>)
    53ea:	492d      	ldr	r1, [pc, #180]	; (54a0 <usage_fault.constprop.0+0xd8>)
    53ec:	9400      	str	r4, [sp, #0]
    53ee:	e9cd 4301 	strd	r4, r3, [sp, #4]
    53f2:	2201      	movs	r2, #1
    53f4:	4623      	mov	r3, r4
    53f6:	4620      	mov	r0, r4
    53f8:	f003 ff83 	bl	9302 <z_log_msg_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    53fc:	4b29      	ldr	r3, [pc, #164]	; (54a4 <usage_fault.constprop.0+0xdc>)
    53fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5400:	01dc      	lsls	r4, r3, #7
    5402:	d509      	bpl.n	5418 <usage_fault.constprop.0+0x50>
		PR_FAULT_INFO("  Unaligned memory access");
    5404:	4b29      	ldr	r3, [pc, #164]	; (54ac <usage_fault.constprop.0+0xe4>)
    5406:	9302      	str	r3, [sp, #8]
    5408:	2300      	movs	r3, #0
    540a:	e9cd 3300 	strd	r3, r3, [sp]
    540e:	4924      	ldr	r1, [pc, #144]	; (54a0 <usage_fault.constprop.0+0xd8>)
    5410:	2201      	movs	r2, #1
    5412:	4618      	mov	r0, r3
    5414:	f003 ff75 	bl	9302 <z_log_msg_runtime_create.constprop.0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    5418:	4b22      	ldr	r3, [pc, #136]	; (54a4 <usage_fault.constprop.0+0xdc>)
    541a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    541c:	0318      	lsls	r0, r3, #12
    541e:	d509      	bpl.n	5434 <usage_fault.constprop.0+0x6c>
		PR_FAULT_INFO("  No coprocessor instructions");
    5420:	4b23      	ldr	r3, [pc, #140]	; (54b0 <usage_fault.constprop.0+0xe8>)
    5422:	9302      	str	r3, [sp, #8]
    5424:	2300      	movs	r3, #0
    5426:	e9cd 3300 	strd	r3, r3, [sp]
    542a:	491d      	ldr	r1, [pc, #116]	; (54a0 <usage_fault.constprop.0+0xd8>)
    542c:	2201      	movs	r2, #1
    542e:	4618      	mov	r0, r3
    5430:	f003 ff67 	bl	9302 <z_log_msg_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    5434:	4b1b      	ldr	r3, [pc, #108]	; (54a4 <usage_fault.constprop.0+0xdc>)
    5436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5438:	0359      	lsls	r1, r3, #13
    543a:	d509      	bpl.n	5450 <usage_fault.constprop.0+0x88>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    543c:	4b1d      	ldr	r3, [pc, #116]	; (54b4 <usage_fault.constprop.0+0xec>)
    543e:	9302      	str	r3, [sp, #8]
    5440:	2300      	movs	r3, #0
    5442:	e9cd 3300 	strd	r3, r3, [sp]
    5446:	4916      	ldr	r1, [pc, #88]	; (54a0 <usage_fault.constprop.0+0xd8>)
    5448:	2201      	movs	r2, #1
    544a:	4618      	mov	r0, r3
    544c:	f003 ff59 	bl	9302 <z_log_msg_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    5450:	4b14      	ldr	r3, [pc, #80]	; (54a4 <usage_fault.constprop.0+0xdc>)
    5452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5454:	039a      	lsls	r2, r3, #14
    5456:	d509      	bpl.n	546c <usage_fault.constprop.0+0xa4>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    5458:	4b17      	ldr	r3, [pc, #92]	; (54b8 <usage_fault.constprop.0+0xf0>)
    545a:	9302      	str	r3, [sp, #8]
    545c:	2300      	movs	r3, #0
    545e:	e9cd 3300 	strd	r3, r3, [sp]
    5462:	490f      	ldr	r1, [pc, #60]	; (54a0 <usage_fault.constprop.0+0xd8>)
    5464:	2201      	movs	r2, #1
    5466:	4618      	mov	r0, r3
    5468:	f003 ff4b 	bl	9302 <z_log_msg_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    546c:	4b0d      	ldr	r3, [pc, #52]	; (54a4 <usage_fault.constprop.0+0xdc>)
    546e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5470:	03db      	lsls	r3, r3, #15
    5472:	d509      	bpl.n	5488 <usage_fault.constprop.0+0xc0>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    5474:	4b11      	ldr	r3, [pc, #68]	; (54bc <usage_fault.constprop.0+0xf4>)
    5476:	9302      	str	r3, [sp, #8]
    5478:	2300      	movs	r3, #0
    547a:	e9cd 3300 	strd	r3, r3, [sp]
    547e:	4908      	ldr	r1, [pc, #32]	; (54a0 <usage_fault.constprop.0+0xd8>)
    5480:	2201      	movs	r2, #1
    5482:	4618      	mov	r0, r3
    5484:	f003 ff3d 	bl	9302 <z_log_msg_runtime_create.constprop.0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    5488:	4a06      	ldr	r2, [pc, #24]	; (54a4 <usage_fault.constprop.0+0xdc>)
    548a:	6a93      	ldr	r3, [r2, #40]	; 0x28
    548c:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    5490:	ea6f 4313 	mvn.w	r3, r3, lsr #16

	return reason;
}
    5494:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    5496:	6293      	str	r3, [r2, #40]	; 0x28
}
    5498:	b004      	add	sp, #16
    549a:	bd10      	pop	{r4, pc}
    549c:	0000a57f 	.word	0x0000a57f
    54a0:	00009edc 	.word	0x00009edc
    54a4:	e000ed00 	.word	0xe000ed00
    54a8:	0000a597 	.word	0x0000a597
    54ac:	0000a5aa 	.word	0x0000a5aa
    54b0:	0000a5c4 	.word	0x0000a5c4
    54b4:	0000a5e2 	.word	0x0000a5e2
    54b8:	0000a607 	.word	0x0000a607
    54bc:	0000a621 	.word	0x0000a621

000054c0 <mem_manage_fault>:
{
    54c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    54c4:	b085      	sub	sp, #20
	PR_FAULT_INFO("***** MPU FAULT *****");
    54c6:	2400      	movs	r4, #0
    54c8:	4b49      	ldr	r3, [pc, #292]	; (55f0 <mem_manage_fault+0x130>)
    54ca:	9302      	str	r3, [sp, #8]
    54cc:	e9cd 4400 	strd	r4, r4, [sp]
    54d0:	4623      	mov	r3, r4
{
    54d2:	4680      	mov	r8, r0
    54d4:	4689      	mov	r9, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    54d6:	4620      	mov	r0, r4
    54d8:	4946      	ldr	r1, [pc, #280]	; (55f4 <mem_manage_fault+0x134>)
{
    54da:	4616      	mov	r6, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
    54dc:	2201      	movs	r2, #1
    54de:	f003 ff10 	bl	9302 <z_log_msg_runtime_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    54e2:	4b45      	ldr	r3, [pc, #276]	; (55f8 <mem_manage_fault+0x138>)
    54e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    54e6:	06d8      	lsls	r0, r3, #27
    54e8:	d509      	bpl.n	54fe <mem_manage_fault+0x3e>
		PR_FAULT_INFO("  Stacking error (context area might be"
    54ea:	4b44      	ldr	r3, [pc, #272]	; (55fc <mem_manage_fault+0x13c>)
    54ec:	4941      	ldr	r1, [pc, #260]	; (55f4 <mem_manage_fault+0x134>)
    54ee:	9400      	str	r4, [sp, #0]
    54f0:	e9cd 4301 	strd	r4, r3, [sp, #4]
    54f4:	2201      	movs	r2, #1
    54f6:	4623      	mov	r3, r4
    54f8:	4620      	mov	r0, r4
    54fa:	f003 ff02 	bl	9302 <z_log_msg_runtime_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    54fe:	4b3e      	ldr	r3, [pc, #248]	; (55f8 <mem_manage_fault+0x138>)
    5500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5502:	0719      	lsls	r1, r3, #28
    5504:	d509      	bpl.n	551a <mem_manage_fault+0x5a>
		PR_FAULT_INFO("  Unstacking error");
    5506:	4b3e      	ldr	r3, [pc, #248]	; (5600 <mem_manage_fault+0x140>)
    5508:	9302      	str	r3, [sp, #8]
    550a:	2300      	movs	r3, #0
    550c:	e9cd 3300 	strd	r3, r3, [sp]
    5510:	4938      	ldr	r1, [pc, #224]	; (55f4 <mem_manage_fault+0x134>)
    5512:	2201      	movs	r2, #1
    5514:	4618      	mov	r0, r3
    5516:	f003 fef4 	bl	9302 <z_log_msg_runtime_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    551a:	4d37      	ldr	r5, [pc, #220]	; (55f8 <mem_manage_fault+0x138>)
    551c:	6aab      	ldr	r3, [r5, #40]	; 0x28
    551e:	079a      	lsls	r2, r3, #30
    5520:	d436      	bmi.n	5590 <mem_manage_fault+0xd0>
	uint32_t mmfar = -EINVAL;
    5522:	f06f 0715 	mvn.w	r7, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    5526:	4b34      	ldr	r3, [pc, #208]	; (55f8 <mem_manage_fault+0x138>)
    5528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    552a:	07dd      	lsls	r5, r3, #31
    552c:	d509      	bpl.n	5542 <mem_manage_fault+0x82>
		PR_FAULT_INFO("  Instruction Access Violation");
    552e:	4b35      	ldr	r3, [pc, #212]	; (5604 <mem_manage_fault+0x144>)
    5530:	9302      	str	r3, [sp, #8]
    5532:	2300      	movs	r3, #0
    5534:	e9cd 3300 	strd	r3, r3, [sp]
    5538:	492e      	ldr	r1, [pc, #184]	; (55f4 <mem_manage_fault+0x134>)
    553a:	2201      	movs	r2, #1
    553c:	4618      	mov	r0, r3
    553e:	f003 fee0 	bl	9302 <z_log_msg_runtime_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    5542:	4b2d      	ldr	r3, [pc, #180]	; (55f8 <mem_manage_fault+0x138>)
    5544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5546:	069c      	lsls	r4, r3, #26
    5548:	d509      	bpl.n	555e <mem_manage_fault+0x9e>
		PR_FAULT_INFO(
    554a:	4b2f      	ldr	r3, [pc, #188]	; (5608 <mem_manage_fault+0x148>)
    554c:	9302      	str	r3, [sp, #8]
    554e:	2300      	movs	r3, #0
    5550:	e9cd 3300 	strd	r3, r3, [sp]
    5554:	4927      	ldr	r1, [pc, #156]	; (55f4 <mem_manage_fault+0x134>)
    5556:	2201      	movs	r2, #1
    5558:	4618      	mov	r0, r3
    555a:	f003 fed2 	bl	9302 <z_log_msg_runtime_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    555e:	4c26      	ldr	r4, [pc, #152]	; (55f8 <mem_manage_fault+0x138>)
    5560:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    5562:	06d8      	lsls	r0, r3, #27
    5564:	d436      	bmi.n	55d4 <mem_manage_fault+0x114>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    5566:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    5568:	0799      	lsls	r1, r3, #30
    556a:	d433      	bmi.n	55d4 <mem_manage_fault+0x114>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    556c:	2000      	movs	r0, #0
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    556e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    5570:	4a21      	ldr	r2, [pc, #132]	; (55f8 <mem_manage_fault+0x138>)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    5572:	069b      	lsls	r3, r3, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    5574:	bf42      	ittt	mi
    5576:	6a63      	ldrmi	r3, [r4, #36]	; 0x24
    5578:	f423 5300 	bicmi.w	r3, r3, #8192	; 0x2000
    557c:	6263      	strmi	r3, [r4, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    557e:	6a93      	ldr	r3, [r2, #40]	; 0x28
    5580:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    5584:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    5586:	2300      	movs	r3, #0
    5588:	7033      	strb	r3, [r6, #0]
}
    558a:	b005      	add	sp, #20
    558c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		PR_FAULT_INFO("  Data Access Violation");
    5590:	2400      	movs	r4, #0
    5592:	4b1e      	ldr	r3, [pc, #120]	; (560c <mem_manage_fault+0x14c>)
    5594:	9302      	str	r3, [sp, #8]
    5596:	e9cd 4400 	strd	r4, r4, [sp]
    559a:	4623      	mov	r3, r4
    559c:	4915      	ldr	r1, [pc, #84]	; (55f4 <mem_manage_fault+0x134>)
    559e:	2201      	movs	r2, #1
    55a0:	4620      	mov	r0, r4
    55a2:	f003 feae 	bl	9302 <z_log_msg_runtime_create.constprop.0>
		uint32_t temp = SCB->MMFAR;
    55a6:	6b6f      	ldr	r7, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    55a8:	6aab      	ldr	r3, [r5, #40]	; 0x28
    55aa:	061b      	lsls	r3, r3, #24
    55ac:	d5b9      	bpl.n	5522 <mem_manage_fault+0x62>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    55ae:	4b18      	ldr	r3, [pc, #96]	; (5610 <mem_manage_fault+0x150>)
    55b0:	4910      	ldr	r1, [pc, #64]	; (55f4 <mem_manage_fault+0x134>)
    55b2:	9703      	str	r7, [sp, #12]
    55b4:	e9cd 4301 	strd	r4, r3, [sp, #4]
    55b8:	9400      	str	r4, [sp, #0]
    55ba:	4623      	mov	r3, r4
    55bc:	2201      	movs	r2, #1
    55be:	4620      	mov	r0, r4
    55c0:	f003 fe9f 	bl	9302 <z_log_msg_runtime_create.constprop.0>
			if (from_hard_fault != 0) {
    55c4:	f1b9 0f00 	cmp.w	r9, #0
    55c8:	d0ad      	beq.n	5526 <mem_manage_fault+0x66>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    55ca:	6aab      	ldr	r3, [r5, #40]	; 0x28
    55cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    55d0:	62ab      	str	r3, [r5, #40]	; 0x28
    55d2:	e7a8      	b.n	5526 <mem_manage_fault+0x66>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    55d4:	6863      	ldr	r3, [r4, #4]
    55d6:	051a      	lsls	r2, r3, #20
    55d8:	d5c8      	bpl.n	556c <mem_manage_fault+0xac>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    55da:	4641      	mov	r1, r8
    55dc:	4638      	mov	r0, r7
    55de:	f7ff fdf7 	bl	51d0 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    55e2:	2800      	cmp	r0, #0
    55e4:	d0c2      	beq.n	556c <mem_manage_fault+0xac>
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    55e6:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    55ea:	2002      	movs	r0, #2
    55ec:	e7bf      	b.n	556e <mem_manage_fault+0xae>
    55ee:	bf00      	nop
    55f0:	0000a64c 	.word	0x0000a64c
    55f4:	00009edc 	.word	0x00009edc
    55f8:	e000ed00 	.word	0xe000ed00
    55fc:	0000a662 	.word	0x0000a662
    5600:	0000a4dc 	.word	0x0000a4dc
    5604:	0000a6c3 	.word	0x0000a6c3
    5608:	0000a550 	.word	0x0000a550
    560c:	0000a695 	.word	0x0000a695
    5610:	0000a6ad 	.word	0x0000a6ad

00005614 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    5614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    5618:	4b72      	ldr	r3, [pc, #456]	; (57e4 <z_arm_fault+0x1d0>)
    561a:	685f      	ldr	r7, [r3, #4]
{
    561c:	b0a2      	sub	sp, #136	; 0x88
    561e:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    5620:	f3c7 0408 	ubfx	r4, r7, #0, #9
    5624:	2300      	movs	r3, #0
    5626:	f383 8811 	msr	BASEPRI, r3
    562a:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    562e:	f002 407f 	and.w	r0, r2, #4278190080	; 0xff000000
    5632:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
    5636:	d10c      	bne.n	5652 <z_arm_fault+0x3e>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    5638:	f002 000c 	and.w	r0, r2, #12
    563c:	2808      	cmp	r0, #8
    563e:	d119      	bne.n	5674 <z_arm_fault+0x60>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    5640:	4a69      	ldr	r2, [pc, #420]	; (57e8 <z_arm_fault+0x1d4>)
    5642:	496a      	ldr	r1, [pc, #424]	; (57ec <z_arm_fault+0x1d8>)
    5644:	9300      	str	r3, [sp, #0]
    5646:	e9cd 3201 	strd	r3, r2, [sp, #4]
    564a:	4618      	mov	r0, r3
    564c:	2201      	movs	r2, #1
    564e:	f003 fe58 	bl	9302 <z_log_msg_runtime_create.constprop.0>
	*nested_exc = false;
    5652:	2600      	movs	r6, #0
		return NULL;
    5654:	4635      	mov	r5, r6
	*recoverable = false;
    5656:	f04f 0800 	mov.w	r8, #0
	switch (fault) {
    565a:	1ee3      	subs	r3, r4, #3
	*recoverable = false;
    565c:	f88d 801f 	strb.w	r8, [sp, #31]
	switch (fault) {
    5660:	2b09      	cmp	r3, #9
    5662:	f200 80a5 	bhi.w	57b0 <z_arm_fault+0x19c>
    5666:	e8df f003 	tbb	[pc, r3]
    566a:	990b      	.short	0x990b
    566c:	a3a3959d 	.word	0xa3a3959d
    5670:	a1a3a3a3 	.word	0xa1a3a3a3
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    5674:	0712      	lsls	r2, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
    5676:	bf46      	itte	mi
    5678:	460d      	movmi	r5, r1
	*nested_exc = false;
    567a:	461e      	movmi	r6, r3
			*nested_exc = true;
    567c:	2601      	movpl	r6, #1
    567e:	e7ea      	b.n	5656 <z_arm_fault+0x42>
	PR_FAULT_INFO("***** HARD FAULT *****");
    5680:	4b5b      	ldr	r3, [pc, #364]	; (57f0 <z_arm_fault+0x1dc>)
    5682:	495a      	ldr	r1, [pc, #360]	; (57ec <z_arm_fault+0x1d8>)
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    5684:	4f57      	ldr	r7, [pc, #348]	; (57e4 <z_arm_fault+0x1d0>)
	PR_FAULT_INFO("***** HARD FAULT *****");
    5686:	f8cd 8000 	str.w	r8, [sp]
    568a:	e9cd 8301 	strd	r8, r3, [sp, #4]
    568e:	2300      	movs	r3, #0
    5690:	2201      	movs	r2, #1
    5692:	4618      	mov	r0, r3
    5694:	f003 fe35 	bl	9302 <z_log_msg_runtime_create.constprop.0>
	*recoverable = false;
    5698:	f88d 801f 	strb.w	r8, [sp, #31]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    569c:	6afc      	ldr	r4, [r7, #44]	; 0x2c
    569e:	f014 0402 	ands.w	r4, r4, #2
    56a2:	d005      	beq.n	56b0 <z_arm_fault+0x9c>
		PR_EXC("  Bus fault on vector table read");
    56a4:	4b53      	ldr	r3, [pc, #332]	; (57f4 <z_arm_fault+0x1e0>)
	PR_FAULT_INFO(
    56a6:	f8cd 8000 	str.w	r8, [sp]
    56aa:	e9cd 8301 	strd	r8, r3, [sp, #4]
    56ae:	e006      	b.n	56be <z_arm_fault+0xaa>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    56b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    56b2:	2b00      	cmp	r3, #0
    56b4:	da0b      	bge.n	56ce <z_arm_fault+0xba>
		PR_EXC("  Debug event");
    56b6:	4b50      	ldr	r3, [pc, #320]	; (57f8 <z_arm_fault+0x1e4>)
    56b8:	9400      	str	r4, [sp, #0]
    56ba:	e9cd 4301 	strd	r4, r3, [sp, #4]
	PR_FAULT_INFO(
    56be:	2300      	movs	r3, #0
    56c0:	494a      	ldr	r1, [pc, #296]	; (57ec <z_arm_fault+0x1d8>)
    56c2:	2201      	movs	r2, #1
    56c4:	4618      	mov	r0, r3
    56c6:	f003 fe1c 	bl	9302 <z_log_msg_runtime_create.constprop.0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    56ca:	2400      	movs	r4, #0
    56cc:	e03a      	b.n	5744 <z_arm_fault+0x130>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    56ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    56d0:	005b      	lsls	r3, r3, #1
    56d2:	d5fa      	bpl.n	56ca <z_arm_fault+0xb6>
		PR_EXC("  Fault escalation (see below)");
    56d4:	4b49      	ldr	r3, [pc, #292]	; (57fc <z_arm_fault+0x1e8>)
    56d6:	4945      	ldr	r1, [pc, #276]	; (57ec <z_arm_fault+0x1d8>)
    56d8:	9400      	str	r4, [sp, #0]
    56da:	e9cd 4301 	strd	r4, r3, [sp, #4]
    56de:	2201      	movs	r2, #1
    56e0:	4623      	mov	r3, r4
    56e2:	4620      	mov	r0, r4
    56e4:	f003 fe0d 	bl	9302 <z_log_msg_runtime_create.constprop.0>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    56e8:	697b      	ldr	r3, [r7, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    56ea:	69aa      	ldr	r2, [r5, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    56ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    56f0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    56f2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    56f6:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    56fa:	697b      	ldr	r3, [r7, #20]
	uint16_t fault_insn = *(ret_addr - 1);
    56fc:	f832 2c02 	ldrh.w	r2, [r2, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    5700:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    5704:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    5706:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    570a:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    570e:	f64d 7302 	movw	r3, #57090	; 0xdf02
    5712:	429a      	cmp	r2, r3
    5714:	d009      	beq.n	572a <z_arm_fault+0x116>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
    5716:	6abb      	ldr	r3, [r7, #40]	; 0x28
    5718:	b2db      	uxtb	r3, r3
    571a:	b36b      	cbz	r3, 5778 <z_arm_fault+0x164>
			reason = mem_manage_fault(esf, 1, recoverable);
    571c:	f10d 021f 	add.w	r2, sp, #31
    5720:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    5722:	4628      	mov	r0, r5
    5724:	f7ff fecc 	bl	54c0 <mem_manage_fault>
    5728:	e036      	b.n	5798 <z_arm_fault+0x184>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    572a:	682b      	ldr	r3, [r5, #0]
    572c:	9303      	str	r3, [sp, #12]
    572e:	4b34      	ldr	r3, [pc, #208]	; (5800 <z_arm_fault+0x1ec>)
    5730:	9400      	str	r4, [sp, #0]
    5732:	e9cd 4301 	strd	r4, r3, [sp, #4]
    5736:	4620      	mov	r0, r4
    5738:	4623      	mov	r3, r4
    573a:	492c      	ldr	r1, [pc, #176]	; (57ec <z_arm_fault+0x1d8>)
    573c:	2201      	movs	r2, #1
    573e:	f003 fde0 	bl	9302 <z_log_msg_runtime_create.constprop.0>
			reason = esf->basic.r0;
    5742:	682c      	ldr	r4, [r5, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    5744:	f89d 301f 	ldrb.w	r3, [sp, #31]
    5748:	b99b      	cbnz	r3, 5772 <z_arm_fault+0x15e>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    574a:	2268      	movs	r2, #104	; 0x68
    574c:	4629      	mov	r1, r5
    574e:	a808      	add	r0, sp, #32
    5750:	f004 fa4d 	bl	9bee <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    5754:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    5756:	2e00      	cmp	r6, #0
    5758:	d03e      	beq.n	57d8 <z_arm_fault+0x1c4>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    575a:	f3c3 0208 	ubfx	r2, r3, #0, #9
    575e:	b922      	cbnz	r2, 576a <z_arm_fault+0x156>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    5760:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    5764:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    5768:	930f      	str	r3, [sp, #60]	; 0x3c
	}

	z_arm_fatal_error(reason, &esf_copy);
    576a:	a908      	add	r1, sp, #32
    576c:	4620      	mov	r0, r4
    576e:	f7ff fb5b 	bl	4e28 <z_arm_fatal_error>
}
    5772:	b022      	add	sp, #136	; 0x88
    5774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
    5778:	6abb      	ldr	r3, [r7, #40]	; 0x28
    577a:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
    577e:	d005      	beq.n	578c <z_arm_fault+0x178>
			reason = bus_fault(esf, 1, recoverable);
    5780:	f10d 011f 	add.w	r1, sp, #31
    5784:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    5786:	f7ff fd91 	bl	52ac <bus_fault.constprop.0>
    578a:	e005      	b.n	5798 <z_arm_fault+0x184>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
    578c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    578e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    5792:	d39a      	bcc.n	56ca <z_arm_fault+0xb6>
			reason = usage_fault(esf);
    5794:	f7ff fe18 	bl	53c8 <usage_fault.constprop.0>
    5798:	4604      	mov	r4, r0
    579a:	e7d3      	b.n	5744 <z_arm_fault+0x130>
		reason = mem_manage_fault(esf, 0, recoverable);
    579c:	f10d 021f 	add.w	r2, sp, #31
    57a0:	2100      	movs	r1, #0
    57a2:	e7be      	b.n	5722 <z_arm_fault+0x10e>
		reason = bus_fault(esf, 0, recoverable);
    57a4:	f10d 011f 	add.w	r1, sp, #31
    57a8:	2000      	movs	r0, #0
    57aa:	e7ec      	b.n	5786 <z_arm_fault+0x172>
	PR_FAULT_INFO(
    57ac:	4b15      	ldr	r3, [pc, #84]	; (5804 <z_arm_fault+0x1f0>)
    57ae:	e77a      	b.n	56a6 <z_arm_fault+0x92>
	PR_FAULT_INFO("***** %s %d) *****",
    57b0:	4a15      	ldr	r2, [pc, #84]	; (5808 <z_arm_fault+0x1f4>)
    57b2:	4b16      	ldr	r3, [pc, #88]	; (580c <z_arm_fault+0x1f8>)
    57b4:	490d      	ldr	r1, [pc, #52]	; (57ec <z_arm_fault+0x1d8>)
    57b6:	f417 7ff8 	tst.w	r7, #496	; 0x1f0
    57ba:	bf18      	it	ne
    57bc:	4613      	movne	r3, r2
    57be:	3c10      	subs	r4, #16
    57c0:	e9cd 3403 	strd	r3, r4, [sp, #12]
    57c4:	4b12      	ldr	r3, [pc, #72]	; (5810 <z_arm_fault+0x1fc>)
    57c6:	9302      	str	r3, [sp, #8]
    57c8:	2300      	movs	r3, #0
    57ca:	e9cd 3300 	strd	r3, r3, [sp]
    57ce:	2201      	movs	r2, #1
    57d0:	4618      	mov	r0, r3
    57d2:	f003 fd96 	bl	9302 <z_log_msg_runtime_create.constprop.0>
}
    57d6:	e778      	b.n	56ca <z_arm_fault+0xb6>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    57d8:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    57dc:	f023 0301 	bic.w	r3, r3, #1
    57e0:	e7c2      	b.n	5768 <z_arm_fault+0x154>
    57e2:	bf00      	nop
    57e4:	e000ed00 	.word	0xe000ed00
    57e8:	0000a710 	.word	0x0000a710
    57ec:	00009edc 	.word	0x00009edc
    57f0:	0000a73b 	.word	0x0000a73b
    57f4:	0000a752 	.word	0x0000a752
    57f8:	0000a773 	.word	0x0000a773
    57fc:	0000a781 	.word	0x0000a781
    5800:	0000a7a0 	.word	0x0000a7a0
    5804:	0000a7bc 	.word	0x0000a7bc
    5808:	0000a6f7 	.word	0x0000a6f7
    580c:	0000a6e2 	.word	0x0000a6e2
    5810:	0000a7e0 	.word	0x0000a7e0

00005814 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    5814:	4a02      	ldr	r2, [pc, #8]	; (5820 <z_arm_fault_init+0xc>)
    5816:	6953      	ldr	r3, [r2, #20]
    5818:	f043 0310 	orr.w	r3, r3, #16
    581c:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    581e:	4770      	bx	lr
    5820:	e000ed00 	.word	0xe000ed00

00005824 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    5824:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    5828:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    582c:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    582e:	4672      	mov	r2, lr
	bl z_arm_fault
    5830:	f7ff fef0 	bl	5614 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    5834:	bd01      	pop	{r0, pc}
    5836:	bf00      	nop

00005838 <z_arm_interrupt_init>:
    5838:	4804      	ldr	r0, [pc, #16]	; (584c <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    583a:	2300      	movs	r3, #0
    583c:	2120      	movs	r1, #32
    583e:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    5840:	3301      	adds	r3, #1
    5842:	2b30      	cmp	r3, #48	; 0x30
    5844:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    5848:	d1f9      	bne.n	583e <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    584a:	4770      	bx	lr
    584c:	e000e100 	.word	0xe000e100

00005850 <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    5850:	2000      	movs	r0, #0
    msr CONTROL, r0
    5852:	f380 8814 	msr	CONTROL, r0
    isb
    5856:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    585a:	f7fe fe1f 	bl	449c <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    585e:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    5860:	490d      	ldr	r1, [pc, #52]	; (5898 <__start+0x48>)
    str r0, [r1]
    5862:	6008      	str	r0, [r1, #0]
    dsb
    5864:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    5868:	480c      	ldr	r0, [pc, #48]	; (589c <__start+0x4c>)
    msr msp, r0
    586a:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    586e:	f000 f82b 	bl	58c8 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    5872:	2020      	movs	r0, #32
    msr BASEPRI, r0
    5874:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    5878:	4809      	ldr	r0, [pc, #36]	; (58a0 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    587a:	f44f 6104 	mov.w	r1, #2112	; 0x840
    adds r0, r0, r1
    587e:	1840      	adds	r0, r0, r1
    msr PSP, r0
    5880:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    5884:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    5888:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    588a:	4308      	orrs	r0, r1
    msr CONTROL, r0
    588c:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    5890:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    5894:	f7ff fb94 	bl	4fc0 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    5898:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    589c:	20005180 	.word	0x20005180
    ldr r0, =z_interrupt_stacks
    58a0:	20002780 	.word	0x20002780

000058a4 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    58a4:	4907      	ldr	r1, [pc, #28]	; (58c4 <z_arm_clear_arm_mpu_config+0x20>)
    58a6:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

	for (i = 0; i < num_regions; i++) {
    58aa:	2300      	movs	r3, #0
	int num_regions =
    58ac:	f3c2 2207 	ubfx	r2, r2, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
    58b0:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
    58b2:	4293      	cmp	r3, r2
    58b4:	db00      	blt.n	58b8 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    58b6:	4770      	bx	lr
  MPU->RNR = rnr;
    58b8:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  MPU->RASR = 0U;
    58bc:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    58c0:	3301      	adds	r3, #1
    58c2:	e7f6      	b.n	58b2 <z_arm_clear_arm_mpu_config+0xe>
    58c4:	e000ed00 	.word	0xe000ed00

000058c8 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    58c8:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    58ca:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    58cc:	2300      	movs	r3, #0
    58ce:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    58d2:	f7ff ffe7 	bl	58a4 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    58d6:	4b14      	ldr	r3, [pc, #80]	; (5928 <z_arm_init_arch_hw_at_boot+0x60>)
    58d8:	f04f 32ff 	mov.w	r2, #4294967295
    58dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    58e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    58e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    58e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    58ec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    58f0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    58f4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    58f8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    58fc:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    5900:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    5904:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    5908:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    590c:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    5910:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    5914:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    5918:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
    591c:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    591e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5922:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    5926:	bd08      	pop	{r3, pc}
    5928:	e000e100 	.word	0xe000e100

0000592c <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    592c:	4b08      	ldr	r3, [pc, #32]	; (5950 <z_impl_k_thread_abort+0x24>)
    592e:	689b      	ldr	r3, [r3, #8]
    5930:	4283      	cmp	r3, r0
    5932:	d10b      	bne.n	594c <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    5934:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    5938:	b143      	cbz	r3, 594c <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    593a:	4b06      	ldr	r3, [pc, #24]	; (5954 <z_impl_k_thread_abort+0x28>)
    593c:	685a      	ldr	r2, [r3, #4]
    593e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    5942:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    5944:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    5946:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    594a:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
    594c:	f002 bdce 	b.w	84ec <z_thread_abort>
    5950:	200022e0 	.word	0x200022e0
    5954:	e000ed00 	.word	0xe000ed00

00005958 <z_arm_configure_static_mpu_regions>:
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    5958:	4b02      	ldr	r3, [pc, #8]	; (5964 <z_arm_configure_static_mpu_regions+0xc>)
    595a:	4a03      	ldr	r2, [pc, #12]	; (5968 <z_arm_configure_static_mpu_regions+0x10>)
    595c:	4803      	ldr	r0, [pc, #12]	; (596c <z_arm_configure_static_mpu_regions+0x14>)
    595e:	2101      	movs	r1, #1
    5960:	f000 b88c 	b.w	5a7c <arm_core_mpu_configure_static_mpu_regions>
    5964:	20020000 	.word	0x20020000
    5968:	20000000 	.word	0x20000000
    596c:	00009fbc 	.word	0x00009fbc

00005970 <z_arm_configure_dynamic_mpu_regions>:
 *
 * This function is not inherently thread-safe, but the memory domain
 * spinlock needs to be held anyway.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
    5970:	b510      	push	{r4, lr}
    5972:	4604      	mov	r4, r0
	/* Privileged stack guard */
	uintptr_t guard_start;
	size_t guard_size = MPU_GUARD_ALIGN_AND_SIZE;

#if defined(CONFIG_FPU) && defined(CONFIG_FPU_SHARING)
	guard_size = z_arm_mpu_stack_guard_and_fpu_adjust(thread);
    5974:	f7ff fbf4 	bl	5160 <z_arm_mpu_stack_guard_and_fpu_adjust>
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    5978:	6e62      	ldr	r2, [r4, #100]	; 0x64
	guard_size = z_arm_mpu_stack_guard_and_fpu_adjust(thread);
    597a:	4603      	mov	r3, r0
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    597c:	4805      	ldr	r0, [pc, #20]	; (5994 <z_arm_configure_dynamic_mpu_regions+0x24>)
		guard_start = thread->stack_info.start - guard_size;
    597e:	1ad2      	subs	r2, r2, r3
	dynamic_regions[region_num].size = guard_size;
    5980:	e9c0 2300 	strd	r2, r3, [r0]
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    5984:	4b04      	ldr	r3, [pc, #16]	; (5998 <z_arm_configure_dynamic_mpu_regions+0x28>)
    5986:	6083      	str	r3, [r0, #8]
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
						   region_num);
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_enable();
#endif
}
    5988:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    598c:	2101      	movs	r1, #1
    598e:	f000 b87f 	b.w	5a90 <arm_core_mpu_configure_dynamic_mpu_regions>
    5992:	bf00      	nop
    5994:	2000215c 	.word	0x2000215c
    5998:	150b0000 	.word	0x150b0000

0000599c <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    599c:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    599e:	4e28      	ldr	r6, [pc, #160]	; (5a40 <mpu_configure_regions+0xa4>)
    59a0:	b085      	sub	sp, #20
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    59a2:	2500      	movs	r5, #0
    59a4:	428d      	cmp	r5, r1
    59a6:	da15      	bge.n	59d4 <mpu_configure_regions+0x38>
		if (regions[i].size == 0U) {
    59a8:	6844      	ldr	r4, [r0, #4]
    59aa:	2c00      	cmp	r4, #0
    59ac:	d045      	beq.n	5a3a <mpu_configure_regions+0x9e>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
    59ae:	b1d3      	cbz	r3, 59e6 <mpu_configure_regions+0x4a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    59b0:	f104 3cff 	add.w	ip, r4, #4294967295
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    59b4:	ea14 0f0c 	tst.w	r4, ip
    59b8:	d00f      	beq.n	59da <mpu_configure_regions+0x3e>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
    59ba:	4b22      	ldr	r3, [pc, #136]	; (5a44 <mpu_configure_regions+0xa8>)
    59bc:	9503      	str	r5, [sp, #12]
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    59be:	9302      	str	r3, [sp, #8]
    59c0:	2300      	movs	r3, #0
    59c2:	2201      	movs	r2, #1
    59c4:	e9cd 3300 	strd	r3, r3, [sp]
    59c8:	491f      	ldr	r1, [pc, #124]	; (5a48 <mpu_configure_regions+0xac>)
    59ca:	4618      	mov	r0, r3
    59cc:	f003 fca9 	bl	9322 <z_log_msg_runtime_create.constprop.0>
			return -EINVAL;
    59d0:	f06f 0215 	mvn.w	r2, #21
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    59d4:	4610      	mov	r0, r2
    59d6:	b005      	add	sp, #20
    59d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		&&
    59da:	2c1f      	cmp	r4, #31
    59dc:	d9ed      	bls.n	59ba <mpu_configure_regions+0x1e>
		((part->start & (part->size - 1U)) == 0U);
    59de:	6807      	ldr	r7, [r0, #0]
		&&
    59e0:	ea1c 0f07 	tst.w	ip, r7
    59e4:	d1e9      	bne.n	59ba <mpu_configure_regions+0x1e>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    59e6:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    59e8:	6807      	ldr	r7, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    59ea:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    59ee:	fa5f fe82 	uxtb.w	lr, r2
	if (size <= 32U) {
    59f2:	d910      	bls.n	5a16 <mpu_configure_regions+0x7a>
	if (size > (1UL << 31)) {
    59f4:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    59f8:	d80f      	bhi.n	5a1a <mpu_configure_regions+0x7e>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    59fa:	3c01      	subs	r4, #1
    59fc:	fab4 f484 	clz	r4, r4
    5a00:	f1c4 041f 	rsb	r4, r4, #31
    5a04:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    5a06:	f1be 0f07 	cmp.w	lr, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    5a0a:	ea4c 0c04 	orr.w	ip, ip, r4
    5a0e:	d906      	bls.n	5a1e <mpu_configure_regions+0x82>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    5a10:	4b0e      	ldr	r3, [pc, #56]	; (5a4c <mpu_configure_regions+0xb0>)
    5a12:	9203      	str	r2, [sp, #12]
    5a14:	e7d3      	b.n	59be <mpu_configure_regions+0x22>
		return REGION_32B;
    5a16:	2408      	movs	r4, #8
    5a18:	e7f5      	b.n	5a06 <mpu_configure_regions+0x6a>
		return REGION_4G;
    5a1a:	243e      	movs	r4, #62	; 0x3e
    5a1c:	e7f3      	b.n	5a06 <mpu_configure_regions+0x6a>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    5a1e:	f027 041f 	bic.w	r4, r7, #31
				| MPU_RBAR_VALID_Msk | index;
    5a22:	4314      	orrs	r4, r2
    5a24:	f044 0410 	orr.w	r4, r4, #16
    5a28:	f8c6 2098 	str.w	r2, [r6, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    5a2c:	f8c6 409c 	str.w	r4, [r6, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    5a30:	f04c 0401 	orr.w	r4, ip, #1
    5a34:	f8c6 40a0 	str.w	r4, [r6, #160]	; 0xa0
		reg_index++;
    5a38:	3201      	adds	r2, #1
	for (i = 0; i < regions_num; i++) {
    5a3a:	3501      	adds	r5, #1
    5a3c:	300c      	adds	r0, #12
    5a3e:	e7b1      	b.n	59a4 <mpu_configure_regions+0x8>
    5a40:	e000ed00 	.word	0xe000ed00
    5a44:	0000a7f7 	.word	0x0000a7f7
    5a48:	00009ed4 	.word	0x00009ed4
    5a4c:	0000a81a 	.word	0x0000a81a

00005a50 <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    5a50:	4b04      	ldr	r3, [pc, #16]	; (5a64 <arm_core_mpu_enable+0x14>)
    5a52:	2205      	movs	r2, #5
    5a54:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    5a58:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5a5c:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    5a60:	4770      	bx	lr
    5a62:	bf00      	nop
    5a64:	e000ed00 	.word	0xe000ed00

00005a68 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    5a68:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    5a6c:	4b02      	ldr	r3, [pc, #8]	; (5a78 <arm_core_mpu_disable+0x10>)
    5a6e:	2200      	movs	r2, #0
    5a70:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    5a74:	4770      	bx	lr
    5a76:	bf00      	nop
    5a78:	e000ed00 	.word	0xe000ed00

00005a7c <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    5a7c:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    5a7e:	4c03      	ldr	r4, [pc, #12]	; (5a8c <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    5a80:	2301      	movs	r3, #1
    5a82:	7822      	ldrb	r2, [r4, #0]
    5a84:	f7ff ff8a 	bl	599c <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    5a88:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    5a8a:	bd10      	pop	{r4, pc}
    5a8c:	20002326 	.word	0x20002326

00005a90 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	*dynamic_regions, uint8_t regions_num)
{
    5a90:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    5a92:	4a09      	ldr	r2, [pc, #36]	; (5ab8 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
    5a94:	2300      	movs	r3, #0
    5a96:	7812      	ldrb	r2, [r2, #0]
    5a98:	f7ff ff80 	bl	599c <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    5a9c:	f110 0f16 	cmn.w	r0, #22
    5aa0:	d003      	beq.n	5aaa <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
  MPU->RNR = rnr;
    5aa2:	4b06      	ldr	r3, [pc, #24]	; (5abc <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)
  MPU->RASR = 0U;
    5aa4:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    5aa6:	2807      	cmp	r0, #7
    5aa8:	dd00      	ble.n	5aac <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    5aaa:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
    5aac:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
  MPU->RASR = 0U;
    5ab0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    5ab4:	3001      	adds	r0, #1
    5ab6:	e7f6      	b.n	5aa6 <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
    5ab8:	20002326 	.word	0x20002326
    5abc:	e000ed00 	.word	0xe000ed00

00005ac0 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    5ac0:	4914      	ldr	r1, [pc, #80]	; (5b14 <z_arm_mpu_init+0x54>)
    5ac2:	6808      	ldr	r0, [r1, #0]
    5ac4:	2808      	cmp	r0, #8
{
    5ac6:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    5ac8:	d821      	bhi.n	5b0e <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    5aca:	f7ff ffcd 	bl	5a68 <arm_core_mpu_disable>
    5ace:	4c12      	ldr	r4, [pc, #72]	; (5b18 <z_arm_mpu_init+0x58>)
    5ad0:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    5ad2:	2200      	movs	r2, #0
    5ad4:	4290      	cmp	r0, r2
    5ad6:	f101 010c 	add.w	r1, r1, #12
    5ada:	d105      	bne.n	5ae8 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    5adc:	4b0f      	ldr	r3, [pc, #60]	; (5b1c <z_arm_mpu_init+0x5c>)
    5ade:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    5ae0:	f7ff ffb6 	bl	5a50 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    5ae4:	2000      	movs	r0, #0
}
    5ae6:	bd10      	pop	{r4, pc}
    5ae8:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    5aec:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    5af0:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    5af4:	4313      	orrs	r3, r2
    5af6:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    5afa:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    5afe:	f851 3c04 	ldr.w	r3, [r1, #-4]
    5b02:	f043 0301 	orr.w	r3, r3, #1
    5b06:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    5b0a:	3201      	adds	r2, #1
    5b0c:	e7e2      	b.n	5ad4 <z_arm_mpu_init+0x14>
		return -1;
    5b0e:	f04f 30ff 	mov.w	r0, #4294967295
    5b12:	e7e8      	b.n	5ae6 <z_arm_mpu_init+0x26>
    5b14:	00009fc8 	.word	0x00009fc8
    5b18:	e000ed00 	.word	0xe000ed00
    5b1c:	20002326 	.word	0x20002326

00005b20 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    5b20:	4b01      	ldr	r3, [pc, #4]	; (5b28 <__stdout_hook_install+0x8>)
    5b22:	6018      	str	r0, [r3, #0]
}
    5b24:	4770      	bx	lr
    5b26:	bf00      	nop
    5b28:	20000014 	.word	0x20000014

00005b2c <nordicsemi_nrf52_init>:
	__asm__ volatile(
    5b2c:	f04f 0320 	mov.w	r3, #32
    5b30:	f3ef 8211 	mrs	r2, BASEPRI
    5b34:	f383 8812 	msr	BASEPRI_MAX, r3
    5b38:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    5b3c:	4906      	ldr	r1, [pc, #24]	; (5b58 <nordicsemi_nrf52_init+0x2c>)
    5b3e:	2301      	movs	r3, #1
    5b40:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    5b44:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    5b48:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
    5b4c:	f382 8811 	msr	BASEPRI, r2
    5b50:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    5b54:	2000      	movs	r0, #0
    5b56:	4770      	bx	lr
    5b58:	4001e000 	.word	0x4001e000

00005b5c <sys_arch_reboot>:
    *p_gpregret = val;
    5b5c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5b60:	b2c0      	uxtb	r0, r0
    5b62:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    5b66:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    5b6a:	4905      	ldr	r1, [pc, #20]	; (5b80 <sys_arch_reboot+0x24>)
    5b6c:	4b05      	ldr	r3, [pc, #20]	; (5b84 <sys_arch_reboot+0x28>)
    5b6e:	68ca      	ldr	r2, [r1, #12]
    5b70:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    5b74:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    5b76:	60cb      	str	r3, [r1, #12]
    5b78:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    5b7c:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    5b7e:	e7fd      	b.n	5b7c <sys_arch_reboot+0x20>
    5b80:	e000ed00 	.word	0xe000ed00
    5b84:	05fa0004 	.word	0x05fa0004

00005b88 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    5b88:	b120      	cbz	r0, 5b94 <arch_busy_wait+0xc>
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    5b8a:	4b03      	ldr	r3, [pc, #12]	; (5b98 <arch_busy_wait+0x10>)
    5b8c:	0180      	lsls	r0, r0, #6
    5b8e:	f043 0301 	orr.w	r3, r3, #1
    5b92:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    5b94:	4770      	bx	lr
    5b96:	bf00      	nop
    5b98:	00009f10 	.word	0x00009f10

00005b9c <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    5b9c:	4b08      	ldr	r3, [pc, #32]	; (5bc0 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    5b9e:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    5ba0:	1ac3      	subs	r3, r0, r3
{
    5ba2:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    5ba4:	4907      	ldr	r1, [pc, #28]	; (5bc4 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
    5ba6:	109b      	asrs	r3, r3, #2
{
    5ba8:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    5baa:	4359      	muls	r1, r3
    5bac:	4806      	ldr	r0, [pc, #24]	; (5bc8 <onoff_stop+0x2c>)
    5bae:	2240      	movs	r2, #64	; 0x40
    5bb0:	f003 fbfc 	bl	93ac <stop>
	notify(mgr, res);
    5bb4:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    5bb6:	4601      	mov	r1, r0
	notify(mgr, res);
    5bb8:	4620      	mov	r0, r4
}
    5bba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    5bbe:	4718      	bx	r3
    5bc0:	2000217c 	.word	0x2000217c
    5bc4:	b6db6db7 	.word	0xb6db6db7
    5bc8:	00009c8c 	.word	0x00009c8c

00005bcc <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    5bcc:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    5bce:	4c0c      	ldr	r4, [pc, #48]	; (5c00 <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    5bd0:	4a0c      	ldr	r2, [pc, #48]	; (5c04 <onoff_start+0x38>)
    5bd2:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
    5bd4:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    5bd6:	9300      	str	r3, [sp, #0]
{
    5bd8:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    5bda:	460b      	mov	r3, r1
    5bdc:	490a      	ldr	r1, [pc, #40]	; (5c08 <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
    5bde:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    5be0:	4361      	muls	r1, r4
{
    5be2:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    5be4:	4809      	ldr	r0, [pc, #36]	; (5c0c <onoff_start+0x40>)
    5be6:	f003 fc0d 	bl	9404 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    5bea:	1e01      	subs	r1, r0, #0
    5bec:	da05      	bge.n	5bfa <onoff_start+0x2e>
		notify(mgr, err);
    5bee:	4630      	mov	r0, r6
    5bf0:	462b      	mov	r3, r5
	}
}
    5bf2:	b002      	add	sp, #8
    5bf4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
    5bf8:	4718      	bx	r3
}
    5bfa:	b002      	add	sp, #8
    5bfc:	bd70      	pop	{r4, r5, r6, pc}
    5bfe:	bf00      	nop
    5c00:	2000217c 	.word	0x2000217c
    5c04:	0000946f 	.word	0x0000946f
    5c08:	b6db6db7 	.word	0xb6db6db7
    5c0c:	00009c8c 	.word	0x00009c8c

00005c10 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    5c10:	2200      	movs	r2, #0
{
    5c12:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    5c14:	2101      	movs	r1, #1
{
    5c16:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    5c18:	4610      	mov	r0, r2
    5c1a:	f7ff f9b5 	bl	4f88 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    5c1e:	480f      	ldr	r0, [pc, #60]	; (5c5c <clk_init+0x4c>)
    5c20:	f000 ff42 	bl	6aa8 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    5c24:	4b0e      	ldr	r3, [pc, #56]	; (5c60 <clk_init+0x50>)
    5c26:	4298      	cmp	r0, r3
    5c28:	d115      	bne.n	5c56 <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    5c2a:	f003 fd19 	bl	9660 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
    5c2e:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
    5c30:	490c      	ldr	r1, [pc, #48]	; (5c64 <clk_init+0x54>)
    5c32:	4630      	mov	r0, r6
    5c34:	f003 f9f6 	bl	9024 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    5c38:	2800      	cmp	r0, #0
    5c3a:	db0b      	blt.n	5c54 <clk_init+0x44>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    5c3c:	2501      	movs	r5, #1
    5c3e:	6435      	str	r5, [r6, #64]	; 0x40
	struct nrf_clock_control_data *data = dev->data;
    5c40:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    5c42:	4908      	ldr	r1, [pc, #32]	; (5c64 <clk_init+0x54>)
    5c44:	f104 001c 	add.w	r0, r4, #28
    5c48:	f003 f9ec 	bl	9024 <onoff_manager_init>
		if (err < 0) {
    5c4c:	2800      	cmp	r0, #0
    5c4e:	db01      	blt.n	5c54 <clk_init+0x44>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    5c50:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
    5c52:	2000      	movs	r0, #0
}
    5c54:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    5c56:	f06f 0004 	mvn.w	r0, #4
    5c5a:	e7fb      	b.n	5c54 <clk_init+0x44>
    5c5c:	00005c9d 	.word	0x00005c9d
    5c60:	0bad0000 	.word	0x0bad0000
    5c64:	00009fe8 	.word	0x00009fe8

00005c68 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    5c68:	b570      	push	{r4, r5, r6, lr}
    5c6a:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    5c6c:	230c      	movs	r3, #12
    5c6e:	4809      	ldr	r0, [pc, #36]	; (5c94 <clkstarted_handle.constprop.0+0x2c>)
    5c70:	434b      	muls	r3, r1
    5c72:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    5c74:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
    5c78:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    5c7a:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
    5c7c:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    5c7e:	4418      	add	r0, r3
    5c80:	f003 fb81 	bl	9386 <set_on_state>
	if (callback) {
    5c84:	b12d      	cbz	r5, 5c92 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    5c86:	4632      	mov	r2, r6
    5c88:	462b      	mov	r3, r5
    5c8a:	4803      	ldr	r0, [pc, #12]	; (5c98 <clkstarted_handle.constprop.0+0x30>)
}
    5c8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    5c90:	4718      	bx	r3
}
    5c92:	bd70      	pop	{r4, r5, r6, pc}
    5c94:	2000217c 	.word	0x2000217c
    5c98:	00009c8c 	.word	0x00009c8c

00005c9c <clock_event_handler>:
	switch (event) {
    5c9c:	b110      	cbz	r0, 5ca4 <clock_event_handler+0x8>
    5c9e:	2801      	cmp	r0, #1
    5ca0:	d004      	beq.n	5cac <clock_event_handler+0x10>
    5ca2:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    5ca4:	4b03      	ldr	r3, [pc, #12]	; (5cb4 <clock_event_handler+0x18>)
    5ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    5ca8:	075b      	lsls	r3, r3, #29
    5caa:	d101      	bne.n	5cb0 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    5cac:	f7ff bfdc 	b.w	5c68 <clkstarted_handle.constprop.0>
}
    5cb0:	4770      	bx	lr
    5cb2:	bf00      	nop
    5cb4:	2000217c 	.word	0x2000217c

00005cb8 <generic_hfclk_start>:
{
    5cb8:	b508      	push	{r3, lr}
	__asm__ volatile(
    5cba:	f04f 0320 	mov.w	r3, #32
    5cbe:	f3ef 8111 	mrs	r1, BASEPRI
    5cc2:	f383 8812 	msr	BASEPRI_MAX, r3
    5cc6:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    5cca:	4a12      	ldr	r2, [pc, #72]	; (5d14 <generic_hfclk_start+0x5c>)
    5ccc:	6813      	ldr	r3, [r2, #0]
    5cce:	f043 0002 	orr.w	r0, r3, #2
    5cd2:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    5cd4:	07da      	lsls	r2, r3, #31
    5cd6:	d408      	bmi.n	5cea <generic_hfclk_start+0x32>
	__asm__ volatile(
    5cd8:	f381 8811 	msr	BASEPRI, r1
    5cdc:	f3bf 8f6f 	isb	sy
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    5ce0:	2001      	movs	r0, #1
}
    5ce2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    5ce6:	f003 bcc8 	b.w	967a <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    5cea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5cee:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    5cf2:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    5cf6:	07d3      	lsls	r3, r2, #31
    5cf8:	d5ee      	bpl.n	5cd8 <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
    5cfa:	4807      	ldr	r0, [pc, #28]	; (5d18 <generic_hfclk_start+0x60>)
    5cfc:	f003 fb43 	bl	9386 <set_on_state>
    5d00:	f381 8811 	msr	BASEPRI, r1
    5d04:	f3bf 8f6f 	isb	sy
		clkstarted_handle(CLOCK_DEVICE,
    5d08:	2000      	movs	r0, #0
}
    5d0a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    5d0e:	f7ff bfab 	b.w	5c68 <clkstarted_handle.constprop.0>
    5d12:	bf00      	nop
    5d14:	200021cc 	.word	0x200021cc
    5d18:	200021bc 	.word	0x200021bc

00005d1c <api_blocking_start>:
{
    5d1c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    5d1e:	2200      	movs	r2, #0
    5d20:	2301      	movs	r3, #1
    5d22:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    5d26:	4a09      	ldr	r2, [pc, #36]	; (5d4c <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    5d28:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    5d2c:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    5d2e:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    5d32:	f003 fb95 	bl	9460 <api_start>
	if (err < 0) {
    5d36:	2800      	cmp	r0, #0
    5d38:	db05      	blt.n	5d46 <api_blocking_start+0x2a>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    5d3a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    5d3e:	2300      	movs	r3, #0
    5d40:	4668      	mov	r0, sp
    5d42:	f002 f8c3 	bl	7ecc <z_impl_k_sem_take>
}
    5d46:	b005      	add	sp, #20
    5d48:	f85d fb04 	ldr.w	pc, [sp], #4
    5d4c:	0000948f 	.word	0x0000948f

00005d50 <generic_hfclk_stop>:
{
    5d50:	b510      	push	{r4, lr}
	__asm__ volatile(
    5d52:	f04f 0320 	mov.w	r3, #32
    5d56:	f3ef 8411 	mrs	r4, BASEPRI
    5d5a:	f383 8812 	msr	BASEPRI_MAX, r3
    5d5e:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_GENERIC;
    5d62:	4a07      	ldr	r2, [pc, #28]	; (5d80 <generic_hfclk_stop+0x30>)
    5d64:	6813      	ldr	r3, [r2, #0]
    5d66:	f023 0102 	bic.w	r1, r3, #2
	if (!(hfclk_users & HF_USER_BT)) {
    5d6a:	07db      	lsls	r3, r3, #31
	hfclk_users &= ~HF_USER_GENERIC;
    5d6c:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_BT)) {
    5d6e:	d402      	bmi.n	5d76 <generic_hfclk_stop+0x26>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    5d70:	2001      	movs	r0, #1
    5d72:	f003 fcbe 	bl	96f2 <nrfx_clock_stop>
	__asm__ volatile(
    5d76:	f384 8811 	msr	BASEPRI, r4
    5d7a:	f3bf 8f6f 	isb	sy
}
    5d7e:	bd10      	pop	{r4, pc}
    5d80:	200021cc 	.word	0x200021cc

00005d84 <z_nrf_clock_control_lf_on>:
{
    5d84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    5d88:	4938      	ldr	r1, [pc, #224]	; (5e6c <z_nrf_clock_control_lf_on+0xe8>)
    5d8a:	f3bf 8f5b 	dmb	ish
    5d8e:	4607      	mov	r7, r0
    5d90:	2201      	movs	r2, #1
    5d92:	e851 3f00 	ldrex	r3, [r1]
    5d96:	e841 2000 	strex	r0, r2, [r1]
    5d9a:	2800      	cmp	r0, #0
    5d9c:	d1f9      	bne.n	5d92 <z_nrf_clock_control_lf_on+0xe>
    5d9e:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    5da2:	b933      	cbnz	r3, 5db2 <z_nrf_clock_control_lf_on+0x2e>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    5da4:	4932      	ldr	r1, [pc, #200]	; (5e70 <z_nrf_clock_control_lf_on+0xec>)
		err = onoff_request(mgr, &cli);
    5da6:	4833      	ldr	r0, [pc, #204]	; (5e74 <z_nrf_clock_control_lf_on+0xf0>)
    5da8:	604b      	str	r3, [r1, #4]
    5daa:	60cb      	str	r3, [r1, #12]
    5dac:	608a      	str	r2, [r1, #8]
    5dae:	f003 f94c 	bl	904a <onoff_request>
	switch (start_mode) {
    5db2:	1e7b      	subs	r3, r7, #1
    5db4:	2b01      	cmp	r3, #1
    5db6:	d82b      	bhi.n	5e10 <z_nrf_clock_control_lf_on+0x8c>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    5db8:	2f01      	cmp	r7, #1
    5dba:	d107      	bne.n	5dcc <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    5dbc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5dc0:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    5dc4:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    5dc8:	2b01      	cmp	r3, #1
    5dca:	d021      	beq.n	5e10 <z_nrf_clock_control_lf_on+0x8c>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    5dcc:	f003 fdfc 	bl	99c8 <k_is_in_isr>
    5dd0:	4605      	mov	r5, r0
    5dd2:	b9f8      	cbnz	r0, 5e14 <z_nrf_clock_control_lf_on+0x90>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
    5dd4:	4b28      	ldr	r3, [pc, #160]	; (5e78 <z_nrf_clock_control_lf_on+0xf4>)
    5dd6:	781b      	ldrb	r3, [r3, #0]
    5dd8:	b1e3      	cbz	r3, 5e14 <z_nrf_clock_control_lf_on+0x90>
    p_reg->INTENCLR = mask;
    5dda:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5dde:	2202      	movs	r2, #2
    5de0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    5de4:	4606      	mov	r6, r0
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5de6:	f8df 8094 	ldr.w	r8, [pc, #148]	; 5e7c <z_nrf_clock_control_lf_on+0xf8>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    5dea:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    5dee:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    5df2:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
    5df6:	03d2      	lsls	r2, r2, #15
    5df8:	d516      	bpl.n	5e28 <z_nrf_clock_control_lf_on+0xa4>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    5dfa:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    5dfe:	2b01      	cmp	r3, #1
    5e00:	d001      	beq.n	5e06 <z_nrf_clock_control_lf_on+0x82>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    5e02:	2f01      	cmp	r7, #1
    5e04:	d110      	bne.n	5e28 <z_nrf_clock_control_lf_on+0xa4>
	if (isr_mode) {
    5e06:	b35d      	cbz	r5, 5e60 <z_nrf_clock_control_lf_on+0xdc>
    5e08:	f386 8811 	msr	BASEPRI, r6
    5e0c:	f3bf 8f6f 	isb	sy
}
    5e10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
    5e14:	f04f 0320 	mov.w	r3, #32
    5e18:	f3ef 8611 	mrs	r6, BASEPRI
    5e1c:	f383 8812 	msr	BASEPRI_MAX, r3
    5e20:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    5e24:	2501      	movs	r5, #1
    5e26:	e7de      	b.n	5de6 <z_nrf_clock_control_lf_on+0x62>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    5e28:	b1ad      	cbz	r5, 5e56 <z_nrf_clock_control_lf_on+0xd2>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    5e2a:	4630      	mov	r0, r6
    5e2c:	f7fe fff0 	bl	4e10 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    5e30:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    5e34:	2b00      	cmp	r3, #0
    5e36:	d1da      	bne.n	5dee <z_nrf_clock_control_lf_on+0x6a>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    5e38:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    5e3c:	2a00      	cmp	r2, #0
    5e3e:	d0d6      	beq.n	5dee <z_nrf_clock_control_lf_on+0x6a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5e40:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    5e44:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    5e48:	2301      	movs	r3, #1
    5e4a:	f8c4 3518 	str.w	r3, [r4, #1304]	; 0x518
    5e4e:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5e52:	60a3      	str	r3, [r4, #8]
}
    5e54:	e7cb      	b.n	5dee <z_nrf_clock_control_lf_on+0x6a>
	return z_impl_k_sleep(timeout);
    5e56:	2100      	movs	r1, #0
    5e58:	2021      	movs	r0, #33	; 0x21
    5e5a:	f002 fb27 	bl	84ac <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    5e5e:	e7e7      	b.n	5e30 <z_nrf_clock_control_lf_on+0xac>
    p_reg->INTENSET = mask;
    5e60:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5e64:	2202      	movs	r2, #2
    5e66:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    5e6a:	e7d1      	b.n	5e10 <z_nrf_clock_control_lf_on+0x8c>
    5e6c:	20002178 	.word	0x20002178
    5e70:	20002168 	.word	0x20002168
    5e74:	20002198 	.word	0x20002198
    5e78:	20002738 	.word	0x20002738
    5e7c:	e000e100 	.word	0xe000e100

00005e80 <rtt_console_init>:

	return character;
}

static int rtt_console_init(const struct device *d)
{
    5e80:	b510      	push	{r4, lr}
	ARG_UNUSED(d);

#ifdef CONFIG_PRINTK
	__printk_hook_install(rtt_console_out);
    5e82:	4c04      	ldr	r4, [pc, #16]	; (5e94 <rtt_console_init+0x14>)
    5e84:	4620      	mov	r0, r4
    5e86:	f7fe f993 	bl	41b0 <__printk_hook_install>
#endif
	__stdout_hook_install(rtt_console_out);
    5e8a:	4620      	mov	r0, r4
    5e8c:	f7ff fe48 	bl	5b20 <__stdout_hook_install>

	return 0;
}
    5e90:	2000      	movs	r0, #0
    5e92:	bd10      	pop	{r4, pc}
    5e94:	00005e99 	.word	0x00005e99

00005e98 <rtt_console_out>:
{
    5e98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5e9a:	4e13      	ldr	r6, [pc, #76]	; (5ee8 <rtt_console_out+0x50>)
	char c = (char)character;
    5e9c:	f88d 0007 	strb.w	r0, [sp, #7]
{
    5ea0:	4604      	mov	r4, r0
	char c = (char)character;
    5ea2:	2503      	movs	r5, #3
		SEGGER_RTT_LOCK();
    5ea4:	f001 fd28 	bl	78f8 <zephyr_rtt_mutex_lock>
		cnt = SEGGER_RTT_WriteNoLock(0, &c, 1);
    5ea8:	2201      	movs	r2, #1
    5eaa:	f10d 0107 	add.w	r1, sp, #7
    5eae:	2000      	movs	r0, #0
    5eb0:	f001 fcec 	bl	788c <SEGGER_RTT_WriteNoLock>
    5eb4:	4607      	mov	r7, r0
		SEGGER_RTT_UNLOCK();
    5eb6:	f001 fd29 	bl	790c <zephyr_rtt_mutex_unlock>
		if (cnt) {
    5eba:	b127      	cbz	r7, 5ec6 <rtt_console_out+0x2e>
			host_present = true;
    5ebc:	2301      	movs	r3, #1
    5ebe:	7033      	strb	r3, [r6, #0]
}
    5ec0:	4620      	mov	r0, r4
    5ec2:	b003      	add	sp, #12
    5ec4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (host_present) {
    5ec6:	7833      	ldrb	r3, [r6, #0]
    5ec8:	2b00      	cmp	r3, #0
    5eca:	d0f9      	beq.n	5ec0 <rtt_console_out+0x28>
			if (max_cnt) {
    5ecc:	3d01      	subs	r5, #1
    5ece:	d008      	beq.n	5ee2 <rtt_console_out+0x4a>
	if (!IS_ENABLED(CONFIG_MULTITHREADING) || k_is_in_isr()) {
    5ed0:	f003 fd7a 	bl	99c8 <k_is_in_isr>
    5ed4:	2800      	cmp	r0, #0
    5ed6:	d1e5      	bne.n	5ea4 <rtt_console_out+0xc>
    5ed8:	2100      	movs	r1, #0
    5eda:	2042      	movs	r0, #66	; 0x42
    5edc:	f002 fae6 	bl	84ac <z_impl_k_sleep>
		SEGGER_RTT_LOCK();
    5ee0:	e7e0      	b.n	5ea4 <rtt_console_out+0xc>
				host_present = false;
    5ee2:	7035      	strb	r5, [r6, #0]
    5ee4:	e7ec      	b.n	5ec0 <rtt_console_out+0x28>
    5ee6:	bf00      	nop
    5ee8:	20002327 	.word	0x20002327

00005eec <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
    5eec:	b530      	push	{r4, r5, lr}
	return port->config;
    5eee:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    5ef0:	7b05      	ldrb	r5, [r0, #12]
    5ef2:	f001 041f 	and.w	r4, r1, #31
	nrfx_err_t err;
	uint8_t ch;

	if (mode == GPIO_INT_MODE_DISABLED) {
    5ef6:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
    5efa:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    5efc:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    5f00:	d105      	bne.n	5f0e <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
    5f02:	4620      	mov	r0, r4
    5f04:	f001 f852 	bl	6fac <nrfx_gpiote_trigger_disable>

		return 0;
    5f08:	2000      	movs	r0, #0
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
}
    5f0a:	b005      	add	sp, #20
    5f0c:	bd30      	pop	{r4, r5, pc}
	nrfx_gpiote_trigger_config_t trigger_config = {
    5f0e:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
    5f10:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
    5f14:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    5f18:	d114      	bne.n	5f44 <gpio_nrfx_pin_interrupt_configure+0x58>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    5f1a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
    5f1e:	bf0c      	ite	eq
    5f20:	2304      	moveq	r3, #4
    5f22:	2305      	movne	r3, #5
    5f24:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    5f28:	2300      	movs	r3, #0
    5f2a:	4619      	mov	r1, r3
    5f2c:	aa02      	add	r2, sp, #8
    5f2e:	4620      	mov	r0, r4
    5f30:	f000 fe7a 	bl	6c28 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    5f34:	4b1f      	ldr	r3, [pc, #124]	; (5fb4 <gpio_nrfx_pin_interrupt_configure+0xc8>)
    5f36:	4298      	cmp	r0, r3
    5f38:	d139      	bne.n	5fae <gpio_nrfx_pin_interrupt_configure+0xc2>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    5f3a:	2101      	movs	r1, #1
    5f3c:	4620      	mov	r0, r4
    5f3e:	f000 ffed 	bl	6f1c <nrfx_gpiote_trigger_enable>
	return 0;
    5f42:	e7e1      	b.n	5f08 <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    5f44:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
    5f48:	d026      	beq.n	5f98 <gpio_nrfx_pin_interrupt_configure+0xac>
    5f4a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    5f4e:	bf14      	ite	ne
    5f50:	2301      	movne	r3, #1
    5f52:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
    5f54:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    5f58:	6883      	ldr	r3, [r0, #8]
    5f5a:	40cb      	lsrs	r3, r1
    5f5c:	07d9      	lsls	r1, r3, #31
    5f5e:	d4e3      	bmi.n	5f28 <gpio_nrfx_pin_interrupt_configure+0x3c>
    5f60:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
    5f64:	d1e0      	bne.n	5f28 <gpio_nrfx_pin_interrupt_configure+0x3c>
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
    5f66:	0962      	lsrs	r2, r4, #5
        case 1: return NRF_P1;
    5f68:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
    5f6a:	f004 031f 	and.w	r3, r4, #31
        case 1: return NRF_P1;
    5f6e:	4a12      	ldr	r2, [pc, #72]	; (5fb8 <gpio_nrfx_pin_interrupt_configure+0xcc>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    5f70:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
        case 1: return NRF_P1;
    5f74:	bf18      	it	ne
    5f76:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    5f7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    5f7e:	07db      	lsls	r3, r3, #31
    5f80:	d4d2      	bmi.n	5f28 <gpio_nrfx_pin_interrupt_configure+0x3c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    5f82:	f10d 0507 	add.w	r5, sp, #7
    5f86:	4629      	mov	r1, r5
    5f88:	4620      	mov	r0, r4
    5f8a:	f000 ff73 	bl	6e74 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    5f8e:	4b0b      	ldr	r3, [pc, #44]	; (5fbc <gpio_nrfx_pin_interrupt_configure+0xd0>)
    5f90:	4298      	cmp	r0, r3
    5f92:	d003      	beq.n	5f9c <gpio_nrfx_pin_interrupt_configure+0xb0>
		trigger_config.p_in_channel = &ch;
    5f94:	9503      	str	r5, [sp, #12]
    5f96:	e7c7      	b.n	5f28 <gpio_nrfx_pin_interrupt_configure+0x3c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    5f98:	2303      	movs	r3, #3
    5f9a:	e7db      	b.n	5f54 <gpio_nrfx_pin_interrupt_configure+0x68>
			err = nrfx_gpiote_channel_alloc(&ch);
    5f9c:	4628      	mov	r0, r5
    5f9e:	f000 ffb7 	bl	6f10 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    5fa2:	4b04      	ldr	r3, [pc, #16]	; (5fb4 <gpio_nrfx_pin_interrupt_configure+0xc8>)
    5fa4:	4298      	cmp	r0, r3
    5fa6:	d0f5      	beq.n	5f94 <gpio_nrfx_pin_interrupt_configure+0xa8>
				return -ENOMEM;
    5fa8:	f06f 000b 	mvn.w	r0, #11
    5fac:	e7ad      	b.n	5f0a <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EINVAL;
    5fae:	f06f 0015 	mvn.w	r0, #21
    5fb2:	e7aa      	b.n	5f0a <gpio_nrfx_pin_interrupt_configure+0x1e>
    5fb4:	0bad0000 	.word	0x0bad0000
    5fb8:	50000300 	.word	0x50000300
    5fbc:	0bad0004 	.word	0x0bad0004

00005fc0 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    5fc0:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    5fc2:	f000 ff95 	bl	6ef0 <nrfx_gpiote_is_init>
    5fc6:	4604      	mov	r4, r0
    5fc8:	b968      	cbnz	r0, 5fe6 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    5fca:	f000 ff69 	bl	6ea0 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    5fce:	4b08      	ldr	r3, [pc, #32]	; (5ff0 <gpio_nrfx_init+0x30>)
    5fd0:	4298      	cmp	r0, r3
    5fd2:	d10a      	bne.n	5fea <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    5fd4:	4807      	ldr	r0, [pc, #28]	; (5ff4 <gpio_nrfx_init+0x34>)
    5fd6:	4621      	mov	r1, r4
    5fd8:	f000 ff46 	bl	6e68 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    5fdc:	4622      	mov	r2, r4
    5fde:	2105      	movs	r1, #5
    5fe0:	2006      	movs	r0, #6
    5fe2:	f7fe ffd1 	bl	4f88 <z_arm_irq_priority_set>
		return 0;
    5fe6:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    5fe8:	bd10      	pop	{r4, pc}
		return -EIO;
    5fea:	f06f 0004 	mvn.w	r0, #4
    5fee:	e7fb      	b.n	5fe8 <gpio_nrfx_init+0x28>
    5ff0:	0bad0000 	.word	0x0bad0000
    5ff4:	00005ff9 	.word	0x00005ff9

00005ff8 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    5ff8:	0942      	lsrs	r2, r0, #5
{
    5ffa:	b570      	push	{r4, r5, r6, lr}
    5ffc:	4603      	mov	r3, r0
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    5ffe:	d002      	beq.n	6006 <nrfx_gpio_handler+0xe>
    6000:	2a01      	cmp	r2, #1
    6002:	d017      	beq.n	6034 <nrfx_gpio_handler+0x3c>
}
    6004:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    6006:	4e0d      	ldr	r6, [pc, #52]	; (603c <nrfx_gpio_handler+0x44>)
	gpio_fire_callbacks(list, port, BIT(pin));
    6008:	6932      	ldr	r2, [r6, #16]
    600a:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    600c:	2900      	cmp	r1, #0
    600e:	d0f9      	beq.n	6004 <nrfx_gpio_handler+0xc>
    *p_pin = pin_number & 0x1F;
    6010:	f003 031f 	and.w	r3, r3, #31
    6014:	2501      	movs	r5, #1
    6016:	680c      	ldr	r4, [r1, #0]
    6018:	409d      	lsls	r5, r3
    601a:	2900      	cmp	r1, #0
    601c:	d0f2      	beq.n	6004 <nrfx_gpio_handler+0xc>
		if (cb->pin_mask & pins) {
    601e:	688a      	ldr	r2, [r1, #8]
    6020:	402a      	ands	r2, r5
    6022:	d002      	beq.n	602a <nrfx_gpio_handler+0x32>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    6024:	684b      	ldr	r3, [r1, #4]
    6026:	4630      	mov	r0, r6
    6028:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    602a:	b12c      	cbz	r4, 6038 <nrfx_gpio_handler+0x40>
    602c:	6823      	ldr	r3, [r4, #0]
    602e:	4621      	mov	r1, r4
    6030:	461c      	mov	r4, r3
    6032:	e7f2      	b.n	601a <nrfx_gpio_handler+0x22>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    6034:	4e02      	ldr	r6, [pc, #8]	; (6040 <nrfx_gpio_handler+0x48>)
    6036:	e7e7      	b.n	6008 <nrfx_gpio_handler+0x10>
    6038:	4623      	mov	r3, r4
    603a:	e7f8      	b.n	602e <nrfx_gpio_handler+0x36>
    603c:	00009cbc 	.word	0x00009cbc
    6040:	00009ca4 	.word	0x00009ca4

00006044 <gpio_nrfx_pin_configure>:
{
    6044:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return port->config;
    6048:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    604a:	7b3b      	ldrb	r3, [r7, #12]
    604c:	f001 051f 	and.w	r5, r1, #31
    6050:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
{
    6054:	460e      	mov	r6, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    6056:	4628      	mov	r0, r5
    6058:	f10d 0103 	add.w	r1, sp, #3
{
    605c:	4614      	mov	r4, r2
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    605e:	f000 ff09 	bl	6e74 <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    6062:	f414 3f40 	tst.w	r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    6066:	4680      	mov	r8, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    6068:	d10b      	bne.n	6082 <gpio_nrfx_pin_configure+0x3e>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
    606a:	4628      	mov	r0, r5
    606c:	f000 ffc6 	bl	6ffc <nrfx_gpiote_pin_uninit>
		if (free_ch) {
    6070:	4b3d      	ldr	r3, [pc, #244]	; (6168 <gpio_nrfx_pin_configure+0x124>)
    6072:	4598      	cmp	r8, r3
    6074:	d103      	bne.n	607e <gpio_nrfx_pin_configure+0x3a>
			err = nrfx_gpiote_channel_free(ch);
    6076:	f89d 0003 	ldrb.w	r0, [sp, #3]
    607a:	f000 ff43 	bl	6f04 <nrfx_gpiote_channel_free>
		return 0;
    607e:	2000      	movs	r0, #0
    6080:	e00c      	b.n	609c <gpio_nrfx_pin_configure+0x58>
	nrfx_gpiote_trigger_config_t trigger_config = {
    6082:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    6084:	4619      	mov	r1, r3
    6086:	aa02      	add	r2, sp, #8
    6088:	4628      	mov	r0, r5
	nrfx_gpiote_trigger_config_t trigger_config = {
    608a:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    608e:	f000 fdcb 	bl	6c28 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    6092:	4b35      	ldr	r3, [pc, #212]	; (6168 <gpio_nrfx_pin_configure+0x124>)
    6094:	4298      	cmp	r0, r3
    6096:	d004      	beq.n	60a2 <gpio_nrfx_pin_configure+0x5e>
		return NRF_GPIO_PIN_PULLUP;
    6098:	f06f 0015 	mvn.w	r0, #21
}
    609c:	b004      	add	sp, #16
    609e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (free_ch) {
    60a2:	4580      	cmp	r8, r0
    60a4:	d103      	bne.n	60ae <gpio_nrfx_pin_configure+0x6a>
		err = nrfx_gpiote_channel_free(ch);
    60a6:	f89d 0003 	ldrb.w	r0, [sp, #3]
    60aa:	f000 ff2b 	bl	6f04 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    60ae:	03a3      	lsls	r3, r4, #14
    60b0:	d54b      	bpl.n	614a <gpio_nrfx_pin_configure+0x106>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    60b2:	f240 3306 	movw	r3, #774	; 0x306
    60b6:	4023      	ands	r3, r4
    60b8:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
    60bc:	d019      	beq.n	60f2 <gpio_nrfx_pin_configure+0xae>
    60be:	d80c      	bhi.n	60da <gpio_nrfx_pin_configure+0x96>
    60c0:	2b06      	cmp	r3, #6
    60c2:	d017      	beq.n	60f4 <gpio_nrfx_pin_configure+0xb0>
    60c4:	d804      	bhi.n	60d0 <gpio_nrfx_pin_configure+0x8c>
    60c6:	b1ab      	cbz	r3, 60f4 <gpio_nrfx_pin_configure+0xb0>
    60c8:	2b02      	cmp	r3, #2
    60ca:	d1e5      	bne.n	6098 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0S1;
    60cc:	2304      	movs	r3, #4
    60ce:	e011      	b.n	60f4 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    60d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    60d4:	d1e0      	bne.n	6098 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_H0S1;
    60d6:	2301      	movs	r3, #1
    60d8:	e00c      	b.n	60f4 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    60da:	f240 2202 	movw	r2, #514	; 0x202
    60de:	4293      	cmp	r3, r2
    60e0:	d027      	beq.n	6132 <gpio_nrfx_pin_configure+0xee>
    60e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
    60e6:	d026      	beq.n	6136 <gpio_nrfx_pin_configure+0xf2>
    60e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    60ec:	d1d4      	bne.n	6098 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_S0H1;
    60ee:	2302      	movs	r3, #2
    60f0:	e000      	b.n	60f4 <gpio_nrfx_pin_configure+0xb0>
		*drive = NRF_GPIO_PIN_H0D1;
    60f2:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
    60f4:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    60f8:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
    60fc:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
    6100:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    6102:	f88d 3005 	strb.w	r3, [sp, #5]
	} else if (flags & GPIO_PULL_DOWN) {
    6106:	bf54      	ite	pl
    6108:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    610c:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    610e:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
    6110:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    6114:	d511      	bpl.n	613a <gpio_nrfx_pin_configure+0xf6>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    6116:	687a      	ldr	r2, [r7, #4]
    6118:	2301      	movs	r3, #1
    611a:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
    611c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    6120:	2200      	movs	r2, #0
    6122:	a901      	add	r1, sp, #4
    6124:	4628      	mov	r0, r5
    6126:	f000 fe2d 	bl	6d84 <nrfx_gpiote_output_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    612a:	4b0f      	ldr	r3, [pc, #60]	; (6168 <gpio_nrfx_pin_configure+0x124>)
    612c:	4298      	cmp	r0, r3
    612e:	d0a6      	beq.n	607e <gpio_nrfx_pin_configure+0x3a>
    6130:	e7b2      	b.n	6098 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0H1;
    6132:	2305      	movs	r3, #5
    6134:	e7de      	b.n	60f4 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    6136:	2303      	movs	r3, #3
    6138:	e7dc      	b.n	60f4 <gpio_nrfx_pin_configure+0xb0>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    613a:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    613c:	bf41      	itttt	mi
    613e:	2301      	movmi	r3, #1
    6140:	687a      	ldrmi	r2, [r7, #4]
    6142:	40b3      	lslmi	r3, r6
    p_reg->OUTCLR = clr_mask;
    6144:	f8c2 350c 	strmi.w	r3, [r2, #1292]	; 0x50c
}
    6148:	e7ea      	b.n	6120 <gpio_nrfx_pin_configure+0xdc>
	if (flags & GPIO_PULL_UP) {
    614a:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    614c:	f04f 0300 	mov.w	r3, #0
	} else if (flags & GPIO_PULL_DOWN) {
    6150:	bf54      	ite	pl
    6152:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    6156:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    6158:	461a      	mov	r2, r3
    615a:	a901      	add	r1, sp, #4
    615c:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
    615e:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    6162:	f000 fd61 	bl	6c28 <nrfx_gpiote_input_configure>
    6166:	e7e0      	b.n	612a <gpio_nrfx_pin_configure+0xe6>
    6168:	0bad0000 	.word	0x0bad0000

0000616c <i2c_nrfx_twi_recover_bus>:

	return 0;
}

static int i2c_nrfx_twi_recover_bus(const struct device *dev)
{
    616c:	b508      	push	{r3, lr}
	uint32_t scl_pin;
	uint32_t sda_pin;
	nrfx_err_t err;

#ifdef CONFIG_PINCTRL
	scl_pin = nrf_twi_scl_pin_get(config->twi.p_twi);
    616e:	6843      	ldr	r3, [r0, #4]
    6170:	681b      	ldr	r3, [r3, #0]
}

NRF_STATIC_INLINE uint32_t nrf_twi_scl_pin_get(NRF_TWI_Type const * p_reg)
{
#if defined(TWI_PSEL_SCL_CONNECT_Pos)
    return p_reg->PSEL.SCL;
    6172:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
}

NRF_STATIC_INLINE uint32_t nrf_twi_sda_pin_get(NRF_TWI_Type const * p_reg)
{
#if defined(TWI_PSEL_SDA_CONNECT_Pos)
    return p_reg->PSEL.SDA;
    6176:	f8d3 150c 	ldr.w	r1, [r3, #1292]	; 0x50c
NRFX_STATIC_INLINE nrfx_err_t nrfx_twi_bus_recover(uint32_t scl_pin, uint32_t sda_pin);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE nrfx_err_t nrfx_twi_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
    return nrfx_twi_twim_bus_recover(scl_pin, sda_pin);
    617a:	f001 faab 	bl	76d4 <nrfx_twi_twim_bus_recover>
	scl_pin = config->config.scl;
	sda_pin = config->config.sda;
#endif

	err = nrfx_twi_bus_recover(scl_pin, sda_pin);
	return (err == NRFX_SUCCESS ? 0 : -EBUSY);
    617e:	4b03      	ldr	r3, [pc, #12]	; (618c <i2c_nrfx_twi_recover_bus+0x20>)
    6180:	4298      	cmp	r0, r3
}
    6182:	bf14      	ite	ne
    6184:	f06f 000f 	mvnne.w	r0, #15
    6188:	2000      	moveq	r0, #0
    618a:	bd08      	pop	{r3, pc}
    618c:	0bad0000 	.word	0x0bad0000

00006190 <i2c_nrfx_twi_configure>:
{
    6190:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (I2C_ADDR_10_BITS & dev_config) {
    6192:	f011 0301 	ands.w	r3, r1, #1
	const struct i2c_nrfx_twi_config *config = dev->config;
    6196:	6842      	ldr	r2, [r0, #4]
	struct i2c_nrfx_twi_data *data = dev->data;
    6198:	6904      	ldr	r4, [r0, #16]
	if (I2C_ADDR_10_BITS & dev_config) {
    619a:	d10e      	bne.n	61ba <i2c_nrfx_twi_configure+0x2a>
	switch (I2C_SPEED_GET(dev_config)) {
    619c:	f3c1 0042 	ubfx	r0, r1, #1, #3
    61a0:	2801      	cmp	r0, #1
    61a2:	d00d      	beq.n	61c0 <i2c_nrfx_twi_configure+0x30>
    61a4:	2802      	cmp	r0, #2
    61a6:	d014      	beq.n	61d2 <i2c_nrfx_twi_configure+0x42>
		LOG_ERR("unsupported speed");
    61a8:	4a0c      	ldr	r2, [pc, #48]	; (61dc <i2c_nrfx_twi_configure+0x4c>)
    61aa:	490d      	ldr	r1, [pc, #52]	; (61e0 <i2c_nrfx_twi_configure+0x50>)
    61ac:	9300      	str	r3, [sp, #0]
    61ae:	e9cd 3201 	strd	r3, r2, [sp, #4]
    61b2:	4618      	mov	r0, r3
    61b4:	2201      	movs	r2, #1
    61b6:	f003 f9c2 	bl	953e <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
    61ba:	f06f 0015 	mvn.w	r0, #21
    61be:	e006      	b.n	61ce <i2c_nrfx_twi_configure+0x3e>
		nrf_twi_frequency_set(inst->p_twi, NRF_TWI_FREQ_100K);
    61c0:	6813      	ldr	r3, [r2, #0]
}

NRF_STATIC_INLINE void nrf_twi_frequency_set(NRF_TWI_Type *      p_reg,
                                             nrf_twi_frequency_t frequency)
{
    p_reg->FREQUENCY = frequency;
    61c2:	f04f 72cc 	mov.w	r2, #26738688	; 0x1980000
    61c6:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	return 0;
    61ca:	2000      	movs	r0, #0
	data->dev_config = dev_config;
    61cc:	6261      	str	r1, [r4, #36]	; 0x24
}
    61ce:	b004      	add	sp, #16
    61d0:	bd10      	pop	{r4, pc}
		nrf_twi_frequency_set(inst->p_twi, NRF_TWI_FREQ_400K);
    61d2:	6813      	ldr	r3, [r2, #0]
    61d4:	f04f 62cd 	mov.w	r2, #107479040	; 0x6680000
    61d8:	e7f5      	b.n	61c6 <i2c_nrfx_twi_configure+0x36>
    61da:	bf00      	nop
    61dc:	0000a89c 	.word	0x0000a89c
    61e0:	00009ebc 	.word	0x00009ebc

000061e4 <twi_0_init>:
		      POST_KERNEL,					       \
		      CONFIG_I2C_INIT_PRIORITY,				       \
		      &i2c_nrfx_twi_driver_api)

#ifdef CONFIG_I2C_0_NRF_TWI
I2C_NRFX_TWI_DEVICE(0);
    61e4:	b530      	push	{r4, r5, lr}
    61e6:	4604      	mov	r4, r0
    61e8:	b087      	sub	sp, #28
    61ea:	2200      	movs	r2, #0
    61ec:	2101      	movs	r1, #1
    61ee:	2003      	movs	r0, #3
    61f0:	f7fe feca 	bl	4f88 <z_arm_irq_priority_set>
    61f4:	6863      	ldr	r3, [r4, #4]
    61f6:	699d      	ldr	r5, [r3, #24]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    61f8:	aa05      	add	r2, sp, #20
    61fa:	2100      	movs	r1, #0
    61fc:	4628      	mov	r0, r5
    61fe:	f003 f9bf 	bl	9580 <pinctrl_lookup_state>
	if (ret < 0) {
    6202:	2800      	cmp	r0, #0
    6204:	db1f      	blt.n	6246 <twi_0_init+0x62>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    6206:	9b05      	ldr	r3, [sp, #20]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    6208:	682a      	ldr	r2, [r5, #0]
    620a:	7919      	ldrb	r1, [r3, #4]
    620c:	6818      	ldr	r0, [r3, #0]
    620e:	f000 fae9 	bl	67e4 <pinctrl_configure_pins>
    6212:	2800      	cmp	r0, #0
    6214:	db17      	blt.n	6246 <twi_0_init+0x62>
	const struct i2c_nrfx_twi_config *config = dev->config;
    6216:	6860      	ldr	r0, [r4, #4]
	nrfx_err_t result = nrfx_twi_init(&config->twi, &config->config,
    6218:	6923      	ldr	r3, [r4, #16]
    621a:	4a0d      	ldr	r2, [pc, #52]	; (6250 <twi_0_init+0x6c>)
    621c:	f100 0108 	add.w	r1, r0, #8
    6220:	f001 f8e2 	bl	73e8 <nrfx_twi_init>
	if (result != NRFX_SUCCESS) {
    6224:	4b0b      	ldr	r3, [pc, #44]	; (6254 <twi_0_init+0x70>)
    6226:	4298      	cmp	r0, r3
    6228:	d00f      	beq.n	624a <twi_0_init+0x66>
		LOG_ERR("Failed to initialize device: %s",
    622a:	6823      	ldr	r3, [r4, #0]
    622c:	9303      	str	r3, [sp, #12]
    622e:	4b0a      	ldr	r3, [pc, #40]	; (6258 <twi_0_init+0x74>)
    6230:	9302      	str	r3, [sp, #8]
    6232:	2300      	movs	r3, #0
    6234:	4618      	mov	r0, r3
    6236:	e9cd 3300 	strd	r3, r3, [sp]
    623a:	4908      	ldr	r1, [pc, #32]	; (625c <twi_0_init+0x78>)
    623c:	2201      	movs	r2, #1
    623e:	f003 f97e 	bl	953e <z_log_msg_runtime_create.constprop.0>
		return -EBUSY;
    6242:	f06f 000f 	mvn.w	r0, #15
I2C_NRFX_TWI_DEVICE(0);
    6246:	b007      	add	sp, #28
    6248:	bd30      	pop	{r4, r5, pc}
	return 0;
    624a:	2000      	movs	r0, #0
    624c:	e7fb      	b.n	6246 <twi_0_init+0x62>
    624e:	bf00      	nop
    6250:	00006261 	.word	0x00006261
    6254:	0bad0000 	.word	0x0bad0000
    6258:	0000a8ae 	.word	0x0000a8ae
    625c:	00009ebc 	.word	0x00009ebc

00006260 <event_handler>:
	switch (p_event->type) {
    6260:	7803      	ldrb	r3, [r0, #0]
    6262:	2b01      	cmp	r3, #1
    6264:	d008      	beq.n	6278 <event_handler+0x18>
    6266:	2b02      	cmp	r3, #2
    6268:	d008      	beq.n	627c <event_handler+0x1c>
    626a:	b94b      	cbnz	r3, 6280 <event_handler+0x20>
		dev_data->res = NRFX_SUCCESS;
    626c:	4b05      	ldr	r3, [pc, #20]	; (6284 <event_handler+0x24>)
		dev_data->res = NRFX_ERROR_INTERNAL;
    626e:	620b      	str	r3, [r1, #32]
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    6270:	f101 0010 	add.w	r0, r1, #16
    6274:	f001 be0a 	b.w	7e8c <z_impl_k_sem_give>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    6278:	4b03      	ldr	r3, [pc, #12]	; (6288 <event_handler+0x28>)
    627a:	e7f8      	b.n	626e <event_handler+0xe>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    627c:	4b03      	ldr	r3, [pc, #12]	; (628c <event_handler+0x2c>)
    627e:	e7f6      	b.n	626e <event_handler+0xe>
		dev_data->res = NRFX_ERROR_INTERNAL;
    6280:	4b03      	ldr	r3, [pc, #12]	; (6290 <event_handler+0x30>)
    6282:	e7f4      	b.n	626e <event_handler+0xe>
    6284:	0bad0000 	.word	0x0bad0000
    6288:	0bae0001 	.word	0x0bae0001
    628c:	0bae0002 	.word	0x0bae0002
    6290:	0bad0001 	.word	0x0bad0001

00006294 <i2c_nrfx_twi_transfer>:
{
    6294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6298:	b091      	sub	sp, #68	; 0x44
    629a:	4606      	mov	r6, r0
    629c:	460c      	mov	r4, r1
    629e:	4691      	mov	r9, r2
    62a0:	9307      	str	r3, [sp, #28]
	const struct i2c_nrfx_twi_config *config = dev->config;
    62a2:	f8d0 8004 	ldr.w	r8, [r0, #4]
	struct i2c_nrfx_twi_data *data = dev->data;
    62a6:	6907      	ldr	r7, [r0, #16]
	return z_impl_k_sem_take(sem, timeout);
    62a8:	f04f 32ff 	mov.w	r2, #4294967295
    62ac:	f04f 33ff 	mov.w	r3, #4294967295
    62b0:	4638      	mov	r0, r7
    62b2:	f001 fe0b 	bl	7ecc <z_impl_k_sem_take>
	k_sem_take(&data->completion_sync, K_NO_WAIT);
    62b6:	f107 0a10 	add.w	sl, r7, #16
    62ba:	2200      	movs	r2, #0
    62bc:	2300      	movs	r3, #0
    62be:	4650      	mov	r0, sl
    62c0:	f001 fe04 	bl	7ecc <z_impl_k_sem_take>
	nrfx_twi_enable(&config->twi);
    62c4:	4640      	mov	r0, r8
    62c6:	f001 f8f1 	bl	74ac <nrfx_twi_enable>
		if (res != NRFX_SUCCESS) {
    62ca:	f8df b0fc 	ldr.w	fp, [pc, #252]	; 63c8 <i2c_nrfx_twi_transfer+0x134>
	for (size_t i = 0; i < num_msgs; i++) {
    62ce:	2500      	movs	r5, #0
    62d0:	454d      	cmp	r5, r9
    62d2:	d301      	bcc.n	62d8 <i2c_nrfx_twi_transfer+0x44>
    62d4:	2400      	movs	r4, #0
    62d6:	e04f      	b.n	6378 <i2c_nrfx_twi_transfer+0xe4>
		if (I2C_MSG_ADDR_10_BITS & msgs[i].flags) {
    62d8:	7a23      	ldrb	r3, [r4, #8]
    62da:	9309      	str	r3, [sp, #36]	; 0x24
    62dc:	f013 0108 	ands.w	r1, r3, #8
    62e0:	d166      	bne.n	63b0 <i2c_nrfx_twi_transfer+0x11c>
		nrfx_twi_xfer_desc_t cur_xfer = {
    62e2:	2212      	movs	r2, #18
    62e4:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
    62e8:	9108      	str	r1, [sp, #32]
    62ea:	f003 fc8e 	bl	9c0a <memset>
					  NRFX_TWI_XFER_RX : NRFX_TWI_XFER_TX
    62ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
		nrfx_twi_xfer_desc_t cur_xfer = {
    62f0:	6860      	ldr	r0, [r4, #4]
    62f2:	9907      	ldr	r1, [sp, #28]
    62f4:	900c      	str	r0, [sp, #48]	; 0x30
					  NRFX_TWI_XFER_RX : NRFX_TWI_XFER_TX
    62f6:	f003 0201 	and.w	r2, r3, #1
		nrfx_twi_xfer_desc_t cur_xfer = {
    62fa:	6820      	ldr	r0, [r4, #0]
    62fc:	f88d 102d 	strb.w	r1, [sp, #45]	; 0x2d
		if (!(msgs[i].flags & I2C_MSG_STOP)) {
    6300:	f013 0f02 	tst.w	r3, #2
    6304:	9908      	ldr	r1, [sp, #32]
		nrfx_twi_xfer_desc_t cur_xfer = {
    6306:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
    630a:	900e      	str	r0, [sp, #56]	; 0x38
		if (!(msgs[i].flags & I2C_MSG_STOP)) {
    630c:	d115      	bne.n	633a <i2c_nrfx_twi_transfer+0xa6>
			if ((i < (num_msgs - 1)) &&
    630e:	f109 33ff 	add.w	r3, r9, #4294967295
    6312:	42ab      	cmp	r3, r5
    6314:	d902      	bls.n	631c <i2c_nrfx_twi_transfer+0x88>
    6316:	7d23      	ldrb	r3, [r4, #20]
    6318:	075b      	lsls	r3, r3, #29
    631a:	d510      	bpl.n	633e <i2c_nrfx_twi_transfer+0xaa>
			} else if (msgs[i].flags & I2C_MSG_READ) {
    631c:	2a00      	cmp	r2, #0
    631e:	d147      	bne.n	63b0 <i2c_nrfx_twi_transfer+0x11c>
				xfer_flags |= NRFX_TWI_FLAG_TX_NO_STOP;
    6320:	2220      	movs	r2, #32
		res = nrfx_twi_xfer(&config->twi, &cur_xfer, xfer_flags);
    6322:	a90b      	add	r1, sp, #44	; 0x2c
    6324:	4640      	mov	r0, r8
    6326:	f001 f8ed 	bl	7504 <nrfx_twi_xfer>
		if (res != NRFX_SUCCESS) {
    632a:	4558      	cmp	r0, fp
    632c:	d009      	beq.n	6342 <i2c_nrfx_twi_transfer+0xae>
			if (res == NRFX_ERROR_BUSY) {
    632e:	4b22      	ldr	r3, [pc, #136]	; (63b8 <i2c_nrfx_twi_transfer+0x124>)
    6330:	4298      	cmp	r0, r3
    6332:	d11f      	bne.n	6374 <i2c_nrfx_twi_transfer+0xe0>
				ret = -EBUSY;
    6334:	f06f 040f 	mvn.w	r4, #15
    6338:	e01e      	b.n	6378 <i2c_nrfx_twi_transfer+0xe4>
		uint32_t xfer_flags = 0;
    633a:	460a      	mov	r2, r1
    633c:	e7f1      	b.n	6322 <i2c_nrfx_twi_transfer+0x8e>
				xfer_flags |= NRFX_TWI_FLAG_SUSPEND;
    633e:	2240      	movs	r2, #64	; 0x40
    6340:	e7ef      	b.n	6322 <i2c_nrfx_twi_transfer+0x8e>
    6342:	2300      	movs	r3, #0
    6344:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    6348:	4650      	mov	r0, sl
    634a:	f001 fdbf 	bl	7ecc <z_impl_k_sem_take>
    634e:	4603      	mov	r3, r0
		if (ret != 0) {
    6350:	b1e0      	cbz	r0, 638c <i2c_nrfx_twi_transfer+0xf8>
			LOG_ERR("Error on I2C line occurred for message %d", i);
    6352:	4b1a      	ldr	r3, [pc, #104]	; (63bc <i2c_nrfx_twi_transfer+0x128>)
    6354:	9302      	str	r3, [sp, #8]
    6356:	2300      	movs	r3, #0
    6358:	4618      	mov	r0, r3
    635a:	e9cd 3300 	strd	r3, r3, [sp]
    635e:	4918      	ldr	r1, [pc, #96]	; (63c0 <i2c_nrfx_twi_transfer+0x12c>)
    6360:	9503      	str	r5, [sp, #12]
    6362:	2201      	movs	r2, #1
    6364:	f003 f8eb 	bl	953e <z_log_msg_runtime_create.constprop.0>
			nrfx_twi_disable(&config->twi);
    6368:	4640      	mov	r0, r8
    636a:	f001 f8af 	bl	74cc <nrfx_twi_disable>
			(void)i2c_nrfx_twi_recover_bus(dev);
    636e:	4630      	mov	r0, r6
    6370:	f7ff fefc 	bl	616c <i2c_nrfx_twi_recover_bus>
				ret = -EIO;
    6374:	f06f 0404 	mvn.w	r4, #4
	nrfx_twi_disable(&config->twi);
    6378:	4640      	mov	r0, r8
    637a:	f001 f8a7 	bl	74cc <nrfx_twi_disable>
	z_impl_k_sem_give(sem);
    637e:	4638      	mov	r0, r7
    6380:	f001 fd84 	bl	7e8c <z_impl_k_sem_give>
}
    6384:	4620      	mov	r0, r4
    6386:	b011      	add	sp, #68	; 0x44
    6388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		res = data->res;
    638c:	6a3a      	ldr	r2, [r7, #32]
		if (res != NRFX_SUCCESS) {
    638e:	455a      	cmp	r2, fp
    6390:	f104 040c 	add.w	r4, r4, #12
    6394:	d00a      	beq.n	63ac <i2c_nrfx_twi_transfer+0x118>
			LOG_ERR("Error 0x%08X occurred for message %d", res, i);
    6396:	e9cd 2503 	strd	r2, r5, [sp, #12]
    639a:	4a0a      	ldr	r2, [pc, #40]	; (63c4 <i2c_nrfx_twi_transfer+0x130>)
    639c:	4908      	ldr	r1, [pc, #32]	; (63c0 <i2c_nrfx_twi_transfer+0x12c>)
    639e:	9000      	str	r0, [sp, #0]
    63a0:	e9cd 0201 	strd	r0, r2, [sp, #4]
    63a4:	2201      	movs	r2, #1
    63a6:	f003 f8ca 	bl	953e <z_log_msg_runtime_create.constprop.0>
			break;
    63aa:	e7e3      	b.n	6374 <i2c_nrfx_twi_transfer+0xe0>
	for (size_t i = 0; i < num_msgs; i++) {
    63ac:	3501      	adds	r5, #1
    63ae:	e78f      	b.n	62d0 <i2c_nrfx_twi_transfer+0x3c>
			ret = -ENOTSUP;
    63b0:	f06f 0485 	mvn.w	r4, #133	; 0x85
    63b4:	e7e0      	b.n	6378 <i2c_nrfx_twi_transfer+0xe4>
    63b6:	bf00      	nop
    63b8:	0bad000b 	.word	0x0bad000b
    63bc:	0000a8ce 	.word	0x0000a8ce
    63c0:	00009ebc 	.word	0x00009ebc
    63c4:	0000a8f8 	.word	0x0000a8f8
    63c8:	0bad0000 	.word	0x0bad0000

000063cc <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
    63cc:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    63ce:	2301      	movs	r3, #1
    63d0:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    63d2:	4a0e      	ldr	r2, [pc, #56]	; (640c <compare_int_lock+0x40>)
    63d4:	f3bf 8f5b 	dmb	ish
    63d8:	43dc      	mvns	r4, r3
    63da:	e852 1f00 	ldrex	r1, [r2]
    63de:	ea01 0504 	and.w	r5, r1, r4
    63e2:	e842 5600 	strex	r6, r5, [r2]
    63e6:	2e00      	cmp	r6, #0
    63e8:	d1f7      	bne.n	63da <compare_int_lock+0xe>
    63ea:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    63ee:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    63f2:	4082      	lsls	r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    63f4:	4806      	ldr	r0, [pc, #24]	; (6410 <compare_int_lock+0x44>)
    63f6:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    63fa:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    63fe:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    6402:	420b      	tst	r3, r1
}
    6404:	bf14      	ite	ne
    6406:	2001      	movne	r0, #1
    6408:	2000      	moveq	r0, #0
    640a:	bd70      	pop	{r4, r5, r6, pc}
    640c:	200021ec 	.word	0x200021ec
    6410:	40011000 	.word	0x40011000

00006414 <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
    6414:	b470      	push	{r4, r5, r6}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
    6416:	490e      	ldr	r1, [pc, #56]	; (6450 <sys_clock_timeout_handler+0x3c>)
    6418:	e9d1 3400 	ldrd	r3, r4, [r1]
    641c:	1ad0      	subs	r0, r2, r3

	last_count += dticks * CYC_PER_TICK;
    641e:	18c3      	adds	r3, r0, r3
    6420:	f144 0400 	adc.w	r4, r4, #0
	return absolute_time & COUNTER_MAX;
    6424:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	last_count += dticks * CYC_PER_TICK;
    6428:	e9c1 3400 	strd	r3, r4, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    642c:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
    6430:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    6434:	d209      	bcs.n	644a <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    6436:	4b07      	ldr	r3, [pc, #28]	; (6454 <sys_clock_timeout_handler+0x40>)
    6438:	681b      	ldr	r3, [r3, #0]
    643a:	0a1a      	lsrs	r2, r3, #8
    643c:	061b      	lsls	r3, r3, #24
    643e:	199c      	adds	r4, r3, r6
    6440:	4b05      	ldr	r3, [pc, #20]	; (6458 <sys_clock_timeout_handler+0x44>)
    6442:	f142 0500 	adc.w	r5, r2, #0
    6446:	e9c3 4500 	strd	r4, r5, [r3]
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(dticks);
}
    644a:	bc70      	pop	{r4, r5, r6}
	sys_clock_announce(dticks);
    644c:	f002 b994 	b.w	8778 <sys_clock_announce>
    6450:	200000f0 	.word	0x200000f0
    6454:	200021f0 	.word	0x200021f0
    6458:	200000f8 	.word	0x200000f8

0000645c <compare_int_unlock>:
	if (key) {
    645c:	b311      	cbz	r1, 64a4 <compare_int_unlock+0x48>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    645e:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
    6462:	2301      	movs	r3, #1
    6464:	4a10      	ldr	r2, [pc, #64]	; (64a8 <compare_int_unlock+0x4c>)
    6466:	4083      	lsls	r3, r0
    6468:	e852 cf00 	ldrex	ip, [r2]
    646c:	ea4c 0c03 	orr.w	ip, ip, r3
    6470:	e842 c100 	strex	r1, ip, [r2]
    6474:	2900      	cmp	r1, #0
    6476:	d1f7      	bne.n	6468 <compare_int_unlock+0xc>
    6478:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
    647c:	4a0b      	ldr	r2, [pc, #44]	; (64ac <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    647e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    6482:	4083      	lsls	r3, r0
    6484:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    6488:	4b09      	ldr	r3, [pc, #36]	; (64b0 <compare_int_unlock+0x54>)
    648a:	f3bf 8f5b 	dmb	ish
    648e:	681b      	ldr	r3, [r3, #0]
    6490:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    6494:	40c3      	lsrs	r3, r0
    6496:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6498:	bf42      	ittt	mi
    649a:	4b06      	ldrmi	r3, [pc, #24]	; (64b4 <compare_int_unlock+0x58>)
    649c:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
    64a0:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    64a4:	4770      	bx	lr
    64a6:	bf00      	nop
    64a8:	200021ec 	.word	0x200021ec
    64ac:	40011000 	.word	0x40011000
    64b0:	200021e8 	.word	0x200021e8
    64b4:	e000e100 	.word	0xe000e100

000064b8 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    64b8:	4b0d      	ldr	r3, [pc, #52]	; (64f0 <z_nrf_rtc_timer_read+0x38>)
    64ba:	6818      	ldr	r0, [r3, #0]
    64bc:	0a01      	lsrs	r1, r0, #8
    64be:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
    64c0:	f3bf 8f5f 	dmb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    64c4:	4b0b      	ldr	r3, [pc, #44]	; (64f4 <z_nrf_rtc_timer_read+0x3c>)
    64c6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    64ca:	1818      	adds	r0, r3, r0
    64cc:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    64d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    64d4:	d20a      	bcs.n	64ec <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    64d6:	4b08      	ldr	r3, [pc, #32]	; (64f8 <z_nrf_rtc_timer_read+0x40>)
    64d8:	e9d3 2300 	ldrd	r2, r3, [r3]
    64dc:	4290      	cmp	r0, r2
    64de:	eb71 0303 	sbcs.w	r3, r1, r3
    64e2:	d203      	bcs.n	64ec <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    64e4:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    64e8:	f141 0100 	adc.w	r1, r1, #0
}
    64ec:	4770      	bx	lr
    64ee:	bf00      	nop
    64f0:	200021f0 	.word	0x200021f0
    64f4:	40011000 	.word	0x40011000
    64f8:	200000f8 	.word	0x200000f8

000064fc <compare_set>:
{
    64fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6500:	4616      	mov	r6, r2
    6502:	461f      	mov	r7, r3
    6504:	4604      	mov	r4, r0
	key = compare_int_lock(chan);
    6506:	f7ff ff61 	bl	63cc <compare_int_lock>
    650a:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    650c:	f7ff ffd4 	bl	64b8 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    6510:	42b0      	cmp	r0, r6
    6512:	eb71 0307 	sbcs.w	r3, r1, r7
    6516:	d251      	bcs.n	65bc <compare_set+0xc0>
		if (target_time - curr_time > COUNTER_HALF_SPAN) {
    6518:	4b3a      	ldr	r3, [pc, #232]	; (6604 <compare_set+0x108>)
    651a:	1a30      	subs	r0, r6, r0
    651c:	eb67 0101 	sbc.w	r1, r7, r1
    6520:	4298      	cmp	r0, r3
    6522:	f171 0100 	sbcs.w	r1, r1, #0
    6526:	d26a      	bcs.n	65fe <compare_set+0x102>
		if (target_time != cc_data[chan].target_time) {
    6528:	4b37      	ldr	r3, [pc, #220]	; (6608 <compare_set+0x10c>)
    652a:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    652e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    6532:	429f      	cmp	r7, r3
    6534:	bf08      	it	eq
    6536:	4296      	cmpeq	r6, r2
    6538:	d04e      	beq.n	65d8 <compare_set+0xdc>
    p_reg->EVTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    653a:	4934      	ldr	r1, [pc, #208]	; (660c <compare_set+0x110>)
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    653c:	f44f 3980 	mov.w	r9, #65536	; 0x10000
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    6540:	f104 0550 	add.w	r5, r4, #80	; 0x50
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    6544:	fa09 f904 	lsl.w	r9, r9, r4
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    6548:	00ad      	lsls	r5, r5, #2
    654a:	f8c1 9348 	str.w	r9, [r1, #840]	; 0x348
	event_clear(chan);
    654e:	4620      	mov	r0, r4
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6550:	b2ad      	uxth	r5, r5
    6552:	f003 f805 	bl	9560 <event_clear>
	return absolute_time & COUNTER_MAX;
    6556:	f026 4b7f 	bic.w	fp, r6, #4278190080	; 0xff000000
    655a:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
    p_reg->CC[ch] = cc_val;
    655e:	f504 73a8 	add.w	r3, r4, #336	; 0x150
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
    6562:	4a2b      	ldr	r2, [pc, #172]	; (6610 <compare_set+0x114>)
    6564:	9301      	str	r3, [sp, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6566:	f505 3588 	add.w	r5, r5, #69632	; 0x11000
	uint32_t cc_val = req_cc;
    656a:	46dc      	mov	ip, fp
	uint32_t cc_inc = MIN_CYCLES_FROM_NOW;
    656c:	f04f 0a03 	mov.w	sl, #3
    p_reg->CC[ch] = cc_val;
    6570:	9b01      	ldr	r3, [sp, #4]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    6572:	f02c 407f 	bic.w	r0, ip, #4278190080	; 0xff000000
    6576:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    p_reg->EVTENSET = mask;
    657a:	f8c1 9344 	str.w	r9, [r1, #836]	; 0x344
     return p_reg->COUNTER;
    657e:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    6582:	f06f 0002 	mvn.w	r0, #2
    6586:	eba0 0008 	sub.w	r0, r0, r8
    658a:	4460      	add	r0, ip
    658c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
    6590:	4290      	cmp	r0, r2
    6592:	d921      	bls.n	65d8 <compare_set+0xdc>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6594:	6828      	ldr	r0, [r5, #0]
			if (event_check(chan)) {
    6596:	b160      	cbz	r0, 65b2 <compare_set+0xb6>
     return p_reg->COUNTER;
    6598:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    659c:	eba8 000b 	sub.w	r0, r8, fp
    65a0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
				if (counter_sub(now, req_cc) > COUNTER_HALF_SPAN) {
    65a4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    65a8:	d916      	bls.n	65d8 <compare_set+0xdc>
					event_clear(chan);
    65aa:	4620      	mov	r0, r4
    65ac:	f002 ffd8 	bl	9560 <event_clear>
    65b0:	4a17      	ldr	r2, [pc, #92]	; (6610 <compare_set+0x114>)
			cc_val = now + cc_inc;
    65b2:	eb0a 0c08 	add.w	ip, sl, r8
			cc_inc++;
    65b6:	f10a 0a01 	add.w	sl, sl, #1
	for (;;) {
    65ba:	e7d9      	b.n	6570 <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
    65bc:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    65be:	4a15      	ldr	r2, [pc, #84]	; (6614 <compare_set+0x118>)
    65c0:	f3bf 8f5b 	dmb	ish
    65c4:	40a3      	lsls	r3, r4
    65c6:	e852 0f00 	ldrex	r0, [r2]
    65ca:	4318      	orrs	r0, r3
    65cc:	e842 0100 	strex	r1, r0, [r2]
    65d0:	2900      	cmp	r1, #0
    65d2:	d1f8      	bne.n	65c6 <compare_set+0xca>
    65d4:	f3bf 8f5b 	dmb	ish
	cc_data[chan].target_time = target_time;
    65d8:	490b      	ldr	r1, [pc, #44]	; (6608 <compare_set+0x10c>)
	cc_data[chan].callback = handler;
    65da:	980c      	ldr	r0, [sp, #48]	; 0x30
	cc_data[chan].target_time = target_time;
    65dc:	0123      	lsls	r3, r4, #4
    65de:	eb01 1204 	add.w	r2, r1, r4, lsl #4
    65e2:	e9c2 6702 	strd	r6, r7, [r2, #8]
	cc_data[chan].callback = handler;
    65e6:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
    65e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    65ea:	6053      	str	r3, [r2, #4]
	return ret;
    65ec:	2500      	movs	r5, #0
	compare_int_unlock(chan, key);
    65ee:	4620      	mov	r0, r4
    65f0:	9900      	ldr	r1, [sp, #0]
    65f2:	f7ff ff33 	bl	645c <compare_int_unlock>
}
    65f6:	4628      	mov	r0, r5
    65f8:	b003      	add	sp, #12
    65fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return -EINVAL;
    65fe:	f06f 0515 	mvn.w	r5, #21
    6602:	e7f4      	b.n	65ee <compare_set+0xf2>
    6604:	00800001 	.word	0x00800001
    6608:	200000e0 	.word	0x200000e0
    660c:	40011000 	.word	0x40011000
    6610:	007ffffd 	.word	0x007ffffd
    6614:	200021e8 	.word	0x200021e8

00006618 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    6618:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    661a:	4b19      	ldr	r3, [pc, #100]	; (6680 <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
    661c:	4d19      	ldr	r5, [pc, #100]	; (6684 <sys_clock_driver_init+0x6c>)
    661e:	2400      	movs	r4, #0
    6620:	f04f 30ff 	mov.w	r0, #4294967295
    6624:	f04f 31ff 	mov.w	r1, #4294967295
    6628:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    662c:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    6630:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    6634:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6638:	4b13      	ldr	r3, [pc, #76]	; (6688 <sys_clock_driver_init+0x70>)
    663a:	2602      	movs	r6, #2
    663c:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    6640:	2101      	movs	r1, #1
    6642:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
    6646:	2011      	movs	r0, #17
    6648:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    664c:	4622      	mov	r2, r4
    664e:	f7fe fc9b 	bl	4f88 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    6652:	2011      	movs	r0, #17
    6654:	f7fe fc7c 	bl	4f50 <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    6658:	4a0c      	ldr	r2, [pc, #48]	; (668c <sys_clock_driver_init+0x74>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    665a:	2301      	movs	r3, #1
    665c:	60ab      	str	r3, [r5, #8]
    665e:	602b      	str	r3, [r5, #0]
    6660:	6013      	str	r3, [r2, #0]
	}

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		MAX_CYCLES : CYC_PER_TICK;

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    6662:	4b0b      	ldr	r3, [pc, #44]	; (6690 <sys_clock_driver_init+0x78>)
    6664:	4a0b      	ldr	r2, [pc, #44]	; (6694 <sys_clock_driver_init+0x7c>)
    6666:	9300      	str	r3, [sp, #0]
    6668:	9401      	str	r4, [sp, #4]
    666a:	2300      	movs	r3, #0
    666c:	4620      	mov	r0, r4
    666e:	f7ff ff45 	bl	64fc <compare_set>

	z_nrf_clock_control_lf_on(mode);
    6672:	4630      	mov	r0, r6
    6674:	f7ff fb86 	bl	5d84 <z_nrf_clock_control_lf_on>

	return 0;
}
    6678:	4620      	mov	r0, r4
    667a:	b002      	add	sp, #8
    667c:	bd70      	pop	{r4, r5, r6, pc}
    667e:	bf00      	nop
    6680:	200000e0 	.word	0x200000e0
    6684:	40011000 	.word	0x40011000
    6688:	e000e100 	.word	0xe000e100
    668c:	200021ec 	.word	0x200021ec
    6690:	00006415 	.word	0x00006415
    6694:	007fffff 	.word	0x007fffff

00006698 <rtc_nrf_isr>:
{
    6698:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    669c:	4c2f      	ldr	r4, [pc, #188]	; (675c <rtc_nrf_isr+0xc4>)
    669e:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    66a2:	0799      	lsls	r1, r3, #30
    66a4:	d50b      	bpl.n	66be <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    66a6:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    66aa:	b143      	cbz	r3, 66be <rtc_nrf_isr+0x26>
		overflow_cnt++;
    66ac:	4a2c      	ldr	r2, [pc, #176]	; (6760 <rtc_nrf_isr+0xc8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    66ae:	2300      	movs	r3, #0
    66b0:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    66b4:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    66b8:	6813      	ldr	r3, [r2, #0]
    66ba:	3301      	adds	r3, #1
    66bc:	6013      	str	r3, [r2, #0]
    return p_reg->INTENSET & mask;
    66be:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    66c2:	03da      	lsls	r2, r3, #15
    66c4:	d52a      	bpl.n	671c <rtc_nrf_isr+0x84>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    66c6:	f3bf 8f5b 	dmb	ish
    66ca:	4b26      	ldr	r3, [pc, #152]	; (6764 <rtc_nrf_isr+0xcc>)
    66cc:	e853 2f00 	ldrex	r2, [r3]
    66d0:	f022 0101 	bic.w	r1, r2, #1
    66d4:	e843 1000 	strex	r0, r1, [r3]
    66d8:	2800      	cmp	r0, #0
    66da:	d1f7      	bne.n	66cc <rtc_nrf_isr+0x34>
    66dc:	f3bf 8f5b 	dmb	ish
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
    66e0:	07d3      	lsls	r3, r2, #31
    66e2:	d402      	bmi.n	66ea <rtc_nrf_isr+0x52>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    66e4:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    66e8:	b1c3      	cbz	r3, 671c <rtc_nrf_isr+0x84>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    66ea:	2500      	movs	r5, #0
    66ec:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    66f0:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		curr_time = z_nrf_rtc_timer_read();
    66f4:	f7ff fee0 	bl	64b8 <z_nrf_rtc_timer_read>
    66f8:	f04f 0320 	mov.w	r3, #32
    66fc:	f3ef 8211 	mrs	r2, BASEPRI
    6700:	f383 8812 	msr	BASEPRI_MAX, r3
    6704:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    6708:	4b17      	ldr	r3, [pc, #92]	; (6768 <rtc_nrf_isr+0xd0>)
    670a:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
    670e:	42b0      	cmp	r0, r6
    6710:	41b9      	sbcs	r1, r7
    6712:	d206      	bcs.n	6722 <rtc_nrf_isr+0x8a>
	__asm__ volatile(
    6714:	f382 8811 	msr	BASEPRI, r2
    6718:	f3bf 8f6f 	isb	sy
}
    671c:	b003      	add	sp, #12
    671e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    6722:	f04f 38ff 	mov.w	r8, #4294967295
    6726:	f04f 39ff 	mov.w	r9, #4294967295
    672a:	e9c3 8902 	strd	r8, r9, [r3, #8]
			user_context = cc_data[chan].user_context;
    672e:	e9d3 1000 	ldrd	r1, r0, [r3]
			cc_data[chan].callback = NULL;
    6732:	601d      	str	r5, [r3, #0]
    p_reg->EVTENCLR = mask;
    6734:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    6738:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    673c:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    6740:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    6744:	f382 8811 	msr	BASEPRI, r2
    6748:	f3bf 8f6f 	isb	sy
		if (handler) {
    674c:	2900      	cmp	r1, #0
    674e:	d0e5      	beq.n	671c <rtc_nrf_isr+0x84>
			handler(chan, expire_time, user_context);
    6750:	9000      	str	r0, [sp, #0]
    6752:	4632      	mov	r2, r6
    6754:	463b      	mov	r3, r7
    6756:	4628      	mov	r0, r5
    6758:	4788      	blx	r1
    675a:	e7df      	b.n	671c <rtc_nrf_isr+0x84>
    675c:	40011000 	.word	0x40011000
    6760:	200021f0 	.word	0x200021f0
    6764:	200021e8 	.word	0x200021e8
    6768:	200000e0 	.word	0x200000e0

0000676c <sys_clock_set_timeout>:
	if (ticks == K_TICKS_FOREVER) {
    676c:	1c43      	adds	r3, r0, #1
{
    676e:	b513      	push	{r0, r1, r4, lr}
	if (ticks == K_TICKS_FOREVER) {
    6770:	d022      	beq.n	67b8 <sys_clock_set_timeout+0x4c>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
    6772:	2801      	cmp	r0, #1
    6774:	dd22      	ble.n	67bc <sys_clock_set_timeout+0x50>
    6776:	4a12      	ldr	r2, [pc, #72]	; (67c0 <sys_clock_set_timeout+0x54>)
    6778:	4b12      	ldr	r3, [pc, #72]	; (67c4 <sys_clock_set_timeout+0x58>)
    677a:	4290      	cmp	r0, r2
    677c:	bfd4      	ite	le
    677e:	4604      	movle	r4, r0
    6780:	461c      	movgt	r4, r3
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    6782:	f7ff fe99 	bl	64b8 <z_nrf_rtc_timer_read>
    6786:	4b10      	ldr	r3, [pc, #64]	; (67c8 <sys_clock_set_timeout+0x5c>)
	if (cyc > MAX_CYCLES) {
    6788:	490e      	ldr	r1, [pc, #56]	; (67c4 <sys_clock_set_timeout+0x58>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    678a:	e9d3 2300 	ldrd	r2, r3, [r3]
    678e:	1a80      	subs	r0, r0, r2
		cyc = 0;
    6790:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    6794:	bf28      	it	cs
    6796:	2400      	movcs	r4, #0
	cyc += unannounced;
    6798:	4404      	add	r4, r0
	if (cyc > MAX_CYCLES) {
    679a:	428c      	cmp	r4, r1
    679c:	bf28      	it	cs
    679e:	460c      	movcs	r4, r1
	uint64_t target_time = cyc + last_count;
    67a0:	18a2      	adds	r2, r4, r2
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    67a2:	490a      	ldr	r1, [pc, #40]	; (67cc <sys_clock_set_timeout+0x60>)
    67a4:	9100      	str	r1, [sp, #0]
	uint64_t target_time = cyc + last_count;
    67a6:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    67aa:	9001      	str	r0, [sp, #4]
    67ac:	f143 0300 	adc.w	r3, r3, #0
    67b0:	f7ff fea4 	bl	64fc <compare_set>
}
    67b4:	b002      	add	sp, #8
    67b6:	bd10      	pop	{r4, pc}
		cyc = MAX_TICKS * CYC_PER_TICK;
    67b8:	4c02      	ldr	r4, [pc, #8]	; (67c4 <sys_clock_set_timeout+0x58>)
    67ba:	e7e2      	b.n	6782 <sys_clock_set_timeout+0x16>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
    67bc:	2401      	movs	r4, #1
    67be:	e7e0      	b.n	6782 <sys_clock_set_timeout+0x16>
    67c0:	007ffffe 	.word	0x007ffffe
    67c4:	007fffff 	.word	0x007fffff
    67c8:	200000f0 	.word	0x200000f0
    67cc:	00006415 	.word	0x00006415

000067d0 <sys_clock_elapsed>:
{
    67d0:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    67d2:	f7ff fe71 	bl	64b8 <z_nrf_rtc_timer_read>
    67d6:	4b02      	ldr	r3, [pc, #8]	; (67e0 <sys_clock_elapsed+0x10>)
    67d8:	681b      	ldr	r3, [r3, #0]
}
    67da:	1ac0      	subs	r0, r0, r3
    67dc:	bd08      	pop	{r3, pc}
    67de:	bf00      	nop
    67e0:	200000f0 	.word	0x200000f0

000067e4 <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    67e4:	b5f0      	push	{r4, r5, r6, r7, lr}
        case 0: return NRF_P0;
    67e6:	4e1c      	ldr	r6, [pc, #112]	; (6858 <pinctrl_configure_pins+0x74>)
    67e8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    67ec:	4281      	cmp	r1, r0
    67ee:	d101      	bne.n	67f4 <pinctrl_configure_pins+0x10>
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
    67f0:	2000      	movs	r0, #0
    67f2:	e010      	b.n	6816 <pinctrl_configure_pins+0x32>
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    67f4:	6803      	ldr	r3, [r0, #0]
		uint32_t pin = NRF_GET_PIN(pins[i]);
    67f6:	f003 047f 	and.w	r4, r3, #127	; 0x7f
			pin = 0xFFFFFFFFU;
    67fa:	2c7f      	cmp	r4, #127	; 0x7f
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    67fc:	f3c3 2543 	ubfx	r5, r3, #9, #4
		switch (NRF_GET_FUN(pins[i])) {
    6800:	ea4f 4313 	mov.w	r3, r3, lsr #16
			pin = 0xFFFFFFFFU;
    6804:	bf08      	it	eq
    6806:	f04f 34ff 	moveq.w	r4, #4294967295
		switch (NRF_GET_FUN(pins[i])) {
    680a:	2b0b      	cmp	r3, #11
    680c:	d004      	beq.n	6818 <pinctrl_configure_pins+0x34>
    680e:	2b0c      	cmp	r3, #12
    6810:	d01f      	beq.n	6852 <pinctrl_configure_pins+0x6e>
    6812:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    6816:	bdf0      	pop	{r4, r5, r6, r7, pc}
			NRF_PSEL_TWIM(reg, SCL) = pin;
    6818:	f8c2 4508 	str.w	r4, [r2, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
    681c:	b905      	cbnz	r5, 6820 <pinctrl_configure_pins+0x3c>
				drive = NRF_DRIVE_S0D1;
    681e:	2506      	movs	r5, #6
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
    6820:	f850 3b04 	ldr.w	r3, [r0], #4
    *p_pin = pin_number & 0x1F;
    6824:	f004 071f 	and.w	r7, r4, #31
    6828:	f3c3 3e40 	ubfx	lr, r3, #13, #1
    return pin_number >> 5;
    682c:	0964      	lsrs	r4, r4, #5
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
    682e:	f3c3 13c1 	ubfx	r3, r3, #7, #2
        case 0: return NRF_P0;
    6832:	2c01      	cmp	r4, #1
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    6834:	ea4f 0383 	mov.w	r3, r3, lsl #2
        case 0: return NRF_P0;
    6838:	bf0c      	ite	eq
    683a:	46b4      	moveq	ip, r6
    683c:	f04f 4ca0 	movne.w	ip, #1342177280	; 0x50000000
           ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos) |
    6840:	ea43 034e 	orr.w	r3, r3, lr, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
    6844:	f507 74e0 	add.w	r4, r7, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    6848:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
    684c:	f84c 3024 	str.w	r3, [ip, r4, lsl #2]
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    6850:	e7cc      	b.n	67ec <pinctrl_configure_pins+0x8>
			NRF_PSEL_TWIM(reg, SDA) = pin;
    6852:	f8c2 450c 	str.w	r4, [r2, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
    6856:	e7e1      	b.n	681c <pinctrl_configure_pins+0x38>
    6858:	50000300 	.word	0x50000300

0000685c <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
    685c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    685e:	ab0b      	add	r3, sp, #44	; 0x2c
    6860:	9305      	str	r3, [sp, #20]
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
    6862:	9303      	str	r3, [sp, #12]
    6864:	4b05      	ldr	r3, [pc, #20]	; (687c <z_log_msg_runtime_create.constprop.0+0x20>)
    6866:	9302      	str	r3, [sp, #8]
    6868:	2300      	movs	r3, #0
    686a:	e9cd 3300 	strd	r3, r3, [sp]
    686e:	2201      	movs	r2, #1
    6870:	4618      	mov	r0, r3
    6872:	f7fd ff17 	bl	46a4 <z_impl_z_log_msg_runtime_vcreate>
}
    6876:	b007      	add	sp, #28
    6878:	f85d fb04 	ldr.w	pc, [sp], #4
    687c:	0000a937 	.word	0x0000a937

00006880 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    6880:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		(void) arch_syscall_invoke0(K_SYSCALL_LOG_PANIC);
		return;
	}
#endif
	compiler_barrier();
	z_impl_log_panic();
    6882:	f7fd fe9b 	bl	45bc <z_impl_log_panic>
	ARG_UNUSED(reason);

	LOG_PANIC();

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
    6886:	2400      	movs	r4, #0
    6888:	4b06      	ldr	r3, [pc, #24]	; (68a4 <k_sys_fatal_error_handler+0x24>)
    688a:	9302      	str	r3, [sp, #8]
    688c:	4620      	mov	r0, r4
    688e:	e9cd 4400 	strd	r4, r4, [sp]
    6892:	4905      	ldr	r1, [pc, #20]	; (68a8 <k_sys_fatal_error_handler+0x28>)
    6894:	4623      	mov	r3, r4
    6896:	2201      	movs	r2, #1
    6898:	f7ff ffe0 	bl	685c <z_log_msg_runtime_create.constprop.0>
		sys_arch_reboot(0);
    689c:	4620      	mov	r0, r4
    689e:	f7ff f95d 	bl	5b5c <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
    68a2:	bf00      	nop
    68a4:	0000a937 	.word	0x0000a937
    68a8:	00009eac 	.word	0x00009eac

000068ac <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    68ac:	4a02      	ldr	r2, [pc, #8]	; (68b8 <nvmc_wait+0xc>)
    68ae:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    68b2:	2b00      	cmp	r3, #0
    68b4:	d0fb      	beq.n	68ae <nvmc_wait+0x2>
}
    68b6:	4770      	bx	lr
    68b8:	4001e000 	.word	0x4001e000

000068bc <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
    68bc:	b510      	push	{r4, lr}
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    68be:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                        return true;
                }
            }
        #endif
        #if defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)
            if (var1 == 0x0D)
    68c2:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    68c6:	2a0d      	cmp	r2, #13
    68c8:	d155      	bne.n	6976 <SystemInit+0xba>

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
            NRF_CLOCK->EVENTS_DONE = 0;
    68ca:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    68ce:	2200      	movs	r2, #0
    68d0:	f8c1 210c 	str.w	r2, [r1, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    68d4:	f8c1 2110 	str.w	r2, [r1, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    68d8:	f8c1 2538 	str.w	r2, [r1, #1336]	; 0x538

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    68dc:	4a4c      	ldr	r2, [pc, #304]	; (6a10 <SystemInit+0x154>)
    68de:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
    68e2:	f8c2 0520 	str.w	r0, [r2, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    68e6:	f8d3 0408 	ldr.w	r0, [r3, #1032]	; 0x408
    68ea:	f8c2 0524 	str.w	r0, [r2, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    68ee:	f8d3 040c 	ldr.w	r0, [r3, #1036]	; 0x40c
    68f2:	f8c2 0528 	str.w	r0, [r2, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    68f6:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
    68fa:	f8c2 052c 	str.w	r0, [r2, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    68fe:	f8d3 0414 	ldr.w	r0, [r3, #1044]	; 0x414
    6902:	f8c2 0530 	str.w	r0, [r2, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    6906:	f8d3 0418 	ldr.w	r0, [r3, #1048]	; 0x418
    690a:	f8c2 0534 	str.w	r0, [r2, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    690e:	f8d3 041c 	ldr.w	r0, [r3, #1052]	; 0x41c
    6912:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    6916:	f8d3 0420 	ldr.w	r0, [r3, #1056]	; 0x420
    691a:	f8c2 0544 	str.w	r0, [r2, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    691e:	f8d3 0424 	ldr.w	r0, [r3, #1060]	; 0x424
    6922:	f8c2 0548 	str.w	r0, [r2, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    6926:	f8d3 0428 	ldr.w	r0, [r3, #1064]	; 0x428
    692a:	f8c2 054c 	str.w	r0, [r2, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    692e:	f8d3 042c 	ldr.w	r0, [r3, #1068]	; 0x42c
    6932:	f8c2 0550 	str.w	r0, [r2, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    6936:	f8d3 0430 	ldr.w	r0, [r3, #1072]	; 0x430
    693a:	f8c2 0554 	str.w	r0, [r2, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    693e:	f8d3 0434 	ldr.w	r0, [r3, #1076]	; 0x434
    6942:	f8c2 0560 	str.w	r0, [r2, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    6946:	f8d3 0438 	ldr.w	r0, [r3, #1080]	; 0x438
    694a:	f8c2 0564 	str.w	r0, [r2, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    694e:	f8d3 043c 	ldr.w	r0, [r3, #1084]	; 0x43c
    6952:	f8c2 0568 	str.w	r0, [r2, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    6956:	f8d3 0440 	ldr.w	r0, [r3, #1088]	; 0x440
    695a:	f8c2 056c 	str.w	r0, [r2, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    695e:	f8d3 3444 	ldr.w	r3, [r3, #1092]	; 0x444
    6962:	f8c2 3570 	str.w	r3, [r2, #1392]	; 0x570

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    6966:	f8d1 3400 	ldr.w	r3, [r1, #1024]	; 0x400
    696a:	07db      	lsls	r3, r3, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    696c:	bf44      	itt	mi
    696e:	f06f 0301 	mvnmi.w	r3, #1
    6972:	f8c1 3400 	strmi.w	r3, [r1, #1024]	; 0x400

    /* Enable the FPU if the compiler used floating point unit instructions. __FPU_USED is a MACRO defined by the
     * compiler. Since the FPU consumes energy, remember to disable FPU use in the compiler if floating point unit
     * operations are not used in your code. */
    #if (__FPU_USED == 1)
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
    6976:	4a27      	ldr	r2, [pc, #156]	; (6a14 <SystemInit+0x158>)
    6978:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
    697c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
    6980:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
    6984:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6988:	f3bf 8f6f 	isb	sy
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    698c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                        return true;
                }
            }
        #endif
        #if defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)
            if (var1 == 0x0D)
    6990:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    6994:	2a0d      	cmp	r2, #13
    6996:	d10a      	bne.n	69ae <SystemInit+0xf2>
            {
                switch(var2)
    6998:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
    699c:	b13b      	cbz	r3, 69ae <SystemInit+0xf2>
        #else
            if (nrf52_configuration_249())
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    699e:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    69a2:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    69a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    69aa:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    69ae:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    69b2:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    69b6:	2a00      	cmp	r2, #0
    69b8:	db03      	blt.n	69c2 <SystemInit+0x106>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    69ba:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    69be:	2b00      	cmp	r3, #0
    69c0:	da22      	bge.n	6a08 <SystemInit+0x14c>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    69c2:	4915      	ldr	r1, [pc, #84]	; (6a18 <SystemInit+0x15c>)
    69c4:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    69c6:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    69ca:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    69ce:	2412      	movs	r4, #18
    nvmc_wait();
    69d0:	f7ff ff6c 	bl	68ac <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    69d4:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
    69d8:	f7ff ff68 	bl	68ac <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    69dc:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
    69e0:	f7ff ff64 	bl	68ac <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    69e4:	2300      	movs	r3, #0
    69e6:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    69ea:	f7ff ff5f 	bl	68ac <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
    69ee:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    69f2:	4908      	ldr	r1, [pc, #32]	; (6a14 <SystemInit+0x158>)
    69f4:	4b09      	ldr	r3, [pc, #36]	; (6a1c <SystemInit+0x160>)
    69f6:	68ca      	ldr	r2, [r1, #12]
    69f8:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    69fc:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    69fe:	60cb      	str	r3, [r1, #12]
    6a00:	f3bf 8f4f 	dsb	sy
    __NOP();
    6a04:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    6a06:	e7fd      	b.n	6a04 <SystemInit+0x148>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    6a08:	4b05      	ldr	r3, [pc, #20]	; (6a20 <SystemInit+0x164>)
    6a0a:	4a06      	ldr	r2, [pc, #24]	; (6a24 <SystemInit+0x168>)
    6a0c:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
    6a0e:	bd10      	pop	{r4, pc}
    6a10:	4000c000 	.word	0x4000c000
    6a14:	e000ed00 	.word	0xe000ed00
    6a18:	4001e000 	.word	0x4001e000
    6a1c:	05fa0004 	.word	0x05fa0004
    6a20:	20000040 	.word	0x20000040
    6a24:	03d09000 	.word	0x03d09000

00006a28 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    6a28:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    6a2a:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    6a2c:	6802      	ldr	r2, [r0, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    6a2e:	f3bf 8f5b 	dmb	ish
        idx = 31 - NRF_CLZ(prev_mask);
    6a32:	fab2 f382 	clz	r3, r2
    6a36:	f1c3 031f 	rsb	r3, r3, #31
    6a3a:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
    6a3c:	fa05 f403 	lsl.w	r4, r5, r3
    6a40:	ea22 0404 	bic.w	r4, r2, r4
    6a44:	e850 6f00 	ldrex	r6, [r0]
    6a48:	4296      	cmp	r6, r2
    6a4a:	d104      	bne.n	6a56 <nrfx_flag32_alloc+0x2e>
    6a4c:	e840 4c00 	strex	ip, r4, [r0]
    6a50:	f1bc 0f00 	cmp.w	ip, #0
    6a54:	d1f6      	bne.n	6a44 <nrfx_flag32_alloc+0x1c>
    6a56:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    6a5a:	d1e7      	bne.n	6a2c <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
    6a5c:	4801      	ldr	r0, [pc, #4]	; (6a64 <nrfx_flag32_alloc+0x3c>)
    *p_flag = idx;
    6a5e:	700b      	strb	r3, [r1, #0]
}
    6a60:	bd70      	pop	{r4, r5, r6, pc}
    6a62:	bf00      	nop
    6a64:	0bad0000 	.word	0x0bad0000

00006a68 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    6a68:	b510      	push	{r4, lr}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    6a6a:	6803      	ldr	r3, [r0, #0]
    6a6c:	40cb      	lsrs	r3, r1
    6a6e:	07db      	lsls	r3, r3, #31
    6a70:	d414      	bmi.n	6a9c <nrfx_flag32_free+0x34>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    6a72:	2301      	movs	r3, #1
    6a74:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
    6a76:	6802      	ldr	r2, [r0, #0]
    6a78:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
    6a7c:	ea43 0102 	orr.w	r1, r3, r2
    6a80:	e850 4f00 	ldrex	r4, [r0]
    6a84:	4294      	cmp	r4, r2
    6a86:	d104      	bne.n	6a92 <nrfx_flag32_free+0x2a>
    6a88:	e840 1c00 	strex	ip, r1, [r0]
    6a8c:	f1bc 0f00 	cmp.w	ip, #0
    6a90:	d1f6      	bne.n	6a80 <nrfx_flag32_free+0x18>
    6a92:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    6a96:	d1ee      	bne.n	6a76 <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
    6a98:	4801      	ldr	r0, [pc, #4]	; (6aa0 <nrfx_flag32_free+0x38>)
}
    6a9a:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    6a9c:	4801      	ldr	r0, [pc, #4]	; (6aa4 <nrfx_flag32_free+0x3c>)
    6a9e:	e7fc      	b.n	6a9a <nrfx_flag32_free+0x32>
    6aa0:	0bad0000 	.word	0x0bad0000
    6aa4:	0bad0004 	.word	0x0bad0004

00006aa8 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    6aa8:	4b04      	ldr	r3, [pc, #16]	; (6abc <nrfx_clock_init+0x14>)
    6aaa:	791a      	ldrb	r2, [r3, #4]
    6aac:	b922      	cbnz	r2, 6ab8 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    6aae:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    6ab0:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    6ab2:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    6ab4:	4802      	ldr	r0, [pc, #8]	; (6ac0 <nrfx_clock_init+0x18>)
    6ab6:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    6ab8:	4802      	ldr	r0, [pc, #8]	; (6ac4 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    6aba:	4770      	bx	lr
    6abc:	200021f4 	.word	0x200021f4
    6ac0:	0bad0000 	.word	0x0bad0000
    6ac4:	0bad000c 	.word	0x0bad000c

00006ac8 <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    6ac8:	b510      	push	{r4, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    6aca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6ace:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    6ad2:	b152      	cbz	r2, 6aea <nrfx_power_clock_irq_handler+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6ad4:	2000      	movs	r0, #0
    6ad6:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
    6ada:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    6ade:	2201      	movs	r2, #1
    6ae0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    6ae4:	4b10      	ldr	r3, [pc, #64]	; (6b28 <nrfx_power_clock_irq_handler+0x60>)
    6ae6:	681b      	ldr	r3, [r3, #0]
    6ae8:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    6aea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6aee:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    6af2:	b172      	cbz	r2, 6b12 <nrfx_power_clock_irq_handler+0x4a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6af4:	2200      	movs	r2, #0
    6af6:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    6afa:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    6afe:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    6b02:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    6b06:	0792      	lsls	r2, r2, #30
    6b08:	d104      	bne.n	6b14 <nrfx_power_clock_irq_handler+0x4c>
    p_reg->LFCLKSRC = (uint32_t)(source);
    6b0a:	2201      	movs	r2, #1
    6b0c:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6b10:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    6b12:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    6b14:	2202      	movs	r2, #2
    6b16:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    6b1a:	4b03      	ldr	r3, [pc, #12]	; (6b28 <nrfx_power_clock_irq_handler+0x60>)
}
    6b1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    6b20:	681b      	ldr	r3, [r3, #0]
    6b22:	2001      	movs	r0, #1
    6b24:	4718      	bx	r3
    6b26:	bf00      	nop
    6b28:	200021f4 	.word	0x200021f4

00006b2c <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
    6b2c:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
    6b2e:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    6b32:	095b      	lsrs	r3, r3, #5
        case 0: return NRF_P0;
    6b34:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
    6b36:	6002      	str	r2, [r0, #0]
}
    6b38:	4802      	ldr	r0, [pc, #8]	; (6b44 <nrf_gpio_pin_port_decode+0x18>)
    6b3a:	bf18      	it	ne
    6b3c:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
    6b40:	4770      	bx	lr
    6b42:	bf00      	nop
    6b44:	50000300 	.word	0x50000300

00006b48 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    6b48:	4b03      	ldr	r3, [pc, #12]	; (6b58 <pin_in_use_by_te+0x10>)
    6b4a:	3008      	adds	r0, #8
    6b4c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    6b50:	f3c0 1040 	ubfx	r0, r0, #5, #1
    6b54:	4770      	bx	lr
    6b56:	bf00      	nop
    6b58:	20000044 	.word	0x20000044

00006b5c <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    6b5c:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    6b5e:	f100 0308 	add.w	r3, r0, #8
    6b62:	4c0c      	ldr	r4, [pc, #48]	; (6b94 <call_handler+0x38>)
    6b64:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
    6b68:	05da      	lsls	r2, r3, #23
{
    6b6a:	4605      	mov	r5, r0
    6b6c:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    6b6e:	d507      	bpl.n	6b80 <call_handler+0x24>
    6b70:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    6b74:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    6b78:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    6b7c:	6852      	ldr	r2, [r2, #4]
    6b7e:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    6b80:	68a3      	ldr	r3, [r4, #8]
    6b82:	b12b      	cbz	r3, 6b90 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    6b84:	68e2      	ldr	r2, [r4, #12]
    6b86:	4631      	mov	r1, r6
    6b88:	4628      	mov	r0, r5
    }
}
    6b8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    6b8e:	4718      	bx	r3
}
    6b90:	bd70      	pop	{r4, r5, r6, pc}
    6b92:	bf00      	nop
    6b94:	20000044 	.word	0x20000044

00006b98 <release_handler>:
{
    6b98:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    6b9a:	4a13      	ldr	r2, [pc, #76]	; (6be8 <release_handler+0x50>)
    6b9c:	3008      	adds	r0, #8
    6b9e:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
    6ba2:	05d9      	lsls	r1, r3, #23
    6ba4:	d51c      	bpl.n	6be0 <release_handler+0x48>
    6ba6:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    6baa:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    6bae:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    6bb2:	f102 040e 	add.w	r4, r2, #14
    6bb6:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    6bb8:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    6bbc:	f413 7f80 	tst.w	r3, #256	; 0x100
    6bc0:	d003      	beq.n	6bca <release_handler+0x32>
    6bc2:	f3c3 2343 	ubfx	r3, r3, #9, #4
    6bc6:	4299      	cmp	r1, r3
    6bc8:	d00a      	beq.n	6be0 <release_handler+0x48>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    6bca:	3001      	adds	r0, #1
    6bcc:	282a      	cmp	r0, #42	; 0x2a
    6bce:	d1f3      	bne.n	6bb8 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    6bd0:	2300      	movs	r3, #0
    6bd2:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    6bd6:	4805      	ldr	r0, [pc, #20]	; (6bec <release_handler+0x54>)
}
    6bd8:	f85d 4b04 	ldr.w	r4, [sp], #4
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    6bdc:	f7ff bf44 	b.w	6a68 <nrfx_flag32_free>
}
    6be0:	f85d 4b04 	ldr.w	r4, [sp], #4
    6be4:	4770      	bx	lr
    6be6:	bf00      	nop
    6be8:	20000044 	.word	0x20000044
    6bec:	200000ac 	.word	0x200000ac

00006bf0 <pin_handler_trigger_uninit>:
{
    6bf0:	b538      	push	{r3, r4, r5, lr}
    6bf2:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    6bf4:	f7ff ffa8 	bl	6b48 <pin_in_use_by_te>
    6bf8:	4c09      	ldr	r4, [pc, #36]	; (6c20 <pin_handler_trigger_uninit+0x30>)
    6bfa:	f102 0508 	add.w	r5, r2, #8
    6bfe:	b140      	cbz	r0, 6c12 <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    6c00:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    6c04:	4907      	ldr	r1, [pc, #28]	; (6c24 <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    6c06:	0b5b      	lsrs	r3, r3, #13
    6c08:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    6c0c:	2000      	movs	r0, #0
    6c0e:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
    6c12:	4610      	mov	r0, r2
    6c14:	f7ff ffc0 	bl	6b98 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    6c18:	2300      	movs	r3, #0
    6c1a:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    6c1e:	bd38      	pop	{r3, r4, r5, pc}
    6c20:	20000044 	.word	0x20000044
    6c24:	40006000 	.word	0x40006000

00006c28 <nrfx_gpiote_input_configure>:
{
    6c28:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    6c2c:	4604      	mov	r4, r0
    6c2e:	4616      	mov	r6, r2
    6c30:	461d      	mov	r5, r3
    if (p_input_config)
    6c32:	b301      	cbz	r1, 6c76 <nrfx_gpiote_input_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    6c34:	4f4e      	ldr	r7, [pc, #312]	; (6d70 <nrfx_gpiote_input_configure+0x148>)
    6c36:	f100 0808 	add.w	r8, r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    6c3a:	f837 3018 	ldrh.w	r3, [r7, r8, lsl #1]
    6c3e:	079b      	lsls	r3, r3, #30
    6c40:	d502      	bpl.n	6c48 <nrfx_gpiote_input_configure+0x20>
    6c42:	f7ff ff81 	bl	6b48 <pin_in_use_by_te>
    6c46:	bb10      	cbnz	r0, 6c8e <nrfx_gpiote_input_configure+0x66>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    6c48:	2300      	movs	r3, #0
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    6c4a:	e9cd 3300 	strd	r3, r3, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    6c4e:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
    6c52:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    6c56:	f10d 020f 	add.w	r2, sp, #15
    6c5a:	460b      	mov	r3, r1
    6c5c:	4620      	mov	r0, r4
    6c5e:	f10d 010e 	add.w	r1, sp, #14
    6c62:	f002 fd48 	bl	96f6 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    6c66:	f837 3018 	ldrh.w	r3, [r7, r8, lsl #1]
    6c6a:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    6c6e:	f043 0301 	orr.w	r3, r3, #1
    6c72:	f827 3018 	strh.w	r3, [r7, r8, lsl #1]
    if (p_trigger_config)
    6c76:	b346      	cbz	r6, 6cca <nrfx_gpiote_input_configure+0xa2>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    6c78:	4b3d      	ldr	r3, [pc, #244]	; (6d70 <nrfx_gpiote_input_configure+0x148>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    6c7a:	f896 c000 	ldrb.w	ip, [r6]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    6c7e:	6872      	ldr	r2, [r6, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    6c80:	f104 0708 	add.w	r7, r4, #8
    6c84:	f833 1017 	ldrh.w	r1, [r3, r7, lsl #1]
        if (pin_is_output(pin))
    6c88:	0788      	lsls	r0, r1, #30
    6c8a:	d502      	bpl.n	6c92 <nrfx_gpiote_input_configure+0x6a>
            if (use_evt)
    6c8c:	b1aa      	cbz	r2, 6cba <nrfx_gpiote_input_configure+0x92>
            return NRFX_ERROR_INVALID_PARAM;
    6c8e:	4839      	ldr	r0, [pc, #228]	; (6d74 <nrfx_gpiote_input_configure+0x14c>)
    6c90:	e01d      	b.n	6cce <nrfx_gpiote_input_configure+0xa6>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    6c92:	f021 0120 	bic.w	r1, r1, #32
    6c96:	04c9      	lsls	r1, r1, #19
    6c98:	0cc9      	lsrs	r1, r1, #19
    6c9a:	f823 1017 	strh.w	r1, [r3, r7, lsl #1]
            if (use_evt)
    6c9e:	b162      	cbz	r2, 6cba <nrfx_gpiote_input_configure+0x92>
                if (!edge)
    6ca0:	f1bc 0f03 	cmp.w	ip, #3
    6ca4:	d8f3      	bhi.n	6c8e <nrfx_gpiote_input_configure+0x66>
                uint8_t ch = *p_trigger_config->p_in_channel;
    6ca6:	6872      	ldr	r2, [r6, #4]
    6ca8:	7816      	ldrb	r6, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    6caa:	f1bc 0f00 	cmp.w	ip, #0
    6cae:	d111      	bne.n	6cd4 <nrfx_gpiote_input_configure+0xac>
    6cb0:	4a31      	ldr	r2, [pc, #196]	; (6d78 <nrfx_gpiote_input_configure+0x150>)
    6cb2:	f506 76a2 	add.w	r6, r6, #324	; 0x144
    6cb6:	f842 c026 	str.w	ip, [r2, r6, lsl #2]
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    6cba:	f833 2017 	ldrh.w	r2, [r3, r7, lsl #1]
    6cbe:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    6cc2:	ea42 028c 	orr.w	r2, r2, ip, lsl #2
    6cc6:	f823 2017 	strh.w	r2, [r3, r7, lsl #1]
    if (p_handler_config)
    6cca:	bb45      	cbnz	r5, 6d1e <nrfx_gpiote_input_configure+0xf6>
        err = NRFX_SUCCESS;
    6ccc:	482b      	ldr	r0, [pc, #172]	; (6d7c <nrfx_gpiote_input_configure+0x154>)
}
    6cce:	b004      	add	sp, #16
    6cd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    6cd4:	00b2      	lsls	r2, r6, #2
    6cd6:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    6cda:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    6cde:	ea41 3146 	orr.w	r1, r1, r6, lsl #13
    6ce2:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    6ce6:	f020 0003 	bic.w	r0, r0, #3
    6cea:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    6cee:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    6cf2:	f420 304f 	bic.w	r0, r0, #211968	; 0x33c00
    6cf6:	f420 7040 	bic.w	r0, r0, #768	; 0x300
    6cfa:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    6cfe:	0220      	lsls	r0, r4, #8
    6d00:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    6d04:	f400 507c 	and.w	r0, r0, #16128	; 0x3f00
    6d08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    6d0c:	ea40 000e 	orr.w	r0, r0, lr
    6d10:	f041 0120 	orr.w	r1, r1, #32
    6d14:	f823 1017 	strh.w	r1, [r3, r7, lsl #1]
    6d18:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
    6d1c:	e7cd      	b.n	6cba <nrfx_gpiote_input_configure+0x92>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    6d1e:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    6d22:	4620      	mov	r0, r4
    6d24:	f7ff ff38 	bl	6b98 <release_handler>
    if (!handler)
    6d28:	2e00      	cmp	r6, #0
    6d2a:	d0cf      	beq.n	6ccc <nrfx_gpiote_input_configure+0xa4>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    6d2c:	4d10      	ldr	r5, [pc, #64]	; (6d70 <nrfx_gpiote_input_configure+0x148>)
    6d2e:	e9d5 2300 	ldrd	r2, r3, [r5]
    6d32:	4296      	cmp	r6, r2
    6d34:	d101      	bne.n	6d3a <nrfx_gpiote_input_configure+0x112>
    6d36:	429f      	cmp	r7, r3
    6d38:	d018      	beq.n	6d6c <nrfx_gpiote_input_configure+0x144>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    6d3a:	4811      	ldr	r0, [pc, #68]	; (6d80 <nrfx_gpiote_input_configure+0x158>)
    6d3c:	f10d 010f 	add.w	r1, sp, #15
    6d40:	f7ff fe72 	bl	6a28 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    6d44:	4b0d      	ldr	r3, [pc, #52]	; (6d7c <nrfx_gpiote_input_configure+0x154>)
    6d46:	4298      	cmp	r0, r3
    6d48:	d1c1      	bne.n	6cce <nrfx_gpiote_input_configure+0xa6>
        handler_id = (int32_t)id;
    6d4a:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
    6d4e:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    6d52:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    6d56:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    6d58:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    6d5a:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    6d5e:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    6d62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    6d66:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    return NRFX_SUCCESS;
    6d6a:	e7af      	b.n	6ccc <nrfx_gpiote_input_configure+0xa4>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    6d6c:	2200      	movs	r2, #0
    6d6e:	e7ee      	b.n	6d4e <nrfx_gpiote_input_configure+0x126>
    6d70:	20000044 	.word	0x20000044
    6d74:	0bad0004 	.word	0x0bad0004
    6d78:	40006000 	.word	0x40006000
    6d7c:	0bad0000 	.word	0x0bad0000
    6d80:	200000ac 	.word	0x200000ac

00006d84 <nrfx_gpiote_output_configure>:
{
    6d84:	b5f0      	push	{r4, r5, r6, r7, lr}
    6d86:	4604      	mov	r4, r0
    6d88:	b085      	sub	sp, #20
    6d8a:	4615      	mov	r5, r2
    if (p_config)
    6d8c:	b319      	cbz	r1, 6dd6 <nrfx_gpiote_output_configure+0x52>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    6d8e:	4e33      	ldr	r6, [pc, #204]	; (6e5c <nrfx_gpiote_output_configure+0xd8>)
    6d90:	f100 0708 	add.w	r7, r0, #8
    6d94:	f836 2017 	ldrh.w	r2, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    6d98:	0793      	lsls	r3, r2, #30
    6d9a:	d403      	bmi.n	6da4 <nrfx_gpiote_output_configure+0x20>
    6d9c:	f7ff fed4 	bl	6b48 <pin_in_use_by_te>
    6da0:	2800      	cmp	r0, #0
    6da2:	d158      	bne.n	6e56 <nrfx_gpiote_output_configure+0xd2>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    6da4:	f012 0f1c 	tst.w	r2, #28
    6da8:	d002      	beq.n	6db0 <nrfx_gpiote_output_configure+0x2c>
    6daa:	784b      	ldrb	r3, [r1, #1]
    6dac:	2b01      	cmp	r3, #1
    6dae:	d052      	beq.n	6e56 <nrfx_gpiote_output_configure+0xd2>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
    6db0:	2301      	movs	r3, #1
    6db2:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    6db6:	2300      	movs	r3, #0
    6db8:	e9cd 1300 	strd	r1, r3, [sp]
    6dbc:	1c4a      	adds	r2, r1, #1
    6dbe:	1c8b      	adds	r3, r1, #2
    6dc0:	4620      	mov	r0, r4
    6dc2:	f10d 010f 	add.w	r1, sp, #15
    6dc6:	f002 fc96 	bl	96f6 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    6dca:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    6dce:	f043 0303 	orr.w	r3, r3, #3
    6dd2:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
    6dd6:	b915      	cbnz	r5, 6dde <nrfx_gpiote_output_configure+0x5a>
    return NRFX_SUCCESS;
    6dd8:	4821      	ldr	r0, [pc, #132]	; (6e60 <nrfx_gpiote_output_configure+0xdc>)
}
    6dda:	b005      	add	sp, #20
    6ddc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    6dde:	4e1f      	ldr	r6, [pc, #124]	; (6e5c <nrfx_gpiote_output_configure+0xd8>)
    6de0:	f104 0708 	add.w	r7, r4, #8
    6de4:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
    6de8:	0783      	lsls	r3, r0, #30
    6dea:	d534      	bpl.n	6e56 <nrfx_gpiote_output_configure+0xd2>
        uint32_t ch = p_task_config->task_ch;
    6dec:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
    6df0:	4661      	mov	r1, ip
    6df2:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    6df4:	f020 0020 	bic.w	r0, r0, #32
    6df8:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    6dfc:	04c0      	lsls	r0, r0, #19
    6dfe:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
    6e02:	0cc0      	lsrs	r0, r0, #19
    6e04:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    6e08:	2300      	movs	r3, #0
    6e0a:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    6e0e:	786a      	ldrb	r2, [r5, #1]
    6e10:	2a00      	cmp	r2, #0
    6e12:	d0e1      	beq.n	6dd8 <nrfx_gpiote_output_configure+0x54>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    6e14:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
    6e18:	78ad      	ldrb	r5, [r5, #2]
    6e1a:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
    6e1e:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    6e22:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    6e26:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    6e2a:	0223      	lsls	r3, r4, #8
    6e2c:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    6e30:	0412      	lsls	r2, r2, #16
    6e32:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    6e36:	ea43 030e 	orr.w	r3, r3, lr
    6e3a:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    6e3c:	052a      	lsls	r2, r5, #20
    6e3e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    6e42:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    6e46:	4313      	orrs	r3, r2
    6e48:	f040 0020 	orr.w	r0, r0, #32
    6e4c:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    6e50:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    6e54:	e7c0      	b.n	6dd8 <nrfx_gpiote_output_configure+0x54>
{
    6e56:	4803      	ldr	r0, [pc, #12]	; (6e64 <nrfx_gpiote_output_configure+0xe0>)
    6e58:	e7bf      	b.n	6dda <nrfx_gpiote_output_configure+0x56>
    6e5a:	bf00      	nop
    6e5c:	20000044 	.word	0x20000044
    6e60:	0bad0000 	.word	0x0bad0000
    6e64:	0bad0004 	.word	0x0bad0004

00006e68 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    6e68:	4b01      	ldr	r3, [pc, #4]	; (6e70 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    6e6a:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    6e6e:	4770      	bx	lr
    6e70:	20000044 	.word	0x20000044

00006e74 <nrfx_gpiote_channel_get>:
{
    6e74:	b508      	push	{r3, lr}
    6e76:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    6e78:	f7ff fe66 	bl	6b48 <pin_in_use_by_te>
    6e7c:	b138      	cbz	r0, 6e8e <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    6e7e:	4b05      	ldr	r3, [pc, #20]	; (6e94 <nrfx_gpiote_channel_get+0x20>)
        return NRFX_SUCCESS;
    6e80:	4805      	ldr	r0, [pc, #20]	; (6e98 <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    6e82:	3208      	adds	r2, #8
    6e84:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    6e88:	0b5b      	lsrs	r3, r3, #13
    6e8a:	700b      	strb	r3, [r1, #0]
}
    6e8c:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
    6e8e:	4803      	ldr	r0, [pc, #12]	; (6e9c <nrfx_gpiote_channel_get+0x28>)
    6e90:	e7fc      	b.n	6e8c <nrfx_gpiote_channel_get+0x18>
    6e92:	bf00      	nop
    6e94:	20000044 	.word	0x20000044
    6e98:	0bad0000 	.word	0x0bad0000
    6e9c:	0bad0004 	.word	0x0bad0004

00006ea0 <nrfx_gpiote_init>:
{
    6ea0:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    6ea2:	4c0f      	ldr	r4, [pc, #60]	; (6ee0 <nrfx_gpiote_init+0x40>)
    6ea4:	f894 506c 	ldrb.w	r5, [r4, #108]	; 0x6c
    6ea8:	b9bd      	cbnz	r5, 6eda <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    6eaa:	2254      	movs	r2, #84	; 0x54
    6eac:	4629      	mov	r1, r5
    6eae:	f104 0010 	add.w	r0, r4, #16
    6eb2:	f002 feaa 	bl	9c0a <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    6eb6:	2006      	movs	r0, #6
    6eb8:	f7fe f84a 	bl	4f50 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    6ebc:	4b09      	ldr	r3, [pc, #36]	; (6ee4 <nrfx_gpiote_init+0x44>)
    return err_code;
    6ebe:	480a      	ldr	r0, [pc, #40]	; (6ee8 <nrfx_gpiote_init+0x48>)
    6ec0:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
    6ec4:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    6ec8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    6ecc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    6ed0:	2301      	movs	r3, #1
    6ed2:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    6ed6:	66a3      	str	r3, [r4, #104]	; 0x68
}
    6ed8:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    6eda:	4804      	ldr	r0, [pc, #16]	; (6eec <nrfx_gpiote_init+0x4c>)
    6edc:	e7fc      	b.n	6ed8 <nrfx_gpiote_init+0x38>
    6ede:	bf00      	nop
    6ee0:	20000044 	.word	0x20000044
    6ee4:	40006000 	.word	0x40006000
    6ee8:	0bad0000 	.word	0x0bad0000
    6eec:	0bad0005 	.word	0x0bad0005

00006ef0 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    6ef0:	4b03      	ldr	r3, [pc, #12]	; (6f00 <nrfx_gpiote_is_init+0x10>)
    6ef2:	f893 006c 	ldrb.w	r0, [r3, #108]	; 0x6c
}
    6ef6:	3800      	subs	r0, #0
    6ef8:	bf18      	it	ne
    6efa:	2001      	movne	r0, #1
    6efc:	4770      	bx	lr
    6efe:	bf00      	nop
    6f00:	20000044 	.word	0x20000044

00006f04 <nrfx_gpiote_channel_free>:
{
    6f04:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    6f06:	4801      	ldr	r0, [pc, #4]	; (6f0c <nrfx_gpiote_channel_free+0x8>)
    6f08:	f7ff bdae 	b.w	6a68 <nrfx_flag32_free>
    6f0c:	200000a8 	.word	0x200000a8

00006f10 <nrfx_gpiote_channel_alloc>:
{
    6f10:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    6f12:	4801      	ldr	r0, [pc, #4]	; (6f18 <nrfx_gpiote_channel_alloc+0x8>)
    6f14:	f7ff bd88 	b.w	6a28 <nrfx_flag32_alloc>
    6f18:	200000a8 	.word	0x200000a8

00006f1c <nrfx_gpiote_trigger_enable>:
{
    6f1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    6f1e:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    6f20:	f7ff fe12 	bl	6b48 <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    6f24:	f104 0208 	add.w	r2, r4, #8
    6f28:	4b1e      	ldr	r3, [pc, #120]	; (6fa4 <nrfx_gpiote_trigger_enable+0x88>)
    6f2a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    6f2e:	b1e8      	cbz	r0, 6f6c <nrfx_gpiote_trigger_enable+0x50>
    6f30:	f013 0502 	ands.w	r5, r3, #2
    6f34:	d11a      	bne.n	6f6c <nrfx_gpiote_trigger_enable+0x50>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    6f36:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    6f38:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
    6f3a:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
    6f3e:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
    6f42:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    6f46:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    6f4a:	6005      	str	r5, [r0, #0]
    6f4c:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    6f4e:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    6f52:	f040 0001 	orr.w	r0, r0, #1
    6f56:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
    6f5a:	b129      	cbz	r1, 6f68 <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    6f5c:	2201      	movs	r2, #1
    6f5e:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
    6f62:	4a11      	ldr	r2, [pc, #68]	; (6fa8 <nrfx_gpiote_trigger_enable+0x8c>)
    6f64:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    6f68:	b003      	add	sp, #12
    6f6a:	bd30      	pop	{r4, r5, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    6f6c:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    6f70:	2b04      	cmp	r3, #4
    6f72:	d012      	beq.n	6f9a <nrfx_gpiote_trigger_enable+0x7e>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    6f74:	2b05      	cmp	r3, #5
    6f76:	d012      	beq.n	6f9e <nrfx_gpiote_trigger_enable+0x82>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    6f78:	a801      	add	r0, sp, #4
    6f7a:	9401      	str	r4, [sp, #4]
    6f7c:	f7ff fdd6 	bl	6b2c <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    6f80:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
    6f82:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    6f86:	40d9      	lsrs	r1, r3
    6f88:	f001 0101 	and.w	r1, r1, #1
    6f8c:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    6f8e:	4620      	mov	r0, r4
}
    6f90:	b003      	add	sp, #12
    6f92:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    6f96:	f002 bbf7 	b.w	9788 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    6f9a:	2103      	movs	r1, #3
    6f9c:	e7f7      	b.n	6f8e <nrfx_gpiote_trigger_enable+0x72>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    6f9e:	2102      	movs	r1, #2
    6fa0:	e7f5      	b.n	6f8e <nrfx_gpiote_trigger_enable+0x72>
    6fa2:	bf00      	nop
    6fa4:	20000044 	.word	0x20000044
    6fa8:	40006000 	.word	0x40006000

00006fac <nrfx_gpiote_trigger_disable>:
{
    6fac:	b508      	push	{r3, lr}
    6fae:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    6fb0:	f7ff fdca 	bl	6b48 <pin_in_use_by_te>
    6fb4:	b1c0      	cbz	r0, 6fe8 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    6fb6:	f102 0108 	add.w	r1, r2, #8
    6fba:	4b0e      	ldr	r3, [pc, #56]	; (6ff4 <nrfx_gpiote_trigger_disable+0x48>)
    6fbc:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    6fc0:	0799      	lsls	r1, r3, #30
    6fc2:	d411      	bmi.n	6fe8 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    6fc4:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    6fc6:	2201      	movs	r2, #1
    6fc8:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
    6fca:	009b      	lsls	r3, r3, #2
    6fcc:	490a      	ldr	r1, [pc, #40]	; (6ff8 <nrfx_gpiote_trigger_disable+0x4c>)
    6fce:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    6fd2:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    6fd6:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    6fda:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    6fde:	f022 0203 	bic.w	r2, r2, #3
    6fe2:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    6fe6:	bd08      	pop	{r3, pc}
    6fe8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    6fec:	2100      	movs	r1, #0
    6fee:	4610      	mov	r0, r2
    6ff0:	f002 bbca 	b.w	9788 <nrf_gpio_cfg_sense_set>
    6ff4:	20000044 	.word	0x20000044
    6ff8:	40006000 	.word	0x40006000

00006ffc <nrfx_gpiote_pin_uninit>:
{
    6ffc:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    6ffe:	4b0e      	ldr	r3, [pc, #56]	; (7038 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x38>)
    7000:	f100 0208 	add.w	r2, r0, #8
{
    7004:	4604      	mov	r4, r0
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    7006:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
    700a:	07db      	lsls	r3, r3, #31
    700c:	d511      	bpl.n	7032 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x32>
    nrfx_gpiote_trigger_disable(pin);
    700e:	f7ff ffcd 	bl	6fac <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    7012:	4620      	mov	r0, r4
    7014:	f7ff fdec 	bl	6bf0 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    7018:	a801      	add	r0, sp, #4
    701a:	9401      	str	r4, [sp, #4]
    701c:	f7ff fd86 	bl	6b2c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    7020:	9b01      	ldr	r3, [sp, #4]
    7022:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    7026:	2202      	movs	r2, #2
    7028:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
    702c:	4803      	ldr	r0, [pc, #12]	; (703c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3c>)
}
    702e:	b002      	add	sp, #8
    7030:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    7032:	4803      	ldr	r0, [pc, #12]	; (7040 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x40>)
    7034:	e7fb      	b.n	702e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2e>
    7036:	bf00      	nop
    7038:	20000044 	.word	0x20000044
    703c:	0bad0000 	.word	0x0bad0000
    7040:	0bad0004 	.word	0x0bad0004

00007044 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    7044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7048:	4b68      	ldr	r3, [pc, #416]	; (71ec <nrfx_gpiote_irq_handler+0x1a8>)
    return p_reg->INTENSET & mask;
    704a:	4869      	ldr	r0, [pc, #420]	; (71f0 <nrfx_gpiote_irq_handler+0x1ac>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    704c:	4969      	ldr	r1, [pc, #420]	; (71f4 <nrfx_gpiote_irq_handler+0x1b0>)
    uint32_t status = 0;
    704e:	2600      	movs	r6, #0
{
    7050:	b087      	sub	sp, #28
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    7052:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    7054:	4634      	mov	r4, r6
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7056:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    7058:	b135      	cbz	r5, 7068 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
    705a:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
    705e:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    7060:	bf1e      	ittt	ne
    7062:	601c      	strne	r4, [r3, #0]
    7064:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    7066:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    7068:	3304      	adds	r3, #4
    706a:	428b      	cmp	r3, r1
        }
        mask <<= 1;
    706c:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    7070:	d1f1      	bne.n	7056 <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7072:	f8df 917c 	ldr.w	r9, [pc, #380]	; 71f0 <nrfx_gpiote_irq_handler+0x1ac>
    7076:	f8d9 317c 	ldr.w	r3, [r9, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    707a:	2b00      	cmp	r3, #0
    707c:	f000 8099 	beq.w	71b2 <nrfx_gpiote_irq_handler+0x16e>
        *p_masks = gpio_regs[i]->LATCH;
    7080:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    7084:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    7088:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    708a:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    708e:	f8d3 2820 	ldr.w	r2, [r3, #2080]	; 0x820
    7092:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
    7094:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    7098:	f04f 0800 	mov.w	r8, #0
            while (latch[i])
    709c:	f10d 0a10 	add.w	sl, sp, #16
    70a0:	ea4f 1348 	mov.w	r3, r8, lsl #5
    70a4:	9300      	str	r3, [sp, #0]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    70a6:	f04f 0b01 	mov.w	fp, #1
    70aa:	e049      	b.n	7140 <nrfx_gpiote_irq_handler+0xfc>
                pin += 32 * i;
    70ac:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    70ae:	4a52      	ldr	r2, [pc, #328]	; (71f8 <nrfx_gpiote_irq_handler+0x1b4>)
                uint32_t pin = NRF_CTZ(latch[i]);
    70b0:	fa94 f4a4 	rbit	r4, r4
    70b4:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
    70b8:	441c      	add	r4, r3
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    70ba:	08e0      	lsrs	r0, r4, #3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    70bc:	f104 0308 	add.w	r3, r4, #8
    70c0:	9403      	str	r4, [sp, #12]
    70c2:	f832 7013 	ldrh.w	r7, [r2, r3, lsl #1]
    p_mask8[byte_idx] &= ~(1 << bit);
    70c6:	f81a 3000 	ldrb.w	r3, [sl, r0]
    bit = BITMASK_RELBIT_GET(bit);
    70ca:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    70ce:	fa0b f202 	lsl.w	r2, fp, r2
    70d2:	ea23 0302 	bic.w	r3, r3, r2
    70d6:	f80a 3000 	strb.w	r3, [sl, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    70da:	a803      	add	r0, sp, #12
    70dc:	f7ff fd26 	bl	6b2c <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    70e0:	9b03      	ldr	r3, [sp, #12]
    70e2:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    70e6:	08b9      	lsrs	r1, r7, #2
    70e8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    70ec:	f3c7 0582 	ubfx	r5, r7, #2, #3
    if (is_level(trigger))
    70f0:	074a      	lsls	r2, r1, #29
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    70f2:	462f      	mov	r7, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    70f4:	f3c3 4301 	ubfx	r3, r3, #16, #2
    if (is_level(trigger))
    70f8:	d52c      	bpl.n	7154 <nrfx_gpiote_irq_handler+0x110>
        call_handler(pin, trigger);
    70fa:	4620      	mov	r0, r4
    70fc:	4639      	mov	r1, r7
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    70fe:	b2dd      	uxtb	r5, r3
    7100:	f7ff fd2c 	bl	6b5c <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    7104:	a803      	add	r0, sp, #12
    7106:	9403      	str	r4, [sp, #12]
    7108:	f7ff fd10 	bl	6b2c <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    710c:	9b03      	ldr	r3, [sp, #12]
    710e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    7112:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
    7116:	f3c3 4301 	ubfx	r3, r3, #16, #2
    711a:	429d      	cmp	r5, r3
    711c:	d107      	bne.n	712e <nrfx_gpiote_irq_handler+0xea>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    711e:	2100      	movs	r1, #0
    7120:	4620      	mov	r0, r4
    7122:	f002 fb31 	bl	9788 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    7126:	4629      	mov	r1, r5
    7128:	4620      	mov	r0, r4
    712a:	f002 fb2d 	bl	9788 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    712e:	a803      	add	r0, sp, #12
    7130:	9403      	str	r4, [sp, #12]
    7132:	f7ff fcfb 	bl	6b2c <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
    7136:	9b03      	ldr	r3, [sp, #12]
    7138:	fa0b f303 	lsl.w	r3, fp, r3
    713c:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
            while (latch[i])
    7140:	f85a 4028 	ldr.w	r4, [sl, r8, lsl #2]
    7144:	2c00      	cmp	r4, #0
    7146:	d1b1      	bne.n	70ac <nrfx_gpiote_irq_handler+0x68>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    7148:	f1b8 0f00 	cmp.w	r8, #0
    714c:	d11d      	bne.n	718a <nrfx_gpiote_irq_handler+0x146>
    714e:	f04f 0801 	mov.w	r8, #1
    7152:	e7a5      	b.n	70a0 <nrfx_gpiote_irq_handler+0x5c>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    7154:	2b02      	cmp	r3, #2
    7156:	d10c      	bne.n	7172 <nrfx_gpiote_irq_handler+0x12e>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    7158:	2103      	movs	r1, #3
    715a:	4620      	mov	r0, r4
    715c:	f002 fb14 	bl	9788 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    7160:	f005 0305 	and.w	r3, r5, #5
    7164:	2b01      	cmp	r3, #1
    7166:	d1e2      	bne.n	712e <nrfx_gpiote_irq_handler+0xea>
            call_handler(pin, trigger);
    7168:	4639      	mov	r1, r7
    716a:	4620      	mov	r0, r4
    716c:	f7ff fcf6 	bl	6b5c <call_handler>
    7170:	e7dd      	b.n	712e <nrfx_gpiote_irq_handler+0xea>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    7172:	2102      	movs	r1, #2
    7174:	4620      	mov	r0, r4
    7176:	9301      	str	r3, [sp, #4]
    7178:	f002 fb06 	bl	9788 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    717c:	2d03      	cmp	r5, #3
    717e:	d0f3      	beq.n	7168 <nrfx_gpiote_irq_handler+0x124>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    7180:	9b01      	ldr	r3, [sp, #4]
    7182:	2b03      	cmp	r3, #3
    7184:	d1d3      	bne.n	712e <nrfx_gpiote_irq_handler+0xea>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    7186:	2d02      	cmp	r5, #2
    7188:	e7ed      	b.n	7166 <nrfx_gpiote_irq_handler+0x122>
        *p_masks = gpio_regs[i]->LATCH;
    718a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    718e:	f8c9 417c 	str.w	r4, [r9, #380]	; 0x17c
    7192:	f8d9 317c 	ldr.w	r3, [r9, #380]	; 0x17c
    7196:	4919      	ldr	r1, [pc, #100]	; (71fc <nrfx_gpiote_irq_handler+0x1b8>)
    7198:	f8d2 3520 	ldr.w	r3, [r2, #1312]	; 0x520
    719c:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    719e:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    71a2:	f8d1 2520 	ldr.w	r2, [r1, #1312]	; 0x520
    71a6:	9205      	str	r2, [sp, #20]
        if (latch[port_idx])
    71a8:	4313      	orrs	r3, r2
        gpio_regs[i]->LATCH = *p_masks;
    71aa:	f8c1 2520 	str.w	r2, [r1, #1312]	; 0x520
    71ae:	f47f af73 	bne.w	7098 <nrfx_gpiote_irq_handler+0x54>
        mask &= ~NRFX_BIT(ch);
    71b2:	2401      	movs	r4, #1
    while (mask)
    71b4:	b916      	cbnz	r6, 71bc <nrfx_gpiote_irq_handler+0x178>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    71b6:	b007      	add	sp, #28
    71b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
    71bc:	fa96 f3a6 	rbit	r3, r6
    71c0:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    71c4:	fa04 f203 	lsl.w	r2, r4, r3
    71c8:	009b      	lsls	r3, r3, #2
    71ca:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    71ce:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    71d2:	ea26 0602 	bic.w	r6, r6, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    71d6:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    71da:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    71de:	f3c0 2005 	ubfx	r0, r0, #8, #6
    71e2:	f3c1 4101 	ubfx	r1, r1, #16, #2
    71e6:	f7ff fcb9 	bl	6b5c <call_handler>
    71ea:	e7e3      	b.n	71b4 <nrfx_gpiote_irq_handler+0x170>
    71ec:	40006100 	.word	0x40006100
    71f0:	40006000 	.word	0x40006000
    71f4:	40006120 	.word	0x40006120
    71f8:	20000044 	.word	0x20000044
    71fc:	50000300 	.word	0x50000300

00007200 <twi_tx_start_transfer>:
    return true;
}

static nrfx_err_t twi_tx_start_transfer(NRF_TWI_Type        * p_twi,
                                        twi_control_block_t * p_cb)
{
    7200:	b513      	push	{r0, r1, r4, lr}
    nrfx_err_t ret_code = NRFX_SUCCESS;
    volatile int32_t hw_timeout;

    hw_timeout = HW_TIMEOUT;
    7202:	4b3b      	ldr	r3, [pc, #236]	; (72f0 <twi_tx_start_transfer+0xf0>)
    7204:	9301      	str	r3, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7206:	2300      	movs	r3, #0
    7208:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
    720c:	f8d0 2104 	ldr.w	r2, [r0, #260]	; 0x104
    7210:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
    7214:	f8d0 2124 	ldr.w	r2, [r0, #292]	; 0x124
    7218:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
    721c:	f8d0 211c 	ldr.w	r2, [r0, #284]	; 0x11c
    7220:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
    7224:	f8d0 2108 	ldr.w	r2, [r0, #264]	; 0x108
}

NRF_STATIC_INLINE void nrf_twi_shorts_set(NRF_TWI_Type * p_reg,
                                          uint32_t       mask)
{
    p_reg->SHORTS = mask;
    7228:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_ERROR);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_TXDSENT);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_RXDREADY);
    nrf_twi_shorts_set(p_twi, 0);

    p_cb->bytes_transferred = 0;
    722c:	634b      	str	r3, [r1, #52]	; 0x34
    p_cb->error             = false;
    722e:	f881 302f 	strb.w	r3, [r1, #47]	; 0x2f
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7232:	2301      	movs	r3, #1
    7234:	6203      	str	r3, [r0, #32]

    // In case TWI is suspended resume its operation.
    nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_RESUME);

    if (p_cb->prev_suspend != TWI_SUSPEND_TX)
    7236:	f891 202d 	ldrb.w	r2, [r1, #45]	; 0x2d
    723a:	429a      	cmp	r2, r3
    723c:	bf18      	it	ne
    723e:	6083      	strne	r3, [r0, #8]
    if (p_cb->bytes_transferred < p_cb->curr_length)
    7240:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    7242:	6a8a      	ldr	r2, [r1, #40]	; 0x28
    7244:	4293      	cmp	r3, r2
{
    7246:	4604      	mov	r4, r0
    if (p_cb->bytes_transferred < p_cb->curr_length)
    7248:	d20e      	bcs.n	7268 <twi_tx_start_transfer+0x68>
        nrf_twi_txd_set(p_twi, p_cb->p_curr_buf[p_cb->bytes_transferred]);
    724a:	6a4a      	ldr	r2, [r1, #36]	; 0x24
    p_reg->TXD = data;
    724c:	5cd3      	ldrb	r3, [r2, r3]
    724e:	f8c0 351c 	str.w	r3, [r0, #1308]	; 0x51c
        nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_STARTTX);
    }

    (void)twi_send_byte(p_twi, p_cb);

    if (p_cb->handler)
    7252:	680b      	ldr	r3, [r1, #0]
    7254:	b303      	cbz	r3, 7298 <twi_tx_start_transfer+0x98>
    {
        p_cb->int_mask = NRF_TWI_INT_STOPPED_MASK   |
    7256:	f240 2386 	movw	r3, #646	; 0x286
    725a:	608b      	str	r3, [r1, #8]
                         NRF_TWI_INT_ERROR_MASK     |
                         NRF_TWI_INT_TXDSENT_MASK   |
                         NRF_TWI_INT_RXDREADY_MASK;

        nrf_twi_int_enable(p_twi, p_cb->int_mask);
    725c:	688b      	ldr	r3, [r1, #8]
    nrfx_err_t ret_code = NRFX_SUCCESS;
    725e:	4825      	ldr	r0, [pc, #148]	; (72f4 <twi_tx_start_transfer+0xf4>)
    p_reg->INTENSET = mask;
    7260:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
            ret_code = NRFX_ERROR_INTERNAL;
        }

    }
    return ret_code;
}
    7264:	b002      	add	sp, #8
    7266:	bd10      	pop	{r4, pc}
        if (p_cb->curr_tx_no_stop)
    7268:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
    726c:	b113      	cbz	r3, 7274 <twi_tx_start_transfer+0x74>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    726e:	2301      	movs	r3, #1
    7270:	61c3      	str	r3, [r0, #28]
            return false;
    7272:	e7ee      	b.n	7252 <twi_tx_start_transfer+0x52>
        else if(TWI_FLAG_SUSPEND(p_cb->flags))
    7274:	6a0b      	ldr	r3, [r1, #32]
    7276:	f013 0f40 	tst.w	r3, #64	; 0x40
    727a:	f04f 0301 	mov.w	r3, #1
    727e:	bf16      	itet	ne
    7280:	61c3      	strne	r3, [r0, #28]
    7282:	6143      	streq	r3, [r0, #20]
            p_cb->prev_suspend = TWI_SUSPEND_TX;
    7284:	f881 302d 	strbne.w	r3, [r1, #45]	; 0x2d
}
    7288:	e7e3      	b.n	7252 <twi_tx_start_transfer+0x52>
               twi_transfer(p_twi, p_cb))
    728a:	4620      	mov	r0, r4
    728c:	f002 fa8b 	bl	97a6 <twi_transfer>
        while ((hw_timeout > 0) &&
    7290:	b128      	cbz	r0, 729e <twi_tx_start_transfer+0x9e>
            hw_timeout--;
    7292:	9b01      	ldr	r3, [sp, #4]
    7294:	3b01      	subs	r3, #1
    7296:	9301      	str	r3, [sp, #4]
        while ((hw_timeout > 0) &&
    7298:	9b01      	ldr	r3, [sp, #4]
    729a:	2b00      	cmp	r3, #0
    729c:	dcf5      	bgt.n	728a <twi_tx_start_transfer+0x8a>
        if (p_cb->error)
    729e:	f891 302f 	ldrb.w	r3, [r1, #47]	; 0x2f
    72a2:	b95b      	cbnz	r3, 72bc <twi_tx_start_transfer+0xbc>
    nrfx_err_t ret_code = NRFX_SUCCESS;
    72a4:	4813      	ldr	r0, [pc, #76]	; (72f4 <twi_tx_start_transfer+0xf4>)
        if (hw_timeout <= 0)
    72a6:	9b01      	ldr	r3, [sp, #4]
    72a8:	2b00      	cmp	r3, #0
    72aa:	dcdb      	bgt.n	7264 <twi_tx_start_transfer+0x64>
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
    72ac:	2300      	movs	r3, #0
    72ae:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
    72b2:	2305      	movs	r3, #5
            ret_code = NRFX_ERROR_INTERNAL;
    72b4:	4810      	ldr	r0, [pc, #64]	; (72f8 <twi_tx_start_transfer+0xf8>)
    72b6:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    return ret_code;
    72ba:	e7d3      	b.n	7264 <twi_tx_start_transfer+0x64>
    uint32_t error_source = p_reg->ERRORSRC;
    72bc:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
    72c0:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
            if (errorsrc)
    72c4:	b18b      	cbz	r3, 72ea <twi_tx_start_transfer+0xea>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
    72c6:	4a0d      	ldr	r2, [pc, #52]	; (72fc <twi_tx_start_transfer+0xfc>)
    72c8:	480b      	ldr	r0, [pc, #44]	; (72f8 <twi_tx_start_transfer+0xf8>)
    72ca:	f013 0f01 	tst.w	r3, #1
    72ce:	bf18      	it	ne
    72d0:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    72d2:	f013 0f02 	tst.w	r3, #2
    72d6:	f102 0201 	add.w	r2, r2, #1
    72da:	bf18      	it	ne
    72dc:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    72de:	f013 0f04 	tst.w	r3, #4
    72e2:	4b07      	ldr	r3, [pc, #28]	; (7300 <twi_tx_start_transfer+0x100>)
    72e4:	bf18      	it	ne
    72e6:	4618      	movne	r0, r3
    72e8:	e7dd      	b.n	72a6 <twi_tx_start_transfer+0xa6>
                ret_code = NRFX_ERROR_INTERNAL;
    72ea:	4803      	ldr	r0, [pc, #12]	; (72f8 <twi_tx_start_transfer+0xf8>)
    72ec:	e7db      	b.n	72a6 <twi_tx_start_transfer+0xa6>
    72ee:	bf00      	nop
    72f0:	000186a0 	.word	0x000186a0
    72f4:	0bad0000 	.word	0x0bad0000
    72f8:	0bad0001 	.word	0x0bad0001
    72fc:	0bae0000 	.word	0x0bae0000
    7300:	0bae0002 	.word	0x0bae0002

00007304 <twi_rx_start_transfer>:

static nrfx_err_t twi_rx_start_transfer(NRF_TWI_Type        * p_twi,
                                        twi_control_block_t * p_cb)
{
    7304:	b513      	push	{r0, r1, r4, lr}
    nrfx_err_t ret_code = NRFX_SUCCESS;
    volatile int32_t hw_timeout;

    hw_timeout = HW_TIMEOUT;
    7306:	4b33      	ldr	r3, [pc, #204]	; (73d4 <twi_rx_start_transfer+0xd0>)
    7308:	9301      	str	r3, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    730a:	2300      	movs	r3, #0
    730c:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
    7310:	f8d0 2104 	ldr.w	r2, [r0, #260]	; 0x104
    7314:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
    7318:	f8d0 2124 	ldr.w	r2, [r0, #292]	; 0x124
    731c:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
    7320:	f8d0 211c 	ldr.w	r2, [r0, #284]	; 0x11c
    7324:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
    7328:	f8d0 2108 	ldr.w	r2, [r0, #264]	; 0x108
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_STOPPED);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_ERROR);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_TXDSENT);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_RXDREADY);

    p_cb->bytes_transferred = 0;
    732c:	634b      	str	r3, [r1, #52]	; 0x34
    p_cb->error             = false;
    732e:	f881 302f 	strb.w	r3, [r1, #47]	; 0x2f

    if ((p_cb->curr_length == 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    7332:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    7334:	2b01      	cmp	r3, #1
{
    7336:	4604      	mov	r4, r0
    if ((p_cb->curr_length == 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    7338:	d117      	bne.n	736a <twi_rx_start_transfer+0x66>
    733a:	6a0b      	ldr	r3, [r1, #32]
    733c:	065b      	lsls	r3, r3, #25
    733e:	d414      	bmi.n	736a <twi_rx_start_transfer+0x66>
    p_reg->SHORTS = mask;
    7340:	2302      	movs	r3, #2
    7342:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7346:	2301      	movs	r3, #1
    7348:	6223      	str	r3, [r4, #32]
        nrf_twi_shorts_set(p_twi, NRF_TWI_SHORT_BB_SUSPEND_MASK);
    }
    // In case TWI is suspended resume its operation.
    nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_RESUME);

    if (p_cb->prev_suspend != TWI_SUSPEND_RX)
    734a:	f891 202d 	ldrb.w	r2, [r1, #45]	; 0x2d
    734e:	2a02      	cmp	r2, #2
    7350:	bf18      	it	ne
    7352:	6023      	strne	r3, [r4, #0]
    {
        nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_STARTRX);
    }

    if (p_cb->handler)
    7354:	680b      	ldr	r3, [r1, #0]
    7356:	b18b      	cbz	r3, 737c <twi_rx_start_transfer+0x78>
    {
        p_cb->int_mask = NRF_TWI_INT_STOPPED_MASK   |
    7358:	f240 2386 	movw	r3, #646	; 0x286
    735c:	608b      	str	r3, [r1, #8]
                        NRF_TWI_INT_ERROR_MASK     |
                        NRF_TWI_INT_TXDSENT_MASK   |
                        NRF_TWI_INT_RXDREADY_MASK;
        nrf_twi_int_enable(p_twi, p_cb->int_mask);
    735e:	688b      	ldr	r3, [r1, #8]
    nrfx_err_t ret_code = NRFX_SUCCESS;
    7360:	481d      	ldr	r0, [pc, #116]	; (73d8 <twi_rx_start_transfer+0xd4>)
    p_reg->INTENSET = mask;
    7362:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
            nrf_twi_enable(p_twi);
            ret_code = NRFX_ERROR_INTERNAL;
        }
    }
    return ret_code;
}
    7366:	b002      	add	sp, #8
    7368:	bd10      	pop	{r4, pc}
    p_reg->SHORTS = mask;
    736a:	2301      	movs	r3, #1
    736c:	e7e9      	b.n	7342 <twi_rx_start_transfer+0x3e>
               twi_transfer(p_twi, p_cb))
    736e:	4620      	mov	r0, r4
    7370:	f002 fa19 	bl	97a6 <twi_transfer>
        while ((hw_timeout > 0) &&
    7374:	b128      	cbz	r0, 7382 <twi_rx_start_transfer+0x7e>
               hw_timeout--;
    7376:	9b01      	ldr	r3, [sp, #4]
    7378:	3b01      	subs	r3, #1
    737a:	9301      	str	r3, [sp, #4]
        while ((hw_timeout > 0) &&
    737c:	9b01      	ldr	r3, [sp, #4]
    737e:	2b00      	cmp	r3, #0
    7380:	dcf5      	bgt.n	736e <twi_rx_start_transfer+0x6a>
        if (p_cb->error)
    7382:	f891 302f 	ldrb.w	r3, [r1, #47]	; 0x2f
    7386:	b95b      	cbnz	r3, 73a0 <twi_rx_start_transfer+0x9c>
    nrfx_err_t ret_code = NRFX_SUCCESS;
    7388:	4813      	ldr	r0, [pc, #76]	; (73d8 <twi_rx_start_transfer+0xd4>)
        if (hw_timeout <= 0)
    738a:	9b01      	ldr	r3, [sp, #4]
    738c:	2b00      	cmp	r3, #0
    738e:	dcea      	bgt.n	7366 <twi_rx_start_transfer+0x62>
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
    7390:	2300      	movs	r3, #0
    7392:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
    7396:	2305      	movs	r3, #5
            ret_code = NRFX_ERROR_INTERNAL;
    7398:	4810      	ldr	r0, [pc, #64]	; (73dc <twi_rx_start_transfer+0xd8>)
    739a:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    return ret_code;
    739e:	e7e2      	b.n	7366 <twi_rx_start_transfer+0x62>
    uint32_t error_source = p_reg->ERRORSRC;
    73a0:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
    73a4:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
            if (errorsrc)
    73a8:	b18b      	cbz	r3, 73ce <twi_rx_start_transfer+0xca>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
    73aa:	4a0d      	ldr	r2, [pc, #52]	; (73e0 <twi_rx_start_transfer+0xdc>)
    73ac:	480b      	ldr	r0, [pc, #44]	; (73dc <twi_rx_start_transfer+0xd8>)
    73ae:	f013 0f01 	tst.w	r3, #1
    73b2:	bf18      	it	ne
    73b4:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    73b6:	f013 0f02 	tst.w	r3, #2
    73ba:	f102 0201 	add.w	r2, r2, #1
    73be:	bf18      	it	ne
    73c0:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    73c2:	f013 0f04 	tst.w	r3, #4
    73c6:	4b07      	ldr	r3, [pc, #28]	; (73e4 <twi_rx_start_transfer+0xe0>)
    73c8:	bf18      	it	ne
    73ca:	4618      	movne	r0, r3
    73cc:	e7dd      	b.n	738a <twi_rx_start_transfer+0x86>
                ret_code = NRFX_ERROR_INTERNAL;
    73ce:	4803      	ldr	r0, [pc, #12]	; (73dc <twi_rx_start_transfer+0xd8>)
    73d0:	e7db      	b.n	738a <twi_rx_start_transfer+0x86>
    73d2:	bf00      	nop
    73d4:	000186a0 	.word	0x000186a0
    73d8:	0bad0000 	.word	0x0bad0000
    73dc:	0bad0001 	.word	0x0bad0001
    73e0:	0bae0000 	.word	0x0bae0000
    73e4:	0bae0002 	.word	0x0bae0002

000073e8 <nrfx_twi_init>:
{
    73e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    twi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    73ec:	7907      	ldrb	r7, [r0, #4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    73ee:	4d2b      	ldr	r5, [pc, #172]	; (749c <nrfx_twi_init+0xb4>)
    73f0:	f04f 0e3c 	mov.w	lr, #60	; 0x3c
    73f4:	fb0e fe07 	mul.w	lr, lr, r7
    73f8:	eb05 040e 	add.w	r4, r5, lr
    73fc:	f894 602e 	ldrb.w	r6, [r4, #46]	; 0x2e
    7400:	2e00      	cmp	r6, #0
    7402:	d149      	bne.n	7498 <nrfx_twi_init+0xb0>
    NRF_TWI_Type * p_twi = p_instance->p_twi;
    7404:	f8d0 c000 	ldr.w	ip, [r0]
    p_cb->handler         = event_handler;
    7408:	f845 200e 	str.w	r2, [r5, lr]
    p_cb->int_mask        = 0;
    740c:	60a6      	str	r6, [r4, #8]
    p_cb->p_context       = p_context;
    740e:	6063      	str	r3, [r4, #4]
    p_cb->prev_suspend    = TWI_NO_SUSPEND;
    7410:	f884 602d 	strb.w	r6, [r4, #45]	; 0x2d
    p_cb->repeated        = false;
    7414:	f884 6031 	strb.w	r6, [r4, #49]	; 0x31
    p_cb->busy            = false;
    7418:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
    741c:	7b4b      	ldrb	r3, [r1, #13]
    741e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    p_cb->skip_gpio_cfg   = p_config->skip_gpio_cfg;
    7422:	7b8b      	ldrb	r3, [r1, #14]
    7424:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    if (!p_config->skip_gpio_cfg)
    7428:	b9e3      	cbnz	r3, 7464 <nrfx_twi_init+0x7c>
        TWI_PIN_INIT(p_config->scl);
    742a:	680c      	ldr	r4, [r1, #0]
        case 0: return NRF_P0;
    742c:	4b1c      	ldr	r3, [pc, #112]	; (74a0 <nrfx_twi_init+0xb8>)
    *p_pin = pin_number & 0x1F;
    742e:	f004 061f 	and.w	r6, r4, #31
    return pin_number >> 5;
    7432:	0964      	lsrs	r4, r4, #5
        case 0: return NRF_P0;
    7434:	2c01      	cmp	r4, #1
    7436:	bf08      	it	eq
    7438:	4698      	moveq	r8, r3
    reg->PIN_CNF[pin_number] = cnf;
    743a:	f506 74e0 	add.w	r4, r6, #448	; 0x1c0
        case 0: return NRF_P0;
    743e:	bf18      	it	ne
    7440:	f04f 48a0 	movne.w	r8, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    7444:	f240 6e0c 	movw	lr, #1548	; 0x60c
    7448:	f848 e024 	str.w	lr, [r8, r4, lsl #2]
        TWI_PIN_INIT(p_config->sda);
    744c:	684c      	ldr	r4, [r1, #4]
    *p_pin = pin_number & 0x1F;
    744e:	f004 061f 	and.w	r6, r4, #31
    return pin_number >> 5;
    7452:	0964      	lsrs	r4, r4, #5
        case 0: return NRF_P0;
    7454:	2c01      	cmp	r4, #1
    7456:	bf18      	it	ne
    7458:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    745c:	f506 74e0 	add.w	r4, r6, #448	; 0x1c0
    7460:	f843 e024 	str.w	lr, [r3, r4, lsl #2]
    if (!p_config->skip_psel_cfg)
    7464:	7bcb      	ldrb	r3, [r1, #15]
    7466:	b92b      	cbnz	r3, 7474 <nrfx_twi_init+0x8c>
        nrf_twi_pins_set(p_twi, p_config->scl, p_config->sda);
    7468:	e9d1 4300 	ldrd	r4, r3, [r1]
    p_reg->PSEL.SCL = scl_pin;
    746c:	f8cc 4508 	str.w	r4, [ip, #1288]	; 0x508
    p_reg->PSEL.SDA = sda_pin;
    7470:	f8cc 350c 	str.w	r3, [ip, #1292]	; 0x50c
        (nrf_twi_frequency_t)p_config->frequency);
    7474:	688b      	ldr	r3, [r1, #8]
    p_reg->FREQUENCY = frequency;
    7476:	f8cc 3524 	str.w	r3, [ip, #1316]	; 0x524
    if (p_cb->handler)
    747a:	b122      	cbz	r2, 7486 <nrfx_twi_init+0x9e>
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
    747c:	6800      	ldr	r0, [r0, #0]
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_twi));
    747e:	f340 3007 	sbfx	r0, r0, #12, #8
    7482:	f7fd fd65 	bl	4f50 <arch_irq_enable>
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    7486:	233c      	movs	r3, #60	; 0x3c
    7488:	fb03 5507 	mla	r5, r3, r7, r5
    return err_code;
    748c:	4805      	ldr	r0, [pc, #20]	; (74a4 <nrfx_twi_init+0xbc>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    748e:	2301      	movs	r3, #1
    7490:	f885 302e 	strb.w	r3, [r5, #46]	; 0x2e
}
    7494:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return err_code;
    7498:	4803      	ldr	r0, [pc, #12]	; (74a8 <nrfx_twi_init+0xc0>)
    749a:	e7fb      	b.n	7494 <nrfx_twi_init+0xac>
    749c:	200021fc 	.word	0x200021fc
    74a0:	50000300 	.word	0x50000300
    74a4:	0bad0000 	.word	0x0bad0000
    74a8:	0bad0005 	.word	0x0bad0005

000074ac <nrfx_twi_enable>:
    NRF_TWI_Type * p_twi = p_instance->p_twi;
    74ac:	6803      	ldr	r3, [r0, #0]
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    74ae:	7902      	ldrb	r2, [r0, #4]
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
    74b0:	2105      	movs	r1, #5
    74b2:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
    74b6:	4b04      	ldr	r3, [pc, #16]	; (74c8 <nrfx_twi_enable+0x1c>)
    74b8:	213c      	movs	r1, #60	; 0x3c
    74ba:	fb01 3302 	mla	r3, r1, r2, r3
    74be:	2202      	movs	r2, #2
    74c0:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
}
    74c4:	4770      	bx	lr
    74c6:	bf00      	nop
    74c8:	200021fc 	.word	0x200021fc

000074cc <nrfx_twi_disable>:
    NRF_TWI_Type * p_twi = p_instance->p_twi;
    74cc:	6803      	ldr	r3, [r0, #0]
    p_reg->INTENCLR = mask;
    74ce:	4a0b      	ldr	r2, [pc, #44]	; (74fc <nrfx_twi_disable+0x30>)
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    74d0:	7901      	ldrb	r1, [r0, #4]
    74d2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    p_reg->SHORTS &= ~(mask);
    74d6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    74da:	f022 0203 	bic.w	r2, r2, #3
    74de:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
    74e2:	2200      	movs	r2, #0
    74e4:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    74e8:	4b05      	ldr	r3, [pc, #20]	; (7500 <nrfx_twi_disable+0x34>)
    74ea:	203c      	movs	r0, #60	; 0x3c
    74ec:	fb00 3301 	mla	r3, r0, r1, r3
    74f0:	2101      	movs	r1, #1
    74f2:	f883 102e 	strb.w	r1, [r3, #46]	; 0x2e
    p_cb->busy = false;
    74f6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
}
    74fa:	4770      	bx	lr
    74fc:	00044286 	.word	0x00044286
    7500:	200021fc 	.word	0x200021fc

00007504 <nrfx_twi_xfer>:
}

nrfx_err_t nrfx_twi_xfer(nrfx_twi_t const *           p_instance,
                         nrfx_twi_xfer_desc_t const * p_xfer_desc,
                         uint32_t                     flags)
{
    7504:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
    7508:	4f31      	ldr	r7, [pc, #196]	; (75d0 <nrfx_twi_xfer+0xcc>)

    nrfx_err_t err_code = NRFX_SUCCESS;
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    750a:	7904      	ldrb	r4, [r0, #4]
                           p_xfer_desc->primary_length * sizeof(p_xfer_desc->p_primary_buf[0]));
    NRFX_LOG_DEBUG("Secondary buffer data:");
    NRFX_LOG_HEXDUMP_DEBUG(p_xfer_desc->p_secondary_buf,
                           p_xfer_desc->secondary_length * sizeof(p_xfer_desc->p_secondary_buf[0]));

    err_code = twi_xfer((NRF_TWI_Type  *)p_instance->p_twi, p_cb, p_xfer_desc, flags);
    750c:	f8d0 9000 	ldr.w	r9, [r0]
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
    7510:	233c      	movs	r3, #60	; 0x3c
    7512:	fb03 7304 	mla	r3, r3, r4, r7
{
    7516:	460d      	mov	r5, r1
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
    7518:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
    751c:	2b01      	cmp	r3, #1
{
    751e:	4694      	mov	ip, r2
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
    7520:	d104      	bne.n	752c <nrfx_twi_xfer+0x28>
    7522:	780b      	ldrb	r3, [r1, #0]
    7524:	2b01      	cmp	r3, #1
    7526:	d106      	bne.n	7536 <nrfx_twi_xfer+0x32>
        return NRFX_ERROR_INVALID_STATE;
    7528:	482a      	ldr	r0, [pc, #168]	; (75d4 <nrfx_twi_xfer+0xd0>)
    NRFX_LOG_WARNING("Function: %s, error code: %s.",
                     __func__,
                     NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
    752a:	e011      	b.n	7550 <nrfx_twi_xfer+0x4c>
    else if ((p_cb->prev_suspend == TWI_SUSPEND_RX) && (p_xfer_desc->type != NRFX_TWI_XFER_RX))
    752c:	2b02      	cmp	r3, #2
    752e:	d102      	bne.n	7536 <nrfx_twi_xfer+0x32>
    7530:	780b      	ldrb	r3, [r1, #0]
    7532:	2b01      	cmp	r3, #1
    7534:	d1f8      	bne.n	7528 <nrfx_twi_xfer+0x24>
    if (p_cb->busy)
    7536:	263c      	movs	r6, #60	; 0x3c
    p_reg->INTENCLR = mask;
    7538:	4b27      	ldr	r3, [pc, #156]	; (75d8 <nrfx_twi_xfer+0xd4>)
    753a:	f8c9 3308 	str.w	r3, [r9, #776]	; 0x308
    753e:	fb06 7604 	mla	r6, r6, r4, r7
    7542:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
    7546:	b12b      	cbz	r3, 7554 <nrfx_twi_xfer+0x50>
        nrf_twi_int_enable(p_twi, p_cb->int_mask);
    7548:	68b3      	ldr	r3, [r6, #8]
        return err_code;
    754a:	4824      	ldr	r0, [pc, #144]	; (75dc <nrfx_twi_xfer+0xd8>)
    p_reg->INTENSET = mask;
    754c:	f8c9 3304 	str.w	r3, [r9, #772]	; 0x304
}
    7550:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        p_cb->busy = (TWI_FLAG_NO_HANDLER_IN_USE(flags)) ? false : true;
    7554:	f08c 0304 	eor.w	r3, ip, #4
    7558:	f3c3 0380 	ubfx	r3, r3, #2, #1
    755c:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
    p_cb->flags       = flags;
    7560:	f8c6 c020 	str.w	ip, [r6, #32]
    p_cb->xfer_desc   = *p_xfer_desc;
    7564:	46a8      	mov	r8, r5
    7566:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
    756a:	f106 0e0c 	add.w	lr, r6, #12
    756e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    7572:	f8d8 3000 	ldr.w	r3, [r8]
    7576:	f8ce 3000 	str.w	r3, [lr]
    p_cb->curr_length = p_xfer_desc->primary_length;
    757a:	686b      	ldr	r3, [r5, #4]
    757c:	62b3      	str	r3, [r6, #40]	; 0x28
    p_cb->p_curr_buf  = p_xfer_desc->p_primary_buf;
    757e:	68eb      	ldr	r3, [r5, #12]
    7580:	6273      	str	r3, [r6, #36]	; 0x24
    p_reg->ADDRESS = address;
    7582:	786b      	ldrb	r3, [r5, #1]
    7584:	f8c9 3588 	str.w	r3, [r9, #1416]	; 0x588
    if (p_xfer_desc->type != NRFX_TWI_XFER_RX)
    7588:	782b      	ldrb	r3, [r5, #0]
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    758a:	ebc4 1a04 	rsb	sl, r4, r4, lsl #4
    if (p_xfer_desc->type != NRFX_TWI_XFER_RX)
    758e:	2b01      	cmp	r3, #1
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    7590:	eb07 0a8a 	add.w	sl, r7, sl, lsl #2
    if (p_xfer_desc->type != NRFX_TWI_XFER_RX)
    7594:	d017      	beq.n	75c6 <nrfx_twi_xfer+0xc2>
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
    7596:	b99b      	cbnz	r3, 75c0 <nrfx_twi_xfer+0xbc>
    7598:	f3cc 1c40 	ubfx	ip, ip, #5, #1
        p_cb->curr_tx_no_stop = ((p_xfer_desc->type == NRFX_TWI_XFER_TX) &&
    759c:	233c      	movs	r3, #60	; 0x3c
    759e:	fb03 7304 	mla	r3, r3, r4, r7
        err_code = twi_tx_start_transfer(p_twi, p_cb);
    75a2:	4651      	mov	r1, sl
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
    75a4:	f883 c02c 	strb.w	ip, [r3, #44]	; 0x2c
        err_code = twi_tx_start_transfer(p_twi, p_cb);
    75a8:	4648      	mov	r0, r9
    75aa:	f7ff fe29 	bl	7200 <twi_tx_start_transfer>
    if (p_cb->handler == NULL)
    75ae:	233c      	movs	r3, #60	; 0x3c
    75b0:	435c      	muls	r4, r3
    75b2:	193a      	adds	r2, r7, r4
    75b4:	593b      	ldr	r3, [r7, r4]
    75b6:	2b00      	cmp	r3, #0
    75b8:	d1ca      	bne.n	7550 <nrfx_twi_xfer+0x4c>
        p_cb->busy = false;
    75ba:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
    75be:	e7c7      	b.n	7550 <nrfx_twi_xfer+0x4c>
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
    75c0:	f04f 0c01 	mov.w	ip, #1
    75c4:	e7ea      	b.n	759c <nrfx_twi_xfer+0x98>
        err_code = twi_rx_start_transfer(p_twi, p_cb);
    75c6:	4651      	mov	r1, sl
    75c8:	4648      	mov	r0, r9
    75ca:	f7ff fe9b 	bl	7304 <twi_rx_start_transfer>
    75ce:	e7ee      	b.n	75ae <nrfx_twi_xfer+0xaa>
    75d0:	200021fc 	.word	0x200021fc
    75d4:	0bad0005 	.word	0x0bad0005
    75d8:	00044286 	.word	0x00044286
    75dc:	0bad000b 	.word	0x0bad000b

000075e0 <nrfx_twi_0_irq_handler>:

}

#if NRFX_CHECK(NRFX_TWI0_ENABLED)
void nrfx_twi_0_irq_handler(void)
{
    75e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (twi_transfer(p_twi, p_cb))
    75e2:	4c32      	ldr	r4, [pc, #200]	; (76ac <nrfx_twi_0_irq_handler+0xcc>)
    75e4:	4832      	ldr	r0, [pc, #200]	; (76b0 <nrfx_twi_0_irq_handler+0xd0>)
{
    75e6:	b087      	sub	sp, #28
    if (twi_transfer(p_twi, p_cb))
    75e8:	4621      	mov	r1, r4
    75ea:	f002 f8dc 	bl	97a6 <twi_transfer>
    75ee:	2800      	cmp	r0, #0
    75f0:	d159      	bne.n	76a6 <nrfx_twi_0_irq_handler+0xc6>
    if (!p_cb->error &&
    75f2:	f894 702f 	ldrb.w	r7, [r4, #47]	; 0x2f
    75f6:	b9ff      	cbnz	r7, 7638 <nrfx_twi_0_irq_handler+0x58>
        ((p_cb->xfer_desc.type == NRFX_TWI_XFER_TXRX) ||
    75f8:	7b22      	ldrb	r2, [r4, #12]
    if (!p_cb->error &&
    75fa:	1e93      	subs	r3, r2, #2
    75fc:	2b01      	cmp	r3, #1
    75fe:	d81b      	bhi.n	7638 <nrfx_twi_0_irq_handler+0x58>
         (p_cb->xfer_desc.type == NRFX_TWI_XFER_TXTX)) &&
    7600:	6a60      	ldr	r0, [r4, #36]	; 0x24
    7602:	69a3      	ldr	r3, [r4, #24]
    7604:	4298      	cmp	r0, r3
    7606:	d117      	bne.n	7638 <nrfx_twi_0_irq_handler+0x58>
        p_cb->p_curr_buf      = p_cb->xfer_desc.p_secondary_buf;
    7608:	69e3      	ldr	r3, [r4, #28]
    760a:	6263      	str	r3, [r4, #36]	; 0x24
        p_cb->curr_length     = p_cb->xfer_desc.secondary_length;
    760c:	6963      	ldr	r3, [r4, #20]
    760e:	62a3      	str	r3, [r4, #40]	; 0x28
        p_cb->curr_tx_no_stop = (p_cb->flags & NRFX_TWI_FLAG_TX_NO_STOP);
    7610:	6a23      	ldr	r3, [r4, #32]
            (void)twi_tx_start_transfer(p_twi, p_cb);
    7612:	4827      	ldr	r0, [pc, #156]	; (76b0 <nrfx_twi_0_irq_handler+0xd0>)
        p_cb->prev_suspend    = TWI_NO_SUSPEND;
    7614:	f884 702d 	strb.w	r7, [r4, #45]	; 0x2d
        p_cb->curr_tx_no_stop = (p_cb->flags & NRFX_TWI_FLAG_TX_NO_STOP);
    7618:	f3c3 1340 	ubfx	r3, r3, #5, #1
        if (p_cb->xfer_desc.type == NRFX_TWI_XFER_TXTX)
    761c:	2a03      	cmp	r2, #3
        p_cb->curr_tx_no_stop = (p_cb->flags & NRFX_TWI_FLAG_TX_NO_STOP);
    761e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
        if (p_cb->xfer_desc.type == NRFX_TWI_XFER_TXTX)
    7622:	d104      	bne.n	762e <nrfx_twi_0_irq_handler+0x4e>
    twi_irq_handler(NRF_TWI0, &m_cb[NRFX_TWI0_INST_IDX]);
}
    7624:	b007      	add	sp, #28
    7626:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            (void)twi_tx_start_transfer(p_twi, p_cb);
    762a:	f7ff bde9 	b.w	7200 <twi_tx_start_transfer>
}
    762e:	b007      	add	sp, #28
    7630:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            (void)twi_rx_start_transfer(p_twi, p_cb);
    7634:	f7ff be66 	b.w	7304 <twi_rx_start_transfer>
        event.xfer_desc = p_cb->xfer_desc;
    7638:	4e1e      	ldr	r6, [pc, #120]	; (76b4 <nrfx_twi_0_irq_handler+0xd4>)
    763a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    763c:	ad01      	add	r5, sp, #4
    763e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    7640:	6833      	ldr	r3, [r6, #0]
    7642:	602b      	str	r3, [r5, #0]
        if (p_cb->error)
    7644:	b347      	cbz	r7, 7698 <nrfx_twi_0_irq_handler+0xb8>
    uint32_t error_source = p_reg->ERRORSRC;
    7646:	4a1a      	ldr	r2, [pc, #104]	; (76b0 <nrfx_twi_0_irq_handler+0xd0>)
    7648:	f8d2 34c4 	ldr.w	r3, [r2, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
    764c:	f8c2 34c4 	str.w	r3, [r2, #1220]	; 0x4c4
            if (errorsrc & NRF_TWI_ERROR_ADDRESS_NACK)
    7650:	f013 0102 	ands.w	r1, r3, #2
    7654:	d006      	beq.n	7664 <nrfx_twi_0_irq_handler+0x84>
                event.type = NRFX_TWI_EVT_ADDRESS_NACK;
    7656:	2301      	movs	r3, #1
    7658:	f88d 3000 	strb.w	r3, [sp]
        p_cb->busy = false;
    765c:	2300      	movs	r3, #0
    765e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
        if (!(TWI_FLAG_NO_HANDLER_IN_USE(p_cb->flags)) || p_cb->error)
    7662:	e007      	b.n	7674 <nrfx_twi_0_irq_handler+0x94>
            else if (errorsrc & NRF_TWI_ERROR_DATA_NACK)
    7664:	f013 0204 	ands.w	r2, r3, #4
    7668:	d009      	beq.n	767e <nrfx_twi_0_irq_handler+0x9e>
                event.type = NRFX_TWI_EVT_DATA_NACK;
    766a:	2302      	movs	r3, #2
    766c:	f88d 3000 	strb.w	r3, [sp]
        p_cb->busy = false;
    7670:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
            p_cb->handler(&event, p_cb->p_context);
    7674:	e9d4 3100 	ldrd	r3, r1, [r4]
    7678:	4668      	mov	r0, sp
    767a:	4798      	blx	r3
}
    767c:	e013      	b.n	76a6 <nrfx_twi_0_irq_handler+0xc6>
            else if (errorsrc & NRF_TWI_ERROR_OVERRUN)
    767e:	f013 0301 	ands.w	r3, r3, #1
    7682:	d005      	beq.n	7690 <nrfx_twi_0_irq_handler+0xb0>
                event.type = NRFX_TWI_EVT_OVERRUN;
    7684:	2303      	movs	r3, #3
    7686:	f88d 3000 	strb.w	r3, [sp]
        p_cb->busy = false;
    768a:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
        if (!(TWI_FLAG_NO_HANDLER_IN_USE(p_cb->flags)) || p_cb->error)
    768e:	e7f1      	b.n	7674 <nrfx_twi_0_irq_handler+0x94>
                event.type = NRFX_TWI_EVT_BUS_ERROR;
    7690:	2204      	movs	r2, #4
    7692:	f88d 2000 	strb.w	r2, [sp]
    7696:	e7e2      	b.n	765e <nrfx_twi_0_irq_handler+0x7e>
        if (!(TWI_FLAG_NO_HANDLER_IN_USE(p_cb->flags)) || p_cb->error)
    7698:	6a23      	ldr	r3, [r4, #32]
            event.type = NRFX_TWI_EVT_DONE;
    769a:	f88d 7000 	strb.w	r7, [sp]
        if (!(TWI_FLAG_NO_HANDLER_IN_USE(p_cb->flags)) || p_cb->error)
    769e:	075b      	lsls	r3, r3, #29
        p_cb->busy = false;
    76a0:	f884 7030 	strb.w	r7, [r4, #48]	; 0x30
        if (!(TWI_FLAG_NO_HANDLER_IN_USE(p_cb->flags)) || p_cb->error)
    76a4:	d5e6      	bpl.n	7674 <nrfx_twi_0_irq_handler+0x94>
}
    76a6:	b007      	add	sp, #28
    76a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    76aa:	bf00      	nop
    76ac:	200021fc 	.word	0x200021fc
    76b0:	40003000 	.word	0x40003000
    76b4:	20002208 	.word	0x20002208

000076b8 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
    76b8:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
    76ba:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    76be:	095b      	lsrs	r3, r3, #5
        case 0: return NRF_P0;
    76c0:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
    76c2:	6002      	str	r2, [r0, #0]
}
    76c4:	4802      	ldr	r0, [pc, #8]	; (76d0 <nrf_gpio_pin_port_decode+0x18>)
    76c6:	bf18      	it	ne
    76c8:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
    76cc:	4770      	bx	lr
    76ce:	bf00      	nop
    76d0:	50000300 	.word	0x50000300

000076d4 <nrfx_twi_twim_bus_recover>:
                                                  NRF_GPIO_PIN_PULLUP,        \
                                                  NRF_GPIO_PIN_S0D1,          \
                                                  NRF_GPIO_PIN_NOSENSE)

nrfx_err_t nrfx_twi_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
    76d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    76d6:	4606      	mov	r6, r0
    nrf_gpio_pin_set(scl_pin);
    76d8:	f002 f8fd 	bl	98d6 <nrf_gpio_pin_set>
    nrf_gpio_pin_set(sda_pin);
    76dc:	4608      	mov	r0, r1
    76de:	f002 f8fa 	bl	98d6 <nrf_gpio_pin_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    76e2:	a801      	add	r0, sp, #4
    76e4:	9601      	str	r6, [sp, #4]
    76e6:	f7ff ffe7 	bl	76b8 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    76ea:	9b01      	ldr	r3, [sp, #4]
    76ec:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
{
    76f0:	460c      	mov	r4, r1
    76f2:	f240 610d 	movw	r1, #1549	; 0x60d
    76f6:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    76fa:	a801      	add	r0, sp, #4
    76fc:	9401      	str	r4, [sp, #4]
    76fe:	f7ff ffdb 	bl	76b8 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    7702:	9b01      	ldr	r3, [sp, #4]
    7704:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0

    TWI_TWIM_PIN_CONFIGURE(scl_pin);
    TWI_TWIM_PIN_CONFIGURE(sda_pin);
    NRFX_DELAY_US(4);
    7708:	2509      	movs	r5, #9
    770a:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
    770e:	2004      	movs	r0, #4
    7710:	f001 ff4a 	bl	95a8 <nrfx_busy_wait>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    7714:	2701      	movs	r7, #1
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    7716:	a801      	add	r0, sp, #4
    7718:	9401      	str	r4, [sp, #4]
    771a:	f7ff ffcd 	bl	76b8 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    771e:	9a01      	ldr	r2, [sp, #4]
    return p_reg->IN;
    7720:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    7724:	40d3      	lsrs	r3, r2

    for (uint8_t i = 0; i < 9; i++)
    {
        if (nrf_gpio_pin_read(sda_pin))
    7726:	07db      	lsls	r3, r3, #31
    7728:	d415      	bmi.n	7756 <nrfx_twi_twim_bus_recover+0x82>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    772a:	a801      	add	r0, sp, #4
    772c:	9601      	str	r6, [sp, #4]
    772e:	f7ff ffc3 	bl	76b8 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    7732:	9b01      	ldr	r3, [sp, #4]
    7734:	fa07 f303 	lsl.w	r3, r7, r3
    p_reg->OUTCLR = clr_mask;
    7738:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
        }
        else
        {
            // Pulse CLOCK signal
            nrf_gpio_pin_clear(scl_pin);
            NRFX_DELAY_US(4);
    773c:	2004      	movs	r0, #4
    773e:	f001 ff33 	bl	95a8 <nrfx_busy_wait>
            nrf_gpio_pin_set(scl_pin);
    7742:	4630      	mov	r0, r6
    7744:	f002 f8c7 	bl	98d6 <nrf_gpio_pin_set>
    for (uint8_t i = 0; i < 9; i++)
    7748:	3d01      	subs	r5, #1
            NRFX_DELAY_US(4);
    774a:	2004      	movs	r0, #4
    774c:	f001 ff2c 	bl	95a8 <nrfx_busy_wait>
    for (uint8_t i = 0; i < 9; i++)
    7750:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
    7754:	d1df      	bne.n	7716 <nrfx_twi_twim_bus_recover+0x42>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    7756:	a801      	add	r0, sp, #4
    7758:	9401      	str	r4, [sp, #4]
    775a:	f7ff ffad 	bl	76b8 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    775e:	9a01      	ldr	r2, [sp, #4]
    7760:	2301      	movs	r3, #1
    7762:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
    7764:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
        }
    }

    // Generate a STOP condition on the bus
    nrf_gpio_pin_clear(sda_pin);
    NRFX_DELAY_US(4);
    7768:	2004      	movs	r0, #4
    776a:	f001 ff1d 	bl	95a8 <nrfx_busy_wait>
    nrf_gpio_pin_set(sda_pin);
    776e:	4620      	mov	r0, r4
    7770:	f002 f8b1 	bl	98d6 <nrf_gpio_pin_set>
    NRFX_DELAY_US(4);
    7774:	2004      	movs	r0, #4
    7776:	f001 ff17 	bl	95a8 <nrfx_busy_wait>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    777a:	a801      	add	r0, sp, #4
    777c:	9401      	str	r4, [sp, #4]
    777e:	f7ff ff9b 	bl	76b8 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    7782:	9a01      	ldr	r2, [sp, #4]
    return p_reg->IN;
    7784:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
    }
    else
    {
        return NRFX_ERROR_INTERNAL;
    }
}
    7788:	4803      	ldr	r0, [pc, #12]	; (7798 <nrfx_twi_twim_bus_recover+0xc4>)
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    778a:	40d3      	lsrs	r3, r2
    778c:	f003 0301 	and.w	r3, r3, #1
    7790:	1ac0      	subs	r0, r0, r3
    7792:	b003      	add	sp, #12
    7794:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7796:	bf00      	nop
    7798:	0bad0001 	.word	0x0bad0001

0000779c <_DoInit>:
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    779c:	4b11      	ldr	r3, [pc, #68]	; (77e4 <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    779e:	4912      	ldr	r1, [pc, #72]	; (77e8 <_DoInit+0x4c>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    77a0:	2203      	movs	r2, #3
    77a2:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    77a4:	615a      	str	r2, [r3, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
    77a6:	4a11      	ldr	r2, [pc, #68]	; (77ec <_DoInit+0x50>)
  p->aUp[0].sName         = "Terminal";
    77a8:	6199      	str	r1, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    77aa:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    77ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
    77b0:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
    77b2:	2200      	movs	r2, #0
    77b4:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    77b6:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    77b8:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
    77ba:	6619      	str	r1, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    77bc:	490c      	ldr	r1, [pc, #48]	; (77f0 <_DoInit+0x54>)
    77be:	6659      	str	r1, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    77c0:	2110      	movs	r1, #16
    77c2:	6699      	str	r1, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    77c4:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    77c6:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    77c8:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    77ca:	4a0a      	ldr	r2, [pc, #40]	; (77f4 <_DoInit+0x58>)
    77cc:	6812      	ldr	r2, [r2, #0]
    77ce:	f8c3 2007 	str.w	r2, [r3, #7]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
    77d2:	4a09      	ldr	r2, [pc, #36]	; (77f8 <_DoInit+0x5c>)
    77d4:	6810      	ldr	r0, [r2, #0]
    77d6:	8892      	ldrh	r2, [r2, #4]
    77d8:	809a      	strh	r2, [r3, #4]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
    77da:	2220      	movs	r2, #32
  STRCPY((char*)&p->acID[0], "SEGGER");
    77dc:	6018      	str	r0, [r3, #0]
  p->acID[6] = ' ';
    77de:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
    77e0:	4770      	bx	lr
    77e2:	bf00      	nop
    77e4:	20002238 	.word	0x20002238
    77e8:	0000a974 	.word	0x0000a974
    77ec:	20002338 	.word	0x20002338
    77f0:	20002328 	.word	0x20002328
    77f4:	0000a97d 	.word	0x0000a97d
    77f8:	0000a981 	.word	0x0000a981

000077fc <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    77fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
    7800:	4f21      	ldr	r7, [pc, #132]	; (7888 <SEGGER_RTT_WriteSkipNoLock+0x8c>)
    7802:	f04f 0b18 	mov.w	fp, #24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    7806:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
    7808:	fb0b 7200 	mla	r2, fp, r0, r7
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    780c:	4606      	mov	r6, r0
  RdOff = pRing->RdOff;
    780e:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
    7810:	6a55      	ldr	r5, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    7812:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    7814:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    7816:	d831      	bhi.n	787c <SEGGER_RTT_WriteSkipNoLock+0x80>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
    7818:	f8d2 a020 	ldr.w	sl, [r2, #32]
    781c:	ebaa 0905 	sub.w	r9, sl, r5
    7820:	f109 32ff 	add.w	r2, r9, #4294967295
    if (Avail >= NumBytes) {                            // Case 1)?
    7824:	4294      	cmp	r4, r2
    7826:	d811      	bhi.n	784c <SEGGER_RTT_WriteSkipNoLock+0x50>
CopyStraight:
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    7828:	2318      	movs	r3, #24
    782a:	fb06 3303 	mla	r3, r6, r3, r3
    782e:	443b      	add	r3, r7
    7830:	4622      	mov	r2, r4
    7832:	6858      	ldr	r0, [r3, #4]
    7834:	4641      	mov	r1, r8
    7836:	4428      	add	r0, r5
    7838:	f002 f9d9 	bl	9bee <memcpy>
      memcpy((void*)pDst, pData, NumBytes);
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
    783c:	442c      	add	r4, r5
      if (NumBytes) {
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
        memcpy((void*)pDst, pData + Rem, NumBytes);
      }
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = NumBytes;
    783e:	2318      	movs	r3, #24
    7840:	fb03 7306 	mla	r3, r3, r6, r7
      return 1;
    7844:	2001      	movs	r0, #1
      pRing->WrOff = NumBytes;
    7846:	625c      	str	r4, [r3, #36]	; 0x24
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
    7848:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
    784c:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
    784e:	429c      	cmp	r4, r3
    7850:	d818      	bhi.n	7884 <SEGGER_RTT_WriteSkipNoLock+0x88>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    7852:	fb00 bb0b 	mla	fp, r0, fp, fp
    7856:	44bb      	add	fp, r7
    7858:	464a      	mov	r2, r9
    785a:	f8db 0004 	ldr.w	r0, [fp, #4]
    785e:	442c      	add	r4, r5
    7860:	4428      	add	r0, r5
    7862:	f002 f9c4 	bl	9bee <memcpy>
      if (NumBytes) {
    7866:	ebb4 040a 	subs.w	r4, r4, sl
    786a:	d0e8      	beq.n	783e <SEGGER_RTT_WriteSkipNoLock+0x42>
    786c:	f8db 0004 	ldr.w	r0, [fp, #4]
    7870:	4622      	mov	r2, r4
    7872:	eb08 0109 	add.w	r1, r8, r9
    7876:	f002 f9ba 	bl	9bee <memcpy>
      return 1;
    787a:	e7e0      	b.n	783e <SEGGER_RTT_WriteSkipNoLock+0x42>
    Avail = RdOff - WrOff - 1u;
    787c:	3b01      	subs	r3, #1
    787e:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
    7880:	42a3      	cmp	r3, r4
    7882:	d2d1      	bcs.n	7828 <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
    7884:	2000      	movs	r0, #0
    7886:	e7df      	b.n	7848 <SEGGER_RTT_WriteSkipNoLock+0x4c>
    7888:	20002238 	.word	0x20002238

0000788c <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    788c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
    788e:	4b14      	ldr	r3, [pc, #80]	; (78e0 <SEGGER_RTT_WriteNoLock+0x54>)
    7890:	2718      	movs	r7, #24
    7892:	fb00 7507 	mla	r5, r0, r7, r7
    7896:	441d      	add	r5, r3
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
    7898:	fb07 3300 	mla	r3, r7, r0, r3
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    789c:	460e      	mov	r6, r1
  switch (pRing->Flags) {
    789e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    78a0:	2b01      	cmp	r3, #1
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    78a2:	4614      	mov	r4, r2
  switch (pRing->Flags) {
    78a4:	d00a      	beq.n	78bc <SEGGER_RTT_WriteNoLock+0x30>
    78a6:	2b02      	cmp	r3, #2
    78a8:	d014      	beq.n	78d4 <SEGGER_RTT_WriteNoLock+0x48>
    78aa:	b923      	cbnz	r3, 78b6 <SEGGER_RTT_WriteNoLock+0x2a>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
    78ac:	4628      	mov	r0, r5
    78ae:	f002 f81f 	bl	98f0 <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
    78b2:	4284      	cmp	r4, r0
    78b4:	d908      	bls.n	78c8 <SEGGER_RTT_WriteNoLock+0x3c>
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
    break;
  default:
    Status = 0u;
    78b6:	2400      	movs	r4, #0
  }
  //
  // Finish up.
  //
  return Status;
}
    78b8:	4620      	mov	r0, r4
    78ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    Avail = _GetAvailWriteSpace(pRing);
    78bc:	4628      	mov	r0, r5
    78be:	f002 f817 	bl	98f0 <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
    78c2:	4284      	cmp	r4, r0
    78c4:	bf28      	it	cs
    78c6:	4604      	movcs	r4, r0
    _WriteNoCheck(pRing, pData, Status);
    78c8:	4622      	mov	r2, r4
    78ca:	4631      	mov	r1, r6
    78cc:	4628      	mov	r0, r5
    78ce:	f002 f818 	bl	9902 <_WriteNoCheck>
    break;
    78d2:	e7f1      	b.n	78b8 <SEGGER_RTT_WriteNoLock+0x2c>
    Status = _WriteBlocking(pRing, pData, NumBytes);
    78d4:	4628      	mov	r0, r5
}
    78d6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Status = _WriteBlocking(pRing, pData, NumBytes);
    78da:	f002 b82f 	b.w	993c <_WriteBlocking>
    78de:	bf00      	nop
    78e0:	20002238 	.word	0x20002238

000078e4 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
    78e4:	4b03      	ldr	r3, [pc, #12]	; (78f4 <SEGGER_RTT_HasDataUp+0x10>)
    78e6:	2218      	movs	r2, #24
    78e8:	fb02 3300 	mla	r3, r2, r0, r3
    78ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
    78ee:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
    78f0:	1a80      	subs	r0, r0, r2
    78f2:	4770      	bx	lr
    78f4:	20002238 	.word	0x20002238

000078f8 <zephyr_rtt_mutex_lock>:
	return z_impl_k_mutex_lock(mutex, timeout);
    78f8:	4803      	ldr	r0, [pc, #12]	; (7908 <zephyr_rtt_mutex_lock+0x10>)
    78fa:	f04f 32ff 	mov.w	r2, #4294967295
    78fe:	f04f 33ff 	mov.w	r3, #4294967295
    7902:	f000 ba0d 	b.w	7d20 <z_impl_k_mutex_lock>
    7906:	bf00      	nop
    7908:	200000cc 	.word	0x200000cc

0000790c <zephyr_rtt_mutex_unlock>:
	return z_impl_k_mutex_unlock(mutex);
    790c:	4801      	ldr	r0, [pc, #4]	; (7914 <zephyr_rtt_mutex_unlock+0x8>)
    790e:	f000 ba81 	b.w	7e14 <z_impl_k_mutex_unlock>
    7912:	bf00      	nop
    7914:	200000cc 	.word	0x200000cc

00007918 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
    7918:	4b01      	ldr	r3, [pc, #4]	; (7920 <z_impl_z_errno+0x8>)
    791a:	6898      	ldr	r0, [r3, #8]
}
    791c:	3060      	adds	r0, #96	; 0x60
    791e:	4770      	bx	lr
    7920:	200022e0 	.word	0x200022e0

00007924 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    7924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7928:	4606      	mov	r6, r0
    792a:	b086      	sub	sp, #24
    792c:	460f      	mov	r7, r1
	__asm__ volatile(
    792e:	f04f 0320 	mov.w	r3, #32
    7932:	f3ef 8811 	mrs	r8, BASEPRI
    7936:	f383 8812 	msr	BASEPRI_MAX, r3
    793a:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    793e:	f000 fdcf 	bl	84e0 <z_impl_z_current_get>
    7942:	2e04      	cmp	r6, #4
    7944:	bf96      	itet	ls
    7946:	4b22      	ldrls	r3, [pc, #136]	; (79d0 <z_fatal_error+0xac>)
    7948:	4b22      	ldrhi	r3, [pc, #136]	; (79d4 <z_fatal_error+0xb0>)
    794a:	f853 3026 	ldrls.w	r3, [r3, r6, lsl #2]
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    794e:	4922      	ldr	r1, [pc, #136]	; (79d8 <z_fatal_error+0xb4>)
    7950:	9603      	str	r6, [sp, #12]
    7952:	2400      	movs	r4, #0
    7954:	e9cd 3404 	strd	r3, r4, [sp, #16]
    7958:	4b20      	ldr	r3, [pc, #128]	; (79dc <z_fatal_error+0xb8>)
    795a:	9400      	str	r4, [sp, #0]
    795c:	e9cd 4301 	strd	r4, r3, [sp, #4]
    7960:	4605      	mov	r5, r0
    7962:	4623      	mov	r3, r4
    7964:	2201      	movs	r2, #1
    7966:	4620      	mov	r0, r4
    7968:	f002 f81a 	bl	99a0 <z_log_msg_runtime_create.constprop.0>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    796c:	b16f      	cbz	r7, 798a <z_fatal_error+0x66>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    796e:	69fb      	ldr	r3, [r7, #28]
    7970:	f3c3 0308 	ubfx	r3, r3, #0, #9
    7974:	b14b      	cbz	r3, 798a <z_fatal_error+0x66>
		LOG_ERR("Fault during interrupt handling\n");
    7976:	4b1a      	ldr	r3, [pc, #104]	; (79e0 <z_fatal_error+0xbc>)
    7978:	4917      	ldr	r1, [pc, #92]	; (79d8 <z_fatal_error+0xb4>)
    797a:	9400      	str	r4, [sp, #0]
    797c:	e9cd 4301 	strd	r4, r3, [sp, #4]
    7980:	2201      	movs	r2, #1
    7982:	4623      	mov	r3, r4
    7984:	4620      	mov	r0, r4
    7986:	f002 f80b 	bl	99a0 <z_log_msg_runtime_create.constprop.0>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    798a:	b12d      	cbz	r5, 7998 <z_fatal_error+0x74>
    798c:	4628      	mov	r0, r5
    798e:	f002 f821 	bl	99d4 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
    7992:	b108      	cbz	r0, 7998 <z_fatal_error+0x74>
    7994:	7803      	ldrb	r3, [r0, #0]
    7996:	b903      	cbnz	r3, 799a <z_fatal_error+0x76>
		thread_name = "unknown";
    7998:	4812      	ldr	r0, [pc, #72]	; (79e4 <z_fatal_error+0xc0>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    799a:	4b13      	ldr	r3, [pc, #76]	; (79e8 <z_fatal_error+0xc4>)
    799c:	9302      	str	r3, [sp, #8]
    799e:	2300      	movs	r3, #0
    79a0:	e9cd 5003 	strd	r5, r0, [sp, #12]
    79a4:	e9cd 3300 	strd	r3, r3, [sp]
    79a8:	4618      	mov	r0, r3
    79aa:	2201      	movs	r2, #1
    79ac:	490a      	ldr	r1, [pc, #40]	; (79d8 <z_fatal_error+0xb4>)
    79ae:	f001 fff7 	bl	99a0 <z_log_msg_runtime_create.constprop.0>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
    79b2:	4639      	mov	r1, r7
    79b4:	4630      	mov	r0, r6
    79b6:	f7fe ff63 	bl	6880 <k_sys_fatal_error_handler>
	__asm__ volatile(
    79ba:	f388 8811 	msr	BASEPRI, r8
    79be:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    79c2:	4628      	mov	r0, r5
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    79c4:	b006      	add	sp, #24
    79c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    79ca:	f7fd bfaf 	b.w	592c <z_impl_k_thread_abort>
    79ce:	bf00      	nop
    79d0:	0000a0c0 	.word	0x0000a0c0
    79d4:	0000a988 	.word	0x0000a988
    79d8:	00009edc 	.word	0x00009edc
    79dc:	0000a99e 	.word	0x0000a99e
    79e0:	0000a9c6 	.word	0x0000a9c6
    79e4:	0000a996 	.word	0x0000a996
    79e8:	0000a9e7 	.word	0x0000a9e7

000079ec <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    79ec:	4b0f      	ldr	r3, [pc, #60]	; (7a2c <z_sys_init_run_level+0x40>)
{
    79ee:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    79f0:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    79f4:	3001      	adds	r0, #1
    79f6:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    79fa:	42a6      	cmp	r6, r4
    79fc:	d800      	bhi.n	7a00 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    79fe:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    7a00:	e9d4 3500 	ldrd	r3, r5, [r4]
    7a04:	4628      	mov	r0, r5
    7a06:	4798      	blx	r3
		if (dev != NULL) {
    7a08:	b16d      	cbz	r5, 7a26 <z_sys_init_run_level+0x3a>
			if (rc != 0) {
    7a0a:	b138      	cbz	r0, 7a1c <z_sys_init_run_level+0x30>
				if (rc < 0) {
    7a0c:	2800      	cmp	r0, #0
    7a0e:	bfb8      	it	lt
    7a10:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    7a12:	68eb      	ldr	r3, [r5, #12]
				if (rc > UINT8_MAX) {
    7a14:	28ff      	cmp	r0, #255	; 0xff
    7a16:	bfa8      	it	ge
    7a18:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
    7a1a:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    7a1c:	68ea      	ldr	r2, [r5, #12]
    7a1e:	7853      	ldrb	r3, [r2, #1]
    7a20:	f043 0301 	orr.w	r3, r3, #1
    7a24:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    7a26:	3408      	adds	r4, #8
    7a28:	e7e7      	b.n	79fa <z_sys_init_run_level+0xe>
    7a2a:	bf00      	nop
    7a2c:	0000a0d4 	.word	0x0000a0d4

00007a30 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    7a30:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    7a32:	4b0a      	ldr	r3, [pc, #40]	; (7a5c <bg_thread_main+0x2c>)
    7a34:	2201      	movs	r2, #1

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    7a36:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
    7a38:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    7a3a:	f7ff ffd7 	bl	79ec <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    7a3e:	f000 ff0f 	bl	8860 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
    7a42:	2004      	movs	r0, #4
    7a44:	f7ff ffd2 	bl	79ec <z_sys_init_run_level>

	z_init_static_threads();
    7a48:	f000 f8f2 	bl	7c30 <z_init_static_threads>
	extern int main(void);
#else
	extern void main(void);
#endif

	(void)main();
    7a4c:	f7fc f95e 	bl	3d0c <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    7a50:	4a03      	ldr	r2, [pc, #12]	; (7a60 <bg_thread_main+0x30>)
    7a52:	7b13      	ldrb	r3, [r2, #12]
    7a54:	f023 0301 	bic.w	r3, r3, #1
    7a58:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    7a5a:	bd08      	pop	{r3, pc}
    7a5c:	20002738 	.word	0x20002738
    7a60:	200001c0 	.word	0x200001c0

00007a64 <z_bss_zero>:
{
    7a64:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    7a66:	4803      	ldr	r0, [pc, #12]	; (7a74 <z_bss_zero+0x10>)
    7a68:	4a03      	ldr	r2, [pc, #12]	; (7a78 <z_bss_zero+0x14>)
    7a6a:	2100      	movs	r1, #0
    7a6c:	1a12      	subs	r2, r2, r0
    7a6e:	f001 ffa7 	bl	99c0 <z_early_memset>
}
    7a72:	bd08      	pop	{r3, pc}
    7a74:	200000e0 	.word	0x200000e0
    7a78:	2000273c 	.word	0x2000273c

00007a7c <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
    7a7c:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = &z_idle_threads[i];
    7a7e:	4e16      	ldr	r6, [pc, #88]	; (7ad8 <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    7a80:	4d16      	ldr	r5, [pc, #88]	; (7adc <z_init_cpu+0x60>)
	z_setup_new_thread(thread, stack,
    7a82:	4917      	ldr	r1, [pc, #92]	; (7ae0 <z_init_cpu+0x64>)
	struct k_thread *thread = &z_idle_threads[i];
    7a84:	23c0      	movs	r3, #192	; 0xc0
{
    7a86:	b086      	sub	sp, #24
	struct k_thread *thread = &z_idle_threads[i];
    7a88:	fb03 6600 	mla	r6, r3, r0, r6
	z_setup_new_thread(thread, stack,
    7a8c:	2201      	movs	r2, #1
    7a8e:	2300      	movs	r3, #0
    7a90:	e9cd 2304 	strd	r2, r3, [sp, #16]
    7a94:	220f      	movs	r2, #15
    7a96:	e9cd 3202 	strd	r3, r2, [sp, #8]
    7a9a:	9301      	str	r3, [sp, #4]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    7a9c:	231c      	movs	r3, #28
    7a9e:	fb03 5500 	mla	r5, r3, r0, r5
{
    7aa2:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
    7aa4:	f44f 70c0 	mov.w	r0, #384	; 0x180
    7aa8:	fb00 1104 	mla	r1, r0, r4, r1
    7aac:	4b0d      	ldr	r3, [pc, #52]	; (7ae4 <z_init_cpu+0x68>)
    7aae:	9500      	str	r5, [sp, #0]
    7ab0:	f44f 72a0 	mov.w	r2, #320	; 0x140
    7ab4:	4630      	mov	r0, r6
    7ab6:	f000 f889 	bl	7bcc <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    7aba:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    7abc:	4a0a      	ldr	r2, [pc, #40]	; (7ae8 <z_init_cpu+0x6c>)
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    7abe:	60ee      	str	r6, [r5, #12]
    7ac0:	f023 0304 	bic.w	r3, r3, #4
    7ac4:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    7ac6:	f44f 6308 	mov.w	r3, #2176	; 0x880
    7aca:	fb04 3303 	mla	r3, r4, r3, r3
    7ace:	4413      	add	r3, r2
	_kernel.cpus[id].id = id;
    7ad0:	752c      	strb	r4, [r5, #20]
	_kernel.cpus[id].irq_stack =
    7ad2:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
    7ad4:	b006      	add	sp, #24
    7ad6:	bd70      	pop	{r4, r5, r6, pc}
    7ad8:	20000100 	.word	0x20000100
    7adc:	200022e0 	.word	0x200022e0
    7ae0:	20003000 	.word	0x20003000
    7ae4:	00007ce9 	.word	0x00007ce9
    7ae8:	20002780 	.word	0x20002780

00007aec <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    7aec:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    7aee:	2000      	movs	r0, #0
{
    7af0:	b0b6      	sub	sp, #216	; 0xd8
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    7af2:	f7ff ff7b 	bl	79ec <z_sys_init_run_level>
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    7af6:	4b2e      	ldr	r3, [pc, #184]	; (7bb0 <z_cstart+0xc4>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    7af8:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    7afc:	4d2d      	ldr	r5, [pc, #180]	; (7bb4 <z_cstart+0xc8>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
    7afe:	4e2e      	ldr	r6, [pc, #184]	; (7bb8 <z_cstart+0xcc>)
    7b00:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    7b02:	4f2e      	ldr	r7, [pc, #184]	; (7bbc <z_cstart+0xd0>)
    7b04:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    7b08:	616b      	str	r3, [r5, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    7b0a:	2400      	movs	r4, #0
    7b0c:	23e0      	movs	r3, #224	; 0xe0
    7b0e:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    7b12:	77ec      	strb	r4, [r5, #31]
    7b14:	762c      	strb	r4, [r5, #24]
    7b16:	766c      	strb	r4, [r5, #25]
    7b18:	76ac      	strb	r4, [r5, #26]
    7b1a:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    7b1e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    7b20:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    7b24:	626b      	str	r3, [r5, #36]	; 0x24
    7b26:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    7b2a:	f7fd fe73 	bl	5814 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    7b2e:	f7fd f95b 	bl	4de8 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    7b32:	f04f 33ff 	mov.w	r3, #4294967295
    7b36:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    7b38:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    7b3a:	f7fd ffc1 	bl	5ac0 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    7b3e:	f7fd ff0b 	bl	5958 <z_arm_configure_static_mpu_regions>

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
    7b42:	f7fc fd2b 	bl	459c <log_core_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
    7b46:	f240 1301 	movw	r3, #257	; 0x101
    7b4a:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    7b4e:	ab06      	add	r3, sp, #24
    7b50:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
    7b52:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	dummy_thread->resource_pool = NULL;
    7b56:	9422      	str	r4, [sp, #136]	; 0x88
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    7b58:	f001 ff21 	bl	999e <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
    7b5c:	2001      	movs	r0, #1
    7b5e:	f7ff ff45 	bl	79ec <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    7b62:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
    7b64:	4d16      	ldr	r5, [pc, #88]	; (7bc0 <z_cstart+0xd4>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    7b66:	f7ff ff41 	bl	79ec <z_sys_init_run_level>
	z_sched_init();
    7b6a:	f000 fc11 	bl	8390 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    7b6e:	4b15      	ldr	r3, [pc, #84]	; (7bc4 <z_cstart+0xd8>)
	_kernel.ready_q.cache = &z_main_thread;
    7b70:	6235      	str	r5, [r6, #32]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    7b72:	9305      	str	r3, [sp, #20]
    7b74:	2301      	movs	r3, #1
    7b76:	4914      	ldr	r1, [pc, #80]	; (7bc8 <z_cstart+0xdc>)
    7b78:	9400      	str	r4, [sp, #0]
    7b7a:	e9cd 4303 	strd	r4, r3, [sp, #12]
    7b7e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    7b82:	463b      	mov	r3, r7
    7b84:	e9cd 4401 	strd	r4, r4, [sp, #4]
    7b88:	4628      	mov	r0, r5
    7b8a:	f000 f81f 	bl	7bcc <z_setup_new_thread>
    7b8e:	7b6a      	ldrb	r2, [r5, #13]
    7b90:	4606      	mov	r6, r0
    7b92:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
    7b96:	4628      	mov	r0, r5
    7b98:	736a      	strb	r2, [r5, #13]
    7b9a:	f001 ff88 	bl	9aae <z_ready_thread>
	z_init_cpu(0);
    7b9e:	4620      	mov	r0, r4
    7ba0:	f7ff ff6c 	bl	7a7c <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    7ba4:	463a      	mov	r2, r7
    7ba6:	4631      	mov	r1, r6
    7ba8:	4628      	mov	r0, r5
    7baa:	f7fd fb2d 	bl	5208 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    7bae:	bf00      	nop
    7bb0:	20003000 	.word	0x20003000
    7bb4:	e000ed00 	.word	0xe000ed00
    7bb8:	200022e0 	.word	0x200022e0
    7bbc:	00007a31 	.word	0x00007a31
    7bc0:	200001c0 	.word	0x200001c0
    7bc4:	0000aa49 	.word	0x0000aa49
    7bc8:	20003180 	.word	0x20003180

00007bcc <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    7bcc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    7bd0:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    7bd2:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    7bd4:	2604      	movs	r6, #4
    7bd6:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
    7bd8:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    7bda:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    7bdc:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
    7be0:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    7be2:	1dd6      	adds	r6, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
    7be4:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    7be8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
    7bea:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    7bec:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    7bf0:	3740      	adds	r7, #64	; 0x40
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    7bf2:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
    7bf6:	e9c0 7619 	strd	r7, r6, [r0, #100]	; 0x64
	thread_base->pended_on = NULL;
    7bfa:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
    7bfc:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
    7bfe:	66c5      	str	r5, [r0, #108]	; 0x6c
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    7c00:	f106 0840 	add.w	r8, r6, #64	; 0x40
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    7c04:	9202      	str	r2, [sp, #8]
    7c06:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    7c08:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
    7c0a:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    7c0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    7c0e:	9200      	str	r2, [sp, #0]
    7c10:	4642      	mov	r2, r8
{
    7c12:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    7c14:	f7fd fa74 	bl	5100 <arch_new_thread>
	if (!_current) {
    7c18:	4b04      	ldr	r3, [pc, #16]	; (7c2c <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
    7c1a:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
    7c1c:	689b      	ldr	r3, [r3, #8]
    7c1e:	b103      	cbz	r3, 7c22 <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
    7c20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	return stack_ptr;
    7c22:	6723      	str	r3, [r4, #112]	; 0x70
}
    7c24:	4640      	mov	r0, r8
    7c26:	b004      	add	sp, #16
    7c28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7c2c:	200022e0 	.word	0x200022e0

00007c30 <z_init_static_threads>:
{
    7c30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    7c34:	4c29      	ldr	r4, [pc, #164]	; (7cdc <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
    7c36:	4d2a      	ldr	r5, [pc, #168]	; (7ce0 <z_init_static_threads+0xb0>)
{
    7c38:	b087      	sub	sp, #28
    7c3a:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
    7c3c:	42ae      	cmp	r6, r5
    7c3e:	f104 0430 	add.w	r4, r4, #48	; 0x30
    7c42:	d30f      	bcc.n	7c64 <z_init_static_threads+0x34>
	k_sched_lock();
    7c44:	f000 fb74 	bl	8330 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    7c48:	4c24      	ldr	r4, [pc, #144]	; (7cdc <z_init_static_threads+0xac>)

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    7c4a:	f8df 9098 	ldr.w	r9, [pc, #152]	; 7ce4 <z_init_static_threads+0xb4>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    7c4e:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    7c52:	f240 37e7 	movw	r7, #999	; 0x3e7
    7c56:	42ac      	cmp	r4, r5
    7c58:	d320      	bcc.n	7c9c <z_init_static_threads+0x6c>
}
    7c5a:	b007      	add	sp, #28
    7c5c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
    7c60:	f000 bb7a 	b.w	8358 <k_sched_unlock>
		z_setup_new_thread(
    7c64:	f854 3c04 	ldr.w	r3, [r4, #-4]
    7c68:	9305      	str	r3, [sp, #20]
    7c6a:	f854 3c10 	ldr.w	r3, [r4, #-16]
    7c6e:	9304      	str	r3, [sp, #16]
    7c70:	f854 3c14 	ldr.w	r3, [r4, #-20]
    7c74:	9303      	str	r3, [sp, #12]
    7c76:	f854 3c18 	ldr.w	r3, [r4, #-24]
    7c7a:	9302      	str	r3, [sp, #8]
    7c7c:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    7c80:	9301      	str	r3, [sp, #4]
    7c82:	f854 3c20 	ldr.w	r3, [r4, #-32]
    7c86:	9300      	str	r3, [sp, #0]
    7c88:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    7c8c:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    7c90:	f7ff ff9c 	bl	7bcc <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    7c94:	f854 3c30 	ldr.w	r3, [r4, #-48]
    7c98:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    7c9a:	e7ce      	b.n	7c3a <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    7c9c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    7c9e:	1c5a      	adds	r2, r3, #1
    7ca0:	d00d      	beq.n	7cbe <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
    7ca2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    7ca6:	2100      	movs	r1, #0
    7ca8:	4638      	mov	r0, r7
    7caa:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    7cae:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
    7cb2:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    7cb6:	d104      	bne.n	7cc2 <z_init_static_threads+0x92>
	z_sched_start(thread);
    7cb8:	4640      	mov	r0, r8
    7cba:	f000 fae9 	bl	8290 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    7cbe:	3430      	adds	r4, #48	; 0x30
    7cc0:	e7c9      	b.n	7c56 <z_init_static_threads+0x26>
    7cc2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    7cc6:	2300      	movs	r3, #0
    7cc8:	f7f8 ff08 	bl	adc <__aeabi_uldivmod>
    7ccc:	4602      	mov	r2, r0
    7cce:	460b      	mov	r3, r1
    7cd0:	f108 0018 	add.w	r0, r8, #24
    7cd4:	4649      	mov	r1, r9
    7cd6:	f000 fcd1 	bl	867c <z_add_timeout>
    7cda:	e7f0      	b.n	7cbe <z_init_static_threads+0x8e>
    7cdc:	00009e6c 	.word	0x00009e6c
    7ce0:	00009e6c 	.word	0x00009e6c
    7ce4:	00009a1b 	.word	0x00009a1b

00007ce8 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    7ce8:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    7cea:	4c0b      	ldr	r4, [pc, #44]	; (7d18 <idle+0x30>)
	return !z_sys_post_kernel;
    7cec:	4d0b      	ldr	r5, [pc, #44]	; (7d1c <idle+0x34>)
	__asm__ volatile(
    7cee:	f04f 0220 	mov.w	r2, #32
    7cf2:	f3ef 8311 	mrs	r3, BASEPRI
    7cf6:	f382 8812 	msr	BASEPRI_MAX, r2
    7cfa:	f3bf 8f6f 	isb	sy
    7cfe:	f001 ff2e 	bl	9b5e <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    7d02:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
    7d04:	61e0      	str	r0, [r4, #28]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    7d06:	b913      	cbnz	r3, 7d0e <idle+0x26>
	arch_cpu_idle();
    7d08:	f7fd f874 	bl	4df4 <arch_cpu_idle>
}
    7d0c:	e7ef      	b.n	7cee <idle+0x6>
    7d0e:	f7fc ff9d 	bl	4c4c <pm_system_suspend>
    7d12:	2800      	cmp	r0, #0
    7d14:	d1eb      	bne.n	7cee <idle+0x6>
    7d16:	e7f7      	b.n	7d08 <idle+0x20>
    7d18:	200022e0 	.word	0x200022e0
    7d1c:	20002738 	.word	0x20002738

00007d20 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    7d20:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    7d24:	4604      	mov	r4, r0
    7d26:	4617      	mov	r7, r2
    7d28:	461e      	mov	r6, r3
    7d2a:	f04f 0320 	mov.w	r3, #32
    7d2e:	f3ef 8811 	mrs	r8, BASEPRI
    7d32:	f383 8812 	msr	BASEPRI_MAX, r3
    7d36:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    7d3a:	68c3      	ldr	r3, [r0, #12]
    7d3c:	4a33      	ldr	r2, [pc, #204]	; (7e0c <z_impl_k_mutex_lock+0xec>)
    7d3e:	b17b      	cbz	r3, 7d60 <z_impl_k_mutex_lock+0x40>
    7d40:	6880      	ldr	r0, [r0, #8]
    7d42:	6891      	ldr	r1, [r2, #8]
    7d44:	4288      	cmp	r0, r1
    7d46:	d019      	beq.n	7d7c <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    7d48:	ea57 0306 	orrs.w	r3, r7, r6
    7d4c:	d118      	bne.n	7d80 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
    7d4e:	f388 8811 	msr	BASEPRI, r8
    7d52:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    7d56:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    7d5a:	b002      	add	sp, #8
    7d5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    7d60:	6891      	ldr	r1, [r2, #8]
    7d62:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    7d66:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
    7d68:	3301      	adds	r3, #1
    7d6a:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    7d6c:	6893      	ldr	r3, [r2, #8]
    7d6e:	60a3      	str	r3, [r4, #8]
    7d70:	f388 8811 	msr	BASEPRI, r8
    7d74:	f3bf 8f6f 	isb	sy
		return 0;
    7d78:	2000      	movs	r0, #0
    7d7a:	e7ee      	b.n	7d5a <z_impl_k_mutex_lock+0x3a>
					_current->base.prio :
    7d7c:	6921      	ldr	r1, [r4, #16]
    7d7e:	e7f2      	b.n	7d66 <z_impl_k_mutex_lock+0x46>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    7d80:	f991 100e 	ldrsb.w	r1, [r1, #14]
    7d84:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
    7d88:	4299      	cmp	r1, r3
    7d8a:	bfa8      	it	ge
    7d8c:	4619      	movge	r1, r3
    7d8e:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    7d92:	4291      	cmp	r1, r2
    7d94:	bfb8      	it	lt
    7d96:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    7d98:	428b      	cmp	r3, r1
    7d9a:	dd2e      	ble.n	7dfa <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
    7d9c:	f001 fe23 	bl	99e6 <adjust_owner_prio.isra.0>
    7da0:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    7da2:	e9cd 7600 	strd	r7, r6, [sp]
    7da6:	481a      	ldr	r0, [pc, #104]	; (7e10 <z_impl_k_mutex_lock+0xf0>)
    7da8:	4622      	mov	r2, r4
    7daa:	4641      	mov	r1, r8
    7dac:	f000 f9fa 	bl	81a4 <z_pend_curr>
	if (got_mutex == 0) {
    7db0:	2800      	cmp	r0, #0
    7db2:	d0e1      	beq.n	7d78 <z_impl_k_mutex_lock+0x58>
	__asm__ volatile(
    7db4:	f04f 0320 	mov.w	r3, #32
    7db8:	f3ef 8611 	mrs	r6, BASEPRI
    7dbc:	f383 8812 	msr	BASEPRI_MAX, r3
    7dc0:	f3bf 8f6f 	isb	sy
	if (likely(mutex->owner != NULL)) {
    7dc4:	68a0      	ldr	r0, [r4, #8]
    7dc6:	b1d0      	cbz	r0, 7dfe <z_impl_k_mutex_lock+0xde>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    7dc8:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    7dca:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7dcc:	429c      	cmp	r4, r3
    7dce:	d00a      	beq.n	7de6 <z_impl_k_mutex_lock+0xc6>
    7dd0:	b14b      	cbz	r3, 7de6 <z_impl_k_mutex_lock+0xc6>
    7dd2:	f993 300e 	ldrsb.w	r3, [r3, #14]
    7dd6:	4299      	cmp	r1, r3
    7dd8:	bfa8      	it	ge
    7dda:	4619      	movge	r1, r3
    7ddc:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    7de0:	4299      	cmp	r1, r3
    7de2:	bfb8      	it	lt
    7de4:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
    7de6:	f001 fdfe 	bl	99e6 <adjust_owner_prio.isra.0>
    7dea:	b140      	cbz	r0, 7dfe <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
    7dec:	4808      	ldr	r0, [pc, #32]	; (7e10 <z_impl_k_mutex_lock+0xf0>)
    7dee:	4631      	mov	r1, r6
    7df0:	f000 fa3c 	bl	826c <z_reschedule>
	return -EAGAIN;
    7df4:	f06f 000a 	mvn.w	r0, #10
    7df8:	e7af      	b.n	7d5a <z_impl_k_mutex_lock+0x3a>
	bool resched = false;
    7dfa:	2500      	movs	r5, #0
    7dfc:	e7d1      	b.n	7da2 <z_impl_k_mutex_lock+0x82>
	if (resched) {
    7dfe:	2d00      	cmp	r5, #0
    7e00:	d1f4      	bne.n	7dec <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
    7e02:	f386 8811 	msr	BASEPRI, r6
    7e06:	f3bf 8f6f 	isb	sy
    7e0a:	e7f3      	b.n	7df4 <z_impl_k_mutex_lock+0xd4>
    7e0c:	200022e0 	.word	0x200022e0
    7e10:	20002739 	.word	0x20002739

00007e14 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    7e14:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    7e16:	6883      	ldr	r3, [r0, #8]
{
    7e18:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
    7e1a:	b36b      	cbz	r3, 7e78 <z_impl_k_mutex_unlock+0x64>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    7e1c:	4a19      	ldr	r2, [pc, #100]	; (7e84 <z_impl_k_mutex_unlock+0x70>)
    7e1e:	6892      	ldr	r2, [r2, #8]
    7e20:	4293      	cmp	r3, r2
    7e22:	d12c      	bne.n	7e7e <z_impl_k_mutex_unlock+0x6a>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    7e24:	68c3      	ldr	r3, [r0, #12]
    7e26:	2b01      	cmp	r3, #1
    7e28:	d903      	bls.n	7e32 <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
    7e2a:	3b01      	subs	r3, #1
    7e2c:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
    7e2e:	2000      	movs	r0, #0
}
    7e30:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    7e32:	f04f 0320 	mov.w	r3, #32
    7e36:	f3ef 8511 	mrs	r5, BASEPRI
    7e3a:	f383 8812 	msr	BASEPRI_MAX, r3
    7e3e:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    7e42:	6901      	ldr	r1, [r0, #16]
    7e44:	6880      	ldr	r0, [r0, #8]
    7e46:	f001 fdce 	bl	99e6 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    7e4a:	4620      	mov	r0, r4
    7e4c:	f001 fe3f 	bl	9ace <z_unpend_first_thread>
	mutex->owner = new_owner;
    7e50:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    7e52:	b158      	cbz	r0, 7e6c <z_impl_k_mutex_unlock+0x58>
		mutex->owner_orig_prio = new_owner->base.prio;
    7e54:	f990 200e 	ldrsb.w	r2, [r0, #14]
    7e58:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    7e5a:	2200      	movs	r2, #0
    7e5c:	6782      	str	r2, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
    7e5e:	f001 fe26 	bl	9aae <z_ready_thread>
		z_reschedule(&lock, key);
    7e62:	4809      	ldr	r0, [pc, #36]	; (7e88 <z_impl_k_mutex_unlock+0x74>)
    7e64:	4629      	mov	r1, r5
    7e66:	f000 fa01 	bl	826c <z_reschedule>
    7e6a:	e7e0      	b.n	7e2e <z_impl_k_mutex_unlock+0x1a>
		mutex->lock_count = 0U;
    7e6c:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    7e6e:	f385 8811 	msr	BASEPRI, r5
    7e72:	f3bf 8f6f 	isb	sy
    7e76:	e7da      	b.n	7e2e <z_impl_k_mutex_unlock+0x1a>
		return -EINVAL;
    7e78:	f06f 0015 	mvn.w	r0, #21
    7e7c:	e7d8      	b.n	7e30 <z_impl_k_mutex_unlock+0x1c>
		return -EPERM;
    7e7e:	f04f 30ff 	mov.w	r0, #4294967295
    7e82:	e7d5      	b.n	7e30 <z_impl_k_mutex_unlock+0x1c>
    7e84:	200022e0 	.word	0x200022e0
    7e88:	20002739 	.word	0x20002739

00007e8c <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    7e8c:	b538      	push	{r3, r4, r5, lr}
    7e8e:	4604      	mov	r4, r0
	__asm__ volatile(
    7e90:	f04f 0320 	mov.w	r3, #32
    7e94:	f3ef 8511 	mrs	r5, BASEPRI
    7e98:	f383 8812 	msr	BASEPRI_MAX, r3
    7e9c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    7ea0:	f001 fe15 	bl	9ace <z_unpend_first_thread>

	if (thread != NULL) {
    7ea4:	b148      	cbz	r0, 7eba <z_impl_k_sem_give+0x2e>
    7ea6:	2200      	movs	r2, #0
    7ea8:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    7eaa:	f001 fe00 	bl	9aae <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    7eae:	4629      	mov	r1, r5
    7eb0:	4805      	ldr	r0, [pc, #20]	; (7ec8 <z_impl_k_sem_give+0x3c>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    7eb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    7eb6:	f000 b9d9 	b.w	826c <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    7eba:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    7ebe:	429a      	cmp	r2, r3
    7ec0:	bf18      	it	ne
    7ec2:	3301      	addne	r3, #1
    7ec4:	60a3      	str	r3, [r4, #8]
}
    7ec6:	e7f2      	b.n	7eae <z_impl_k_sem_give+0x22>
    7ec8:	20002739 	.word	0x20002739

00007ecc <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    7ecc:	b513      	push	{r0, r1, r4, lr}
    7ece:	f04f 0420 	mov.w	r4, #32
    7ed2:	f3ef 8111 	mrs	r1, BASEPRI
    7ed6:	f384 8812 	msr	BASEPRI_MAX, r4
    7eda:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    7ede:	6884      	ldr	r4, [r0, #8]
    7ee0:	b144      	cbz	r4, 7ef4 <z_impl_k_sem_take+0x28>
		sem->count--;
    7ee2:	3c01      	subs	r4, #1
    7ee4:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
    7ee6:	f381 8811 	msr	BASEPRI, r1
    7eea:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    7eee:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    7ef0:	b002      	add	sp, #8
    7ef2:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    7ef4:	ea52 0403 	orrs.w	r4, r2, r3
    7ef8:	d106      	bne.n	7f08 <z_impl_k_sem_take+0x3c>
    7efa:	f381 8811 	msr	BASEPRI, r1
    7efe:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    7f02:	f06f 000f 	mvn.w	r0, #15
    7f06:	e7f3      	b.n	7ef0 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    7f08:	e9cd 2300 	strd	r2, r3, [sp]
    7f0c:	4602      	mov	r2, r0
    7f0e:	4802      	ldr	r0, [pc, #8]	; (7f18 <z_impl_k_sem_take+0x4c>)
    7f10:	f000 f948 	bl	81a4 <z_pend_curr>
	return ret;
    7f14:	e7ec      	b.n	7ef0 <z_impl_k_sem_take+0x24>
    7f16:	bf00      	nop
    7f18:	20002739 	.word	0x20002739

00007f1c <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
    7f1c:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
    7f1e:	4d07      	ldr	r5, [pc, #28]	; (7f3c <z_reset_time_slice+0x20>)
    7f20:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
    7f22:	b154      	cbz	r4, 7f3a <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
    7f24:	f7fe fc54 	bl	67d0 <sys_clock_elapsed>
    7f28:	4b05      	ldr	r3, [pc, #20]	; (7f40 <z_reset_time_slice+0x24>)
    7f2a:	4404      	add	r4, r0
    7f2c:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
    7f2e:	6828      	ldr	r0, [r5, #0]
    7f30:	2100      	movs	r1, #0
	}
}
    7f32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
    7f36:	f001 be22 	b.w	9b7e <z_set_timeout_expiry>
}
    7f3a:	bd38      	pop	{r3, r4, r5, pc}
    7f3c:	20002318 	.word	0x20002318
    7f40:	200022e0 	.word	0x200022e0

00007f44 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
    7f44:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
    7f46:	4d0d      	ldr	r5, [pc, #52]	; (7f7c <update_cache+0x38>)
    7f48:	462b      	mov	r3, r5
    7f4a:	f853 4f24 	ldr.w	r4, [r3, #36]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7f4e:	429c      	cmp	r4, r3
    7f50:	d000      	beq.n	7f54 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    7f52:	b904      	cbnz	r4, 7f56 <update_cache+0x12>
    7f54:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
    7f56:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
    7f58:	b938      	cbnz	r0, 7f6a <update_cache+0x26>
	if (z_is_thread_prevented_from_running(_current)) {
    7f5a:	7b5a      	ldrb	r2, [r3, #13]
    7f5c:	06d2      	lsls	r2, r2, #27
    7f5e:	d104      	bne.n	7f6a <update_cache+0x26>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    7f60:	69a2      	ldr	r2, [r4, #24]
    7f62:	b912      	cbnz	r2, 7f6a <update_cache+0x26>
	if (is_preempt(_current) || is_metairq(thread)) {
    7f64:	89da      	ldrh	r2, [r3, #14]
    7f66:	2a7f      	cmp	r2, #127	; 0x7f
    7f68:	d805      	bhi.n	7f76 <update_cache+0x32>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
    7f6a:	429c      	cmp	r4, r3
    7f6c:	d002      	beq.n	7f74 <update_cache+0x30>
			z_reset_time_slice(thread);
    7f6e:	4620      	mov	r0, r4
    7f70:	f7ff ffd4 	bl	7f1c <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
    7f74:	4623      	mov	r3, r4
    7f76:	622b      	str	r3, [r5, #32]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
    7f78:	bd38      	pop	{r3, r4, r5, pc}
    7f7a:	bf00      	nop
    7f7c:	200022e0 	.word	0x200022e0

00007f80 <move_thread_to_end_of_prio_q>:
{
    7f80:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    7f82:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    7f86:	7b43      	ldrb	r3, [r0, #13]
    7f88:	2a00      	cmp	r2, #0
{
    7f8a:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    7f8c:	da04      	bge.n	7f98 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    7f8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    7f92:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
    7f94:	f001 fd2f 	bl	99f6 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    7f98:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
    7f9a:	4a15      	ldr	r2, [pc, #84]	; (7ff0 <move_thread_to_end_of_prio_q+0x70>)
    7f9c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    7fa0:	4610      	mov	r0, r2
    7fa2:	734b      	strb	r3, [r1, #13]
    7fa4:	f850 3f24 	ldr.w	r3, [r0, #36]!
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    7fa8:	6a94      	ldr	r4, [r2, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7faa:	4283      	cmp	r3, r0
    7fac:	bf08      	it	eq
    7fae:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    7fb0:	b923      	cbnz	r3, 7fbc <move_thread_to_end_of_prio_q+0x3c>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
    7fb2:	e9c1 0400 	strd	r0, r4, [r1]

	tail->next = node;
    7fb6:	6021      	str	r1, [r4, #0]
	list->tail = node;
    7fb8:	6291      	str	r1, [r2, #40]	; 0x28
}
    7fba:	e00c      	b.n	7fd6 <move_thread_to_end_of_prio_q+0x56>
	int32_t b1 = thread_1->base.prio;
    7fbc:	f991 500e 	ldrsb.w	r5, [r1, #14]
	int32_t b2 = thread_2->base.prio;
    7fc0:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
    7fc4:	42b5      	cmp	r5, r6
    7fc6:	d00e      	beq.n	7fe6 <move_thread_to_end_of_prio_q+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
    7fc8:	42ae      	cmp	r6, r5
    7fca:	dd0c      	ble.n	7fe6 <move_thread_to_end_of_prio_q+0x66>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    7fcc:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
    7fce:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
    7fd2:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    7fd4:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
    7fd6:	6890      	ldr	r0, [r2, #8]
    7fd8:	1a43      	subs	r3, r0, r1
    7fda:	4258      	negs	r0, r3
}
    7fdc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    7fe0:	4158      	adcs	r0, r3
    7fe2:	f7ff bfaf 	b.w	7f44 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    7fe6:	429c      	cmp	r4, r3
    7fe8:	d0e3      	beq.n	7fb2 <move_thread_to_end_of_prio_q+0x32>
    7fea:	681b      	ldr	r3, [r3, #0]
    7fec:	e7e0      	b.n	7fb0 <move_thread_to_end_of_prio_q+0x30>
    7fee:	bf00      	nop
    7ff0:	200022e0 	.word	0x200022e0

00007ff4 <ready_thread>:
{
    7ff4:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    7ff6:	f990 300d 	ldrsb.w	r3, [r0, #13]
    7ffa:	7b42      	ldrb	r2, [r0, #13]
    7ffc:	2b00      	cmp	r3, #0
    7ffe:	db29      	blt.n	8054 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x54>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    8000:	06d3      	lsls	r3, r2, #27
    8002:	d127      	bne.n	8054 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x54>
	return node->next != NULL;
    8004:	6983      	ldr	r3, [r0, #24]
    8006:	bb2b      	cbnz	r3, 8054 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x54>
	return list->head == list;
    8008:	4913      	ldr	r1, [pc, #76]	; (8058 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x58>)
	thread->base.thread_state |= _THREAD_QUEUED;
    800a:	f062 027f 	orn	r2, r2, #127	; 0x7f
    800e:	7342      	strb	r2, [r0, #13]
    8010:	460a      	mov	r2, r1
    8012:	f852 4f24 	ldr.w	r4, [r2, #36]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8016:	4294      	cmp	r4, r2
    8018:	bf18      	it	ne
    801a:	4623      	movne	r3, r4
	return (node == list->tail) ? NULL : node->next;
    801c:	6a8c      	ldr	r4, [r1, #40]	; 0x28
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    801e:	b923      	cbnz	r3, 802a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2a>
	node->prev = tail;
    8020:	e9c0 2400 	strd	r2, r4, [r0]
	tail->next = node;
    8024:	6020      	str	r0, [r4, #0]
	list->tail = node;
    8026:	6288      	str	r0, [r1, #40]	; 0x28
}
    8028:	e00c      	b.n	8044 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x44>
	int32_t b1 = thread_1->base.prio;
    802a:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    802e:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
    8032:	42b5      	cmp	r5, r6
    8034:	d00a      	beq.n	804c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4c>
		if (z_sched_prio_cmp(thread, t) > 0) {
    8036:	42ae      	cmp	r6, r5
    8038:	dd08      	ble.n	804c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4c>
	sys_dnode_t *const prev = successor->prev;
    803a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    803c:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
    8040:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    8042:	6058      	str	r0, [r3, #4]
}
    8044:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    8046:	2000      	movs	r0, #0
    8048:	f7ff bf7c 	b.w	7f44 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    804c:	42a3      	cmp	r3, r4
    804e:	d0e7      	beq.n	8020 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x20>
    8050:	681b      	ldr	r3, [r3, #0]
    8052:	e7e4      	b.n	801e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1e>
}
    8054:	bc70      	pop	{r4, r5, r6}
    8056:	4770      	bx	lr
    8058:	200022e0 	.word	0x200022e0

0000805c <unready_thread>:
{
    805c:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    805e:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    8062:	7b43      	ldrb	r3, [r0, #13]
    8064:	2a00      	cmp	r2, #0
{
    8066:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    8068:	da04      	bge.n	8074 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    806a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    806e:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    8070:	f001 fcc1 	bl	99f6 <sys_dlist_remove>
	update_cache(thread == _current);
    8074:	4b04      	ldr	r3, [pc, #16]	; (8088 <unready_thread+0x2c>)
    8076:	6898      	ldr	r0, [r3, #8]
    8078:	1a43      	subs	r3, r0, r1
    807a:	4258      	negs	r0, r3
    807c:	4158      	adcs	r0, r3
}
    807e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    8082:	f7ff bf5f 	b.w	7f44 <update_cache>
    8086:	bf00      	nop
    8088:	200022e0 	.word	0x200022e0

0000808c <pend_locked>:
{
    808c:	b570      	push	{r4, r5, r6, lr}
    808e:	4615      	mov	r5, r2
    8090:	461c      	mov	r4, r3
    8092:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
    8094:	f001 fce3 	bl	9a5e <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    8098:	f1b4 3fff 	cmp.w	r4, #4294967295
    809c:	bf08      	it	eq
    809e:	f1b5 3fff 	cmpeq.w	r5, #4294967295
    80a2:	d008      	beq.n	80b6 <pend_locked+0x2a>
    80a4:	462a      	mov	r2, r5
    80a6:	4623      	mov	r3, r4
    80a8:	f106 0018 	add.w	r0, r6, #24
    80ac:	4902      	ldr	r1, [pc, #8]	; (80b8 <pend_locked+0x2c>)
}
    80ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    80b2:	f000 bae3 	b.w	867c <z_add_timeout>
    80b6:	bd70      	pop	{r4, r5, r6, pc}
    80b8:	00009a1b 	.word	0x00009a1b

000080bc <k_sched_time_slice_set>:
{
    80bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    80be:	4604      	mov	r4, r0
    80c0:	460d      	mov	r5, r1
	__asm__ volatile(
    80c2:	f04f 0320 	mov.w	r3, #32
    80c6:	f3ef 8711 	mrs	r7, BASEPRI
    80ca:	f383 8812 	msr	BASEPRI_MAX, r3
    80ce:	f3bf 8f6f 	isb	sy
			return (uint32_t)((t * to_hz + off) / from_hz);
    80d2:	2600      	movs	r6, #0
    80d4:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
    80d8:	f240 30e7 	movw	r0, #999	; 0x3e7
    80dc:	4631      	mov	r1, r6
    80de:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    80e2:	2300      	movs	r3, #0
    80e4:	fbe4 010c 	umlal	r0, r1, r4, ip
    80e8:	f7f8 fcf8 	bl	adc <__aeabi_uldivmod>
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    80ec:	42b4      	cmp	r4, r6
    80ee:	dd02      	ble.n	80f6 <k_sched_time_slice_set+0x3a>
			slice_ticks = MAX(2, slice_ticks);
    80f0:	2802      	cmp	r0, #2
    80f2:	bfb8      	it	lt
    80f4:	2002      	movlt	r0, #2
		slice_ticks = k_ms_to_ticks_ceil32(slice);
    80f6:	4a07      	ldr	r2, [pc, #28]	; (8114 <k_sched_time_slice_set+0x58>)
		_current_cpu->slice_ticks = 0;
    80f8:	4b07      	ldr	r3, [pc, #28]	; (8118 <k_sched_time_slice_set+0x5c>)
		slice_ticks = k_ms_to_ticks_ceil32(slice);
    80fa:	6010      	str	r0, [r2, #0]
		slice_max_prio = prio;
    80fc:	4a07      	ldr	r2, [pc, #28]	; (811c <k_sched_time_slice_set+0x60>)
		z_reset_time_slice(_current);
    80fe:	6898      	ldr	r0, [r3, #8]
		_current_cpu->slice_ticks = 0;
    8100:	611e      	str	r6, [r3, #16]
		slice_max_prio = prio;
    8102:	6015      	str	r5, [r2, #0]
		z_reset_time_slice(_current);
    8104:	f7ff ff0a 	bl	7f1c <z_reset_time_slice>
	__asm__ volatile(
    8108:	f387 8811 	msr	BASEPRI, r7
    810c:	f3bf 8f6f 	isb	sy
}
    8110:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8112:	bf00      	nop
    8114:	20002318 	.word	0x20002318
    8118:	200022e0 	.word	0x200022e0
    811c:	20002314 	.word	0x20002314

00008120 <z_time_slice>:
{
    8120:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    8122:	f04f 0320 	mov.w	r3, #32
    8126:	f3ef 8511 	mrs	r5, BASEPRI
    812a:	f383 8812 	msr	BASEPRI_MAX, r3
    812e:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    8132:	4b17      	ldr	r3, [pc, #92]	; (8190 <z_time_slice+0x70>)
    8134:	4a17      	ldr	r2, [pc, #92]	; (8194 <z_time_slice+0x74>)
    8136:	689c      	ldr	r4, [r3, #8]
    8138:	6811      	ldr	r1, [r2, #0]
    813a:	428c      	cmp	r4, r1
    813c:	d107      	bne.n	814e <z_time_slice+0x2e>
	z_reset_time_slice(curr);
    813e:	4620      	mov	r0, r4
    8140:	f7ff feec 	bl	7f1c <z_reset_time_slice>
	__asm__ volatile(
    8144:	f385 8811 	msr	BASEPRI, r5
    8148:	f3bf 8f6f 	isb	sy
}
    814c:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
    814e:	2100      	movs	r1, #0
    8150:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
    8152:	4a11      	ldr	r2, [pc, #68]	; (8198 <z_time_slice+0x78>)
	if (slice_time(_current) && sliceable(_current)) {
    8154:	6812      	ldr	r2, [r2, #0]
    8156:	b1c2      	cbz	r2, 818a <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
    8158:	89e2      	ldrh	r2, [r4, #14]
    815a:	2a7f      	cmp	r2, #127	; 0x7f
    815c:	d815      	bhi.n	818a <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
    815e:	7b62      	ldrb	r2, [r4, #13]
    8160:	06d2      	lsls	r2, r2, #27
    8162:	d112      	bne.n	818a <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    8164:	4a0d      	ldr	r2, [pc, #52]	; (819c <z_time_slice+0x7c>)
    8166:	f994 100e 	ldrsb.w	r1, [r4, #14]
    816a:	6812      	ldr	r2, [r2, #0]
    816c:	4291      	cmp	r1, r2
    816e:	db0c      	blt.n	818a <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
    8170:	4a0b      	ldr	r2, [pc, #44]	; (81a0 <z_time_slice+0x80>)
    8172:	4294      	cmp	r4, r2
    8174:	d009      	beq.n	818a <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
    8176:	691a      	ldr	r2, [r3, #16]
    8178:	4282      	cmp	r2, r0
    817a:	dc03      	bgt.n	8184 <z_time_slice+0x64>
		move_thread_to_end_of_prio_q(curr);
    817c:	4620      	mov	r0, r4
    817e:	f7ff feff 	bl	7f80 <move_thread_to_end_of_prio_q>
    8182:	e7dc      	b.n	813e <z_time_slice+0x1e>
			_current_cpu->slice_ticks -= ticks;
    8184:	1a12      	subs	r2, r2, r0
		_current_cpu->slice_ticks = 0;
    8186:	611a      	str	r2, [r3, #16]
    8188:	e7dc      	b.n	8144 <z_time_slice+0x24>
    818a:	2200      	movs	r2, #0
    818c:	e7fb      	b.n	8186 <z_time_slice+0x66>
    818e:	bf00      	nop
    8190:	200022e0 	.word	0x200022e0
    8194:	20002310 	.word	0x20002310
    8198:	20002318 	.word	0x20002318
    819c:	20002314 	.word	0x20002314
    81a0:	20000100 	.word	0x20000100

000081a4 <z_pend_curr>:
{
    81a4:	b570      	push	{r4, r5, r6, lr}
	pending_current = _current;
    81a6:	480c      	ldr	r0, [pc, #48]	; (81d8 <z_pend_curr+0x34>)
    81a8:	4d0c      	ldr	r5, [pc, #48]	; (81dc <z_pend_curr+0x38>)
    81aa:	6886      	ldr	r6, [r0, #8]
    81ac:	602e      	str	r6, [r5, #0]
{
    81ae:	460c      	mov	r4, r1
    81b0:	4611      	mov	r1, r2
    81b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
	__asm__ volatile(
    81b6:	f04f 0620 	mov.w	r6, #32
    81ba:	f3ef 8511 	mrs	r5, BASEPRI
    81be:	f386 8812 	msr	BASEPRI_MAX, r6
    81c2:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
    81c6:	6880      	ldr	r0, [r0, #8]
    81c8:	f7ff ff60 	bl	808c <pend_locked>
	ret = arch_swap(key);
    81cc:	4620      	mov	r0, r4
}
    81ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    81d2:	f7fc bf23 	b.w	501c <arch_swap>
    81d6:	bf00      	nop
    81d8:	200022e0 	.word	0x200022e0
    81dc:	20002310 	.word	0x20002310

000081e0 <z_set_prio>:
{
    81e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    81e2:	4604      	mov	r4, r0
    81e4:	f04f 0320 	mov.w	r3, #32
    81e8:	f3ef 8611 	mrs	r6, BASEPRI
    81ec:	f383 8812 	msr	BASEPRI_MAX, r3
    81f0:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
    81f4:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    81f6:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
    81f8:	b249      	sxtb	r1, r1
    81fa:	d119      	bne.n	8230 <z_set_prio+0x50>
	return node->next != NULL;
    81fc:	6985      	ldr	r5, [r0, #24]
    81fe:	b9bd      	cbnz	r5, 8230 <z_set_prio+0x50>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    8200:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    8204:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    8206:	f001 fbf6 	bl	99f6 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    820a:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
    820c:	4a16      	ldr	r2, [pc, #88]	; (8268 <z_set_prio+0x88>)
				thread->base.prio = prio;
    820e:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    8210:	f063 037f 	orn	r3, r3, #127	; 0x7f
    8214:	7343      	strb	r3, [r0, #13]
    8216:	4613      	mov	r3, r2
    8218:	f853 0f24 	ldr.w	r0, [r3, #36]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    821c:	4298      	cmp	r0, r3
    821e:	bf18      	it	ne
    8220:	4605      	movne	r5, r0
	return (node == list->tail) ? NULL : node->next;
    8222:	6a90      	ldr	r0, [r2, #40]	; 0x28
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8224:	b95d      	cbnz	r5, 823e <z_set_prio+0x5e>
	node->prev = tail;
    8226:	e9c4 3000 	strd	r3, r0, [r4]
	tail->next = node;
    822a:	6004      	str	r4, [r0, #0]
	list->tail = node;
    822c:	6294      	str	r4, [r2, #40]	; 0x28
}
    822e:	e011      	b.n	8254 <z_set_prio+0x74>
			thread->base.prio = prio;
    8230:	73a1      	strb	r1, [r4, #14]
    8232:	2000      	movs	r0, #0
	__asm__ volatile(
    8234:	f386 8811 	msr	BASEPRI, r6
    8238:	f3bf 8f6f 	isb	sy
}
    823c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int32_t b2 = thread_2->base.prio;
    823e:	f995 700e 	ldrsb.w	r7, [r5, #14]
	if (b1 != b2) {
    8242:	42b9      	cmp	r1, r7
    8244:	d00b      	beq.n	825e <z_set_prio+0x7e>
		if (z_sched_prio_cmp(thread, t) > 0) {
    8246:	428f      	cmp	r7, r1
    8248:	dd09      	ble.n	825e <z_set_prio+0x7e>
	sys_dnode_t *const prev = successor->prev;
    824a:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
    824c:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
    8250:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    8252:	606c      	str	r4, [r5, #4]
			update_cache(1);
    8254:	2001      	movs	r0, #1
    8256:	f7ff fe75 	bl	7f44 <update_cache>
    825a:	2001      	movs	r0, #1
    825c:	e7ea      	b.n	8234 <z_set_prio+0x54>
	return (node == list->tail) ? NULL : node->next;
    825e:	42a8      	cmp	r0, r5
    8260:	d0e1      	beq.n	8226 <z_set_prio+0x46>
    8262:	682d      	ldr	r5, [r5, #0]
    8264:	e7de      	b.n	8224 <z_set_prio+0x44>
    8266:	bf00      	nop
    8268:	200022e0 	.word	0x200022e0

0000826c <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    826c:	b949      	cbnz	r1, 8282 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    826e:	f3ef 8005 	mrs	r0, IPSR
    8272:	b930      	cbnz	r0, 8282 <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
    8274:	4b05      	ldr	r3, [pc, #20]	; (828c <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
    8276:	6a1a      	ldr	r2, [r3, #32]
    8278:	689b      	ldr	r3, [r3, #8]
    827a:	429a      	cmp	r2, r3
    827c:	d001      	beq.n	8282 <z_reschedule+0x16>
    827e:	f7fc becd 	b.w	501c <arch_swap>
    8282:	f381 8811 	msr	BASEPRI, r1
    8286:	f3bf 8f6f 	isb	sy
}
    828a:	4770      	bx	lr
    828c:	200022e0 	.word	0x200022e0

00008290 <z_sched_start>:
{
    8290:	b510      	push	{r4, lr}
	__asm__ volatile(
    8292:	f04f 0220 	mov.w	r2, #32
    8296:	f3ef 8411 	mrs	r4, BASEPRI
    829a:	f382 8812 	msr	BASEPRI_MAX, r2
    829e:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    82a2:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
    82a4:	0751      	lsls	r1, r2, #29
    82a6:	d404      	bmi.n	82b2 <z_sched_start+0x22>
	__asm__ volatile(
    82a8:	f384 8811 	msr	BASEPRI, r4
    82ac:	f3bf 8f6f 	isb	sy
}
    82b0:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    82b2:	f022 0204 	bic.w	r2, r2, #4
    82b6:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    82b8:	f7ff fe9c 	bl	7ff4 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    82bc:	4621      	mov	r1, r4
    82be:	4802      	ldr	r0, [pc, #8]	; (82c8 <z_sched_start+0x38>)
}
    82c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    82c4:	f7ff bfd2 	b.w	826c <z_reschedule>
    82c8:	20002739 	.word	0x20002739

000082cc <z_impl_k_thread_suspend>:
{
    82cc:	b570      	push	{r4, r5, r6, lr}
    82ce:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    82d0:	3018      	adds	r0, #24
    82d2:	f001 fc2e 	bl	9b32 <z_abort_timeout>
	__asm__ volatile(
    82d6:	f04f 0320 	mov.w	r3, #32
    82da:	f3ef 8611 	mrs	r6, BASEPRI
    82de:	f383 8812 	msr	BASEPRI_MAX, r3
    82e2:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    82e6:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
    82ea:	7b63      	ldrb	r3, [r4, #13]
    82ec:	2a00      	cmp	r2, #0
    82ee:	da05      	bge.n	82fc <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    82f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    82f4:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    82f6:	4620      	mov	r0, r4
    82f8:	f001 fb7d 	bl	99f6 <sys_dlist_remove>
		update_cache(thread == _current);
    82fc:	4d0b      	ldr	r5, [pc, #44]	; (832c <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    82fe:	7b63      	ldrb	r3, [r4, #13]
    8300:	68a8      	ldr	r0, [r5, #8]
    8302:	f043 0310 	orr.w	r3, r3, #16
    8306:	7363      	strb	r3, [r4, #13]
    8308:	1b03      	subs	r3, r0, r4
    830a:	4258      	negs	r0, r3
    830c:	4158      	adcs	r0, r3
    830e:	f7ff fe19 	bl	7f44 <update_cache>
	__asm__ volatile(
    8312:	f386 8811 	msr	BASEPRI, r6
    8316:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    831a:	68ab      	ldr	r3, [r5, #8]
    831c:	42a3      	cmp	r3, r4
    831e:	d103      	bne.n	8328 <z_impl_k_thread_suspend+0x5c>
}
    8320:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    8324:	f001 bbfb 	b.w	9b1e <z_reschedule_unlocked>
}
    8328:	bd70      	pop	{r4, r5, r6, pc}
    832a:	bf00      	nop
    832c:	200022e0 	.word	0x200022e0

00008330 <k_sched_lock>:
	__asm__ volatile(
    8330:	f04f 0320 	mov.w	r3, #32
    8334:	f3ef 8111 	mrs	r1, BASEPRI
    8338:	f383 8812 	msr	BASEPRI_MAX, r3
    833c:	f3bf 8f6f 	isb	sy
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    8340:	4b04      	ldr	r3, [pc, #16]	; (8354 <k_sched_lock+0x24>)
    8342:	689a      	ldr	r2, [r3, #8]
    8344:	7bd3      	ldrb	r3, [r2, #15]
    8346:	3b01      	subs	r3, #1
    8348:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    834a:	f381 8811 	msr	BASEPRI, r1
    834e:	f3bf 8f6f 	isb	sy
}
    8352:	4770      	bx	lr
    8354:	200022e0 	.word	0x200022e0

00008358 <k_sched_unlock>:
{
    8358:	b510      	push	{r4, lr}
	__asm__ volatile(
    835a:	f04f 0320 	mov.w	r3, #32
    835e:	f3ef 8411 	mrs	r4, BASEPRI
    8362:	f383 8812 	msr	BASEPRI_MAX, r3
    8366:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    836a:	4b08      	ldr	r3, [pc, #32]	; (838c <k_sched_unlock+0x34>)
    836c:	689a      	ldr	r2, [r3, #8]
    836e:	7bd3      	ldrb	r3, [r2, #15]
    8370:	3301      	adds	r3, #1
    8372:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    8374:	2000      	movs	r0, #0
    8376:	f7ff fde5 	bl	7f44 <update_cache>
	__asm__ volatile(
    837a:	f384 8811 	msr	BASEPRI, r4
    837e:	f3bf 8f6f 	isb	sy
}
    8382:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    8386:	f001 bbca 	b.w	9b1e <z_reschedule_unlocked>
    838a:	bf00      	nop
    838c:	200022e0 	.word	0x200022e0

00008390 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    8390:	4b04      	ldr	r3, [pc, #16]	; (83a4 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    8392:	2100      	movs	r1, #0
    8394:	f103 0224 	add.w	r2, r3, #36	; 0x24
	list->tail = (sys_dnode_t *)list;
    8398:	e9c3 2209 	strd	r2, r2, [r3, #36]	; 0x24
    839c:	4608      	mov	r0, r1
    839e:	f7ff be8d 	b.w	80bc <k_sched_time_slice_set>
    83a2:	bf00      	nop
    83a4:	200022e0 	.word	0x200022e0

000083a8 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
    83a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    83aa:	f04f 0320 	mov.w	r3, #32
    83ae:	f3ef 8511 	mrs	r5, BASEPRI
    83b2:	f383 8812 	msr	BASEPRI_MAX, r3
    83b6:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    83ba:	4919      	ldr	r1, [pc, #100]	; (8420 <z_impl_k_yield+0x78>)
    83bc:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    83be:	7b43      	ldrb	r3, [r0, #13]
    83c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    83c4:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    83c6:	f001 fb16 	bl	99f6 <sys_dlist_remove>
	}
	queue_thread(_current);
    83ca:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    83cc:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
    83ce:	4608      	mov	r0, r1
    83d0:	f062 027f 	orn	r2, r2, #127	; 0x7f
    83d4:	735a      	strb	r2, [r3, #13]
    83d6:	f850 2f24 	ldr.w	r2, [r0, #36]!
	return (node == list->tail) ? NULL : node->next;
    83da:	6a8c      	ldr	r4, [r1, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
    83dc:	4282      	cmp	r2, r0
    83de:	bf08      	it	eq
    83e0:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    83e2:	b922      	cbnz	r2, 83ee <z_impl_k_yield+0x46>
	node->prev = tail;
    83e4:	e9c3 0400 	strd	r0, r4, [r3]
	tail->next = node;
    83e8:	6023      	str	r3, [r4, #0]
	list->tail = node;
    83ea:	628b      	str	r3, [r1, #40]	; 0x28
}
    83ec:	e00c      	b.n	8408 <z_impl_k_yield+0x60>
	int32_t b1 = thread_1->base.prio;
    83ee:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
    83f2:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
    83f6:	42be      	cmp	r6, r7
    83f8:	d00e      	beq.n	8418 <z_impl_k_yield+0x70>
		if (z_sched_prio_cmp(thread, t) > 0) {
    83fa:	42b7      	cmp	r7, r6
    83fc:	dd0c      	ble.n	8418 <z_impl_k_yield+0x70>
	sys_dnode_t *const prev = successor->prev;
    83fe:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    8400:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
    8404:	600b      	str	r3, [r1, #0]
	successor->prev = node;
    8406:	6053      	str	r3, [r2, #4]
	update_cache(1);
    8408:	2001      	movs	r0, #1
    840a:	f7ff fd9b 	bl	7f44 <update_cache>
    840e:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
    8410:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    8414:	f7fc be02 	b.w	501c <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    8418:	42a2      	cmp	r2, r4
    841a:	d0e3      	beq.n	83e4 <z_impl_k_yield+0x3c>
    841c:	6812      	ldr	r2, [r2, #0]
    841e:	e7e0      	b.n	83e2 <z_impl_k_yield+0x3a>
    8420:	200022e0 	.word	0x200022e0

00008424 <z_tick_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	LOG_DBG("thread %p for %lu ticks", _current, (unsigned long)ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    8424:	ea50 0301 	orrs.w	r3, r0, r1
{
    8428:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    842c:	4605      	mov	r5, r0
    842e:	460e      	mov	r6, r1
	if (ticks == 0) {
    8430:	d103      	bne.n	843a <z_tick_sleep+0x16>
	z_impl_k_yield();
    8432:	f7ff ffb9 	bl	83a8 <z_impl_k_yield>
		k_yield();
		return 0;
    8436:	2000      	movs	r0, #0
    8438:	e02c      	b.n	8494 <z_tick_sleep+0x70>
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
	if (Z_TICK_ABS(ticks) <= 0) {
    843a:	1c83      	adds	r3, r0, #2
    843c:	f171 33ff 	sbcs.w	r3, r1, #4294967295
    8440:	db2a      	blt.n	8498 <z_tick_sleep+0x74>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    8442:	f001 fbb8 	bl	9bb6 <sys_clock_tick_get_32>
    8446:	182c      	adds	r4, r5, r0
    8448:	f04f 0320 	mov.w	r3, #32
    844c:	f3ef 8811 	mrs	r8, BASEPRI
    8450:	f383 8812 	msr	BASEPRI_MAX, r3
    8454:	f3bf 8f6f 	isb	sy
	}

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
    8458:	4f11      	ldr	r7, [pc, #68]	; (84a0 <z_tick_sleep+0x7c>)
    845a:	4b12      	ldr	r3, [pc, #72]	; (84a4 <z_tick_sleep+0x80>)
    845c:	68b8      	ldr	r0, [r7, #8]
    845e:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
    8460:	f7ff fdfc 	bl	805c <unready_thread>
	z_add_thread_timeout(_current, timeout);
    8464:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    8466:	4910      	ldr	r1, [pc, #64]	; (84a8 <z_tick_sleep+0x84>)
    8468:	462a      	mov	r2, r5
    846a:	4633      	mov	r3, r6
    846c:	3018      	adds	r0, #24
    846e:	f000 f905 	bl	867c <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    8472:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    8474:	7b53      	ldrb	r3, [r2, #13]
    8476:	f043 0310 	orr.w	r3, r3, #16
    847a:	7353      	strb	r3, [r2, #13]
    847c:	4640      	mov	r0, r8
    847e:	f7fc fdcd 	bl	501c <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    8482:	f001 fb98 	bl	9bb6 <sys_clock_tick_get_32>
    8486:	1a20      	subs	r0, r4, r0
    8488:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    848c:	2801      	cmp	r0, #1
    848e:	f173 0300 	sbcs.w	r3, r3, #0
    8492:	dbd0      	blt.n	8436 <z_tick_sleep+0x12>
		return ticks;
	}
#endif

	return 0;
}
    8494:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    8498:	f06f 0401 	mvn.w	r4, #1
    849c:	1a24      	subs	r4, r4, r0
    849e:	e7d3      	b.n	8448 <z_tick_sleep+0x24>
    84a0:	200022e0 	.word	0x200022e0
    84a4:	20002310 	.word	0x20002310
    84a8:	00009a1b 	.word	0x00009a1b

000084ac <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    84ac:	f1b1 3fff 	cmp.w	r1, #4294967295
    84b0:	bf08      	it	eq
    84b2:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
    84b6:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    84b8:	d106      	bne.n	84c8 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
    84ba:	4b08      	ldr	r3, [pc, #32]	; (84dc <z_impl_k_sleep+0x30>)
    84bc:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    84be:	f7ff ff05 	bl	82cc <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    84c2:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    84c6:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
    84c8:	f7ff ffac 	bl	8424 <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
    84cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    84d0:	fb80 0303 	smull	r0, r3, r0, r3
    84d4:	0bc0      	lsrs	r0, r0, #15
    84d6:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
    84da:	e7f4      	b.n	84c6 <z_impl_k_sleep+0x1a>
    84dc:	200022e0 	.word	0x200022e0

000084e0 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    84e0:	4b01      	ldr	r3, [pc, #4]	; (84e8 <z_impl_z_current_get+0x8>)
    84e2:	6898      	ldr	r0, [r3, #8]
    84e4:	4770      	bx	lr
    84e6:	bf00      	nop
    84e8:	200022e0 	.word	0x200022e0

000084ec <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    84ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    84f0:	4604      	mov	r4, r0
    84f2:	f04f 0320 	mov.w	r3, #32
    84f6:	f3ef 8611 	mrs	r6, BASEPRI
    84fa:	f383 8812 	msr	BASEPRI_MAX, r3
    84fe:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
    8502:	7b03      	ldrb	r3, [r0, #12]
    8504:	07d9      	lsls	r1, r3, #31
    8506:	d50b      	bpl.n	8520 <z_thread_abort+0x34>
	__asm__ volatile(
    8508:	f386 8811 	msr	BASEPRI, r6
    850c:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
    8510:	4040      	eors	r0, r0
    8512:	f380 8811 	msr	BASEPRI, r0
    8516:	f04f 0004 	mov.w	r0, #4
    851a:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    851c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    8520:	7b43      	ldrb	r3, [r0, #13]
    8522:	071a      	lsls	r2, r3, #28
    8524:	d504      	bpl.n	8530 <z_thread_abort+0x44>
    8526:	f386 8811 	msr	BASEPRI, r6
    852a:	f3bf 8f6f 	isb	sy
    852e:	e7f5      	b.n	851c <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    8530:	f023 0220 	bic.w	r2, r3, #32
    8534:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    8538:	09d2      	lsrs	r2, r2, #7
    853a:	d120      	bne.n	857e <z_thread_abort+0x92>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    853c:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
    853e:	68a3      	ldr	r3, [r4, #8]
    8540:	b113      	cbz	r3, 8548 <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
    8542:	4620      	mov	r0, r4
    8544:	f001 fa5f 	bl	9a06 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    8548:	f104 0018 	add.w	r0, r4, #24
    854c:	f001 faf1 	bl	9b32 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    8550:	f104 0758 	add.w	r7, r4, #88	; 0x58
    8554:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
    8558:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    855a:	42bd      	cmp	r5, r7
    855c:	d000      	beq.n	8560 <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    855e:	b9b5      	cbnz	r5, 858e <z_thread_abort+0xa2>
		update_cache(1);
    8560:	2001      	movs	r0, #1
    8562:	f7ff fcef 	bl	7f44 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    8566:	4b10      	ldr	r3, [pc, #64]	; (85a8 <z_thread_abort+0xbc>)
    8568:	689b      	ldr	r3, [r3, #8]
    856a:	42a3      	cmp	r3, r4
    856c:	d1db      	bne.n	8526 <z_thread_abort+0x3a>
    856e:	f3ef 8305 	mrs	r3, IPSR
    8572:	2b00      	cmp	r3, #0
    8574:	d1d7      	bne.n	8526 <z_thread_abort+0x3a>
    8576:	4630      	mov	r0, r6
    8578:	f7fc fd50 	bl	501c <arch_swap>
	return ret;
    857c:	e7d3      	b.n	8526 <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    857e:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    8582:	f043 0308 	orr.w	r3, r3, #8
    8586:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    8588:	f001 fa35 	bl	99f6 <sys_dlist_remove>
}
    858c:	e7d7      	b.n	853e <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
    858e:	4628      	mov	r0, r5
    8590:	f001 fa39 	bl	9a06 <unpend_thread_no_timeout>
    8594:	f105 0018 	add.w	r0, r5, #24
    8598:	f001 facb 	bl	9b32 <z_abort_timeout>
    859c:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
		ready_thread(thread);
    85a0:	4628      	mov	r0, r5
    85a2:	f7ff fd27 	bl	7ff4 <ready_thread>
    85a6:	e7d7      	b.n	8558 <z_thread_abort+0x6c>
    85a8:	200022e0 	.word	0x200022e0

000085ac <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    85ac:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    85ae:	4806      	ldr	r0, [pc, #24]	; (85c8 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    85b0:	4a06      	ldr	r2, [pc, #24]	; (85cc <z_data_copy+0x20>)
    85b2:	4907      	ldr	r1, [pc, #28]	; (85d0 <z_data_copy+0x24>)
    85b4:	1a12      	subs	r2, r2, r0
    85b6:	f001 fa05 	bl	99c4 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    85ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    85be:	4a05      	ldr	r2, [pc, #20]	; (85d4 <z_data_copy+0x28>)
    85c0:	4905      	ldr	r1, [pc, #20]	; (85d8 <z_data_copy+0x2c>)
    85c2:	4806      	ldr	r0, [pc, #24]	; (85dc <z_data_copy+0x30>)
    85c4:	f001 b9fe 	b.w	99c4 <z_early_memcpy>
    85c8:	20000000 	.word	0x20000000
    85cc:	200000e0 	.word	0x200000e0
    85d0:	0000ab80 	.word	0x0000ab80
    85d4:	00000000 	.word	0x00000000
    85d8:	0000ab80 	.word	0x0000ab80
    85dc:	20000000 	.word	0x20000000

000085e0 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    85e0:	4b03      	ldr	r3, [pc, #12]	; (85f0 <elapsed+0x10>)
    85e2:	681b      	ldr	r3, [r3, #0]
    85e4:	b90b      	cbnz	r3, 85ea <elapsed+0xa>
    85e6:	f7fe b8f3 	b.w	67d0 <sys_clock_elapsed>
}
    85ea:	2000      	movs	r0, #0
    85ec:	4770      	bx	lr
    85ee:	bf00      	nop
    85f0:	2000231c 	.word	0x2000231c

000085f4 <next_timeout>:

static int32_t next_timeout(void)
{
    85f4:	b510      	push	{r4, lr}
	return list->head == list;
    85f6:	4b11      	ldr	r3, [pc, #68]	; (863c <next_timeout+0x48>)
    85f8:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    85fa:	429c      	cmp	r4, r3
    85fc:	d10a      	bne.n	8614 <next_timeout+0x20>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    85fe:	f7ff ffef 	bl	85e0 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
    8602:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    8606:	4b0e      	ldr	r3, [pc, #56]	; (8640 <next_timeout+0x4c>)
    8608:	691b      	ldr	r3, [r3, #16]
    860a:	b113      	cbz	r3, 8612 <next_timeout+0x1e>
    860c:	4298      	cmp	r0, r3
    860e:	bfa8      	it	ge
    8610:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    8612:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
    8614:	f7ff ffe4 	bl	85e0 <elapsed>
	if ((to == NULL) ||
    8618:	2c00      	cmp	r4, #0
    861a:	d0f2      	beq.n	8602 <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    861c:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
    8620:	1a1b      	subs	r3, r3, r0
    8622:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
    8626:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    862a:	f172 0100 	sbcs.w	r1, r2, #0
    862e:	dae8      	bge.n	8602 <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
    8630:	2a00      	cmp	r2, #0
    8632:	bfac      	ite	ge
    8634:	4618      	movge	r0, r3
    8636:	2000      	movlt	r0, #0
    8638:	e7e5      	b.n	8606 <next_timeout+0x12>
    863a:	bf00      	nop
    863c:	200000b4 	.word	0x200000b4
    8640:	200022e0 	.word	0x200022e0

00008644 <remove_timeout>:
{
    8644:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    8646:	b170      	cbz	r0, 8666 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
    8648:	4b0b      	ldr	r3, [pc, #44]	; (8678 <remove_timeout+0x34>)
    864a:	685b      	ldr	r3, [r3, #4]
    864c:	4298      	cmp	r0, r3
    864e:	d00a      	beq.n	8666 <remove_timeout+0x22>
    8650:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
    8652:	b143      	cbz	r3, 8666 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    8654:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    8658:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    865c:	1912      	adds	r2, r2, r4
    865e:	eb41 0105 	adc.w	r1, r1, r5
    8662:	e9c3 2104 	strd	r2, r1, [r3, #16]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
    8666:	e9d0 3200 	ldrd	r3, r2, [r0]

	prev->next = next;
    866a:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    866c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    866e:	2300      	movs	r3, #0
	node->prev = NULL;
    8670:	e9c0 3300 	strd	r3, r3, [r0]
}
    8674:	bd30      	pop	{r4, r5, pc}
    8676:	bf00      	nop
    8678:	200000b4 	.word	0x200000b4

0000867c <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    867c:	f1b3 3fff 	cmp.w	r3, #4294967295
    8680:	bf08      	it	eq
    8682:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
    8686:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8688:	4604      	mov	r4, r0
    868a:	461d      	mov	r5, r3
    868c:	4616      	mov	r6, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    868e:	d061      	beq.n	8754 <z_add_timeout+0xd8>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    8690:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
    8692:	f04f 0320 	mov.w	r3, #32
    8696:	f3ef 8711 	mrs	r7, BASEPRI
    869a:	f383 8812 	msr	BASEPRI_MAX, r3
    869e:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    86a2:	3201      	adds	r2, #1
    86a4:	f175 33ff 	sbcs.w	r3, r5, #4294967295
    86a8:	da24      	bge.n	86f4 <z_add_timeout+0x78>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    86aa:	4930      	ldr	r1, [pc, #192]	; (876c <z_add_timeout+0xf0>)
    86ac:	e9d1 2000 	ldrd	r2, r0, [r1]
    86b0:	f06f 0301 	mvn.w	r3, #1
    86b4:	1a9b      	subs	r3, r3, r2
    86b6:	f04f 32ff 	mov.w	r2, #4294967295
    86ba:	eb62 0000 	sbc.w	r0, r2, r0
    86be:	1b9e      	subs	r6, r3, r6
    86c0:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
    86c4:	2e01      	cmp	r6, #1
    86c6:	f170 0300 	sbcs.w	r3, r0, #0
    86ca:	da01      	bge.n	86d0 <z_add_timeout+0x54>
    86cc:	2601      	movs	r6, #1
    86ce:	2000      	movs	r0, #0
    86d0:	e9c4 6004 	strd	r6, r0, [r4, #16]
	return list->head == list;
    86d4:	4e26      	ldr	r6, [pc, #152]	; (8770 <z_add_timeout+0xf4>)
    86d6:	f8d6 c000 	ldr.w	ip, [r6]
	return (node == list->tail) ? NULL : node->next;
    86da:	6875      	ldr	r5, [r6, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    86dc:	45b4      	cmp	ip, r6
    86de:	bf08      	it	eq
    86e0:	f04f 0c00 	moveq.w	ip, #0
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
    86e4:	f1bc 0f00 	cmp.w	ip, #0
    86e8:	d10d      	bne.n	8706 <z_add_timeout+0x8a>
	node->prev = tail;
    86ea:	e9c4 6500 	strd	r6, r5, [r4]
	tail->next = node;
    86ee:	602c      	str	r4, [r5, #0]
	list->tail = node;
    86f0:	6074      	str	r4, [r6, #4]
}
    86f2:	e01c      	b.n	872e <z_add_timeout+0xb2>
			to->dticks = timeout.ticks + 1 + elapsed();
    86f4:	f7ff ff74 	bl	85e0 <elapsed>
    86f8:	3601      	adds	r6, #1
    86fa:	f145 0500 	adc.w	r5, r5, #0
    86fe:	1836      	adds	r6, r6, r0
    8700:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
    8704:	e7e4      	b.n	86d0 <z_add_timeout+0x54>
			if (t->dticks > to->dticks) {
    8706:	e9dc 2004 	ldrd	r2, r0, [ip, #16]
    870a:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
    870e:	4293      	cmp	r3, r2
    8710:	eb71 0e00 	sbcs.w	lr, r1, r0
    8714:	da1f      	bge.n	8756 <z_add_timeout+0xda>
				t->dticks -= to->dticks;
    8716:	1ad2      	subs	r2, r2, r3
	sys_dnode_t *const prev = successor->prev;
    8718:	f8dc 3004 	ldr.w	r3, [ip, #4]
    871c:	eb60 0001 	sbc.w	r0, r0, r1
    8720:	e9cc 2004 	strd	r2, r0, [ip, #16]
	node->next = successor;
    8724:	e9c4 c300 	strd	ip, r3, [r4]
	prev->next = node;
    8728:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    872a:	f8cc 4004 	str.w	r4, [ip, #4]
	return list->head == list;
    872e:	6833      	ldr	r3, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8730:	42b3      	cmp	r3, r6
    8732:	d00b      	beq.n	874c <z_add_timeout+0xd0>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    8734:	429c      	cmp	r4, r3
    8736:	d109      	bne.n	874c <z_add_timeout+0xd0>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    8738:	f7ff ff5c 	bl	85f4 <next_timeout>

			if (next_time == 0 ||
    873c:	b118      	cbz	r0, 8746 <z_add_timeout+0xca>
			    _current_cpu->slice_ticks != next_time) {
    873e:	4b0d      	ldr	r3, [pc, #52]	; (8774 <z_add_timeout+0xf8>)
			if (next_time == 0 ||
    8740:	691b      	ldr	r3, [r3, #16]
    8742:	4283      	cmp	r3, r0
    8744:	d002      	beq.n	874c <z_add_timeout+0xd0>
				sys_clock_set_timeout(next_time, false);
    8746:	2100      	movs	r1, #0
    8748:	f7fe f810 	bl	676c <sys_clock_set_timeout>
	__asm__ volatile(
    874c:	f387 8811 	msr	BASEPRI, r7
    8750:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    8754:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
    8756:	1a9b      	subs	r3, r3, r2
    8758:	eb61 0100 	sbc.w	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
    875c:	45ac      	cmp	ip, r5
    875e:	e9c4 3104 	strd	r3, r1, [r4, #16]
    8762:	d0c2      	beq.n	86ea <z_add_timeout+0x6e>
    8764:	f8dc c000 	ldr.w	ip, [ip]
    8768:	e7bc      	b.n	86e4 <z_add_timeout+0x68>
    876a:	bf00      	nop
    876c:	20000280 	.word	0x20000280
    8770:	200000b4 	.word	0x200000b4
    8774:	200022e0 	.word	0x200022e0

00008778 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
    8778:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    877c:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    877e:	f7ff fccf 	bl	8120 <z_time_slice>
	__asm__ volatile(
    8782:	f04f 0320 	mov.w	r3, #32
    8786:	f3ef 8611 	mrs	r6, BASEPRI
    878a:	f383 8812 	msr	BASEPRI_MAX, r3
    878e:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    8792:	4f23      	ldr	r7, [pc, #140]	; (8820 <sys_clock_announce+0xa8>)
	return list->head == list;
    8794:	f8df 8090 	ldr.w	r8, [pc, #144]	; 8828 <sys_clock_announce+0xb0>
    8798:	f8d8 0000 	ldr.w	r0, [r8]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    879c:	4a21      	ldr	r2, [pc, #132]	; (8824 <sys_clock_announce+0xac>)
	announce_remaining = ticks;
    879e:	603c      	str	r4, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    87a0:	4540      	cmp	r0, r8
		curr_tick += dt;
    87a2:	e9d2 3e00 	ldrd	r3, lr, [r2]
    87a6:	ea4f 71e4 	mov.w	r1, r4, asr #31
    87aa:	d00b      	beq.n	87c4 <sys_clock_announce+0x4c>
	while (first() != NULL && first()->dticks <= announce_remaining) {
    87ac:	b150      	cbz	r0, 87c4 <sys_clock_announce+0x4c>
    87ae:	e9d0 5c04 	ldrd	r5, ip, [r0, #16]
    87b2:	42ac      	cmp	r4, r5
    87b4:	eb71 090c 	sbcs.w	r9, r1, ip
    87b8:	da16      	bge.n	87e8 <sys_clock_announce+0x70>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    87ba:	1b2d      	subs	r5, r5, r4
    87bc:	eb6c 0c01 	sbc.w	ip, ip, r1
    87c0:	e9c0 5c04 	strd	r5, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
    87c4:	18e3      	adds	r3, r4, r3
    87c6:	eb4e 0101 	adc.w	r1, lr, r1
	announce_remaining = 0;
    87ca:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
    87cc:	e9c2 3100 	strd	r3, r1, [r2]
	announce_remaining = 0;
    87d0:	603c      	str	r4, [r7, #0]

	sys_clock_set_timeout(next_timeout(), false);
    87d2:	f7ff ff0f 	bl	85f4 <next_timeout>
    87d6:	4621      	mov	r1, r4
    87d8:	f7fd ffc8 	bl	676c <sys_clock_set_timeout>
	__asm__ volatile(
    87dc:	f386 8811 	msr	BASEPRI, r6
    87e0:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    87e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
    87e8:	18eb      	adds	r3, r5, r3
    87ea:	eb4e 71e5 	adc.w	r1, lr, r5, asr #31
    87ee:	e9c2 3100 	strd	r3, r1, [r2]
		t->dticks = 0;
    87f2:	2200      	movs	r2, #0
    87f4:	2300      	movs	r3, #0
    87f6:	e9c0 2304 	strd	r2, r3, [r0, #16]
		remove_timeout(t);
    87fa:	f7ff ff23 	bl	8644 <remove_timeout>
    87fe:	f386 8811 	msr	BASEPRI, r6
    8802:	f3bf 8f6f 	isb	sy
		t->fn(t);
    8806:	6883      	ldr	r3, [r0, #8]
    8808:	4798      	blx	r3
	__asm__ volatile(
    880a:	f04f 0320 	mov.w	r3, #32
    880e:	f3ef 8611 	mrs	r6, BASEPRI
    8812:	f383 8812 	msr	BASEPRI_MAX, r3
    8816:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
    881a:	683c      	ldr	r4, [r7, #0]
    881c:	1b64      	subs	r4, r4, r5
    881e:	e7bb      	b.n	8798 <sys_clock_announce+0x20>
    8820:	2000231c 	.word	0x2000231c
    8824:	20000280 	.word	0x20000280
    8828:	200000b4 	.word	0x200000b4

0000882c <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    882c:	b510      	push	{r4, lr}
    882e:	f04f 0320 	mov.w	r3, #32
    8832:	f3ef 8411 	mrs	r4, BASEPRI
    8836:	f383 8812 	msr	BASEPRI_MAX, r3
    883a:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
    883e:	f7ff fecf 	bl	85e0 <elapsed>
    8842:	4a06      	ldr	r2, [pc, #24]	; (885c <sys_clock_tick_get+0x30>)
    8844:	4603      	mov	r3, r0
    8846:	e9d2 0100 	ldrd	r0, r1, [r2]
    884a:	1818      	adds	r0, r3, r0
    884c:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
	__asm__ volatile(
    8850:	f384 8811 	msr	BASEPRI, r4
    8854:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    8858:	bd10      	pop	{r4, pc}
    885a:	bf00      	nop
    885c:	20000280 	.word	0x20000280

00008860 <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
    8860:	4801      	ldr	r0, [pc, #4]	; (8868 <boot_banner+0x8>)
    8862:	f000 bb77 	b.w	8f54 <printk>
    8866:	bf00      	nop
    8868:	0000aa51 	.word	0x0000aa51

0000886c <pow>:
    886c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8870:	ec59 8b10 	vmov	r8, r9, d0
    8874:	ec57 6b11 	vmov	r6, r7, d1
    8878:	f7fa fb8a 	bl	2f90 <__ieee754_pow>
    887c:	4b4f      	ldr	r3, [pc, #316]	; (89bc <pow+0x150>)
    887e:	f993 3000 	ldrsb.w	r3, [r3]
    8882:	3301      	adds	r3, #1
    8884:	ec55 4b10 	vmov	r4, r5, d0
    8888:	d015      	beq.n	88b6 <pow+0x4a>
    888a:	4632      	mov	r2, r6
    888c:	463b      	mov	r3, r7
    888e:	4630      	mov	r0, r6
    8890:	4639      	mov	r1, r7
    8892:	f7f8 f93d 	bl	b10 <__aeabi_dcmpun>
    8896:	b970      	cbnz	r0, 88b6 <pow+0x4a>
    8898:	4642      	mov	r2, r8
    889a:	464b      	mov	r3, r9
    889c:	4640      	mov	r0, r8
    889e:	4649      	mov	r1, r9
    88a0:	f7f8 f936 	bl	b10 <__aeabi_dcmpun>
    88a4:	2200      	movs	r2, #0
    88a6:	2300      	movs	r3, #0
    88a8:	b148      	cbz	r0, 88be <pow+0x52>
    88aa:	4630      	mov	r0, r6
    88ac:	4639      	mov	r1, r7
    88ae:	f7f8 f84b 	bl	948 <__aeabi_dcmpeq>
    88b2:	2800      	cmp	r0, #0
    88b4:	d17e      	bne.n	89b4 <pow+0x148>
    88b6:	ec45 4b10 	vmov	d0, r4, r5
    88ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    88be:	4640      	mov	r0, r8
    88c0:	4649      	mov	r1, r9
    88c2:	f7f8 f841 	bl	948 <__aeabi_dcmpeq>
    88c6:	b1e0      	cbz	r0, 8902 <pow+0x96>
    88c8:	2200      	movs	r2, #0
    88ca:	2300      	movs	r3, #0
    88cc:	4630      	mov	r0, r6
    88ce:	4639      	mov	r1, r7
    88d0:	f7f8 f83a 	bl	948 <__aeabi_dcmpeq>
    88d4:	2800      	cmp	r0, #0
    88d6:	d16d      	bne.n	89b4 <pow+0x148>
    88d8:	ec47 6b10 	vmov	d0, r6, r7
    88dc:	f001 f97c 	bl	9bd8 <finite>
    88e0:	2800      	cmp	r0, #0
    88e2:	d0e8      	beq.n	88b6 <pow+0x4a>
    88e4:	2200      	movs	r2, #0
    88e6:	2300      	movs	r3, #0
    88e8:	4630      	mov	r0, r6
    88ea:	4639      	mov	r1, r7
    88ec:	f7f8 f836 	bl	95c <__aeabi_dcmplt>
    88f0:	2800      	cmp	r0, #0
    88f2:	d0e0      	beq.n	88b6 <pow+0x4a>
    88f4:	f000 fd2a 	bl	934c <__errno>
    88f8:	2321      	movs	r3, #33	; 0x21
    88fa:	6003      	str	r3, [r0, #0]
    88fc:	4d30      	ldr	r5, [pc, #192]	; (89c0 <pow+0x154>)
    88fe:	2400      	movs	r4, #0
    8900:	e7d9      	b.n	88b6 <pow+0x4a>
    8902:	ec45 4b10 	vmov	d0, r4, r5
    8906:	f001 f967 	bl	9bd8 <finite>
    890a:	bbc0      	cbnz	r0, 897e <pow+0x112>
    890c:	ec49 8b10 	vmov	d0, r8, r9
    8910:	f001 f962 	bl	9bd8 <finite>
    8914:	b398      	cbz	r0, 897e <pow+0x112>
    8916:	ec47 6b10 	vmov	d0, r6, r7
    891a:	f001 f95d 	bl	9bd8 <finite>
    891e:	b370      	cbz	r0, 897e <pow+0x112>
    8920:	4622      	mov	r2, r4
    8922:	462b      	mov	r3, r5
    8924:	4620      	mov	r0, r4
    8926:	4629      	mov	r1, r5
    8928:	f7f8 f8f2 	bl	b10 <__aeabi_dcmpun>
    892c:	b160      	cbz	r0, 8948 <pow+0xdc>
    892e:	f000 fd0d 	bl	934c <__errno>
    8932:	2321      	movs	r3, #33	; 0x21
    8934:	6003      	str	r3, [r0, #0]
    8936:	2200      	movs	r2, #0
    8938:	2300      	movs	r3, #0
    893a:	4610      	mov	r0, r2
    893c:	4619      	mov	r1, r3
    893e:	f7f7 fec5 	bl	6cc <__aeabi_ddiv>
    8942:	4604      	mov	r4, r0
    8944:	460d      	mov	r5, r1
    8946:	e7b6      	b.n	88b6 <pow+0x4a>
    8948:	f000 fd00 	bl	934c <__errno>
    894c:	2322      	movs	r3, #34	; 0x22
    894e:	6003      	str	r3, [r0, #0]
    8950:	2200      	movs	r2, #0
    8952:	2300      	movs	r3, #0
    8954:	4640      	mov	r0, r8
    8956:	4649      	mov	r1, r9
    8958:	f7f8 f800 	bl	95c <__aeabi_dcmplt>
    895c:	b910      	cbnz	r0, 8964 <pow+0xf8>
    895e:	4d19      	ldr	r5, [pc, #100]	; (89c4 <pow+0x158>)
    8960:	2400      	movs	r4, #0
    8962:	e7a8      	b.n	88b6 <pow+0x4a>
    8964:	ec47 6b10 	vmov	d0, r6, r7
    8968:	f000 f91c 	bl	8ba4 <rint>
    896c:	4632      	mov	r2, r6
    896e:	ec51 0b10 	vmov	r0, r1, d0
    8972:	463b      	mov	r3, r7
    8974:	f7f7 ffe8 	bl	948 <__aeabi_dcmpeq>
    8978:	2800      	cmp	r0, #0
    897a:	d1f0      	bne.n	895e <pow+0xf2>
    897c:	e7be      	b.n	88fc <pow+0x90>
    897e:	2200      	movs	r2, #0
    8980:	2300      	movs	r3, #0
    8982:	4620      	mov	r0, r4
    8984:	4629      	mov	r1, r5
    8986:	f7f7 ffdf 	bl	948 <__aeabi_dcmpeq>
    898a:	2800      	cmp	r0, #0
    898c:	d093      	beq.n	88b6 <pow+0x4a>
    898e:	ec49 8b10 	vmov	d0, r8, r9
    8992:	f001 f921 	bl	9bd8 <finite>
    8996:	2800      	cmp	r0, #0
    8998:	d08d      	beq.n	88b6 <pow+0x4a>
    899a:	ec47 6b10 	vmov	d0, r6, r7
    899e:	f001 f91b 	bl	9bd8 <finite>
    89a2:	2800      	cmp	r0, #0
    89a4:	d087      	beq.n	88b6 <pow+0x4a>
    89a6:	f000 fcd1 	bl	934c <__errno>
    89aa:	2322      	movs	r3, #34	; 0x22
    89ac:	6003      	str	r3, [r0, #0]
    89ae:	2400      	movs	r4, #0
    89b0:	2500      	movs	r5, #0
    89b2:	e780      	b.n	88b6 <pow+0x4a>
    89b4:	4d04      	ldr	r5, [pc, #16]	; (89c8 <pow+0x15c>)
    89b6:	2400      	movs	r4, #0
    89b8:	e77d      	b.n	88b6 <pow+0x4a>
    89ba:	bf00      	nop
    89bc:	200000bd 	.word	0x200000bd
    89c0:	fff00000 	.word	0xfff00000
    89c4:	7ff00000 	.word	0x7ff00000
    89c8:	3ff00000 	.word	0x3ff00000

000089cc <sqrt>:
    89cc:	b538      	push	{r3, r4, r5, lr}
    89ce:	ed2d 8b02 	vpush	{d8}
    89d2:	ec55 4b10 	vmov	r4, r5, d0
    89d6:	f000 f82d 	bl	8a34 <__ieee754_sqrt>
    89da:	4b15      	ldr	r3, [pc, #84]	; (8a30 <sqrt+0x64>)
    89dc:	eeb0 8a40 	vmov.f32	s16, s0
    89e0:	eef0 8a60 	vmov.f32	s17, s1
    89e4:	f993 3000 	ldrsb.w	r3, [r3]
    89e8:	3301      	adds	r3, #1
    89ea:	d019      	beq.n	8a20 <sqrt+0x54>
    89ec:	4622      	mov	r2, r4
    89ee:	462b      	mov	r3, r5
    89f0:	4620      	mov	r0, r4
    89f2:	4629      	mov	r1, r5
    89f4:	f7f8 f88c 	bl	b10 <__aeabi_dcmpun>
    89f8:	b990      	cbnz	r0, 8a20 <sqrt+0x54>
    89fa:	2200      	movs	r2, #0
    89fc:	2300      	movs	r3, #0
    89fe:	4620      	mov	r0, r4
    8a00:	4629      	mov	r1, r5
    8a02:	f7f7 ffab 	bl	95c <__aeabi_dcmplt>
    8a06:	b158      	cbz	r0, 8a20 <sqrt+0x54>
    8a08:	f000 fca0 	bl	934c <__errno>
    8a0c:	2321      	movs	r3, #33	; 0x21
    8a0e:	6003      	str	r3, [r0, #0]
    8a10:	2200      	movs	r2, #0
    8a12:	2300      	movs	r3, #0
    8a14:	4610      	mov	r0, r2
    8a16:	4619      	mov	r1, r3
    8a18:	f7f7 fe58 	bl	6cc <__aeabi_ddiv>
    8a1c:	ec41 0b18 	vmov	d8, r0, r1
    8a20:	eeb0 0a48 	vmov.f32	s0, s16
    8a24:	eef0 0a68 	vmov.f32	s1, s17
    8a28:	ecbd 8b02 	vpop	{d8}
    8a2c:	bd38      	pop	{r3, r4, r5, pc}
    8a2e:	bf00      	nop
    8a30:	200000bd 	.word	0x200000bd

00008a34 <__ieee754_sqrt>:
    8a34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8a38:	4a59      	ldr	r2, [pc, #356]	; (8ba0 <__ieee754_sqrt+0x16c>)
    8a3a:	ec55 4b10 	vmov	r4, r5, d0
    8a3e:	43aa      	bics	r2, r5
    8a40:	462b      	mov	r3, r5
    8a42:	4620      	mov	r0, r4
    8a44:	d10f      	bne.n	8a66 <__ieee754_sqrt+0x32>
    8a46:	4622      	mov	r2, r4
    8a48:	4629      	mov	r1, r5
    8a4a:	f7f7 fd15 	bl	478 <__aeabi_dmul>
    8a4e:	4602      	mov	r2, r0
    8a50:	460b      	mov	r3, r1
    8a52:	4620      	mov	r0, r4
    8a54:	4629      	mov	r1, r5
    8a56:	f7f7 fb59 	bl	10c <__adddf3>
    8a5a:	4604      	mov	r4, r0
    8a5c:	460d      	mov	r5, r1
    8a5e:	ec45 4b10 	vmov	d0, r4, r5
    8a62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8a66:	2d00      	cmp	r5, #0
    8a68:	dc0d      	bgt.n	8a86 <__ieee754_sqrt+0x52>
    8a6a:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
    8a6e:	4322      	orrs	r2, r4
    8a70:	d0f5      	beq.n	8a5e <__ieee754_sqrt+0x2a>
    8a72:	b195      	cbz	r5, 8a9a <__ieee754_sqrt+0x66>
    8a74:	4622      	mov	r2, r4
    8a76:	4629      	mov	r1, r5
    8a78:	f7f7 fb46 	bl	108 <__aeabi_dsub>
    8a7c:	4602      	mov	r2, r0
    8a7e:	460b      	mov	r3, r1
    8a80:	f7f7 fe24 	bl	6cc <__aeabi_ddiv>
    8a84:	e7e9      	b.n	8a5a <__ieee754_sqrt+0x26>
    8a86:	152a      	asrs	r2, r5, #20
    8a88:	d115      	bne.n	8ab6 <__ieee754_sqrt+0x82>
    8a8a:	2100      	movs	r1, #0
    8a8c:	e009      	b.n	8aa2 <__ieee754_sqrt+0x6e>
    8a8e:	0ac3      	lsrs	r3, r0, #11
    8a90:	3a15      	subs	r2, #21
    8a92:	0540      	lsls	r0, r0, #21
    8a94:	2b00      	cmp	r3, #0
    8a96:	d0fa      	beq.n	8a8e <__ieee754_sqrt+0x5a>
    8a98:	e7f7      	b.n	8a8a <__ieee754_sqrt+0x56>
    8a9a:	462a      	mov	r2, r5
    8a9c:	e7fa      	b.n	8a94 <__ieee754_sqrt+0x60>
    8a9e:	005b      	lsls	r3, r3, #1
    8aa0:	3101      	adds	r1, #1
    8aa2:	02dd      	lsls	r5, r3, #11
    8aa4:	d5fb      	bpl.n	8a9e <__ieee754_sqrt+0x6a>
    8aa6:	1e4c      	subs	r4, r1, #1
    8aa8:	1b12      	subs	r2, r2, r4
    8aaa:	f1c1 0420 	rsb	r4, r1, #32
    8aae:	fa20 f404 	lsr.w	r4, r0, r4
    8ab2:	4323      	orrs	r3, r4
    8ab4:	4088      	lsls	r0, r1
    8ab6:	f3c3 0313 	ubfx	r3, r3, #0, #20
    8aba:	07d4      	lsls	r4, r2, #31
    8abc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    8ac0:	bf5c      	itt	pl
    8ac2:	005b      	lslpl	r3, r3, #1
    8ac4:	eb03 73d0 	addpl.w	r3, r3, r0, lsr #31
    8ac8:	f2a2 35ff 	subw	r5, r2, #1023	; 0x3ff
    8acc:	bf58      	it	pl
    8ace:	0040      	lslpl	r0, r0, #1
    8ad0:	005b      	lsls	r3, r3, #1
    8ad2:	2600      	movs	r6, #0
    8ad4:	106d      	asrs	r5, r5, #1
    8ad6:	eb03 73d0 	add.w	r3, r3, r0, lsr #31
    8ada:	0047      	lsls	r7, r0, #1
    8adc:	f04f 0e16 	mov.w	lr, #22
    8ae0:	46b0      	mov	r8, r6
    8ae2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    8ae6:	eb08 0102 	add.w	r1, r8, r2
    8aea:	4299      	cmp	r1, r3
    8aec:	bfde      	ittt	le
    8aee:	1a5b      	suble	r3, r3, r1
    8af0:	eb02 0801 	addle.w	r8, r2, r1
    8af4:	18b6      	addle	r6, r6, r2
    8af6:	005b      	lsls	r3, r3, #1
    8af8:	f1be 0e01 	subs.w	lr, lr, #1
    8afc:	eb03 73d7 	add.w	r3, r3, r7, lsr #31
    8b00:	ea4f 0252 	mov.w	r2, r2, lsr #1
    8b04:	ea4f 0747 	mov.w	r7, r7, lsl #1
    8b08:	d1ed      	bne.n	8ae6 <__ieee754_sqrt+0xb2>
    8b0a:	46f4      	mov	ip, lr
    8b0c:	2020      	movs	r0, #32
    8b0e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
    8b12:	4598      	cmp	r8, r3
    8b14:	eb01 020e 	add.w	r2, r1, lr
    8b18:	db2f      	blt.n	8b7a <__ieee754_sqrt+0x146>
    8b1a:	d10b      	bne.n	8b34 <__ieee754_sqrt+0x100>
    8b1c:	42ba      	cmp	r2, r7
    8b1e:	d809      	bhi.n	8b34 <__ieee754_sqrt+0x100>
    8b20:	2a00      	cmp	r2, #0
    8b22:	eb01 0e02 	add.w	lr, r1, r2
    8b26:	da02      	bge.n	8b2e <__ieee754_sqrt+0xfa>
    8b28:	f1be 0f00 	cmp.w	lr, #0
    8b2c:	da2c      	bge.n	8b88 <__ieee754_sqrt+0x154>
    8b2e:	2300      	movs	r3, #0
    8b30:	1abf      	subs	r7, r7, r2
    8b32:	448c      	add	ip, r1
    8b34:	005b      	lsls	r3, r3, #1
    8b36:	3801      	subs	r0, #1
    8b38:	eb03 73d7 	add.w	r3, r3, r7, lsr #31
    8b3c:	ea4f 0151 	mov.w	r1, r1, lsr #1
    8b40:	ea4f 0747 	mov.w	r7, r7, lsl #1
    8b44:	d1e5      	bne.n	8b12 <__ieee754_sqrt+0xde>
    8b46:	433b      	orrs	r3, r7
    8b48:	d008      	beq.n	8b5c <__ieee754_sqrt+0x128>
    8b4a:	f1bc 3fff 	cmp.w	ip, #4294967295
    8b4e:	bf13      	iteet	ne
    8b50:	f10c 0301 	addne.w	r3, ip, #1
    8b54:	3601      	addeq	r6, #1
    8b56:	4684      	moveq	ip, r0
    8b58:	f023 0c01 	bicne.w	ip, r3, #1
    8b5c:	1072      	asrs	r2, r6, #1
    8b5e:	ea4f 035c 	mov.w	r3, ip, lsr #1
    8b62:	07f1      	lsls	r1, r6, #31
    8b64:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
    8b68:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
    8b6c:	bf48      	it	mi
    8b6e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
    8b72:	eb02 5105 	add.w	r1, r2, r5, lsl #20
    8b76:	4618      	mov	r0, r3
    8b78:	e76f      	b.n	8a5a <__ieee754_sqrt+0x26>
    8b7a:	2a00      	cmp	r2, #0
    8b7c:	eb01 0e02 	add.w	lr, r1, r2
    8b80:	da0b      	bge.n	8b9a <__ieee754_sqrt+0x166>
    8b82:	f1be 0f00 	cmp.w	lr, #0
    8b86:	db08      	blt.n	8b9a <__ieee754_sqrt+0x166>
    8b88:	f108 0401 	add.w	r4, r8, #1
    8b8c:	42ba      	cmp	r2, r7
    8b8e:	eba3 0308 	sub.w	r3, r3, r8
    8b92:	d900      	bls.n	8b96 <__ieee754_sqrt+0x162>
    8b94:	3b01      	subs	r3, #1
    8b96:	46a0      	mov	r8, r4
    8b98:	e7ca      	b.n	8b30 <__ieee754_sqrt+0xfc>
    8b9a:	4644      	mov	r4, r8
    8b9c:	e7f6      	b.n	8b8c <__ieee754_sqrt+0x158>
    8b9e:	bf00      	nop
    8ba0:	7ff00000 	.word	0x7ff00000

00008ba4 <rint>:
    8ba4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    8ba6:	ec53 2b10 	vmov	r2, r3, d0
    8baa:	f3c3 500a 	ubfx	r0, r3, #20, #11
    8bae:	f2a0 35ff 	subw	r5, r0, #1023	; 0x3ff
    8bb2:	2d13      	cmp	r5, #19
    8bb4:	461c      	mov	r4, r3
    8bb6:	4611      	mov	r1, r2
    8bb8:	ea4f 76d3 	mov.w	r6, r3, lsr #31
    8bbc:	dc5b      	bgt.n	8c76 <rint+0xd2>
    8bbe:	2d00      	cmp	r5, #0
    8bc0:	da2f      	bge.n	8c22 <rint+0x7e>
    8bc2:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
    8bc6:	4310      	orrs	r0, r2
    8bc8:	d027      	beq.n	8c1a <rint+0x76>
    8bca:	f3c3 0513 	ubfx	r5, r3, #0, #20
    8bce:	4315      	orrs	r5, r2
    8bd0:	426b      	negs	r3, r5
    8bd2:	432b      	orrs	r3, r5
    8bd4:	4610      	mov	r0, r2
    8bd6:	0b1b      	lsrs	r3, r3, #12
    8bd8:	0c62      	lsrs	r2, r4, #17
    8bda:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
    8bde:	0452      	lsls	r2, r2, #17
    8be0:	ea43 0102 	orr.w	r1, r3, r2
    8be4:	460b      	mov	r3, r1
    8be6:	4933      	ldr	r1, [pc, #204]	; (8cb4 <rint+0x110>)
    8be8:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
    8bec:	e9d1 6700 	ldrd	r6, r7, [r1]
    8bf0:	4602      	mov	r2, r0
    8bf2:	4639      	mov	r1, r7
    8bf4:	4630      	mov	r0, r6
    8bf6:	f7f7 fa89 	bl	10c <__adddf3>
    8bfa:	e9cd 0100 	strd	r0, r1, [sp]
    8bfe:	463b      	mov	r3, r7
    8c00:	4632      	mov	r2, r6
    8c02:	e9dd 0100 	ldrd	r0, r1, [sp]
    8c06:	f7f7 fa7f 	bl	108 <__aeabi_dsub>
    8c0a:	f004 4400 	and.w	r4, r4, #2147483648	; 0x80000000
    8c0e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
    8c12:	ea44 0703 	orr.w	r7, r4, r3
    8c16:	4602      	mov	r2, r0
    8c18:	463b      	mov	r3, r7
    8c1a:	ec43 2b10 	vmov	d0, r2, r3
    8c1e:	b003      	add	sp, #12
    8c20:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8c22:	4825      	ldr	r0, [pc, #148]	; (8cb8 <rint+0x114>)
    8c24:	4128      	asrs	r0, r5
    8c26:	ea00 0703 	and.w	r7, r0, r3
    8c2a:	4317      	orrs	r7, r2
    8c2c:	d0f5      	beq.n	8c1a <rint+0x76>
    8c2e:	0843      	lsrs	r3, r0, #1
    8c30:	ea04 0050 	and.w	r0, r4, r0, lsr #1
    8c34:	4301      	orrs	r1, r0
    8c36:	d00a      	beq.n	8c4e <rint+0xaa>
    8c38:	f1a5 0213 	sub.w	r2, r5, #19
    8c3c:	ea24 0303 	bic.w	r3, r4, r3
    8c40:	4251      	negs	r1, r2
    8c42:	f44f 2480 	mov.w	r4, #262144	; 0x40000
    8c46:	4151      	adcs	r1, r2
    8c48:	412c      	asrs	r4, r5
    8c4a:	07c9      	lsls	r1, r1, #31
    8c4c:	431c      	orrs	r4, r3
    8c4e:	460a      	mov	r2, r1
    8c50:	4918      	ldr	r1, [pc, #96]	; (8cb4 <rint+0x110>)
    8c52:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
    8c56:	4623      	mov	r3, r4
    8c58:	e9d1 4500 	ldrd	r4, r5, [r1]
    8c5c:	4620      	mov	r0, r4
    8c5e:	4629      	mov	r1, r5
    8c60:	f7f7 fa54 	bl	10c <__adddf3>
    8c64:	e9cd 0100 	strd	r0, r1, [sp]
    8c68:	e9dd 0100 	ldrd	r0, r1, [sp]
    8c6c:	4622      	mov	r2, r4
    8c6e:	462b      	mov	r3, r5
    8c70:	f7f7 fa4a 	bl	108 <__aeabi_dsub>
    8c74:	e008      	b.n	8c88 <rint+0xe4>
    8c76:	2d33      	cmp	r5, #51	; 0x33
    8c78:	dd09      	ble.n	8c8e <rint+0xea>
    8c7a:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
    8c7e:	d1cc      	bne.n	8c1a <rint+0x76>
    8c80:	4610      	mov	r0, r2
    8c82:	4619      	mov	r1, r3
    8c84:	f7f7 fa42 	bl	10c <__adddf3>
    8c88:	4602      	mov	r2, r0
    8c8a:	460b      	mov	r3, r1
    8c8c:	e7c5      	b.n	8c1a <rint+0x76>
    8c8e:	f2a0 4513 	subw	r5, r0, #1043	; 0x413
    8c92:	f04f 30ff 	mov.w	r0, #4294967295
    8c96:	40e8      	lsrs	r0, r5
    8c98:	4202      	tst	r2, r0
    8c9a:	d0be      	beq.n	8c1a <rint+0x76>
    8c9c:	0843      	lsrs	r3, r0, #1
    8c9e:	ea11 0050 	ands.w	r0, r1, r0, lsr #1
    8ca2:	bf1f      	itttt	ne
    8ca4:	ea21 0303 	bicne.w	r3, r1, r3
    8ca8:	f04f 4180 	movne.w	r1, #1073741824	; 0x40000000
    8cac:	4129      	asrne	r1, r5
    8cae:	4319      	orrne	r1, r3
    8cb0:	e7cd      	b.n	8c4e <rint+0xaa>
    8cb2:	bf00      	nop
    8cb4:	00009f48 	.word	0x00009f48
    8cb8:	000fffff 	.word	0x000fffff

00008cbc <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
    8cbc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    8cbe:	ab0b      	add	r3, sp, #44	; 0x2c
    8cc0:	9305      	str	r3, [sp, #20]
    8cc2:	9303      	str	r3, [sp, #12]
    8cc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8cc6:	9302      	str	r3, [sp, #8]
    8cc8:	2300      	movs	r3, #0
    8cca:	e9cd 3300 	strd	r3, r3, [sp]
    8cce:	4618      	mov	r0, r3
    8cd0:	f7fb fce8 	bl	46a4 <z_impl_z_log_msg_runtime_vcreate>
}
    8cd4:	b007      	add	sp, #28
    8cd6:	f85d fb04 	ldr.w	pc, [sp], #4

00008cda <CheckAdjacentPixels>:
 static int CheckAdjacentPixels(uint16_t pix1, uint16_t pix2)
 {
     
     int pixPosDif;
     uint16_t lp1 = pix1 >> 5;
     uint16_t lp2 = pix2 >> 5;
    8cda:	094a      	lsrs	r2, r1, #5
     uint16_t cp1 = pix1 - (lp1 << 5);
     uint16_t cp2 = pix2 - (lp2 << 5);
     
     pixPosDif = lp1 - lp2;
    8cdc:	ebc2 1350 	rsb	r3, r2, r0, lsr #5
     if(pixPosDif > -2 && pixPosDif < 2)
    8ce0:	3301      	adds	r3, #1
    8ce2:	2b02      	cmp	r3, #2
 {
    8ce4:	b510      	push	{r4, lr}
     uint16_t lp1 = pix1 >> 5;
    8ce6:	ea4f 1450 	mov.w	r4, r0, lsr #5
     if(pixPosDif > -2 && pixPosDif < 2)
    8cea:	d80d      	bhi.n	8d08 <CheckAdjacentPixels+0x2e>
     uint16_t cp1 = pix1 - (lp1 << 5);
    8cec:	eba0 1044 	sub.w	r0, r0, r4, lsl #5
     uint16_t cp2 = pix2 - (lp2 << 5);
    8cf0:	eba1 1142 	sub.w	r1, r1, r2, lsl #5
     {
        pixPosDif = cp1 - cp2;
    8cf4:	b280      	uxth	r0, r0
    8cf6:	b289      	uxth	r1, r1
    8cf8:	1a40      	subs	r0, r0, r1
        if(pixPosDif > -2 && pixPosDif < 2)
    8cfa:	3001      	adds	r0, #1
        {
            return -6;
    8cfc:	2802      	cmp	r0, #2
    8cfe:	bf8c      	ite	hi
    8d00:	2000      	movhi	r0, #0
    8d02:	f06f 0005 	mvnls.w	r0, #5
        }

     } 
      
     return 0;    
 }
    8d06:	bd10      	pop	{r4, pc}
     return 0;    
    8d08:	2000      	movs	r0, #0
    8d0a:	e7fc      	b.n	8d06 <CheckAdjacentPixels+0x2c>

00008d0c <MLX90640_DumpEE>:
{
    8d0c:	460b      	mov	r3, r1
     return MLX90640_I2CRead(slaveAddr, MLX90640_EEPROM_START_ADDRESS, MLX90640_EEPROM_DUMP_NUM, eeData);
    8d0e:	f44f 7250 	mov.w	r2, #832	; 0x340
    8d12:	f44f 5110 	mov.w	r1, #9216	; 0x2400
    8d16:	f7fa bee9 	b.w	3aec <MLX90640_I2CRead>

00008d1a <MLX90640_SynchFrame>:
{
    8d1a:	b513      	push	{r0, r1, r4, lr}
    error = MLX90640_I2CWrite(slaveAddr, MLX90640_STATUS_REG, MLX90640_INIT_STATUS_VALUE);
    8d1c:	2230      	movs	r2, #48	; 0x30
    8d1e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
{
    8d22:	4604      	mov	r4, r0
    error = MLX90640_I2CWrite(slaveAddr, MLX90640_STATUS_REG, MLX90640_INIT_STATUS_VALUE);
    8d24:	f7fa ff32 	bl	3b8c <MLX90640_I2CWrite>
    if(error == -MLX90640_I2C_NACK_ERROR)
    8d28:	1c42      	adds	r2, r0, #1
    8d2a:	d00c      	beq.n	8d46 <MLX90640_SynchFrame+0x2c>
        error = MLX90640_I2CRead(slaveAddr, MLX90640_STATUS_REG, 1, &statusRegister);
    8d2c:	f10d 0306 	add.w	r3, sp, #6
    8d30:	2201      	movs	r2, #1
    8d32:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    8d36:	4620      	mov	r0, r4
    8d38:	f7fa fed8 	bl	3aec <MLX90640_I2CRead>
        if(error != MLX90640_NO_ERROR)
    8d3c:	b918      	cbnz	r0, 8d46 <MLX90640_SynchFrame+0x2c>
        dataReady = MLX90640_GET_DATA_READY(statusRegister); 
    8d3e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    while(dataReady == 0)
    8d42:	071b      	lsls	r3, r3, #28
    8d44:	d5f2      	bpl.n	8d2c <MLX90640_SynchFrame+0x12>
}
    8d46:	b002      	add	sp, #8
    8d48:	bd10      	pop	{r4, pc}

00008d4a <MLX90640_GetFrameData>:
{
    8d4a:	b570      	push	{r4, r5, r6, lr}
    8d4c:	4606      	mov	r6, r0
    8d4e:	b0a2      	sub	sp, #136	; 0x88
    8d50:	460c      	mov	r4, r1
        error = MLX90640_I2CRead(slaveAddr, MLX90640_STATUS_REG, 1, &statusRegister);
    8d52:	f10d 0306 	add.w	r3, sp, #6
    8d56:	2201      	movs	r2, #1
    8d58:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    8d5c:	4630      	mov	r0, r6
    8d5e:	f7fa fec5 	bl	3aec <MLX90640_I2CRead>
        if(error != MLX90640_NO_ERROR)
    8d62:	2800      	cmp	r0, #0
    8d64:	f040 8097 	bne.w	8e96 <MLX90640_GetFrameData+0x14c>
        dataReady = MLX90640_GET_DATA_READY(statusRegister); 
    8d68:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    while(dataReady == 0)
    8d6c:	071a      	lsls	r2, r3, #28
    8d6e:	d5f0      	bpl.n	8d52 <MLX90640_GetFrameData+0x8>
    error = MLX90640_I2CWrite(slaveAddr, MLX90640_STATUS_REG, MLX90640_INIT_STATUS_VALUE);
    8d70:	2230      	movs	r2, #48	; 0x30
    8d72:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    8d76:	4630      	mov	r0, r6
    8d78:	f7fa ff08 	bl	3b8c <MLX90640_I2CWrite>
    if(error == -MLX90640_I2C_NACK_ERROR)
    8d7c:	1c43      	adds	r3, r0, #1
    8d7e:	f000 808a 	beq.w	8e96 <MLX90640_GetFrameData+0x14c>
    error = MLX90640_I2CRead(slaveAddr, MLX90640_PIXEL_DATA_START_ADDRESS, MLX90640_PIXEL_NUM, frameData); 
    8d82:	4623      	mov	r3, r4
    8d84:	f44f 7240 	mov.w	r2, #768	; 0x300
    8d88:	f44f 6180 	mov.w	r1, #1024	; 0x400
    8d8c:	4630      	mov	r0, r6
    8d8e:	f7fa fead 	bl	3aec <MLX90640_I2CRead>
    if(error != MLX90640_NO_ERROR)
    8d92:	2800      	cmp	r0, #0
    8d94:	d17f      	bne.n	8e96 <MLX90640_GetFrameData+0x14c>
    error = MLX90640_I2CRead(slaveAddr, MLX90640_AUX_DATA_START_ADDRESS, MLX90640_AUX_NUM, data); 
    8d96:	ad02      	add	r5, sp, #8
    8d98:	462b      	mov	r3, r5
    8d9a:	2240      	movs	r2, #64	; 0x40
    8d9c:	f44f 61e0 	mov.w	r1, #1792	; 0x700
    8da0:	4630      	mov	r0, r6
    8da2:	f7fa fea3 	bl	3aec <MLX90640_I2CRead>
    if(error != MLX90640_NO_ERROR)
    8da6:	2800      	cmp	r0, #0
    8da8:	d175      	bne.n	8e96 <MLX90640_GetFrameData+0x14c>
    error = MLX90640_I2CRead(slaveAddr, MLX90640_CTRL_REG, 1, &controlRegister1);
    8daa:	ab01      	add	r3, sp, #4
    8dac:	2201      	movs	r2, #1
    8dae:	f248 010d 	movw	r1, #32781	; 0x800d
    8db2:	4630      	mov	r0, r6
    8db4:	f7fa fe9a 	bl	3aec <MLX90640_I2CRead>
    frameData[832] = controlRegister1;
    8db8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    8dbc:	f8a4 3680 	strh.w	r3, [r4, #1664]	; 0x680
    frameData[833] = MLX90640_GET_FRAME(statusRegister);
    8dc0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    8dc4:	f003 0301 	and.w	r3, r3, #1
    8dc8:	f8a4 3682 	strh.w	r3, [r4, #1666]	; 0x682
    if(error != MLX90640_NO_ERROR)
    8dcc:	2800      	cmp	r0, #0
    8dce:	d162      	bne.n	8e96 <MLX90640_GetFrameData+0x14c>
    if(auxData[0] == 0x7FFF) return -MLX90640_FRAME_DATA_ERROR;    
    8dd0:	f8bd 2008 	ldrh.w	r2, [sp, #8]
    8dd4:	f647 73ff 	movw	r3, #32767	; 0x7fff
    8dd8:	429a      	cmp	r2, r3
    8dda:	d047      	beq.n	8e6c <MLX90640_GetFrameData+0x122>
    for(int i=8; i<19; i++)
    8ddc:	2208      	movs	r2, #8
        if(auxData[i] == 0x7FFF) return -MLX90640_FRAME_DATA_ERROR;
    8dde:	f835 1012 	ldrh.w	r1, [r5, r2, lsl #1]
    8de2:	4299      	cmp	r1, r3
    8de4:	d042      	beq.n	8e6c <MLX90640_GetFrameData+0x122>
    for(int i=8; i<19; i++)
    8de6:	3201      	adds	r2, #1
    8de8:	2a13      	cmp	r2, #19
    8dea:	d1f8      	bne.n	8dde <MLX90640_GetFrameData+0x94>
        if(auxData[i] == 0x7FFF) return -MLX90640_FRAME_DATA_ERROR;
    8dec:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
    8df0:	429a      	cmp	r2, r3
    8df2:	d03b      	beq.n	8e6c <MLX90640_GetFrameData+0x122>
    8df4:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
    8df8:	429a      	cmp	r2, r3
    8dfa:	d037      	beq.n	8e6c <MLX90640_GetFrameData+0x122>
    8dfc:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
    8e00:	429a      	cmp	r2, r3
    8e02:	d033      	beq.n	8e6c <MLX90640_GetFrameData+0x122>
    for(int i=24; i<33; i++)
    8e04:	2318      	movs	r3, #24
        if(auxData[i] == 0x7FFF) return -MLX90640_FRAME_DATA_ERROR;
    8e06:	f647 72ff 	movw	r2, #32767	; 0x7fff
    8e0a:	f835 1013 	ldrh.w	r1, [r5, r3, lsl #1]
    8e0e:	4291      	cmp	r1, r2
    8e10:	d02c      	beq.n	8e6c <MLX90640_GetFrameData+0x122>
    for(int i=24; i<33; i++)
    8e12:	3301      	adds	r3, #1
    8e14:	2b21      	cmp	r3, #33	; 0x21
    8e16:	d1f8      	bne.n	8e0a <MLX90640_GetFrameData+0xc0>
    for(int i=40; i<51; i++)
    8e18:	2228      	movs	r2, #40	; 0x28
        if(auxData[i] == 0x7FFF) return -MLX90640_FRAME_DATA_ERROR;
    8e1a:	f647 73ff 	movw	r3, #32767	; 0x7fff
    8e1e:	f835 1012 	ldrh.w	r1, [r5, r2, lsl #1]
    8e22:	4299      	cmp	r1, r3
    8e24:	d022      	beq.n	8e6c <MLX90640_GetFrameData+0x122>
    for(int i=40; i<51; i++)
    8e26:	3201      	adds	r2, #1
    8e28:	2a33      	cmp	r2, #51	; 0x33
    8e2a:	d1f8      	bne.n	8e1e <MLX90640_GetFrameData+0xd4>
        if(auxData[i] == 0x7FFF) return -MLX90640_FRAME_DATA_ERROR;
    8e2c:	f8bd 2070 	ldrh.w	r2, [sp, #112]	; 0x70
    8e30:	429a      	cmp	r2, r3
    8e32:	d01b      	beq.n	8e6c <MLX90640_GetFrameData+0x122>
    8e34:	f8bd 2072 	ldrh.w	r2, [sp, #114]	; 0x72
    8e38:	429a      	cmp	r2, r3
    8e3a:	d017      	beq.n	8e6c <MLX90640_GetFrameData+0x122>
    8e3c:	f8bd 2074 	ldrh.w	r2, [sp, #116]	; 0x74
    8e40:	429a      	cmp	r2, r3
    8e42:	d013      	beq.n	8e6c <MLX90640_GetFrameData+0x122>
    for(int i=56; i<64; i++)
    8e44:	2338      	movs	r3, #56	; 0x38
        if(auxData[i] == 0x7FFF) return -MLX90640_FRAME_DATA_ERROR;
    8e46:	f647 72ff 	movw	r2, #32767	; 0x7fff
    8e4a:	f835 1013 	ldrh.w	r1, [r5, r3, lsl #1]
    8e4e:	4291      	cmp	r1, r2
    8e50:	d00c      	beq.n	8e6c <MLX90640_GetFrameData+0x122>
    for(int i=56; i<64; i++)
    8e52:	3301      	adds	r3, #1
    8e54:	2b40      	cmp	r3, #64	; 0x40
    8e56:	d1f8      	bne.n	8e4a <MLX90640_GetFrameData+0x100>
    if(error == MLX90640_NO_ERROR)
    8e58:	f204 53fe 	addw	r3, r4, #1534	; 0x5fe
    8e5c:	f204 627e 	addw	r2, r4, #1662	; 0x67e
            frameData[cnt+MLX90640_PIXEL_NUM] = data[cnt];
    8e60:	f835 1b02 	ldrh.w	r1, [r5], #2
    8e64:	f823 1f02 	strh.w	r1, [r3, #2]!
        for(cnt=0; cnt<MLX90640_AUX_NUM; cnt++)
    8e68:	4293      	cmp	r3, r2
    8e6a:	d1f9      	bne.n	8e60 <MLX90640_GetFrameData+0x116>
    for(int i=56; i<64; i++)
    8e6c:	2300      	movs	r3, #0
        if((frameData[i] == 0x7FFF) && (line%2 == frameData[833])) return -MLX90640_FRAME_DATA_ERROR;
    8e6e:	f647 71ff 	movw	r1, #32767	; 0x7fff
    8e72:	019a      	lsls	r2, r3, #6
    8e74:	5aa2      	ldrh	r2, [r4, r2]
    8e76:	428a      	cmp	r2, r1
    8e78:	d105      	bne.n	8e86 <MLX90640_GetFrameData+0x13c>
    8e7a:	f8b4 0682 	ldrh.w	r0, [r4, #1666]	; 0x682
    8e7e:	f003 0201 	and.w	r2, r3, #1
    8e82:	4282      	cmp	r2, r0
    8e84:	d005      	beq.n	8e92 <MLX90640_GetFrameData+0x148>
    for(int i=0; i<MLX90640_PIXEL_NUM; i+=MLX90640_LINE_SIZE)
    8e86:	3301      	adds	r3, #1
    8e88:	2b18      	cmp	r3, #24
    8e8a:	d1f2      	bne.n	8e72 <MLX90640_GetFrameData+0x128>
    return frameData[833];    
    8e8c:	f8b4 0682 	ldrh.w	r0, [r4, #1666]	; 0x682
    8e90:	e001      	b.n	8e96 <MLX90640_GetFrameData+0x14c>
        if((frameData[i] == 0x7FFF) && (line%2 == frameData[833])) return -MLX90640_FRAME_DATA_ERROR;
    8e92:	f06f 0007 	mvn.w	r0, #7
}
    8e96:	b022      	add	sp, #136	; 0x88
    8e98:	bd70      	pop	{r4, r5, r6, pc}

00008e9a <MLX90640_SetRefreshRate>:
{
    8e9a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    8e9c:	460c      	mov	r4, r1
    error = MLX90640_I2CRead(slaveAddr, MLX90640_CTRL_REG, 1, &controlRegister1);
    8e9e:	f10d 0306 	add.w	r3, sp, #6
    8ea2:	2201      	movs	r2, #1
    8ea4:	f248 010d 	movw	r1, #32781	; 0x800d
{
    8ea8:	4605      	mov	r5, r0
    error = MLX90640_I2CRead(slaveAddr, MLX90640_CTRL_REG, 1, &controlRegister1);
    8eaa:	f7fa fe1f 	bl	3aec <MLX90640_I2CRead>
    if(error == MLX90640_NO_ERROR)
    8eae:	b968      	cbnz	r0, 8ecc <MLX90640_SetRefreshRate+0x32>
        value = (controlRegister1 & MLX90640_CTRL_REFRESH_MASK) | value;
    8eb0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    value = ((uint16_t)refreshRate << MLX90640_CTRL_REFRESH_SHIFT);
    8eb4:	01e2      	lsls	r2, r4, #7
    value &= ~MLX90640_CTRL_REFRESH_MASK;
    8eb6:	f402 7260 	and.w	r2, r2, #896	; 0x380
        value = (controlRegister1 & MLX90640_CTRL_REFRESH_MASK) | value;
    8eba:	f423 7360 	bic.w	r3, r3, #896	; 0x380
    8ebe:	431a      	orrs	r2, r3
        error = MLX90640_I2CWrite(slaveAddr, MLX90640_CTRL_REG, value);
    8ec0:	b292      	uxth	r2, r2
    8ec2:	f248 010d 	movw	r1, #32781	; 0x800d
    8ec6:	4628      	mov	r0, r5
    8ec8:	f7fa fe60 	bl	3b8c <MLX90640_I2CWrite>
}
    8ecc:	b003      	add	sp, #12
    8ece:	bd30      	pop	{r4, r5, pc}

00008ed0 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
    8ed0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    8ed2:	ab0b      	add	r3, sp, #44	; 0x2c
    8ed4:	9305      	str	r3, [sp, #20]
    8ed6:	9303      	str	r3, [sp, #12]
    8ed8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8eda:	9302      	str	r3, [sp, #8]
    8edc:	2300      	movs	r3, #0
    8ede:	e9cd 3300 	strd	r3, r3, [sp]
    8ee2:	4618      	mov	r0, r3
    8ee4:	f7fb fbde 	bl	46a4 <z_impl_z_log_msg_runtime_vcreate>
}
    8ee8:	b007      	add	sp, #28
    8eea:	f85d fb04 	ldr.w	pc, [sp], #4

00008eee <cbpprintf_external>:
}

int cbpprintf_external(cbprintf_cb out,
		       cbvprintf_external_formatter_func formatter,
		       void *ctx, void *packaged)
{
    8eee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8ef2:	4606      	mov	r6, r0
    8ef4:	460d      	mov	r5, r1
    8ef6:	4617      	mov	r7, r2
	uint8_t *buf = packaged;
	struct cbprintf_package_hdr_ext *hdr = packaged;
	char *s, **ps;
	unsigned int i, args_size, s_nbr, ros_nbr, rws_nbr, s_idx;

	if (buf == NULL) {
    8ef8:	4698      	mov	r8, r3
    8efa:	b32b      	cbz	r3, 8f48 <cbpprintf_external+0x5a>
		return -EINVAL;
	}

	/* Retrieve the size of the arg list and number of strings. */
	args_size = hdr->hdr.desc.len * sizeof(int);
    8efc:	f898 4000 	ldrb.w	r4, [r8]
	s_nbr     = hdr->hdr.desc.str_cnt;
    8f00:	f893 9001 	ldrb.w	r9, [r3, #1]
	ros_nbr   = hdr->hdr.desc.ro_str_cnt;
	rws_nbr   = hdr->hdr.desc.rw_str_cnt;

	/* Locate the string table */
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
    8f04:	78db      	ldrb	r3, [r3, #3]
	args_size = hdr->hdr.desc.len * sizeof(int);
    8f06:	00a4      	lsls	r4, r4, #2
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
    8f08:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	ros_nbr   = hdr->hdr.desc.ro_str_cnt;
    8f0c:	f898 3002 	ldrb.w	r3, [r8, #2]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
    8f10:	441c      	add	r4, r3
    8f12:	4444      	add	r4, r8

	/*
	 * Patch in string pointers.
	 */
	for (i = 0; i < s_nbr; i++) {
    8f14:	f04f 0a00 	mov.w	sl, #0
    8f18:	45ca      	cmp	sl, r9
    8f1a:	d309      	bcc.n	8f30 <cbpprintf_external+0x42>
	return formatter(out, ctx, fmt, u.ap);
    8f1c:	f8d8 2004 	ldr.w	r2, [r8, #4]
    8f20:	f108 0308 	add.w	r3, r8, #8
    8f24:	4639      	mov	r1, r7
    8f26:	4630      	mov	r0, r6
    8f28:	46ac      	mov	ip, r5
	/* Skip past the header */
	buf += sizeof(*hdr);

	/* Turn this into a va_list and  print it */
	return cbprintf_via_va_list(out, formatter, ctx, hdr->fmt, buf);
}
    8f2a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return formatter(out, ctx, fmt, u.ap);
    8f2e:	4760      	bx	ip
		ps = (char **)(buf + s_idx * sizeof(int));
    8f30:	f814 3b01 	ldrb.w	r3, [r4], #1
		*ps = s;
    8f34:	f848 4023 	str.w	r4, [r8, r3, lsl #2]
		s += strlen(s) + 1;
    8f38:	4620      	mov	r0, r4
    8f3a:	f7f7 ff4f 	bl	ddc <strlen>
    8f3e:	3001      	adds	r0, #1
    8f40:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
    8f42:	f10a 0a01 	add.w	sl, sl, #1
    8f46:	e7e7      	b.n	8f18 <cbpprintf_external+0x2a>
}
    8f48:	f06f 0015 	mvn.w	r0, #21
    8f4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00008f50 <arch_printk_char_out>:
}
    8f50:	2000      	movs	r0, #0
    8f52:	4770      	bx	lr

00008f54 <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
    8f54:	b40f      	push	{r0, r1, r2, r3}
    8f56:	b507      	push	{r0, r1, r2, lr}
    8f58:	a904      	add	r1, sp, #16
    8f5a:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    8f5e:	9101      	str	r1, [sp, #4]
		z_log_vprintk(fmt, ap);
    8f60:	f000 f948 	bl	91f4 <z_log_vprintk>

	vprintk(fmt, ap);

	va_end(ap);
}
    8f64:	b003      	add	sp, #12
    8f66:	f85d eb04 	ldr.w	lr, [sp], #4
    8f6a:	b004      	add	sp, #16
    8f6c:	4770      	bx	lr

00008f6e <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    8f6e:	4604      	mov	r4, r0
    8f70:	b508      	push	{r3, lr}
    8f72:	4608      	mov	r0, r1
    8f74:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    8f76:	461a      	mov	r2, r3
    8f78:	47a0      	blx	r4
	return z_impl_z_current_get();
    8f7a:	f7ff fab1 	bl	84e0 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    8f7e:	f7fc fcd5 	bl	592c <z_impl_k_thread_abort>

00008f82 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    8f82:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    8f84:	f013 0307 	ands.w	r3, r3, #7
    8f88:	d105      	bne.n	8f96 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    8f8a:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
    8f8c:	2b00      	cmp	r3, #0
    8f8e:	bf0c      	ite	eq
    8f90:	2000      	moveq	r0, #0
    8f92:	2003      	movne	r0, #3
    8f94:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    8f96:	2b02      	cmp	r3, #2
    8f98:	d105      	bne.n	8fa6 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    8f9a:	8b40      	ldrh	r0, [r0, #26]
    8f9c:	fab0 f080 	clz	r0, r0
    8fa0:	0940      	lsrs	r0, r0, #5
    8fa2:	0080      	lsls	r0, r0, #2
    8fa4:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    8fa6:	2b01      	cmp	r3, #1
    8fa8:	d105      	bne.n	8fb6 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    8faa:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
    8fac:	2b00      	cmp	r3, #0
    8fae:	bf0c      	ite	eq
    8fb0:	2000      	moveq	r0, #0
    8fb2:	2005      	movne	r0, #5
    8fb4:	4770      	bx	lr
	int evt = EVT_NOP;
    8fb6:	2000      	movs	r0, #0
}
    8fb8:	4770      	bx	lr

00008fba <validate_args>:
{
    8fba:	b510      	push	{r4, lr}
    8fbc:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    8fbe:	b100      	cbz	r0, 8fc2 <validate_args+0x8>
    8fc0:	b911      	cbnz	r1, 8fc8 <validate_args+0xe>
		return -EINVAL;
    8fc2:	f06f 0015 	mvn.w	r0, #21
}
    8fc6:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
    8fc8:	1d08      	adds	r0, r1, #4
    8fca:	f000 f896 	bl	90fa <sys_notify_validate>
	if ((rv == 0)
    8fce:	2800      	cmp	r0, #0
    8fd0:	d1f9      	bne.n	8fc6 <validate_args+0xc>
	    && ((cli->notify.flags
    8fd2:	68a3      	ldr	r3, [r4, #8]
    8fd4:	2b03      	cmp	r3, #3
    8fd6:	d9f6      	bls.n	8fc6 <validate_args+0xc>
    8fd8:	e7f3      	b.n	8fc2 <validate_args+0x8>

00008fda <notify_one>:
{
    8fda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8fde:	460d      	mov	r5, r1
    8fe0:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    8fe2:	4619      	mov	r1, r3
    8fe4:	1d28      	adds	r0, r5, #4
{
    8fe6:	4690      	mov	r8, r2
    8fe8:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    8fea:	f000 f897 	bl	911c <sys_notify_finalize>
	if (cb) {
    8fee:	4604      	mov	r4, r0
    8ff0:	b138      	cbz	r0, 9002 <notify_one+0x28>
		cb(mgr, cli, state, res);
    8ff2:	4633      	mov	r3, r6
    8ff4:	4642      	mov	r2, r8
    8ff6:	4629      	mov	r1, r5
    8ff8:	4638      	mov	r0, r7
    8ffa:	46a4      	mov	ip, r4
}
    8ffc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    9000:	4760      	bx	ip
}
    9002:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00009006 <transition_complete>:
{
    9006:	b410      	push	{r4}
	__asm__ volatile(
    9008:	f04f 0420 	mov.w	r4, #32
    900c:	f3ef 8211 	mrs	r2, BASEPRI
    9010:	f384 8812 	msr	BASEPRI_MAX, r4
    9014:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    9018:	6141      	str	r1, [r0, #20]
}
    901a:	f85d 4b04 	ldr.w	r4, [sp], #4
	process_event(mgr, EVT_COMPLETE, key);
    901e:	2101      	movs	r1, #1
    9020:	f7fb b8cc 	b.w	41bc <process_event>

00009024 <onoff_manager_init>:
{
    9024:	b538      	push	{r3, r4, r5, lr}
    9026:	460c      	mov	r4, r1
	if ((mgr == NULL)
    9028:	4605      	mov	r5, r0
    902a:	b158      	cbz	r0, 9044 <onoff_manager_init+0x20>
	    || (transitions == NULL)
    902c:	b151      	cbz	r1, 9044 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    902e:	680b      	ldr	r3, [r1, #0]
    9030:	b143      	cbz	r3, 9044 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    9032:	684b      	ldr	r3, [r1, #4]
    9034:	b133      	cbz	r3, 9044 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    9036:	221c      	movs	r2, #28
    9038:	2100      	movs	r1, #0
    903a:	f000 fde6 	bl	9c0a <memset>
    903e:	612c      	str	r4, [r5, #16]
	return 0;
    9040:	2000      	movs	r0, #0
}
    9042:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    9044:	f06f 0015 	mvn.w	r0, #21
    9048:	e7fb      	b.n	9042 <onoff_manager_init+0x1e>

0000904a <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    904a:	b570      	push	{r4, r5, r6, lr}
    904c:	4605      	mov	r5, r0
    904e:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    9050:	f7ff ffb3 	bl	8fba <validate_args>

	if (rv < 0) {
    9054:	1e04      	subs	r4, r0, #0
    9056:	db15      	blt.n	9084 <onoff_request+0x3a>
    9058:	f04f 0320 	mov.w	r3, #32
    905c:	f3ef 8211 	mrs	r2, BASEPRI
    9060:	f383 8812 	msr	BASEPRI_MAX, r3
    9064:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    9068:	8b6b      	ldrh	r3, [r5, #26]
    906a:	8b2c      	ldrh	r4, [r5, #24]
    906c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    9070:	428b      	cmp	r3, r1
    9072:	f004 0407 	and.w	r4, r4, #7
    9076:	d107      	bne.n	9088 <onoff_request+0x3e>
	__asm__ volatile(
    9078:	f382 8811 	msr	BASEPRI, r2
    907c:	f3bf 8f6f 	isb	sy
		rv = -EAGAIN;
    9080:	f06f 040a 	mvn.w	r4, #10
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    9084:	4620      	mov	r0, r4
    9086:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
    9088:	2c02      	cmp	r4, #2
    908a:	d10c      	bne.n	90a6 <onoff_request+0x5c>
		mgr->refs += 1U;
    908c:	3301      	adds	r3, #1
    908e:	836b      	strh	r3, [r5, #26]
    9090:	f382 8811 	msr	BASEPRI, r2
    9094:	f3bf 8f6f 	isb	sy
			notify_one(mgr, cli, state, 0);
    9098:	2300      	movs	r3, #0
    909a:	4622      	mov	r2, r4
    909c:	4631      	mov	r1, r6
    909e:	4628      	mov	r0, r5
    90a0:	f7ff ff9b 	bl	8fda <notify_one>
    90a4:	e7ee      	b.n	9084 <onoff_request+0x3a>
	} else if ((state == ONOFF_STATE_OFF)
    90a6:	2c06      	cmp	r4, #6
    90a8:	d814      	bhi.n	90d4 <onoff_request+0x8a>
    90aa:	e8df f004 	tbb	[pc, r4]
    90ae:	1304      	.short	0x1304
    90b0:	1a041313 	.word	0x1a041313
    90b4:	04          	.byte	0x04
    90b5:	00          	.byte	0x00
	parent->next = child;
    90b6:	2300      	movs	r3, #0
    90b8:	6033      	str	r3, [r6, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    90ba:	686b      	ldr	r3, [r5, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    90bc:	b93b      	cbnz	r3, 90ce <onoff_request+0x84>
	list->head = node;
    90be:	e9c5 6600 	strd	r6, r6, [r5]
	if (start) {
    90c2:	b9ac      	cbnz	r4, 90f0 <onoff_request+0xa6>
		process_event(mgr, EVT_RECHECK, key);
    90c4:	2102      	movs	r1, #2
    90c6:	4628      	mov	r0, r5
    90c8:	f7fb f878 	bl	41bc <process_event>
    90cc:	e7da      	b.n	9084 <onoff_request+0x3a>
	parent->next = child;
    90ce:	601e      	str	r6, [r3, #0]
	list->tail = node;
    90d0:	606e      	str	r6, [r5, #4]
}
    90d2:	e7f6      	b.n	90c2 <onoff_request+0x78>
    90d4:	f382 8811 	msr	BASEPRI, r2
    90d8:	f3bf 8f6f 	isb	sy
		rv = -EIO;
    90dc:	f06f 0404 	mvn.w	r4, #4
    90e0:	e7d0      	b.n	9084 <onoff_request+0x3a>
    90e2:	f382 8811 	msr	BASEPRI, r2
    90e6:	f3bf 8f6f 	isb	sy
    90ea:	f06f 0485 	mvn.w	r4, #133	; 0x85
    90ee:	e7c9      	b.n	9084 <onoff_request+0x3a>
    90f0:	f382 8811 	msr	BASEPRI, r2
    90f4:	f3bf 8f6f 	isb	sy
		if (notify) {
    90f8:	e7c4      	b.n	9084 <onoff_request+0x3a>

000090fa <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    90fa:	4603      	mov	r3, r0
    90fc:	b158      	cbz	r0, 9116 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    90fe:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    9100:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    9104:	2a01      	cmp	r2, #1
    9106:	d003      	beq.n	9110 <sys_notify_validate+0x16>
    9108:	2a03      	cmp	r2, #3
    910a:	d104      	bne.n	9116 <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    910c:	6802      	ldr	r2, [r0, #0]
    910e:	b112      	cbz	r2, 9116 <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    9110:	2000      	movs	r0, #0
    9112:	6098      	str	r0, [r3, #8]
    9114:	4770      	bx	lr
    9116:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    911a:	4770      	bx	lr

0000911c <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    911c:	6842      	ldr	r2, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    911e:	6081      	str	r1, [r0, #8]
	return method & SYS_NOTIFY_METHOD_MASK;
    9120:	f002 0203 	and.w	r2, r2, #3
	switch (method) {
    9124:	2a03      	cmp	r2, #3
    9126:	f04f 0200 	mov.w	r2, #0
{
    912a:	4603      	mov	r3, r0
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    912c:	bf0c      	ite	eq
    912e:	6800      	ldreq	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
    9130:	4610      	movne	r0, r2
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    9132:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    9134:	4770      	bx	lr

00009136 <_ldiv5>:
	uint32_t v_lo = *v;
    9136:	e9d0 2100 	ldrd	r2, r1, [r0]
{
    913a:	b530      	push	{r4, r5, lr}
	__asm__ ("" : "+r" (m));
    913c:	f04f 3333 	mov.w	r3, #858993459	; 0x33333333
	result += (uint64_t)v_lo * m;
    9140:	fba2 2403 	umull	r2, r4, r2, r3
    9144:	18d5      	adds	r5, r2, r3
    9146:	eb43 0504 	adc.w	r5, r3, r4
	result += (uint64_t)v_hi * m;
    914a:	fba1 1303 	umull	r1, r3, r1, r3
    914e:	1852      	adds	r2, r2, r1
    9150:	eb44 0403 	adc.w	r4, r4, r3
    9154:	1952      	adds	r2, r2, r5
    9156:	f144 0200 	adc.w	r2, r4, #0
	result += (uint64_t)v_hi * m;
    915a:	1889      	adds	r1, r1, r2
    915c:	f143 0300 	adc.w	r3, r3, #0
	*v = result;
    9160:	e9c0 1300 	strd	r1, r3, [r0]
}
    9164:	bd30      	pop	{r4, r5, pc}

00009166 <_get_digit>:
{
    9166:	b510      	push	{r4, lr}
	if (*digit_count > 0) {
    9168:	680a      	ldr	r2, [r1, #0]
    916a:	2a00      	cmp	r2, #0
{
    916c:	4603      	mov	r3, r0
	if (*digit_count > 0) {
    916e:	dd0f      	ble.n	9190 <_get_digit+0x2a>
		--*digit_count;
    9170:	3a01      	subs	r2, #1
    9172:	600a      	str	r2, [r1, #0]
		*fr *= 10U;
    9174:	681a      	ldr	r2, [r3, #0]
    9176:	6844      	ldr	r4, [r0, #4]
    9178:	200a      	movs	r0, #10
    917a:	fba2 1200 	umull	r1, r2, r2, r0
    917e:	fb00 2204 	mla	r2, r0, r4, r2
		rval = ((*fr >> 60) & 0xF) + '0';
    9182:	0f10      	lsrs	r0, r2, #28
		*fr &= (BIT64(60) - 1U);
    9184:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
    9188:	e9c3 1200 	strd	r1, r2, [r3]
		rval = ((*fr >> 60) & 0xF) + '0';
    918c:	3030      	adds	r0, #48	; 0x30
}
    918e:	bd10      	pop	{r4, pc}
		rval = '0';
    9190:	2030      	movs	r0, #48	; 0x30
    9192:	e7fc      	b.n	918e <_get_digit+0x28>

00009194 <outs>:
{
    9194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9198:	4607      	mov	r7, r0
    919a:	4688      	mov	r8, r1
    919c:	4615      	mov	r5, r2
    919e:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    91a0:	4614      	mov	r4, r2
    91a2:	42b4      	cmp	r4, r6
    91a4:	d305      	bcc.n	91b2 <outs+0x1e>
    91a6:	b10e      	cbz	r6, 91ac <outs+0x18>
	return (int)count;
    91a8:	1b60      	subs	r0, r4, r5
    91aa:	e008      	b.n	91be <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    91ac:	7823      	ldrb	r3, [r4, #0]
    91ae:	2b00      	cmp	r3, #0
    91b0:	d0fa      	beq.n	91a8 <outs+0x14>
		int rc = out((int)*sp++, ctx);
    91b2:	f814 0b01 	ldrb.w	r0, [r4], #1
    91b6:	4641      	mov	r1, r8
    91b8:	47b8      	blx	r7
		if (rc < 0) {
    91ba:	2800      	cmp	r0, #0
    91bc:	daf1      	bge.n	91a2 <outs+0xe>
}
    91be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000091c2 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    91c2:	4770      	bx	lr

000091c4 <dummy_timestamp>:
}
    91c4:	2000      	movs	r0, #0
    91c6:	4770      	bx	lr

000091c8 <default_get_timestamp>:
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
    91c8:	f000 b9d6 	b.w	9578 <sys_clock_cycle_get_32>

000091cc <atomic_inc>:
{
    91cc:	4603      	mov	r3, r0
}
    91ce:	f3bf 8f5b 	dmb	ish
    91d2:	e853 0f00 	ldrex	r0, [r3]
    91d6:	1c42      	adds	r2, r0, #1
    91d8:	e843 2100 	strex	r1, r2, [r3]
    91dc:	2900      	cmp	r1, #0
    91de:	d1f8      	bne.n	91d2 <atomic_inc+0x6>
    91e0:	f3bf 8f5b 	dmb	ish
    91e4:	4770      	bx	lr

000091e6 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
    91e6:	b508      	push	{r3, lr}
				COND_CODE_1(CONFIG_LOG_PROCESS_THREAD,
					K_MSEC(CONFIG_LOG_PROCESS_THREAD_STARTUP_DELAY_MS),
					K_NO_WAIT));
		k_thread_name_set(&logging_thread, "logging");
	} else {
		(void)z_log_init(false, false);
    91e8:	2100      	movs	r1, #0
    91ea:	4608      	mov	r0, r1
    91ec:	f7fb f958 	bl	44a0 <z_log_init.isra.0>
	}

	return 0;
}
    91f0:	2000      	movs	r0, #0
    91f2:	bd08      	pop	{r3, pc}

000091f4 <z_log_vprintk>:
{
    91f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    91f6:	2300      	movs	r3, #0
    91f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
    91fc:	e9cd 3300 	strd	r3, r3, [sp]
    9200:	461a      	mov	r2, r3
    9202:	4619      	mov	r1, r3
    9204:	4618      	mov	r0, r3
    9206:	f7fb fa4d 	bl	46a4 <z_impl_z_log_msg_runtime_vcreate>
}
    920a:	b005      	add	sp, #20
    920c:	f85d fb04 	ldr.w	pc, [sp], #4

00009210 <z_log_notify_backend_enabled>:
}
    9210:	4770      	bx	lr

00009212 <z_log_get_tag>:
}
    9212:	2000      	movs	r0, #0
    9214:	4770      	bx	lr

00009216 <z_log_msg_finalize>:
{
    9216:	b570      	push	{r4, r5, r6, lr}
    9218:	460e      	mov	r6, r1
    921a:	4615      	mov	r5, r2
    921c:	4619      	mov	r1, r3
    921e:	f3c2 42cb 	ubfx	r2, r2, #19, #12
	if (!msg) {
    9222:	4604      	mov	r4, r0
    9224:	b918      	cbnz	r0, 922e <z_log_msg_finalize+0x18>
}
    9226:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_log_dropped(false);
    922a:	f7fb b9e5 	b.w	45f8 <z_log_dropped>
	if (data) {
    922e:	b12b      	cbz	r3, 923c <z_log_msg_finalize+0x26>
		uint8_t *d = msg->data + desc.package_len;
    9230:	3010      	adds	r0, #16
    9232:	f3c5 2349 	ubfx	r3, r5, #9, #10
    9236:	4418      	add	r0, r3
    9238:	f000 fcd9 	bl	9bee <memcpy>
	msg->hdr.source = source;
    923c:	e9c4 5600 	strd	r5, r6, [r4]
	z_log_msg_commit(msg);
    9240:	4620      	mov	r0, r4
}
    9242:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_msg_commit(msg);
    9246:	f7fb b9ef 	b.w	4628 <z_log_msg_commit>

0000924a <out_func>:
{
    924a:	b507      	push	{r0, r1, r2, lr}
		out_ctx->func((uint8_t *)&x, 1, out_ctx->control_block->ctx);
    924c:	e9d1 3200 	ldrd	r3, r2, [r1]
		char x = (char)c;
    9250:	f88d 0007 	strb.w	r0, [sp, #7]
		out_ctx->func((uint8_t *)&x, 1, out_ctx->control_block->ctx);
    9254:	6852      	ldr	r2, [r2, #4]
    9256:	2101      	movs	r1, #1
    9258:	f10d 0007 	add.w	r0, sp, #7
    925c:	4798      	blx	r3
}
    925e:	2000      	movs	r0, #0
    9260:	b003      	add	sp, #12
    9262:	f85d fb04 	ldr.w	pc, [sp], #4

00009266 <cr_out_func>:
	if (c == '\n') {
    9266:	280a      	cmp	r0, #10
{
    9268:	b538      	push	{r3, r4, r5, lr}
    926a:	4604      	mov	r4, r0
    926c:	460d      	mov	r5, r1
	if (c == '\n') {
    926e:	d102      	bne.n	9276 <cr_out_func+0x10>
		out_func((int)'\r', ctx);
    9270:	200d      	movs	r0, #13
    9272:	f7ff ffea 	bl	924a <out_func>
	out_func(c, ctx);
    9276:	4629      	mov	r1, r5
    9278:	4620      	mov	r0, r4
    927a:	f7ff ffe6 	bl	924a <out_func>
}
    927e:	2000      	movs	r0, #0
    9280:	bd38      	pop	{r3, r4, r5, pc}

00009282 <buffer_write>:
{
    9282:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9284:	4606      	mov	r6, r0
    9286:	460d      	mov	r5, r1
    9288:	4614      	mov	r4, r2
    928a:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
    928c:	4621      	mov	r1, r4
    928e:	4628      	mov	r0, r5
    9290:	463a      	mov	r2, r7
    9292:	47b0      	blx	r6
	} while (len != 0);
    9294:	1a24      	subs	r4, r4, r0
		buf += processed;
    9296:	4405      	add	r5, r0
	} while (len != 0);
    9298:	d1f8      	bne.n	928c <buffer_write+0xa>
}
    929a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000929c <cbvprintf>:
{
    929c:	b513      	push	{r0, r1, r4, lr}
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
    929e:	2400      	movs	r4, #0
    92a0:	9400      	str	r4, [sp, #0]
    92a2:	f7f9 f809 	bl	22b8 <z_cbvprintf_impl>
}
    92a6:	b002      	add	sp, #8
    92a8:	bd10      	pop	{r4, pc}

000092aa <log_output_flush>:
{
    92aa:	b510      	push	{r4, lr}
		     output->control_block->offset,
    92ac:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
    92ae:	6881      	ldr	r1, [r0, #8]
{
    92b0:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
    92b2:	e9d2 2300 	ldrd	r2, r3, [r2]
    92b6:	6800      	ldr	r0, [r0, #0]
    92b8:	f7ff ffe3 	bl	9282 <buffer_write>
	output->control_block->offset = 0;
    92bc:	6863      	ldr	r3, [r4, #4]
    92be:	2200      	movs	r2, #0
    92c0:	601a      	str	r2, [r3, #0]
}
    92c2:	bd10      	pop	{r4, pc}

000092c4 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
    92c4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    92c6:	ab0b      	add	r3, sp, #44	; 0x2c
    92c8:	9305      	str	r3, [sp, #20]
    92ca:	9303      	str	r3, [sp, #12]
    92cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    92ce:	9302      	str	r3, [sp, #8]
    92d0:	2300      	movs	r3, #0
    92d2:	e9cd 3300 	strd	r3, r3, [sp]
    92d6:	2201      	movs	r2, #1
    92d8:	4618      	mov	r0, r3
    92da:	f7fb f9e3 	bl	46a4 <z_impl_z_log_msg_runtime_vcreate>
}
    92de:	b007      	add	sp, #28
    92e0:	f85d fb04 	ldr.w	pc, [sp], #4

000092e4 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
    92e4:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    92e6:	6800      	ldr	r0, [r0, #0]
    92e8:	f7fb bd9e 	b.w	4e28 <z_arm_fatal_error>

000092ec <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    92ec:	2100      	movs	r1, #0
    92ee:	2001      	movs	r0, #1
    92f0:	f7fb bd9a 	b.w	4e28 <z_arm_fatal_error>

000092f4 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    92f4:	b508      	push	{r3, lr}
	handler();
    92f6:	f7fb fe5f 	bl	4fb8 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    92fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    92fe:	f7fb bfc7 	b.w	5290 <z_arm_exc_exit>

00009302 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
    9302:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    9304:	ab0b      	add	r3, sp, #44	; 0x2c
    9306:	9305      	str	r3, [sp, #20]
    9308:	9303      	str	r3, [sp, #12]
    930a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    930c:	9302      	str	r3, [sp, #8]
    930e:	2300      	movs	r3, #0
    9310:	e9cd 3300 	strd	r3, r3, [sp]
    9314:	2201      	movs	r2, #1
    9316:	4618      	mov	r0, r3
    9318:	f7fb f9c4 	bl	46a4 <z_impl_z_log_msg_runtime_vcreate>
}
    931c:	b007      	add	sp, #28
    931e:	f85d fb04 	ldr.w	pc, [sp], #4

00009322 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
    9322:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    9324:	ab0b      	add	r3, sp, #44	; 0x2c
    9326:	9305      	str	r3, [sp, #20]
    9328:	9303      	str	r3, [sp, #12]
    932a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    932c:	9302      	str	r3, [sp, #8]
    932e:	2300      	movs	r3, #0
    9330:	e9cd 3300 	strd	r3, r3, [sp]
    9334:	2201      	movs	r2, #1
    9336:	4618      	mov	r0, r3
    9338:	f7fb f9b4 	bl	46a4 <z_impl_z_log_msg_runtime_vcreate>
}
    933c:	b007      	add	sp, #28
    933e:	f85d fb04 	ldr.w	pc, [sp], #4

00009342 <malloc_prepare>:
}
    9342:	2000      	movs	r0, #0
    9344:	4770      	bx	lr

00009346 <_stdout_hook_default>:
}
    9346:	f04f 30ff 	mov.w	r0, #4294967295
    934a:	4770      	bx	lr

0000934c <__errno>:
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
    934c:	f7fe bae4 	b.w	7918 <z_impl_z_errno>

00009350 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
    9350:	2806      	cmp	r0, #6
    9352:	d108      	bne.n	9366 <pm_state_set+0x16>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    9354:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    9358:	2201      	movs	r2, #1
    935a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    935e:	f3bf 8f4f 	dsb	sy
        __WFE();
    9362:	bf20      	wfe
    while (true)
    9364:	e7fd      	b.n	9362 <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
    9366:	4770      	bx	lr

00009368 <pm_state_exit_post_ops>:
    9368:	2300      	movs	r3, #0
    936a:	f383 8811 	msr	BASEPRI, r3
    936e:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    9372:	4770      	bx	lr

00009374 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    9374:	6903      	ldr	r3, [r0, #16]
    9376:	b2c9      	uxtb	r1, r1
    9378:	220c      	movs	r2, #12
    937a:	fb01 3302 	mla	r3, r1, r2, r3
    937e:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
    9380:	f000 0007 	and.w	r0, r0, #7
    9384:	4770      	bx	lr

00009386 <set_on_state>:
	__asm__ volatile(
    9386:	f04f 0320 	mov.w	r3, #32
    938a:	f3ef 8211 	mrs	r2, BASEPRI
    938e:	f383 8812 	msr	BASEPRI_MAX, r3
    9392:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    9396:	6803      	ldr	r3, [r0, #0]
    9398:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    939c:	f043 0302 	orr.w	r3, r3, #2
    93a0:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    93a2:	f382 8811 	msr	BASEPRI, r2
    93a6:	f3bf 8f6f 	isb	sy
}
    93aa:	4770      	bx	lr

000093ac <stop>:
{
    93ac:	b570      	push	{r4, r5, r6, lr}
    93ae:	b2c9      	uxtb	r1, r1
	struct nrf_clock_control_data *data = dev->data;
    93b0:	6903      	ldr	r3, [r0, #16]
	__asm__ volatile(
    93b2:	f04f 0420 	mov.w	r4, #32
    93b6:	f3ef 8511 	mrs	r5, BASEPRI
    93ba:	f384 8812 	msr	BASEPRI_MAX, r4
    93be:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    93c2:	260c      	movs	r6, #12
    93c4:	fb06 3401 	mla	r4, r6, r1, r3
    93c8:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    93ca:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
    93ce:	d008      	beq.n	93e2 <stop+0x36>
    93d0:	42a2      	cmp	r2, r4
    93d2:	d006      	beq.n	93e2 <stop+0x36>
	__asm__ volatile(
    93d4:	f385 8811 	msr	BASEPRI, r5
    93d8:	f3bf 8f6f 	isb	sy
		err = -EPERM;
    93dc:	f04f 30ff 	mov.w	r0, #4294967295
}
    93e0:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
    93e2:	4371      	muls	r1, r6
    93e4:	440b      	add	r3, r1
    93e6:	2201      	movs	r2, #1
    93e8:	641a      	str	r2, [r3, #64]	; 0x40
    93ea:	f385 8811 	msr	BASEPRI, r5
    93ee:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
    93f2:	6843      	ldr	r3, [r0, #4]
    93f4:	440b      	add	r3, r1
    93f6:	685b      	ldr	r3, [r3, #4]
    93f8:	4798      	blx	r3
	return 0;
    93fa:	2000      	movs	r0, #0
    93fc:	e7f0      	b.n	93e0 <stop+0x34>

000093fe <api_stop>:
	return stop(dev, subsys, CTX_API);
    93fe:	2280      	movs	r2, #128	; 0x80
    9400:	f7ff bfd4 	b.w	93ac <stop>

00009404 <async_start>:
{
    9404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9406:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
    9408:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
    940a:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    940c:	f04f 0520 	mov.w	r5, #32
    9410:	f3ef 8611 	mrs	r6, BASEPRI
    9414:	f385 8812 	msr	BASEPRI_MAX, r5
    9418:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    941c:	250c      	movs	r5, #12
    941e:	4369      	muls	r1, r5
    9420:	440c      	add	r4, r1
    9422:	6c25      	ldr	r5, [r4, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    9424:	f005 0c07 	and.w	ip, r5, #7
    9428:	f1bc 0f01 	cmp.w	ip, #1
    942c:	d10b      	bne.n	9446 <async_start+0x42>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    942e:	6427      	str	r7, [r4, #64]	; 0x40
	__asm__ volatile(
    9430:	f386 8811 	msr	BASEPRI, r6
    9434:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
    9438:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    943c:	6843      	ldr	r3, [r0, #4]
    943e:	585b      	ldr	r3, [r3, r1]
    9440:	4798      	blx	r3
	return 0;
    9442:	2000      	movs	r0, #0
}
    9444:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    9446:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
    944a:	42af      	cmp	r7, r5
    944c:	f386 8811 	msr	BASEPRI, r6
    9450:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
    9454:	bf0c      	ite	eq
    9456:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
    945a:	f04f 30ff 	movne.w	r0, #4294967295
    945e:	e7f1      	b.n	9444 <async_start+0x40>

00009460 <api_start>:
{
    9460:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
    9462:	2480      	movs	r4, #128	; 0x80
    9464:	9400      	str	r4, [sp, #0]
    9466:	f7ff ffcd 	bl	9404 <async_start>
}
    946a:	b002      	add	sp, #8
    946c:	bd10      	pop	{r4, pc}

0000946e <onoff_started_callback>:
{
    946e:	b410      	push	{r4}
	return &data->mgr[type];
    9470:	6900      	ldr	r0, [r0, #16]
    9472:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    9474:	241c      	movs	r4, #28
    9476:	fb03 0004 	mla	r0, r3, r4, r0
    947a:	2100      	movs	r1, #0
}
    947c:	f85d 4b04 	ldr.w	r4, [sp], #4
	notify(mgr, 0);
    9480:	4710      	bx	r2

00009482 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    9482:	2000      	movs	r0, #0
    9484:	f000 b8f9 	b.w	967a <nrfx_clock_start>

00009488 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    9488:	2000      	movs	r0, #0
    948a:	f000 b932 	b.w	96f2 <nrfx_clock_stop>

0000948e <blocking_start_callback>:
{
    948e:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    9490:	f7fe bcfc 	b.w	7e8c <z_impl_k_sem_give>

00009494 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    9494:	6843      	ldr	r3, [r0, #4]
    9496:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    9498:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    949c:	600b      	str	r3, [r1, #0]
}
    949e:	2000      	movs	r0, #0
    94a0:	4770      	bx	lr

000094a2 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    94a2:	6843      	ldr	r3, [r0, #4]
    94a4:	685b      	ldr	r3, [r3, #4]
	const uint32_t set_mask = value & mask;
    94a6:	ea02 0001 	and.w	r0, r2, r1
	const uint32_t clear_mask = (~set_mask) & mask;
    94aa:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
    94ae:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
    94b2:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
    94b6:	2000      	movs	r0, #0
    94b8:	4770      	bx	lr

000094ba <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    94ba:	6843      	ldr	r3, [r0, #4]
    94bc:	685b      	ldr	r3, [r3, #4]
}
    94be:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
    94c0:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    94c4:	4770      	bx	lr

000094c6 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    94c6:	6843      	ldr	r3, [r0, #4]
    94c8:	685b      	ldr	r3, [r3, #4]
}
    94ca:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    94cc:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    94d0:	4770      	bx	lr

000094d2 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    94d2:	6843      	ldr	r3, [r0, #4]
    94d4:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    94d6:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	const uint32_t set_mask = value & mask;
    94da:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
    94de:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
    94e0:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
    94e4:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
    94e8:	2000      	movs	r0, #0
    94ea:	4770      	bx	lr

000094ec <gpio_nrfx_manage_callback>:
{
    94ec:	b510      	push	{r4, lr}
	return port->data;
    94ee:	6903      	ldr	r3, [r0, #16]
	return list->head;
    94f0:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
    94f2:	b1f8      	cbz	r0, 9534 <gpio_nrfx_manage_callback+0x48>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    94f4:	4288      	cmp	r0, r1
    94f6:	d119      	bne.n	952c <gpio_nrfx_manage_callback+0x40>
Z_GENLIST_REMOVE(slist, snode)
    94f8:	689c      	ldr	r4, [r3, #8]
	return node->next;
    94fa:	6808      	ldr	r0, [r1, #0]
	list->head = node;
    94fc:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    94fe:	42a1      	cmp	r1, r4
    9500:	d100      	bne.n	9504 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
    9502:	6098      	str	r0, [r3, #8]
	parent->next = child;
    9504:	2000      	movs	r0, #0
    9506:	6008      	str	r0, [r1, #0]
	if (set) {
    9508:	b12a      	cbz	r2, 9516 <gpio_nrfx_manage_callback+0x2a>
	return list->head;
    950a:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
    950c:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
    950e:	689a      	ldr	r2, [r3, #8]
	list->head = node;
    9510:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    9512:	b902      	cbnz	r2, 9516 <gpio_nrfx_manage_callback+0x2a>
	list->tail = node;
    9514:	6099      	str	r1, [r3, #8]
	return 0;
    9516:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    9518:	e010      	b.n	953c <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    951a:	4281      	cmp	r1, r0
    951c:	d106      	bne.n	952c <gpio_nrfx_manage_callback+0x40>
	return node->next;
    951e:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
    9520:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
    9522:	6898      	ldr	r0, [r3, #8]
    9524:	4281      	cmp	r1, r0
    9526:	d1ed      	bne.n	9504 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
    9528:	609c      	str	r4, [r3, #8]
}
    952a:	e7eb      	b.n	9504 <gpio_nrfx_manage_callback+0x18>
	return node->next;
    952c:	4604      	mov	r4, r0
    952e:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    9530:	2800      	cmp	r0, #0
    9532:	d1f2      	bne.n	951a <gpio_nrfx_manage_callback+0x2e>
			if (!set) {
    9534:	2a00      	cmp	r2, #0
    9536:	d1e8      	bne.n	950a <gpio_nrfx_manage_callback+0x1e>
				return -EINVAL;
    9538:	f06f 0015 	mvn.w	r0, #21
}
    953c:	bd10      	pop	{r4, pc}

0000953e <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
    953e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    9540:	ab0b      	add	r3, sp, #44	; 0x2c
    9542:	9305      	str	r3, [sp, #20]
    9544:	9303      	str	r3, [sp, #12]
    9546:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    9548:	9302      	str	r3, [sp, #8]
    954a:	2300      	movs	r3, #0
    954c:	e9cd 3300 	strd	r3, r3, [sp]
    9550:	2201      	movs	r2, #1
    9552:	4618      	mov	r0, r3
    9554:	f7fb f8a6 	bl	46a4 <z_impl_z_log_msg_runtime_vcreate>
}
    9558:	b007      	add	sp, #28
    955a:	f85d fb04 	ldr.w	pc, [sp], #4

0000955e <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    955e:	4770      	bx	lr

00009560 <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    9560:	f100 0350 	add.w	r3, r0, #80	; 0x50
    9564:	009b      	lsls	r3, r3, #2
    9566:	b29b      	uxth	r3, r3
    9568:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    956c:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    9570:	2200      	movs	r2, #0
    9572:	601a      	str	r2, [r3, #0]
    9574:	681b      	ldr	r3, [r3, #0]
}
    9576:	4770      	bx	lr

00009578 <sys_clock_cycle_get_32>:
{
    9578:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
    957a:	f7fc ff9d 	bl	64b8 <z_nrf_rtc_timer_read>
}
    957e:	bd08      	pop	{r3, pc}

00009580 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
    9580:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
    9582:	6843      	ldr	r3, [r0, #4]
    9584:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
    9586:	7a05      	ldrb	r5, [r0, #8]
    9588:	6844      	ldr	r4, [r0, #4]
    958a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
    958e:	42a3      	cmp	r3, r4
    9590:	d302      	bcc.n	9598 <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
    9592:	f06f 0001 	mvn.w	r0, #1
}
    9596:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
    9598:	795c      	ldrb	r4, [r3, #5]
    959a:	428c      	cmp	r4, r1
    959c:	d001      	beq.n	95a2 <pinctrl_lookup_state+0x22>
		(*state)++;
    959e:	3308      	adds	r3, #8
    95a0:	e7f0      	b.n	9584 <pinctrl_lookup_state+0x4>
			return 0;
    95a2:	2000      	movs	r0, #0
    95a4:	e7f7      	b.n	9596 <pinctrl_lookup_state+0x16>

000095a6 <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    95a6:	4700      	bx	r0

000095a8 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    95a8:	f000 bb09 	b.w	9bbe <z_impl_k_busy_wait>

000095ac <clock_stop>:
{
    95ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    switch (domain)
    95ae:	4604      	mov	r4, r0
    95b0:	b118      	cbz	r0, 95ba <clock_stop+0xe>
    95b2:	2801      	cmp	r0, #1
    95b4:	d020      	beq.n	95f8 <clock_stop+0x4c>
}
    95b6:	b003      	add	sp, #12
    95b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    95ba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    95be:	2202      	movs	r2, #2
    95c0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    95c4:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
    95c8:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    95cc:	2201      	movs	r2, #1
    95ce:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    95d0:	4607      	mov	r7, r0
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    95d2:	2301      	movs	r3, #1
    95d4:	f88d 3007 	strb.w	r3, [sp, #7]
    95d8:	f242 7510 	movw	r5, #10000	; 0x2710
    95dc:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
    switch (domain)
    95e0:	b1bc      	cbz	r4, 9612 <clock_stop+0x66>
    95e2:	2c01      	cmp	r4, #1
    95e4:	d1e7      	bne.n	95b6 <clock_stop+0xa>
            if (p_clk_src != NULL)
    95e6:	b38f      	cbz	r7, 964c <clock_stop+0xa0>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    95e8:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    95ec:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    95f0:	703b      	strb	r3, [r7, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    95f2:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    95f6:	e014      	b.n	9622 <clock_stop+0x76>
    p_reg->INTENCLR = mask;
    95f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    95fc:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
    95fe:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9602:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    9606:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    960a:	6058      	str	r0, [r3, #4]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    960c:	f10d 0707 	add.w	r7, sp, #7
    9610:	e7df      	b.n	95d2 <clock_stop+0x26>
            if (p_clk_src != NULL)
    9612:	b18f      	cbz	r7, 9638 <clock_stop+0x8c>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    9614:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    9618:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    961c:	603b      	str	r3, [r7, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    961e:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    9622:	03da      	lsls	r2, r3, #15
    9624:	d5c7      	bpl.n	95b6 <clock_stop+0xa>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    9626:	f89d 0007 	ldrb.w	r0, [sp, #7]
    962a:	2801      	cmp	r0, #1
    962c:	d1c3      	bne.n	95b6 <clock_stop+0xa>
    962e:	f7ff ffbb 	bl	95a8 <nrfx_busy_wait>
    9632:	3d01      	subs	r5, #1
    9634:	d1d4      	bne.n	95e0 <clock_stop+0x34>
    9636:	e7be      	b.n	95b6 <clock_stop+0xa>
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    9638:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    963c:	03d9      	lsls	r1, r3, #15
    963e:	d5ba      	bpl.n	95b6 <clock_stop+0xa>
    9640:	2001      	movs	r0, #1
    9642:	f7ff ffb1 	bl	95a8 <nrfx_busy_wait>
    9646:	3d01      	subs	r5, #1
    9648:	d1f6      	bne.n	9638 <clock_stop+0x8c>
    964a:	e7b4      	b.n	95b6 <clock_stop+0xa>
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    964c:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    9650:	03db      	lsls	r3, r3, #15
    9652:	d5b0      	bpl.n	95b6 <clock_stop+0xa>
    9654:	2001      	movs	r0, #1
    9656:	f7ff ffa7 	bl	95a8 <nrfx_busy_wait>
    965a:	3d01      	subs	r5, #1
    965c:	d1f6      	bne.n	964c <clock_stop+0xa0>
    965e:	e7aa      	b.n	95b6 <clock_stop+0xa>

00009660 <nrfx_clock_enable>:
{
    9660:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    9662:	2000      	movs	r0, #0
    9664:	f7fb fc82 	bl	4f6c <arch_irq_is_enabled>
    9668:	b908      	cbnz	r0, 966e <nrfx_clock_enable+0xe>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    966a:	f7fb fc71 	bl	4f50 <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
    966e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    9672:	2200      	movs	r2, #0
    9674:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
    9678:	bd08      	pop	{r3, pc}

0000967a <nrfx_clock_start>:
{
    967a:	b508      	push	{r3, lr}
    switch (domain)
    967c:	b110      	cbz	r0, 9684 <nrfx_clock_start+0xa>
    967e:	2801      	cmp	r0, #1
    9680:	d02c      	beq.n	96dc <nrfx_clock_start+0x62>
}
    9682:	bd08      	pop	{r3, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    9684:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    9688:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    968c:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    9690:	03c8      	lsls	r0, r1, #15
    9692:	d40b      	bmi.n	96ac <nrfx_clock_start+0x32>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    9694:	f8d2 3414 	ldr.w	r3, [r2, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    9698:	07d9      	lsls	r1, r3, #31
    969a:	d50f      	bpl.n	96bc <nrfx_clock_start+0x42>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    969c:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    96a0:	079b      	lsls	r3, r3, #30
    96a2:	d408      	bmi.n	96b6 <nrfx_clock_start+0x3c>
    p_reg->INTENSET = mask;
    96a4:	2302      	movs	r3, #2
    96a6:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
                        break;
    96aa:	e7ea      	b.n	9682 <nrfx_clock_start+0x8>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    96ac:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    96b0:	2b01      	cmp	r3, #1
    96b2:	d004      	beq.n	96be <nrfx_clock_start+0x44>
    96b4:	b113      	cbz	r3, 96bc <nrfx_clock_start+0x42>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    96b6:	2000      	movs	r0, #0
    96b8:	f7ff ff78 	bl	95ac <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
    96bc:	2300      	movs	r3, #0
    p_reg->LFCLKSRC = (uint32_t)(source);
    96be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    96c2:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    96c6:	2300      	movs	r3, #0
    96c8:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
    96cc:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
    96d0:	2302      	movs	r3, #2
    96d2:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    96d6:	2301      	movs	r3, #1
    96d8:	6093      	str	r3, [r2, #8]
}
    96da:	e7d2      	b.n	9682 <nrfx_clock_start+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    96dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    96e0:	2200      	movs	r2, #0
    96e2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    96e6:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    96ea:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    96ee:	6018      	str	r0, [r3, #0]
}
    96f0:	e7c7      	b.n	9682 <nrfx_clock_start+0x8>

000096f2 <nrfx_clock_stop>:
    clock_stop(domain);
    96f2:	f7ff bf5b 	b.w	95ac <clock_stop>

000096f6 <nrf_gpio_reconfigure>:
{
    96f6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    96f8:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    96fa:	a801      	add	r0, sp, #4
{
    96fc:	e9dd 4708 	ldrd	r4, r7, [sp, #32]
    9700:	4616      	mov	r6, r2
    9702:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    9704:	f7fd fa12 	bl	6b2c <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    9708:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    970a:	f1b6 0c00 	subs.w	ip, r6, #0
    970e:	bf18      	it	ne
    9710:	f04f 0c01 	movne.w	ip, #1
    9714:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    9718:	1e0b      	subs	r3, r1, #0
    971a:	bf18      	it	ne
    971c:	2301      	movne	r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    971e:	2d00      	cmp	r5, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    9720:	ea43 034c 	orr.w	r3, r3, ip, lsl #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    9724:	bf14      	ite	ne
    9726:	f04f 0c0c 	movne.w	ip, #12
    972a:	f04f 0c00 	moveq.w	ip, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    972e:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    9730:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    9734:	bf14      	ite	ne
    9736:	f44f 6ce0 	movne.w	ip, #1792	; 0x700
    973a:	f04f 0c00 	moveq.w	ip, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    973e:	2f00      	cmp	r7, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    9740:	ea43 030c 	orr.w	r3, r3, ip
    uint32_t cnf = reg->PIN_CNF[pin_number];
    9744:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    9748:	bf14      	ite	ne
    974a:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
    974e:	f04f 0c00 	moveq.w	ip, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    9752:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
    9756:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    975a:	b101      	cbz	r1, 975e <nrf_gpio_reconfigure+0x68>
    975c:	7809      	ldrb	r1, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    975e:	b10e      	cbz	r6, 9764 <nrf_gpio_reconfigure+0x6e>
    9760:	7836      	ldrb	r6, [r6, #0]
    9762:	0076      	lsls	r6, r6, #1
    9764:	4319      	orrs	r1, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    9766:	b10d      	cbz	r5, 976c <nrf_gpio_reconfigure+0x76>
    9768:	782d      	ldrb	r5, [r5, #0]
    976a:	00ad      	lsls	r5, r5, #2
    976c:	4331      	orrs	r1, r6
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    976e:	b10c      	cbz	r4, 9774 <nrf_gpio_reconfigure+0x7e>
    9770:	7824      	ldrb	r4, [r4, #0]
    9772:	0224      	lsls	r4, r4, #8
    9774:	4329      	orrs	r1, r5
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
    9776:	b10f      	cbz	r7, 977c <nrf_gpio_reconfigure+0x86>
    9778:	783f      	ldrb	r7, [r7, #0]
    977a:	043f      	lsls	r7, r7, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    977c:	430c      	orrs	r4, r1
    977e:	433c      	orrs	r4, r7
    reg->PIN_CNF[pin_number] = cnf;
    9780:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
    9784:	b003      	add	sp, #12
    9786:	bdf0      	pop	{r4, r5, r6, r7, pc}

00009788 <nrf_gpio_cfg_sense_set>:
{
    9788:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    978a:	f10d 030f 	add.w	r3, sp, #15
    978e:	9301      	str	r3, [sp, #4]
    9790:	2300      	movs	r3, #0
{
    9792:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    9796:	9300      	str	r3, [sp, #0]
    9798:	461a      	mov	r2, r3
    979a:	4619      	mov	r1, r3
    979c:	f7ff ffab 	bl	96f6 <nrf_gpio_reconfigure>
}
    97a0:	b005      	add	sp, #20
    97a2:	f85d fb04 	ldr.w	pc, [sp], #4

000097a6 <twi_transfer>:
{
    97a6:	b530      	push	{r4, r5, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    97a8:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_STOPPED))
    97ac:	b12b      	cbz	r3, 97ba <twi_transfer+0x14>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    97ae:	2300      	movs	r3, #0
    97b0:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
    97b4:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
        stopped = true;
    97b8:	2301      	movs	r3, #1
    if (p_cb->error)
    97ba:	f891 202f 	ldrb.w	r2, [r1, #47]	; 0x2f
    97be:	b322      	cbz	r2, 980a <twi_transfer+0x64>
    97c0:	2200      	movs	r2, #0
    97c2:	f8c0 2124 	str.w	r2, [r0, #292]	; 0x124
    97c6:	f8d0 4124 	ldr.w	r4, [r0, #292]	; 0x124
    97ca:	f8c0 211c 	str.w	r2, [r0, #284]	; 0x11c
    97ce:	f8d0 411c 	ldr.w	r4, [r0, #284]	; 0x11c
    97d2:	f8c0 2108 	str.w	r2, [r0, #264]	; 0x108
    97d6:	f8d0 2108 	ldr.w	r2, [r0, #264]	; 0x108
    if (stopped)
    97da:	2b00      	cmp	r3, #0
    97dc:	d079      	beq.n	98d2 <twi_transfer+0x12c>
        p_cb->prev_suspend = TWI_NO_SUSPEND;
    97de:	2200      	movs	r2, #0
    97e0:	f881 202d 	strb.w	r2, [r1, #45]	; 0x2d
        if (!p_cb->error)
    97e4:	f891 202f 	ldrb.w	r2, [r1, #47]	; 0x2f
    97e8:	2a00      	cmp	r2, #0
    97ea:	d137      	bne.n	985c <twi_transfer+0xb6>
    if (p_cb->bytes_transferred != p_cb->curr_length)
    97ec:	6b4d      	ldr	r5, [r1, #52]	; 0x34
    97ee:	6a8c      	ldr	r4, [r1, #40]	; 0x28
    97f0:	42a5      	cmp	r5, r4
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
    97f2:	bf1f      	itttt	ne
    97f4:	2305      	movne	r3, #5
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
    97f6:	f8c0 2500 	strne.w	r2, [r0, #1280]	; 0x500
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
    97fa:	f8c0 3500 	strne.w	r3, [r0, #1280]	; 0x500
        return false;
    97fe:	4613      	movne	r3, r2
            p_cb->error = !xfer_completeness_check(p_twi, p_cb);
    9800:	f083 0301 	eor.w	r3, r3, #1
    9804:	f881 302f 	strb.w	r3, [r1, #47]	; 0x2f
    9808:	e028      	b.n	985c <twi_transfer+0xb6>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    980a:	f8d0 4124 	ldr.w	r4, [r0, #292]	; 0x124
    else if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
    980e:	b114      	cbz	r4, 9816 <twi_transfer+0x70>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9810:	f8c0 2124 	str.w	r2, [r0, #292]	; 0x124
    9814:	e00e      	b.n	9834 <twi_transfer+0x8e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    9816:	f8d0 211c 	ldr.w	r2, [r0, #284]	; 0x11c
        if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_TXDSENT))
    981a:	b36a      	cbz	r2, 9878 <twi_transfer+0xd2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    981c:	f8c0 411c 	str.w	r4, [r0, #284]	; 0x11c
    9820:	f8d0 211c 	ldr.w	r2, [r0, #284]	; 0x11c
            ++(p_cb->bytes_transferred);
    9824:	6b4a      	ldr	r2, [r1, #52]	; 0x34
    9826:	3201      	adds	r2, #1
    9828:	634a      	str	r2, [r1, #52]	; 0x34
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    982a:	f8d0 5124 	ldr.w	r5, [r0, #292]	; 0x124
            if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
    982e:	b145      	cbz	r5, 9842 <twi_transfer+0x9c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9830:	f8c0 4124 	str.w	r4, [r0, #292]	; 0x124
    9834:	f8d0 2124 	ldr.w	r2, [r0, #292]	; 0x124
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    9838:	2201      	movs	r2, #1
    983a:	6142      	str	r2, [r0, #20]
                p_cb->error = true;
    983c:	f881 202f 	strb.w	r2, [r1, #47]	; 0x2f
    9840:	e7cb      	b.n	97da <twi_transfer+0x34>
    if (p_cb->bytes_transferred < p_cb->curr_length)
    9842:	6a8c      	ldr	r4, [r1, #40]	; 0x28
    9844:	42a2      	cmp	r2, r4
    9846:	d204      	bcs.n	9852 <twi_transfer+0xac>
        nrf_twi_txd_set(p_twi, p_cb->p_curr_buf[p_cb->bytes_transferred]);
    9848:	6a4c      	ldr	r4, [r1, #36]	; 0x24
    p_reg->TXD = data;
    984a:	5ca2      	ldrb	r2, [r4, r2]
    984c:	f8c0 251c 	str.w	r2, [r0, #1308]	; 0x51c
    9850:	e7c3      	b.n	97da <twi_transfer+0x34>
        if (p_cb->curr_tx_no_stop)
    9852:	f891 202c 	ldrb.w	r2, [r1, #44]	; 0x2c
    9856:	b11a      	cbz	r2, 9860 <twi_transfer+0xba>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    9858:	2301      	movs	r3, #1
    985a:	61c3      	str	r3, [r0, #28]
                    return false;
    985c:	2000      	movs	r0, #0
}
    985e:	bd30      	pop	{r4, r5, pc}
        else if(TWI_FLAG_SUSPEND(p_cb->flags))
    9860:	6a0a      	ldr	r2, [r1, #32]
    9862:	f012 0f40 	tst.w	r2, #64	; 0x40
    9866:	f04f 0201 	mov.w	r2, #1
    986a:	d003      	beq.n	9874 <twi_transfer+0xce>
    986c:	61c2      	str	r2, [r0, #28]
            p_cb->prev_suspend = TWI_SUSPEND_TX;
    986e:	f881 202d 	strb.w	r2, [r1, #45]	; 0x2d
            return false;
    9872:	e7f3      	b.n	985c <twi_transfer+0xb6>
    9874:	6142      	str	r2, [r0, #20]
    9876:	e7b0      	b.n	97da <twi_transfer+0x34>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    9878:	f8d0 4108 	ldr.w	r4, [r0, #264]	; 0x108
        else if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_RXDREADY))
    987c:	2c00      	cmp	r4, #0
    987e:	d0ac      	beq.n	97da <twi_transfer+0x34>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9880:	f8c0 2108 	str.w	r2, [r0, #264]	; 0x108
    9884:	f8d0 4108 	ldr.w	r4, [r0, #264]	; 0x108
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    9888:	f8d0 4124 	ldr.w	r4, [r0, #292]	; 0x124
            if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
    988c:	2c00      	cmp	r4, #0
    988e:	d1bf      	bne.n	9810 <twi_transfer+0x6a>
    if (p_cb->bytes_transferred < p_cb->curr_length)
    9890:	6b4a      	ldr	r2, [r1, #52]	; 0x34
    9892:	6a8c      	ldr	r4, [r1, #40]	; 0x28
    9894:	42a2      	cmp	r2, r4
    9896:	d2a0      	bcs.n	97da <twi_transfer+0x34>
        p_cb->p_curr_buf[p_cb->bytes_transferred] = nrf_twi_rxd_get(p_twi);
    9898:	6a4c      	ldr	r4, [r1, #36]	; 0x24
    return (uint8_t)p_reg->RXD;
    989a:	f8d0 5518 	ldr.w	r5, [r0, #1304]	; 0x518
    989e:	54a5      	strb	r5, [r4, r2]
        ++(p_cb->bytes_transferred);
    98a0:	6b4a      	ldr	r2, [r1, #52]	; 0x34
        if ((p_cb->bytes_transferred == p_cb->curr_length - 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    98a2:	6a8c      	ldr	r4, [r1, #40]	; 0x28
        ++(p_cb->bytes_transferred);
    98a4:	3201      	adds	r2, #1
        if ((p_cb->bytes_transferred == p_cb->curr_length - 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    98a6:	1e65      	subs	r5, r4, #1
    98a8:	42aa      	cmp	r2, r5
        ++(p_cb->bytes_transferred);
    98aa:	634a      	str	r2, [r1, #52]	; 0x34
        if ((p_cb->bytes_transferred == p_cb->curr_length - 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    98ac:	d108      	bne.n	98c0 <twi_transfer+0x11a>
    98ae:	6a0a      	ldr	r2, [r1, #32]
    98b0:	0654      	lsls	r4, r2, #25
    98b2:	d402      	bmi.n	98ba <twi_transfer+0x114>
    p_reg->SHORTS = mask;
    98b4:	2202      	movs	r2, #2
    98b6:	f8c0 2200 	str.w	r2, [r0, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    98ba:	2201      	movs	r2, #1
    98bc:	6202      	str	r2, [r0, #32]
    98be:	e78c      	b.n	97da <twi_transfer+0x34>
        else if (p_cb->bytes_transferred == p_cb->curr_length && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    98c0:	42a2      	cmp	r2, r4
    98c2:	d1fa      	bne.n	98ba <twi_transfer+0x114>
    98c4:	6a0a      	ldr	r2, [r1, #32]
    98c6:	0652      	lsls	r2, r2, #25
    98c8:	d587      	bpl.n	97da <twi_transfer+0x34>
            p_cb->prev_suspend = TWI_SUSPEND_RX;
    98ca:	2302      	movs	r3, #2
    98cc:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
            return false;
    98d0:	e7c4      	b.n	985c <twi_transfer+0xb6>
    return true;
    98d2:	2001      	movs	r0, #1
    98d4:	e7c3      	b.n	985e <twi_transfer+0xb8>

000098d6 <nrf_gpio_pin_set>:
{
    98d6:	b507      	push	{r0, r1, r2, lr}
    98d8:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    98da:	a801      	add	r0, sp, #4
    98dc:	f7fd feec 	bl	76b8 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    98e0:	9a01      	ldr	r2, [sp, #4]
    98e2:	2301      	movs	r3, #1
    98e4:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    98e6:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
}
    98ea:	b003      	add	sp, #12
    98ec:	f85d fb04 	ldr.w	pc, [sp], #4

000098f0 <_GetAvailWriteSpace>:
  RdOff = pRing->RdOff;
    98f0:	6903      	ldr	r3, [r0, #16]
  WrOff = pRing->WrOff;
    98f2:	68c2      	ldr	r2, [r0, #12]
  if (RdOff <= WrOff) {
    98f4:	4293      	cmp	r3, r2
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
    98f6:	bf9c      	itt	ls
    98f8:	6881      	ldrls	r1, [r0, #8]
    98fa:	185b      	addls	r3, r3, r1
    r = RdOff - WrOff - 1u;
    98fc:	3b01      	subs	r3, #1
    98fe:	1a98      	subs	r0, r3, r2
}
    9900:	4770      	bx	lr

00009902 <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
    9902:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9906:	4604      	mov	r4, r0
  Rem = pRing->SizeOfBuffer - WrOff;
    9908:	e9d0 8002 	ldrd	r8, r0, [r0, #8]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    990c:	6867      	ldr	r7, [r4, #4]
  Rem = pRing->SizeOfBuffer - WrOff;
    990e:	eba8 0600 	sub.w	r6, r8, r0
  if (Rem > NumBytes) {
    9912:	4296      	cmp	r6, r2
    pRing->WrOff = WrOff + NumBytes;
    9914:	eb00 0502 	add.w	r5, r0, r2
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
    9918:	4689      	mov	r9, r1
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    991a:	4438      	add	r0, r7
  if (Rem > NumBytes) {
    991c:	d904      	bls.n	9928 <_WriteNoCheck+0x26>
    991e:	f000 f966 	bl	9bee <memcpy>
    pRing->WrOff = WrOff + NumBytes;
    9922:	60e5      	str	r5, [r4, #12]
}
    9924:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    9928:	4632      	mov	r2, r6
    NumBytesAtOnce = NumBytes - Rem;
    992a:	eba5 0508 	sub.w	r5, r5, r8
    992e:	f000 f95e 	bl	9bee <memcpy>
    9932:	6860      	ldr	r0, [r4, #4]
    9934:	462a      	mov	r2, r5
    9936:	eb09 0106 	add.w	r1, r9, r6
    993a:	e7f0      	b.n	991e <_WriteNoCheck+0x1c>

0000993c <_WriteBlocking>:
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
    993c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  WrOff = pRing->WrOff;
    9940:	68c5      	ldr	r5, [r0, #12]
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
    9942:	4606      	mov	r6, r0
    9944:	4689      	mov	r9, r1
    9946:	4617      	mov	r7, r2
  NumBytesWritten = 0u;
    9948:	f04f 0800 	mov.w	r8, #0
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
    994c:	6933      	ldr	r3, [r6, #16]
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
    994e:	68b4      	ldr	r4, [r6, #8]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    9950:	6870      	ldr	r0, [r6, #4]
    if (RdOff > WrOff) {
    9952:	429d      	cmp	r5, r3
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
    9954:	bf28      	it	cs
    9956:	191b      	addcs	r3, r3, r4
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
    9958:	1b64      	subs	r4, r4, r5
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
    995a:	42bc      	cmp	r4, r7
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
    995c:	f103 33ff 	add.w	r3, r3, #4294967295
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
    9960:	bf28      	it	cs
    9962:	463c      	movcs	r4, r7
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
    9964:	1b5b      	subs	r3, r3, r5
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
    9966:	429c      	cmp	r4, r3
    9968:	bf28      	it	cs
    996a:	461c      	movcs	r4, r3
    996c:	4649      	mov	r1, r9
    996e:	4428      	add	r0, r5
    9970:	4622      	mov	r2, r4
    9972:	f000 f93c 	bl	9bee <memcpy>
    if (WrOff == pRing->SizeOfBuffer) {
    9976:	68b3      	ldr	r3, [r6, #8]
    WrOff           += NumBytesToWrite;
    9978:	4425      	add	r5, r4
      WrOff = 0u;
    997a:	42ab      	cmp	r3, r5
    997c:	bf08      	it	eq
    997e:	2500      	moveq	r5, #0
  } while (NumBytes);
    9980:	1b3f      	subs	r7, r7, r4
    NumBytesWritten += NumBytesToWrite;
    9982:	44a0      	add	r8, r4
    pBuffer         += NumBytesToWrite;
    9984:	44a1      	add	r9, r4
    pRing->WrOff = WrOff;
    9986:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
    9988:	d1e0      	bne.n	994c <_WriteBlocking+0x10>
}
    998a:	4640      	mov	r0, r8
    998c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00009990 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
    9990:	f7fd bf04 	b.w	779c <_DoInit>

00009994 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
    9994:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
    9996:	f7ff fffb 	bl	9990 <SEGGER_RTT_Init>

	return 0;
}
    999a:	2000      	movs	r0, #0
    999c:	bd08      	pop	{r3, pc}

0000999e <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
    999e:	4770      	bx	lr

000099a0 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
    99a0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    99a2:	ab0b      	add	r3, sp, #44	; 0x2c
    99a4:	9305      	str	r3, [sp, #20]
    99a6:	9303      	str	r3, [sp, #12]
    99a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    99aa:	9302      	str	r3, [sp, #8]
    99ac:	2300      	movs	r3, #0
    99ae:	e9cd 3300 	strd	r3, r3, [sp]
    99b2:	2201      	movs	r2, #1
    99b4:	4618      	mov	r0, r3
    99b6:	f7fa fe75 	bl	46a4 <z_impl_z_log_msg_runtime_vcreate>
}
    99ba:	b007      	add	sp, #28
    99bc:	f85d fb04 	ldr.w	pc, [sp], #4

000099c0 <z_early_memset>:
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
    99c0:	f000 b923 	b.w	9c0a <memset>

000099c4 <z_early_memcpy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    99c4:	f000 b913 	b.w	9bee <memcpy>

000099c8 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    99c8:	f3ef 8005 	mrs	r0, IPSR
}
    99cc:	3800      	subs	r0, #0
    99ce:	bf18      	it	ne
    99d0:	2001      	movne	r0, #1
    99d2:	4770      	bx	lr

000099d4 <k_thread_name_get>:
}
    99d4:	2000      	movs	r0, #0
    99d6:	4770      	bx	lr

000099d8 <z_pm_save_idle_exit>:
{
    99d8:	b508      	push	{r3, lr}
	pm_system_resume();
    99da:	f7fb f8fb 	bl	4bd4 <pm_system_resume>
}
    99de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    99e2:	f7ff bdbc 	b.w	955e <sys_clock_idle_exit>

000099e6 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
    99e6:	f990 300e 	ldrsb.w	r3, [r0, #14]
    99ea:	428b      	cmp	r3, r1
    99ec:	d001      	beq.n	99f2 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
    99ee:	f7fe bbf7 	b.w	81e0 <z_set_prio>
}
    99f2:	2000      	movs	r0, #0
    99f4:	4770      	bx	lr

000099f6 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
    99f6:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    99fa:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    99fc:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    99fe:	2300      	movs	r3, #0
	node->prev = NULL;
    9a00:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
    9a04:	4770      	bx	lr

00009a06 <unpend_thread_no_timeout>:
{
    9a06:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
    9a08:	f7ff fff5 	bl	99f6 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    9a0c:	7b43      	ldrb	r3, [r0, #13]
    9a0e:	f023 0302 	bic.w	r3, r3, #2
    9a12:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
    9a14:	2300      	movs	r3, #0
    9a16:	6083      	str	r3, [r0, #8]
}
    9a18:	bd08      	pop	{r3, pc}

00009a1a <z_thread_timeout>:
{
    9a1a:	b510      	push	{r4, lr}
    9a1c:	4601      	mov	r1, r0
	__asm__ volatile(
    9a1e:	f04f 0320 	mov.w	r3, #32
    9a22:	f3ef 8411 	mrs	r4, BASEPRI
    9a26:	f383 8812 	msr	BASEPRI_MAX, r3
    9a2a:	f3bf 8f6f 	isb	sy
		if (!killed) {
    9a2e:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
    9a32:	f013 0f28 	tst.w	r3, #40	; 0x28
    9a36:	d10d      	bne.n	9a54 <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
    9a38:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
    9a3c:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
    9a3e:	b10b      	cbz	r3, 9a44 <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
    9a40:	f7ff ffe1 	bl	9a06 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    9a44:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
    9a48:	f023 0314 	bic.w	r3, r3, #20
    9a4c:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
    9a50:	f7fe fad0 	bl	7ff4 <ready_thread>
	__asm__ volatile(
    9a54:	f384 8811 	msr	BASEPRI, r4
    9a58:	f3bf 8f6f 	isb	sy
}
    9a5c:	bd10      	pop	{r4, pc}

00009a5e <add_to_waitq_locked>:
{
    9a5e:	b538      	push	{r3, r4, r5, lr}
    9a60:	4604      	mov	r4, r0
    9a62:	460d      	mov	r5, r1
	unready_thread(thread);
    9a64:	f7fe fafa 	bl	805c <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    9a68:	7b63      	ldrb	r3, [r4, #13]
    9a6a:	f043 0302 	orr.w	r3, r3, #2
    9a6e:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    9a70:	b1e5      	cbz	r5, 9aac <add_to_waitq_locked+0x4e>
		thread->base.pended_on = wait_q;
    9a72:	60a5      	str	r5, [r4, #8]
	return list->head == list;
    9a74:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9a76:	429d      	cmp	r5, r3
    9a78:	d109      	bne.n	9a8e <add_to_waitq_locked+0x30>
	sys_dnode_t *const tail = list->tail;
    9a7a:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    9a7c:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    9a80:	601c      	str	r4, [r3, #0]
	list->tail = node;
    9a82:	606c      	str	r4, [r5, #4]
}
    9a84:	e012      	b.n	9aac <add_to_waitq_locked+0x4e>
	return (node == list->tail) ? NULL : node->next;
    9a86:	686a      	ldr	r2, [r5, #4]
    9a88:	4293      	cmp	r3, r2
    9a8a:	d0f6      	beq.n	9a7a <add_to_waitq_locked+0x1c>
    9a8c:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    9a8e:	2b00      	cmp	r3, #0
    9a90:	d0f3      	beq.n	9a7a <add_to_waitq_locked+0x1c>
	int32_t b1 = thread_1->base.prio;
    9a92:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    9a96:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
    9a9a:	428a      	cmp	r2, r1
    9a9c:	d0f3      	beq.n	9a86 <add_to_waitq_locked+0x28>
		if (z_sched_prio_cmp(thread, t) > 0) {
    9a9e:	4291      	cmp	r1, r2
    9aa0:	ddf1      	ble.n	9a86 <add_to_waitq_locked+0x28>
	sys_dnode_t *const prev = successor->prev;
    9aa2:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    9aa4:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    9aa8:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    9aaa:	605c      	str	r4, [r3, #4]
}
    9aac:	bd38      	pop	{r3, r4, r5, pc}

00009aae <z_ready_thread>:
{
    9aae:	b510      	push	{r4, lr}
	__asm__ volatile(
    9ab0:	f04f 0320 	mov.w	r3, #32
    9ab4:	f3ef 8411 	mrs	r4, BASEPRI
    9ab8:	f383 8812 	msr	BASEPRI_MAX, r3
    9abc:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
    9ac0:	f7fe fa98 	bl	7ff4 <ready_thread>
	__asm__ volatile(
    9ac4:	f384 8811 	msr	BASEPRI, r4
    9ac8:	f3bf 8f6f 	isb	sy
}
    9acc:	bd10      	pop	{r4, pc}

00009ace <z_unpend_first_thread>:
{
    9ace:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    9ad0:	f04f 0320 	mov.w	r3, #32
    9ad4:	f3ef 8511 	mrs	r5, BASEPRI
    9ad8:	f383 8812 	msr	BASEPRI_MAX, r3
    9adc:	f3bf 8f6f 	isb	sy
	return list->head == list;
    9ae0:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9ae2:	42a0      	cmp	r0, r4
    9ae4:	d00d      	beq.n	9b02 <z_unpend_first_thread+0x34>
		if (thread != NULL) {
    9ae6:	b134      	cbz	r4, 9af6 <z_unpend_first_thread+0x28>
			unpend_thread_no_timeout(thread);
    9ae8:	4620      	mov	r0, r4
    9aea:	f7ff ff8c 	bl	9a06 <unpend_thread_no_timeout>
    9aee:	f104 0018 	add.w	r0, r4, #24
    9af2:	f000 f81e 	bl	9b32 <z_abort_timeout>
	__asm__ volatile(
    9af6:	f385 8811 	msr	BASEPRI, r5
    9afa:	f3bf 8f6f 	isb	sy
}
    9afe:	4620      	mov	r0, r4
    9b00:	bd38      	pop	{r3, r4, r5, pc}
    9b02:	2400      	movs	r4, #0
    9b04:	e7f7      	b.n	9af6 <z_unpend_first_thread+0x28>

00009b06 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    9b06:	4603      	mov	r3, r0
    9b08:	b920      	cbnz	r0, 9b14 <z_reschedule_irqlock+0xe>
    9b0a:	f3ef 8205 	mrs	r2, IPSR
    9b0e:	b90a      	cbnz	r2, 9b14 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
    9b10:	f7fb ba84 	b.w	501c <arch_swap>
    9b14:	f383 8811 	msr	BASEPRI, r3
    9b18:	f3bf 8f6f 	isb	sy
}
    9b1c:	4770      	bx	lr

00009b1e <z_reschedule_unlocked>:
	__asm__ volatile(
    9b1e:	f04f 0320 	mov.w	r3, #32
    9b22:	f3ef 8011 	mrs	r0, BASEPRI
    9b26:	f383 8812 	msr	BASEPRI_MAX, r3
    9b2a:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    9b2e:	f7ff bfea 	b.w	9b06 <z_reschedule_irqlock>

00009b32 <z_abort_timeout>:
{
    9b32:	b510      	push	{r4, lr}
    9b34:	f04f 0220 	mov.w	r2, #32
    9b38:	f3ef 8411 	mrs	r4, BASEPRI
    9b3c:	f382 8812 	msr	BASEPRI_MAX, r2
    9b40:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    9b44:	6803      	ldr	r3, [r0, #0]
    9b46:	b13b      	cbz	r3, 9b58 <z_abort_timeout+0x26>
			remove_timeout(to);
    9b48:	f7fe fd7c 	bl	8644 <remove_timeout>
			ret = 0;
    9b4c:	2000      	movs	r0, #0
	__asm__ volatile(
    9b4e:	f384 8811 	msr	BASEPRI, r4
    9b52:	f3bf 8f6f 	isb	sy
}
    9b56:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    9b58:	f06f 0015 	mvn.w	r0, #21
    9b5c:	e7f7      	b.n	9b4e <z_abort_timeout+0x1c>

00009b5e <z_get_next_timeout_expiry>:
{
    9b5e:	b510      	push	{r4, lr}
	__asm__ volatile(
    9b60:	f04f 0320 	mov.w	r3, #32
    9b64:	f3ef 8411 	mrs	r4, BASEPRI
    9b68:	f383 8812 	msr	BASEPRI_MAX, r3
    9b6c:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    9b70:	f7fe fd40 	bl	85f4 <next_timeout>
	__asm__ volatile(
    9b74:	f384 8811 	msr	BASEPRI, r4
    9b78:	f3bf 8f6f 	isb	sy
}
    9b7c:	bd10      	pop	{r4, pc}

00009b7e <z_set_timeout_expiry>:
{
    9b7e:	b570      	push	{r4, r5, r6, lr}
    9b80:	4604      	mov	r4, r0
    9b82:	460d      	mov	r5, r1
	__asm__ volatile(
    9b84:	f04f 0320 	mov.w	r3, #32
    9b88:	f3ef 8611 	mrs	r6, BASEPRI
    9b8c:	f383 8812 	msr	BASEPRI_MAX, r3
    9b90:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
    9b94:	f7fe fd2e 	bl	85f4 <next_timeout>
			      || (ticks <= next_to);
    9b98:	2801      	cmp	r0, #1
    9b9a:	dd07      	ble.n	9bac <z_set_timeout_expiry+0x2e>
    9b9c:	42a0      	cmp	r0, r4
    9b9e:	db05      	blt.n	9bac <z_set_timeout_expiry+0x2e>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    9ba0:	42a0      	cmp	r0, r4
    9ba2:	4629      	mov	r1, r5
    9ba4:	bfa8      	it	ge
    9ba6:	4620      	movge	r0, r4
    9ba8:	f7fc fde0 	bl	676c <sys_clock_set_timeout>
	__asm__ volatile(
    9bac:	f386 8811 	msr	BASEPRI, r6
    9bb0:	f3bf 8f6f 	isb	sy
}
    9bb4:	bd70      	pop	{r4, r5, r6, pc}

00009bb6 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    9bb6:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    9bb8:	f7fe fe38 	bl	882c <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    9bbc:	bd08      	pop	{r3, pc}

00009bbe <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    9bbe:	b108      	cbz	r0, 9bc4 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    9bc0:	f7fb bfe2 	b.w	5b88 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    9bc4:	4770      	bx	lr

00009bc6 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    9bc6:	4770      	bx	lr

00009bc8 <fabs>:
    9bc8:	ec51 0b10 	vmov	r0, r1, d0
    9bcc:	4602      	mov	r2, r0
    9bce:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
    9bd2:	ec43 2b10 	vmov	d0, r2, r3
    9bd6:	4770      	bx	lr

00009bd8 <finite>:
    9bd8:	b082      	sub	sp, #8
    9bda:	ed8d 0b00 	vstr	d0, [sp]
    9bde:	9801      	ldr	r0, [sp, #4]
    9be0:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
    9be4:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
    9be8:	0fc0      	lsrs	r0, r0, #31
    9bea:	b002      	add	sp, #8
    9bec:	4770      	bx	lr

00009bee <memcpy>:
    9bee:	440a      	add	r2, r1
    9bf0:	4291      	cmp	r1, r2
    9bf2:	f100 33ff 	add.w	r3, r0, #4294967295
    9bf6:	d100      	bne.n	9bfa <memcpy+0xc>
    9bf8:	4770      	bx	lr
    9bfa:	b510      	push	{r4, lr}
    9bfc:	f811 4b01 	ldrb.w	r4, [r1], #1
    9c00:	f803 4f01 	strb.w	r4, [r3, #1]!
    9c04:	4291      	cmp	r1, r2
    9c06:	d1f9      	bne.n	9bfc <memcpy+0xe>
    9c08:	bd10      	pop	{r4, pc}

00009c0a <memset>:
    9c0a:	4402      	add	r2, r0
    9c0c:	4603      	mov	r3, r0
    9c0e:	4293      	cmp	r3, r2
    9c10:	d100      	bne.n	9c14 <memset+0xa>
    9c12:	4770      	bx	lr
    9c14:	f803 1b01 	strb.w	r1, [r3], #1
    9c18:	e7f9      	b.n	9c0e <memset+0x4>

00009c1a <strnlen>:
    9c1a:	b510      	push	{r4, lr}
    9c1c:	4602      	mov	r2, r0
    9c1e:	4401      	add	r1, r0
    9c20:	428a      	cmp	r2, r1
    9c22:	4613      	mov	r3, r2
    9c24:	d003      	beq.n	9c2e <strnlen+0x14>
    9c26:	781c      	ldrb	r4, [r3, #0]
    9c28:	3201      	adds	r2, #1
    9c2a:	2c00      	cmp	r4, #0
    9c2c:	d1f8      	bne.n	9c20 <strnlen+0x6>
    9c2e:	1a18      	subs	r0, r3, r0
    9c30:	bd10      	pop	{r4, pc}
	...
