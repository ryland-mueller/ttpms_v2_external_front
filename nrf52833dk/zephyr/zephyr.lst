
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
			msg->len);
		if (!(msg->flags & I2C_MSG_READ)) {
			LOG_HEXDUMP_DBG(msg->buf, msg->len, "contents:");
		}
	}
}
   0:	00 a5 00 20 79 6a 01 00 75 27 02 00 4d 6a 01 00     ... yj..u'..Mj..
  10:	4d 6a 01 00 4d 6a 01 00 4d 6a 01 00 00 00 00 00     Mj..Mj..Mj......
	...
  2c:	c1 62 01 00 4d 6a 01 00 00 00 00 00 31 62 01 00     .b..Mj......1b..
  3c:	4d 6a 01 00                                         Mj..

00000040 <_irq_vector_table>:
  40:	31 64 01 00 cb 42 02 00 31 64 01 00 31 64 01 00     1d...B..1d..1d..
  50:	31 64 01 00 31 64 01 00 31 64 01 00 31 64 01 00     1d..1d..1d..1d..
  60:	79 42 02 00 31 64 01 00 31 64 01 00 b1 42 02 00     yB..1d..1d...B..
  70:	31 64 01 00 31 64 01 00 31 64 01 00 31 64 01 00     1d..1d..1d..1d..
  80:	31 64 01 00 31 64 01 00 31 64 01 00 31 64 01 00     1d..1d..1d..1d..
  90:	31 64 01 00 31 64 01 00 31 64 01 00 31 64 01 00     1d..1d..1d..1d..
  a0:	31 64 01 00 31 64 01 00 31 64 01 00 31 64 01 00     1d..1d..1d..1d..
  b0:	31 64 01 00 31 64 01 00 31 64 01 00 31 64 01 00     1d..1d..1d..1d..
  c0:	31 64 01 00 31 64 01 00 31 64 01 00 31 64 01 00     1d..1d..1d..1d..
  d0:	31 64 01 00 31 64 01 00 31 64 01 00 31 64 01 00     1d..1d..1d..1d..
  e0:	31 64 01 00 31 64 01 00 31 64 01 00 31 64 01 00     1d..1d..1d..1d..
  f0:	31 64 01 00 31 64 01 00 31 64 01 00 31 64 01 00     1d..1d..1d..1d..

Disassembly of section text:

00000100 <__aeabi_drsub>:
     100:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
     104:	e002      	b.n	10c <__adddf3>
     106:	bf00      	nop

00000108 <__aeabi_dsub>:
     108:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000010c <__adddf3>:
     10c:	b530      	push	{r4, r5, lr}
     10e:	ea4f 0441 	mov.w	r4, r1, lsl #1
     112:	ea4f 0543 	mov.w	r5, r3, lsl #1
     116:	ea94 0f05 	teq	r4, r5
     11a:	bf08      	it	eq
     11c:	ea90 0f02 	teqeq	r0, r2
     120:	bf1f      	itttt	ne
     122:	ea54 0c00 	orrsne.w	ip, r4, r0
     126:	ea55 0c02 	orrsne.w	ip, r5, r2
     12a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
     12e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     132:	f000 80e2 	beq.w	2fa <CONFIG_FLASH_SIZE+0xfa>
     136:	ea4f 5454 	mov.w	r4, r4, lsr #21
     13a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
     13e:	bfb8      	it	lt
     140:	426d      	neglt	r5, r5
     142:	dd0c      	ble.n	15e <CONFIG_IDLE_STACK_SIZE+0x1e>
     144:	442c      	add	r4, r5
     146:	ea80 0202 	eor.w	r2, r0, r2
     14a:	ea81 0303 	eor.w	r3, r1, r3
     14e:	ea82 0000 	eor.w	r0, r2, r0
     152:	ea83 0101 	eor.w	r1, r3, r1
     156:	ea80 0202 	eor.w	r2, r0, r2
     15a:	ea81 0303 	eor.w	r3, r1, r3
     15e:	2d36      	cmp	r5, #54	; 0x36
     160:	bf88      	it	hi
     162:	bd30      	pophi	{r4, r5, pc}
     164:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     168:	ea4f 3101 	mov.w	r1, r1, lsl #12
     16c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
     170:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
     174:	d002      	beq.n	17c <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xf>
     176:	4240      	negs	r0, r0
     178:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     17c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
     180:	ea4f 3303 	mov.w	r3, r3, lsl #12
     184:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
     188:	d002      	beq.n	190 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x23>
     18a:	4252      	negs	r2, r2
     18c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     190:	ea94 0f05 	teq	r4, r5
     194:	f000 80a7 	beq.w	2e6 <CONFIG_FLASH_SIZE+0xe6>
     198:	f1a4 0401 	sub.w	r4, r4, #1
     19c:	f1d5 0e20 	rsbs	lr, r5, #32
     1a0:	db0d      	blt.n	1be <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x51>
     1a2:	fa02 fc0e 	lsl.w	ip, r2, lr
     1a6:	fa22 f205 	lsr.w	r2, r2, r5
     1aa:	1880      	adds	r0, r0, r2
     1ac:	f141 0100 	adc.w	r1, r1, #0
     1b0:	fa03 f20e 	lsl.w	r2, r3, lr
     1b4:	1880      	adds	r0, r0, r2
     1b6:	fa43 f305 	asr.w	r3, r3, r5
     1ba:	4159      	adcs	r1, r3
     1bc:	e00e      	b.n	1dc <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x6f>
     1be:	f1a5 0520 	sub.w	r5, r5, #32
     1c2:	f10e 0e20 	add.w	lr, lr, #32
     1c6:	2a01      	cmp	r2, #1
     1c8:	fa03 fc0e 	lsl.w	ip, r3, lr
     1cc:	bf28      	it	cs
     1ce:	f04c 0c02 	orrcs.w	ip, ip, #2
     1d2:	fa43 f305 	asr.w	r3, r3, r5
     1d6:	18c0      	adds	r0, r0, r3
     1d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
     1dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     1e0:	d507      	bpl.n	1f2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x85>
     1e2:	f04f 0e00 	mov.w	lr, #0
     1e6:	f1dc 0c00 	rsbs	ip, ip, #0
     1ea:	eb7e 0000 	sbcs.w	r0, lr, r0
     1ee:	eb6e 0101 	sbc.w	r1, lr, r1
     1f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
     1f6:	d31b      	bcc.n	230 <CONFIG_FLASH_SIZE+0x30>
     1f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
     1fc:	d30c      	bcc.n	218 <CONFIG_FLASH_SIZE+0x18>
     1fe:	0849      	lsrs	r1, r1, #1
     200:	ea5f 0030 	movs.w	r0, r0, rrx
     204:	ea4f 0c3c 	mov.w	ip, ip, rrx
     208:	f104 0401 	add.w	r4, r4, #1
     20c:	ea4f 5244 	mov.w	r2, r4, lsl #21
     210:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
     214:	f080 809a 	bcs.w	34c <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x4c>
     218:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     21c:	bf08      	it	eq
     21e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     222:	f150 0000 	adcs.w	r0, r0, #0
     226:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     22a:	ea41 0105 	orr.w	r1, r1, r5
     22e:	bd30      	pop	{r4, r5, pc}
     230:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
     234:	4140      	adcs	r0, r0
     236:	eb41 0101 	adc.w	r1, r1, r1
     23a:	3c01      	subs	r4, #1
     23c:	bf28      	it	cs
     23e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
     242:	d2e9      	bcs.n	218 <CONFIG_FLASH_SIZE+0x18>
     244:	f091 0f00 	teq	r1, #0
     248:	bf04      	itt	eq
     24a:	4601      	moveq	r1, r0
     24c:	2000      	moveq	r0, #0
     24e:	fab1 f381 	clz	r3, r1
     252:	bf08      	it	eq
     254:	3320      	addeq	r3, #32
     256:	f1a3 030b 	sub.w	r3, r3, #11
     25a:	f1b3 0220 	subs.w	r2, r3, #32
     25e:	da0c      	bge.n	27a <CONFIG_FLASH_SIZE+0x7a>
     260:	320c      	adds	r2, #12
     262:	dd08      	ble.n	276 <CONFIG_FLASH_SIZE+0x76>
     264:	f102 0c14 	add.w	ip, r2, #20
     268:	f1c2 020c 	rsb	r2, r2, #12
     26c:	fa01 f00c 	lsl.w	r0, r1, ip
     270:	fa21 f102 	lsr.w	r1, r1, r2
     274:	e00c      	b.n	290 <CONFIG_FLASH_SIZE+0x90>
     276:	f102 0214 	add.w	r2, r2, #20
     27a:	bfd8      	it	le
     27c:	f1c2 0c20 	rsble	ip, r2, #32
     280:	fa01 f102 	lsl.w	r1, r1, r2
     284:	fa20 fc0c 	lsr.w	ip, r0, ip
     288:	bfdc      	itt	le
     28a:	ea41 010c 	orrle.w	r1, r1, ip
     28e:	4090      	lslle	r0, r2
     290:	1ae4      	subs	r4, r4, r3
     292:	bfa2      	ittt	ge
     294:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
     298:	4329      	orrge	r1, r5
     29a:	bd30      	popge	{r4, r5, pc}
     29c:	ea6f 0404 	mvn.w	r4, r4
     2a0:	3c1f      	subs	r4, #31
     2a2:	da1c      	bge.n	2de <CONFIG_FLASH_SIZE+0xde>
     2a4:	340c      	adds	r4, #12
     2a6:	dc0e      	bgt.n	2c6 <CONFIG_FLASH_SIZE+0xc6>
     2a8:	f104 0414 	add.w	r4, r4, #20
     2ac:	f1c4 0220 	rsb	r2, r4, #32
     2b0:	fa20 f004 	lsr.w	r0, r0, r4
     2b4:	fa01 f302 	lsl.w	r3, r1, r2
     2b8:	ea40 0003 	orr.w	r0, r0, r3
     2bc:	fa21 f304 	lsr.w	r3, r1, r4
     2c0:	ea45 0103 	orr.w	r1, r5, r3
     2c4:	bd30      	pop	{r4, r5, pc}
     2c6:	f1c4 040c 	rsb	r4, r4, #12
     2ca:	f1c4 0220 	rsb	r2, r4, #32
     2ce:	fa20 f002 	lsr.w	r0, r0, r2
     2d2:	fa01 f304 	lsl.w	r3, r1, r4
     2d6:	ea40 0003 	orr.w	r0, r0, r3
     2da:	4629      	mov	r1, r5
     2dc:	bd30      	pop	{r4, r5, pc}
     2de:	fa21 f004 	lsr.w	r0, r1, r4
     2e2:	4629      	mov	r1, r5
     2e4:	bd30      	pop	{r4, r5, pc}
     2e6:	f094 0f00 	teq	r4, #0
     2ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
     2ee:	bf06      	itte	eq
     2f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
     2f4:	3401      	addeq	r4, #1
     2f6:	3d01      	subne	r5, #1
     2f8:	e74e      	b.n	198 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2b>
     2fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     2fe:	bf18      	it	ne
     300:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     304:	d029      	beq.n	35a <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x5a>
     306:	ea94 0f05 	teq	r4, r5
     30a:	bf08      	it	eq
     30c:	ea90 0f02 	teqeq	r0, r2
     310:	d005      	beq.n	31e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x1e>
     312:	ea54 0c00 	orrs.w	ip, r4, r0
     316:	bf04      	itt	eq
     318:	4619      	moveq	r1, r3
     31a:	4610      	moveq	r0, r2
     31c:	bd30      	pop	{r4, r5, pc}
     31e:	ea91 0f03 	teq	r1, r3
     322:	bf1e      	ittt	ne
     324:	2100      	movne	r1, #0
     326:	2000      	movne	r0, #0
     328:	bd30      	popne	{r4, r5, pc}
     32a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
     32e:	d105      	bne.n	33c <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x3c>
     330:	0040      	lsls	r0, r0, #1
     332:	4149      	adcs	r1, r1
     334:	bf28      	it	cs
     336:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
     33a:	bd30      	pop	{r4, r5, pc}
     33c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
     340:	bf3c      	itt	cc
     342:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
     346:	bd30      	popcc	{r4, r5, pc}
     348:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     34c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
     350:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     354:	f04f 0000 	mov.w	r0, #0
     358:	bd30      	pop	{r4, r5, pc}
     35a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     35e:	bf1a      	itte	ne
     360:	4619      	movne	r1, r3
     362:	4610      	movne	r0, r2
     364:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
     368:	bf1c      	itt	ne
     36a:	460b      	movne	r3, r1
     36c:	4602      	movne	r2, r0
     36e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     372:	bf06      	itte	eq
     374:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
     378:	ea91 0f03 	teqeq	r1, r3
     37c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
     380:	bd30      	pop	{r4, r5, pc}
     382:	bf00      	nop

00000384 <__aeabi_ui2d>:
     384:	f090 0f00 	teq	r0, #0
     388:	bf04      	itt	eq
     38a:	2100      	moveq	r1, #0
     38c:	4770      	bxeq	lr
     38e:	b530      	push	{r4, r5, lr}
     390:	f44f 6480 	mov.w	r4, #1024	; 0x400
     394:	f104 0432 	add.w	r4, r4, #50	; 0x32
     398:	f04f 0500 	mov.w	r5, #0
     39c:	f04f 0100 	mov.w	r1, #0
     3a0:	e750      	b.n	244 <CONFIG_FLASH_SIZE+0x44>
     3a2:	bf00      	nop

000003a4 <__aeabi_i2d>:
     3a4:	f090 0f00 	teq	r0, #0
     3a8:	bf04      	itt	eq
     3aa:	2100      	moveq	r1, #0
     3ac:	4770      	bxeq	lr
     3ae:	b530      	push	{r4, r5, lr}
     3b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
     3b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
     3b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
     3bc:	bf48      	it	mi
     3be:	4240      	negmi	r0, r0
     3c0:	f04f 0100 	mov.w	r1, #0
     3c4:	e73e      	b.n	244 <CONFIG_FLASH_SIZE+0x44>
     3c6:	bf00      	nop

000003c8 <__aeabi_f2d>:
     3c8:	0042      	lsls	r2, r0, #1
     3ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
     3ce:	ea4f 0131 	mov.w	r1, r1, rrx
     3d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
     3d6:	bf1f      	itttt	ne
     3d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
     3dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     3e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
     3e4:	4770      	bxne	lr
     3e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
     3ea:	bf08      	it	eq
     3ec:	4770      	bxeq	lr
     3ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
     3f2:	bf04      	itt	eq
     3f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
     3f8:	4770      	bxeq	lr
     3fa:	b530      	push	{r4, r5, lr}
     3fc:	f44f 7460 	mov.w	r4, #896	; 0x380
     400:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     404:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     408:	e71c      	b.n	244 <CONFIG_FLASH_SIZE+0x44>
     40a:	bf00      	nop

0000040c <__aeabi_ul2d>:
     40c:	ea50 0201 	orrs.w	r2, r0, r1
     410:	bf08      	it	eq
     412:	4770      	bxeq	lr
     414:	b530      	push	{r4, r5, lr}
     416:	f04f 0500 	mov.w	r5, #0
     41a:	e00a      	b.n	432 <__aeabi_l2d+0x16>

0000041c <__aeabi_l2d>:
     41c:	ea50 0201 	orrs.w	r2, r0, r1
     420:	bf08      	it	eq
     422:	4770      	bxeq	lr
     424:	b530      	push	{r4, r5, lr}
     426:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
     42a:	d502      	bpl.n	432 <__aeabi_l2d+0x16>
     42c:	4240      	negs	r0, r0
     42e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     432:	f44f 6480 	mov.w	r4, #1024	; 0x400
     436:	f104 0432 	add.w	r4, r4, #50	; 0x32
     43a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
     43e:	f43f aed8 	beq.w	1f2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x85>
     442:	f04f 0203 	mov.w	r2, #3
     446:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     44a:	bf18      	it	ne
     44c:	3203      	addne	r2, #3
     44e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     452:	bf18      	it	ne
     454:	3203      	addne	r2, #3
     456:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
     45a:	f1c2 0320 	rsb	r3, r2, #32
     45e:	fa00 fc03 	lsl.w	ip, r0, r3
     462:	fa20 f002 	lsr.w	r0, r0, r2
     466:	fa01 fe03 	lsl.w	lr, r1, r3
     46a:	ea40 000e 	orr.w	r0, r0, lr
     46e:	fa21 f102 	lsr.w	r1, r1, r2
     472:	4414      	add	r4, r2
     474:	e6bd      	b.n	1f2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x85>
     476:	bf00      	nop

00000478 <__aeabi_dmul>:
     478:	b570      	push	{r4, r5, r6, lr}
     47a:	f04f 0cff 	mov.w	ip, #255	; 0xff
     47e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     482:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     486:	bf1d      	ittte	ne
     488:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     48c:	ea94 0f0c 	teqne	r4, ip
     490:	ea95 0f0c 	teqne	r5, ip
     494:	f000 f8de 	bleq	654 <CONFIG_BT_HCI_TX_STACK_SIZE+0x54>
     498:	442c      	add	r4, r5
     49a:	ea81 0603 	eor.w	r6, r1, r3
     49e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
     4a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
     4a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
     4aa:	bf18      	it	ne
     4ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
     4b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     4b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     4b8:	d038      	beq.n	52c <CONFIG_BT_LONG_WQ_STACK_SIZE+0x18>
     4ba:	fba0 ce02 	umull	ip, lr, r0, r2
     4be:	f04f 0500 	mov.w	r5, #0
     4c2:	fbe1 e502 	umlal	lr, r5, r1, r2
     4c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
     4ca:	fbe0 e503 	umlal	lr, r5, r0, r3
     4ce:	f04f 0600 	mov.w	r6, #0
     4d2:	fbe1 5603 	umlal	r5, r6, r1, r3
     4d6:	f09c 0f00 	teq	ip, #0
     4da:	bf18      	it	ne
     4dc:	f04e 0e01 	orrne.w	lr, lr, #1
     4e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
     4e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
     4e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
     4ec:	d204      	bcs.n	4f8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x10>
     4ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
     4f2:	416d      	adcs	r5, r5
     4f4:	eb46 0606 	adc.w	r6, r6, r6
     4f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
     4fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
     500:	ea4f 20c5 	mov.w	r0, r5, lsl #11
     504:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
     508:	ea4f 2ece 	mov.w	lr, lr, lsl #11
     50c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     510:	bf88      	it	hi
     512:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     516:	d81e      	bhi.n	556 <CONFIG_BT_DEVICE_APPEARANCE+0x4>
     518:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
     51c:	bf08      	it	eq
     51e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
     522:	f150 0000 	adcs.w	r0, r0, #0
     526:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     52a:	bd70      	pop	{r4, r5, r6, pc}
     52c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
     530:	ea46 0101 	orr.w	r1, r6, r1
     534:	ea40 0002 	orr.w	r0, r0, r2
     538:	ea81 0103 	eor.w	r1, r1, r3
     53c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
     540:	bfc2      	ittt	gt
     542:	ebd4 050c 	rsbsgt	r5, r4, ip
     546:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     54a:	bd70      	popgt	{r4, r5, r6, pc}
     54c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     550:	f04f 0e00 	mov.w	lr, #0
     554:	3c01      	subs	r4, #1
     556:	f300 80ab 	bgt.w	6b0 <CONFIG_BT_HCI_TX_STACK_SIZE+0xb0>
     55a:	f114 0f36 	cmn.w	r4, #54	; 0x36
     55e:	bfde      	ittt	le
     560:	2000      	movle	r0, #0
     562:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
     566:	bd70      	pople	{r4, r5, r6, pc}
     568:	f1c4 0400 	rsb	r4, r4, #0
     56c:	3c20      	subs	r4, #32
     56e:	da35      	bge.n	5dc <CONFIG_BT_DEVICE_APPEARANCE+0x8a>
     570:	340c      	adds	r4, #12
     572:	dc1b      	bgt.n	5ac <CONFIG_BT_DEVICE_APPEARANCE+0x5a>
     574:	f104 0414 	add.w	r4, r4, #20
     578:	f1c4 0520 	rsb	r5, r4, #32
     57c:	fa00 f305 	lsl.w	r3, r0, r5
     580:	fa20 f004 	lsr.w	r0, r0, r4
     584:	fa01 f205 	lsl.w	r2, r1, r5
     588:	ea40 0002 	orr.w	r0, r0, r2
     58c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
     590:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     594:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     598:	fa21 f604 	lsr.w	r6, r1, r4
     59c:	eb42 0106 	adc.w	r1, r2, r6
     5a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5a4:	bf08      	it	eq
     5a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     5aa:	bd70      	pop	{r4, r5, r6, pc}
     5ac:	f1c4 040c 	rsb	r4, r4, #12
     5b0:	f1c4 0520 	rsb	r5, r4, #32
     5b4:	fa00 f304 	lsl.w	r3, r0, r4
     5b8:	fa20 f005 	lsr.w	r0, r0, r5
     5bc:	fa01 f204 	lsl.w	r2, r1, r4
     5c0:	ea40 0002 	orr.w	r0, r0, r2
     5c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     5c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     5cc:	f141 0100 	adc.w	r1, r1, #0
     5d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5d4:	bf08      	it	eq
     5d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     5da:	bd70      	pop	{r4, r5, r6, pc}
     5dc:	f1c4 0520 	rsb	r5, r4, #32
     5e0:	fa00 f205 	lsl.w	r2, r0, r5
     5e4:	ea4e 0e02 	orr.w	lr, lr, r2
     5e8:	fa20 f304 	lsr.w	r3, r0, r4
     5ec:	fa01 f205 	lsl.w	r2, r1, r5
     5f0:	ea43 0302 	orr.w	r3, r3, r2
     5f4:	fa21 f004 	lsr.w	r0, r1, r4
     5f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     5fc:	fa21 f204 	lsr.w	r2, r1, r4
     600:	ea20 0002 	bic.w	r0, r0, r2
     604:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
     608:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     60c:	bf08      	it	eq
     60e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     612:	bd70      	pop	{r4, r5, r6, pc}
     614:	f094 0f00 	teq	r4, #0
     618:	d10f      	bne.n	63a <CONFIG_BT_HCI_TX_STACK_SIZE+0x3a>
     61a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
     61e:	0040      	lsls	r0, r0, #1
     620:	eb41 0101 	adc.w	r1, r1, r1
     624:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     628:	bf08      	it	eq
     62a:	3c01      	subeq	r4, #1
     62c:	d0f7      	beq.n	61e <CONFIG_BT_HCI_TX_STACK_SIZE+0x1e>
     62e:	ea41 0106 	orr.w	r1, r1, r6
     632:	f095 0f00 	teq	r5, #0
     636:	bf18      	it	ne
     638:	4770      	bxne	lr
     63a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
     63e:	0052      	lsls	r2, r2, #1
     640:	eb43 0303 	adc.w	r3, r3, r3
     644:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
     648:	bf08      	it	eq
     64a:	3d01      	subeq	r5, #1
     64c:	d0f7      	beq.n	63e <CONFIG_BT_HCI_TX_STACK_SIZE+0x3e>
     64e:	ea43 0306 	orr.w	r3, r3, r6
     652:	4770      	bx	lr
     654:	ea94 0f0c 	teq	r4, ip
     658:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     65c:	bf18      	it	ne
     65e:	ea95 0f0c 	teqne	r5, ip
     662:	d00c      	beq.n	67e <CONFIG_BT_HCI_TX_STACK_SIZE+0x7e>
     664:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     668:	bf18      	it	ne
     66a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     66e:	d1d1      	bne.n	614 <CONFIG_BT_HCI_TX_STACK_SIZE+0x14>
     670:	ea81 0103 	eor.w	r1, r1, r3
     674:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     678:	f04f 0000 	mov.w	r0, #0
     67c:	bd70      	pop	{r4, r5, r6, pc}
     67e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     682:	bf06      	itte	eq
     684:	4610      	moveq	r0, r2
     686:	4619      	moveq	r1, r3
     688:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     68c:	d019      	beq.n	6c2 <CONFIG_BT_HCI_TX_STACK_SIZE+0xc2>
     68e:	ea94 0f0c 	teq	r4, ip
     692:	d102      	bne.n	69a <CONFIG_BT_HCI_TX_STACK_SIZE+0x9a>
     694:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
     698:	d113      	bne.n	6c2 <CONFIG_BT_HCI_TX_STACK_SIZE+0xc2>
     69a:	ea95 0f0c 	teq	r5, ip
     69e:	d105      	bne.n	6ac <CONFIG_BT_HCI_TX_STACK_SIZE+0xac>
     6a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
     6a4:	bf1c      	itt	ne
     6a6:	4610      	movne	r0, r2
     6a8:	4619      	movne	r1, r3
     6aa:	d10a      	bne.n	6c2 <CONFIG_BT_HCI_TX_STACK_SIZE+0xc2>
     6ac:	ea81 0103 	eor.w	r1, r1, r3
     6b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     6b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     6b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     6bc:	f04f 0000 	mov.w	r0, #0
     6c0:	bd70      	pop	{r4, r5, r6, pc}
     6c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     6c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
     6ca:	bd70      	pop	{r4, r5, r6, pc}

000006cc <__aeabi_ddiv>:
     6cc:	b570      	push	{r4, r5, r6, lr}
     6ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
     6d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     6d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     6da:	bf1d      	ittte	ne
     6dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     6e0:	ea94 0f0c 	teqne	r4, ip
     6e4:	ea95 0f0c 	teqne	r5, ip
     6e8:	f000 f8a7 	bleq	83a <CONFIG_ISR_STACK_SIZE+0x3a>
     6ec:	eba4 0405 	sub.w	r4, r4, r5
     6f0:	ea81 0e03 	eor.w	lr, r1, r3
     6f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     6f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
     6fc:	f000 8088 	beq.w	810 <CONFIG_ISR_STACK_SIZE+0x10>
     700:	ea4f 3303 	mov.w	r3, r3, lsl #12
     704:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
     708:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
     70c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
     710:	ea4f 2202 	mov.w	r2, r2, lsl #8
     714:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
     718:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
     71c:	ea4f 2600 	mov.w	r6, r0, lsl #8
     720:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
     724:	429d      	cmp	r5, r3
     726:	bf08      	it	eq
     728:	4296      	cmpeq	r6, r2
     72a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
     72e:	f504 7440 	add.w	r4, r4, #768	; 0x300
     732:	d202      	bcs.n	73a <__aeabi_ddiv+0x6e>
     734:	085b      	lsrs	r3, r3, #1
     736:	ea4f 0232 	mov.w	r2, r2, rrx
     73a:	1ab6      	subs	r6, r6, r2
     73c:	eb65 0503 	sbc.w	r5, r5, r3
     740:	085b      	lsrs	r3, r3, #1
     742:	ea4f 0232 	mov.w	r2, r2, rrx
     746:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
     74a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
     74e:	ebb6 0e02 	subs.w	lr, r6, r2
     752:	eb75 0e03 	sbcs.w	lr, r5, r3
     756:	bf22      	ittt	cs
     758:	1ab6      	subcs	r6, r6, r2
     75a:	4675      	movcs	r5, lr
     75c:	ea40 000c 	orrcs.w	r0, r0, ip
     760:	085b      	lsrs	r3, r3, #1
     762:	ea4f 0232 	mov.w	r2, r2, rrx
     766:	ebb6 0e02 	subs.w	lr, r6, r2
     76a:	eb75 0e03 	sbcs.w	lr, r5, r3
     76e:	bf22      	ittt	cs
     770:	1ab6      	subcs	r6, r6, r2
     772:	4675      	movcs	r5, lr
     774:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     778:	085b      	lsrs	r3, r3, #1
     77a:	ea4f 0232 	mov.w	r2, r2, rrx
     77e:	ebb6 0e02 	subs.w	lr, r6, r2
     782:	eb75 0e03 	sbcs.w	lr, r5, r3
     786:	bf22      	ittt	cs
     788:	1ab6      	subcs	r6, r6, r2
     78a:	4675      	movcs	r5, lr
     78c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     790:	085b      	lsrs	r3, r3, #1
     792:	ea4f 0232 	mov.w	r2, r2, rrx
     796:	ebb6 0e02 	subs.w	lr, r6, r2
     79a:	eb75 0e03 	sbcs.w	lr, r5, r3
     79e:	bf22      	ittt	cs
     7a0:	1ab6      	subcs	r6, r6, r2
     7a2:	4675      	movcs	r5, lr
     7a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     7a8:	ea55 0e06 	orrs.w	lr, r5, r6
     7ac:	d018      	beq.n	7e0 <__data_size+0x68>
     7ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
     7b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
     7b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
     7ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
     7be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
     7c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
     7c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
     7ca:	d1c0      	bne.n	74e <__aeabi_ddiv+0x82>
     7cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     7d0:	d10b      	bne.n	7ea <__data_size+0x72>
     7d2:	ea41 0100 	orr.w	r1, r1, r0
     7d6:	f04f 0000 	mov.w	r0, #0
     7da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
     7de:	e7b6      	b.n	74e <__aeabi_ddiv+0x82>
     7e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     7e4:	bf04      	itt	eq
     7e6:	4301      	orreq	r1, r0
     7e8:	2000      	moveq	r0, #0
     7ea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     7ee:	bf88      	it	hi
     7f0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     7f4:	f63f aeaf 	bhi.w	556 <CONFIG_BT_DEVICE_APPEARANCE+0x4>
     7f8:	ebb5 0c03 	subs.w	ip, r5, r3
     7fc:	bf04      	itt	eq
     7fe:	ebb6 0c02 	subseq.w	ip, r6, r2
     802:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     806:	f150 0000 	adcs.w	r0, r0, #0
     80a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     80e:	bd70      	pop	{r4, r5, r6, pc}
     810:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
     814:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
     818:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
     81c:	bfc2      	ittt	gt
     81e:	ebd4 050c 	rsbsgt	r5, r4, ip
     822:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     826:	bd70      	popgt	{r4, r5, r6, pc}
     828:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     82c:	f04f 0e00 	mov.w	lr, #0
     830:	3c01      	subs	r4, #1
     832:	e690      	b.n	556 <CONFIG_BT_DEVICE_APPEARANCE+0x4>
     834:	ea45 0e06 	orr.w	lr, r5, r6
     838:	e68d      	b.n	556 <CONFIG_BT_DEVICE_APPEARANCE+0x4>
     83a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     83e:	ea94 0f0c 	teq	r4, ip
     842:	bf08      	it	eq
     844:	ea95 0f0c 	teqeq	r5, ip
     848:	f43f af3b 	beq.w	6c2 <CONFIG_BT_HCI_TX_STACK_SIZE+0xc2>
     84c:	ea94 0f0c 	teq	r4, ip
     850:	d10a      	bne.n	868 <CONFIG_ISR_STACK_SIZE+0x68>
     852:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     856:	f47f af34 	bne.w	6c2 <CONFIG_BT_HCI_TX_STACK_SIZE+0xc2>
     85a:	ea95 0f0c 	teq	r5, ip
     85e:	f47f af25 	bne.w	6ac <CONFIG_BT_HCI_TX_STACK_SIZE+0xac>
     862:	4610      	mov	r0, r2
     864:	4619      	mov	r1, r3
     866:	e72c      	b.n	6c2 <CONFIG_BT_HCI_TX_STACK_SIZE+0xc2>
     868:	ea95 0f0c 	teq	r5, ip
     86c:	d106      	bne.n	87c <CONFIG_ISR_STACK_SIZE+0x7c>
     86e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     872:	f43f aefd 	beq.w	670 <CONFIG_BT_HCI_TX_STACK_SIZE+0x70>
     876:	4610      	mov	r0, r2
     878:	4619      	mov	r1, r3
     87a:	e722      	b.n	6c2 <CONFIG_BT_HCI_TX_STACK_SIZE+0xc2>
     87c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     880:	bf18      	it	ne
     882:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     886:	f47f aec5 	bne.w	614 <CONFIG_BT_HCI_TX_STACK_SIZE+0x14>
     88a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
     88e:	f47f af0d 	bne.w	6ac <CONFIG_BT_HCI_TX_STACK_SIZE+0xac>
     892:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
     896:	f47f aeeb 	bne.w	670 <CONFIG_BT_HCI_TX_STACK_SIZE+0x70>
     89a:	e712      	b.n	6c2 <CONFIG_BT_HCI_TX_STACK_SIZE+0xc2>

0000089c <__gedf2>:
     89c:	f04f 3cff 	mov.w	ip, #4294967295
     8a0:	e006      	b.n	8b0 <__cmpdf2+0x4>
     8a2:	bf00      	nop

000008a4 <__ledf2>:
     8a4:	f04f 0c01 	mov.w	ip, #1
     8a8:	e002      	b.n	8b0 <__cmpdf2+0x4>
     8aa:	bf00      	nop

000008ac <__cmpdf2>:
     8ac:	f04f 0c01 	mov.w	ip, #1
     8b0:	f84d cd04 	str.w	ip, [sp, #-4]!
     8b4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     8b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     8bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     8c0:	bf18      	it	ne
     8c2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
     8c6:	d01b      	beq.n	900 <__cmpdf2+0x54>
     8c8:	b001      	add	sp, #4
     8ca:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
     8ce:	bf0c      	ite	eq
     8d0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
     8d4:	ea91 0f03 	teqne	r1, r3
     8d8:	bf02      	ittt	eq
     8da:	ea90 0f02 	teqeq	r0, r2
     8de:	2000      	moveq	r0, #0
     8e0:	4770      	bxeq	lr
     8e2:	f110 0f00 	cmn.w	r0, #0
     8e6:	ea91 0f03 	teq	r1, r3
     8ea:	bf58      	it	pl
     8ec:	4299      	cmppl	r1, r3
     8ee:	bf08      	it	eq
     8f0:	4290      	cmpeq	r0, r2
     8f2:	bf2c      	ite	cs
     8f4:	17d8      	asrcs	r0, r3, #31
     8f6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
     8fa:	f040 0001 	orr.w	r0, r0, #1
     8fe:	4770      	bx	lr
     900:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     904:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     908:	d102      	bne.n	910 <__cmpdf2+0x64>
     90a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
     90e:	d107      	bne.n	920 <__cmpdf2+0x74>
     910:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     914:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     918:	d1d6      	bne.n	8c8 <__cmpdf2+0x1c>
     91a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
     91e:	d0d3      	beq.n	8c8 <__cmpdf2+0x1c>
     920:	f85d 0b04 	ldr.w	r0, [sp], #4
     924:	4770      	bx	lr
     926:	bf00      	nop

00000928 <__aeabi_cdrcmple>:
     928:	4684      	mov	ip, r0
     92a:	4610      	mov	r0, r2
     92c:	4662      	mov	r2, ip
     92e:	468c      	mov	ip, r1
     930:	4619      	mov	r1, r3
     932:	4663      	mov	r3, ip
     934:	e000      	b.n	938 <__aeabi_cdcmpeq>
     936:	bf00      	nop

00000938 <__aeabi_cdcmpeq>:
     938:	b501      	push	{r0, lr}
     93a:	f7ff ffb7 	bl	8ac <__cmpdf2>
     93e:	2800      	cmp	r0, #0
     940:	bf48      	it	mi
     942:	f110 0f00 	cmnmi.w	r0, #0
     946:	bd01      	pop	{r0, pc}

00000948 <__aeabi_dcmpeq>:
     948:	f84d ed08 	str.w	lr, [sp, #-8]!
     94c:	f7ff fff4 	bl	938 <__aeabi_cdcmpeq>
     950:	bf0c      	ite	eq
     952:	2001      	moveq	r0, #1
     954:	2000      	movne	r0, #0
     956:	f85d fb08 	ldr.w	pc, [sp], #8
     95a:	bf00      	nop

0000095c <__aeabi_dcmplt>:
     95c:	f84d ed08 	str.w	lr, [sp, #-8]!
     960:	f7ff ffea 	bl	938 <__aeabi_cdcmpeq>
     964:	bf34      	ite	cc
     966:	2001      	movcc	r0, #1
     968:	2000      	movcs	r0, #0
     96a:	f85d fb08 	ldr.w	pc, [sp], #8
     96e:	bf00      	nop

00000970 <__aeabi_dcmple>:
     970:	f84d ed08 	str.w	lr, [sp, #-8]!
     974:	f7ff ffe0 	bl	938 <__aeabi_cdcmpeq>
     978:	bf94      	ite	ls
     97a:	2001      	movls	r0, #1
     97c:	2000      	movhi	r0, #0
     97e:	f85d fb08 	ldr.w	pc, [sp], #8
     982:	bf00      	nop

00000984 <__aeabi_dcmpge>:
     984:	f84d ed08 	str.w	lr, [sp, #-8]!
     988:	f7ff ffce 	bl	928 <__aeabi_cdrcmple>
     98c:	bf94      	ite	ls
     98e:	2001      	movls	r0, #1
     990:	2000      	movhi	r0, #0
     992:	f85d fb08 	ldr.w	pc, [sp], #8
     996:	bf00      	nop

00000998 <__aeabi_dcmpgt>:
     998:	f84d ed08 	str.w	lr, [sp, #-8]!
     99c:	f7ff ffc4 	bl	928 <__aeabi_cdrcmple>
     9a0:	bf34      	ite	cc
     9a2:	2001      	movcc	r0, #1
     9a4:	2000      	movcs	r0, #0
     9a6:	f85d fb08 	ldr.w	pc, [sp], #8
     9aa:	bf00      	nop

000009ac <__aeabi_d2iz>:
     9ac:	ea4f 0241 	mov.w	r2, r1, lsl #1
     9b0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
     9b4:	d215      	bcs.n	9e2 <__aeabi_d2iz+0x36>
     9b6:	d511      	bpl.n	9dc <__aeabi_d2iz+0x30>
     9b8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
     9bc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
     9c0:	d912      	bls.n	9e8 <__aeabi_d2iz+0x3c>
     9c2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     9c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     9ca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
     9ce:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     9d2:	fa23 f002 	lsr.w	r0, r3, r2
     9d6:	bf18      	it	ne
     9d8:	4240      	negne	r0, r0
     9da:	4770      	bx	lr
     9dc:	f04f 0000 	mov.w	r0, #0
     9e0:	4770      	bx	lr
     9e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
     9e6:	d105      	bne.n	9f4 <__aeabi_d2iz+0x48>
     9e8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
     9ec:	bf08      	it	eq
     9ee:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
     9f2:	4770      	bx	lr
     9f4:	f04f 0000 	mov.w	r0, #0
     9f8:	4770      	bx	lr
     9fa:	bf00      	nop

000009fc <__aeabi_d2uiz>:
     9fc:	004a      	lsls	r2, r1, #1
     9fe:	d211      	bcs.n	a24 <__aeabi_d2uiz+0x28>
     a00:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
     a04:	d211      	bcs.n	a2a <__aeabi_d2uiz+0x2e>
     a06:	d50d      	bpl.n	a24 <__aeabi_d2uiz+0x28>
     a08:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
     a0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
     a10:	d40e      	bmi.n	a30 <__aeabi_d2uiz+0x34>
     a12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     a16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     a1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
     a1e:	fa23 f002 	lsr.w	r0, r3, r2
     a22:	4770      	bx	lr
     a24:	f04f 0000 	mov.w	r0, #0
     a28:	4770      	bx	lr
     a2a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
     a2e:	d102      	bne.n	a36 <__aeabi_d2uiz+0x3a>
     a30:	f04f 30ff 	mov.w	r0, #4294967295
     a34:	4770      	bx	lr
     a36:	f04f 0000 	mov.w	r0, #0
     a3a:	4770      	bx	lr

00000a3c <__aeabi_d2f>:
     a3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
     a40:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
     a44:	bf24      	itt	cs
     a46:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
     a4a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
     a4e:	d90d      	bls.n	a6c <__aeabi_d2f+0x30>
     a50:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     a54:	ea4f 02c0 	mov.w	r2, r0, lsl #3
     a58:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
     a5c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
     a60:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
     a64:	bf08      	it	eq
     a66:	f020 0001 	biceq.w	r0, r0, #1
     a6a:	4770      	bx	lr
     a6c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
     a70:	d121      	bne.n	ab6 <__aeabi_d2f+0x7a>
     a72:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
     a76:	bfbc      	itt	lt
     a78:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
     a7c:	4770      	bxlt	lr
     a7e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     a82:	ea4f 5252 	mov.w	r2, r2, lsr #21
     a86:	f1c2 0218 	rsb	r2, r2, #24
     a8a:	f1c2 0c20 	rsb	ip, r2, #32
     a8e:	fa10 f30c 	lsls.w	r3, r0, ip
     a92:	fa20 f002 	lsr.w	r0, r0, r2
     a96:	bf18      	it	ne
     a98:	f040 0001 	orrne.w	r0, r0, #1
     a9c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     aa0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
     aa4:	fa03 fc0c 	lsl.w	ip, r3, ip
     aa8:	ea40 000c 	orr.w	r0, r0, ip
     aac:	fa23 f302 	lsr.w	r3, r3, r2
     ab0:	ea4f 0343 	mov.w	r3, r3, lsl #1
     ab4:	e7cc      	b.n	a50 <__aeabi_d2f+0x14>
     ab6:	ea7f 5362 	mvns.w	r3, r2, asr #21
     aba:	d107      	bne.n	acc <__aeabi_d2f+0x90>
     abc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
     ac0:	bf1e      	ittt	ne
     ac2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
     ac6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
     aca:	4770      	bxne	lr
     acc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
     ad0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     ad4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     ad8:	4770      	bx	lr
     ada:	bf00      	nop

00000adc <__aeabi_uldivmod>:
     adc:	b953      	cbnz	r3, af4 <__aeabi_uldivmod+0x18>
     ade:	b94a      	cbnz	r2, af4 <__aeabi_uldivmod+0x18>
     ae0:	2900      	cmp	r1, #0
     ae2:	bf08      	it	eq
     ae4:	2800      	cmpeq	r0, #0
     ae6:	bf1c      	itt	ne
     ae8:	f04f 31ff 	movne.w	r1, #4294967295
     aec:	f04f 30ff 	movne.w	r0, #4294967295
     af0:	f000 b80c 	b.w	b0c <__aeabi_idiv0>
     af4:	f1ad 0c08 	sub.w	ip, sp, #8
     af8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     afc:	f00b fede 	bl	c8bc <__udivmoddi4>
     b00:	f8dd e004 	ldr.w	lr, [sp, #4]
     b04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     b08:	b004      	add	sp, #16
     b0a:	4770      	bx	lr

00000b0c <__aeabi_idiv0>:
     b0c:	4770      	bx	lr
     b0e:	bf00      	nop

00000b10 <ocrypto_bigint_add256>:
     b10:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     b14:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
     b18:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     b1c:	185b      	adds	r3, r3, r1
     b1e:	eb54 040c 	adcs.w	r4, r4, ip
     b22:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     b26:	414d      	adcs	r5, r1
     b28:	eb56 060c 	adcs.w	r6, r6, ip
     b2c:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     b30:	414f      	adcs	r7, r1
     b32:	eb58 080c 	adcs.w	r8, r8, ip
     b36:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     b3a:	eb59 0901 	adcs.w	r9, r9, r1
     b3e:	eb5a 0a0c 	adcs.w	sl, sl, ip
     b42:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
     b46:	4180      	sbcs	r0, r0
     b48:	3001      	adds	r0, #1
     b4a:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     b4e:	4770      	bx	lr

00000b50 <ocrypto_bigint_sub256>:
     b50:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     b54:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
     b58:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     b5c:	1a5b      	subs	r3, r3, r1
     b5e:	eb74 040c 	sbcs.w	r4, r4, ip
     b62:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     b66:	418d      	sbcs	r5, r1
     b68:	eb76 060c 	sbcs.w	r6, r6, ip
     b6c:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     b70:	418f      	sbcs	r7, r1
     b72:	eb78 080c 	sbcs.w	r8, r8, ip
     b76:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     b7a:	eb79 0901 	sbcs.w	r9, r9, r1
     b7e:	eb7a 0a0c 	sbcs.w	sl, sl, ip
     b82:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
     b86:	4180      	sbcs	r0, r0
     b88:	4240      	negs	r0, r0
     b8a:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     b8e:	4770      	bx	lr

00000b90 <ocrypto_bigint_cadd256>:
     b90:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     b94:	4252      	negs	r2, r2
     b96:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
     b9a:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
     b9e:	4017      	ands	r7, r2
     ba0:	19db      	adds	r3, r3, r7
     ba2:	ea18 0802 	ands.w	r8, r8, r2
     ba6:	eb54 0408 	adcs.w	r4, r4, r8
     baa:	ea19 0902 	ands.w	r9, r9, r2
     bae:	eb55 0509 	adcs.w	r5, r5, r9
     bb2:	ea1a 0a02 	ands.w	sl, sl, r2
     bb6:	eb56 060a 	adcs.w	r6, r6, sl
     bba:	c078      	stmia	r0!, {r3, r4, r5, r6}
     bbc:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
     bc0:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
     bc4:	4017      	ands	r7, r2
     bc6:	417b      	adcs	r3, r7
     bc8:	ea18 0802 	ands.w	r8, r8, r2
     bcc:	eb54 0408 	adcs.w	r4, r4, r8
     bd0:	ea19 0902 	ands.w	r9, r9, r2
     bd4:	eb55 0509 	adcs.w	r5, r5, r9
     bd8:	ea1a 0a02 	ands.w	sl, sl, r2
     bdc:	eb56 060a 	adcs.w	r6, r6, sl
     be0:	c078      	stmia	r0!, {r3, r4, r5, r6}
     be2:	4180      	sbcs	r0, r0
     be4:	3001      	adds	r0, #1
     be6:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     bea:	4770      	bx	lr

00000bec <ocrypto_bigint_csub256>:
     bec:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     bf0:	4252      	negs	r2, r2
     bf2:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
     bf6:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
     bfa:	4017      	ands	r7, r2
     bfc:	1bdb      	subs	r3, r3, r7
     bfe:	ea18 0802 	ands.w	r8, r8, r2
     c02:	eb74 0408 	sbcs.w	r4, r4, r8
     c06:	ea19 0902 	ands.w	r9, r9, r2
     c0a:	eb75 0509 	sbcs.w	r5, r5, r9
     c0e:	ea1a 0a02 	ands.w	sl, sl, r2
     c12:	eb76 060a 	sbcs.w	r6, r6, sl
     c16:	c078      	stmia	r0!, {r3, r4, r5, r6}
     c18:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
     c1c:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
     c20:	4017      	ands	r7, r2
     c22:	41bb      	sbcs	r3, r7
     c24:	ea18 0802 	ands.w	r8, r8, r2
     c28:	eb74 0408 	sbcs.w	r4, r4, r8
     c2c:	ea19 0902 	ands.w	r9, r9, r2
     c30:	eb75 0509 	sbcs.w	r5, r5, r9
     c34:	ea1a 0a02 	ands.w	sl, sl, r2
     c38:	eb76 060a 	sbcs.w	r6, r6, sl
     c3c:	c078      	stmia	r0!, {r3, r4, r5, r6}
     c3e:	4180      	sbcs	r0, r0
     c40:	4240      	negs	r0, r0
     c42:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     c46:	4770      	bx	lr

00000c48 <ocrypto_bigint_cswap256>:
     c48:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
     c4c:	4252      	negs	r2, r2
     c4e:	f04f 0804 	mov.w	r8, #4

00000c52 <cswap256_loop>:
     c52:	e890 0030 	ldmia.w	r0, {r4, r5}
     c56:	e891 00c0 	ldmia.w	r1, {r6, r7}
     c5a:	1ba3      	subs	r3, r4, r6
     c5c:	4013      	ands	r3, r2
     c5e:	1ae4      	subs	r4, r4, r3
     c60:	18f6      	adds	r6, r6, r3
     c62:	1beb      	subs	r3, r5, r7
     c64:	4013      	ands	r3, r2
     c66:	1aed      	subs	r5, r5, r3
     c68:	18ff      	adds	r7, r7, r3
     c6a:	c030      	stmia	r0!, {r4, r5}
     c6c:	c1c0      	stmia	r1!, {r6, r7}
     c6e:	f1b8 0801 	subs.w	r8, r8, #1
     c72:	d1ee      	bne.n	c52 <cswap256_loop>
     c74:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
     c78:	4770      	bx	lr
     c7a:	bf00      	nop

00000c7c <ocrypto_mul256_noframe>:
     c7c:	b500      	push	{lr}
     c7e:	ec92 0a08 	vldmia	r2, {s0-s7}
     c82:	e8b1 5780 	ldmia.w	r1!, {r7, r8, r9, sl, ip, lr}
     c86:	ee07 1a10 	vmov	s14, r1
     c8a:	ec53 2a10 	vmov	r2, r3, s0, s1
     c8e:	ec56 4a11 	vmov	r4, r6, s2, s3
     c92:	fba7 5102 	umull	r5, r1, r7, r2
     c96:	fba8 0b02 	umull	r0, fp, r8, r2
     c9a:	fbe7 1063 	umaal	r1, r0, r7, r3
     c9e:	fbe9 b062 	umaal	fp, r0, r9, r2
     ca2:	ec41 5a14 	vmov	s8, s9, r5, r1
     ca6:	fba8 5103 	umull	r5, r1, r8, r3
     caa:	fbea 0162 	umaal	r0, r1, sl, r2
     cae:	fbe7 b564 	umaal	fp, r5, r7, r4
     cb2:	fbe7 0566 	umaal	r0, r5, r7, r6
     cb6:	fbe8 1566 	umaal	r1, r5, r8, r6
     cba:	ee05 ba10 	vmov	s10, fp
     cbe:	fba9 b603 	umull	fp, r6, r9, r3
     cc2:	fbea 1663 	umaal	r1, r6, sl, r3
     cc6:	fbec 5663 	umaal	r5, r6, ip, r3
     cca:	fbe8 0b64 	umaal	r0, fp, r8, r4
     cce:	fbe9 1b64 	umaal	r1, fp, r9, r4
     cd2:	fbea 5b64 	umaal	r5, fp, sl, r4
     cd6:	fbec 6b64 	umaal	r6, fp, ip, r4
     cda:	ee05 0a90 	vmov	s11, r0
     cde:	fbac 3002 	umull	r3, r0, ip, r2
     ce2:	ee12 4a10 	vmov	r4, s4
     ce6:	fbee 5062 	umaal	r5, r0, lr, r2
     cea:	fbe9 6064 	umaal	r6, r0, r9, r4
     cee:	fbea b064 	umaal	fp, r0, sl, r4
     cf2:	fbe7 3164 	umaal	r3, r1, r7, r4
     cf6:	fbe8 5164 	umaal	r5, r1, r8, r4
     cfa:	ee12 4a90 	vmov	r4, s5
     cfe:	fbe8 6164 	umaal	r6, r1, r8, r4
     d02:	fbe9 b164 	umaal	fp, r1, r9, r4
     d06:	fbea 0164 	umaal	r0, r1, sl, r4
     d0a:	ee06 3a10 	vmov	s12, r3
     d0e:	fba7 3204 	umull	r3, r2, r7, r4
     d12:	ee13 4a10 	vmov	r4, s6
     d16:	fbe7 6264 	umaal	r6, r2, r7, r4
     d1a:	fbe8 b264 	umaal	fp, r2, r8, r4
     d1e:	fbe9 0264 	umaal	r0, r2, r9, r4
     d22:	fbea 1264 	umaal	r1, r2, sl, r4
     d26:	ee11 4a90 	vmov	r4, s3
     d2a:	fbe9 5364 	umaal	r5, r3, r9, r4
     d2e:	fbea 6364 	umaal	r6, r3, sl, r4
     d32:	ee13 4a90 	vmov	r4, s7
     d36:	fbe7 b364 	umaal	fp, r3, r7, r4
     d3a:	fbe8 0364 	umaal	r0, r3, r8, r4
     d3e:	fbe9 1364 	umaal	r1, r3, r9, r4
     d42:	fbea 2364 	umaal	r2, r3, sl, r4
     d46:	ee06 5a90 	vmov	s13, r5
     d4a:	ee17 9a10 	vmov	r9, s14
     d4e:	e899 0600 	ldmia.w	r9, {r9, sl}
     d52:	ee10 8a10 	vmov	r8, s0
     d56:	fba9 5408 	umull	r5, r4, r9, r8
     d5a:	fbea b468 	umaal	fp, r4, sl, r8
     d5e:	ee12 8a10 	vmov	r8, s4
     d62:	fbec 0468 	umaal	r0, r4, ip, r8
     d66:	fbee 1468 	umaal	r1, r4, lr, r8
     d6a:	fbe9 2468 	umaal	r2, r4, r9, r8
     d6e:	fbea 3468 	umaal	r3, r4, sl, r8
     d72:	ee10 8a90 	vmov	r8, s1
     d76:	fbee 6568 	umaal	r6, r5, lr, r8
     d7a:	fbe9 b568 	umaal	fp, r5, r9, r8
     d7e:	fbea 0568 	umaal	r0, r5, sl, r8
     d82:	ee12 8a90 	vmov	r8, s5
     d86:	fbec 1568 	umaal	r1, r5, ip, r8
     d8a:	fbee 2568 	umaal	r2, r5, lr, r8
     d8e:	fbe9 3568 	umaal	r3, r5, r9, r8
     d92:	fbea 4568 	umaal	r4, r5, sl, r8
     d96:	ee07 6a10 	vmov	s14, r6
     d9a:	ee11 8a10 	vmov	r8, s2
     d9e:	fbae 7608 	umull	r7, r6, lr, r8
     da2:	fbe9 0668 	umaal	r0, r6, r9, r8
     da6:	fbea 1668 	umaal	r1, r6, sl, r8
     daa:	ee13 8a10 	vmov	r8, s6
     dae:	fbec 2668 	umaal	r2, r6, ip, r8
     db2:	fbee 3668 	umaal	r3, r6, lr, r8
     db6:	fbe9 4668 	umaal	r4, r6, r9, r8
     dba:	fbea 5668 	umaal	r5, r6, sl, r8
     dbe:	ee11 8a90 	vmov	r8, s3
     dc2:	fbec b768 	umaal	fp, r7, ip, r8
     dc6:	fbee 0768 	umaal	r0, r7, lr, r8
     dca:	fbe9 1768 	umaal	r1, r7, r9, r8
     dce:	fbea 2768 	umaal	r2, r7, sl, r8
     dd2:	ee13 8a90 	vmov	r8, s7
     dd6:	fbec 3768 	umaal	r3, r7, ip, r8
     dda:	fbee 4768 	umaal	r4, r7, lr, r8
     dde:	fbe9 5768 	umaal	r5, r7, r9, r8
     de2:	fbea 6768 	umaal	r6, r7, sl, r8
     de6:	bd00      	pop	{pc}

00000de8 <ocrypto_bigint_mul256>:
     de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     dec:	ee07 0a90 	vmov	s15, r0
     df0:	f7ff ff44 	bl	c7c <ocrypto_mul256_noframe>
     df4:	ee17 8a90 	vmov	r8, s15
     df8:	ee07 ba90 	vmov	s15, fp
     dfc:	eca8 4a08 	vstmia	r8!, {s8-s15}
     e00:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
     e04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000e08 <ocrypto_sqr256_noframe>:
     e08:	b500      	push	{lr}
     e0a:	e891 5798 	ldmia.w	r1, {r3, r4, r7, r8, r9, sl, ip, lr}
     e0e:	fba3 5203 	umull	r5, r2, r3, r3
     e12:	fba3 0104 	umull	r0, r1, r3, r4
     e16:	fbe3 2064 	umaal	r2, r0, r3, r4
     e1a:	fbe3 1067 	umaal	r1, r0, r3, r7
     e1e:	ec42 5a14 	vmov	s8, s9, r5, r2
     e22:	fba3 5207 	umull	r5, r2, r3, r7
     e26:	fbe3 0268 	umaal	r0, r2, r3, r8
     e2a:	fbe4 1564 	umaal	r1, r5, r4, r4
     e2e:	fbe3 0568 	umaal	r0, r5, r3, r8
     e32:	fbe3 2569 	umaal	r2, r5, r3, r9
     e36:	fba4 b607 	umull	fp, r6, r4, r7
     e3a:	fbe3 2669 	umaal	r2, r6, r3, r9
     e3e:	fbe3 566a 	umaal	r5, r6, r3, sl
     e42:	fbe4 0b67 	umaal	r0, fp, r4, r7
     e46:	fbe4 2b68 	umaal	r2, fp, r4, r8
     e4a:	fbe3 5b6a 	umaal	r5, fp, r3, sl
     e4e:	fbe3 6b6c 	umaal	r6, fp, r3, ip
     e52:	ec40 1a15 	vmov	s10, s11, r1, r0
     e56:	fba4 1008 	umull	r1, r0, r4, r8
     e5a:	fbe4 5069 	umaal	r5, r0, r4, r9
     e5e:	fbe3 606c 	umaal	r6, r0, r3, ip
     e62:	fbe3 b06e 	umaal	fp, r0, r3, lr
     e66:	fbe7 2167 	umaal	r2, r1, r7, r7
     e6a:	fbe4 5169 	umaal	r5, r1, r4, r9
     e6e:	fbe4 616a 	umaal	r6, r1, r4, sl
     e72:	fbe3 b16e 	umaal	fp, r1, r3, lr
     e76:	fbe4 016e 	umaal	r0, r1, r4, lr
     e7a:	ee06 2a10 	vmov	s12, r2
     e7e:	fba7 3208 	umull	r3, r2, r7, r8
     e82:	fbe4 626a 	umaal	r6, r2, r4, sl
     e86:	fbe4 b26c 	umaal	fp, r2, r4, ip
     e8a:	fbe4 026e 	umaal	r0, r2, r4, lr
     e8e:	fbe7 126e 	umaal	r1, r2, r7, lr
     e92:	fbe7 5368 	umaal	r5, r3, r7, r8
     e96:	fbe7 6369 	umaal	r6, r3, r7, r9
     e9a:	fbe4 b36c 	umaal	fp, r3, r4, ip
     e9e:	fbe7 036c 	umaal	r0, r3, r7, ip
     ea2:	fbe7 136e 	umaal	r1, r3, r7, lr
     ea6:	fbe8 236e 	umaal	r2, r3, r8, lr
     eaa:	ee06 5a90 	vmov	s13, r5
     eae:	fba7 5409 	umull	r5, r4, r7, r9
     eb2:	fbe7 b46a 	umaal	fp, r4, r7, sl
     eb6:	fbe7 046c 	umaal	r0, r4, r7, ip
     eba:	fbe8 146c 	umaal	r1, r4, r8, ip
     ebe:	fbe8 246e 	umaal	r2, r4, r8, lr
     ec2:	fbe9 346e 	umaal	r3, r4, r9, lr
     ec6:	fbe8 6568 	umaal	r6, r5, r8, r8
     eca:	fbe7 b56a 	umaal	fp, r5, r7, sl
     ece:	fbe8 056a 	umaal	r0, r5, r8, sl
     ed2:	fbe8 156c 	umaal	r1, r5, r8, ip
     ed6:	fbe9 256c 	umaal	r2, r5, r9, ip
     eda:	fbe9 356e 	umaal	r3, r5, r9, lr
     ede:	fbea 456e 	umaal	r4, r5, sl, lr
     ee2:	ee07 6a10 	vmov	s14, r6
     ee6:	fba8 7609 	umull	r7, r6, r8, r9
     eea:	fbe8 066a 	umaal	r0, r6, r8, sl
     eee:	fbe9 166a 	umaal	r1, r6, r9, sl
     ef2:	fbe9 266c 	umaal	r2, r6, r9, ip
     ef6:	fbea 366c 	umaal	r3, r6, sl, ip
     efa:	fbea 466e 	umaal	r4, r6, sl, lr
     efe:	fbec 566e 	umaal	r5, r6, ip, lr
     f02:	fbe8 b769 	umaal	fp, r7, r8, r9
     f06:	fbe9 0769 	umaal	r0, r7, r9, r9
     f0a:	fbe9 176a 	umaal	r1, r7, r9, sl
     f0e:	fbea 276a 	umaal	r2, r7, sl, sl
     f12:	fbea 376c 	umaal	r3, r7, sl, ip
     f16:	fbec 476c 	umaal	r4, r7, ip, ip
     f1a:	fbec 576e 	umaal	r5, r7, ip, lr
     f1e:	fbee 676e 	umaal	r6, r7, lr, lr
     f22:	bd00      	pop	{pc}

00000f24 <ocrypto_bigint_sqr256>:
     f24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     f28:	ee07 0a90 	vmov	s15, r0
     f2c:	f7ff ff6c 	bl	e08 <ocrypto_sqr256_noframe>
     f30:	ee17 8a90 	vmov	r8, s15
     f34:	ee07 ba90 	vmov	s15, fp
     f38:	eca8 4a08 	vstmia	r8!, {s8-s15}
     f3c:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
     f40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000f44 <ocrypto_constant_time_equal>:
     f44:	b430      	push	{r4, r5}
     f46:	f04f 0300 	mov.w	r3, #0

00000f4a <constant_time_equal_loop>:
     f4a:	f810 4b01 	ldrb.w	r4, [r0], #1
     f4e:	f811 5b01 	ldrb.w	r5, [r1], #1
     f52:	3a01      	subs	r2, #1
     f54:	ea84 0405 	eor.w	r4, r4, r5
     f58:	ea43 0304 	orr.w	r3, r3, r4
     f5c:	d1f5      	bne.n	f4a <constant_time_equal_loop>
     f5e:	f1a3 0301 	sub.w	r3, r3, #1
     f62:	ea4f 70d3 	mov.w	r0, r3, lsr #31
     f66:	bc30      	pop	{r4, r5}
     f68:	4770      	bx	lr
     f6a:	bf00      	nop

00000f6c <ocrypto_constant_time_is_zero>:
     f6c:	f04f 0300 	mov.w	r3, #0

00000f70 <constant_time_is_zero_loop>:
     f70:	f810 2b01 	ldrb.w	r2, [r0], #1
     f74:	3901      	subs	r1, #1
     f76:	ea43 0302 	orr.w	r3, r3, r2
     f7a:	d1f9      	bne.n	f70 <constant_time_is_zero_loop>
     f7c:	f1a3 0301 	sub.w	r3, r3, #1
     f80:	ea4f 70d3 	mov.w	r0, r3, lsr #31
     f84:	4770      	bx	lr
     f86:	bf00      	nop

00000f88 <ocrypto_constant_time_xor>:
     f88:	b430      	push	{r4, r5}

00000f8a <constant_time_xor_loop>:
     f8a:	f811 4b01 	ldrb.w	r4, [r1], #1
     f8e:	f812 5b01 	ldrb.w	r5, [r2], #1
     f92:	406c      	eors	r4, r5
     f94:	f800 4b01 	strb.w	r4, [r0], #1
     f98:	3b01      	subs	r3, #1
     f9a:	d1f6      	bne.n	f8a <constant_time_xor_loop>
     f9c:	bc30      	pop	{r4, r5}
     f9e:	4770      	bx	lr

00000fa0 <ocrypto_mod_p256_add>:
     fa0:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     fa4:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
     fa8:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     fac:	185b      	adds	r3, r3, r1
     fae:	eb54 040c 	adcs.w	r4, r4, ip
     fb2:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     fb6:	414d      	adcs	r5, r1
     fb8:	eb56 060c 	adcs.w	r6, r6, ip
     fbc:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     fc0:	414f      	adcs	r7, r1
     fc2:	eb58 080c 	adcs.w	r8, r8, ip
     fc6:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     fca:	eb59 0901 	adcs.w	r9, r9, r1
     fce:	eb5a 0a0c 	adcs.w	sl, sl, ip
     fd2:	4189      	sbcs	r1, r1
     fd4:	f1b3 33ff 	subs.w	r3, r3, #4294967295
     fd8:	f174 34ff 	sbcs.w	r4, r4, #4294967295
     fdc:	f175 35ff 	sbcs.w	r5, r5, #4294967295
     fe0:	f176 0600 	sbcs.w	r6, r6, #0
     fe4:	f177 0700 	sbcs.w	r7, r7, #0
     fe8:	f178 0800 	sbcs.w	r8, r8, #0
     fec:	f179 0901 	sbcs.w	r9, r9, #1
     ff0:	f17a 3aff 	sbcs.w	sl, sl, #4294967295
     ff4:	f151 0100 	adcs.w	r1, r1, #0
     ff8:	185b      	adds	r3, r3, r1
     ffa:	414c      	adcs	r4, r1
     ffc:	414d      	adcs	r5, r1
     ffe:	f156 0600 	adcs.w	r6, r6, #0
    1002:	f157 0700 	adcs.w	r7, r7, #0
    1006:	f158 0800 	adcs.w	r8, r8, #0
    100a:	eb59 79d1 	adcs.w	r9, r9, r1, lsr #31
    100e:	eb5a 0a01 	adcs.w	sl, sl, r1
    1012:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
    1016:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    101a:	4770      	bx	lr

0000101c <ocrypto_mod_p256_sub>:
    101c:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    1020:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
    1024:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    1028:	1a5b      	subs	r3, r3, r1
    102a:	eb74 040c 	sbcs.w	r4, r4, ip
    102e:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    1032:	418d      	sbcs	r5, r1
    1034:	eb76 060c 	sbcs.w	r6, r6, ip
    1038:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    103c:	418f      	sbcs	r7, r1
    103e:	eb78 080c 	sbcs.w	r8, r8, ip
    1042:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
    1046:	eb79 0901 	sbcs.w	r9, r9, r1
    104a:	eb7a 0a0c 	sbcs.w	sl, sl, ip
    104e:	4189      	sbcs	r1, r1
    1050:	185b      	adds	r3, r3, r1
    1052:	414c      	adcs	r4, r1
    1054:	414d      	adcs	r5, r1
    1056:	f156 0600 	adcs.w	r6, r6, #0
    105a:	f157 0700 	adcs.w	r7, r7, #0
    105e:	f158 0800 	adcs.w	r8, r8, #0
    1062:	eb59 79d1 	adcs.w	r9, r9, r1, lsr #31
    1066:	eb5a 0a01 	adcs.w	sl, sl, r1
    106a:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
    106e:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    1072:	4770      	bx	lr

00001074 <mul_reduce>:
    1074:	eb18 0804 	adds.w	r8, r8, r4
    1078:	eb59 0905 	adcs.w	r9, r9, r5
    107c:	eb5a 0a06 	adcs.w	sl, sl, r6
    1080:	eb5b 0b07 	adcs.w	fp, fp, r7
    1084:	f05f 0c00 	movs.w	ip, #0
    1088:	f14c 0c00 	adc.w	ip, ip, #0
    108c:	eb18 0805 	adds.w	r8, r8, r5
    1090:	eb59 0906 	adcs.w	r9, r9, r6
    1094:	eb5a 0a07 	adcs.w	sl, sl, r7
    1098:	eb5b 0b07 	adcs.w	fp, fp, r7
    109c:	eb50 000c 	adcs.w	r0, r0, ip
    10a0:	f05f 0c00 	movs.w	ip, #0
    10a4:	eb51 010c 	adcs.w	r1, r1, ip
    10a8:	eb52 020c 	adcs.w	r2, r2, ip
    10ac:	4163      	adcs	r3, r4
    10ae:	f14c 0c00 	adc.w	ip, ip, #0
    10b2:	ebb8 0807 	subs.w	r8, r8, r7
    10b6:	f179 0900 	sbcs.w	r9, r9, #0
    10ba:	f17a 0a00 	sbcs.w	sl, sl, #0
    10be:	eb7b 0b04 	sbcs.w	fp, fp, r4
    10c2:	41a8      	sbcs	r0, r5
    10c4:	41b1      	sbcs	r1, r6
    10c6:	41a2      	sbcs	r2, r4
    10c8:	41b3      	sbcs	r3, r6
    10ca:	f16c 0c00 	sbc.w	ip, ip, #0
    10ce:	ebbb 0b05 	subs.w	fp, fp, r5
    10d2:	41b0      	sbcs	r0, r6
    10d4:	41b9      	sbcs	r1, r7
    10d6:	41aa      	sbcs	r2, r5
    10d8:	41bb      	sbcs	r3, r7
    10da:	f16c 0c00 	sbc.w	ip, ip, #0
    10de:	ea6f 74ec 	mvn.w	r4, ip, asr #31
    10e2:	ebb8 0804 	subs.w	r8, r8, r4
    10e6:	eb79 0904 	sbcs.w	r9, r9, r4
    10ea:	eb7a 0a04 	sbcs.w	sl, sl, r4
    10ee:	f17b 0b00 	sbcs.w	fp, fp, #0
    10f2:	f170 0000 	sbcs.w	r0, r0, #0
    10f6:	f171 0100 	sbcs.w	r1, r1, #0
    10fa:	eb72 72d4 	sbcs.w	r2, r2, r4, lsr #31
    10fe:	41a3      	sbcs	r3, r4
    1100:	f16c 0c00 	sbc.w	ip, ip, #0
    1104:	eb18 78ec 	adds.w	r8, r8, ip, asr #31
    1108:	eb59 79ec 	adcs.w	r9, r9, ip, asr #31
    110c:	eb5a 7aec 	adcs.w	sl, sl, ip, asr #31
    1110:	f15b 0b00 	adcs.w	fp, fp, #0
    1114:	f150 0400 	adcs.w	r4, r0, #0
    1118:	f151 0500 	adcs.w	r5, r1, #0
    111c:	eb52 76dc 	adcs.w	r6, r2, ip, lsr #31
    1120:	eb53 77ec 	adcs.w	r7, r3, ip, asr #31
    1124:	f14c 0c00 	adc.w	ip, ip, #0
    1128:	eb18 70ec 	adds.w	r0, r8, ip, asr #31
    112c:	eb59 71ec 	adcs.w	r1, r9, ip, asr #31
    1130:	eb5a 72ec 	adcs.w	r2, sl, ip, asr #31
    1134:	f15b 0300 	adcs.w	r3, fp, #0
    1138:	f154 0400 	adcs.w	r4, r4, #0
    113c:	f155 0500 	adcs.w	r5, r5, #0
    1140:	eb56 76dc 	adcs.w	r6, r6, ip, lsr #31
    1144:	eb57 77ec 	adcs.w	r7, r7, ip, asr #31
    1148:	4770      	bx	lr
    114a:	bf00      	nop

0000114c <ocrypto_mod_p256_mul>:
    114c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1150:	ee07 0a90 	vmov	s15, r0
    1154:	f7ff fd92 	bl	c7c <ocrypto_mul256_noframe>
    1158:	ec59 8a16 	vmov	r8, r9, s12, s13
    115c:	ee17 aa10 	vmov	sl, s14
    1160:	f7ff ff88 	bl	1074 <mul_reduce>
    1164:	ec59 8a14 	vmov	r8, r9, s8, s9
    1168:	ec5b aa15 	vmov	sl, fp, s10, s11
    116c:	f7ff ff82 	bl	1074 <mul_reduce>
    1170:	ee17 8a90 	vmov	r8, s15
    1174:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
    1178:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000117c <ocrypto_mod_p256_sqr>:
    117c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1180:	ee07 0a90 	vmov	s15, r0
    1184:	f7ff fe40 	bl	e08 <ocrypto_sqr256_noframe>
    1188:	ec59 8a16 	vmov	r8, r9, s12, s13
    118c:	ee17 aa10 	vmov	sl, s14
    1190:	f7ff ff70 	bl	1074 <mul_reduce>
    1194:	ec59 8a14 	vmov	r8, r9, s8, s9
    1198:	ec5b aa15 	vmov	sl, fp, s10, s11
    119c:	f7ff ff6a 	bl	1074 <mul_reduce>
    11a0:	ee17 8a90 	vmov	r8, s15
    11a4:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
    11a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000011ac <__aeabi_dcmpun>:
    11ac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    11b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    11b4:	d102      	bne.n	11bc <__aeabi_dcmpun+0x10>
    11b6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    11ba:	d10a      	bne.n	11d2 <__aeabi_dcmpun+0x26>
    11bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    11c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    11c4:	d102      	bne.n	11cc <__aeabi_dcmpun+0x20>
    11c6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    11ca:	d102      	bne.n	11d2 <__aeabi_dcmpun+0x26>
    11cc:	f04f 0000 	mov.w	r0, #0
    11d0:	4770      	bx	lr
    11d2:	f04f 0001 	mov.w	r0, #1
    11d6:	4770      	bx	lr
    11d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    11da:	4c14      	ldr	r4, [pc, #80]	; (122c <__aeabi_dcmpun+0x80>)
    11dc:	7a20      	ldrb	r0, [r4, #8]
    11de:	f88d 0001 	strb.w	r0, [sp, #1]
    11e2:	79e0      	ldrb	r0, [r4, #7]
    11e4:	f88d 0000 	strb.w	r0, [sp]
    11e8:	79a0      	ldrb	r0, [r4, #6]
    11ea:	f8ad 0004 	strh.w	r0, [sp, #4]
    11ee:	7960      	ldrb	r0, [r4, #5]
    11f0:	f8ad 0002 	strh.w	r0, [sp, #2]
    11f4:	4668      	mov	r0, sp
    11f6:	f006 f863 	bl	72c0 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>
    11fa:	b108      	cbz	r0, 1200 <__aeabi_dcmpun+0x54>
    11fc:	21a7      	movs	r1, #167	; 0xa7
    11fe:	e010      	b.n	1222 <__aeabi_dcmpun+0x76>
    1200:	68e0      	ldr	r0, [r4, #12]
    1202:	9002      	str	r0, [sp, #8]
    1204:	a802      	add	r0, sp, #8
    1206:	f006 f871 	bl	72ec <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>
    120a:	b108      	cbz	r0, 1210 <__aeabi_dcmpun+0x64>
    120c:	21ab      	movs	r1, #171	; 0xab
    120e:	e008      	b.n	1222 <__aeabi_dcmpun+0x76>
    1210:	4807      	ldr	r0, [pc, #28]	; (1230 <__aeabi_dcmpun+0x84>)
    1212:	6800      	ldr	r0, [r0, #0]
    1214:	9003      	str	r0, [sp, #12]
    1216:	a803      	add	r0, sp, #12
    1218:	f00e ffd3 	bl	101c2 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    121c:	2800      	cmp	r0, #0
    121e:	d003      	beq.n	1228 <__aeabi_dcmpun+0x7c>
    1220:	21af      	movs	r1, #175	; 0xaf
    1222:	2003      	movs	r0, #3
    1224:	f000 f8ea 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1228:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    122a:	0000      	.short	0x0000
    122c:	20000a08 	.word	0x20000a08
    1230:	00001504 	.word	0x00001504

00001234 <sdc_build_revision_get>:
    1234:	b510      	push	{r4, lr}
    1236:	b128      	cbz	r0, 1244 <sdc_build_revision_get+0x10>
    1238:	2214      	movs	r2, #20
    123a:	4904      	ldr	r1, [pc, #16]	; (124c <sdc_build_revision_get+0x18>)
    123c:	f00f fe02 	bl	10e44 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    1240:	2000      	movs	r0, #0
    1242:	bd10      	pop	{r4, pc}
    1244:	f06f 0015 	mvn.w	r0, #21
    1248:	bd10      	pop	{r4, pc}
    124a:	0000      	.short	0x0000
    124c:	00001528 	.word	0x00001528

00001250 <sdc_cfg_set>:
    1250:	b570      	push	{r4, r5, r6, lr}
    1252:	f06f 032c 	mvn.w	r3, #44	; 0x2c
    1256:	bbb8      	cbnz	r0, 12c8 <sdc_cfg_set+0x78>
    1258:	4c1e      	ldr	r4, [pc, #120]	; (12d4 <sdc_cfg_set+0x84>)
    125a:	7860      	ldrb	r0, [r4, #1]
    125c:	b108      	cbz	r0, 1262 <sdc_cfg_set+0x12>
    125e:	1198      	asrs	r0, r3, #6
    1260:	bd70      	pop	{r4, r5, r6, pc}
    1262:	b301      	cbz	r1, 12a6 <sdc_cfg_set+0x56>
    1264:	f06f 0515 	mvn.w	r5, #21
    1268:	b1aa      	cbz	r2, 1296 <sdc_cfg_set+0x46>
    126a:	481b      	ldr	r0, [pc, #108]	; (12d8 <sdc_cfg_set+0x88>)
    126c:	1e89      	subs	r1, r1, #2
    126e:	2906      	cmp	r1, #6
    1270:	d22b      	bcs.n	12ca <sdc_cfg_set+0x7a>
    1272:	e8df f001 	tbb	[pc, r1]
    1276:	0603      	.short	0x0603
    1278:	1c2a1916 	.word	0x1c2a1916
    127c:	7811      	ldrb	r1, [r2, #0]
    127e:	7041      	strb	r1, [r0, #1]
    1280:	e017      	b.n	12b2 <sdc_cfg_set+0x62>
    1282:	7891      	ldrb	r1, [r2, #2]
    1284:	b139      	cbz	r1, 1296 <sdc_cfg_set+0x46>
    1286:	78d1      	ldrb	r1, [r2, #3]
    1288:	b129      	cbz	r1, 1296 <sdc_cfg_set+0x46>
    128a:	7811      	ldrb	r1, [r2, #0]
    128c:	291b      	cmp	r1, #27
    128e:	d302      	bcc.n	1296 <sdc_cfg_set+0x46>
    1290:	7851      	ldrb	r1, [r2, #1]
    1292:	291b      	cmp	r1, #27
    1294:	d201      	bcs.n	129a <sdc_cfg_set+0x4a>
    1296:	4628      	mov	r0, r5
    1298:	bd70      	pop	{r4, r5, r6, pc}
    129a:	6811      	ldr	r1, [r2, #0]
    129c:	f8c0 1005 	str.w	r1, [r0, #5]
    12a0:	e007      	b.n	12b2 <sdc_cfg_set+0x62>
    12a2:	6811      	ldr	r1, [r2, #0]
    12a4:	60c1      	str	r1, [r0, #12]
    12a6:	e004      	b.n	12b2 <sdc_cfg_set+0x62>
    12a8:	7811      	ldrb	r1, [r2, #0]
    12aa:	7081      	strb	r1, [r0, #2]
    12ac:	e001      	b.n	12b2 <sdc_cfg_set+0x62>
    12ae:	8811      	ldrh	r1, [r2, #0]
    12b0:	8241      	strh	r1, [r0, #18]
    12b2:	2201      	movs	r2, #1
    12b4:	4908      	ldr	r1, [pc, #32]	; (12d8 <sdc_cfg_set+0x88>)
    12b6:	2000      	movs	r0, #0
    12b8:	f00b fc62 	bl	cb80 <strlen+0x10>
    12bc:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    12c0:	db05      	blt.n	12ce <sdc_cfg_set+0x7e>
    12c2:	f06f 000b 	mvn.w	r0, #11
    12c6:	bd70      	pop	{r4, r5, r6, pc}
    12c8:	e7ff      	b.n	12ca <sdc_cfg_set+0x7a>
    12ca:	4618      	mov	r0, r3
    12cc:	e7fb      	b.n	12c6 <sdc_cfg_set+0x76>
    12ce:	2101      	movs	r1, #1
    12d0:	70a1      	strb	r1, [r4, #2]
    12d2:	e7f8      	b.n	12c6 <sdc_cfg_set+0x76>
    12d4:	20000028 	.word	0x20000028
    12d8:	20000a08 	.word	0x20000a08

000012dc <sdc_default_tx_power_set>:
    12dc:	4905      	ldr	r1, [pc, #20]	; (12f4 <sdc_default_tx_power_set+0x18>)
    12de:	b510      	push	{r4, lr}
    12e0:	7849      	ldrb	r1, [r1, #1]
    12e2:	b111      	cbz	r1, 12ea <sdc_default_tx_power_set+0xe>
    12e4:	f04f 30ff 	mov.w	r0, #4294967295
    12e8:	bd10      	pop	{r4, pc}
    12ea:	f006 f80d 	bl	7308 <sym_MCY7RRK5E6T6JDGA7HZL7CCKF7DGHVCG4MOX6PI>
    12ee:	2000      	movs	r0, #0
    12f0:	bd10      	pop	{r4, pc}
    12f2:	0000      	.short	0x0000
    12f4:	20000028 	.word	0x20000028

000012f8 <sdc_disable>:
    12f8:	b510      	push	{r4, lr}
    12fa:	4c07      	ldr	r4, [pc, #28]	; (1318 <sdc_disable+0x20>)
    12fc:	7860      	ldrb	r0, [r4, #1]
    12fe:	b120      	cbz	r0, 130a <sdc_disable+0x12>
    1300:	f006 fadc 	bl	78bc <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
    1304:	7820      	ldrb	r0, [r4, #0]
    1306:	f00b f9f9 	bl	c6fc <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY>
    130a:	f000 fd87 	bl	1e1c <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ>
    130e:	f000 fe5f 	bl	1fd0 <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI>
    1312:	2000      	movs	r0, #0
    1314:	7060      	strb	r0, [r4, #1]
    1316:	bd10      	pop	{r4, pc}
    1318:	20000028 	.word	0x20000028

0000131c <sdc_enable>:
    131c:	b570      	push	{r4, r5, r6, lr}
    131e:	460c      	mov	r4, r1
    1320:	0005      	movs	r5, r0
    1322:	d002      	beq.n	132a <sdc_enable+0xe>
    1324:	b10c      	cbz	r4, 132a <sdc_enable+0xe>
    1326:	0760      	lsls	r0, r4, #29
    1328:	d002      	beq.n	1330 <sdc_enable+0x14>
    132a:	f06f 0015 	mvn.w	r0, #21
    132e:	bd70      	pop	{r4, r5, r6, pc}
    1330:	f000 f920 	bl	1574 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>
    1334:	b1a8      	cbz	r0, 1362 <sdc_enable+0x46>
    1336:	4628      	mov	r0, r5
    1338:	f00b f9a6 	bl	c688 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    133c:	4d0a      	ldr	r5, [pc, #40]	; (1368 <sdc_enable+0x4c>)
    133e:	2200      	movs	r2, #0
    1340:	490a      	ldr	r1, [pc, #40]	; (136c <sdc_enable+0x50>)
    1342:	7028      	strb	r0, [r5, #0]
    1344:	4620      	mov	r0, r4
    1346:	f00b fc1b 	bl	cb80 <strlen+0x10>
    134a:	f00f fb54 	bl	109f6 <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>
    134e:	2100      	movs	r1, #0
    1350:	7828      	ldrb	r0, [r5, #0]
    1352:	f006 fa9d 	bl	7890 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>
    1356:	f7ff ff3f 	bl	11d8 <__aeabi_dcmpun+0x2c>
    135a:	2001      	movs	r0, #1
    135c:	7068      	strb	r0, [r5, #1]
    135e:	2000      	movs	r0, #0
    1360:	bd70      	pop	{r4, r5, r6, pc}
    1362:	f04f 30ff 	mov.w	r0, #4294967295
    1366:	bd70      	pop	{r4, r5, r6, pc}
    1368:	20000028 	.word	0x20000028
    136c:	20000a08 	.word	0x20000a08

00001370 <sdc_init>:
    1370:	b530      	push	{r4, r5, lr}
    1372:	b089      	sub	sp, #36	; 0x24
    1374:	0004      	movs	r4, r0
    1376:	d00c      	beq.n	1392 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0xa>
    1378:	f00b f92c 	bl	c5d4 <mpsl_is_initialized>
    137c:	f04f 35ff 	mov.w	r5, #4294967295
    1380:	b120      	cbz	r0, 138c <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x4>
    1382:	f00a ffbf 	bl	c304 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    1386:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
    138a:	d905      	bls.n	1398 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x10>
    138c:	4628      	mov	r0, r5
    138e:	b009      	add	sp, #36	; 0x24
    1390:	bd30      	pop	{r4, r5, pc}
    1392:	f06f 0015 	mvn.w	r0, #21
    1396:	e7fa      	b.n	138e <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x6>
    1398:	4d13      	ldr	r5, [pc, #76]	; (13e8 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x60>)
    139a:	4814      	ldr	r0, [pc, #80]	; (13ec <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x64>)
    139c:	606c      	str	r4, [r5, #4]
    139e:	f000 fa0b 	bl	17b8 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>
    13a2:	2000      	movs	r0, #0
    13a4:	7068      	strb	r0, [r5, #1]
    13a6:	70a8      	strb	r0, [r5, #2]
    13a8:	4601      	mov	r1, r0
    13aa:	2220      	movs	r2, #32
    13ac:	4668      	mov	r0, sp
    13ae:	f00f fdc3 	bl	10f38 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    13b2:	2220      	movs	r2, #32
    13b4:	490e      	ldr	r1, [pc, #56]	; (13f0 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x68>)
    13b6:	4668      	mov	r0, sp
    13b8:	f00f fd44 	bl	10e44 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    13bc:	2220      	movs	r2, #32
    13be:	4669      	mov	r1, sp
    13c0:	480c      	ldr	r0, [pc, #48]	; (13f4 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x6c>)
    13c2:	f00f fd3f 	bl	10e44 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    13c6:	f3ef 8410 	mrs	r4, PRIMASK
    13ca:	b672      	cpsid	i
    13cc:	f000 fd34 	bl	1e38 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>
    13d0:	4809      	ldr	r0, [pc, #36]	; (13f8 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x70>)
    13d2:	f000 fe09 	bl	1fe8 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>
    13d6:	b118      	cbz	r0, 13e0 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x58>
    13d8:	21c5      	movs	r1, #197	; 0xc5
    13da:	2003      	movs	r0, #3
    13dc:	f000 f80e 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    13e0:	b904      	cbnz	r4, 13e4 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x5c>
    13e2:	b662      	cpsie	i
    13e4:	2000      	movs	r0, #0
    13e6:	e7d2      	b.n	138e <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x6>
    13e8:	20000028 	.word	0x20000028
    13ec:	000011d9 	.word	0x000011d9
    13f0:	00001508 	.word	0x00001508
    13f4:	20000a08 	.word	0x20000a08
    13f8:	000015a1 	.word	0x000015a1

000013fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>:
    13fc:	b50e      	push	{r1, r2, r3, lr}
    13fe:	b672      	cpsid	i
    1400:	4a15      	ldr	r2, [pc, #84]	; (1458 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x5c>)
    1402:	6855      	ldr	r5, [r2, #4]
    1404:	b1dd      	cbz	r5, 143e <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x42>
    1406:	2200      	movs	r2, #0
    1408:	4603      	mov	r3, r0
    140a:	466e      	mov	r6, sp
    140c:	240a      	movs	r4, #10
    140e:	e003      	b.n	1418 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x1c>
    1410:	fbb0 f0f4 	udiv	r0, r0, r4
    1414:	1c52      	adds	r2, r2, #1
    1416:	b2d2      	uxtb	r2, r2
    1418:	2800      	cmp	r0, #0
    141a:	d1f9      	bne.n	1410 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x14>
    141c:	54b0      	strb	r0, [r6, r2]
    141e:	e00a      	b.n	1436 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x3a>
    1420:	b2d8      	uxtb	r0, r3
    1422:	fbb0 f7f4 	udiv	r7, r0, r4
    1426:	fbb3 f3f4 	udiv	r3, r3, r4
    142a:	fb04 0017 	mls	r0, r4, r7, r0
    142e:	1e52      	subs	r2, r2, #1
    1430:	b2d2      	uxtb	r2, r2
    1432:	3030      	adds	r0, #48	; 0x30
    1434:	54b0      	strb	r0, [r6, r2]
    1436:	2a00      	cmp	r2, #0
    1438:	d1f2      	bne.n	1420 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x24>
    143a:	4630      	mov	r0, r6
    143c:	47a8      	blx	r5
    143e:	f3bf 8f4f 	dsb	sy
    1442:	4806      	ldr	r0, [pc, #24]	; (145c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x60>)
    1444:	6801      	ldr	r1, [r0, #0]
    1446:	4a06      	ldr	r2, [pc, #24]	; (1460 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x64>)
    1448:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    144c:	4311      	orrs	r1, r2
    144e:	6001      	str	r1, [r0, #0]
    1450:	f3bf 8f4f 	dsb	sy
    1454:	bf00      	nop
    1456:	e7fd      	b.n	1454 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x58>
    1458:	20000028 	.word	0x20000028
    145c:	e000ed0c 	.word	0xe000ed0c
    1460:	05fa0004 	.word	0x05fa0004

00001464 <sdc_support_adv>:
    1464:	4806      	ldr	r0, [pc, #24]	; (1480 <sdc_support_adv+0x1c>)
    1466:	b510      	push	{r4, lr}
    1468:	7881      	ldrb	r1, [r0, #2]
    146a:	7840      	ldrb	r0, [r0, #1]
    146c:	4301      	orrs	r1, r0
    146e:	d002      	beq.n	1476 <sdc_support_adv+0x12>
    1470:	f04f 30ff 	mov.w	r0, #4294967295
    1474:	bd10      	pop	{r4, pc}
    1476:	f006 fa31 	bl	78dc <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>
    147a:	2000      	movs	r0, #0
    147c:	bd10      	pop	{r4, pc}
    147e:	0000      	.short	0x0000
    1480:	20000028 	.word	0x20000028

00001484 <sdc_support_dle_peripheral>:
    1484:	4806      	ldr	r0, [pc, #24]	; (14a0 <sdc_support_dle_peripheral+0x1c>)
    1486:	b510      	push	{r4, lr}
    1488:	7881      	ldrb	r1, [r0, #2]
    148a:	7840      	ldrb	r0, [r0, #1]
    148c:	4301      	orrs	r1, r0
    148e:	d002      	beq.n	1496 <sdc_support_dle_peripheral+0x12>
    1490:	f04f 30ff 	mov.w	r0, #4294967295
    1494:	bd10      	pop	{r4, pc}
    1496:	f005 ff7f 	bl	7398 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI>
    149a:	2000      	movs	r0, #0
    149c:	bd10      	pop	{r4, pc}
    149e:	0000      	.short	0x0000
    14a0:	20000028 	.word	0x20000028

000014a4 <sdc_support_le_2m_phy>:
    14a4:	4806      	ldr	r0, [pc, #24]	; (14c0 <sdc_support_le_2m_phy+0x1c>)
    14a6:	b510      	push	{r4, lr}
    14a8:	7881      	ldrb	r1, [r0, #2]
    14aa:	7840      	ldrb	r0, [r0, #1]
    14ac:	4301      	orrs	r1, r0
    14ae:	d002      	beq.n	14b6 <sdc_support_le_2m_phy+0x12>
    14b0:	f04f 30ff 	mov.w	r0, #4294967295
    14b4:	bd10      	pop	{r4, pc}
    14b6:	f00f f823 	bl	10500 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>
    14ba:	2000      	movs	r0, #0
    14bc:	bd10      	pop	{r4, pc}
    14be:	0000      	.short	0x0000
    14c0:	20000028 	.word	0x20000028

000014c4 <sdc_support_peripheral>:
    14c4:	4806      	ldr	r0, [pc, #24]	; (14e0 <sdc_support_peripheral+0x1c>)
    14c6:	b510      	push	{r4, lr}
    14c8:	7881      	ldrb	r1, [r0, #2]
    14ca:	7840      	ldrb	r0, [r0, #1]
    14cc:	4301      	orrs	r1, r0
    14ce:	d002      	beq.n	14d6 <sdc_support_peripheral+0x12>
    14d0:	f04f 30ff 	mov.w	r0, #4294967295
    14d4:	bd10      	pop	{r4, pc}
    14d6:	f006 fa13 	bl	7900 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA>
    14da:	2000      	movs	r0, #0
    14dc:	bd10      	pop	{r4, pc}
    14de:	0000      	.short	0x0000
    14e0:	20000028 	.word	0x20000028

000014e4 <sdc_support_phy_update_peripheral>:
    14e4:	4806      	ldr	r0, [pc, #24]	; (1500 <sdc_support_phy_update_peripheral+0x1c>)
    14e6:	b510      	push	{r4, lr}
    14e8:	7881      	ldrb	r1, [r0, #2]
    14ea:	7840      	ldrb	r0, [r0, #1]
    14ec:	4301      	orrs	r1, r0
    14ee:	d002      	beq.n	14f6 <sdc_support_phy_update_peripheral+0x12>
    14f0:	f04f 30ff 	mov.w	r0, #4294967295
    14f4:	bd10      	pop	{r4, pc}
    14f6:	f00f f813 	bl	10520 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA>
    14fa:	2000      	movs	r0, #0
    14fc:	bd10      	pop	{r4, pc}
    14fe:	0000      	.short	0x0000
    1500:	20000028 	.word	0x20000028
    1504:	00000001 	.word	0x00000001
    1508:	00010100 	.word	0x00010100
    150c:	031b1b00 	.word	0x031b1b00
    1510:	00000002 	.word	0x00000002
    1514:	00001d4c 	.word	0x00001d4c
    1518:	001f0000 	.word	0x001f0000
	...
    1528:	2f2d0cd8 	.word	0x2f2d0cd8
    152c:	5ce2ae36 	.word	0x5ce2ae36
    1530:	4c802680 	.word	0x4c802680
    1534:	53164d3f 	.word	0x53164d3f
    1538:	73c79650 	.word	0x73c79650

0000153c <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>:
    153c:	4a05      	ldr	r2, [pc, #20]	; (1554 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0x18>)
    153e:	b510      	push	{r4, lr}
    1540:	6852      	ldr	r2, [r2, #4]
    1542:	b112      	cbz	r2, 154a <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0xe>
    1544:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1548:	4710      	bx	r2
    154a:	2192      	movs	r1, #146	; 0x92
    154c:	2004      	movs	r0, #4
    154e:	f7ff ff55 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1552:	0000      	.short	0x0000
    1554:	20000a28 	.word	0x20000a28

00001558 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>:
    1558:	4a05      	ldr	r2, [pc, #20]	; (1570 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0x18>)
    155a:	b510      	push	{r4, lr}
    155c:	6892      	ldr	r2, [r2, #8]
    155e:	b112      	cbz	r2, 1566 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0xe>
    1560:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1564:	4710      	bx	r2
    1566:	2198      	movs	r1, #152	; 0x98
    1568:	2004      	movs	r0, #4
    156a:	f7ff ff47 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    156e:	0000      	.short	0x0000
    1570:	20000a28 	.word	0x20000a28

00001574 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>:
    1574:	4805      	ldr	r0, [pc, #20]	; (158c <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x18>)
    1576:	6801      	ldr	r1, [r0, #0]
    1578:	b129      	cbz	r1, 1586 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    157a:	6841      	ldr	r1, [r0, #4]
    157c:	b119      	cbz	r1, 1586 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    157e:	6880      	ldr	r0, [r0, #8]
    1580:	b108      	cbz	r0, 1586 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    1582:	2001      	movs	r0, #1
    1584:	4770      	bx	lr
    1586:	2000      	movs	r0, #0
    1588:	4770      	bx	lr
    158a:	0000      	.short	0x0000
    158c:	20000a28 	.word	0x20000a28

00001590 <sdc_rand_source_register>:
    1590:	4902      	ldr	r1, [pc, #8]	; (159c <sdc_rand_source_register+0xc>)
    1592:	c80d      	ldmia	r0, {r0, r2, r3}
    1594:	e881 000d 	stmia.w	r1, {r0, r2, r3}
    1598:	2000      	movs	r0, #0
    159a:	4770      	bx	lr
    159c:	20000a28 	.word	0x20000a28

000015a0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI>:
    15a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    15a2:	4c12      	ldr	r4, [pc, #72]	; (15ec <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x4c>)
    15a4:	2600      	movs	r6, #0
    15a6:	6825      	ldr	r5, [r4, #0]
    15a8:	e011      	b.n	15ce <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    15aa:	9800      	ldr	r0, [sp, #0]
    15ac:	2802      	cmp	r0, #2
    15ae:	d002      	beq.n	15b6 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x16>
    15b0:	2803      	cmp	r0, #3
    15b2:	d10c      	bne.n	15ce <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    15b4:	e006      	b.n	15c4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x24>
    15b6:	6820      	ldr	r0, [r4, #0]
    15b8:	b110      	cbz	r0, 15c0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x20>
    15ba:	2000      	movs	r0, #0
    15bc:	6026      	str	r6, [r4, #0]
    15be:	e005      	b.n	15cc <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2c>
    15c0:	2128      	movs	r1, #40	; 0x28
    15c2:	e00c      	b.n	15de <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    15c4:	6820      	ldr	r0, [r4, #0]
    15c6:	b168      	cbz	r0, 15e4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x44>
    15c8:	2001      	movs	r0, #1
    15ca:	6026      	str	r6, [r4, #0]
    15cc:	47a8      	blx	r5
    15ce:	4668      	mov	r0, sp
    15d0:	f000 fcd0 	bl	1f74 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>
    15d4:	2800      	cmp	r0, #0
    15d6:	d0e8      	beq.n	15aa <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa>
    15d8:	2805      	cmp	r0, #5
    15da:	d005      	beq.n	15e8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x48>
    15dc:	2135      	movs	r1, #53	; 0x35
    15de:	2004      	movs	r0, #4
    15e0:	f7ff ff0c 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    15e4:	212d      	movs	r1, #45	; 0x2d
    15e6:	e7fa      	b.n	15de <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    15e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    15ea:	0000      	.short	0x0000
    15ec:	20000030 	.word	0x20000030

000015f0 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A>:
    15f0:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    15f4:	4e25      	ldr	r6, [pc, #148]	; (168c <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x9c>)
    15f6:	4605      	mov	r5, r0
    15f8:	1d00      	adds	r0, r0, #4
    15fa:	f106 0744 	add.w	r7, r6, #68	; 0x44
    15fe:	6030      	str	r0, [r6, #0]
    1600:	7838      	ldrb	r0, [r7, #0]
    1602:	b158      	cbz	r0, 161c <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x2c>
    1604:	78ba      	ldrb	r2, [r7, #2]
    1606:	463c      	mov	r4, r7
    1608:	1c79      	adds	r1, r7, #1
    160a:	4628      	mov	r0, r5
    160c:	1c92      	adds	r2, r2, #2
    160e:	f00f fc19 	bl	10e44 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    1612:	2000      	movs	r0, #0
    1614:	7020      	strb	r0, [r4, #0]
    1616:	2004      	movs	r0, #4
    1618:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    161c:	481b      	ldr	r0, [pc, #108]	; (168c <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x9c>)
    161e:	f001 fe87 	bl	3330 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>
    1622:	4604      	mov	r4, r0
    1624:	2802      	cmp	r0, #2
    1626:	d004      	beq.n	1632 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x42>
    1628:	2c04      	cmp	r4, #4
    162a:	d007      	beq.n	163c <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x4c>
    162c:	2c08      	cmp	r4, #8
    162e:	d027      	beq.n	1680 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x90>
    1630:	e02a      	b.n	1688 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x98>
    1632:	4916      	ldr	r1, [pc, #88]	; (168c <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x9c>)
    1634:	4628      	mov	r0, r5
    1636:	f00b fb26 	bl	cc86 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>
    163a:	e025      	b.n	1688 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x98>
    163c:	7830      	ldrb	r0, [r6, #0]
    163e:	2808      	cmp	r0, #8
    1640:	d104      	bne.n	164c <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x5c>
    1642:	2105      	movs	r1, #5
    1644:	203e      	movs	r0, #62	; 0x3e
    1646:	f00b faf0 	bl	cc2a <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY+0x12>
    164a:	b160      	cbz	r0, 1666 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x76>
    164c:	490f      	ldr	r1, [pc, #60]	; (168c <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x9c>)
    164e:	4628      	mov	r0, r5
    1650:	f00b fb7e 	bl	cd50 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>
    1654:	2800      	cmp	r0, #0
    1656:	d0d3      	beq.n	1600 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x10>
    1658:	78a9      	ldrb	r1, [r5, #2]
    165a:	7828      	ldrb	r0, [r5, #0]
    165c:	f00b fae5 	bl	cc2a <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY+0x12>
    1660:	2800      	cmp	r0, #0
    1662:	d0cd      	beq.n	1600 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x10>
    1664:	e010      	b.n	1688 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x98>
    1666:	88b0      	ldrh	r0, [r6, #4]
    1668:	f8ad 0000 	strh.w	r0, [sp]
    166c:	a901      	add	r1, sp, #4
    166e:	4668      	mov	r0, sp
    1670:	f00b fe59 	bl	d326 <sdc_hci_cmd_le_long_term_key_request_negative_reply>
    1674:	2800      	cmp	r0, #0
    1676:	d0c3      	beq.n	1600 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x10>
    1678:	21a7      	movs	r1, #167	; 0xa7
    167a:	2008      	movs	r0, #8
    167c:	f7ff febe 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1680:	4902      	ldr	r1, [pc, #8]	; (168c <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x9c>)
    1682:	4628      	mov	r0, r5
    1684:	f00b fb2d 	bl	cce2 <sym_XBPRCWTRXORTYBBILZLCEINUIX4S5BJ5RTZD2RY>
    1688:	4620      	mov	r0, r4
    168a:	e7c5      	b.n	1618 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x28>
    168c:	20000a34 	.word	0x20000a34
    1690:	b570      	push	{r4, r5, r6, lr}
    1692:	780a      	ldrb	r2, [r1, #0]
    1694:	7082      	strb	r2, [r0, #2]
    1696:	b33a      	cbz	r2, 16e8 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xf8>
    1698:	2a01      	cmp	r2, #1
    169a:	d825      	bhi.n	16e8 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xf8>
    169c:	2313      	movs	r3, #19
    169e:	7003      	strb	r3, [r0, #0]
    16a0:	2300      	movs	r3, #0
    16a2:	e00a      	b.n	16ba <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xca>
    16a4:	eb01 0443 	add.w	r4, r1, r3, lsl #1
    16a8:	eb00 0543 	add.w	r5, r0, r3, lsl #1
    16ac:	78a6      	ldrb	r6, [r4, #2]
    16ae:	70ee      	strb	r6, [r5, #3]
    16b0:	8864      	ldrh	r4, [r4, #2]
    16b2:	0a24      	lsrs	r4, r4, #8
    16b4:	1c5b      	adds	r3, r3, #1
    16b6:	712c      	strb	r4, [r5, #4]
    16b8:	b2db      	uxtb	r3, r3
    16ba:	4293      	cmp	r3, r2
    16bc:	d3f2      	bcc.n	16a4 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xb4>
    16be:	2300      	movs	r3, #0
    16c0:	e00b      	b.n	16da <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xea>
    16c2:	bf00      	nop
    16c4:	eb01 0543 	add.w	r5, r1, r3, lsl #1
    16c8:	eb00 0443 	add.w	r4, r0, r3, lsl #1
    16cc:	792e      	ldrb	r6, [r5, #4]
    16ce:	7166      	strb	r6, [r4, #5]
    16d0:	88ad      	ldrh	r5, [r5, #4]
    16d2:	0a2d      	lsrs	r5, r5, #8
    16d4:	1c5b      	adds	r3, r3, #1
    16d6:	71a5      	strb	r5, [r4, #6]
    16d8:	b2db      	uxtb	r3, r3
    16da:	4293      	cmp	r3, r2
    16dc:	d3f2      	bcc.n	16c4 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xd4>
    16de:	2101      	movs	r1, #1
    16e0:	eb01 0082 	add.w	r0, r1, r2, lsl #2
    16e4:	b2c0      	uxtb	r0, r0
    16e6:	bd70      	pop	{r4, r5, r6, pc}
    16e8:	2000      	movs	r0, #0
    16ea:	bd70      	pop	{r4, r5, r6, pc}

000016ec <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>:
    16ec:	2840      	cmp	r0, #64	; 0x40
    16ee:	d203      	bcs.n	16f8 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0xc>
    16f0:	1e40      	subs	r0, r0, #1
    16f2:	b2c1      	uxtb	r1, r0
    16f4:	4805      	ldr	r0, [pc, #20]	; (170c <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x20>)
    16f6:	e005      	b.n	1704 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x18>
    16f8:	28ff      	cmp	r0, #255	; 0xff
    16fa:	d005      	beq.n	1708 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1c>
    16fc:	3840      	subs	r0, #64	; 0x40
    16fe:	b2c1      	uxtb	r1, r0
    1700:	4802      	ldr	r0, [pc, #8]	; (170c <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x20>)
    1702:	3008      	adds	r0, #8
    1704:	f00b bd06 	b.w	d114 <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA+0xba>
    1708:	2001      	movs	r0, #1
    170a:	4770      	bx	lr
    170c:	2000003c 	.word	0x2000003c

00001710 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>:
    1710:	1e40      	subs	r0, r0, #1
    1712:	b2c1      	uxtb	r1, r0
    1714:	4801      	ldr	r0, [pc, #4]	; (171c <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0xc>)
    1716:	f00b bcfd 	b.w	d114 <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA+0xba>
    171a:	0000      	.short	0x0000
    171c:	2000004c 	.word	0x2000004c

00001720 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>:
    1720:	b510      	push	{r4, lr}
    1722:	4a07      	ldr	r2, [pc, #28]	; (1740 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ+0x20>)
    1724:	6801      	ldr	r1, [r0, #0]
    1726:	4b06      	ldr	r3, [pc, #24]	; (1740 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ+0x20>)
    1728:	6191      	str	r1, [r2, #24]
    172a:	6840      	ldr	r0, [r0, #4]
    172c:	61d0      	str	r0, [r2, #28]
    172e:	681c      	ldr	r4, [r3, #0]
    1730:	3218      	adds	r2, #24
    1732:	43a1      	bics	r1, r4
    1734:	6011      	str	r1, [r2, #0]
    1736:	6859      	ldr	r1, [r3, #4]
    1738:	4388      	bics	r0, r1
    173a:	6050      	str	r0, [r2, #4]
    173c:	bd10      	pop	{r4, pc}
    173e:	0000      	.short	0x0000
    1740:	20000034 	.word	0x20000034

00001744 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>:
    1744:	4a06      	ldr	r2, [pc, #24]	; (1760 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x1c>)
    1746:	6801      	ldr	r1, [r0, #0]
    1748:	6091      	str	r1, [r2, #8]
    174a:	6840      	ldr	r0, [r0, #4]
    174c:	60d0      	str	r0, [r2, #12]
    174e:	3208      	adds	r2, #8
    1750:	f441 218c 	orr.w	r1, r1, #286720	; 0x46000
    1754:	6011      	str	r1, [r2, #0]
    1756:	4903      	ldr	r1, [pc, #12]	; (1764 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x20>)
    1758:	4308      	orrs	r0, r1
    175a:	6050      	str	r0, [r2, #4]
    175c:	4770      	bx	lr
    175e:	0000      	.short	0x0000
    1760:	20000034 	.word	0x20000034
    1764:	024007f8 	.word	0x024007f8

00001768 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>:
    1768:	4902      	ldr	r1, [pc, #8]	; (1774 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA+0xc>)
    176a:	6802      	ldr	r2, [r0, #0]
    176c:	610a      	str	r2, [r1, #16]
    176e:	6840      	ldr	r0, [r0, #4]
    1770:	6148      	str	r0, [r1, #20]
    1772:	4770      	bx	lr
    1774:	20000034 	.word	0x20000034

00001778 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>:
    1778:	4807      	ldr	r0, [pc, #28]	; (1798 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ+0x20>)
    177a:	f04f 31ff 	mov.w	r1, #4294967295
    177e:	2200      	movs	r2, #0
    1780:	6001      	str	r1, [r0, #0]
    1782:	0cc9      	lsrs	r1, r1, #19
    1784:	6041      	str	r1, [r0, #4]
    1786:	f100 0108 	add.w	r1, r0, #8
    178a:	201f      	movs	r0, #31
    178c:	600a      	str	r2, [r1, #0]
    178e:	604a      	str	r2, [r1, #4]
    1790:	3108      	adds	r1, #8
    1792:	e9c1 0200 	strd	r0, r2, [r1]
    1796:	4770      	bx	lr
    1798:	2000003c 	.word	0x2000003c

0000179c <sdc_hci_cmd_cb_reset>:
    179c:	b510      	push	{r4, lr}
    179e:	f7ff ffeb 	bl	1778 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>
    17a2:	f00e fe26 	bl	103f2 <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>
    17a6:	4604      	mov	r4, r0
    17a8:	4802      	ldr	r0, [pc, #8]	; (17b4 <sdc_hci_cmd_cb_reset+0x18>)
    17aa:	6800      	ldr	r0, [r0, #0]
    17ac:	b100      	cbz	r0, 17b0 <sdc_hci_cmd_cb_reset+0x14>
    17ae:	4780      	blx	r0
    17b0:	4620      	mov	r0, r4
    17b2:	bd10      	pop	{r4, pc}
    17b4:	20000054 	.word	0x20000054

000017b8 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>:
    17b8:	4901      	ldr	r1, [pc, #4]	; (17c0 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ+0x8>)
    17ba:	6008      	str	r0, [r1, #0]
    17bc:	4770      	bx	lr
    17be:	0000      	.short	0x0000
    17c0:	20000054 	.word	0x20000054

000017c4 <sdc_hci_cmd_vs_zephyr_read_version_info>:
    17c4:	2102      	movs	r1, #2
    17c6:	8001      	strh	r1, [r0, #0]
    17c8:	8041      	strh	r1, [r0, #2]
    17ca:	2100      	movs	r1, #0
    17cc:	7101      	strb	r1, [r0, #4]
    17ce:	21d8      	movs	r1, #216	; 0xd8
    17d0:	7141      	strb	r1, [r0, #5]
    17d2:	f642 510c 	movw	r1, #11532	; 0x2d0c
    17d6:	80c1      	strh	r1, [r0, #6]
    17d8:	4901      	ldr	r1, [pc, #4]	; (17e0 <sdc_hci_cmd_vs_zephyr_read_version_info+0x1c>)
    17da:	6081      	str	r1, [r0, #8]
    17dc:	2000      	movs	r0, #0
    17de:	4770      	bx	lr
    17e0:	e2ae362f 	.word	0xe2ae362f

000017e4 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>:
    17e4:	b510      	push	{r4, lr}
    17e6:	2802      	cmp	r0, #2
    17e8:	d304      	bcc.n	17f4 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0x10>
    17ea:	f240 2103 	movw	r1, #515	; 0x203
    17ee:	2017      	movs	r0, #23
    17f0:	f7ff fe04 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    17f4:	4901      	ldr	r1, [pc, #4]	; (17fc <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0x18>)
    17f6:	5c08      	ldrb	r0, [r1, r0]
    17f8:	bd10      	pop	{r4, pc}
    17fa:	0000      	.short	0x0000
    17fc:	20000b7c 	.word	0x20000b7c

00001800 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>:
    1800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1802:	0005      	movs	r5, r0
    1804:	9500      	str	r5, [sp, #0]
    1806:	d00d      	beq.n	1824 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x24>
    1808:	2600      	movs	r6, #0
    180a:	7808      	ldrb	r0, [r1, #0]
    180c:	7849      	ldrb	r1, [r1, #1]
    180e:	4604      	mov	r4, r0
    1810:	42a1      	cmp	r1, r4
    1812:	d900      	bls.n	1816 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x16>
    1814:	460c      	mov	r4, r1
    1816:	07aa      	lsls	r2, r5, #30
    1818:	d006      	beq.n	1828 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x28>
    181a:	f44f 71e5 	mov.w	r1, #458	; 0x1ca
    181e:	2017      	movs	r0, #23
    1820:	f7ff fdec 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1824:	2601      	movs	r6, #1
    1826:	e7f0      	b.n	180a <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0xa>
    1828:	4f12      	ldr	r7, [pc, #72]	; (1874 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x74>)
    182a:	7038      	strb	r0, [r7, #0]
    182c:	7079      	strb	r1, [r7, #1]
    182e:	4631      	mov	r1, r6
    1830:	4668      	mov	r0, sp
    1832:	f000 f8d3 	bl	19dc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd4>
    1836:	2100      	movs	r1, #0
    1838:	460b      	mov	r3, r1
    183a:	9800      	ldr	r0, [sp, #0]
    183c:	1cc0      	adds	r0, r0, #3
    183e:	f020 0003 	bic.w	r0, r0, #3
    1842:	9000      	str	r0, [sp, #0]
    1844:	b966      	cbnz	r6, 1860 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x60>
    1846:	eb07 0281 	add.w	r2, r7, r1, lsl #2
    184a:	60d0      	str	r0, [r2, #12]
    184c:	2000      	movs	r0, #0
    184e:	e005      	b.n	185c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x5c>
    1850:	f8d2 c00c 	ldr.w	ip, [r2, #12]
    1854:	f84c 3020 	str.w	r3, [ip, r0, lsl #2]
    1858:	1c40      	adds	r0, r0, #1
    185a:	b2c0      	uxtb	r0, r0
    185c:	42a0      	cmp	r0, r4
    185e:	d3f7      	bcc.n	1850 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x50>
    1860:	9800      	ldr	r0, [sp, #0]
    1862:	1c49      	adds	r1, r1, #1
    1864:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    1868:	b2c9      	uxtb	r1, r1
    186a:	9000      	str	r0, [sp, #0]
    186c:	2902      	cmp	r1, #2
    186e:	d3e4      	bcc.n	183a <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x3a>
    1870:	1b40      	subs	r0, r0, r5
    1872:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1874:	20000b7c 	.word	0x20000b7c

00001878 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>:
    1878:	b570      	push	{r4, r5, r6, lr}
    187a:	4604      	mov	r4, r0
    187c:	7985      	ldrb	r5, [r0, #6]
    187e:	f000 f8e9 	bl	1a54 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x14c>
    1882:	4a0c      	ldr	r2, [pc, #48]	; (18b4 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3c>)
    1884:	79e1      	ldrb	r1, [r4, #7]
    1886:	eb02 0285 	add.w	r2, r2, r5, lsl #2
    188a:	e00e      	b.n	18aa <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x32>
    188c:	68d3      	ldr	r3, [r2, #12]
    188e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    1892:	b143      	cbz	r3, 18a6 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x2e>
    1894:	1c48      	adds	r0, r1, #1
    1896:	71e0      	strb	r0, [r4, #7]
    1898:	80a1      	strh	r1, [r4, #4]
    189a:	68d0      	ldr	r0, [r2, #12]
    189c:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    18a0:	6020      	str	r0, [r4, #0]
    18a2:	2000      	movs	r0, #0
    18a4:	bd70      	pop	{r4, r5, r6, pc}
    18a6:	1c49      	adds	r1, r1, #1
    18a8:	b2c9      	uxtb	r1, r1
    18aa:	4281      	cmp	r1, r0
    18ac:	d3ee      	bcc.n	188c <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x14>
    18ae:	71e1      	strb	r1, [r4, #7]
    18b0:	2005      	movs	r0, #5
    18b2:	bd70      	pop	{r4, r5, r6, pc}
    18b4:	20000b7c 	.word	0x20000b7c

000018b8 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>:
    18b8:	b4f0      	push	{r4, r5, r6, r7}
    18ba:	b121      	cbz	r1, 18c6 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0xe>
    18bc:	2901      	cmp	r1, #1
    18be:	d002      	beq.n	18c6 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0xe>
    18c0:	bcf0      	pop	{r4, r5, r6, r7}
    18c2:	2000      	movs	r0, #0
    18c4:	4770      	bx	lr
    18c6:	4a0f      	ldr	r2, [pc, #60]	; (1904 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x4c>)
    18c8:	2500      	movs	r5, #0
    18ca:	462b      	mov	r3, r5
    18cc:	f64f 74ff 	movw	r4, #65535	; 0xffff
    18d0:	eb02 0681 	add.w	r6, r2, r1, lsl #2
    18d4:	5c57      	ldrb	r7, [r2, r1]
    18d6:	e00a      	b.n	18ee <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x36>
    18d8:	195a      	adds	r2, r3, r5
    18da:	f8d6 c00c 	ldr.w	ip, [r6, #12]
    18de:	b292      	uxth	r2, r2
    18e0:	f85c c022 	ldr.w	ip, [ip, r2, lsl #2]
    18e4:	f1bc 0f00 	cmp.w	ip, #0
    18e8:	d004      	beq.n	18f4 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x3c>
    18ea:	1c5b      	adds	r3, r3, #1
    18ec:	b29b      	uxth	r3, r3
    18ee:	429f      	cmp	r7, r3
    18f0:	d8f2      	bhi.n	18d8 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x20>
    18f2:	4622      	mov	r2, r4
    18f4:	8002      	strh	r2, [r0, #0]
    18f6:	4610      	mov	r0, r2
    18f8:	42a2      	cmp	r2, r4
    18fa:	d0e1      	beq.n	18c0 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x8>
    18fc:	bcf0      	pop	{r4, r5, r6, r7}
    18fe:	f000 b835 	b.w	196c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x64>
    1902:	0000      	.short	0x0000
    1904:	20000b7c 	.word	0x20000b7c

00001908 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>:
    1908:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    190c:	4606      	mov	r6, r0
    190e:	f5a0 407f 	sub.w	r0, r0, #65280	; 0xff00
    1912:	460c      	mov	r4, r1
    1914:	f243 0702 	movw	r7, #12290	; 0x3002
    1918:	38ff      	subs	r0, #255	; 0xff
    191a:	d020      	beq.n	195e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x56>
    191c:	2c02      	cmp	r4, #2
    191e:	d302      	bcc.n	1926 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1e>
    1920:	2007      	movs	r0, #7
    1922:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1926:	4630      	mov	r0, r6
    1928:	f000 f848 	bl	19bc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb4>
    192c:	0005      	movs	r5, r0
    192e:	d016      	beq.n	195e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x56>
    1930:	480c      	ldr	r0, [pc, #48]	; (1964 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x5c>)
    1932:	4629      	mov	r1, r5
    1934:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
    1938:	4630      	mov	r0, r6
    193a:	4790      	blx	r2
    193c:	480a      	ldr	r0, [pc, #40]	; (1968 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x60>)
    193e:	2100      	movs	r1, #0
    1940:	eb00 0784 	add.w	r7, r0, r4, lsl #2
    1944:	68f8      	ldr	r0, [r7, #12]
    1946:	f840 1026 	str.w	r1, [r0, r6, lsl #2]
    194a:	4620      	mov	r0, r4
    194c:	f000 f878 	bl	1a40 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x138>
    1950:	4602      	mov	r2, r0
    1952:	4629      	mov	r1, r5
    1954:	6878      	ldr	r0, [r7, #4]
    1956:	f00b ff74 	bl	d842 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    195a:	2000      	movs	r0, #0
    195c:	e7e1      	b.n	1922 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1a>
    195e:	4638      	mov	r0, r7
    1960:	e7df      	b.n	1922 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1a>
    1962:	0000      	.short	0x0000
    1964:	00001a6c 	.word	0x00001a6c
    1968:	20000b7c 	.word	0x20000b7c
    196c:	b570      	push	{r4, r5, r6, lr}
    196e:	460e      	mov	r6, r1
    1970:	4605      	mov	r5, r0
    1972:	f00b ffa0 	bl	d8b6 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x14>
    1976:	b158      	cbz	r0, 1990 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x88>
    1978:	480f      	ldr	r0, [pc, #60]	; (19b8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb0>)
    197a:	eb00 0486 	add.w	r4, r0, r6, lsl #2
    197e:	68e0      	ldr	r0, [r4, #12]
    1980:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
    1984:	b138      	cbz	r0, 1996 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x8e>
    1986:	f44f 71c5 	mov.w	r1, #394	; 0x18a
    198a:	2017      	movs	r0, #23
    198c:	f7ff fd36 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1990:	f240 1189 	movw	r1, #393	; 0x189
    1994:	e7f9      	b.n	198a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x82>
    1996:	6860      	ldr	r0, [r4, #4]
    1998:	2800      	cmp	r0, #0
    199a:	d00b      	beq.n	19b4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xac>
    199c:	4630      	mov	r0, r6
    199e:	f000 f84f 	bl	1a40 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x138>
    19a2:	4601      	mov	r1, r0
    19a4:	6860      	ldr	r0, [r4, #4]
    19a6:	f00b fef4 	bl	d792 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    19aa:	2800      	cmp	r0, #0
    19ac:	d002      	beq.n	19b4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xac>
    19ae:	68e1      	ldr	r1, [r4, #12]
    19b0:	f841 0025 	str.w	r0, [r1, r5, lsl #2]
    19b4:	bd70      	pop	{r4, r5, r6, pc}
    19b6:	0000      	.short	0x0000
    19b8:	20000b7c 	.word	0x20000b7c
    19bc:	b570      	push	{r4, r5, r6, lr}
    19be:	460c      	mov	r4, r1
    19c0:	4605      	mov	r5, r0
    19c2:	f00b ff78 	bl	d8b6 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x14>
    19c6:	2800      	cmp	r0, #0
    19c8:	d005      	beq.n	19d6 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xce>
    19ca:	4803      	ldr	r0, [pc, #12]	; (19d8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd0>)
    19cc:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    19d0:	68c0      	ldr	r0, [r0, #12]
    19d2:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
    19d6:	bd70      	pop	{r4, r5, r6, pc}
    19d8:	20000b7c 	.word	0x20000b7c
    19dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    19e0:	4e16      	ldr	r6, [pc, #88]	; (1a3c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x134>)
    19e2:	4688      	mov	r8, r1
    19e4:	4605      	mov	r5, r0
    19e6:	2400      	movs	r4, #0
    19e8:	6828      	ldr	r0, [r5, #0]
    19ea:	1cc0      	adds	r0, r0, #3
    19ec:	f020 0003 	bic.w	r0, r0, #3
    19f0:	6028      	str	r0, [r5, #0]
    19f2:	4620      	mov	r0, r4
    19f4:	f000 f824 	bl	1a40 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x138>
    19f8:	5d31      	ldrb	r1, [r6, r4]
    19fa:	4348      	muls	r0, r1
    19fc:	f1b8 0f00 	cmp.w	r8, #0
    1a00:	d001      	beq.n	1a06 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xfe>
    1a02:	2200      	movs	r2, #0
    1a04:	e000      	b.n	1a08 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x100>
    1a06:	682a      	ldr	r2, [r5, #0]
    1a08:	4601      	mov	r1, r0
    1a0a:	9200      	str	r2, [sp, #0]
    1a0c:	b132      	cbz	r2, 1a1c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x114>
    1a0e:	2700      	movs	r7, #0
    1a10:	ea4f 000d 	mov.w	r0, sp
    1a14:	f00b feee 	bl	d7f4 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    1a18:	b11f      	cbz	r7, 1a22 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x11a>
    1a1a:	e006      	b.n	1a2a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x122>
    1a1c:	2701      	movs	r7, #1
    1a1e:	2000      	movs	r0, #0
    1a20:	e7f8      	b.n	1a14 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x10c>
    1a22:	eb06 0184 	add.w	r1, r6, r4, lsl #2
    1a26:	9a00      	ldr	r2, [sp, #0]
    1a28:	604a      	str	r2, [r1, #4]
    1a2a:	6829      	ldr	r1, [r5, #0]
    1a2c:	1c64      	adds	r4, r4, #1
    1a2e:	4408      	add	r0, r1
    1a30:	b2e4      	uxtb	r4, r4
    1a32:	6028      	str	r0, [r5, #0]
    1a34:	2c02      	cmp	r4, #2
    1a36:	d3d7      	bcc.n	19e8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xe0>
    1a38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1a3c:	20000b7c 	.word	0x20000b7c
    1a40:	4903      	ldr	r1, [pc, #12]	; (1a50 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x148>)
    1a42:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    1a46:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    1a4a:	1cc0      	adds	r0, r0, #3
    1a4c:	4008      	ands	r0, r1
    1a4e:	4770      	bx	lr
    1a50:	00001a68 	.word	0x00001a68
    1a54:	4903      	ldr	r1, [pc, #12]	; (1a64 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>)
    1a56:	7808      	ldrb	r0, [r1, #0]
    1a58:	7849      	ldrb	r1, [r1, #1]
    1a5a:	4288      	cmp	r0, r1
    1a5c:	d200      	bcs.n	1a60 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x158>
    1a5e:	4608      	mov	r0, r1
    1a60:	4770      	bx	lr
    1a62:	0000      	.short	0x0000
    1a64:	20000b7c 	.word	0x20000b7c
    1a68:	011802f8 	.word	0x011802f8
    1a6c:	0000f595 	.word	0x0000f595
    1a70:	0000eb3f 	.word	0x0000eb3f

00001a74 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>:
    1a74:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1a78:	4c24      	ldr	r4, [pc, #144]	; (1b0c <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x98>)
    1a7a:	4606      	mov	r6, r0
    1a7c:	b081      	sub	sp, #4
    1a7e:	6820      	ldr	r0, [r4, #0]
    1a80:	469a      	mov	sl, r3
    1a82:	4693      	mov	fp, r2
    1a84:	b158      	cbz	r0, 1a9e <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x2a>
    1a86:	7a01      	ldrb	r1, [r0, #8]
    1a88:	42b1      	cmp	r1, r6
    1a8a:	d903      	bls.n	1a94 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x20>
    1a8c:	6840      	ldr	r0, [r0, #4]
    1a8e:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
    1a92:	b140      	cbz	r0, 1aa6 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x32>
    1a94:	f243 0002 	movw	r0, #12290	; 0x3002
    1a98:	b005      	add	sp, #20
    1a9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1a9e:	21a5      	movs	r1, #165	; 0xa5
    1aa0:	2018      	movs	r0, #24
    1aa2:	f7ff fcab 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1aa6:	4619      	mov	r1, r3
    1aa8:	9802      	ldr	r0, [sp, #8]
    1aaa:	f00b ff27 	bl	d8fc <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x32>
    1aae:	4680      	mov	r8, r0
    1ab0:	4658      	mov	r0, fp
    1ab2:	990e      	ldr	r1, [sp, #56]	; 0x38
    1ab4:	f00b ff18 	bl	d8e8 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1e>
    1ab8:	4605      	mov	r5, r0
    1aba:	eb08 0005 	add.w	r0, r8, r5
    1abe:	1d00      	adds	r0, r0, #4
    1ac0:	b287      	uxth	r7, r0
    1ac2:	6820      	ldr	r0, [r4, #0]
    1ac4:	46a1      	mov	r9, r4
    1ac6:	4639      	mov	r1, r7
    1ac8:	6800      	ldr	r0, [r0, #0]
    1aca:	f00b fe62 	bl	d792 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    1ace:	0004      	movs	r4, r0
    1ad0:	d01a      	beq.n	1b08 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x94>
    1ad2:	8067      	strh	r7, [r4, #2]
    1ad4:	8025      	strh	r5, [r4, #0]
    1ad6:	4629      	mov	r1, r5
    1ad8:	1d20      	adds	r0, r4, #4
    1ada:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    1adc:	4607      	mov	r7, r0
    1ade:	465a      	mov	r2, fp
    1ae0:	2309      	movs	r3, #9
    1ae2:	9500      	str	r5, [sp, #0]
    1ae4:	f00b fdcf 	bl	d686 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    1ae8:	8820      	ldrh	r0, [r4, #0]
    1aea:	4641      	mov	r1, r8
    1aec:	4438      	add	r0, r7
    1aee:	230a      	movs	r3, #10
    1af0:	9a02      	ldr	r2, [sp, #8]
    1af2:	f8cd a000 	str.w	sl, [sp]
    1af6:	f00b fdc6 	bl	d686 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    1afa:	f8d9 0000 	ldr.w	r0, [r9]
    1afe:	6840      	ldr	r0, [r0, #4]
    1b00:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
    1b04:	2000      	movs	r0, #0
    1b06:	e7c7      	b.n	1a98 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    1b08:	2004      	movs	r0, #4
    1b0a:	e7c5      	b.n	1a98 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    1b0c:	20000058 	.word	0x20000058

00001b10 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>:
    1b10:	b570      	push	{r4, r5, r6, lr}
    1b12:	4c14      	ldr	r4, [pc, #80]	; (1b64 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x54>)
    1b14:	6823      	ldr	r3, [r4, #0]
    1b16:	b18b      	cbz	r3, 1b3c <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x2c>
    1b18:	7a19      	ldrb	r1, [r3, #8]
    1b1a:	4281      	cmp	r1, r0
    1b1c:	d912      	bls.n	1b44 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    1b1e:	685a      	ldr	r2, [r3, #4]
    1b20:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
    1b24:	b171      	cbz	r1, 1b44 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    1b26:	2500      	movs	r5, #0
    1b28:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
    1b2c:	884a      	ldrh	r2, [r1, #2]
    1b2e:	6818      	ldr	r0, [r3, #0]
    1b30:	f00b fe87 	bl	d842 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    1b34:	6821      	ldr	r1, [r4, #0]
    1b36:	2000      	movs	r0, #0
    1b38:	7a0a      	ldrb	r2, [r1, #8]
    1b3a:	e00c      	b.n	1b56 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x46>
    1b3c:	21c6      	movs	r1, #198	; 0xc6
    1b3e:	2018      	movs	r0, #24
    1b40:	f7ff fc5c 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1b44:	f243 0002 	movw	r0, #12290	; 0x3002
    1b48:	bd70      	pop	{r4, r5, r6, pc}
    1b4a:	684b      	ldr	r3, [r1, #4]
    1b4c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    1b50:	b933      	cbnz	r3, 1b60 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x50>
    1b52:	1c40      	adds	r0, r0, #1
    1b54:	b2c0      	uxtb	r0, r0
    1b56:	4282      	cmp	r2, r0
    1b58:	d8f7      	bhi.n	1b4a <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x3a>
    1b5a:	6808      	ldr	r0, [r1, #0]
    1b5c:	f00b fe66 	bl	d82c <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>
    1b60:	2000      	movs	r0, #0
    1b62:	bd70      	pop	{r4, r5, r6, pc}
    1b64:	20000058 	.word	0x20000058

00001b68 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>:
    1b68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1b6c:	460d      	mov	r5, r1
    1b6e:	0004      	movs	r4, r0
    1b70:	4690      	mov	r8, r2
    1b72:	f04f 0600 	mov.w	r6, #0
    1b76:	d006      	beq.n	1b86 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x1e>
    1b78:	2700      	movs	r7, #0
    1b7a:	07a0      	lsls	r0, r4, #30
    1b7c:	d005      	beq.n	1b8a <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x22>
    1b7e:	2186      	movs	r1, #134	; 0x86
    1b80:	2018      	movs	r0, #24
    1b82:	f7ff fc3b 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1b86:	2701      	movs	r7, #1
    1b88:	e7f7      	b.n	1b7a <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x12>
    1b8a:	b1cd      	cbz	r5, 1bc0 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x58>
    1b8c:	4611      	mov	r1, r2
    1b8e:	2000      	movs	r0, #0
    1b90:	f00b fe30 	bl	d7f4 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    1b94:	300c      	adds	r0, #12
    1b96:	eb00 0685 	add.w	r6, r0, r5, lsl #2
    1b9a:	b98f      	cbnz	r7, 1bc0 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x58>
    1b9c:	4f0a      	ldr	r7, [pc, #40]	; (1bc8 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x60>)
    1b9e:	f104 000c 	add.w	r0, r4, #12
    1ba2:	00aa      	lsls	r2, r5, #2
    1ba4:	603c      	str	r4, [r7, #0]
    1ba6:	7225      	strb	r5, [r4, #8]
    1ba8:	6060      	str	r0, [r4, #4]
    1baa:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    1bae:	6020      	str	r0, [r4, #0]
    1bb0:	2100      	movs	r1, #0
    1bb2:	6860      	ldr	r0, [r4, #4]
    1bb4:	f00f f9c0 	bl	10f38 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    1bb8:	4641      	mov	r1, r8
    1bba:	6838      	ldr	r0, [r7, #0]
    1bbc:	f00b fe1a 	bl	d7f4 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    1bc0:	4630      	mov	r0, r6
    1bc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1bc6:	0000      	.short	0x0000
    1bc8:	20000058 	.word	0x20000058

00001bcc <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>:
    1bcc:	b570      	push	{r4, r5, r6, lr}
    1bce:	4d08      	ldr	r5, [pc, #32]	; (1bf0 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x24>)
    1bd0:	6828      	ldr	r0, [r5, #0]
    1bd2:	2800      	cmp	r0, #0
    1bd4:	d00a      	beq.n	1bec <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x20>
    1bd6:	2400      	movs	r4, #0
    1bd8:	e004      	b.n	1be4 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x18>
    1bda:	4620      	mov	r0, r4
    1bdc:	f7ff ff98 	bl	1b10 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>
    1be0:	1c64      	adds	r4, r4, #1
    1be2:	b2e4      	uxtb	r4, r4
    1be4:	6828      	ldr	r0, [r5, #0]
    1be6:	7a00      	ldrb	r0, [r0, #8]
    1be8:	42a0      	cmp	r0, r4
    1bea:	d8f6      	bhi.n	1bda <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0xe>
    1bec:	bd70      	pop	{r4, r5, r6, pc}
    1bee:	0000      	.short	0x0000
    1bf0:	20000058 	.word	0x20000058

00001bf4 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>:
    1bf4:	4909      	ldr	r1, [pc, #36]	; (1c1c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x28>)
    1bf6:	b510      	push	{r4, lr}
    1bf8:	4602      	mov	r2, r0
    1bfa:	6809      	ldr	r1, [r1, #0]
    1bfc:	2000      	movs	r0, #0
    1bfe:	b149      	cbz	r1, 1c14 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x20>
    1c00:	7a0b      	ldrb	r3, [r1, #8]
    1c02:	4293      	cmp	r3, r2
    1c04:	d905      	bls.n	1c12 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    1c06:	6849      	ldr	r1, [r1, #4]
    1c08:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    1c0c:	2900      	cmp	r1, #0
    1c0e:	d000      	beq.n	1c12 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    1c10:	1d08      	adds	r0, r1, #4
    1c12:	bd10      	pop	{r4, pc}
    1c14:	21ec      	movs	r1, #236	; 0xec
    1c16:	2018      	movs	r0, #24
    1c18:	f7ff fbf0 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1c1c:	20000058 	.word	0x20000058

00001c20 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>:
    1c20:	490a      	ldr	r1, [pc, #40]	; (1c4c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x2c>)
    1c22:	b510      	push	{r4, lr}
    1c24:	4602      	mov	r2, r0
    1c26:	6809      	ldr	r1, [r1, #0]
    1c28:	2000      	movs	r0, #0
    1c2a:	b159      	cbz	r1, 1c44 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x24>
    1c2c:	7a0b      	ldrb	r3, [r1, #8]
    1c2e:	4293      	cmp	r3, r2
    1c30:	d907      	bls.n	1c42 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    1c32:	6849      	ldr	r1, [r1, #4]
    1c34:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    1c38:	2900      	cmp	r1, #0
    1c3a:	d002      	beq.n	1c42 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    1c3c:	f831 0b04 	ldrh.w	r0, [r1], #4
    1c40:	4408      	add	r0, r1
    1c42:	bd10      	pop	{r4, pc}
    1c44:	21fa      	movs	r1, #250	; 0xfa
    1c46:	2018      	movs	r0, #24
    1c48:	f7ff fbd8 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1c4c:	20000058 	.word	0x20000058
    1c50:	b570      	push	{r4, r5, r6, lr}
    1c52:	4b1e      	ldr	r3, [pc, #120]	; (1ccc <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0xac>)
    1c54:	6845      	ldr	r5, [r0, #4]
    1c56:	4604      	mov	r4, r0
    1c58:	2200      	movs	r2, #0
    1c5a:	b1a1      	cbz	r1, 1c86 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x66>
    1c5c:	2001      	movs	r0, #1
    1c5e:	7060      	strb	r0, [r4, #1]
    1c60:	8858      	ldrh	r0, [r3, #2]
    1c62:	0881      	lsrs	r1, r0, #2
    1c64:	f05f 0000 	movs.w	r0, #0
    1c68:	eb04 0340 	add.w	r3, r4, r0, lsl #1
    1c6c:	eb04 0680 	add.w	r6, r4, r0, lsl #2
    1c70:	831a      	strh	r2, [r3, #24]
    1c72:	8419      	strh	r1, [r3, #32]
    1c74:	fb00 5301 	mla	r3, r0, r1, r5
    1c78:	6073      	str	r3, [r6, #4]
    1c7a:	1823      	adds	r3, r4, r0
    1c7c:	1c40      	adds	r0, r0, #1
    1c7e:	751a      	strb	r2, [r3, #20]
    1c80:	2804      	cmp	r0, #4
    1c82:	d3f1      	bcc.n	1c68 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x48>
    1c84:	bd70      	pop	{r4, r5, r6, pc}
    1c86:	7062      	strb	r2, [r4, #1]
    1c88:	f05f 0000 	movs.w	r0, #0
    1c8c:	eb04 0140 	add.w	r1, r4, r0, lsl #1
    1c90:	830a      	strh	r2, [r1, #24]
    1c92:	840a      	strh	r2, [r1, #32]
    1c94:	eb04 0180 	add.w	r1, r4, r0, lsl #2
    1c98:	604a      	str	r2, [r1, #4]
    1c9a:	1821      	adds	r1, r4, r0
    1c9c:	1c40      	adds	r0, r0, #1
    1c9e:	750a      	strb	r2, [r1, #20]
    1ca0:	2804      	cmp	r0, #4
    1ca2:	d3f3      	bcc.n	1c8c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x6c>
    1ca4:	8858      	ldrh	r0, [r3, #2]
    1ca6:	f5b0 7fff 	cmp.w	r0, #510	; 0x1fe
    1caa:	d201      	bcs.n	1cb0 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x90>
    1cac:	0846      	lsrs	r6, r0, #1
    1cae:	e000      	b.n	1cb2 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x92>
    1cb0:	26ff      	movs	r6, #255	; 0xff
    1cb2:	f00b fe97 	bl	d9e4 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x11a>
    1cb6:	6065      	str	r5, [r4, #4]
    1cb8:	8420      	strh	r0, [r4, #32]
    1cba:	1829      	adds	r1, r5, r0
    1cbc:	60a1      	str	r1, [r4, #8]
    1cbe:	8466      	strh	r6, [r4, #34]	; 0x22
    1cc0:	60e5      	str	r5, [r4, #12]
    1cc2:	84a0      	strh	r0, [r4, #36]	; 0x24
    1cc4:	6121      	str	r1, [r4, #16]
    1cc6:	84e6      	strh	r6, [r4, #38]	; 0x26
    1cc8:	bd70      	pop	{r4, r5, r6, pc}
    1cca:	0000      	.short	0x0000
    1ccc:	2000005c 	.word	0x2000005c

00001cd0 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ>:
    1cd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1cd4:	b158      	cbz	r0, 1cee <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x1e>
    1cd6:	2500      	movs	r5, #0
    1cd8:	4411      	add	r1, r2
    1cda:	4e24      	ldr	r6, [pc, #144]	; (1d6c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x20>)
    1cdc:	b2cc      	uxtb	r4, r1
    1cde:	2700      	movs	r7, #0
    1ce0:	7034      	strb	r4, [r6, #0]
    1ce2:	0781      	lsls	r1, r0, #30
    1ce4:	d005      	beq.n	1cf2 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x22>
    1ce6:	214e      	movs	r1, #78	; 0x4e
    1ce8:	2009      	movs	r0, #9
    1cea:	f7ff fb87 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1cee:	2501      	movs	r5, #1
    1cf0:	e7f2      	b.n	1cd8 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x8>
    1cf2:	2b1f      	cmp	r3, #31
    1cf4:	d804      	bhi.n	1d00 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x30>
    1cf6:	f64f 71ff 	movw	r1, #65535	; 0xffff
    1cfa:	ea01 0183 	and.w	r1, r1, r3, lsl #2
    1cfe:	e009      	b.n	1d14 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x44>
    1d00:	0059      	lsls	r1, r3, #1
    1d02:	2bff      	cmp	r3, #255	; 0xff
    1d04:	d90c      	bls.n	1d20 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x50>
    1d06:	f103 02ff 	add.w	r2, r3, #255	; 0xff
    1d0a:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
    1d0e:	d200      	bcs.n	1d12 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x42>
    1d10:	4611      	mov	r1, r2
    1d12:	b289      	uxth	r1, r1
    1d14:	f64f 72fc 	movw	r2, #65532	; 0xfffc
    1d18:	1cc9      	adds	r1, r1, #3
    1d1a:	4011      	ands	r1, r2
    1d1c:	b135      	cbz	r5, 1d2c <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x5c>
    1d1e:	e007      	b.n	1d30 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x60>
    1d20:	227c      	movs	r2, #124	; 0x7c
    1d22:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
    1d26:	d3f4      	bcc.n	1d12 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x42>
    1d28:	217c      	movs	r1, #124	; 0x7c
    1d2a:	e7f2      	b.n	1d12 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x42>
    1d2c:	6070      	str	r0, [r6, #4]
    1d2e:	8071      	strh	r1, [r6, #2]
    1d30:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    1d34:	eb07 03c2 	add.w	r3, r7, r2, lsl #3
    1d38:	2200      	movs	r2, #0
    1d3a:	6876      	ldr	r6, [r6, #4]
    1d3c:	f04f 0c01 	mov.w	ip, #1
    1d40:	e00d      	b.n	1d5e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x12>
    1d42:	b94d      	cbnz	r5, 1d58 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xc>
    1d44:	eb02 0782 	add.w	r7, r2, r2, lsl #2
    1d48:	eb00 0e03 	add.w	lr, r0, r3
    1d4c:	f806 c037 	strb.w	ip, [r6, r7, lsl #3]
    1d50:	eb06 07c7 	add.w	r7, r6, r7, lsl #3
    1d54:	f8c7 e004 	str.w	lr, [r7, #4]
    1d58:	1c52      	adds	r2, r2, #1
    1d5a:	440b      	add	r3, r1
    1d5c:	b2d2      	uxtb	r2, r2
    1d5e:	42a2      	cmp	r2, r4
    1d60:	d3ef      	bcc.n	1d42 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x72>
    1d62:	1ddb      	adds	r3, r3, #7
    1d64:	f023 0007 	bic.w	r0, r3, #7
    1d68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1d6c:	2000005c 	.word	0x2000005c

00001d70 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ>:
    1d70:	b570      	push	{r4, r5, r6, lr}
    1d72:	4a10      	ldr	r2, [pc, #64]	; (1db4 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x44>)
    1d74:	2000      	movs	r0, #0
    1d76:	6851      	ldr	r1, [r2, #4]
    1d78:	7812      	ldrb	r2, [r2, #0]
    1d7a:	e014      	b.n	1da6 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x36>
    1d7c:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    1d80:	f811 3033 	ldrb.w	r3, [r1, r3, lsl #3]
    1d84:	b16b      	cbz	r3, 1da2 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x32>
    1d86:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    1d8a:	eb11 04c0 	adds.w	r4, r1, r0, lsl #3
    1d8e:	d00c      	beq.n	1daa <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x3a>
    1d90:	2500      	movs	r5, #0
    1d92:	70a5      	strb	r5, [r4, #2]
    1d94:	2101      	movs	r1, #1
    1d96:	4620      	mov	r0, r4
    1d98:	f7ff ff5a 	bl	1c50 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x30>
    1d9c:	7025      	strb	r5, [r4, #0]
    1d9e:	4620      	mov	r0, r4
    1da0:	bd70      	pop	{r4, r5, r6, pc}
    1da2:	1c40      	adds	r0, r0, #1
    1da4:	b2c0      	uxtb	r0, r0
    1da6:	4290      	cmp	r0, r2
    1da8:	d3e8      	bcc.n	1d7c <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0xc>
    1daa:	21a9      	movs	r1, #169	; 0xa9
    1dac:	2009      	movs	r0, #9
    1dae:	f7ff fb25 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1db2:	0000      	.short	0x0000
    1db4:	2000005c 	.word	0x2000005c

00001db8 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ>:
    1db8:	4804      	ldr	r0, [pc, #16]	; (1dcc <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x14>)
    1dba:	b510      	push	{r4, lr}
    1dbc:	8840      	ldrh	r0, [r0, #2]
    1dbe:	0884      	lsrs	r4, r0, #2
    1dc0:	f00b fe10 	bl	d9e4 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x11a>
    1dc4:	4284      	cmp	r4, r0
    1dc6:	d300      	bcc.n	1dca <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x12>
    1dc8:	4620      	mov	r0, r4
    1dca:	bd10      	pop	{r4, pc}
    1dcc:	2000005c 	.word	0x2000005c
    1dd0:	b530      	push	{r4, r5, lr}
    1dd2:	490d      	ldr	r1, [pc, #52]	; (1e08 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x50>)
    1dd4:	2001      	movs	r0, #1
    1dd6:	6048      	str	r0, [r1, #4]
    1dd8:	1e82      	subs	r2, r0, #2
    1dda:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    1dde:	490b      	ldr	r1, [pc, #44]	; (1e0c <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x54>)
    1de0:	6088      	str	r0, [r1, #8]
    1de2:	2300      	movs	r3, #0
    1de4:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
    1de8:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    1dec:	4c08      	ldr	r4, [pc, #32]	; (1e10 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x58>)
    1dee:	6023      	str	r3, [r4, #0]
    1df0:	1d25      	adds	r5, r4, #4
    1df2:	6028      	str	r0, [r5, #0]
    1df4:	6088      	str	r0, [r1, #8]
    1df6:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    1dfa:	6023      	str	r3, [r4, #0]
    1dfc:	6028      	str	r0, [r5, #0]
    1dfe:	4906      	ldr	r1, [pc, #24]	; (1e18 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x60>)
    1e00:	4804      	ldr	r0, [pc, #16]	; (1e14 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x5c>)
    1e02:	6008      	str	r0, [r1, #0]
    1e04:	bd30      	pop	{r4, r5, pc}
    1e06:	0000      	.short	0x0000
    1e08:	4000e000 	.word	0x4000e000
    1e0c:	4000f000 	.word	0x4000f000
    1e10:	4000f500 	.word	0x4000f500
    1e14:	3ff60000 	.word	0x3ff60000
    1e18:	4001f508 	.word	0x4001f508

00001e1c <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ>:
    1e1c:	b510      	push	{r4, lr}
    1e1e:	f7ff ffd7 	bl	1dd0 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x18>
    1e22:	f00b feb6 	bl	db92 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x42>
    1e26:	4903      	ldr	r1, [pc, #12]	; (1e34 <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ+0x18>)
    1e28:	4801      	ldr	r0, [pc, #4]	; (1e30 <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ+0x14>)
    1e2a:	6008      	str	r0, [r1, #0]
    1e2c:	bd10      	pop	{r4, pc}
    1e2e:	0000      	.short	0x0000
    1e30:	3ff60000 	.word	0x3ff60000
    1e34:	4001f508 	.word	0x4001f508

00001e38 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>:
    1e38:	b510      	push	{r4, lr}
    1e3a:	f7ff ffc9 	bl	1dd0 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x18>
    1e3e:	f00b fea8 	bl	db92 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x42>
    1e42:	f000 f887 	bl	1f54 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>
    1e46:	4905      	ldr	r1, [pc, #20]	; (1e5c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x24>)
    1e48:	4803      	ldr	r0, [pc, #12]	; (1e58 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x20>)
    1e4a:	6008      	str	r0, [r1, #0]
    1e4c:	f000 f8b8 	bl	1fc0 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>
    1e50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1e54:	f000 b8dc 	b.w	2010 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>
    1e58:	3ff60000 	.word	0x3ff60000
    1e5c:	4001f508 	.word	0x4001f508
    1e60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1e64:	4682      	mov	sl, r0
    1e66:	4838      	ldr	r0, [pc, #224]	; (1f48 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x110>)
    1e68:	f00e ff0a 	bl	10c80 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    1e6c:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 1f48 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x110>
    1e70:	b128      	cbz	r0, 1e7e <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x46>
    1e72:	2601      	movs	r6, #1
    1e74:	f10b 0001 	add.w	r0, fp, #1
    1e78:	21ff      	movs	r1, #255	; 0xff
    1e7a:	7001      	strb	r1, [r0, #0]
    1e7c:	e000      	b.n	1e80 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x48>
    1e7e:	2600      	movs	r6, #0
    1e80:	f44f 7580 	mov.w	r5, #256	; 0x100
    1e84:	4c31      	ldr	r4, [pc, #196]	; (1f4c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x114>)
    1e86:	f04f 0800 	mov.w	r8, #0
    1e8a:	1d2f      	adds	r7, r5, #4
    1e8c:	2101      	movs	r1, #1
    1e8e:	6061      	str	r1, [r4, #4]
    1e90:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    1e94:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
    1e98:	f8c4 a504 	str.w	sl, [r4, #1284]	; 0x504
    1e9c:	6021      	str	r1, [r4, #0]
    1e9e:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 1f50 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x118>
    1ea2:	e01c      	b.n	1ede <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa6>
    1ea4:	f8d9 0000 	ldr.w	r0, [r9]
    1ea8:	06c0      	lsls	r0, r0, #27
    1eaa:	d518      	bpl.n	1ede <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa6>
    1eac:	200e      	movs	r0, #14
    1eae:	f00b fe7f 	bl	dbb0 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x60>
    1eb2:	f3ef 8010 	mrs	r0, PRIMASK
    1eb6:	9000      	str	r0, [sp, #0]
    1eb8:	b672      	cpsid	i
    1eba:	2103      	movs	r1, #3
    1ebc:	4620      	mov	r0, r4
    1ebe:	f8c4 1304 	str.w	r1, [r4, #772]	; 0x304
    1ec2:	4629      	mov	r1, r5
    1ec4:	f00b fe81 	bl	dbca <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    1ec8:	b930      	cbnz	r0, 1ed8 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa0>
    1eca:	4639      	mov	r1, r7
    1ecc:	4620      	mov	r0, r4
    1ece:	f00b fe7c 	bl	dbca <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    1ed2:	b908      	cbnz	r0, 1ed8 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa0>
    1ed4:	f00e ff6b 	bl	10dae <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    1ed8:	9800      	ldr	r0, [sp, #0]
    1eda:	b900      	cbnz	r0, 1ede <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa6>
    1edc:	b662      	cpsie	i
    1ede:	4629      	mov	r1, r5
    1ee0:	4620      	mov	r0, r4
    1ee2:	f00b fe72 	bl	dbca <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    1ee6:	b928      	cbnz	r0, 1ef4 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xbc>
    1ee8:	4639      	mov	r1, r7
    1eea:	4620      	mov	r0, r4
    1eec:	f00b fe6d 	bl	dbca <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    1ef0:	2800      	cmp	r0, #0
    1ef2:	d0d7      	beq.n	1ea4 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x6c>
    1ef4:	4639      	mov	r1, r7
    1ef6:	4620      	mov	r0, r4
    1ef8:	f00b fe67 	bl	dbca <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    1efc:	2800      	cmp	r0, #0
    1efe:	d1c5      	bne.n	1e8c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x54>
    1f00:	bb06      	cbnz	r6, 1f44 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x10c>
    1f02:	f89b 1001 	ldrb.w	r1, [fp, #1]
    1f06:	f88d 1000 	strb.w	r1, [sp]
    1f0a:	9900      	ldr	r1, [sp, #0]
    1f0c:	9100      	str	r1, [sp, #0]
    1f0e:	f89d 1000 	ldrb.w	r1, [sp]
    1f12:	b109      	cbz	r1, 1f18 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xe0>
    1f14:	2501      	movs	r5, #1
    1f16:	e000      	b.n	1f1a <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xe2>
    1f18:	2500      	movs	r5, #0
    1f1a:	f10b 0001 	add.w	r0, fp, #1
    1f1e:	f880 8000 	strb.w	r8, [r0]
    1f22:	2003      	movs	r0, #3
    1f24:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    1f28:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
    1f2c:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    1f30:	200e      	movs	r0, #14
    1f32:	f00b fe3d 	bl	dbb0 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x60>
    1f36:	4804      	ldr	r0, [pc, #16]	; (1f48 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x110>)
    1f38:	f00e feb9 	bl	10cae <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    1f3c:	b115      	cbz	r5, 1f44 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x10c>
    1f3e:	2011      	movs	r0, #17
    1f40:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1f44:	2000      	movs	r0, #0
    1f46:	e7fb      	b.n	1f40 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x108>
    1f48:	2000035c 	.word	0x2000035c
    1f4c:	4000e000 	.word	0x4000e000
    1f50:	e000ed10 	.word	0xe000ed10

00001f54 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>:
    1f54:	b510      	push	{r4, lr}
    1f56:	4806      	ldr	r0, [pc, #24]	; (1f70 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>)
    1f58:	f00e fea5 	bl	10ca6 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    1f5c:	b118      	cbz	r0, 1f66 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x12>
    1f5e:	2127      	movs	r1, #39	; 0x27
    1f60:	201d      	movs	r0, #29
    1f62:	f7ff fa4b 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1f66:	4802      	ldr	r0, [pc, #8]	; (1f70 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>)
    1f68:	2100      	movs	r1, #0
    1f6a:	7041      	strb	r1, [r0, #1]
    1f6c:	bd10      	pop	{r4, pc}
    1f6e:	0000      	.short	0x0000
    1f70:	2000035c 	.word	0x2000035c

00001f74 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>:
    1f74:	b570      	push	{r4, r5, r6, lr}
    1f76:	4911      	ldr	r1, [pc, #68]	; (1fbc <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x48>)
    1f78:	680a      	ldr	r2, [r1, #0]
    1f7a:	b1ea      	cbz	r2, 1fb8 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x44>
    1f7c:	2300      	movs	r3, #0
    1f7e:	461d      	mov	r5, r3
    1f80:	2401      	movs	r4, #1
    1f82:	684a      	ldr	r2, [r1, #4]
    1f84:	1c52      	adds	r2, r2, #1
    1f86:	604a      	str	r2, [r1, #4]
    1f88:	2a09      	cmp	r2, #9
    1f8a:	d300      	bcc.n	1f8e <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x1a>
    1f8c:	604d      	str	r5, [r1, #4]
    1f8e:	790e      	ldrb	r6, [r1, #4]
    1f90:	fa04 f206 	lsl.w	r2, r4, r6
    1f94:	680e      	ldr	r6, [r1, #0]
    1f96:	4216      	tst	r6, r2
    1f98:	d00b      	beq.n	1fb2 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x3e>
    1f9a:	f3ef 8310 	mrs	r3, PRIMASK
    1f9e:	b672      	cpsid	i
    1fa0:	680c      	ldr	r4, [r1, #0]
    1fa2:	4394      	bics	r4, r2
    1fa4:	600c      	str	r4, [r1, #0]
    1fa6:	b903      	cbnz	r3, 1faa <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x36>
    1fa8:	b662      	cpsie	i
    1faa:	6849      	ldr	r1, [r1, #4]
    1fac:	6001      	str	r1, [r0, #0]
    1fae:	2000      	movs	r0, #0
    1fb0:	bd70      	pop	{r4, r5, r6, pc}
    1fb2:	1c5b      	adds	r3, r3, #1
    1fb4:	2b09      	cmp	r3, #9
    1fb6:	d3e4      	bcc.n	1f82 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0xe>
    1fb8:	2005      	movs	r0, #5
    1fba:	bd70      	pop	{r4, r5, r6, pc}
    1fbc:	20000064 	.word	0x20000064

00001fc0 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>:
    1fc0:	4802      	ldr	r0, [pc, #8]	; (1fcc <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI+0xc>)
    1fc2:	2100      	movs	r1, #0
    1fc4:	6001      	str	r1, [r0, #0]
    1fc6:	6041      	str	r1, [r0, #4]
    1fc8:	4770      	bx	lr
    1fca:	0000      	.short	0x0000
    1fcc:	20000064 	.word	0x20000064

00001fd0 <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI>:
    1fd0:	b510      	push	{r4, lr}
    1fd2:	4c04      	ldr	r4, [pc, #16]	; (1fe4 <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI+0x14>)
    1fd4:	7820      	ldrb	r0, [r4, #0]
    1fd6:	28ff      	cmp	r0, #255	; 0xff
    1fd8:	d003      	beq.n	1fe2 <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI+0x12>
    1fda:	f00a fb8f 	bl	c6fc <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY>
    1fde:	20ff      	movs	r0, #255	; 0xff
    1fe0:	7020      	strb	r0, [r4, #0]
    1fe2:	bd10      	pop	{r4, pc}
    1fe4:	20000000 	.word	0x20000000

00001fe8 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>:
    1fe8:	b510      	push	{r4, lr}
    1fea:	4c08      	ldr	r4, [pc, #32]	; (200c <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x24>)
    1fec:	7861      	ldrb	r1, [r4, #1]
    1fee:	b109      	cbz	r1, 1ff4 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0xc>
    1ff0:	200f      	movs	r0, #15
    1ff2:	bd10      	pop	{r4, pc}
    1ff4:	f00a fb48 	bl	c688 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    1ff8:	7020      	strb	r0, [r4, #0]
    1ffa:	28ff      	cmp	r0, #255	; 0xff
    1ffc:	d001      	beq.n	2002 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x1a>
    1ffe:	2000      	movs	r0, #0
    2000:	bd10      	pop	{r4, pc}
    2002:	2173      	movs	r1, #115	; 0x73
    2004:	201f      	movs	r0, #31
    2006:	f7ff f9f9 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    200a:	0000      	.short	0x0000
    200c:	20000000 	.word	0x20000000

00002010 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>:
    2010:	4901      	ldr	r1, [pc, #4]	; (2018 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI+0x8>)
    2012:	2000      	movs	r0, #0
    2014:	7048      	strb	r0, [r1, #1]
    2016:	4770      	bx	lr
    2018:	20000000 	.word	0x20000000

0000201c <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>:
    201c:	4806      	ldr	r0, [pc, #24]	; (2038 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x1c>)
    201e:	4a07      	ldr	r2, [pc, #28]	; (203c <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x20>)
    2020:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    2022:	8852      	ldrh	r2, [r2, #2]
    2024:	4291      	cmp	r1, r2
    2026:	d104      	bne.n	2032 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    2028:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    202c:	b108      	cbz	r0, 2032 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    202e:	2000      	movs	r0, #0
    2030:	4770      	bx	lr
    2032:	2001      	movs	r0, #1
    2034:	4770      	bx	lr
    2036:	0000      	.short	0x0000
    2038:	200010a0 	.word	0x200010a0
    203c:	20000348 	.word	0x20000348

00002040 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>:
    2040:	4901      	ldr	r1, [pc, #4]	; (2048 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I+0x8>)
    2042:	8048      	strh	r0, [r1, #2]
    2044:	4770      	bx	lr
    2046:	0000      	.short	0x0000
    2048:	20000348 	.word	0x20000348

0000204c <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>:
    204c:	4808      	ldr	r0, [pc, #32]	; (2070 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x24>)
    204e:	4a09      	ldr	r2, [pc, #36]	; (2074 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x28>)
    2050:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    2052:	8852      	ldrh	r2, [r2, #2]
    2054:	4291      	cmp	r1, r2
    2056:	d109      	bne.n	206c <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    2058:	f64f 71ff 	movw	r1, #65535	; 0xffff
    205c:	8481      	strh	r1, [r0, #36]	; 0x24
    205e:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    2062:	b119      	cbz	r1, 206c <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    2064:	2100      	movs	r1, #0
    2066:	7001      	strb	r1, [r0, #0]
    2068:	2001      	movs	r0, #1
    206a:	4770      	bx	lr
    206c:	2000      	movs	r0, #0
    206e:	4770      	bx	lr
    2070:	200010a0 	.word	0x200010a0
    2074:	20000348 	.word	0x20000348

00002078 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>:
    2078:	4807      	ldr	r0, [pc, #28]	; (2098 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    207a:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    207e:	2901      	cmp	r1, #1
    2080:	d007      	beq.n	2092 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x1a>
    2082:	2101      	movs	r1, #1
    2084:	7001      	strb	r1, [r0, #0]
    2086:	4805      	ldr	r0, [pc, #20]	; (209c <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x24>)
    2088:	4903      	ldr	r1, [pc, #12]	; (2098 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    208a:	8800      	ldrh	r0, [r0, #0]
    208c:	8488      	strh	r0, [r1, #36]	; 0x24
    208e:	2001      	movs	r0, #1
    2090:	4770      	bx	lr
    2092:	2000      	movs	r0, #0
    2094:	4770      	bx	lr
    2096:	0000      	.short	0x0000
    2098:	200010a0 	.word	0x200010a0
    209c:	20000348 	.word	0x20000348

000020a0 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>:
    20a0:	4906      	ldr	r1, [pc, #24]	; (20bc <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x1c>)
    20a2:	4b07      	ldr	r3, [pc, #28]	; (20c0 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x20>)
    20a4:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    20a6:	885b      	ldrh	r3, [r3, #2]
    20a8:	429a      	cmp	r2, r3
    20aa:	d105      	bne.n	20b8 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    20ac:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    20b0:	b112      	cbz	r2, 20b8 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    20b2:	6001      	str	r1, [r0, #0]
    20b4:	2001      	movs	r0, #1
    20b6:	4770      	bx	lr
    20b8:	2000      	movs	r0, #0
    20ba:	4770      	bx	lr
    20bc:	200010a0 	.word	0x200010a0
    20c0:	20000348 	.word	0x20000348

000020c4 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>:
    20c4:	4909      	ldr	r1, [pc, #36]	; (20ec <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    20c6:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    20c8:	f5a2 437f 	sub.w	r3, r2, #65280	; 0xff00
    20cc:	3bff      	subs	r3, #255	; 0xff
    20ce:	d002      	beq.n	20d6 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x12>
    20d0:	2100      	movs	r1, #0
    20d2:	6001      	str	r1, [r0, #0]
    20d4:	e007      	b.n	20e6 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    20d6:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    20da:	4904      	ldr	r1, [pc, #16]	; (20ec <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    20dc:	2a01      	cmp	r2, #1
    20de:	d002      	beq.n	20e6 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    20e0:	6001      	str	r1, [r0, #0]
    20e2:	2001      	movs	r0, #1
    20e4:	4770      	bx	lr
    20e6:	2000      	movs	r0, #0
    20e8:	4770      	bx	lr
    20ea:	0000      	.short	0x0000
    20ec:	200010a0 	.word	0x200010a0

000020f0 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>:
    20f0:	4901      	ldr	r1, [pc, #4]	; (20f8 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY+0x8>)
    20f2:	8008      	strh	r0, [r1, #0]
    20f4:	4770      	bx	lr
    20f6:	0000      	.short	0x0000
    20f8:	20000348 	.word	0x20000348

000020fc <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>:
    20fc:	4905      	ldr	r1, [pc, #20]	; (2114 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x18>)
    20fe:	2000      	movs	r0, #0
    2100:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    2104:	f64f 70ff 	movw	r0, #65535	; 0xffff
    2108:	8488      	strh	r0, [r1, #36]	; 0x24
    210a:	4903      	ldr	r1, [pc, #12]	; (2118 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x1c>)
    210c:	8008      	strh	r0, [r1, #0]
    210e:	8048      	strh	r0, [r1, #2]
    2110:	4770      	bx	lr
    2112:	0000      	.short	0x0000
    2114:	200010a0 	.word	0x200010a0
    2118:	20000348 	.word	0x20000348
    211c:	4905      	ldr	r1, [pc, #20]	; (2134 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x38>)
    211e:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    2120:	4282      	cmp	r2, r0
    2122:	d105      	bne.n	2130 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x34>
    2124:	2000      	movs	r0, #0
    2126:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    212a:	f64f 70ff 	movw	r0, #65535	; 0xffff
    212e:	8488      	strh	r0, [r1, #36]	; 0x24
    2130:	4770      	bx	lr
    2132:	0000      	.short	0x0000
    2134:	200010a0 	.word	0x200010a0

00002138 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>:
    2138:	4a0a      	ldr	r2, [pc, #40]	; (2164 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x2c>)
    213a:	b110      	cbz	r0, 2142 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0xa>
    213c:	2801      	cmp	r0, #1
    213e:	d007      	beq.n	2150 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x18>
    2140:	e00e      	b.n	2160 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    2142:	7850      	ldrb	r0, [r2, #1]
    2144:	b160      	cbz	r0, 2160 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    2146:	f8d2 0002 	ldr.w	r0, [r2, #2]
    214a:	6008      	str	r0, [r1, #0]
    214c:	88d0      	ldrh	r0, [r2, #6]
    214e:	e004      	b.n	215a <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x22>
    2150:	7810      	ldrb	r0, [r2, #0]
    2152:	b128      	cbz	r0, 2160 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    2154:	6890      	ldr	r0, [r2, #8]
    2156:	6008      	str	r0, [r1, #0]
    2158:	8990      	ldrh	r0, [r2, #12]
    215a:	8088      	strh	r0, [r1, #4]
    215c:	2001      	movs	r0, #1
    215e:	4770      	bx	lr
    2160:	2000      	movs	r0, #0
    2162:	4770      	bx	lr
    2164:	2000035e 	.word	0x2000035e

00002168 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>:
    2168:	4a08      	ldr	r2, [pc, #32]	; (218c <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x24>)
    216a:	2301      	movs	r3, #1
    216c:	b138      	cbz	r0, 217e <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x16>
    216e:	2801      	cmp	r0, #1
    2170:	d104      	bne.n	217c <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x14>
    2172:	7013      	strb	r3, [r2, #0]
    2174:	6808      	ldr	r0, [r1, #0]
    2176:	6090      	str	r0, [r2, #8]
    2178:	8888      	ldrh	r0, [r1, #4]
    217a:	8190      	strh	r0, [r2, #12]
    217c:	4770      	bx	lr
    217e:	7053      	strb	r3, [r2, #1]
    2180:	6808      	ldr	r0, [r1, #0]
    2182:	f8c2 0002 	str.w	r0, [r2, #2]
    2186:	8888      	ldrh	r0, [r1, #4]
    2188:	80d0      	strh	r0, [r2, #6]
    218a:	4770      	bx	lr
    218c:	2000035e 	.word	0x2000035e

00002190 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>:
    2190:	4906      	ldr	r1, [pc, #24]	; (21ac <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x1c>)
    2192:	b110      	cbz	r0, 219a <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xa>
    2194:	2801      	cmp	r0, #1
    2196:	d002      	beq.n	219e <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xe>
    2198:	e005      	b.n	21a6 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    219a:	7848      	ldrb	r0, [r1, #1]
    219c:	e000      	b.n	21a0 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x10>
    219e:	7808      	ldrb	r0, [r1, #0]
    21a0:	b108      	cbz	r0, 21a6 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    21a2:	2001      	movs	r0, #1
    21a4:	4770      	bx	lr
    21a6:	2000      	movs	r0, #0
    21a8:	4770      	bx	lr
    21aa:	0000      	.short	0x0000
    21ac:	2000035e 	.word	0x2000035e

000021b0 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>:
    21b0:	4901      	ldr	r1, [pc, #4]	; (21b8 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I+0x8>)
    21b2:	7708      	strb	r0, [r1, #28]
    21b4:	4770      	bx	lr
    21b6:	0000      	.short	0x0000
    21b8:	200009e2 	.word	0x200009e2

000021bc <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ>:
    21bc:	4801      	ldr	r0, [pc, #4]	; (21c4 <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ+0x8>)
    21be:	7880      	ldrb	r0, [r0, #2]
    21c0:	4770      	bx	lr
    21c2:	0000      	.short	0x0000
    21c4:	2000006c 	.word	0x2000006c

000021c8 <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY>:
    21c8:	4801      	ldr	r0, [pc, #4]	; (21d0 <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY+0x8>)
    21ca:	78c0      	ldrb	r0, [r0, #3]
    21cc:	4770      	bx	lr
    21ce:	0000      	.short	0x0000
    21d0:	2000006c 	.word	0x2000006c

000021d4 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>:
    21d4:	b570      	push	{r4, r5, r6, lr}
    21d6:	460c      	mov	r4, r1
    21d8:	4605      	mov	r5, r0
    21da:	f000 f91f 	bl	241c <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
    21de:	b118      	cbz	r0, 21e8 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x14>
    21e0:	21d0      	movs	r1, #208	; 0xd0
    21e2:	2027      	movs	r0, #39	; 0x27
    21e4:	f7ff f90a 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    21e8:	4803      	ldr	r0, [pc, #12]	; (21f8 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x24>)
    21ea:	2101      	movs	r1, #1
    21ec:	f00c f917 	bl	e41e <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>
    21f0:	4802      	ldr	r0, [pc, #8]	; (21fc <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x28>)
    21f2:	e9c0 540b 	strd	r5, r4, [r0, #44]	; 0x2c
    21f6:	bd70      	pop	{r4, r5, r6, pc}
    21f8:	200009c0 	.word	0x200009c0
    21fc:	2000006c 	.word	0x2000006c

00002200 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>:
    2200:	4901      	ldr	r1, [pc, #4]	; (2208 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA+0x8>)
    2202:	2001      	movs	r0, #1
    2204:	7148      	strb	r0, [r1, #5]
    2206:	4770      	bx	lr
    2208:	2000006c 	.word	0x2000006c

0000220c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>:
    220c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2210:	4d5b      	ldr	r5, [pc, #364]	; (2380 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x174>)
    2212:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    2214:	782e      	ldrb	r6, [r5, #0]
    2216:	2e00      	cmp	r6, #0
    2218:	d16b      	bne.n	22f2 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe6>
    221a:	2a00      	cmp	r2, #0
    221c:	d069      	beq.n	22f2 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe6>
    221e:	2b00      	cmp	r3, #0
    2220:	d067      	beq.n	22f2 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe6>
    2222:	2c00      	cmp	r4, #0
    2224:	d065      	beq.n	22f2 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe6>
    2226:	f105 0614 	add.w	r6, r5, #20
    222a:	e9c5 010f 	strd	r0, r1, [r5, #60]	; 0x3c
    222e:	e886 001c 	stmia.w	r6, {r2, r3, r4}
    2232:	2700      	movs	r7, #0
    2234:	716f      	strb	r7, [r5, #5]
    2236:	712f      	strb	r7, [r5, #4]
    2238:	70af      	strb	r7, [r5, #2]
    223a:	706f      	strb	r7, [r5, #1]
    223c:	70ef      	strb	r7, [r5, #3]
    223e:	81af      	strh	r7, [r5, #12]
    2240:	81ef      	strh	r7, [r5, #14]
    2242:	f000 f93d 	bl	24c0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x88>
    2246:	4606      	mov	r6, r0
    2248:	f000 f934 	bl	24b4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7c>
    224c:	4604      	mov	r4, r0
    224e:	f005 ffb9 	bl	81c4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    2252:	f005 fd11 	bl	7c78 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    2256:	f994 006e 	ldrsb.w	r0, [r4, #110]	; 0x6e
    225a:	f006 f837 	bl	82cc <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    225e:	69e0      	ldr	r0, [r4, #28]
    2260:	f006 f91a 	bl	8498 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    2264:	6960      	ldr	r0, [r4, #20]
    2266:	f006 f90d 	bl	8484 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    226a:	f896 0033 	ldrb.w	r0, [r6, #51]	; 0x33
    226e:	f006 f943 	bl	84f8 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    2272:	f105 003c 	add.w	r0, r5, #60	; 0x3c
    2276:	6840      	ldr	r0, [r0, #4]
    2278:	f890 021a 	ldrb.w	r0, [r0, #538]	; 0x21a
    227c:	b108      	cbz	r0, 2282 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x76>
    227e:	f005 ff21 	bl	80c4 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI>
    2282:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    2286:	2001      	movs	r0, #1
    2288:	f005 fe60 	bl	7f4c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    228c:	2800      	cmp	r0, #0
    228e:	d070      	beq.n	2372 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x166>
    2290:	483c      	ldr	r0, [pc, #240]	; (2384 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x178>)
    2292:	f005 fec7 	bl	8024 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    2296:	8820      	ldrh	r0, [r4, #0]
    2298:	f7ff fcc2 	bl	1c20 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    229c:	6368      	str	r0, [r5, #52]	; 0x34
    229e:	8820      	ldrh	r0, [r4, #0]
    22a0:	f7ff fca8 	bl	1bf4 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    22a4:	f106 0288 	add.w	r2, r6, #136	; 0x88
    22a8:	63a8      	str	r0, [r5, #56]	; 0x38
    22aa:	e892 110c 	ldmia.w	r2, {r2, r3, r8, ip}
    22ae:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 2388 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x17c>
    22b2:	e889 110c 	stmia.w	r9, {r2, r3, r8, ip}
    22b6:	f8d6 2098 	ldr.w	r2, [r6, #152]	; 0x98
    22ba:	f8c9 2019 	str.w	r2, [r9, #25]
    22be:	f8d6 109c 	ldr.w	r1, [r6, #156]	; 0x9c
    22c2:	f8c9 101d 	str.w	r1, [r9, #29]
    22c6:	f000 f933 	bl	2530 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf8>
    22ca:	4601      	mov	r1, r0
    22cc:	8f20      	ldrh	r0, [r4, #56]	; 0x38
    22ce:	46ba      	mov	sl, r7
    22d0:	f00b fe02 	bl	ded8 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    22d4:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
    22d6:	4281      	cmp	r1, r0
    22d8:	d200      	bcs.n	22dc <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xd0>
    22da:	4608      	mov	r0, r1
    22dc:	71a8      	strb	r0, [r5, #6]
    22de:	46a8      	mov	r8, r5
    22e0:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    22e4:	8fe0      	ldrh	r0, [r4, #62]	; 0x3e
    22e6:	f896 7023 	ldrb.w	r7, [r6, #35]	; 0x23
    22ea:	8fa5      	ldrh	r5, [r4, #60]	; 0x3c
    22ec:	2908      	cmp	r1, #8
    22ee:	d104      	bne.n	22fa <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xee>
    22f0:	e002      	b.n	22f8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xec>
    22f2:	f240 1145 	movw	r1, #325	; 0x145
    22f6:	e040      	b.n	237a <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x16e>
    22f8:	2104      	movs	r1, #4
    22fa:	f00b fded 	bl	ded8 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    22fe:	b90f      	cbnz	r7, 2304 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xf8>
    2300:	1d00      	adds	r0, r0, #4
    2302:	b280      	uxth	r0, r0
    2304:	4285      	cmp	r5, r0
    2306:	d200      	bcs.n	230a <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xfe>
    2308:	4628      	mov	r0, r5
    230a:	b2c5      	uxtb	r5, r0
    230c:	f888 5007 	strb.w	r5, [r8, #7]
    2310:	f888 5008 	strb.w	r5, [r8, #8]
    2314:	f896 0023 	ldrb.w	r0, [r6, #35]	; 0x23
    2318:	46d0      	mov	r8, sl
    231a:	b190      	cbz	r0, 2342 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x136>
    231c:	2701      	movs	r7, #1
    231e:	f889 7018 	strb.w	r7, [r9, #24]
    2322:	e9d6 1220 	ldrd	r1, r2, [r6, #128]	; 0x80
    2326:	e9c9 1204 	strd	r1, r2, [r9, #16]
    232a:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    232e:	f00b fcd8 	bl	dce2 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
    2332:	4603      	mov	r3, r0
    2334:	462a      	mov	r2, r5
    2336:	4914      	ldr	r1, [pc, #80]	; (2388 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x17c>)
    2338:	4638      	mov	r0, r7
    233a:	f8cd 8000 	str.w	r8, [sp]
    233e:	f005 fc07 	bl	7b50 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>
    2342:	2001      	movs	r0, #1
    2344:	f000 fb54 	bl	29f0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5b8>
    2348:	4810      	ldr	r0, [pc, #64]	; (238c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x180>)
    234a:	6800      	ldr	r0, [r0, #0]
    234c:	2803      	cmp	r0, #3
    234e:	d012      	beq.n	2376 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x16a>
    2350:	280b      	cmp	r0, #11
    2352:	d010      	beq.n	2376 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x16a>
    2354:	480c      	ldr	r0, [pc, #48]	; (2388 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x17c>)
    2356:	220e      	movs	r2, #14
    2358:	2100      	movs	r1, #0
    235a:	304a      	adds	r0, #74	; 0x4a
    235c:	f00e fdec 	bl	10f38 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    2360:	4809      	ldr	r0, [pc, #36]	; (2388 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x17c>)
    2362:	8ab1      	ldrh	r1, [r6, #20]
    2364:	304a      	adds	r0, #74	; 0x4a
    2366:	8041      	strh	r1, [r0, #2]
    2368:	8821      	ldrh	r1, [r4, #0]
    236a:	8001      	strh	r1, [r0, #0]
    236c:	f896 1033 	ldrb.w	r1, [r6, #51]	; 0x33
    2370:	7101      	strb	r1, [r0, #4]
    2372:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2376:	f240 2102 	movw	r1, #514	; 0x202
    237a:	2027      	movs	r0, #39	; 0x27
    237c:	f7ff f83e 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2380:	2000006c 	.word	0x2000006c
    2384:	00002bf4 	.word	0x00002bf4
    2388:	20000998 	.word	0x20000998
    238c:	40001550 	.word	0x40001550

00002390 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>:
    2390:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    2394:	4688      	mov	r8, r1
    2396:	4607      	mov	r7, r0
    2398:	f000 f892 	bl	24c0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x88>
    239c:	4c1a      	ldr	r4, [pc, #104]	; (2408 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x78>)
    239e:	4605      	mov	r5, r0
    23a0:	07b8      	lsls	r0, r7, #30
    23a2:	6a61      	ldr	r1, [r4, #36]	; 0x24
    23a4:	784e      	ldrb	r6, [r1, #1]
    23a6:	d516      	bpl.n	23d6 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x46>
    23a8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    23aa:	b330      	cbz	r0, 23fa <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x6a>
    23ac:	8962      	ldrh	r2, [r4, #10]
    23ae:	1cd2      	adds	r2, r2, #3
    23b0:	f00e fd48 	bl	10e44 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    23b4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    23b6:	6260      	str	r0, [r4, #36]	; 0x24
    23b8:	4669      	mov	r1, sp
    23ba:	aa01      	add	r2, sp, #4
    23bc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    23be:	f00b f8df 	bl	d580 <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>
    23c2:	9800      	ldr	r0, [sp, #0]
    23c4:	f00b f892 	bl	d4ec <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    23c8:	f8c8 0000 	str.w	r0, [r8]
    23cc:	4631      	mov	r1, r6
    23ce:	2201      	movs	r2, #1
    23d0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    23d2:	f00b f842 	bl	d45a <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    23d6:	07f8      	lsls	r0, r7, #31
    23d8:	d00d      	beq.n	23f6 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x66>
    23da:	e9d5 0120 	ldrd	r0, r1, [r5, #128]	; 0x80
    23de:	3518      	adds	r5, #24
    23e0:	1c40      	adds	r0, r0, #1
    23e2:	f141 0100 	adc.w	r1, r1, #0
    23e6:	e9c5 011a 	strd	r0, r1, [r5, #104]	; 0x68
    23ea:	f815 0918 	ldrb.w	r0, [r5], #-24
    23ee:	2801      	cmp	r0, #1
    23f0:	d008      	beq.n	2404 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x74>
    23f2:	2001      	movs	r0, #1
    23f4:	7628      	strb	r0, [r5, #24]
    23f6:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    23fa:	f240 4166 	movw	r1, #1126	; 0x466
    23fe:	2027      	movs	r0, #39	; 0x27
    2400:	f7fe fffc 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2404:	2000      	movs	r0, #0
    2406:	e7f5      	b.n	23f4 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x64>
    2408:	2000006c 	.word	0x2000006c

0000240c <sym_ZWLSMB33C6NPFOBZGVPV4PN4UKQGSPLLR4WLDFI>:
    240c:	4802      	ldr	r0, [pc, #8]	; (2418 <sym_ZWLSMB33C6NPFOBZGVPV4PN4UKQGSPLLR4WLDFI+0xc>)
    240e:	89c0      	ldrh	r0, [r0, #14]
    2410:	f3c0 2080 	ubfx	r0, r0, #10, #1
    2414:	4770      	bx	lr
    2416:	0000      	.short	0x0000
    2418:	2000006c 	.word	0x2000006c

0000241c <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>:
    241c:	4804      	ldr	r0, [pc, #16]	; (2430 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x14>)
    241e:	7800      	ldrb	r0, [r0, #0]
    2420:	b108      	cbz	r0, 2426 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0xa>
    2422:	200c      	movs	r0, #12
    2424:	4770      	bx	lr
    2426:	4903      	ldr	r1, [pc, #12]	; (2434 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x18>)
    2428:	2000      	movs	r0, #0
    242a:	7708      	strb	r0, [r1, #28]
    242c:	4770      	bx	lr
    242e:	0000      	.short	0x0000
    2430:	2000006c 	.word	0x2000006c
    2434:	200009e2 	.word	0x200009e2

00002438 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>:
    2438:	480c      	ldr	r0, [pc, #48]	; (246c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x34>)
    243a:	b510      	push	{r4, lr}
    243c:	7801      	ldrb	r1, [r0, #0]
    243e:	b149      	cbz	r1, 2454 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1c>
    2440:	f100 013c 	add.w	r1, r0, #60	; 0x3c
    2444:	7800      	ldrb	r0, [r0, #0]
    2446:	2802      	cmp	r0, #2
    2448:	d008      	beq.n	245c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x24>
    244a:	f240 211e 	movw	r1, #542	; 0x21e
    244e:	2027      	movs	r0, #39	; 0x27
    2450:	f7fe ffd4 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2454:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2458:	f000 b9d8 	b.w	280c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3d4>
    245c:	6848      	ldr	r0, [r1, #4]
    245e:	f8d0 0230 	ldr.w	r0, [r0, #560]	; 0x230
    2462:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2466:	f005 bde5 	b.w	8034 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA>
    246a:	0000      	.short	0x0000
    246c:	2000006c 	.word	0x2000006c
    2470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2472:	2600      	movs	r6, #0
    2474:	4605      	mov	r5, r0
    2476:	704e      	strb	r6, [r1, #1]
    2478:	201d      	movs	r0, #29
    247a:	4f09      	ldr	r7, [pc, #36]	; (24a0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x68>)
    247c:	460c      	mov	r4, r1
    247e:	7008      	strb	r0, [r1, #0]
    2480:	722e      	strb	r6, [r5, #8]
    2482:	220e      	movs	r2, #14
    2484:	4639      	mov	r1, r7
    2486:	1d20      	adds	r0, r4, #4
    2488:	f00e fcdc 	bl	10e44 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    248c:	7a28      	ldrb	r0, [r5, #8]
    248e:	f88d 0000 	strb.w	r0, [sp]
    2492:	9800      	ldr	r0, [sp, #0]
    2494:	9000      	str	r0, [sp, #0]
    2496:	f89d 0000 	ldrb.w	r0, [sp]
    249a:	2800      	cmp	r0, #0
    249c:	d1f0      	bne.n	2480 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    249e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    24a0:	200009f0 	.word	0x200009f0
    24a4:	4a02      	ldr	r2, [pc, #8]	; (24b0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x78>)
    24a6:	8993      	ldrh	r3, [r2, #12]
    24a8:	4303      	orrs	r3, r0
    24aa:	8193      	strh	r3, [r2, #12]
    24ac:	6952      	ldr	r2, [r2, #20]
    24ae:	4710      	bx	r2
    24b0:	2000006c 	.word	0x2000006c
    24b4:	4801      	ldr	r0, [pc, #4]	; (24bc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x84>)
    24b6:	6840      	ldr	r0, [r0, #4]
    24b8:	4770      	bx	lr
    24ba:	0000      	.short	0x0000
    24bc:	200000a8 	.word	0x200000a8
    24c0:	4801      	ldr	r0, [pc, #4]	; (24c8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x90>)
    24c2:	6840      	ldr	r0, [r0, #4]
    24c4:	3080      	adds	r0, #128	; 0x80
    24c6:	4770      	bx	lr
    24c8:	200000a8 	.word	0x200000a8
    24cc:	4a01      	ldr	r2, [pc, #4]	; (24d4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x9c>)
    24ce:	2100      	movs	r1, #0
    24d0:	6952      	ldr	r2, [r2, #20]
    24d2:	4710      	bx	r2
    24d4:	2000006c 	.word	0x2000006c
    24d8:	b570      	push	{r4, r5, r6, lr}
    24da:	4605      	mov	r5, r0
    24dc:	2901      	cmp	r1, #1
    24de:	d818      	bhi.n	2512 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xda>
    24e0:	4c12      	ldr	r4, [pc, #72]	; (252c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf4>)
    24e2:	69a1      	ldr	r1, [r4, #24]
    24e4:	4788      	blx	r1
    24e6:	b1a0      	cbz	r0, 2512 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xda>
    24e8:	7920      	ldrb	r0, [r4, #4]
    24ea:	b990      	cbnz	r0, 2512 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xda>
    24ec:	b9e5      	cbnz	r5, 2528 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf0>
    24ee:	f104 0010 	add.w	r0, r4, #16
    24f2:	7801      	ldrb	r1, [r0, #0]
    24f4:	06c8      	lsls	r0, r1, #27
    24f6:	d405      	bmi.n	2504 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xcc>
    24f8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    24fa:	7800      	ldrb	r0, [r0, #0]
    24fc:	06c0      	lsls	r0, r0, #27
    24fe:	d401      	bmi.n	2504 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xcc>
    2500:	2001      	movs	r0, #1
    2502:	e000      	b.n	2506 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xce>
    2504:	2000      	movs	r0, #0
    2506:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    2508:	b92a      	cbnz	r2, 2516 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xde>
    250a:	8962      	ldrh	r2, [r4, #10]
    250c:	b11a      	cbz	r2, 2516 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xde>
    250e:	06c9      	lsls	r1, r1, #27
    2510:	d401      	bmi.n	2516 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xde>
    2512:	2001      	movs	r0, #1
    2514:	bd70      	pop	{r4, r5, r6, pc}
    2516:	89a1      	ldrh	r1, [r4, #12]
    2518:	078a      	lsls	r2, r1, #30
    251a:	d503      	bpl.n	2524 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xec>
    251c:	6a22      	ldr	r2, [r4, #32]
    251e:	78d2      	ldrb	r2, [r2, #3]
    2520:	2a02      	cmp	r2, #2
    2522:	d001      	beq.n	2528 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf0>
    2524:	4308      	orrs	r0, r1
    2526:	d1f4      	bne.n	2512 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xda>
    2528:	2000      	movs	r0, #0
    252a:	bd70      	pop	{r4, r5, r6, pc}
    252c:	2000006c 	.word	0x2000006c
    2530:	b510      	push	{r4, lr}
    2532:	f7ff ffbf 	bl	24b4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7c>
    2536:	4604      	mov	r4, r0
    2538:	f7ff ffc2 	bl	24c0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x88>
    253c:	4602      	mov	r2, r0
    253e:	7f41      	ldrb	r1, [r0, #29]
    2540:	4816      	ldr	r0, [pc, #88]	; (259c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x164>)
    2542:	2925      	cmp	r1, #37	; 0x25
    2544:	d010      	beq.n	2568 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x130>
    2546:	2926      	cmp	r1, #38	; 0x26
    2548:	d00e      	beq.n	2568 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x130>
    254a:	7f92      	ldrb	r2, [r2, #30]
    254c:	2a25      	cmp	r2, #37	; 0x25
    254e:	d00b      	beq.n	2568 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x130>
    2550:	2920      	cmp	r1, #32
    2552:	d00d      	beq.n	2570 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x138>
    2554:	2921      	cmp	r1, #33	; 0x21
    2556:	d00b      	beq.n	2570 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x138>
    2558:	2a23      	cmp	r2, #35	; 0x23
    255a:	d00f      	beq.n	257c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x144>
    255c:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    2560:	2804      	cmp	r0, #4
    2562:	d100      	bne.n	2566 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x12e>
    2564:	2008      	movs	r0, #8
    2566:	bd10      	pop	{r4, pc}
    2568:	6840      	ldr	r0, [r0, #4]
    256a:	f890 12ce 	ldrb.w	r1, [r0, #718]	; 0x2ce
    256e:	e00e      	b.n	258e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x156>
    2570:	2a23      	cmp	r2, #35	; 0x23
    2572:	d003      	beq.n	257c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x144>
    2574:	6840      	ldr	r0, [r0, #4]
    2576:	f890 013e 	ldrb.w	r0, [r0, #318]	; 0x13e
    257a:	e005      	b.n	2588 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x150>
    257c:	6841      	ldr	r1, [r0, #4]
    257e:	f891 013e 	ldrb.w	r0, [r1, #318]	; 0x13e
    2582:	f891 1063 	ldrb.w	r1, [r1, #99]	; 0x63
    2586:	4008      	ands	r0, r1
    2588:	f00b fba1 	bl	dcce <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x4>
    258c:	4601      	mov	r1, r0
    258e:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    2592:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2596:	f00b bbb2 	b.w	dcfe <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x34>
    259a:	0000      	.short	0x0000
    259c:	200000a8 	.word	0x200000a8
    25a0:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    25a4:	468b      	mov	fp, r1
    25a6:	4681      	mov	r9, r0
    25a8:	f7ff ff8a 	bl	24c0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x88>
    25ac:	2600      	movs	r6, #0
    25ae:	4c66      	ldr	r4, [pc, #408]	; (2748 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x310>)
    25b0:	4607      	mov	r7, r0
    25b2:	f88d 6008 	strb.w	r6, [sp, #8]
    25b6:	9603      	str	r6, [sp, #12]
    25b8:	9601      	str	r6, [sp, #4]
    25ba:	7820      	ldrb	r0, [r4, #0]
    25bc:	4635      	mov	r5, r6
    25be:	2802      	cmp	r0, #2
    25c0:	d004      	beq.n	25cc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x194>
    25c2:	f240 41ea 	movw	r1, #1258	; 0x4ea
    25c6:	2027      	movs	r0, #39	; 0x27
    25c8:	f7fe ff18 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    25cc:	7ba0      	ldrb	r0, [r4, #14]
    25ce:	0640      	lsls	r0, r0, #25
    25d0:	d406      	bmi.n	25e0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1a8>
    25d2:	2040      	movs	r0, #64	; 0x40
    25d4:	f7ff ff7a 	bl	24cc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x94>
    25d8:	89e0      	ldrh	r0, [r4, #14]
    25da:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    25de:	81e0      	strh	r0, [r4, #14]
    25e0:	f897 0023 	ldrb.w	r0, [r7, #35]	; 0x23
    25e4:	f1b9 0f00 	cmp.w	r9, #0
    25e8:	d03a      	beq.n	2660 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x228>
    25ea:	b180      	cbz	r0, 260e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1d6>
    25ec:	f005 fb7e 	bl	7cec <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>
    25f0:	f005 fb58 	bl	7ca4 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>
    25f4:	b958      	cbnz	r0, 260e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1d6>
    25f6:	6a60      	ldr	r0, [r4, #36]	; 0x24
    25f8:	7841      	ldrb	r1, [r0, #1]
    25fa:	b141      	cbz	r1, 260e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1d6>
    25fc:	7800      	ldrb	r0, [r0, #0]
    25fe:	7e39      	ldrb	r1, [r7, #24]
    2600:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    2604:	4288      	cmp	r0, r1
    2606:	d102      	bne.n	260e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1d6>
    2608:	2001      	movs	r0, #1
    260a:	7060      	strb	r0, [r4, #1]
    260c:	e097      	b.n	273e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x306>
    260e:	6a60      	ldr	r0, [r4, #36]	; 0x24
    2610:	7841      	ldrb	r1, [r0, #1]
    2612:	8161      	strh	r1, [r4, #10]
    2614:	b121      	cbz	r1, 2620 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1e8>
    2616:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    2618:	f00b f888 	bl	d72c <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>
    261c:	62a0      	str	r0, [r4, #40]	; 0x28
    261e:	e000      	b.n	2622 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1ea>
    2620:	62a5      	str	r5, [r4, #40]	; 0x28
    2622:	89e0      	ldrh	r0, [r4, #14]
    2624:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    2628:	81e0      	strh	r0, [r4, #14]
    262a:	6a60      	ldr	r0, [r4, #36]	; 0x24
    262c:	7df9      	ldrb	r1, [r7, #23]
    262e:	7800      	ldrb	r0, [r0, #0]
    2630:	f3c0 0080 	ubfx	r0, r0, #2, #1
    2634:	4288      	cmp	r0, r1
    2636:	d007      	beq.n	2648 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x210>
    2638:	a803      	add	r0, sp, #12
    263a:	f000 f98b 	bl	2954 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x51c>
    263e:	89e0      	ldrh	r0, [r4, #14]
    2640:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    2644:	81e0      	strh	r0, [r4, #14]
    2646:	e000      	b.n	264a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x212>
    2648:	2601      	movs	r6, #1
    264a:	6a60      	ldr	r0, [r4, #36]	; 0x24
    264c:	7e39      	ldrb	r1, [r7, #24]
    264e:	7800      	ldrb	r0, [r0, #0]
    2650:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    2654:	4288      	cmp	r0, r1
    2656:	d10d      	bne.n	2674 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x23c>
    2658:	a802      	add	r0, sp, #8
    265a:	f000 f931 	bl	28c0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x488>
    265e:	e009      	b.n	2674 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x23c>
    2660:	b108      	cbz	r0, 2666 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x22e>
    2662:	f005 fb3d 	bl	7ce0 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>
    2666:	78a0      	ldrb	r0, [r4, #2]
    2668:	1c40      	adds	r0, r0, #1
    266a:	70a0      	strb	r0, [r4, #2]
    266c:	89e0      	ldrh	r0, [r4, #14]
    266e:	f440 7000 	orr.w	r0, r0, #512	; 0x200
    2672:	81e0      	strh	r0, [r4, #14]
    2674:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 2748 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x310>
    2678:	f897 0022 	ldrb.w	r0, [r7, #34]	; 0x22
    267c:	f10a 0a3c 	add.w	sl, sl, #60	; 0x3c
    2680:	b190      	cbz	r0, 26a8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x270>
    2682:	f7ff ff17 	bl	24b4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7c>
    2686:	4931      	ldr	r1, [pc, #196]	; (274c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x314>)
    2688:	760d      	strb	r5, [r1, #24]
    268a:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
    268e:	e9c1 2304 	strd	r2, r3, [r1, #16]
    2692:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
    2696:	f00b fb24 	bl	dce2 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
    269a:	4603      	mov	r3, r0
    269c:	22fb      	movs	r2, #251	; 0xfb
    269e:	492b      	ldr	r1, [pc, #172]	; (274c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x314>)
    26a0:	4628      	mov	r0, r5
    26a2:	9500      	str	r5, [sp, #0]
    26a4:	f005 fa54 	bl	7b50 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>
    26a8:	f04f 0800 	mov.w	r8, #0
    26ac:	f1bb 0f00 	cmp.w	fp, #0
    26b0:	d104      	bne.n	26bc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x284>
    26b2:	78a1      	ldrb	r1, [r4, #2]
    26b4:	2001      	movs	r0, #1
    26b6:	f7ff ff0f 	bl	24d8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xa0>
    26ba:	b120      	cbz	r0, 26c6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x28e>
    26bc:	f005 fece 	bl	845c <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>
    26c0:	f04f 0801 	mov.w	r8, #1
    26c4:	e002      	b.n	26cc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x294>
    26c6:	2000      	movs	r0, #0
    26c8:	f000 f9d0 	bl	2a6c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x634>
    26cc:	f89d 0008 	ldrb.w	r0, [sp, #8]
    26d0:	b118      	cbz	r0, 26da <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2a2>
    26d2:	a901      	add	r1, sp, #4
    26d4:	2002      	movs	r0, #2
    26d6:	f7ff fe5b 	bl	2390 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    26da:	481c      	ldr	r0, [pc, #112]	; (274c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x314>)
    26dc:	8aba      	ldrh	r2, [r7, #20]
    26de:	304a      	adds	r0, #74	; 0x4a
    26e0:	b13e      	cbz	r6, 26f2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2ba>
    26e2:	b91a      	cbnz	r2, 26ec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2b4>
    26e4:	88c2      	ldrh	r2, [r0, #6]
    26e6:	b90a      	cbnz	r2, 26ec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2b4>
    26e8:	8902      	ldrh	r2, [r0, #8]
    26ea:	b112      	cbz	r2, 26f2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2ba>
    26ec:	8942      	ldrh	r2, [r0, #10]
    26ee:	1c52      	adds	r2, r2, #1
    26f0:	8142      	strh	r2, [r0, #10]
    26f2:	f1b9 0f00 	cmp.w	r9, #0
    26f6:	d008      	beq.n	270a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2d2>
    26f8:	88c1      	ldrh	r1, [r0, #6]
    26fa:	1c49      	adds	r1, r1, #1
    26fc:	80c1      	strh	r1, [r0, #6]
    26fe:	4812      	ldr	r0, [pc, #72]	; (2748 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x310>)
    2700:	70a5      	strb	r5, [r4, #2]
    2702:	303c      	adds	r0, #60	; 0x3c
    2704:	f001 f968 	bl	39d8 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA>
    2708:	e002      	b.n	2710 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2d8>
    270a:	8901      	ldrh	r1, [r0, #8]
    270c:	1c49      	adds	r1, r1, #1
    270e:	8101      	strh	r1, [r0, #8]
    2710:	9803      	ldr	r0, [sp, #12]
    2712:	b140      	cbz	r0, 2726 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2ee>
    2714:	f00a feea 	bl	d4ec <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    2718:	f8da 1004 	ldr.w	r1, [sl, #4]
    271c:	1c40      	adds	r0, r0, #1
    271e:	7205      	strb	r5, [r0, #8]
    2720:	220e      	movs	r2, #14
    2722:	f00b fefa 	bl	e51a <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    2726:	9801      	ldr	r0, [sp, #4]
    2728:	b130      	cbz	r0, 2738 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x300>
    272a:	f8da 1004 	ldr.w	r1, [sl, #4]
    272e:	7205      	strb	r5, [r0, #8]
    2730:	222a      	movs	r2, #42	; 0x2a
    2732:	9801      	ldr	r0, [sp, #4]
    2734:	f00b fef1 	bl	e51a <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    2738:	f1b8 0f00 	cmp.w	r8, #0
    273c:	d001      	beq.n	2742 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x30a>
    273e:	f000 f865 	bl	280c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3d4>
    2742:	e8bd 9fff 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    2746:	0000      	.short	0x0000
    2748:	2000006c 	.word	0x2000006c
    274c:	20000998 	.word	0x20000998
    2750:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2754:	4688      	mov	r8, r1
    2756:	4681      	mov	r9, r0
    2758:	f7ff feb2 	bl	24c0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x88>
    275c:	4d29      	ldr	r5, [pc, #164]	; (2804 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3cc>)
    275e:	4604      	mov	r4, r0
    2760:	7828      	ldrb	r0, [r5, #0]
    2762:	2801      	cmp	r0, #1
    2764:	d004      	beq.n	2770 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x338>
    2766:	f240 4175 	movw	r1, #1141	; 0x475
    276a:	2027      	movs	r0, #39	; 0x27
    276c:	f7fe fe46 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2770:	7c20      	ldrb	r0, [r4, #16]
    2772:	2700      	movs	r7, #0
    2774:	2601      	movs	r6, #1
    2776:	b128      	cbz	r0, 2784 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x34c>
    2778:	7427      	strb	r7, [r4, #16]
    277a:	2100      	movs	r1, #0
    277c:	2004      	movs	r0, #4
    277e:	f7ff fe91 	bl	24a4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    2782:	74a6      	strb	r6, [r4, #18]
    2784:	6a29      	ldr	r1, [r5, #32]
    2786:	7808      	ldrb	r0, [r1, #0]
    2788:	43c0      	mvns	r0, r0
    278a:	0780      	lsls	r0, r0, #30
    278c:	d109      	bne.n	27a2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x36a>
    278e:	7da0      	ldrb	r0, [r4, #22]
    2790:	bb88      	cbnz	r0, 27f6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3be>
    2792:	2002      	movs	r0, #2
    2794:	f7ff fe86 	bl	24a4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    2798:	6a28      	ldr	r0, [r5, #32]
    279a:	7800      	ldrb	r0, [r0, #0]
    279c:	43c0      	mvns	r0, r0
    279e:	0780      	lsls	r0, r0, #30
    27a0:	d029      	beq.n	27f6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3be>
    27a2:	6a28      	ldr	r0, [r5, #32]
    27a4:	7840      	ldrb	r0, [r0, #1]
    27a6:	b110      	cbz	r0, 27ae <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x376>
    27a8:	2002      	movs	r0, #2
    27aa:	75a0      	strb	r0, [r4, #22]
    27ac:	e000      	b.n	27b0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x378>
    27ae:	75a6      	strb	r6, [r4, #22]
    27b0:	f894 0023 	ldrb.w	r0, [r4, #35]	; 0x23
    27b4:	b198      	cbz	r0, 27de <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3a6>
    27b6:	f7ff fe7d 	bl	24b4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7c>
    27ba:	4913      	ldr	r1, [pc, #76]	; (2808 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3d0>)
    27bc:	7a2d      	ldrb	r5, [r5, #8]
    27be:	760e      	strb	r6, [r1, #24]
    27c0:	e9d4 2320 	ldrd	r2, r3, [r4, #128]	; 0x80
    27c4:	e9c1 2304 	strd	r2, r3, [r1, #16]
    27c8:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    27cc:	f00b fa89 	bl	dce2 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
    27d0:	4603      	mov	r3, r0
    27d2:	462a      	mov	r2, r5
    27d4:	490c      	ldr	r1, [pc, #48]	; (2808 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3d0>)
    27d6:	4630      	mov	r0, r6
    27d8:	9700      	str	r7, [sp, #0]
    27da:	f005 f9b9 	bl	7b50 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>
    27de:	ea38 0009 	bics.w	r0, r8, r9
    27e2:	d004      	beq.n	27ee <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b6>
    27e4:	2100      	movs	r1, #0
    27e6:	4608      	mov	r0, r1
    27e8:	f7ff fe76 	bl	24d8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xa0>
    27ec:	b128      	cbz	r0, 27fa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3c2>
    27ee:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    27f2:	f000 b80b 	b.w	280c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3d4>
    27f6:	2003      	movs	r0, #3
    27f8:	e7d7      	b.n	27aa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x372>
    27fa:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    27fe:	2000      	movs	r0, #0
    2800:	f000 b8f6 	b.w	29f0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5b8>
    2804:	2000006c 	.word	0x2000006c
    2808:	20000998 	.word	0x20000998
    280c:	b510      	push	{r4, lr}
    280e:	f005 fb13 	bl	7e38 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    2812:	f005 fa31 	bl	7c78 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    2816:	4c0d      	ldr	r4, [pc, #52]	; (284c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x414>)
    2818:	89e0      	ldrh	r0, [r4, #14]
    281a:	f7ff fe57 	bl	24cc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x94>
    281e:	480c      	ldr	r0, [pc, #48]	; (2850 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x418>)
    2820:	7f00      	ldrb	r0, [r0, #28]
    2822:	b158      	cbz	r0, 283c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x404>
    2824:	490a      	ldr	r1, [pc, #40]	; (2850 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x418>)
    2826:	220e      	movs	r2, #14
    2828:	f101 000e 	add.w	r0, r1, #14
    282c:	f00e fb0a 	bl	10e44 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    2830:	4807      	ldr	r0, [pc, #28]	; (2850 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x418>)
    2832:	2224      	movs	r2, #36	; 0x24
    2834:	4907      	ldr	r1, [pc, #28]	; (2854 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x41c>)
    2836:	301d      	adds	r0, #29
    2838:	f00b fe83 	bl	e542 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    283c:	69e2      	ldr	r2, [r4, #28]
    283e:	7921      	ldrb	r1, [r4, #4]
    2840:	7860      	ldrb	r0, [r4, #1]
    2842:	4790      	blx	r2
    2844:	2000      	movs	r0, #0
    2846:	7020      	strb	r0, [r4, #0]
    2848:	bd10      	pop	{r4, pc}
    284a:	0000      	.short	0x0000
    284c:	2000006c 	.word	0x2000006c
    2850:	200009e2 	.word	0x200009e2
    2854:	00002471 	.word	0x00002471
    2858:	4808      	ldr	r0, [pc, #32]	; (287c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x444>)
    285a:	b510      	push	{r4, lr}
    285c:	7800      	ldrb	r0, [r0, #0]
    285e:	2802      	cmp	r0, #2
    2860:	d004      	beq.n	286c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x434>
    2862:	f240 214d 	movw	r1, #589	; 0x24d
    2866:	2027      	movs	r0, #39	; 0x27
    2868:	f7fe fdc8 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    286c:	4904      	ldr	r1, [pc, #16]	; (2880 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x448>)
    286e:	2001      	movs	r0, #1
    2870:	7308      	strb	r0, [r1, #12]
    2872:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2876:	f7ff bfc9 	b.w	280c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3d4>
    287a:	0000      	.short	0x0000
    287c:	2000006c 	.word	0x2000006c
    2880:	200009e2 	.word	0x200009e2
    2884:	b430      	push	{r4, r5}
    2886:	4604      	mov	r4, r0
    2888:	480c      	ldr	r0, [pc, #48]	; (28bc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x484>)
    288a:	7a00      	ldrb	r0, [r0, #8]
    288c:	b10b      	cbz	r3, 2892 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x45a>
    288e:	1d00      	adds	r0, r0, #4
    2890:	b2c0      	uxtb	r0, r0
    2892:	b93a      	cbnz	r2, 28a4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x46c>
    2894:	28ff      	cmp	r0, #255	; 0xff
    2896:	d105      	bne.n	28a4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x46c>
    2898:	f894 206b 	ldrb.w	r2, [r4, #107]	; 0x6b
    289c:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
    28a0:	429a      	cmp	r2, r3
    28a2:	d009      	beq.n	28b8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x480>
    28a4:	b121      	cbz	r1, 28b0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x478>
    28a6:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    28aa:	bc30      	pop	{r4, r5}
    28ac:	f005 bdfa 	b.w	84a4 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>
    28b0:	20ff      	movs	r0, #255	; 0xff
    28b2:	f894 106a 	ldrb.w	r1, [r4, #106]	; 0x6a
    28b6:	e7f8      	b.n	28aa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x472>
    28b8:	bc30      	pop	{r4, r5}
    28ba:	4770      	bx	lr
    28bc:	2000006c 	.word	0x2000006c
    28c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    28c4:	4607      	mov	r7, r0
    28c6:	f7ff fdfb 	bl	24c0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x88>
    28ca:	4c21      	ldr	r4, [pc, #132]	; (2950 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x518>)
    28cc:	4605      	mov	r5, r0
    28ce:	2601      	movs	r6, #1
    28d0:	6a61      	ldr	r1, [r4, #36]	; 0x24
    28d2:	7808      	ldrb	r0, [r1, #0]
    28d4:	f000 0003 	and.w	r0, r0, #3
    28d8:	2801      	cmp	r0, #1
    28da:	d00c      	beq.n	28f6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4be>
    28dc:	2802      	cmp	r0, #2
    28de:	d00a      	beq.n	28f6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4be>
    28e0:	2803      	cmp	r0, #3
    28e2:	d11b      	bne.n	291c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4e4>
    28e4:	742e      	strb	r6, [r5, #16]
    28e6:	89e0      	ldrh	r0, [r4, #14]
    28e8:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
    28ec:	81e0      	strh	r0, [r4, #14]
    28ee:	2001      	movs	r0, #1
    28f0:	f7ff fdd8 	bl	24a4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    28f4:	e012      	b.n	291c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4e4>
    28f6:	7848      	ldrb	r0, [r1, #1]
    28f8:	b180      	cbz	r0, 291c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4e4>
    28fa:	89e1      	ldrh	r1, [r4, #14]
    28fc:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
    2900:	81e1      	strh	r1, [r4, #14]
    2902:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    2904:	2900      	cmp	r1, #0
    2906:	d018      	beq.n	293a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x502>
    2908:	28fb      	cmp	r0, #251	; 0xfb
    290a:	d818      	bhi.n	293e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x506>
    290c:	7960      	ldrb	r0, [r4, #5]
    290e:	b120      	cbz	r0, 291a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4e2>
    2910:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    2914:	2020      	movs	r0, #32
    2916:	f7ff bdd9 	b.w	24cc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x94>
    291a:	703e      	strb	r6, [r7, #0]
    291c:	7e28      	ldrb	r0, [r5, #24]
    291e:	2801      	cmp	r0, #1
    2920:	d012      	beq.n	2948 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x510>
    2922:	762e      	strb	r6, [r5, #24]
    2924:	6a60      	ldr	r0, [r4, #36]	; 0x24
    2926:	7840      	ldrb	r0, [r0, #1]
    2928:	2800      	cmp	r0, #0
    292a:	d006      	beq.n	293a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x502>
    292c:	e9f5 0120 	ldrd	r0, r1, [r5, #128]!	; 0x80
    2930:	1c40      	adds	r0, r0, #1
    2932:	f141 0100 	adc.w	r1, r1, #0
    2936:	e9c5 0100 	strd	r0, r1, [r5]
    293a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    293e:	7920      	ldrb	r0, [r4, #4]
    2940:	f040 0010 	orr.w	r0, r0, #16
    2944:	7120      	strb	r0, [r4, #4]
    2946:	e7f8      	b.n	293a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x502>
    2948:	2000      	movs	r0, #0
    294a:	7628      	strb	r0, [r5, #24]
    294c:	e7ea      	b.n	2924 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4ec>
    294e:	0000      	.short	0x0000
    2950:	2000006c 	.word	0x2000006c
    2954:	b570      	push	{r4, r5, r6, lr}
    2956:	4605      	mov	r5, r0
    2958:	f7ff fdb2 	bl	24c0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x88>
    295c:	4604      	mov	r4, r0
    295e:	7d80      	ldrb	r0, [r0, #22]
    2960:	2800      	cmp	r0, #0
    2962:	d02d      	beq.n	29c0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x588>
    2964:	2802      	cmp	r0, #2
    2966:	d10c      	bne.n	2982 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54a>
    2968:	481b      	ldr	r0, [pc, #108]	; (29d8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5a0>)
    296a:	4629      	mov	r1, r5
    296c:	6b40      	ldr	r0, [r0, #52]	; 0x34
    296e:	f00a fd4c 	bl	d40a <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>
    2972:	b330      	cbz	r0, 29c2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x58a>
    2974:	e9d4 011e 	ldrd	r0, r1, [r4, #120]	; 0x78
    2978:	1c40      	adds	r0, r0, #1
    297a:	f141 0100 	adc.w	r1, r1, #0
    297e:	e9c4 011e 	strd	r0, r1, [r4, #120]	; 0x78
    2982:	2500      	movs	r5, #0
    2984:	75a5      	strb	r5, [r4, #22]
    2986:	7ca0      	ldrb	r0, [r4, #18]
    2988:	b120      	cbz	r0, 2994 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x55c>
    298a:	74a5      	strb	r5, [r4, #18]
    298c:	2100      	movs	r1, #0
    298e:	2010      	movs	r0, #16
    2990:	f7ff fd88 	bl	24a4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    2994:	7c60      	ldrb	r0, [r4, #17]
    2996:	b170      	cbz	r0, 29b6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x57e>
    2998:	7465      	strb	r5, [r4, #17]
    299a:	f7ff fb57 	bl	204c <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    299e:	b198      	cbz	r0, 29c8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x590>
    29a0:	2100      	movs	r1, #0
    29a2:	2008      	movs	r0, #8
    29a4:	f7ff fd7e 	bl	24a4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    29a8:	e9d4 011e 	ldrd	r0, r1, [r4, #120]	; 0x78
    29ac:	1c40      	adds	r0, r0, #1
    29ae:	f141 0100 	adc.w	r1, r1, #0
    29b2:	e9c4 011e 	strd	r0, r1, [r4, #120]	; 0x78
    29b6:	7de0      	ldrb	r0, [r4, #23]
    29b8:	2801      	cmp	r0, #1
    29ba:	d00a      	beq.n	29d2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x59a>
    29bc:	2001      	movs	r0, #1
    29be:	75e0      	strb	r0, [r4, #23]
    29c0:	bd70      	pop	{r4, r5, r6, pc}
    29c2:	f240 31e3 	movw	r1, #995	; 0x3e3
    29c6:	e001      	b.n	29cc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x594>
    29c8:	f240 31fa 	movw	r1, #1018	; 0x3fa
    29cc:	2027      	movs	r0, #39	; 0x27
    29ce:	f7fe fd15 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    29d2:	75e5      	strb	r5, [r4, #23]
    29d4:	bd70      	pop	{r4, r5, r6, pc}
    29d6:	0000      	.short	0x0000
    29d8:	2000006c 	.word	0x2000006c
    29dc:	4803      	ldr	r0, [pc, #12]	; (29ec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5b4>)
    29de:	7800      	ldrb	r0, [r0, #0]
    29e0:	2800      	cmp	r0, #0
    29e2:	d001      	beq.n	29e8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5b0>
    29e4:	f7ff bf12 	b.w	280c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3d4>
    29e8:	4770      	bx	lr
    29ea:	0000      	.short	0x0000
    29ec:	2000006c 	.word	0x2000006c
    29f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    29f4:	4606      	mov	r6, r0
    29f6:	f7ff fd5d 	bl	24b4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7c>
    29fa:	4680      	mov	r8, r0
    29fc:	f7ff fd60 	bl	24c0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x88>
    2a00:	4c18      	ldr	r4, [pc, #96]	; (2a64 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x62c>)
    2a02:	4605      	mov	r5, r0
    2a04:	4632      	mov	r2, r6
    2a06:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    2a08:	6260      	str	r0, [r4, #36]	; 0x24
    2a0a:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
    2a0e:	2101      	movs	r1, #1
    2a10:	4640      	mov	r0, r8
    2a12:	f7ff ff37 	bl	2884 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x44c>
    2a16:	f895 0023 	ldrb.w	r0, [r5, #35]	; 0x23
    2a1a:	2700      	movs	r7, #0
    2a1c:	b170      	cbz	r0, 2a3c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x604>
    2a1e:	6b20      	ldr	r0, [r4, #48]	; 0x30
    2a20:	f005 fc76 	bl	8310 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    2a24:	4810      	ldr	r0, [pc, #64]	; (2a68 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x630>)
    2a26:	2101      	movs	r1, #1
    2a28:	7601      	strb	r1, [r0, #24]
    2a2a:	e9d5 1220 	ldrd	r1, r2, [r5, #128]	; 0x80
    2a2e:	e9c0 1204 	strd	r1, r2, [r0, #16]
    2a32:	6b21      	ldr	r1, [r4, #48]	; 0x30
    2a34:	6a60      	ldr	r0, [r4, #36]	; 0x24
    2a36:	f005 f8dd 	bl	7bf4 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA>
    2a3a:	e004      	b.n	2a46 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60e>
    2a3c:	6a60      	ldr	r0, [r4, #36]	; 0x24
    2a3e:	f005 fc67 	bl	8310 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    2a42:	f005 f919 	bl	7c78 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    2a46:	b916      	cbnz	r6, 2a4e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x616>
    2a48:	4638      	mov	r0, r7
    2a4a:	f005 fb17 	bl	807c <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    2a4e:	2100      	movs	r1, #0
    2a50:	f898 206a 	ldrb.w	r2, [r8, #106]	; 0x6a
    2a54:	4608      	mov	r0, r1
    2a56:	f005 fce3 	bl	8420 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    2a5a:	2002      	movs	r0, #2
    2a5c:	7020      	strb	r0, [r4, #0]
    2a5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2a62:	0000      	.short	0x0000
    2a64:	2000006c 	.word	0x2000006c
    2a68:	20000998 	.word	0x20000998
    2a6c:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    2a70:	4604      	mov	r4, r0
    2a72:	f7ff fd25 	bl	24c0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x88>
    2a76:	4605      	mov	r5, r0
    2a78:	f7ff fd1c 	bl	24b4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7c>
    2a7c:	2700      	movs	r7, #0
    2a7e:	f88d 7000 	strb.w	r7, [sp]
    2a82:	4606      	mov	r6, r0
    2a84:	f8df 9164 	ldr.w	r9, [pc, #356]	; 2bec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7b4>
    2a88:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
    2a8c:	4622      	mov	r2, r4
    2a8e:	4639      	mov	r1, r7
    2a90:	f7ff fef8 	bl	2884 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x44c>
    2a94:	7da8      	ldrb	r0, [r5, #22]
    2a96:	f04f 0801 	mov.w	r8, #1
    2a9a:	f1a9 0420 	sub.w	r4, r9, #32
    2a9e:	b140      	cbz	r0, 2ab2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x67a>
    2aa0:	2801      	cmp	r0, #1
    2aa2:	d020      	beq.n	2ae6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6ae>
    2aa4:	2802      	cmp	r0, #2
    2aa6:	d02f      	beq.n	2b08 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6d0>
    2aa8:	2803      	cmp	r0, #3
    2aaa:	d03b      	beq.n	2b24 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6ec>
    2aac:	f240 21ff 	movw	r1, #767	; 0x2ff
    2ab0:	e057      	b.n	2b62 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x72a>
    2ab2:	79a0      	ldrb	r0, [r4, #6]
    2ab4:	2150      	movs	r1, #80	; 0x50
    2ab6:	f8ad 0004 	strh.w	r0, [sp, #4]
    2aba:	5388      	strh	r0, [r1, r6]
    2abc:	4648      	mov	r0, r9
    2abe:	f7ff faef 	bl	20a0 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    2ac2:	b130      	cbz	r0, 2ad2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x69a>
    2ac4:	2080      	movs	r0, #128	; 0x80
    2ac6:	6a21      	ldr	r1, [r4, #32]
    2ac8:	f7ff fcec 	bl	24a4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    2acc:	f885 8011 	strb.w	r8, [r5, #17]
    2ad0:	e02c      	b.n	2b2c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6f4>
    2ad2:	466a      	mov	r2, sp
    2ad4:	a901      	add	r1, sp, #4
    2ad6:	6b60      	ldr	r0, [r4, #52]	; 0x34
    2ad8:	f00b f91b 	bl	dd12 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x48>
    2adc:	6220      	str	r0, [r4, #32]
    2ade:	b110      	cbz	r0, 2ae6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6ae>
    2ae0:	f895 105b 	ldrb.w	r1, [r5, #91]	; 0x5b
    2ae4:	b111      	cbz	r1, 2aec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6b4>
    2ae6:	4842      	ldr	r0, [pc, #264]	; (2bf0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7b8>)
    2ae8:	6220      	str	r0, [r4, #32]
    2aea:	e01f      	b.n	2b2c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6f4>
    2aec:	f89d 1000 	ldrb.w	r1, [sp]
    2af0:	b921      	cbnz	r1, 2afc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c4>
    2af2:	8007      	strh	r7, [r0, #0]
    2af4:	7087      	strb	r7, [r0, #2]
    2af6:	2101      	movs	r1, #1
    2af8:	f00b fc91 	bl	e41e <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>
    2afc:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    2b00:	6a20      	ldr	r0, [r4, #32]
    2b02:	f00b fc14 	bl	e32e <sym_7YTCAQN5IYKWCY5F36IVGAEEQIOP6X7YL63LRUI>
    2b06:	e011      	b.n	2b2c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6f4>
    2b08:	f8b6 0050 	ldrh.w	r0, [r6, #80]	; 0x50
    2b0c:	f8ad 0004 	strh.w	r0, [sp, #4]
    2b10:	466a      	mov	r2, sp
    2b12:	a901      	add	r1, sp, #4
    2b14:	6b60      	ldr	r0, [r4, #52]	; 0x34
    2b16:	f00b f8fc 	bl	dd12 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x48>
    2b1a:	6220      	str	r0, [r4, #32]
    2b1c:	b930      	cbnz	r0, 2b2c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6f4>
    2b1e:	f240 21e9 	movw	r1, #745	; 0x2e9
    2b22:	e01e      	b.n	2b62 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x72a>
    2b24:	4648      	mov	r0, r9
    2b26:	f7ff fabb 	bl	20a0 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    2b2a:	b1c0      	cbz	r0, 2b5e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x726>
    2b2c:	6a20      	ldr	r0, [r4, #32]
    2b2e:	2308      	movs	r3, #8
    2b30:	7801      	ldrb	r1, [r0, #0]
    2b32:	f001 01f7 	and.w	r1, r1, #247	; 0xf7
    2b36:	7001      	strb	r1, [r0, #0]
    2b38:	7dea      	ldrb	r2, [r5, #23]
    2b3a:	ea03 02c2 	and.w	r2, r3, r2, lsl #3
    2b3e:	4311      	orrs	r1, r2
    2b40:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
    2b44:	7001      	strb	r1, [r0, #0]
    2b46:	7e2a      	ldrb	r2, [r5, #24]
    2b48:	2304      	movs	r3, #4
    2b4a:	ea03 0282 	and.w	r2, r3, r2, lsl #2
    2b4e:	4311      	orrs	r1, r2
    2b50:	f001 01ef 	and.w	r1, r1, #239	; 0xef
    2b54:	7001      	strb	r1, [r0, #0]
    2b56:	43c9      	mvns	r1, r1
    2b58:	0789      	lsls	r1, r1, #30
    2b5a:	d005      	beq.n	2b68 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x730>
    2b5c:	e007      	b.n	2b6e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x736>
    2b5e:	f240 21f2 	movw	r1, #754	; 0x2f2
    2b62:	2027      	movs	r0, #39	; 0x27
    2b64:	f7fe fc4a 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2b68:	78c0      	ldrb	r0, [r0, #3]
    2b6a:	2802      	cmp	r0, #2
    2b6c:	d00f      	beq.n	2b8e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x756>
    2b6e:	6b60      	ldr	r0, [r4, #52]	; 0x34
    2b70:	f00a fd49 	bl	d606 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>
    2b74:	b108      	cbz	r0, 2b7a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x742>
    2b76:	2101      	movs	r1, #1
    2b78:	e00a      	b.n	2b90 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x758>
    2b7a:	6a20      	ldr	r0, [r4, #32]
    2b7c:	7800      	ldrb	r0, [r0, #0]
    2b7e:	43c0      	mvns	r0, r0
    2b80:	0780      	lsls	r0, r0, #30
    2b82:	d004      	beq.n	2b8e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x756>
    2b84:	f7ff fa4a 	bl	201c <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>
    2b88:	f080 0101 	eor.w	r1, r0, #1
    2b8c:	e000      	b.n	2b90 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x758>
    2b8e:	2100      	movs	r1, #0
    2b90:	6a20      	ldr	r0, [r4, #32]
    2b92:	7802      	ldrb	r2, [r0, #0]
    2b94:	ea42 1101 	orr.w	r1, r2, r1, lsl #4
    2b98:	7001      	strb	r1, [r0, #0]
    2b9a:	f895 1022 	ldrb.w	r1, [r5, #34]	; 0x22
    2b9e:	b181      	cbz	r1, 2bc2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x78a>
    2ba0:	7841      	ldrb	r1, [r0, #1]
    2ba2:	b171      	cbz	r1, 2bc2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x78a>
    2ba4:	6b20      	ldr	r0, [r4, #48]	; 0x30
    2ba6:	f005 fbb3 	bl	8310 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    2baa:	4811      	ldr	r0, [pc, #68]	; (2bf0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x7b8>)
    2bac:	3828      	subs	r0, #40	; 0x28
    2bae:	7607      	strb	r7, [r0, #24]
    2bb0:	e9d5 121e 	ldrd	r1, r2, [r5, #120]	; 0x78
    2bb4:	e9c0 1204 	strd	r1, r2, [r0, #16]
    2bb8:	6a21      	ldr	r1, [r4, #32]
    2bba:	6b20      	ldr	r0, [r4, #48]	; 0x30
    2bbc:	f005 f81a 	bl	7bf4 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA>
    2bc0:	e003      	b.n	2bca <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x792>
    2bc2:	f005 fba5 	bl	8310 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    2bc6:	f005 f857 	bl	7c78 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    2bca:	f896 206b 	ldrb.w	r2, [r6, #107]	; 0x6b
    2bce:	2101      	movs	r1, #1
    2bd0:	2000      	movs	r0, #0
    2bd2:	f005 fc25 	bl	8420 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    2bd6:	f884 8003 	strb.w	r8, [r4, #3]
    2bda:	6a21      	ldr	r1, [r4, #32]
    2bdc:	880a      	ldrh	r2, [r1, #0]
    2bde:	8222      	strh	r2, [r4, #16]
    2be0:	7889      	ldrb	r1, [r1, #2]
    2be2:	74a1      	strb	r1, [r4, #18]
    2be4:	f884 8000 	strb.w	r8, [r4]
    2be8:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
    2bec:	2000008c 	.word	0x2000008c
    2bf0:	200009c0 	.word	0x200009c0
    2bf4:	00002859 	.word	0x00002859
    2bf8:	000025a1 	.word	0x000025a1
    2bfc:	00002751 	.word	0x00002751
    2c00:	000029dd 	.word	0x000029dd

00002c04 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>:
    2c04:	4800      	ldr	r0, [pc, #0]	; (2c08 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI+0x4>)
    2c06:	4770      	bx	lr
    2c08:	20001299 	.word	0x20001299

00002c0c <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>:
    2c0c:	4904      	ldr	r1, [pc, #16]	; (2c20 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x14>)
    2c0e:	788a      	ldrb	r2, [r1, #2]
    2c10:	4282      	cmp	r2, r0
    2c12:	d903      	bls.n	2c1c <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x10>
    2c14:	4408      	add	r0, r1
    2c16:	f890 0143 	ldrb.w	r0, [r0, #323]	; 0x143
    2c1a:	4770      	bx	lr
    2c1c:	2000      	movs	r0, #0
    2c1e:	4770      	bx	lr
    2c20:	200010c6 	.word	0x200010c6

00002c24 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>:
    2c24:	4904      	ldr	r1, [pc, #16]	; (2c38 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x14>)
    2c26:	788a      	ldrb	r2, [r1, #2]
    2c28:	4282      	cmp	r2, r0
    2c2a:	d903      	bls.n	2c34 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x10>
    2c2c:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    2c30:	3083      	adds	r0, #131	; 0x83
    2c32:	4770      	bx	lr
    2c34:	2000      	movs	r0, #0
    2c36:	4770      	bx	lr
    2c38:	200010c6 	.word	0x200010c6

00002c3c <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>:
    2c3c:	4a05      	ldr	r2, [pc, #20]	; (2c54 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA+0x18>)
    2c3e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    2c42:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    2c46:	6802      	ldr	r2, [r0, #0]
    2c48:	f8c1 210b 	str.w	r2, [r1, #267]	; 0x10b
    2c4c:	8880      	ldrh	r0, [r0, #4]
    2c4e:	f8a1 010f 	strh.w	r0, [r1, #271]	; 0x10f
    2c52:	4770      	bx	lr
    2c54:	200010c6 	.word	0x200010c6

00002c58 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>:
    2c58:	4904      	ldr	r1, [pc, #16]	; (2c6c <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x14>)
    2c5a:	788a      	ldrb	r2, [r1, #2]
    2c5c:	4282      	cmp	r2, r0
    2c5e:	d903      	bls.n	2c68 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x10>
    2c60:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    2c64:	1cc0      	adds	r0, r0, #3
    2c66:	4770      	bx	lr
    2c68:	2000      	movs	r0, #0
    2c6a:	4770      	bx	lr
    2c6c:	200010c6 	.word	0x200010c6

00002c70 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>:
    2c70:	b510      	push	{r4, lr}
    2c72:	f240 12d3 	movw	r2, #467	; 0x1d3
    2c76:	2100      	movs	r1, #0
    2c78:	4808      	ldr	r0, [pc, #32]	; (2c9c <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x2c>)
    2c7a:	f00e f95d 	bl	10f38 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    2c7e:	2208      	movs	r2, #8
    2c80:	21ff      	movs	r1, #255	; 0xff
    2c82:	4807      	ldr	r0, [pc, #28]	; (2ca0 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    2c84:	f00e f958 	bl	10f38 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    2c88:	4805      	ldr	r0, [pc, #20]	; (2ca0 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    2c8a:	2100      	movs	r1, #0
    2c8c:	1f00      	subs	r0, r0, #4
    2c8e:	7001      	strb	r1, [r0, #0]
    2c90:	7041      	strb	r1, [r0, #1]
    2c92:	f44f 7161 	mov.w	r1, #900	; 0x384
    2c96:	8041      	strh	r1, [r0, #2]
    2c98:	bd10      	pop	{r4, pc}
    2c9a:	0000      	.short	0x0000
    2c9c:	200010c6 	.word	0x200010c6
    2ca0:	20000350 	.word	0x20000350

00002ca4 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>:
    2ca4:	4b0b      	ldr	r3, [pc, #44]	; (2cd4 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x30>)
    2ca6:	b510      	push	{r4, lr}
    2ca8:	789c      	ldrb	r4, [r3, #2]
    2caa:	4284      	cmp	r4, r0
    2cac:	d90f      	bls.n	2cce <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x2a>
    2cae:	4418      	add	r0, r3
    2cb0:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    2cb4:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    2cb8:	f890 3153 	ldrb.w	r3, [r0, #339]	; 0x153
    2cbc:	700b      	strb	r3, [r1, #0]
    2cbe:	f8d0 1154 	ldr.w	r1, [r0, #340]	; 0x154
    2cc2:	6011      	str	r1, [r2, #0]
    2cc4:	f8b0 0158 	ldrh.w	r0, [r0, #344]	; 0x158
    2cc8:	8090      	strh	r0, [r2, #4]
    2cca:	2001      	movs	r0, #1
    2ccc:	bd10      	pop	{r4, pc}
    2cce:	2000      	movs	r0, #0
    2cd0:	bd10      	pop	{r4, pc}
    2cd2:	0000      	.short	0x0000
    2cd4:	200010c6 	.word	0x200010c6

00002cd8 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>:
    2cd8:	4907      	ldr	r1, [pc, #28]	; (2cf8 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x20>)
    2cda:	788a      	ldrb	r2, [r1, #2]
    2cdc:	4282      	cmp	r2, r0
    2cde:	d909      	bls.n	2cf4 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x1c>
    2ce0:	4408      	add	r0, r1
    2ce2:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    2ce6:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    2cea:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    2cee:	f000 0001 	and.w	r0, r0, #1
    2cf2:	4770      	bx	lr
    2cf4:	2000      	movs	r0, #0
    2cf6:	4770      	bx	lr
    2cf8:	200010c6 	.word	0x200010c6

00002cfc <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>:
    2cfc:	4801      	ldr	r0, [pc, #4]	; (2d04 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY+0x8>)
    2cfe:	8840      	ldrh	r0, [r0, #2]
    2d00:	4770      	bx	lr
    2d02:	0000      	.short	0x0000
    2d04:	2000034c 	.word	0x2000034c

00002d08 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>:
    2d08:	4905      	ldr	r1, [pc, #20]	; (2d20 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x18>)
    2d0a:	788a      	ldrb	r2, [r1, #2]
    2d0c:	4282      	cmp	r2, r0
    2d0e:	d903      	bls.n	2d18 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x10>
    2d10:	4408      	add	r0, r1
    2d12:	f890 013b 	ldrb.w	r0, [r0, #315]	; 0x13b
    2d16:	b108      	cbz	r0, 2d1c <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x14>
    2d18:	2000      	movs	r0, #0
    2d1a:	4770      	bx	lr
    2d1c:	2001      	movs	r0, #1
    2d1e:	4770      	bx	lr
    2d20:	200010c6 	.word	0x200010c6

00002d24 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>:
    2d24:	b570      	push	{r4, r5, r6, lr}
    2d26:	460d      	mov	r5, r1
    2d28:	4606      	mov	r6, r0
    2d2a:	f000 f8c1 	bl	2eb0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    2d2e:	4c10      	ldr	r4, [pc, #64]	; (2d70 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x4c>)
    2d30:	2810      	cmp	r0, #16
    2d32:	d007      	beq.n	2d44 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
    2d34:	eb04 01c0 	add.w	r1, r4, r0, lsl #3
    2d38:	f891 115a 	ldrb.w	r1, [r1, #346]	; 0x15a
    2d3c:	07c9      	lsls	r1, r1, #31
    2d3e:	d001      	beq.n	2d44 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
    2d40:	2001      	movs	r0, #1
    2d42:	bd70      	pop	{r4, r5, r6, pc}
    2d44:	7861      	ldrb	r1, [r4, #1]
    2d46:	2908      	cmp	r1, #8
    2d48:	d210      	bcs.n	2d6c <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x48>
    2d4a:	2810      	cmp	r0, #16
    2d4c:	d008      	beq.n	2d60 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x3c>
    2d4e:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    2d52:	2101      	movs	r1, #1
    2d54:	f880 115a 	strb.w	r1, [r0, #346]	; 0x15a
    2d58:	7860      	ldrb	r0, [r4, #1]
    2d5a:	1c40      	adds	r0, r0, #1
    2d5c:	7060      	strb	r0, [r4, #1]
    2d5e:	e7ef      	b.n	2d40 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x1c>
    2d60:	2201      	movs	r2, #1
    2d62:	4629      	mov	r1, r5
    2d64:	4630      	mov	r0, r6
    2d66:	f000 f887 	bl	2e78 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xcc>
    2d6a:	e7f5      	b.n	2d58 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x34>
    2d6c:	2000      	movs	r0, #0
    2d6e:	bd70      	pop	{r4, r5, r6, pc}
    2d70:	200010c6 	.word	0x200010c6

00002d74 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>:
    2d74:	b570      	push	{r4, r5, r6, lr}
    2d76:	4d0b      	ldr	r5, [pc, #44]	; (2da4 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x30>)
    2d78:	7828      	ldrb	r0, [r5, #0]
    2d7a:	1e40      	subs	r0, r0, #1
    2d7c:	b244      	sxtb	r4, r0
    2d7e:	e00a      	b.n	2d96 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x22>
    2d80:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
    2d84:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    2d88:	07c0      	lsls	r0, r0, #31
    2d8a:	d002      	beq.n	2d92 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x1e>
    2d8c:	b2e0      	uxtb	r0, r4
    2d8e:	f000 f8ed 	bl	2f6c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1c0>
    2d92:	1e64      	subs	r4, r4, #1
    2d94:	b264      	sxtb	r4, r4
    2d96:	2c00      	cmp	r4, #0
    2d98:	daf2      	bge.n	2d80 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0xc>
    2d9a:	4903      	ldr	r1, [pc, #12]	; (2da8 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x34>)
    2d9c:	2000      	movs	r0, #0
    2d9e:	7048      	strb	r0, [r1, #1]
    2da0:	bd70      	pop	{r4, r5, r6, pc}
    2da2:	0000      	.short	0x0000
    2da4:	200010c6 	.word	0x200010c6
    2da8:	2000034c 	.word	0x2000034c

00002dac <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>:
    2dac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2db0:	2400      	movs	r4, #0
    2db2:	4625      	mov	r5, r4
    2db4:	4e18      	ldr	r6, [pc, #96]	; (2e18 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x6c>)
    2db6:	e029      	b.n	2e0c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x60>
    2db8:	eb06 07c5 	add.w	r7, r6, r5, lsl #3
    2dbc:	f897 015a 	ldrb.w	r0, [r7, #346]	; 0x15a
    2dc0:	07c0      	lsls	r0, r0, #31
    2dc2:	d021      	beq.n	2e08 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
    2dc4:	4628      	mov	r0, r5
    2dc6:	f000 f843 	bl	2e50 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    2dca:	4603      	mov	r3, r0
    2dcc:	f7ff ff44 	bl	2c58 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    2dd0:	4601      	mov	r1, r0
    2dd2:	2000      	movs	r0, #0
    2dd4:	2b10      	cmp	r3, #16
    2dd6:	d009      	beq.n	2dec <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
    2dd8:	18f2      	adds	r2, r6, r3
    2dda:	f892 c13b 	ldrb.w	ip, [r2, #315]	; 0x13b
    2dde:	f1bc 0f01 	cmp.w	ip, #1
    2de2:	d002      	beq.n	2dea <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x3e>
    2de4:	f892 214b 	ldrb.w	r2, [r2, #331]	; 0x14b
    2de8:	b102      	cbz	r2, 2dec <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
    2dea:	2001      	movs	r0, #1
    2dec:	1e40      	subs	r0, r0, #1
    2dee:	4201      	tst	r1, r0
    2df0:	d10a      	bne.n	2e08 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
    2df2:	480a      	ldr	r0, [pc, #40]	; (2e1c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x70>)
    2df4:	f507 71aa 	add.w	r1, r7, #340	; 0x154
    2df8:	5503      	strb	r3, [r0, r4]
    2dfa:	4620      	mov	r0, r4
    2dfc:	1c64      	adds	r4, r4, #1
    2dfe:	f897 2153 	ldrb.w	r2, [r7, #339]	; 0x153
    2e02:	b2e4      	uxtb	r4, r4
    2e04:	f005 fc32 	bl	866c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>
    2e08:	1c6d      	adds	r5, r5, #1
    2e0a:	b2ed      	uxtb	r5, r5
    2e0c:	7830      	ldrb	r0, [r6, #0]
    2e0e:	42a8      	cmp	r0, r5
    2e10:	d8d2      	bhi.n	2db8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc>
    2e12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2e16:	0000      	.short	0x0000
    2e18:	200010c6 	.word	0x200010c6
    2e1c:	20000350 	.word	0x20000350
    2e20:	4602      	mov	r2, r0
    2e22:	4809      	ldr	r0, [pc, #36]	; (2e48 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x9c>)
    2e24:	b510      	push	{r4, lr}
    2e26:	7800      	ldrb	r0, [r0, #0]
    2e28:	460b      	mov	r3, r1
    2e2a:	b158      	cbz	r0, 2e44 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x98>
    2e2c:	4807      	ldr	r0, [pc, #28]	; (2e4c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
    2e2e:	7881      	ldrb	r1, [r0, #2]
    2e30:	b141      	cbz	r1, 2e44 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x98>
    2e32:	b10b      	cbz	r3, 2e38 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x8c>
    2e34:	1cc0      	adds	r0, r0, #3
    2e36:	e001      	b.n	2e3c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x90>
    2e38:	4804      	ldr	r0, [pc, #16]	; (2e4c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
    2e3a:	3083      	adds	r0, #131	; 0x83
    2e3c:	f004 fde2 	bl	7a04 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>
    2e40:	2001      	movs	r0, #1
    2e42:	bd10      	pop	{r4, pc}
    2e44:	2000      	movs	r0, #0
    2e46:	bd10      	pop	{r4, pc}
    2e48:	2000034c 	.word	0x2000034c
    2e4c:	200010c6 	.word	0x200010c6
    2e50:	4908      	ldr	r1, [pc, #32]	; (2e74 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc8>)
    2e52:	b510      	push	{r4, lr}
    2e54:	4603      	mov	r3, r0
    2e56:	2000      	movs	r0, #0
    2e58:	788a      	ldrb	r2, [r1, #2]
    2e5a:	e006      	b.n	2e6a <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xbe>
    2e5c:	180c      	adds	r4, r1, r0
    2e5e:	f894 4103 	ldrb.w	r4, [r4, #259]	; 0x103
    2e62:	429c      	cmp	r4, r3
    2e64:	d004      	beq.n	2e70 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc4>
    2e66:	1c40      	adds	r0, r0, #1
    2e68:	b2c0      	uxtb	r0, r0
    2e6a:	4282      	cmp	r2, r0
    2e6c:	d8f6      	bhi.n	2e5c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xb0>
    2e6e:	2010      	movs	r0, #16
    2e70:	bd10      	pop	{r4, pc}
    2e72:	0000      	.short	0x0000
    2e74:	200010c6 	.word	0x200010c6
    2e78:	b570      	push	{r4, r5, r6, lr}
    2e7a:	4b0c      	ldr	r3, [pc, #48]	; (2eac <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x100>)
    2e7c:	4604      	mov	r4, r0
    2e7e:	7818      	ldrb	r0, [r3, #0]
    2e80:	1c45      	adds	r5, r0, #1
    2e82:	701d      	strb	r5, [r3, #0]
    2e84:	2810      	cmp	r0, #16
    2e86:	d303      	bcc.n	2e90 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xe4>
    2e88:	2146      	movs	r1, #70	; 0x46
    2e8a:	2028      	movs	r0, #40	; 0x28
    2e8c:	f7fe fab6 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2e90:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    2e94:	680d      	ldr	r5, [r1, #0]
    2e96:	f8c3 5154 	str.w	r5, [r3, #340]	; 0x154
    2e9a:	8889      	ldrh	r1, [r1, #4]
    2e9c:	f8a3 1158 	strh.w	r1, [r3, #344]	; 0x158
    2ea0:	f883 4153 	strb.w	r4, [r3, #339]	; 0x153
    2ea4:	f883 215a 	strb.w	r2, [r3, #346]	; 0x15a
    2ea8:	bd70      	pop	{r4, r5, r6, pc}
    2eaa:	0000      	.short	0x0000
    2eac:	200010c6 	.word	0x200010c6
    2eb0:	b5f0      	push	{r4, r5, r6, r7, lr}
    2eb2:	4c1a      	ldr	r4, [pc, #104]	; (2f1c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x170>)
    2eb4:	4603      	mov	r3, r0
    2eb6:	2000      	movs	r0, #0
    2eb8:	7825      	ldrb	r5, [r4, #0]
    2eba:	e02a      	b.n	2f12 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x166>
    2ebc:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
    2ec0:	780f      	ldrb	r7, [r1, #0]
    2ec2:	f892 c154 	ldrb.w	ip, [r2, #340]	; 0x154
    2ec6:	f892 6153 	ldrb.w	r6, [r2, #339]	; 0x153
    2eca:	ea87 070c 	eor.w	r7, r7, ip
    2ece:	405e      	eors	r6, r3
    2ed0:	443e      	add	r6, r7
    2ed2:	784f      	ldrb	r7, [r1, #1]
    2ed4:	f892 c155 	ldrb.w	ip, [r2, #341]	; 0x155
    2ed8:	ea87 070c 	eor.w	r7, r7, ip
    2edc:	443e      	add	r6, r7
    2ede:	788f      	ldrb	r7, [r1, #2]
    2ee0:	f892 c156 	ldrb.w	ip, [r2, #342]	; 0x156
    2ee4:	ea87 070c 	eor.w	r7, r7, ip
    2ee8:	443e      	add	r6, r7
    2eea:	78cf      	ldrb	r7, [r1, #3]
    2eec:	f892 c157 	ldrb.w	ip, [r2, #343]	; 0x157
    2ef0:	ea87 070c 	eor.w	r7, r7, ip
    2ef4:	443e      	add	r6, r7
    2ef6:	790f      	ldrb	r7, [r1, #4]
    2ef8:	f892 c158 	ldrb.w	ip, [r2, #344]	; 0x158
    2efc:	f892 2159 	ldrb.w	r2, [r2, #345]	; 0x159
    2f00:	ea87 070c 	eor.w	r7, r7, ip
    2f04:	443e      	add	r6, r7
    2f06:	794f      	ldrb	r7, [r1, #5]
    2f08:	4057      	eors	r7, r2
    2f0a:	42f7      	cmn	r7, r6
    2f0c:	d004      	beq.n	2f18 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x16c>
    2f0e:	1c40      	adds	r0, r0, #1
    2f10:	b2c0      	uxtb	r0, r0
    2f12:	4285      	cmp	r5, r0
    2f14:	d8d2      	bhi.n	2ebc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x110>
    2f16:	2010      	movs	r0, #16
    2f18:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2f1a:	0000      	.short	0x0000
    2f1c:	200010c6 	.word	0x200010c6
    2f20:	b570      	push	{r4, r5, r6, lr}
    2f22:	4605      	mov	r5, r0
    2f24:	f7ff ff94 	bl	2e50 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    2f28:	2810      	cmp	r0, #16
    2f2a:	d11c      	bne.n	2f66 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1ba>
    2f2c:	4c0e      	ldr	r4, [pc, #56]	; (2f68 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1bc>)
    2f2e:	7820      	ldrb	r0, [r4, #0]
    2f30:	1e40      	subs	r0, r0, #1
    2f32:	b2c0      	uxtb	r0, r0
    2f34:	7020      	strb	r0, [r4, #0]
    2f36:	42a8      	cmp	r0, r5
    2f38:	d015      	beq.n	2f66 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1ba>
    2f3a:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
    2f3e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
    2f42:	f502 7080 	add.w	r0, r2, #256	; 0x100
    2f46:	f8d2 2153 	ldr.w	r2, [r2, #339]	; 0x153
    2f4a:	f8c1 2153 	str.w	r2, [r1, #339]	; 0x153
    2f4e:	f8d0 0057 	ldr.w	r0, [r0, #87]	; 0x57
    2f52:	f8c1 0157 	str.w	r0, [r1, #343]	; 0x157
    2f56:	7820      	ldrb	r0, [r4, #0]
    2f58:	f7ff ff7a 	bl	2e50 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    2f5c:	2810      	cmp	r0, #16
    2f5e:	d002      	beq.n	2f66 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1ba>
    2f60:	4420      	add	r0, r4
    2f62:	f880 5103 	strb.w	r5, [r0, #259]	; 0x103
    2f66:	bd70      	pop	{r4, r5, r6, pc}
    2f68:	200010c6 	.word	0x200010c6
    2f6c:	4905      	ldr	r1, [pc, #20]	; (2f84 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1d8>)
    2f6e:	784a      	ldrb	r2, [r1, #1]
    2f70:	1e52      	subs	r2, r2, #1
    2f72:	704a      	strb	r2, [r1, #1]
    2f74:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    2f78:	2200      	movs	r2, #0
    2f7a:	f881 215a 	strb.w	r2, [r1, #346]	; 0x15a
    2f7e:	f7ff bfcf 	b.w	2f20 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x174>
    2f82:	0000      	.short	0x0000
    2f84:	200010c6 	.word	0x200010c6

00002f88 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>:
    2f88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2f8c:	4604      	mov	r4, r0
    2f8e:	f100 0580 	add.w	r5, r0, #128	; 0x80
    2f92:	f04f 0901 	mov.w	r9, #1
    2f96:	b171      	cbz	r1, 2fb6 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x2e>
    2f98:	f104 07a6 	add.w	r7, r4, #166	; 0xa6
    2f9c:	1e7e      	subs	r6, r7, #1
    2f9e:	2901      	cmp	r1, #1
    2fa0:	d025      	beq.n	2fee <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x66>
    2fa2:	2902      	cmp	r1, #2
    2fa4:	d04a      	beq.n	303c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xb4>
    2fa6:	2903      	cmp	r1, #3
    2fa8:	d11f      	bne.n	2fea <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x62>
    2faa:	4639      	mov	r1, r7
    2fac:	4630      	mov	r0, r6
    2fae:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2fb2:	f00b b8e1 	b.w	e178 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    2fb6:	f44f 723e 	mov.w	r2, #760	; 0x2f8
    2fba:	2100      	movs	r1, #0
    2fbc:	f00d ffbc 	bl	10f38 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    2fc0:	f885 9025 	strb.w	r9, [r5, #37]	; 0x25
    2fc4:	4822      	ldr	r0, [pc, #136]	; (3050 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xc8>)
    2fc6:	66e8      	str	r0, [r5, #108]	; 0x6c
    2fc8:	2007      	movs	r0, #7
    2fca:	6728      	str	r0, [r5, #112]	; 0x70
    2fcc:	f814 0fec 	ldrb.w	r0, [r4, #236]!
    2fd0:	f020 0004 	bic.w	r0, r0, #4
    2fd4:	7020      	strb	r0, [r4, #0]
    2fd6:	20fe      	movs	r0, #254	; 0xfe
    2fd8:	f885 00a6 	strb.w	r0, [r5, #166]	; 0xa6
    2fdc:	207f      	movs	r0, #127	; 0x7f
    2fde:	7668      	strb	r0, [r5, #25]
    2fe0:	481c      	ldr	r0, [pc, #112]	; (3054 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xcc>)
    2fe2:	60a8      	str	r0, [r5, #8]
    2fe4:	2000      	movs	r0, #0
    2fe6:	e9c5 0000 	strd	r0, r0, [r5]
    2fea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2fee:	f04f 0800 	mov.w	r8, #0
    2ff2:	f8a4 8236 	strh.w	r8, [r4, #566]	; 0x236
    2ff6:	f884 822b 	strb.w	r8, [r4, #555]	; 0x22b
    2ffa:	6921      	ldr	r1, [r4, #16]
    2ffc:	4816      	ldr	r0, [pc, #88]	; (3058 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xd0>)
    2ffe:	460a      	mov	r2, r1
    3000:	4408      	add	r0, r1
    3002:	fbb0 f0f1 	udiv	r0, r0, r1
    3006:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
    300a:	f640 30b8 	movw	r0, #3000	; 0xbb8
    300e:	f8a4 00c8 	strh.w	r0, [r4, #200]	; 0xc8
    3012:	8b63      	ldrh	r3, [r4, #26]
    3014:	4628      	mov	r0, r5
    3016:	f000 f821 	bl	305c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xd4>
    301a:	4639      	mov	r1, r7
    301c:	4630      	mov	r0, r6
    301e:	f00b f8ab 	bl	e178 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    3022:	f00d fea0 	bl	10d66 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    3026:	b118      	cbz	r0, 3030 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xa8>
    3028:	6960      	ldr	r0, [r4, #20]
    302a:	f000 fb5b 	bl	36e4 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>
    302e:	b110      	cbz	r0, 3036 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xae>
    3030:	f884 821a 	strb.w	r8, [r4, #538]	; 0x21a
    3034:	e7d9      	b.n	2fea <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x62>
    3036:	f884 921a 	strb.w	r9, [r4, #538]	; 0x21a
    303a:	e7d6      	b.n	2fea <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x62>
    303c:	6901      	ldr	r1, [r0, #16]
    303e:	f8b4 32da 	ldrh.w	r3, [r4, #730]	; 0x2da
    3042:	f8d4 22d4 	ldr.w	r2, [r4, #724]	; 0x2d4
    3046:	4628      	mov	r0, r5
    3048:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    304c:	f000 b806 	b.w	305c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xd4>
    3050:	3404492f 	.word	0x3404492f
    3054:	fffce000 	.word	0xfffce000
    3058:	01c9c37f 	.word	0x01c9c37f
    305c:	b510      	push	{r4, lr}
    305e:	2400      	movs	r4, #0
    3060:	f8a0 404c 	strh.w	r4, [r0, #76]	; 0x4c
    3064:	f830 4f50 	ldrh.w	r4, [r0, #80]!
    3068:	434c      	muls	r4, r1
    306a:	fbb4 f4f2 	udiv	r4, r4, r2
    306e:	f820 4910 	strh.w	r4, [r0], #-16
    3072:	f240 2471 	movw	r4, #625	; 0x271
    3076:	4363      	muls	r3, r4
    3078:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    307c:	1e5b      	subs	r3, r3, #1
    307e:	fbb3 f3f2 	udiv	r3, r3, r2
    3082:	81c3      	strh	r3, [r0, #14]
    3084:	4b09      	ldr	r3, [pc, #36]	; (30ac <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x124>)
    3086:	fbb3 f3f2 	udiv	r3, r3, r2
    308a:	1c5b      	adds	r3, r3, #1
    308c:	8283      	strh	r3, [r0, #20]
    308e:	8903      	ldrh	r3, [r0, #8]
    3090:	4363      	muls	r3, r4
    3092:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    3096:	1e5b      	subs	r3, r3, #1
    3098:	fbb3 f3f2 	udiv	r3, r3, r2
    309c:	6043      	str	r3, [r0, #4]
    309e:	6803      	ldr	r3, [r0, #0]
    30a0:	434b      	muls	r3, r1
    30a2:	fbb3 f1f2 	udiv	r1, r3, r2
    30a6:	6001      	str	r1, [r0, #0]
    30a8:	bd10      	pop	{r4, pc}
    30aa:	0000      	.short	0x0000
    30ac:	02625a00 	.word	0x02625a00

000030b0 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>:
    30b0:	4902      	ldr	r1, [pc, #8]	; (30bc <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ+0xc>)
    30b2:	f991 1000 	ldrsb.w	r1, [r1]
    30b6:	f00b b810 	b.w	e0da <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x1e>
    30ba:	0000      	.short	0x0000
    30bc:	2000036c 	.word	0x2000036c

000030c0 <sym_XECBDXJ42XLR262DOTTQGYR47BZ5WSNNCRAJKPI>:
    30c0:	4902      	ldr	r1, [pc, #8]	; (30cc <sym_XECBDXJ42XLR262DOTTQGYR47BZ5WSNNCRAJKPI+0xc>)
    30c2:	7809      	ldrb	r1, [r1, #0]
    30c4:	4249      	negs	r1, r1
    30c6:	b249      	sxtb	r1, r1
    30c8:	f00b b807 	b.w	e0da <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x1e>
    30cc:	2000036c 	.word	0x2000036c

000030d0 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I>:
    30d0:	b508      	push	{r3, lr}
    30d2:	207f      	movs	r0, #127	; 0x7f
    30d4:	f88d 0000 	strb.w	r0, [sp]
    30d8:	4668      	mov	r0, sp
    30da:	f005 f9c7 	bl	846c <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    30de:	b140      	cbz	r0, 30f2 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0x22>
    30e0:	4805      	ldr	r0, [pc, #20]	; (30f8 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0x28>)
    30e2:	7840      	ldrb	r0, [r0, #1]
    30e4:	4240      	negs	r0, r0
    30e6:	b241      	sxtb	r1, r0
    30e8:	f99d 0000 	ldrsb.w	r0, [sp]
    30ec:	f00a fff5 	bl	e0da <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x1e>
    30f0:	bd08      	pop	{r3, pc}
    30f2:	f99d 0000 	ldrsb.w	r0, [sp]
    30f6:	bd08      	pop	{r3, pc}
    30f8:	2000036c 	.word	0x2000036c
    30fc:	b570      	push	{r4, r5, r6, lr}
    30fe:	f890 2032 	ldrb.w	r2, [r0, #50]	; 0x32
    3102:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    3106:	2401      	movs	r4, #1
    3108:	fb03 2101 	mla	r1, r3, r1, r2
    310c:	2225      	movs	r2, #37	; 0x25
    310e:	fbb1 f3f2 	udiv	r3, r1, r2
    3112:	fb02 1113 	mls	r1, r2, r3, r1
    3116:	eb00 02d1 	add.w	r2, r0, r1, lsr #3
    311a:	f880 1032 	strb.w	r1, [r0, #50]	; 0x32
    311e:	f001 0307 	and.w	r3, r1, #7
    3122:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
    3126:	fa04 f303 	lsl.w	r3, r4, r3
    312a:	421a      	tst	r2, r3
    312c:	d004      	beq.n	3138 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0x68>
    312e:	bf00      	nop
    3130:	f880 1033 	strb.w	r1, [r0, #51]	; 0x33
    3134:	2000      	movs	r0, #0
    3136:	bd70      	pop	{r4, r5, r6, pc}
    3138:	f890 2030 	ldrb.w	r2, [r0, #48]	; 0x30
    313c:	fbb1 f3f2 	udiv	r3, r1, r2
    3140:	fb02 1113 	mls	r1, r2, r3, r1
    3144:	1c49      	adds	r1, r1, #1
    3146:	b2c9      	uxtb	r1, r1
    3148:	2300      	movs	r3, #0
    314a:	18c5      	adds	r5, r0, r3
    314c:	f895 202b 	ldrb.w	r2, [r5, #43]	; 0x2b
    3150:	428a      	cmp	r2, r1
    3152:	d312      	bcc.n	317a <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0xaa>
    3154:	f895 5026 	ldrb.w	r5, [r5, #38]	; 0x26
    3158:	2200      	movs	r2, #0
    315a:	bf00      	nop
    315c:	fa04 f602 	lsl.w	r6, r4, r2
    3160:	4235      	tst	r5, r6
    3162:	d001      	beq.n	3168 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0x98>
    3164:	1e49      	subs	r1, r1, #1
    3166:	b2c9      	uxtb	r1, r1
    3168:	b121      	cbz	r1, 3174 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0xa4>
    316a:	1c52      	adds	r2, r2, #1
    316c:	b2d2      	uxtb	r2, r2
    316e:	2a08      	cmp	r2, #8
    3170:	d3f4      	bcc.n	315c <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0x8c>
    3172:	e004      	b.n	317e <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0xae>
    3174:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
    3178:	e7da      	b.n	3130 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0x60>
    317a:	1a89      	subs	r1, r1, r2
    317c:	b2c9      	uxtb	r1, r1
    317e:	1c5b      	adds	r3, r3, #1
    3180:	b2db      	uxtb	r3, r3
    3182:	2b05      	cmp	r3, #5
    3184:	d3e1      	bcc.n	314a <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0x7a>
    3186:	201f      	movs	r0, #31
    3188:	bd70      	pop	{r4, r5, r6, pc}
    318a:	0000      	movs	r0, r0
    318c:	b570      	push	{r4, r5, r6, lr}
    318e:	1c49      	adds	r1, r1, #1
    3190:	2300      	movs	r3, #0
    3192:	b2c9      	uxtb	r1, r1
    3194:	2401      	movs	r4, #1
    3196:	18c5      	adds	r5, r0, r3
    3198:	79aa      	ldrb	r2, [r5, #6]
    319a:	428a      	cmp	r2, r1
    319c:	d312      	bcc.n	31c4 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0xf4>
    319e:	f895 5001 	ldrb.w	r5, [r5, #1]
    31a2:	2200      	movs	r2, #0
    31a4:	fa04 f602 	lsl.w	r6, r4, r2
    31a8:	4235      	tst	r5, r6
    31aa:	d001      	beq.n	31b0 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0xe0>
    31ac:	1e49      	subs	r1, r1, #1
    31ae:	b2c9      	uxtb	r1, r1
    31b0:	b121      	cbz	r1, 31bc <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0xec>
    31b2:	1c52      	adds	r2, r2, #1
    31b4:	b2d2      	uxtb	r2, r2
    31b6:	2a08      	cmp	r2, #8
    31b8:	d3f4      	bcc.n	31a4 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0xd4>
    31ba:	e005      	b.n	31c8 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0xf8>
    31bc:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
    31c0:	b2c0      	uxtb	r0, r0
    31c2:	bd70      	pop	{r4, r5, r6, pc}
    31c4:	1a89      	subs	r1, r1, r2
    31c6:	b2c9      	uxtb	r1, r1
    31c8:	1c5b      	adds	r3, r3, #1
    31ca:	b2db      	uxtb	r3, r3
    31cc:	2b05      	cmp	r3, #5
    31ce:	d3e2      	bcc.n	3196 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0xc6>
    31d0:	219d      	movs	r1, #157	; 0x9d
    31d2:	2046      	movs	r0, #70	; 0x46
    31d4:	f7fe f912 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

000031d8 <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA>:
    31d8:	7841      	ldrb	r1, [r0, #1]
    31da:	b141      	cbz	r1, 31ee <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA+0x16>
    31dc:	78c0      	ldrb	r0, [r0, #3]
    31de:	282b      	cmp	r0, #43	; 0x2b
    31e0:	d203      	bcs.n	31ea <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA+0x12>
    31e2:	4a04      	ldr	r2, [pc, #16]	; (31f4 <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA+0x1c>)
    31e4:	5c10      	ldrb	r0, [r2, r0]
    31e6:	4288      	cmp	r0, r1
    31e8:	d101      	bne.n	31ee <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA+0x16>
    31ea:	2001      	movs	r0, #1
    31ec:	4770      	bx	lr
    31ee:	2000      	movs	r0, #0
    31f0:	4770      	bx	lr
    31f2:	0000      	.short	0x0000
    31f4:	00011082 	.word	0x00011082

000031f8 <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ>:
    31f8:	b510      	push	{r4, lr}
    31fa:	2201      	movs	r2, #1
    31fc:	70c1      	strb	r1, [r0, #3]
    31fe:	292b      	cmp	r1, #43	; 0x2b
    3200:	d202      	bcs.n	3208 <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ+0x10>
    3202:	4a06      	ldr	r2, [pc, #24]	; (321c <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ+0x24>)
    3204:	5c52      	ldrb	r2, [r2, r1]
    3206:	e006      	b.n	3216 <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ+0x1e>
    3208:	29ff      	cmp	r1, #255	; 0xff
    320a:	d004      	beq.n	3216 <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ+0x1e>
    320c:	f240 4175 	movw	r1, #1141	; 0x475
    3210:	202a      	movs	r0, #42	; 0x2a
    3212:	f7fe f8f3 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3216:	7042      	strb	r2, [r0, #1]
    3218:	bd10      	pop	{r4, pc}
    321a:	0000      	.short	0x0000
    321c:	00011082 	.word	0x00011082

00003220 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA>:
    3220:	4904      	ldr	r1, [pc, #16]	; (3234 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA+0x14>)
    3222:	7c89      	ldrb	r1, [r1, #18]
    3224:	0749      	lsls	r1, r1, #29
    3226:	d400      	bmi.n	322a <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA+0xa>
    3228:	b108      	cbz	r0, 322e <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA+0xe>
    322a:	2000      	movs	r0, #0
    322c:	4770      	bx	lr
    322e:	2001      	movs	r0, #1
    3230:	4770      	bx	lr
    3232:	0000      	.short	0x0000
    3234:	20000b90 	.word	0x20000b90

00003238 <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I>:
    3238:	4803      	ldr	r0, [pc, #12]	; (3248 <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I+0x10>)
    323a:	7c80      	ldrb	r0, [r0, #18]
    323c:	0780      	lsls	r0, r0, #30
    323e:	d401      	bmi.n	3244 <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I+0xc>
    3240:	2001      	movs	r0, #1
    3242:	4770      	bx	lr
    3244:	2000      	movs	r0, #0
    3246:	4770      	bx	lr
    3248:	20000b90 	.word	0x20000b90

0000324c <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY>:
    324c:	4803      	ldr	r0, [pc, #12]	; (325c <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x10>)
    324e:	7c80      	ldrb	r0, [r0, #18]
    3250:	07c0      	lsls	r0, r0, #31
    3252:	d001      	beq.n	3258 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xc>
    3254:	2000      	movs	r0, #0
    3256:	4770      	bx	lr
    3258:	2001      	movs	r0, #1
    325a:	4770      	bx	lr
    325c:	20000b90 	.word	0x20000b90
    3260:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
    3264:	4688      	mov	r8, r1
    3266:	4699      	mov	r9, r3
    3268:	4615      	mov	r5, r2
    326a:	4604      	mov	r4, r0
    326c:	4669      	mov	r1, sp
    326e:	f00a fd93 	bl	dd98 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    3272:	bbe0      	cbnz	r0, 32ee <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xa2>
    3274:	9e01      	ldr	r6, [sp, #4]
    3276:	2700      	movs	r7, #0
    3278:	3680      	adds	r6, #128	; 0x80
    327a:	b17d      	cbz	r5, 329c <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x50>
    327c:	4620      	mov	r0, r4
    327e:	f7fe fccf 	bl	1c20 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    3282:	0004      	movs	r4, r0
    3284:	d00e      	beq.n	32a4 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x58>
    3286:	4629      	mov	r1, r5
    3288:	f00a f98f 	bl	d5aa <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>
    328c:	b118      	cbz	r0, 3296 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x4a>
    328e:	491b      	ldr	r1, [pc, #108]	; (32fc <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xb0>)
    3290:	8849      	ldrh	r1, [r1, #2]
    3292:	42a9      	cmp	r1, r5
    3294:	d208      	bcs.n	32a8 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x5c>
    3296:	2000      	movs	r0, #0
    3298:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
    329c:	2001      	movs	r0, #1
    329e:	f886 0024 	strb.w	r0, [r6, #36]	; 0x24
    32a2:	e024      	b.n	32ee <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xa2>
    32a4:	2167      	movs	r1, #103	; 0x67
    32a6:	e025      	b.n	32f4 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xa8>
    32a8:	4601      	mov	r1, r0
    32aa:	aa02      	add	r2, sp, #8
    32ac:	4620      	mov	r0, r4
    32ae:	f00a f975 	bl	d59c <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    32b2:	9802      	ldr	r0, [sp, #8]
    32b4:	8007      	strh	r7, [r0, #0]
    32b6:	7087      	strb	r7, [r0, #2]
    32b8:	f896 1024 	ldrb.w	r1, [r6, #36]	; 0x24
    32bc:	b109      	cbz	r1, 32c2 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x76>
    32be:	f04f 0802 	mov.w	r8, #2
    32c2:	4641      	mov	r1, r8
    32c4:	f00b f8ab 	bl	e41e <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>
    32c8:	9802      	ldr	r0, [sp, #8]
    32ca:	462a      	mov	r2, r5
    32cc:	4649      	mov	r1, r9
    32ce:	1cc0      	adds	r0, r0, #3
    32d0:	f00d fdb8 	bl	10e44 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    32d4:	4620      	mov	r0, r4
    32d6:	4629      	mov	r1, r5
    32d8:	f00a f91e 	bl	d518 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>
    32dc:	b148      	cbz	r0, 32f2 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xa6>
    32de:	4668      	mov	r0, sp
    32e0:	f00b f8f8 	bl	e4d4 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
    32e4:	9801      	ldr	r0, [sp, #4]
    32e6:	f8a0 7222 	strh.w	r7, [r0, #546]	; 0x222
    32ea:	f886 7024 	strb.w	r7, [r6, #36]	; 0x24
    32ee:	2001      	movs	r0, #1
    32f0:	e7d2      	b.n	3298 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x4c>
    32f2:	217c      	movs	r1, #124	; 0x7c
    32f4:	202b      	movs	r0, #43	; 0x2b
    32f6:	f7fe f881 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    32fa:	0000      	.short	0x0000
    32fc:	20000b90 	.word	0x20000b90

00003300 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q>:
    3300:	4809      	ldr	r0, [pc, #36]	; (3328 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0x28>)
    3302:	b082      	sub	sp, #8
    3304:	7a00      	ldrb	r0, [r0, #8]
    3306:	f88d 0000 	strb.w	r0, [sp]
    330a:	9800      	ldr	r0, [sp, #0]
    330c:	9000      	str	r0, [sp, #0]
    330e:	f89d 0000 	ldrb.w	r0, [sp]
    3312:	2800      	cmp	r0, #0
    3314:	d105      	bne.n	3322 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0x22>
    3316:	2202      	movs	r2, #2
    3318:	4904      	ldr	r1, [pc, #16]	; (332c <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0x2c>)
    331a:	4803      	ldr	r0, [pc, #12]	; (3328 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0x28>)
    331c:	b002      	add	sp, #8
    331e:	f00b b8fc 	b.w	e51a <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    3322:	b002      	add	sp, #8
    3324:	4770      	bx	lr
    3326:	0000      	.short	0x0000
    3328:	20000ba8 	.word	0x20000ba8
    332c:	0000e561 	.word	0x0000e561

00003330 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>:
    3330:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3334:	f8df 8198 	ldr.w	r8, [pc, #408]	; 34d0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1a0>
    3338:	f8df a198 	ldr.w	sl, [pc, #408]	; 34d4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1a4>
    333c:	4683      	mov	fp, r0
    333e:	f04f 0901 	mov.w	r9, #1
    3342:	2600      	movs	r6, #0
    3344:	f8d8 0004 	ldr.w	r0, [r8, #4]
    3348:	7a00      	ldrb	r0, [r0, #8]
    334a:	f88d 0000 	strb.w	r0, [sp]
    334e:	9800      	ldr	r0, [sp, #0]
    3350:	9000      	str	r0, [sp, #0]
    3352:	f89d 1000 	ldrb.w	r1, [sp]
    3356:	292a      	cmp	r1, #42	; 0x2a
    3358:	d106      	bne.n	3368 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x38>
    335a:	f89a 1013 	ldrb.w	r1, [sl, #19]
    335e:	b119      	cbz	r1, 3368 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x38>
    3360:	f8ba 0014 	ldrh.w	r0, [sl, #20]
    3364:	2800      	cmp	r0, #0
    3366:	d07d      	beq.n	3464 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x134>
    3368:	2700      	movs	r7, #0
    336a:	f88d 6000 	strb.w	r6, [sp]
    336e:	4668      	mov	r0, sp
    3370:	f000 f912 	bl	3598 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xb0>
    3374:	f89d 1000 	ldrb.w	r1, [sp]
    3378:	2900      	cmp	r1, #0
    337a:	d1f8      	bne.n	336e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x3e>
    337c:	2800      	cmp	r0, #0
    337e:	d071      	beq.n	3464 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x134>
    3380:	4604      	mov	r4, r0
    3382:	7a00      	ldrb	r0, [r0, #8]
    3384:	f88d 0000 	strb.w	r0, [sp]
    3388:	9800      	ldr	r0, [sp, #0]
    338a:	9000      	str	r0, [sp, #0]
    338c:	f89d 5000 	ldrb.w	r5, [sp]
    3390:	1ea8      	subs	r0, r5, #2
    3392:	2830      	cmp	r0, #48	; 0x30
    3394:	d267      	bcs.n	3466 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x136>
    3396:	e8df f000 	tbb	[pc, r0]
    339a:	2718      	.short	0x2718
    339c:	85852185 	.word	0x85852185
    33a0:	6f696f27 	.word	0x6f696f27
    33a4:	6f2d6f6f 	.word	0x6f2d6f6f
    33a8:	85852185 	.word	0x85852185
    33ac:	85216f6f 	.word	0x85216f6f
    33b0:	6f858585 	.word	0x6f858585
    33b4:	6f858545 	.word	0x6f858545
    33b8:	856f6f21 	.word	0x856f6f21
    33bc:	8585216f 	.word	0x8585216f
    33c0:	8575554f 	.word	0x8575554f
    33c4:	85858585 	.word	0x85858585
    33c8:	4f85      	.short	0x4f85
    33ca:	6862      	ldr	r2, [r4, #4]
    33cc:	b912      	cbnz	r2, 33d4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa4>
    33ce:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
    33d2:	e064      	b.n	349e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x16e>
    33d4:	4659      	mov	r1, fp
    33d6:	4620      	mov	r0, r4
    33d8:	4790      	blx	r2
    33da:	e03c      	b.n	3456 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x126>
    33dc:	6862      	ldr	r2, [r4, #4]
    33de:	2a00      	cmp	r2, #0
    33e0:	d1f8      	bne.n	33d4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa4>
    33e2:	f240 11bb 	movw	r1, #443	; 0x1bb
    33e6:	e05a      	b.n	349e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x16e>
    33e8:	6862      	ldr	r2, [r4, #4]
    33ea:	2a00      	cmp	r2, #0
    33ec:	d1f2      	bne.n	33d4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa4>
    33ee:	f240 214b 	movw	r1, #587	; 0x24b
    33f2:	e054      	b.n	349e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x16e>
    33f4:	6860      	ldr	r0, [r4, #4]
    33f6:	465d      	mov	r5, fp
    33f8:	b180      	cbz	r0, 341c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xec>
    33fa:	8804      	ldrh	r4, [r0, #0]
    33fc:	4620      	mov	r0, r4
    33fe:	f7fe fc0f 	bl	1c20 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    3402:	b168      	cbz	r0, 3420 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xf0>
    3404:	706e      	strb	r6, [r5, #1]
    3406:	220d      	movs	r2, #13
    3408:	702a      	strb	r2, [r5, #0]
    340a:	80ec      	strh	r4, [r5, #6]
    340c:	f8a5 9008 	strh.w	r9, [r5, #8]
    3410:	4631      	mov	r1, r6
    3412:	f885 9004 	strb.w	r9, [r5, #4]
    3416:	f00a f95f 	bl	d6d8 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    341a:	e057      	b.n	34cc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x19c>
    341c:	21ce      	movs	r1, #206	; 0xce
    341e:	e03e      	b.n	349e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x16e>
    3420:	21ae      	movs	r1, #174	; 0xae
    3422:	e03c      	b.n	349e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x16e>
    3424:	6862      	ldr	r2, [r4, #4]
    3426:	b122      	cbz	r2, 3432 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x102>
    3428:	4659      	mov	r1, fp
    342a:	4620      	mov	r0, r4
    342c:	4790      	blx	r2
    342e:	2701      	movs	r7, #1
    3430:	e011      	b.n	3456 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x126>
    3432:	f240 2163 	movw	r1, #611	; 0x263
    3436:	e032      	b.n	349e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x16e>
    3438:	6862      	ldr	r2, [r4, #4]
    343a:	2a00      	cmp	r2, #0
    343c:	d1ca      	bne.n	33d4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa4>
    343e:	f240 216f 	movw	r1, #623	; 0x26f
    3442:	e02c      	b.n	349e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x16e>
    3444:	f88b 6001 	strb.w	r6, [fp, #1]
    3448:	2116      	movs	r1, #22
    344a:	f88b 1000 	strb.w	r1, [fp]
    344e:	f8d4 1009 	ldr.w	r1, [r4, #9]
    3452:	f8cb 1004 	str.w	r1, [fp, #4]
    3456:	7226      	strb	r6, [r4, #8]
    3458:	2d21      	cmp	r5, #33	; 0x21
    345a:	d026      	beq.n	34aa <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x17a>
    345c:	2d14      	cmp	r5, #20
    345e:	d027      	beq.n	34b0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x180>
    3460:	2d22      	cmp	r5, #34	; 0x22
    3462:	e001      	b.n	3468 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x138>
    3464:	e017      	b.n	3496 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x166>
    3466:	e01d      	b.n	34a4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x174>
    3468:	d029      	beq.n	34be <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x18e>
    346a:	e02d      	b.n	34c8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x198>
    346c:	6862      	ldr	r2, [r4, #4]
    346e:	2a00      	cmp	r2, #0
    3470:	d1b0      	bne.n	33d4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa4>
    3472:	f240 2181 	movw	r1, #641	; 0x281
    3476:	e012      	b.n	349e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x16e>
    3478:	6862      	ldr	r2, [r4, #4]
    347a:	2a00      	cmp	r2, #0
    347c:	d1aa      	bne.n	33d4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa4>
    347e:	f240 2196 	movw	r1, #662	; 0x296
    3482:	e00c      	b.n	349e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x16e>
    3484:	4814      	ldr	r0, [pc, #80]	; (34d8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1a8>)
    3486:	6802      	ldr	r2, [r0, #0]
    3488:	b122      	cbz	r2, 3494 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x164>
    348a:	6860      	ldr	r0, [r4, #4]
    348c:	b128      	cbz	r0, 349a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x16a>
    348e:	8800      	ldrh	r0, [r0, #0]
    3490:	4659      	mov	r1, fp
    3492:	4790      	blx	r2
    3494:	2002      	movs	r0, #2
    3496:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    349a:	f240 219f 	movw	r1, #671	; 0x29f
    349e:	2010      	movs	r0, #16
    34a0:	f7fd ffac 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    34a4:	f240 21bd 	movw	r1, #701	; 0x2bd
    34a8:	e7f9      	b.n	349e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x16e>
    34aa:	f7ff fec5 	bl	3238 <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I>
    34ae:	e008      	b.n	34c2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x192>
    34b0:	f89b 000e 	ldrb.w	r0, [fp, #14]
    34b4:	f000 0001 	and.w	r0, r0, #1
    34b8:	f7ff feb2 	bl	3220 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA>
    34bc:	e001      	b.n	34c2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x192>
    34be:	f7ff fec5 	bl	324c <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY>
    34c2:	2800      	cmp	r0, #0
    34c4:	f47f af3e 	bne.w	3344 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x14>
    34c8:	2f00      	cmp	r7, #0
    34ca:	d1fb      	bne.n	34c4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x194>
    34cc:	2004      	movs	r0, #4
    34ce:	e7e2      	b.n	3496 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x166>
    34d0:	20000bbc 	.word	0x20000bbc
    34d4:	20000b90 	.word	0x20000b90
    34d8:	200000b0 	.word	0x200000b0

000034dc <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>:
    34dc:	4901      	ldr	r1, [pc, #4]	; (34e4 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x8>)
    34de:	7008      	strb	r0, [r1, #0]
    34e0:	f000 b8b0 	b.w	3644 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x15c>
    34e4:	2000036e 	.word	0x2000036e

000034e8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q>:
    34e8:	4902      	ldr	r1, [pc, #8]	; (34f4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xc>)
    34ea:	4801      	ldr	r0, [pc, #4]	; (34f0 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x8>)
    34ec:	6008      	str	r0, [r1, #0]
    34ee:	4770      	bx	lr
    34f0:	000034f9 	.word	0x000034f9
    34f4:	200000b0 	.word	0x200000b0
    34f8:	b538      	push	{r3, r4, r5, lr}
    34fa:	000d      	movs	r5, r1
    34fc:	d014      	beq.n	3528 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x40>
    34fe:	80a8      	strh	r0, [r5, #4]
    3500:	2100      	movs	r1, #0
    3502:	7269      	strb	r1, [r5, #9]
    3504:	f7fe fb76 	bl	1bf4 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    3508:	4604      	mov	r4, r0
    350a:	f00a f829 	bl	d560 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>
    350e:	b168      	cbz	r0, 352c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x44>
    3510:	4601      	mov	r1, r0
    3512:	466a      	mov	r2, sp
    3514:	4620      	mov	r0, r4
    3516:	f00a f841 	bl	d59c <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    351a:	80e8      	strh	r0, [r5, #6]
    351c:	b148      	cbz	r0, 3532 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x4a>
    351e:	28fb      	cmp	r0, #251	; 0xfb
    3520:	d90a      	bls.n	3538 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x50>
    3522:	f44f 7186 	mov.w	r1, #268	; 0x10c
    3526:	e032      	b.n	358e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xa6>
    3528:	21fc      	movs	r1, #252	; 0xfc
    352a:	e030      	b.n	358e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xa6>
    352c:	f240 1105 	movw	r1, #261	; 0x105
    3530:	e02d      	b.n	358e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xa6>
    3532:	f44f 7185 	mov.w	r1, #266	; 0x10a
    3536:	e02a      	b.n	358e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xa6>
    3538:	9800      	ldr	r0, [sp, #0]
    353a:	f00a ff1c 	bl	e376 <sym_VV6G4PHP6ULWM4Y2LJJIOETDZSUFDXGJCHBQNZI>
    353e:	2801      	cmp	r0, #1
    3540:	d004      	beq.n	354c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x64>
    3542:	2802      	cmp	r0, #2
    3544:	d002      	beq.n	354c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x64>
    3546:	f44f 718e 	mov.w	r1, #284	; 0x11c
    354a:	e020      	b.n	358e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xa6>
    354c:	7228      	strb	r0, [r5, #8]
    354e:	6828      	ldr	r0, [r5, #0]
    3550:	b1a8      	cbz	r0, 357e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x96>
    3552:	9900      	ldr	r1, [sp, #0]
    3554:	88ea      	ldrh	r2, [r5, #6]
    3556:	1cc9      	adds	r1, r1, #3
    3558:	f00d fc74 	bl	10e44 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    355c:	4620      	mov	r0, r4
    355e:	f009 ffc7 	bl	d4f0 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>
    3562:	b178      	cbz	r0, 3584 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x9c>
    3564:	4620      	mov	r0, r4
    3566:	2100      	movs	r1, #0
    3568:	f00a f8b6 	bl	d6d8 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    356c:	b168      	cbz	r0, 358a <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xa2>
    356e:	4809      	ldr	r0, [pc, #36]	; (3594 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xac>)
    3570:	7cc1      	ldrb	r1, [r0, #19]
    3572:	2900      	cmp	r1, #0
    3574:	d002      	beq.n	357c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x94>
    3576:	8a81      	ldrh	r1, [r0, #20]
    3578:	1e49      	subs	r1, r1, #1
    357a:	8281      	strh	r1, [r0, #20]
    357c:	bd38      	pop	{r3, r4, r5, pc}
    357e:	f240 1123 	movw	r1, #291	; 0x123
    3582:	e004      	b.n	358e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xa6>
    3584:	f44f 7194 	mov.w	r1, #296	; 0x128
    3588:	e001      	b.n	358e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xa6>
    358a:	f240 112d 	movw	r1, #301	; 0x12d
    358e:	2010      	movs	r0, #16
    3590:	f7fd ff34 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3594:	20000b90 	.word	0x20000b90
    3598:	b538      	push	{r3, r4, r5, lr}
    359a:	4602      	mov	r2, r0
    359c:	4b11      	ldr	r3, [pc, #68]	; (35e4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xfc>)
    359e:	2000      	movs	r0, #0
    35a0:	7010      	strb	r0, [r2, #0]
    35a2:	6858      	ldr	r0, [r3, #4]
    35a4:	7a01      	ldrb	r1, [r0, #8]
    35a6:	f88d 1000 	strb.w	r1, [sp]
    35aa:	9900      	ldr	r1, [sp, #0]
    35ac:	9100      	str	r1, [sp, #0]
    35ae:	f89d 5000 	ldrb.w	r5, [sp]
    35b2:	2401      	movs	r4, #1
    35b4:	2d01      	cmp	r5, #1
    35b6:	d006      	beq.n	35c6 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xde>
    35b8:	f3ef 8110 	mrs	r1, PRIMASK
    35bc:	b672      	cpsid	i
    35be:	6805      	ldr	r5, [r0, #0]
    35c0:	605d      	str	r5, [r3, #4]
    35c2:	b111      	cbz	r1, 35ca <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xe2>
    35c4:	e002      	b.n	35cc <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xe4>
    35c6:	2000      	movs	r0, #0
    35c8:	bd38      	pop	{r3, r4, r5, pc}
    35ca:	b662      	cpsie	i
    35cc:	7a01      	ldrb	r1, [r0, #8]
    35ce:	f88d 1000 	strb.w	r1, [sp]
    35d2:	9900      	ldr	r1, [sp, #0]
    35d4:	9100      	str	r1, [sp, #0]
    35d6:	f89d 3000 	ldrb.w	r3, [sp]
    35da:	2b00      	cmp	r3, #0
    35dc:	d1f4      	bne.n	35c8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xe0>
    35de:	7014      	strb	r4, [r2, #0]
    35e0:	bd38      	pop	{r3, r4, r5, pc}
    35e2:	0000      	.short	0x0000
    35e4:	20000bbc 	.word	0x20000bbc
    35e8:	b538      	push	{r3, r4, r5, lr}
    35ea:	b1d0      	cbz	r0, 3622 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x13a>
    35ec:	6041      	str	r1, [r0, #4]
    35ee:	f100 0108 	add.w	r1, r0, #8
    35f2:	700a      	strb	r2, [r1, #0]
    35f4:	f3ef 8310 	mrs	r3, PRIMASK
    35f8:	b672      	cpsid	i
    35fa:	4c10      	ldr	r4, [pc, #64]	; (363c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x154>)
    35fc:	6004      	str	r4, [r0, #0]
    35fe:	1f21      	subs	r1, r4, #4
    3600:	684a      	ldr	r2, [r1, #4]
    3602:	b14a      	cbz	r2, 3618 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x130>
    3604:	7a12      	ldrb	r2, [r2, #8]
    3606:	f88d 2000 	strb.w	r2, [sp]
    360a:	9a00      	ldr	r2, [sp, #0]
    360c:	9200      	str	r2, [sp, #0]
    360e:	f89d 5000 	ldrb.w	r5, [sp]
    3612:	2d01      	cmp	r5, #1
    3614:	d100      	bne.n	3618 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x130>
    3616:	600c      	str	r4, [r1, #0]
    3618:	680a      	ldr	r2, [r1, #0]
    361a:	6010      	str	r0, [r2, #0]
    361c:	6008      	str	r0, [r1, #0]
    361e:	b12b      	cbz	r3, 362c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x144>
    3620:	e005      	b.n	362e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x146>
    3622:	f240 21e2 	movw	r1, #738	; 0x2e2
    3626:	2010      	movs	r0, #16
    3628:	f7fd fee8 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    362c:	b662      	cpsie	i
    362e:	4804      	ldr	r0, [pc, #16]	; (3640 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x158>)
    3630:	7800      	ldrb	r0, [r0, #0]
    3632:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    3636:	f009 b845 	b.w	c6c4 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    363a:	0000      	.short	0x0000
    363c:	20000bc0 	.word	0x20000bc0
    3640:	2000036e 	.word	0x2000036e
    3644:	4808      	ldr	r0, [pc, #32]	; (3668 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x180>)
    3646:	b510      	push	{r4, lr}
    3648:	2100      	movs	r1, #0
    364a:	6141      	str	r1, [r0, #20]
    364c:	6181      	str	r1, [r0, #24]
    364e:	61c1      	str	r1, [r0, #28]
    3650:	6201      	str	r1, [r0, #32]
    3652:	2212      	movs	r2, #18
    3654:	f00d fc70 	bl	10f38 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    3658:	4803      	ldr	r0, [pc, #12]	; (3668 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x180>)
    365a:	3014      	adds	r0, #20
    365c:	2101      	movs	r1, #1
    365e:	7301      	strb	r1, [r0, #12]
    3660:	1d01      	adds	r1, r0, #4
    3662:	6041      	str	r1, [r0, #4]
    3664:	6001      	str	r1, [r0, #0]
    3666:	bd10      	pop	{r4, pc}
    3668:	20000ba8 	.word	0x20000ba8

0000366c <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>:
    366c:	b4f0      	push	{r4, r5, r6, r7}
    366e:	8150      	strh	r0, [r2, #10]
    3670:	890c      	ldrh	r4, [r1, #8]
    3672:	4613      	mov	r3, r2
    3674:	8194      	strh	r4, [r2, #12]
    3676:	898a      	ldrh	r2, [r1, #12]
    3678:	81da      	strh	r2, [r3, #14]
    367a:	8948      	ldrh	r0, [r1, #10]
    367c:	8218      	strh	r0, [r3, #16]
    367e:	89cd      	ldrh	r5, [r1, #14]
    3680:	825d      	strh	r5, [r3, #18]
    3682:	8dce      	ldrh	r6, [r1, #46]	; 0x2e
    3684:	42ae      	cmp	r6, r5
    3686:	d108      	bne.n	369a <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2e>
    3688:	8d4d      	ldrh	r5, [r1, #42]	; 0x2a
    368a:	4285      	cmp	r5, r0
    368c:	d105      	bne.n	369a <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2e>
    368e:	8e0d      	ldrh	r5, [r1, #48]	; 0x30
    3690:	4295      	cmp	r5, r2
    3692:	d102      	bne.n	369a <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2e>
    3694:	8d8a      	ldrh	r2, [r1, #44]	; 0x2c
    3696:	42a2      	cmp	r2, r4
    3698:	d001      	beq.n	369e <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x32>
    369a:	2201      	movs	r2, #1
    369c:	e000      	b.n	36a0 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x34>
    369e:	2200      	movs	r2, #0
    36a0:	751a      	strb	r2, [r3, #20]
    36a2:	8548      	strh	r0, [r1, #42]	; 0x2a
    36a4:	8a58      	ldrh	r0, [r3, #18]
    36a6:	85c8      	strh	r0, [r1, #46]	; 0x2e
    36a8:	8998      	ldrh	r0, [r3, #12]
    36aa:	8588      	strh	r0, [r1, #44]	; 0x2c
    36ac:	89d8      	ldrh	r0, [r3, #14]
    36ae:	8608      	strh	r0, [r1, #48]	; 0x30
    36b0:	bcf0      	pop	{r4, r5, r6, r7}
    36b2:	2214      	movs	r2, #20
    36b4:	4901      	ldr	r1, [pc, #4]	; (36bc <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x50>)
    36b6:	4618      	mov	r0, r3
    36b8:	f00a bf43 	b.w	e542 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    36bc:	0000e71f 	.word	0x0000e71f

000036c0 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>:
    36c0:	8150      	strh	r0, [r2, #10]
    36c2:	8a88      	ldrh	r0, [r1, #20]
    36c4:	8190      	strh	r0, [r2, #12]
    36c6:	8ac8      	ldrh	r0, [r1, #22]
    36c8:	81d0      	strh	r0, [r2, #14]
    36ca:	8b08      	ldrh	r0, [r1, #24]
    36cc:	8210      	strh	r0, [r2, #16]
    36ce:	8b48      	ldrh	r0, [r1, #26]
    36d0:	4613      	mov	r3, r2
    36d2:	8250      	strh	r0, [r2, #18]
    36d4:	2221      	movs	r2, #33	; 0x21
    36d6:	4902      	ldr	r1, [pc, #8]	; (36e0 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x20>)
    36d8:	4618      	mov	r0, r3
    36da:	f00a bf1e 	b.w	e51a <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    36de:	0000      	.short	0x0000
    36e0:	0000e755 	.word	0x0000e755

000036e4 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>:
    36e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    36e6:	f06f 021f 	mvn.w	r2, #31
    36ea:	0c01      	lsrs	r1, r0, #16
    36ec:	ea02 2690 	and.w	r6, r2, r0, lsr #10
    36f0:	251f      	movs	r5, #31
    36f2:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    36f6:	3854      	subs	r0, #84	; 0x54
    36f8:	d00d      	beq.n	3716 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    36fa:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    36fe:	3855      	subs	r0, #85	; 0x55
    3700:	d009      	beq.n	3716 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    3702:	f5a1 5028 	sub.w	r0, r1, #10752	; 0x2a00
    3706:	38aa      	subs	r0, #170	; 0xaa
    3708:	d005      	beq.n	3716 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    370a:	f5a1 402a 	sub.w	r0, r1, #43520	; 0xaa00
    370e:	38aa      	subs	r0, #170	; 0xaa
    3710:	d001      	beq.n	3716 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    3712:	2001      	movs	r0, #1
    3714:	e000      	b.n	3718 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x34>
    3716:	2000      	movs	r0, #0
    3718:	2200      	movs	r2, #0
    371a:	4613      	mov	r3, r2
    371c:	ea4f 0402 	mov.w	r4, r2
    3720:	ea82 0701 	eor.w	r7, r2, r1
    3724:	43ff      	mvns	r7, r7
    3726:	431f      	orrs	r7, r3
    3728:	1c7f      	adds	r7, r7, #1
    372a:	d00f      	beq.n	374c <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x68>
    372c:	f006 0701 	and.w	r7, r6, #1
    3730:	0852      	lsrs	r2, r2, #1
    3732:	ea42 32c7 	orr.w	r2, r2, r7, lsl #15
    3736:	f005 0701 	and.w	r7, r5, #1
    373a:	085b      	lsrs	r3, r3, #1
    373c:	0876      	lsrs	r6, r6, #1
    373e:	086d      	lsrs	r5, r5, #1
    3740:	1c64      	adds	r4, r4, #1
    3742:	ea43 33c7 	orr.w	r3, r3, r7, lsl #15
    3746:	2c16      	cmp	r4, #22
    3748:	d3ea      	bcc.n	3720 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x3c>
    374a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    374c:	2000      	movs	r0, #0
    374e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00003750 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>:
    3750:	b510      	push	{r4, lr}
    3752:	4804      	ldr	r0, [pc, #16]	; (3764 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x14>)
    3754:	f00b f862 	bl	e81c <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x15c>
    3758:	4802      	ldr	r0, [pc, #8]	; (3764 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x14>)
    375a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    375e:	3008      	adds	r0, #8
    3760:	f00b b85c 	b.w	e81c <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x15c>
    3764:	200000b4 	.word	0x200000b4

00003768 <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ>:
    3768:	4801      	ldr	r0, [pc, #4]	; (3770 <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ+0x8>)
    376a:	f000 b809 	b.w	3780 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0xc>
    376e:	0000      	.short	0x0000
    3770:	200000b4 	.word	0x200000b4

00003774 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>:
    3774:	4801      	ldr	r0, [pc, #4]	; (377c <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x8>)
    3776:	f000 b803 	b.w	3780 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0xc>
    377a:	0000      	.short	0x0000
    377c:	200000bc 	.word	0x200000bc
    3780:	b510      	push	{r4, lr}
    3782:	e9d0 2100 	ldrd	r2, r1, [r0]
    3786:	4b09      	ldr	r3, [pc, #36]	; (37ac <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x38>)
    3788:	4c09      	ldr	r4, [pc, #36]	; (37b0 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x3c>)
    378a:	4353      	muls	r3, r2
    378c:	4354      	muls	r4, r2
    378e:	4051      	eors	r1, r2
    3790:	ea81 12b2 	eor.w	r2, r1, r2, ror #6
    3794:	ea82 2241 	eor.w	r2, r2, r1, lsl #9
    3798:	ea4f 41f1 	mov.w	r1, r1, ror #19
    379c:	e9c0 2100 	strd	r2, r1, [r0]
    37a0:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
    37a4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    37a8:	4618      	mov	r0, r3
    37aa:	bd10      	pop	{r4, pc}
    37ac:	c6ef3760 	.word	0xc6ef3760
    37b0:	9e3779bb 	.word	0x9e3779bb

000037b4 <sym_7ABLLIXUF3HMINU3DLWXJDVBNAU7RSUXPXZ3RFQ>:
    37b4:	b510      	push	{r4, lr}
    37b6:	6840      	ldr	r0, [r0, #4]
    37b8:	2200      	movs	r2, #0
    37ba:	f890 308c 	ldrb.w	r3, [r0, #140]	; 0x8c
    37be:	3080      	adds	r0, #128	; 0x80
    37c0:	1d09      	adds	r1, r1, #4
    37c2:	07db      	lsls	r3, r3, #31
    37c4:	d001      	beq.n	37ca <sym_7ABLLIXUF3HMINU3DLWXJDVBNAU7RSUXPXZ3RFQ+0x16>
    37c6:	2001      	movs	r0, #1
    37c8:	bd10      	pop	{r4, pc}
    37ca:	790c      	ldrb	r4, [r1, #4]
    37cc:	680b      	ldr	r3, [r1, #0]
    37ce:	4909      	ldr	r1, [pc, #36]	; (37f4 <sym_7ABLLIXUF3HMINU3DLWXJDVBNAU7RSUXPXZ3RFQ+0x40>)
    37d0:	400b      	ands	r3, r1
    37d2:	f004 0107 	and.w	r1, r4, #7
    37d6:	66c3      	str	r3, [r0, #108]	; 0x6c
    37d8:	6701      	str	r1, [r0, #112]	; 0x70
    37da:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
    37de:	f890 105a 	ldrb.w	r1, [r0, #90]	; 0x5a
    37e2:	1c49      	adds	r1, r1, #1
    37e4:	f880 105a 	strb.w	r1, [r0, #90]	; 0x5a
    37e8:	68c1      	ldr	r1, [r0, #12]
    37ea:	f041 0101 	orr.w	r1, r1, #1
    37ee:	60c1      	str	r1, [r0, #12]
    37f0:	2000      	movs	r0, #0
    37f2:	bd10      	pop	{r4, pc}
    37f4:	3704492f 	.word	0x3704492f

000037f8 <sym_CYYZ5DA5UWAE37FM7XP643I473QUSWWZ2MS7OLY>:
    37f8:	b510      	push	{r4, lr}
    37fa:	1d04      	adds	r4, r0, #4
    37fc:	f004 f8d2 	bl	79a4 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    3800:	4a03      	ldr	r2, [pc, #12]	; (3810 <sym_CYYZ5DA5UWAE37FM7XP643I473QUSWWZ2MS7OLY+0x18>)
    3802:	f001 0107 	and.w	r1, r1, #7
    3806:	4010      	ands	r0, r2
    3808:	6020      	str	r0, [r4, #0]
    380a:	6061      	str	r1, [r4, #4]
    380c:	bd10      	pop	{r4, pc}
    380e:	0000      	.short	0x0000
    3810:	3704492f 	.word	0x3704492f

00003814 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI>:
    3814:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3818:	7803      	ldrb	r3, [r0, #0]
    381a:	6840      	ldr	r0, [r0, #4]
    381c:	1d0f      	adds	r7, r1, #4
    381e:	f100 0580 	add.w	r5, r0, #128	; 0x80
    3822:	f500 74a5 	add.w	r4, r0, #330	; 0x14a
    3826:	4606      	mov	r6, r0
    3828:	f04f 0800 	mov.w	r8, #0
    382c:	7f6a      	ldrb	r2, [r5, #29]
    382e:	2107      	movs	r1, #7
    3830:	4628      	mov	r0, r5
    3832:	f00a fadb 	bl	ddec <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    3836:	b1b0      	cbz	r0, 3866 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x52>
    3838:	6838      	ldr	r0, [r7, #0]
    383a:	4a15      	ldr	r2, [pc, #84]	; (3890 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x7c>)
    383c:	7939      	ldrb	r1, [r7, #4]
    383e:	4010      	ands	r0, r2
    3840:	f001 0107 	and.w	r1, r1, #7
    3844:	66e8      	str	r0, [r5, #108]	; 0x6c
    3846:	6729      	str	r1, [r5, #112]	; 0x70
    3848:	f885 8056 	strb.w	r8, [r5, #86]	; 0x56
    384c:	f885 801d 	strb.w	r8, [r5, #29]
    3850:	f894 1068 	ldrb.w	r1, [r4, #104]	; 0x68
    3854:	4640      	mov	r0, r8
    3856:	f88d 1000 	strb.w	r1, [sp]
    385a:	9900      	ldr	r1, [sp, #0]
    385c:	9100      	str	r1, [sp, #0]
    385e:	f89d 1000 	ldrb.w	r1, [sp]
    3862:	b991      	cbnz	r1, 388a <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x76>
    3864:	e002      	b.n	386c <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x58>
    3866:	2001      	movs	r0, #1
    3868:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    386c:	8831      	ldrh	r1, [r6, #0]
    386e:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
    3872:	f884 0069 	strb.w	r0, [r4, #105]	; 0x69
    3876:	6839      	ldr	r1, [r7, #0]
    3878:	66e1      	str	r1, [r4, #108]	; 0x6c
    387a:	6879      	ldr	r1, [r7, #4]
    387c:	6721      	str	r1, [r4, #112]	; 0x70
    387e:	2208      	movs	r2, #8
    3880:	4904      	ldr	r1, [pc, #16]	; (3894 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x80>)
    3882:	f104 0060 	add.w	r0, r4, #96	; 0x60
    3886:	f00a fe48 	bl	e51a <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    388a:	2000      	movs	r0, #0
    388c:	e7ec      	b.n	3868 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x54>
    388e:	0000      	.short	0x0000
    3890:	3704492f 	.word	0x3704492f
    3894:	0000e989 	.word	0x0000e989

00003898 <sym_KQ4RAL3HW3LUBE4EKZDESO77BJMQRXFGP63ANLQ>:
    3898:	b570      	push	{r4, r5, r6, lr}
    389a:	1d0d      	adds	r5, r1, #4
    389c:	6844      	ldr	r4, [r0, #4]
    389e:	f004 f881 	bl	79a4 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    38a2:	4a06      	ldr	r2, [pc, #24]	; (38bc <sym_KQ4RAL3HW3LUBE4EKZDESO77BJMQRXFGP63ANLQ+0x24>)
    38a4:	4010      	ands	r0, r2
    38a6:	f001 0207 	and.w	r2, r1, #7
    38aa:	f894 10ec 	ldrb.w	r1, [r4, #236]	; 0xec
    38ae:	4001      	ands	r1, r0
    38b0:	f361 0007 	bfi	r0, r1, #0, #8
    38b4:	6028      	str	r0, [r5, #0]
    38b6:	606a      	str	r2, [r5, #4]
    38b8:	bd70      	pop	{r4, r5, r6, pc}
    38ba:	0000      	.short	0x0000
    38bc:	3704492f 	.word	0x3704492f

000038c0 <sym_KH2TZBL3IC4Q72SOWRZYKXJYTC66QUG36J2D64Q>:
    38c0:	6841      	ldr	r1, [r0, #4]
    38c2:	b082      	sub	sp, #8
    38c4:	f501 70a5 	add.w	r0, r1, #330	; 0x14a
    38c8:	f891 21b2 	ldrb.w	r2, [r1, #434]	; 0x1b2
    38cc:	f88d 2000 	strb.w	r2, [sp]
    38d0:	9a00      	ldr	r2, [sp, #0]
    38d2:	9200      	str	r2, [sp, #0]
    38d4:	f89d 2000 	ldrb.w	r2, [sp]
    38d8:	2a00      	cmp	r2, #0
    38da:	d10b      	bne.n	38f4 <sym_KH2TZBL3IC4Q72SOWRZYKXJYTC66QUG36J2D64Q+0x34>
    38dc:	8809      	ldrh	r1, [r1, #0]
    38de:	f8a0 106a 	strh.w	r1, [r0, #106]	; 0x6a
    38e2:	211a      	movs	r1, #26
    38e4:	f880 1069 	strb.w	r1, [r0, #105]	; 0x69
    38e8:	2208      	movs	r2, #8
    38ea:	4903      	ldr	r1, [pc, #12]	; (38f8 <sym_KH2TZBL3IC4Q72SOWRZYKXJYTC66QUG36J2D64Q+0x38>)
    38ec:	3060      	adds	r0, #96	; 0x60
    38ee:	b002      	add	sp, #8
    38f0:	f00a be13 	b.w	e51a <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    38f4:	b002      	add	sp, #8
    38f6:	4770      	bx	lr
    38f8:	0000e989 	.word	0x0000e989

000038fc <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY>:
    38fc:	b570      	push	{r4, r5, r6, lr}
    38fe:	6844      	ldr	r4, [r0, #4]
    3900:	460d      	mov	r5, r1
    3902:	7803      	ldrb	r3, [r0, #0]
    3904:	f894 209d 	ldrb.w	r2, [r4, #157]	; 0x9d
    3908:	3480      	adds	r4, #128	; 0x80
    390a:	2600      	movs	r6, #0
    390c:	2108      	movs	r1, #8
    390e:	4620      	mov	r0, r4
    3910:	f00a fa6c 	bl	ddec <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    3914:	b920      	cbnz	r0, 3920 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x24>
    3916:	7b20      	ldrb	r0, [r4, #12]
    3918:	0780      	lsls	r0, r0, #30
    391a:	d501      	bpl.n	3920 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x24>
    391c:	2001      	movs	r0, #1
    391e:	bd70      	pop	{r4, r5, r6, pc}
    3920:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
    3924:	0780      	lsls	r0, r0, #30
    3926:	d419      	bmi.n	395c <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x60>
    3928:	4628      	mov	r0, r5
    392a:	f00a fd92 	bl	e452 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI>
    392e:	f884 0067 	strb.w	r0, [r4, #103]	; 0x67
    3932:	f835 0f05 	ldrh.w	r0, [r5, #5]!
    3936:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
    393a:	8868      	ldrh	r0, [r5, #2]
    393c:	f8a4 006a 	strh.w	r0, [r4, #106]	; 0x6a
    3940:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
    3944:	f040 0002 	orr.w	r0, r0, #2
    3948:	f884 005d 	strb.w	r0, [r4, #93]	; 0x5d
    394c:	07c0      	lsls	r0, r0, #31
    394e:	d009      	beq.n	3964 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x68>
    3950:	2203      	movs	r2, #3
    3952:	4911      	ldr	r1, [pc, #68]	; (3998 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x9c>)
    3954:	f104 005e 	add.w	r0, r4, #94	; 0x5e
    3958:	f00a fdf3 	bl	e542 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    395c:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
    3960:	07c0      	lsls	r0, r0, #31
    3962:	d110      	bne.n	3986 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x8a>
    3964:	68e0      	ldr	r0, [r4, #12]
    3966:	0781      	lsls	r1, r0, #30
    3968:	d503      	bpl.n	3972 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x76>
    396a:	214f      	movs	r1, #79	; 0x4f
    396c:	2040      	movs	r0, #64	; 0x40
    396e:	f7fd fd45 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3972:	f040 0002 	orr.w	r0, r0, #2
    3976:	60e0      	str	r0, [r4, #12]
    3978:	f894 005a 	ldrb.w	r0, [r4, #90]	; 0x5a
    397c:	1c40      	adds	r0, r0, #1
    397e:	f884 005a 	strb.w	r0, [r4, #90]	; 0x5a
    3982:	f8a4 6058 	strh.w	r6, [r4, #88]	; 0x58
    3986:	7f60      	ldrb	r0, [r4, #29]
    3988:	2801      	cmp	r0, #1
    398a:	d102      	bne.n	3992 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x96>
    398c:	7766      	strb	r6, [r4, #29]
    398e:	f884 6056 	strb.w	r6, [r4, #86]	; 0x56
    3992:	2000      	movs	r0, #0
    3994:	bd70      	pop	{r4, r5, r6, pc}
    3996:	0000      	.short	0x0000
    3998:	0000e9b7 	.word	0x0000e9b7

0000399c <sym_DEQHYPJXYJ4WT7NTOYVXPSGPFEINKR4XQZSCDJY>:
    399c:	4907      	ldr	r1, [pc, #28]	; (39bc <sym_DEQHYPJXYJ4WT7NTOYVXPSGPFEINKR4XQZSCDJY+0x20>)
    399e:	f500 6000 	add.w	r0, r0, #2048	; 0x800
    39a2:	1300      	asrs	r0, r0, #12
    39a4:	7809      	ldrb	r1, [r1, #0]
    39a6:	b240      	sxtb	r0, r0
    39a8:	4249      	negs	r1, r1
    39aa:	b249      	sxtb	r1, r1
    39ac:	4408      	add	r0, r1
    39ae:	f300 0007 	ssat	r0, #8, r0
    39b2:	2800      	cmp	r0, #0
    39b4:	dc00      	bgt.n	39b8 <sym_DEQHYPJXYJ4WT7NTOYVXPSGPFEINKR4XQZSCDJY+0x1c>
    39b6:	2000      	movs	r0, #0
    39b8:	b2c0      	uxtb	r0, r0
    39ba:	4770      	bx	lr
    39bc:	200000c4 	.word	0x200000c4

000039c0 <sym_3E5VWVFRMYHMNGUSJEPBKKOP7X6VGWWURR334MQ>:
    39c0:	4a04      	ldr	r2, [pc, #16]	; (39d4 <sym_3E5VWVFRMYHMNGUSJEPBKKOP7X6VGWWURR334MQ+0x14>)
    39c2:	6892      	ldr	r2, [r2, #8]
    39c4:	f5c2 5380 	rsb	r3, r2, #4096	; 0x1000
    39c8:	434b      	muls	r3, r1
    39ca:	4342      	muls	r2, r0
    39cc:	eb03 3022 	add.w	r0, r3, r2, asr #12
    39d0:	4770      	bx	lr
    39d2:	0000      	.short	0x0000
    39d4:	200000c4 	.word	0x200000c4

000039d8 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA>:
    39d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    39da:	6844      	ldr	r4, [r0, #4]
    39dc:	4606      	mov	r6, r0
    39de:	f104 0580 	add.w	r5, r4, #128	; 0x80
    39e2:	f000 f87f 	bl	3ae4 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x10c>
    39e6:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
    39ea:	2901      	cmp	r1, #1
    39ec:	d11a      	bne.n	3a24 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x4c>
    39ee:	2800      	cmp	r0, #0
    39f0:	d018      	beq.n	3a24 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x4c>
    39f2:	6870      	ldr	r0, [r6, #4]
    39f4:	f890 1152 	ldrb.w	r1, [r0, #338]	; 0x152
    39f8:	f88d 1000 	strb.w	r1, [sp]
    39fc:	9900      	ldr	r1, [sp, #0]
    39fe:	9100      	str	r1, [sp, #0]
    3a00:	f89d 1000 	ldrb.w	r1, [sp]
    3a04:	f500 70a5 	add.w	r0, r0, #330	; 0x14a
    3a08:	2900      	cmp	r1, #0
    3a0a:	d10b      	bne.n	3a24 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x4c>
    3a0c:	8821      	ldrh	r1, [r4, #0]
    3a0e:	8141      	strh	r1, [r0, #10]
    3a10:	7e69      	ldrb	r1, [r5, #25]
    3a12:	7301      	strb	r1, [r0, #12]
    3a14:	7ea9      	ldrb	r1, [r5, #26]
    3a16:	7341      	strb	r1, [r0, #13]
    3a18:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    3a1c:	221f      	movs	r2, #31
    3a1e:	4902      	ldr	r1, [pc, #8]	; (3a28 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x50>)
    3a20:	f00a bd7b 	b.w	e51a <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    3a24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3a26:	0000      	.short	0x0000
    3a28:	0000ea59 	.word	0x0000ea59
    3a2c:	f500 6100 	add.w	r1, r0, #2048	; 0x800
    3a30:	4a0d      	ldr	r2, [pc, #52]	; (3a68 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x90>)
    3a32:	b510      	push	{r4, lr}
    3a34:	f500 6000 	add.w	r0, r0, #2048	; 0x800
    3a38:	1309      	asrs	r1, r1, #12
    3a3a:	1300      	asrs	r0, r0, #12
    3a3c:	b24b      	sxtb	r3, r1
    3a3e:	f992 4000 	ldrsb.w	r4, [r2]
    3a42:	4240      	negs	r0, r0
    3a44:	2100      	movs	r1, #0
    3a46:	b240      	sxtb	r0, r0
    3a48:	42a3      	cmp	r3, r4
    3a4a:	da02      	bge.n	3a52 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x7a>
    3a4c:	f992 1002 	ldrsb.w	r1, [r2, #2]
    3a50:	e005      	b.n	3a5e <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x86>
    3a52:	f992 4001 	ldrsb.w	r4, [r2, #1]
    3a56:	42a3      	cmp	r3, r4
    3a58:	dd04      	ble.n	3a64 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x8c>
    3a5a:	f992 1003 	ldrsb.w	r1, [r2, #3]
    3a5e:	4408      	add	r0, r1
    3a60:	f300 0107 	ssat	r1, #8, r0
    3a64:	4608      	mov	r0, r1
    3a66:	bd10      	pop	{r4, pc}
    3a68:	200000c4 	.word	0x200000c4
    3a6c:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    3a70:	2200      	movs	r2, #0
    3a72:	704a      	strb	r2, [r1, #1]
    3a74:	f5a0 75fa 	sub.w	r5, r0, #500	; 0x1f4
    3a78:	700a      	strb	r2, [r1, #0]
    3a7a:	f5a0 74ba 	sub.w	r4, r0, #372	; 0x174
    3a7e:	f895 006b 	ldrb.w	r0, [r5, #107]	; 0x6b
    3a82:	f00c f804 	bl	fa8e <sym_C4WN3DS2SEB6CNTCY4ECLTD4ZD7ETWJRO5S2S2Y>
    3a86:	4606      	mov	r6, r0
    3a88:	68a0      	ldr	r0, [r4, #8]
    3a8a:	f7ff ffcf 	bl	3a2c <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x54>
    3a8e:	0007      	movs	r7, r0
    3a90:	d021      	beq.n	3ad6 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xfe>
    3a92:	4620      	mov	r0, r4
    3a94:	f00a ffe8 	bl	ea68 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x70>
    3a98:	2800      	cmp	r0, #0
    3a9a:	d01c      	beq.n	3ad6 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xfe>
    3a9c:	8828      	ldrh	r0, [r5, #0]
    3a9e:	4669      	mov	r1, sp
    3aa0:	f00a f97a 	bl	dd98 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    3aa4:	b118      	cbz	r0, 3aae <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xd6>
    3aa6:	2189      	movs	r1, #137	; 0x89
    3aa8:	207a      	movs	r0, #122	; 0x7a
    3aaa:	f7fd fca7 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3aae:	1c76      	adds	r6, r6, #1
    3ab0:	b2f1      	uxtb	r1, r6
    3ab2:	2302      	movs	r3, #2
    3ab4:	463a      	mov	r2, r7
    3ab6:	4668      	mov	r0, sp
    3ab8:	f00c f808 	bl	facc <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I>
    3abc:	2800      	cmp	r0, #0
    3abe:	d10a      	bne.n	3ad6 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xfe>
    3ac0:	4806      	ldr	r0, [pc, #24]	; (3adc <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x104>)
    3ac2:	4907      	ldr	r1, [pc, #28]	; (3ae0 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x108>)
    3ac4:	7900      	ldrb	r0, [r0, #4]
    3ac6:	fba0 6501 	umull	r6, r5, r0, r1
    3aca:	f007 fbed 	bl	b2a8 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    3ace:	1980      	adds	r0, r0, r6
    3ad0:	4169      	adcs	r1, r5
    3ad2:	e9c4 0100 	strd	r0, r1, [r4]
    3ad6:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    3ada:	0000      	.short	0x0000
    3adc:	200000c4 	.word	0x200000c4
    3ae0:	000f4240 	.word	0x000f4240
    3ae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3ae8:	4607      	mov	r7, r0
    3aea:	f7ff faf1 	bl	30d0 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I>
    3aee:	687c      	ldr	r4, [r7, #4]
    3af0:	4605      	mov	r5, r0
    3af2:	f884 0099 	strb.w	r0, [r4, #153]	; 0x99
    3af6:	3480      	adds	r4, #128	; 0x80
    3af8:	287f      	cmp	r0, #127	; 0x7f
    3afa:	d03c      	beq.n	3b76 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x19e>
    3afc:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
    3b00:	687e      	ldr	r6, [r7, #4]
    3b02:	76a0      	strb	r0, [r4, #26]
    3b04:	4629      	mov	r1, r5
    3b06:	68a0      	ldr	r0, [r4, #8]
    3b08:	f7ff ff5a 	bl	39c0 <sym_3E5VWVFRMYHMNGUSJEPBKKOP7X6VGWWURR334MQ>
    3b0c:	60a0      	str	r0, [r4, #8]
    3b0e:	481b      	ldr	r0, [pc, #108]	; (3b7c <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x1a4>)
    3b10:	7940      	ldrb	r0, [r0, #5]
    3b12:	b190      	cbz	r0, 3b3a <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x162>
    3b14:	6878      	ldr	r0, [r7, #4]
    3b16:	f100 0880 	add.w	r8, r0, #128	; 0x80
    3b1a:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
    3b1e:	f7ff ff85 	bl	3a2c <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x54>
    3b22:	b150      	cbz	r0, 3b3a <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x162>
    3b24:	4640      	mov	r0, r8
    3b26:	f00a ff9f 	bl	ea68 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x70>
    3b2a:	b130      	cbz	r0, 3b3a <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x162>
    3b2c:	6878      	ldr	r0, [r7, #4]
    3b2e:	2231      	movs	r2, #49	; 0x31
    3b30:	4913      	ldr	r1, [pc, #76]	; (3b80 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x1a8>)
    3b32:	f500 70fa 	add.w	r0, r0, #500	; 0x1f4
    3b36:	f00a fd04 	bl	e542 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    3b3a:	f994 001b 	ldrsb.w	r0, [r4, #27]
    3b3e:	2100      	movs	r1, #0
    3b40:	1a28      	subs	r0, r5, r0
    3b42:	d500      	bpl.n	3b46 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x16e>
    3b44:	4240      	negs	r0, r0
    3b46:	f896 2029 	ldrb.w	r2, [r6, #41]	; 0x29
    3b4a:	4282      	cmp	r2, r0
    3b4c:	dc10      	bgt.n	3b70 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x198>
    3b4e:	2aff      	cmp	r2, #255	; 0xff
    3b50:	d00e      	beq.n	3b70 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x198>
    3b52:	7f20      	ldrb	r0, [r4, #28]
    3b54:	1c40      	adds	r0, r0, #1
    3b56:	b2c0      	uxtb	r0, r0
    3b58:	7720      	strb	r0, [r4, #28]
    3b5a:	f896 202a 	ldrb.w	r2, [r6, #42]	; 0x2a
    3b5e:	4290      	cmp	r0, r2
    3b60:	d802      	bhi.n	3b68 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x190>
    3b62:	7ee0      	ldrb	r0, [r4, #27]
    3b64:	287f      	cmp	r0, #127	; 0x7f
    3b66:	d103      	bne.n	3b70 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x198>
    3b68:	2000      	movs	r0, #0
    3b6a:	76e5      	strb	r5, [r4, #27]
    3b6c:	7720      	strb	r0, [r4, #28]
    3b6e:	2101      	movs	r1, #1
    3b70:	4608      	mov	r0, r1
    3b72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3b76:	2000      	movs	r0, #0
    3b78:	e7fb      	b.n	3b72 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x19a>
    3b7a:	0000      	.short	0x0000
    3b7c:	200000c4 	.word	0x200000c4
    3b80:	00003a6d 	.word	0x00003a6d

00003b84 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>:
    3b84:	b570      	push	{r4, r5, r6, lr}
    3b86:	4604      	mov	r4, r0
    3b88:	7c00      	ldrb	r0, [r0, #16]
    3b8a:	b300      	cbz	r0, 3bce <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4a>
    3b8c:	2802      	cmp	r0, #2
    3b8e:	d01e      	beq.n	3bce <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4a>
    3b90:	f05f 0001 	movs.w	r0, #1
    3b94:	f104 0151 	add.w	r1, r4, #81	; 0x51
    3b98:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
    3b9c:	460d      	mov	r5, r1
    3b9e:	b1c0      	cbz	r0, 3bd2 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4e>
    3ba0:	7de0      	ldrb	r0, [r4, #23]
    3ba2:	b1f0      	cbz	r0, 3be2 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x5e>
    3ba4:	f8d4 0011 	ldr.w	r0, [r4, #17]
    3ba8:	f8c4 0051 	str.w	r0, [r4, #81]	; 0x51
    3bac:	f8b4 0015 	ldrh.w	r0, [r4, #21]
    3bb0:	f8a4 0055 	strh.w	r0, [r4, #85]	; 0x55
    3bb4:	7c20      	ldrb	r0, [r4, #16]
    3bb6:	f00a ff80 	bl	eaba <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xc2>
    3bba:	7620      	strb	r0, [r4, #24]
    3bbc:	2008      	movs	r0, #8
    3bbe:	7660      	strb	r0, [r4, #25]
    3bc0:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
    3bc4:	4629      	mov	r1, r5
    3bc6:	f00a ff64 	bl	ea92 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x9a>
    3bca:	b9a8      	cbnz	r0, 3bf8 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x74>
    3bcc:	e00e      	b.n	3bec <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x68>
    3bce:	2000      	movs	r0, #0
    3bd0:	e7e0      	b.n	3b94 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x10>
    3bd2:	2000      	movs	r0, #0
    3bd4:	f7fe fab0 	bl	2138 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    3bd8:	2800      	cmp	r0, #0
    3bda:	d1eb      	bne.n	3bb4 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x30>
    3bdc:	f240 41b9 	movw	r1, #1209	; 0x4b9
    3be0:	e001      	b.n	3be6 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x62>
    3be2:	f240 41bd 	movw	r1, #1213	; 0x4bd
    3be6:	202d      	movs	r0, #45	; 0x2d
    3be8:	f7fd fc08 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3bec:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
    3bf0:	4629      	mov	r1, r5
    3bf2:	f00a ff57 	bl	eaa4 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xac>
    3bf6:	b100      	cbz	r0, 3bfa <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x76>
    3bf8:	2001      	movs	r0, #1
    3bfa:	76a0      	strb	r0, [r4, #26]
    3bfc:	7e20      	ldrb	r0, [r4, #24]
    3bfe:	b130      	cbz	r0, 3c0e <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x8a>
    3c00:	f894 0057 	ldrb.w	r0, [r4, #87]	; 0x57
    3c04:	f104 0158 	add.w	r1, r4, #88	; 0x58
    3c08:	f00a f892 	bl	dd30 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    3c0c:	7660      	strb	r0, [r4, #25]
    3c0e:	f7ff f875 	bl	2cfc <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    3c12:	490c      	ldr	r1, [pc, #48]	; (3c44 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xc0>)
    3c14:	fba0 2301 	umull	r2, r3, r0, r1
    3c18:	f104 0048 	add.w	r0, r4, #72	; 0x48
    3c1c:	f00b f8d2 	bl	edc4 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x154>
    3c20:	2100      	movs	r1, #0
    3c22:	4620      	mov	r0, r4
    3c24:	f00b f887 	bl	ed36 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xc6>
    3c28:	2000      	movs	r0, #0
    3c2a:	f884 005e 	strb.w	r0, [r4, #94]	; 0x5e
    3c2e:	78a0      	ldrb	r0, [r4, #2]
    3c30:	0740      	lsls	r0, r0, #29
    3c32:	d505      	bpl.n	3c40 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xbc>
    3c34:	4620      	mov	r0, r4
    3c36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3c3a:	2100      	movs	r1, #0
    3c3c:	f000 bdd0 	b.w	47e0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x66c>
    3c40:	bd70      	pop	{r4, r5, r6, pc}
    3c42:	0000      	.short	0x0000
    3c44:	000f4240 	.word	0x000f4240

00003c48 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>:
    3c48:	b530      	push	{r4, r5, lr}
    3c4a:	460c      	mov	r4, r1
    3c4c:	b08d      	sub	sp, #52	; 0x34
    3c4e:	4605      	mov	r5, r0
    3c50:	4601      	mov	r1, r0
    3c52:	2224      	movs	r2, #36	; 0x24
    3c54:	a802      	add	r0, sp, #8
    3c56:	f00d f8f5 	bl	10e44 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    3c5a:	a80b      	add	r0, sp, #44	; 0x2c
    3c5c:	f00b f90f 	bl	ee7e <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>
    3c60:	7aa0      	ldrb	r0, [r4, #10]
    3c62:	f88d 0018 	strb.w	r0, [sp, #24]
    3c66:	7820      	ldrb	r0, [r4, #0]
    3c68:	f88d 0008 	strb.w	r0, [sp, #8]
    3c6c:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    3c70:	f8ad 0000 	strh.w	r0, [sp]
    3c74:	f89d 0000 	ldrb.w	r0, [sp]
    3c78:	f000 0101 	and.w	r1, r0, #1
    3c7c:	f3c0 0240 	ubfx	r2, r0, #1, #1
    3c80:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
    3c84:	f3c0 0280 	ubfx	r2, r0, #2, #1
    3c88:	ea41 0182 	orr.w	r1, r1, r2, lsl #2
    3c8c:	f3c0 02c0 	ubfx	r2, r0, #3, #1
    3c90:	ea41 01c2 	orr.w	r1, r1, r2, lsl #3
    3c94:	f3c0 1200 	ubfx	r2, r0, #4, #1
    3c98:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    3c9c:	f3c0 1240 	ubfx	r2, r0, #5, #1
    3ca0:	ea41 1142 	orr.w	r1, r1, r2, lsl #5
    3ca4:	f3c0 1080 	ubfx	r0, r0, #6, #1
    3ca8:	ea41 1080 	orr.w	r0, r1, r0, lsl #6
    3cac:	f8ad 000a 	strh.w	r0, [sp, #10]
    3cb0:	7d20      	ldrb	r0, [r4, #20]
    3cb2:	2801      	cmp	r0, #1
    3cb4:	d006      	beq.n	3cc4 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x7c>
    3cb6:	2802      	cmp	r0, #2
    3cb8:	d004      	beq.n	3cc4 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x7c>
    3cba:	f240 21ea 	movw	r1, #746	; 0x2ea
    3cbe:	2006      	movs	r0, #6
    3cc0:	f7fd fb9c 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3cc4:	f88d 000c 	strb.w	r0, [sp, #12]
    3cc8:	7a61      	ldrb	r1, [r4, #9]
    3cca:	a80b      	add	r0, sp, #44	; 0x2c
    3ccc:	f00b f8be 	bl	ee4c <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>
    3cd0:	7d20      	ldrb	r0, [r4, #20]
    3cd2:	2101      	movs	r1, #1
    3cd4:	2802      	cmp	r0, #2
    3cd6:	d102      	bne.n	3cde <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x96>
    3cd8:	7d60      	ldrb	r0, [r4, #21]
    3cda:	1c40      	adds	r0, r0, #1
    3cdc:	b2c1      	uxtb	r1, r0
    3cde:	7ea0      	ldrb	r0, [r4, #26]
    3ce0:	1c40      	adds	r0, r0, #1
    3ce2:	b2c2      	uxtb	r2, r0
    3ce4:	a80b      	add	r0, sp, #44	; 0x2c
    3ce6:	f00b f878 	bl	edda <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>
    3cea:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    3cee:	0700      	lsls	r0, r0, #28
    3cf0:	d501      	bpl.n	3cf6 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xae>
    3cf2:	2000      	movs	r0, #0
    3cf4:	e020      	b.n	3d38 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf0>
    3cf6:	a80b      	add	r0, sp, #44	; 0x2c
    3cf8:	f00b f881 	bl	edfe <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    3cfc:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    3d00:	2228      	movs	r2, #40	; 0x28
    3d02:	f000 fe11 	bl	4928 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>
    3d06:	f240 2171 	movw	r1, #625	; 0x271
    3d0a:	f200 20d9 	addw	r0, r0, #729	; 0x2d9
    3d0e:	fbb0 f0f1 	udiv	r0, r0, r1
    3d12:	4348      	muls	r0, r1
    3d14:	f8d4 1002 	ldr.w	r1, [r4, #2]
    3d18:	f240 2371 	movw	r3, #625	; 0x271
    3d1c:	0a0a      	lsrs	r2, r1, #8
    3d1e:	f240 2171 	movw	r1, #625	; 0x271
    3d22:	434a      	muls	r2, r1
    3d24:	f8d4 1005 	ldr.w	r1, [r4, #5]
    3d28:	0a09      	lsrs	r1, r1, #8
    3d2a:	4359      	muls	r1, r3
    3d2c:	4290      	cmp	r0, r2
    3d2e:	d801      	bhi.n	3d34 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xec>
    3d30:	9204      	str	r2, [sp, #16]
    3d32:	e004      	b.n	3d3e <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf6>
    3d34:	4288      	cmp	r0, r1
    3d36:	d801      	bhi.n	3d3c <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf4>
    3d38:	9004      	str	r0, [sp, #16]
    3d3a:	e000      	b.n	3d3e <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf6>
    3d3c:	9104      	str	r1, [sp, #16]
    3d3e:	7ca0      	ldrb	r0, [r4, #18]
    3d40:	f88d 0017 	strb.w	r0, [sp, #23]
    3d44:	7e20      	ldrb	r0, [r4, #24]
    3d46:	2801      	cmp	r0, #1
    3d48:	d000      	beq.n	3d4c <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x104>
    3d4a:	2000      	movs	r0, #0
    3d4c:	f88d 0014 	strb.w	r0, [sp, #20]
    3d50:	6b68      	ldr	r0, [r5, #52]	; 0x34
    3d52:	f009 fe55 	bl	da00 <sym_RIJIFYF46ZRKFDPA3GKV7WCH2VGEUEP6MVN4JFI>
    3d56:	6b68      	ldr	r0, [r5, #52]	; 0x34
    3d58:	f009 fefa 	bl	db50 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ>
    3d5c:	2224      	movs	r2, #36	; 0x24
    3d5e:	a902      	add	r1, sp, #8
    3d60:	4628      	mov	r0, r5
    3d62:	f00d f86f 	bl	10e44 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    3d66:	980b      	ldr	r0, [sp, #44]	; 0x2c
    3d68:	62a8      	str	r0, [r5, #40]	; 0x28
    3d6a:	f8bd 0030 	ldrh.w	r0, [sp, #48]	; 0x30
    3d6e:	85a8      	strh	r0, [r5, #44]	; 0x2c
    3d70:	7ae0      	ldrb	r0, [r4, #11]
    3d72:	b168      	cbz	r0, 3d90 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x148>
    3d74:	2802      	cmp	r0, #2
    3d76:	d00b      	beq.n	3d90 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x148>
    3d78:	f05f 0001 	movs.w	r0, #1
    3d7c:	f885 0057 	strb.w	r0, [r5, #87]	; 0x57
    3d80:	68e0      	ldr	r0, [r4, #12]
    3d82:	65a8      	str	r0, [r5, #88]	; 0x58
    3d84:	8a20      	ldrh	r0, [r4, #16]
    3d86:	f8a5 005c 	strh.w	r0, [r5, #92]	; 0x5c
    3d8a:	b00d      	add	sp, #52	; 0x34
    3d8c:	2000      	movs	r0, #0
    3d8e:	bd30      	pop	{r4, r5, pc}
    3d90:	2000      	movs	r0, #0
    3d92:	e7f3      	b.n	3d7c <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x134>

00003d94 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>:
    3d94:	4a0a      	ldr	r2, [pc, #40]	; (3dc0 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x2c>)
    3d96:	b510      	push	{r4, lr}
    3d98:	2100      	movs	r1, #0
    3d9a:	7011      	strb	r1, [r2, #0]
    3d9c:	4c09      	ldr	r4, [pc, #36]	; (3dc4 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x30>)
    3d9e:	6060      	str	r0, [r4, #4]
    3da0:	f000 f822 	bl	3de8 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>
    3da4:	b110      	cbz	r0, 3dac <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x18>
    3da6:	f240 312d 	movw	r1, #813	; 0x32d
    3daa:	e004      	b.n	3db6 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x22>
    3dac:	68a0      	ldr	r0, [r4, #8]
    3dae:	2800      	cmp	r0, #0
    3db0:	d104      	bne.n	3dbc <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x28>
    3db2:	f44f 714c 	mov.w	r1, #816	; 0x330
    3db6:	202d      	movs	r0, #45	; 0x2d
    3db8:	f7fd fb20 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3dbc:	bd10      	pop	{r4, pc}
    3dbe:	0000      	.short	0x0000
    3dc0:	20000bcc 	.word	0x20000bcc
    3dc4:	200000d0 	.word	0x200000d0

00003dc8 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>:
    3dc8:	4902      	ldr	r1, [pc, #8]	; (3dd4 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0xc>)
    3dca:	4801      	ldr	r0, [pc, #4]	; (3dd0 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0x8>)
    3dcc:	6088      	str	r0, [r1, #8]
    3dce:	4770      	bx	lr
    3dd0:	00004910 	.word	0x00004910
    3dd4:	200000d0 	.word	0x200000d0

00003dd8 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>:
    3dd8:	4902      	ldr	r1, [pc, #8]	; (3de4 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A+0xc>)
    3dda:	6008      	str	r0, [r1, #0]
    3ddc:	6889      	ldr	r1, [r1, #8]
    3dde:	6809      	ldr	r1, [r1, #0]
    3de0:	4708      	bx	r1
    3de2:	0000      	.short	0x0000
    3de4:	200000d0 	.word	0x200000d0

00003de8 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>:
    3de8:	4808      	ldr	r0, [pc, #32]	; (3e0c <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x24>)
    3dea:	b510      	push	{r4, lr}
    3dec:	7800      	ldrb	r0, [r0, #0]
    3dee:	b110      	cbz	r0, 3df6 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0xe>
    3df0:	240c      	movs	r4, #12
    3df2:	4620      	mov	r0, r4
    3df4:	bd10      	pop	{r4, pc}
    3df6:	2400      	movs	r4, #0
    3df8:	2218      	movs	r2, #24
    3dfa:	4621      	mov	r1, r4
    3dfc:	4803      	ldr	r0, [pc, #12]	; (3e0c <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x24>)
    3dfe:	f00d f89b 	bl	10f38 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    3e02:	f003 fff1 	bl	7de8 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    3e06:	f003 fe15 	bl	7a34 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    3e0a:	e7f2      	b.n	3df2 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0xa>
    3e0c:	20000bcc 	.word	0x20000bcc

00003e10 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>:
    3e10:	4904      	ldr	r1, [pc, #16]	; (3e24 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x14>)
    3e12:	b510      	push	{r4, lr}
    3e14:	7809      	ldrb	r1, [r1, #0]
    3e16:	2901      	cmp	r1, #1
    3e18:	d101      	bne.n	3e1e <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0xe>
    3e1a:	f000 fbb5 	bl	4588 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x414>
    3e1e:	2000      	movs	r0, #0
    3e20:	bd10      	pop	{r4, pc}
    3e22:	0000      	.short	0x0000
    3e24:	20000bcc 	.word	0x20000bcc

00003e28 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY>:
    3e28:	4902      	ldr	r1, [pc, #8]	; (3e34 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xc>)
    3e2a:	4801      	ldr	r0, [pc, #4]	; (3e30 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x8>)
    3e2c:	6008      	str	r0, [r1, #0]
    3e2e:	4770      	bx	lr
    3e30:	000046b5 	.word	0x000046b5
    3e34:	200000dc 	.word	0x200000dc

00003e38 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>:
    3e38:	b510      	push	{r4, lr}
    3e3a:	4604      	mov	r4, r0
    3e3c:	7880      	ldrb	r0, [r0, #2]
    3e3e:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    3e42:	b158      	cbz	r0, 3e5c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x24>
    3e44:	233c      	movs	r3, #60	; 0x3c
    3e46:	22ff      	movs	r2, #255	; 0xff
    3e48:	4620      	mov	r0, r4
    3e4a:	69e1      	ldr	r1, [r4, #28]
    3e4c:	f000 fbc2 	bl	45d4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x460>
    3e50:	2211      	movs	r2, #17
    3e52:	4904      	ldr	r1, [pc, #16]	; (3e64 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x2c>)
    3e54:	f104 006c 	add.w	r0, r4, #108	; 0x6c
    3e58:	f00a fb5f 	bl	e51a <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    3e5c:	2001      	movs	r0, #1
    3e5e:	f884 0069 	strb.w	r0, [r4, #105]	; 0x69
    3e62:	bd10      	pop	{r4, pc}
    3e64:	0000eccf 	.word	0x0000eccf
    3e68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3e6c:	000f      	movs	r7, r1
    3e6e:	4604      	mov	r4, r0
    3e70:	d023      	beq.n	3eba <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x82>
    3e72:	f104 0028 	add.w	r0, r4, #40	; 0x28
    3e76:	4605      	mov	r5, r0
    3e78:	f00a ffea 	bl	ee50 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    3e7c:	b9b0      	cbnz	r0, 3eac <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x74>
    3e7e:	78a0      	ldrb	r0, [r4, #2]
    3e80:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    3e84:	b350      	cbz	r0, 3edc <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xa4>
    3e86:	4628      	mov	r0, r5
    3e88:	f00a ffb9 	bl	edfe <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    3e8c:	4606      	mov	r6, r0
    3e8e:	4628      	mov	r0, r5
    3e90:	f00a ffde 	bl	ee50 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    3e94:	1a30      	subs	r0, r6, r0
    3e96:	b2c0      	uxtb	r0, r0
    3e98:	f00b f82f 	bl	eefa <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
    3e9c:	4601      	mov	r1, r0
    3e9e:	4835      	ldr	r0, [pc, #212]	; (3f74 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x13c>)
    3ea0:	6842      	ldr	r2, [r0, #4]
    3ea2:	4411      	add	r1, r2
    3ea4:	6041      	str	r1, [r0, #4]
    3ea6:	4628      	mov	r0, r5
    3ea8:	f00a fff0 	bl	ee8c <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    3eac:	4628      	mov	r0, r5
    3eae:	f00a ffb2 	bl	ee16 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    3eb2:	4601      	mov	r1, r0
    3eb4:	4620      	mov	r0, r4
    3eb6:	f00a ff7a 	bl	edae <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x13e>
    3eba:	4d2f      	ldr	r5, [pc, #188]	; (3f78 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x140>)
    3ebc:	f894 605e 	ldrb.w	r6, [r4, #94]	; 0x5e
    3ec0:	2100      	movs	r1, #0
    3ec2:	6868      	ldr	r0, [r5, #4]
    3ec4:	8001      	strh	r1, [r0, #0]
    3ec6:	f00a fed8 	bl	ec7a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    3eca:	8860      	ldrh	r0, [r4, #2]
    3ecc:	2813      	cmp	r0, #19
    3ece:	d013      	beq.n	3ef8 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xc0>
    3ed0:	dc09      	bgt.n	3ee6 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xae>
    3ed2:	2810      	cmp	r0, #16
    3ed4:	d036      	beq.n	3f44 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x10c>
    3ed6:	2812      	cmp	r0, #18
    3ed8:	d109      	bne.n	3eee <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xb6>
    3eda:	e031      	b.n	3f40 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x108>
    3edc:	4620      	mov	r0, r4
    3ede:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3ee2:	f000 bb51 	b.w	4588 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x414>
    3ee6:	2815      	cmp	r0, #21
    3ee8:	d00f      	beq.n	3f0a <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xd2>
    3eea:	281d      	cmp	r0, #29
    3eec:	d00d      	beq.n	3f0a <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xd2>
    3eee:	f240 6172 	movw	r1, #1650	; 0x672
    3ef2:	202d      	movs	r0, #45	; 0x2d
    3ef4:	f7fd fa82 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3ef8:	2100      	movs	r1, #0
    3efa:	6868      	ldr	r0, [r5, #4]
    3efc:	f00a f994 	bl	e228 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
    3f00:	2101      	movs	r1, #1
    3f02:	6868      	ldr	r0, [r5, #4]
    3f04:	f00a feb9 	bl	ec7a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    3f08:	e020      	b.n	3f4c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x114>
    3f0a:	2101      	movs	r1, #1
    3f0c:	6868      	ldr	r0, [r5, #4]
    3f0e:	f00a f98b 	bl	e228 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
    3f12:	2101      	movs	r1, #1
    3f14:	6868      	ldr	r0, [r5, #4]
    3f16:	f00a feb0 	bl	ec7a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    3f1a:	b136      	cbz	r6, 3f2a <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xf2>
    3f1c:	f104 015f 	add.w	r1, r4, #95	; 0x5f
    3f20:	6868      	ldr	r0, [r5, #4]
    3f22:	f00a f99c 	bl	e25e <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>
    3f26:	2101      	movs	r1, #1
    3f28:	e006      	b.n	3f38 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x100>
    3f2a:	f104 0158 	add.w	r1, r4, #88	; 0x58
    3f2e:	6868      	ldr	r0, [r5, #4]
    3f30:	f00a f995 	bl	e25e <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>
    3f34:	f894 1057 	ldrb.w	r1, [r4, #87]	; 0x57
    3f38:	6868      	ldr	r0, [r5, #4]
    3f3a:	f00a f996 	bl	e26a <sym_NAGMMCXDNSRJLJ55T6DS4CG2FNZEN6Y562ZTFRY>
    3f3e:	e005      	b.n	3f4c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x114>
    3f40:	2106      	movs	r1, #6
    3f42:	e000      	b.n	3f46 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x10e>
    3f44:	2102      	movs	r1, #2
    3f46:	6868      	ldr	r0, [r5, #4]
    3f48:	f00a f96e 	bl	e228 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
    3f4c:	4620      	mov	r0, r4
    3f4e:	f000 fcbd 	bl	48cc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x758>
    3f52:	8860      	ldrh	r0, [r4, #2]
    3f54:	281d      	cmp	r0, #29
    3f56:	d007      	beq.n	3f68 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x130>
    3f58:	2815      	cmp	r0, #21
    3f5a:	d005      	beq.n	3f68 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x130>
    3f5c:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
    3f60:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    3f62:	6868      	ldr	r0, [r5, #4]
    3f64:	f00a f950 	bl	e208 <sym_252O2EYK5FIXU63T5SACWK2VO6UFAQRM77ITNFA>
    3f68:	4639      	mov	r1, r7
    3f6a:	4620      	mov	r0, r4
    3f6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3f70:	f000 b9f6 	b.w	4360 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1ec>
    3f74:	20000bcc 	.word	0x20000bcc
    3f78:	200000d0 	.word	0x200000d0
    3f7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3f80:	4d2f      	ldr	r5, [pc, #188]	; (4040 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x40>)
    3f82:	4680      	mov	r8, r0
    3f84:	7828      	ldrb	r0, [r5, #0]
    3f86:	2802      	cmp	r0, #2
    3f88:	d005      	beq.n	3f96 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x15e>
    3f8a:	7828      	ldrb	r0, [r5, #0]
    3f8c:	2803      	cmp	r0, #3
    3f8e:	d002      	beq.n	3f96 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x15e>
    3f90:	f640 512d 	movw	r1, #3373	; 0xd2d
    3f94:	e02b      	b.n	3fee <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1b6>
    3f96:	4c2b      	ldr	r4, [pc, #172]	; (4044 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x44>)
    3f98:	6826      	ldr	r6, [r4, #0]
    3f9a:	7b30      	ldrb	r0, [r6, #12]
    3f9c:	b118      	cbz	r0, 3fa6 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x16e>
    3f9e:	f7ff f897 	bl	30d0 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I>
    3fa2:	f886 002e 	strb.w	r0, [r6, #46]	; 0x2e
    3fa6:	f8d4 c004 	ldr.w	ip, [r4, #4]
    3faa:	2700      	movs	r7, #0
    3fac:	f1b8 0f00 	cmp.w	r8, #0
    3fb0:	f89c 0000 	ldrb.w	r0, [ip]
    3fb4:	f000 060f 	and.w	r6, r0, #15
    3fb8:	d027      	beq.n	400a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xa>
    3fba:	6821      	ldr	r1, [r4, #0]
    3fbc:	09c0      	lsrs	r0, r0, #7
    3fbe:	f101 0351 	add.w	r3, r1, #81	; 0x51
    3fc2:	f891 2050 	ldrb.w	r2, [r1, #80]	; 0x50
    3fc6:	f10c 0109 	add.w	r1, ip, #9
    3fca:	f009 fe19 	bl	dc00 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    3fce:	b1e0      	cbz	r0, 400a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xa>
    3fd0:	4639      	mov	r1, r7
    3fd2:	6860      	ldr	r0, [r4, #4]
    3fd4:	f00a f908 	bl	e1e8 <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ>
    3fd8:	b1b8      	cbz	r0, 400a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xa>
    3fda:	782a      	ldrb	r2, [r5, #0]
    3fdc:	6820      	ldr	r0, [r4, #0]
    3fde:	4631      	mov	r1, r6
    3fe0:	2a02      	cmp	r2, #2
    3fe2:	d007      	beq.n	3ff4 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1bc>
    3fe4:	782a      	ldrb	r2, [r5, #0]
    3fe6:	2a03      	cmp	r2, #3
    3fe8:	d004      	beq.n	3ff4 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1bc>
    3fea:	f640 5106 	movw	r1, #3334	; 0xd06
    3fee:	202d      	movs	r0, #45	; 0x2d
    3ff0:	f7fd fa04 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3ff4:	68a2      	ldr	r2, [r4, #8]
    3ff6:	782b      	ldrb	r3, [r5, #0]
    3ff8:	6952      	ldr	r2, [r2, #20]
    3ffa:	f06f 0607 	mvn.w	r6, #7
    3ffe:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    4002:	58d2      	ldr	r2, [r2, r3]
    4004:	4790      	blx	r2
    4006:	4606      	mov	r6, r0
    4008:	e000      	b.n	400c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xc>
    400a:	2601      	movs	r6, #1
    400c:	7ba8      	ldrb	r0, [r5, #14]
    400e:	b118      	cbz	r0, 4018 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x18>
    4010:	f003 feea 	bl	7de8 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    4014:	f003 fd0e 	bl	7a34 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    4018:	2e00      	cmp	r6, #0
    401a:	d00f      	beq.n	403c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x3c>
    401c:	6820      	ldr	r0, [r4, #0]
    401e:	f00a ff82 	bl	ef26 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    4022:	b130      	cbz	r0, 4032 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x32>
    4024:	f003 ff08 	bl	7e38 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    4028:	68a0      	ldr	r0, [r4, #8]
    402a:	6880      	ldr	r0, [r0, #8]
    402c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4030:	4700      	bx	r0
    4032:	6820      	ldr	r0, [r4, #0]
    4034:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4038:	f000 baa6 	b.w	4588 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x414>
    403c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4040:	20000bcc 	.word	0x20000bcc
    4044:	200000d0 	.word	0x200000d0
    4048:	b510      	push	{r4, lr}
    404a:	2903      	cmp	r1, #3
    404c:	d002      	beq.n	4054 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x54>
    404e:	2905      	cmp	r1, #5
    4050:	d10a      	bne.n	4068 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x68>
    4052:	e002      	b.n	405a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5a>
    4054:	f000 fb92 	bl	477c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x608>
    4058:	e003      	b.n	4062 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x62>
    405a:	4904      	ldr	r1, [pc, #16]	; (406c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x6c>)
    405c:	6809      	ldr	r1, [r1, #0]
    405e:	b109      	cbz	r1, 4064 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x64>
    4060:	4788      	blx	r1
    4062:	b108      	cbz	r0, 4068 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x68>
    4064:	2000      	movs	r0, #0
    4066:	bd10      	pop	{r4, pc}
    4068:	2001      	movs	r0, #1
    406a:	bd10      	pop	{r4, pc}
    406c:	200000dc 	.word	0x200000dc
    4070:	4a09      	ldr	r2, [pc, #36]	; (4098 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x98>)
    4072:	0003      	movs	r3, r0
    4074:	6810      	ldr	r0, [r2, #0]
    4076:	d001      	beq.n	407c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x7c>
    4078:	f000 ba86 	b.w	4588 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x414>
    407c:	2900      	cmp	r1, #0
    407e:	d009      	beq.n	4094 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x94>
    4080:	6891      	ldr	r1, [r2, #8]
    4082:	4a06      	ldr	r2, [pc, #24]	; (409c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x9c>)
    4084:	6909      	ldr	r1, [r1, #16]
    4086:	7812      	ldrb	r2, [r2, #0]
    4088:	f06f 030f 	mvn.w	r3, #15
    408c:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    4090:	5889      	ldr	r1, [r1, r2]
    4092:	4708      	bx	r1
    4094:	4770      	bx	lr
    4096:	0000      	.short	0x0000
    4098:	200000d0 	.word	0x200000d0
    409c:	20000bcc 	.word	0x20000bcc
    40a0:	b570      	push	{r4, r5, r6, lr}
    40a2:	4604      	mov	r4, r0
    40a4:	8840      	ldrh	r0, [r0, #2]
    40a6:	2810      	cmp	r0, #16
    40a8:	d019      	beq.n	40de <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xde>
    40aa:	4d10      	ldr	r5, [pc, #64]	; (40ec <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xec>)
    40ac:	7ba8      	ldrb	r0, [r5, #14]
    40ae:	b120      	cbz	r0, 40ba <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xba>
    40b0:	f003 fce0 	bl	7a74 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>
    40b4:	2040      	movs	r0, #64	; 0x40
    40b6:	f003 fea5 	bl	7e04 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>
    40ba:	480d      	ldr	r0, [pc, #52]	; (40f0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xf0>)
    40bc:	6840      	ldr	r0, [r0, #4]
    40be:	f004 f927 	bl	8310 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    40c2:	78a0      	ldrb	r0, [r4, #2]
    40c4:	0740      	lsls	r0, r0, #29
    40c6:	d404      	bmi.n	40d2 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xd2>
    40c8:	2100      	movs	r1, #0
    40ca:	7922      	ldrb	r2, [r4, #4]
    40cc:	4608      	mov	r0, r1
    40ce:	f004 f9a7 	bl	8420 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    40d2:	2000      	movs	r0, #0
    40d4:	f003 ffd2 	bl	807c <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    40d8:	2002      	movs	r0, #2
    40da:	7028      	strb	r0, [r5, #0]
    40dc:	bd70      	pop	{r4, r5, r6, pc}
    40de:	4620      	mov	r0, r4
    40e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    40e4:	2101      	movs	r1, #1
    40e6:	f7ff bebf 	b.w	3e68 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x30>
    40ea:	0000      	.short	0x0000
    40ec:	20000bcc 	.word	0x20000bcc
    40f0:	200000d0 	.word	0x200000d0
    40f4:	b510      	push	{r4, lr}
    40f6:	4c12      	ldr	r4, [pc, #72]	; (4140 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x140>)
    40f8:	6820      	ldr	r0, [r4, #0]
    40fa:	f000 f825 	bl	4148 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x148>
    40fe:	6820      	ldr	r0, [r4, #0]
    4100:	f00a ff11 	bl	ef26 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    4104:	2800      	cmp	r0, #0
    4106:	6820      	ldr	r0, [r4, #0]
    4108:	d00b      	beq.n	4122 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x122>
    410a:	490e      	ldr	r1, [pc, #56]	; (4144 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x144>)
    410c:	780a      	ldrb	r2, [r1, #0]
    410e:	2a02      	cmp	r2, #2
    4110:	d00b      	beq.n	412a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x12a>
    4112:	780a      	ldrb	r2, [r1, #0]
    4114:	2a03      	cmp	r2, #3
    4116:	d008      	beq.n	412a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x12a>
    4118:	f640 4137 	movw	r1, #3127	; 0xc37
    411c:	202d      	movs	r0, #45	; 0x2d
    411e:	f7fd f96d 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4122:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4126:	f000 ba2f 	b.w	4588 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x414>
    412a:	68a2      	ldr	r2, [r4, #8]
    412c:	7809      	ldrb	r1, [r1, #0]
    412e:	68d2      	ldr	r2, [r2, #12]
    4130:	f06f 0307 	mvn.w	r3, #7
    4134:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    4138:	5851      	ldr	r1, [r2, r1]
    413a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    413e:	4708      	bx	r1
    4140:	200000d0 	.word	0x200000d0
    4144:	20000bcc 	.word	0x20000bcc
    4148:	b510      	push	{r4, lr}
    414a:	7b01      	ldrb	r1, [r0, #12]
    414c:	b121      	cbz	r1, 4158 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x158>
    414e:	4604      	mov	r4, r0
    4150:	f7fe ffbe 	bl	30d0 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I>
    4154:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    4158:	4805      	ldr	r0, [pc, #20]	; (4170 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x170>)
    415a:	7b80      	ldrb	r0, [r0, #14]
    415c:	2800      	cmp	r0, #0
    415e:	d005      	beq.n	416c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x16c>
    4160:	f003 fe42 	bl	7de8 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    4164:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4168:	f003 bc64 	b.w	7a34 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    416c:	bd10      	pop	{r4, pc}
    416e:	0000      	.short	0x0000
    4170:	20000bcc 	.word	0x20000bcc

00004174 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>:
    4174:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4178:	4d5d      	ldr	r5, [pc, #372]	; (42f0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x17c>)
    417a:	4604      	mov	r4, r0
    417c:	b086      	sub	sp, #24
    417e:	7828      	ldrb	r0, [r5, #0]
    4180:	2800      	cmp	r0, #0
    4182:	d14e      	bne.n	4222 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xae>
    4184:	7820      	ldrb	r0, [r4, #0]
    4186:	28ff      	cmp	r0, #255	; 0xff
    4188:	d04b      	beq.n	4222 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xae>
    418a:	f04f 0800 	mov.w	r8, #0
    418e:	f8a5 800c 	strh.w	r8, [r5, #12]
    4192:	f8c5 8004 	str.w	r8, [r5, #4]
    4196:	f885 8001 	strb.w	r8, [r5, #1]
    419a:	f885 8002 	strb.w	r8, [r5, #2]
    419e:	f884 8069 	strb.w	r8, [r4, #105]	; 0x69
    41a2:	4b54      	ldr	r3, [pc, #336]	; (42f4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x180>)
    41a4:	4e54      	ldr	r6, [pc, #336]	; (42f8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x184>)
    41a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    41a8:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
    41ac:	68b0      	ldr	r0, [r6, #8]
    41ae:	6840      	ldr	r0, [r0, #4]
    41b0:	9003      	str	r0, [sp, #12]
    41b2:	4668      	mov	r0, sp
    41b4:	f003 ff36 	bl	8024 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    41b8:	f004 f804 	bl	81c4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    41bc:	f004 fa86 	bl	86cc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY>
    41c0:	f003 fe12 	bl	7de8 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    41c4:	f003 fc36 	bl	7a34 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    41c8:	484c      	ldr	r0, [pc, #304]	; (42fc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x188>)
    41ca:	f004 f95b 	bl	8484 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    41ce:	484c      	ldr	r0, [pc, #304]	; (4300 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x18c>)
    41d0:	f004 f962 	bl	8498 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    41d4:	f104 0028 	add.w	r0, r4, #40	; 0x28
    41d8:	4607      	mov	r7, r0
    41da:	f00a fe57 	bl	ee8c <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    41de:	4638      	mov	r0, r7
    41e0:	f00a fe19 	bl	ee16 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    41e4:	4601      	mov	r1, r0
    41e6:	4620      	mov	r0, r4
    41e8:	f00a fde1 	bl	edae <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x13e>
    41ec:	f994 000e 	ldrsb.w	r0, [r4, #14]
    41f0:	f004 f86c 	bl	82cc <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    41f4:	7921      	ldrb	r1, [r4, #4]
    41f6:	2000      	movs	r0, #0
    41f8:	f003 fea8 	bl	7f4c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    41fc:	2101      	movs	r1, #1
    41fe:	60a8      	str	r0, [r5, #8]
    4200:	b198      	cbz	r0, 422a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xb6>
    4202:	f104 0138 	add.w	r1, r4, #56	; 0x38
    4206:	6b60      	ldr	r0, [r4, #52]	; 0x34
    4208:	f009 fc69 	bl	dade <sym_VPXIA5P4C72CY3ME4ZVXBADOKEG5S4C7Z7QZZFA>
    420c:	4607      	mov	r7, r0
    420e:	f104 0140 	add.w	r1, r4, #64	; 0x40
    4212:	6b60      	ldr	r0, [r4, #52]	; 0x34
    4214:	f009 fc66 	bl	dae4 <sym_MF4WRTQNYFRYRFGW7FZUI3ZAYNQZ5EQ54QSK6JQ>
    4218:	b14f      	cbz	r7, 422e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xba>
    421a:	f894 1020 	ldrb.w	r1, [r4, #32]
    421e:	b951      	cbnz	r1, 4236 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc2>
    4220:	e005      	b.n	422e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xba>
    4222:	200c      	movs	r0, #12
    4224:	b006      	add	sp, #24
    4226:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    422a:	7029      	strb	r1, [r5, #0]
    422c:	e05e      	b.n	42ec <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x178>
    422e:	b120      	cbz	r0, 423a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc6>
    4230:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
    4234:	b108      	cbz	r0, 423a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc6>
    4236:	2701      	movs	r7, #1
    4238:	e000      	b.n	423c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc8>
    423a:	2700      	movs	r7, #0
    423c:	7ea0      	ldrb	r0, [r4, #26]
    423e:	b920      	cbnz	r0, 424a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xd6>
    4240:	7e20      	ldrb	r0, [r4, #24]
    4242:	b910      	cbnz	r0, 424a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xd6>
    4244:	78a0      	ldrb	r0, [r4, #2]
    4246:	0740      	lsls	r0, r0, #29
    4248:	d523      	bpl.n	4292 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x11e>
    424a:	e9d4 1012 	ldrd	r1, r0, [r4, #72]	; 0x48
    424e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    4252:	4050      	eors	r0, r2
    4254:	ea70 0101 	orns	r1, r0, r1
    4258:	d006      	beq.n	4268 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xf4>
    425a:	f007 f825 	bl	b2a8 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    425e:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	; 0x48
    4262:	1a80      	subs	r0, r0, r2
    4264:	4199      	sbcs	r1, r3
    4266:	d200      	bcs.n	426a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xf6>
    4268:	b19f      	cbz	r7, 4292 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x11e>
    426a:	f7fe fd47 	bl	2cfc <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    426e:	4925      	ldr	r1, [pc, #148]	; (4304 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x190>)
    4270:	fba0 2301 	umull	r2, r3, r0, r1
    4274:	f104 0048 	add.w	r0, r4, #72	; 0x48
    4278:	f00a fda4 	bl	edc4 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x154>
    427c:	2101      	movs	r1, #1
    427e:	4620      	mov	r0, r4
    4280:	f00a fd59 	bl	ed36 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xc6>
    4284:	78a0      	ldrb	r0, [r4, #2]
    4286:	0740      	lsls	r0, r0, #29
    4288:	d503      	bpl.n	4292 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x11e>
    428a:	2101      	movs	r1, #1
    428c:	4620      	mov	r0, r4
    428e:	f000 faa7 	bl	47e0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x66c>
    4292:	f7fe fd8b 	bl	2dac <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>
    4296:	6870      	ldr	r0, [r6, #4]
    4298:	1cc0      	adds	r0, r0, #3
    429a:	f009 fd3c 	bl	dd16 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>
    429e:	73a8      	strb	r0, [r5, #14]
    42a0:	78a0      	ldrb	r0, [r4, #2]
    42a2:	07c0      	lsls	r0, r0, #31
    42a4:	d022      	beq.n	42ec <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x178>
    42a6:	f8cd 8010 	str.w	r8, [sp, #16]
    42aa:	20ff      	movs	r0, #255	; 0xff
    42ac:	f8cd 8014 	str.w	r8, [sp, #20]
    42b0:	73e8      	strb	r0, [r5, #15]
    42b2:	69e6      	ldr	r6, [r4, #28]
    42b4:	f106 070a 	add.w	r7, r6, #10
    42b8:	e013      	b.n	42e2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x16e>
    42ba:	9c04      	ldr	r4, [sp, #16]
    42bc:	42b4      	cmp	r4, r6
    42be:	d010      	beq.n	42e2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x16e>
    42c0:	7a72      	ldrb	r2, [r6, #9]
    42c2:	7a60      	ldrb	r0, [r4, #9]
    42c4:	463b      	mov	r3, r7
    42c6:	f104 010a 	add.w	r1, r4, #10
    42ca:	f009 fc99 	bl	dc00 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    42ce:	b140      	cbz	r0, 42e2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x16e>
    42d0:	78a0      	ldrb	r0, [r4, #2]
    42d2:	73e8      	strb	r0, [r5, #15]
    42d4:	f8d4 0003 	ldr.w	r0, [r4, #3]
    42d8:	6128      	str	r0, [r5, #16]
    42da:	f8b4 0007 	ldrh.w	r0, [r4, #7]
    42de:	82a8      	strh	r0, [r5, #20]
    42e0:	e004      	b.n	42ec <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x178>
    42e2:	a804      	add	r0, sp, #16
    42e4:	f7fd fac8 	bl	1878 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    42e8:	2800      	cmp	r0, #0
    42ea:	d0e6      	beq.n	42ba <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x146>
    42ec:	2000      	movs	r0, #0
    42ee:	e799      	b.n	4224 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xb0>
    42f0:	20000bcc 	.word	0x20000bcc
    42f4:	000048f0 	.word	0x000048f0
    42f8:	200000d0 	.word	0x200000d0
    42fc:	8e89bed6 	.word	0x8e89bed6
    4300:	00555555 	.word	0x00555555
    4304:	000f4240 	.word	0x000f4240
    4308:	b510      	push	{r4, lr}
    430a:	4604      	mov	r4, r0
    430c:	f7ff ff32 	bl	4174 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>
    4310:	2800      	cmp	r0, #0
    4312:	d108      	bne.n	4326 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1b2>
    4314:	4804      	ldr	r0, [pc, #16]	; (4328 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1b4>)
    4316:	7800      	ldrb	r0, [r0, #0]
    4318:	2801      	cmp	r0, #1
    431a:	d003      	beq.n	4324 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1b0>
    431c:	2100      	movs	r1, #0
    431e:	4620      	mov	r0, r4
    4320:	f7ff fda2 	bl	3e68 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x30>
    4324:	2000      	movs	r0, #0
    4326:	bd10      	pop	{r4, pc}
    4328:	20000bcc 	.word	0x20000bcc
    432c:	480a      	ldr	r0, [pc, #40]	; (4358 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1e4>)
    432e:	b510      	push	{r4, lr}
    4330:	490a      	ldr	r1, [pc, #40]	; (435c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1e8>)
    4332:	6804      	ldr	r4, [r0, #0]
    4334:	7808      	ldrb	r0, [r1, #0]
    4336:	2800      	cmp	r0, #0
    4338:	d00d      	beq.n	4356 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1e2>
    433a:	7808      	ldrb	r0, [r1, #0]
    433c:	2802      	cmp	r0, #2
    433e:	d002      	beq.n	4346 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1d2>
    4340:	7808      	ldrb	r0, [r1, #0]
    4342:	2803      	cmp	r0, #3
    4344:	d102      	bne.n	434c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1d8>
    4346:	4620      	mov	r0, r4
    4348:	f7ff fefe 	bl	4148 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x148>
    434c:	4620      	mov	r0, r4
    434e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4352:	f000 b919 	b.w	4588 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x414>
    4356:	bd10      	pop	{r4, pc}
    4358:	200000d0 	.word	0x200000d0
    435c:	20000bcc 	.word	0x20000bcc
    4360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4364:	4604      	mov	r4, r0
    4366:	4829      	ldr	r0, [pc, #164]	; (440c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x298>)
    4368:	460d      	mov	r5, r1
    436a:	6840      	ldr	r0, [r0, #4]
    436c:	f003 ffd0 	bl	8310 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    4370:	4e27      	ldr	r6, [pc, #156]	; (4410 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x29c>)
    4372:	2004      	movs	r0, #4
    4374:	7030      	strb	r0, [r6, #0]
    4376:	b355      	cbz	r5, 43ce <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x25a>
    4378:	8860      	ldrh	r0, [r4, #2]
    437a:	2810      	cmp	r0, #16
    437c:	d023      	beq.n	43c6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x252>
    437e:	f104 0028 	add.w	r0, r4, #40	; 0x28
    4382:	4680      	mov	r8, r0
    4384:	68b5      	ldr	r5, [r6, #8]
    4386:	f00a fd3a 	bl	edfe <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    438a:	4607      	mov	r7, r0
    438c:	4640      	mov	r0, r8
    438e:	f00a fd5f 	bl	ee50 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    4392:	1a38      	subs	r0, r7, r0
    4394:	1e40      	subs	r0, r0, #1
    4396:	b2c0      	uxtb	r0, r0
    4398:	8861      	ldrh	r1, [r4, #2]
    439a:	2228      	movs	r2, #40	; 0x28
    439c:	f000 fae4 	bl	4968 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>
    43a0:	4405      	add	r5, r0
    43a2:	78a0      	ldrb	r0, [r4, #2]
    43a4:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    43a8:	b130      	cbz	r0, 43b8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x244>
    43aa:	6870      	ldr	r0, [r6, #4]
    43ac:	4405      	add	r5, r0
    43ae:	f00a fda8 	bl	ef02 <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>
    43b2:	4428      	add	r0, r5
    43b4:	f8c4 00d8 	str.w	r0, [r4, #216]	; 0xd8
    43b8:	7922      	ldrb	r2, [r4, #4]
    43ba:	4629      	mov	r1, r5
    43bc:	2000      	movs	r0, #0
    43be:	f003 ffbd 	bl	833c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    43c2:	b920      	cbnz	r0, 43ce <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x25a>
    43c4:	e00c      	b.n	43e0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x26c>
    43c6:	7921      	ldrb	r1, [r4, #4]
    43c8:	2000      	movs	r0, #0
    43ca:	f003 fd85 	bl	7ed8 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>
    43ce:	8860      	ldrh	r0, [r4, #2]
    43d0:	2813      	cmp	r0, #19
    43d2:	d011      	beq.n	43f8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x284>
    43d4:	dc07      	bgt.n	43e6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x272>
    43d6:	2810      	cmp	r0, #16
    43d8:	d015      	beq.n	4406 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x292>
    43da:	2812      	cmp	r0, #18
    43dc:	d107      	bne.n	43ee <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x27a>
    43de:	e00b      	b.n	43f8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x284>
    43e0:	f640 51a8 	movw	r1, #3496	; 0xda8
    43e4:	e005      	b.n	43f2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x27e>
    43e6:	2815      	cmp	r0, #21
    43e8:	d006      	beq.n	43f8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x284>
    43ea:	281d      	cmp	r0, #29
    43ec:	d004      	beq.n	43f8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x284>
    43ee:	f640 51bc 	movw	r1, #3516	; 0xdbc
    43f2:	202d      	movs	r0, #45	; 0x2d
    43f4:	f7fd f802 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    43f8:	7922      	ldrb	r2, [r4, #4]
    43fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    43fe:	2101      	movs	r1, #1
    4400:	2000      	movs	r0, #0
    4402:	f004 b80d 	b.w	8420 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    4406:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    440a:	0000      	.short	0x0000
    440c:	200000d0 	.word	0x200000d0
    4410:	20000bcc 	.word	0x20000bcc
    4414:	b538      	push	{r3, r4, r5, lr}
    4416:	4604      	mov	r4, r0
    4418:	f890 00bc 	ldrb.w	r0, [r0, #188]	; 0xbc
    441c:	460b      	mov	r3, r1
    441e:	f88d 0000 	strb.w	r0, [sp]
    4422:	9800      	ldr	r0, [sp, #0]
    4424:	9000      	str	r0, [sp, #0]
    4426:	f89d 0000 	ldrb.w	r0, [sp]
    442a:	2800      	cmp	r0, #0
    442c:	d13a      	bne.n	44a4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x330>
    442e:	7820      	ldrb	r0, [r4, #0]
    4430:	f884 00bd 	strb.w	r0, [r4, #189]	; 0xbd
    4434:	2bff      	cmp	r3, #255	; 0xff
    4436:	d010      	beq.n	445a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2e6>
    4438:	f104 02bf 	add.w	r2, r4, #191	; 0xbf
    443c:	1e51      	subs	r1, r2, #1
    443e:	4618      	mov	r0, r3
    4440:	f7fe fc30 	bl	2ca4 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    4444:	b130      	cbz	r0, 4454 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2e0>
    4446:	f894 00be 	ldrb.w	r0, [r4, #190]	; 0xbe
    444a:	f040 0002 	orr.w	r0, r0, #2
    444e:	f884 00be 	strb.w	r0, [r4, #190]	; 0xbe
    4452:	e011      	b.n	4478 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x304>
    4454:	f241 0108 	movw	r1, #4104	; 0x1008
    4458:	e021      	b.n	449e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x32a>
    445a:	4813      	ldr	r0, [pc, #76]	; (44a8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x334>)
    445c:	6840      	ldr	r0, [r0, #4]
    445e:	7801      	ldrb	r1, [r0, #0]
    4460:	f3c1 1180 	ubfx	r1, r1, #6, #1
    4464:	f884 10be 	strb.w	r1, [r4, #190]	; 0xbe
    4468:	f8d0 1003 	ldr.w	r1, [r0, #3]
    446c:	f8c4 10bf 	str.w	r1, [r4, #191]	; 0xbf
    4470:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    4474:	f8a4 00c3 	strh.w	r0, [r4, #195]	; 0xc3
    4478:	f994 002e 	ldrsb.w	r0, [r4, #46]	; 0x2e
    447c:	287f      	cmp	r0, #127	; 0x7f
    447e:	d00c      	beq.n	449a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x326>
    4480:	f884 00c5 	strb.w	r0, [r4, #197]	; 0xc5
    4484:	207f      	movs	r0, #127	; 0x7f
    4486:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    448a:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
    448e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    4492:	2220      	movs	r2, #32
    4494:	4905      	ldr	r1, [pc, #20]	; (44ac <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x338>)
    4496:	f00a b840 	b.w	e51a <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    449a:	f640 616c 	movw	r1, #3692	; 0xe6c
    449e:	202d      	movs	r0, #45	; 0x2d
    44a0:	f7fc ffac 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    44a4:	bd38      	pop	{r3, r4, r5, pc}
    44a6:	0000      	.short	0x0000
    44a8:	200000d0 	.word	0x200000d0
    44ac:	0000ed1f 	.word	0x0000ed1f
    44b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    44b4:	4690      	mov	r8, r2
    44b6:	460e      	mov	r6, r1
    44b8:	4604      	mov	r4, r0
    44ba:	2903      	cmp	r1, #3
    44bc:	d004      	beq.n	44c8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x354>
    44be:	f894 0068 	ldrb.w	r0, [r4, #104]	; 0x68
    44c2:	b108      	cbz	r0, 44c8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x354>
    44c4:	2001      	movs	r0, #1
    44c6:	e000      	b.n	44ca <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x356>
    44c8:	2000      	movs	r0, #0
    44ca:	4681      	mov	r9, r0
    44cc:	f003 fca6 	bl	7e1c <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I>
    44d0:	4605      	mov	r5, r0
    44d2:	2e03      	cmp	r6, #3
    44d4:	d003      	beq.n	44de <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x36a>
    44d6:	2701      	movs	r7, #1
    44d8:	2e05      	cmp	r6, #5
    44da:	d005      	beq.n	44e8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x374>
    44dc:	e008      	b.n	44f0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x37c>
    44de:	78a0      	ldrb	r0, [r4, #2]
    44e0:	2702      	movs	r7, #2
    44e2:	f3c0 0040 	ubfx	r0, r0, #1, #1
    44e6:	e001      	b.n	44ec <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x378>
    44e8:	78a0      	ldrb	r0, [r4, #2]
    44ea:	07c0      	lsls	r0, r0, #31
    44ec:	2800      	cmp	r0, #0
    44ee:	d042      	beq.n	4576 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x402>
    44f0:	f1b9 0f00 	cmp.w	r9, #0
    44f4:	d13e      	bne.n	4574 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x400>
    44f6:	4822      	ldr	r0, [pc, #136]	; (4580 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x40c>)
    44f8:	7b80      	ldrb	r0, [r0, #14]
    44fa:	b140      	cbz	r0, 450e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x39a>
    44fc:	f009 fc0e 	bl	dd1c <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>
    4500:	f888 0000 	strb.w	r0, [r8]
    4504:	28ff      	cmp	r0, #255	; 0xff
    4506:	d002      	beq.n	450e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x39a>
    4508:	f7fe fbe6 	bl	2cd8 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>
    450c:	4305      	orrs	r5, r0
    450e:	4e1d      	ldr	r6, [pc, #116]	; (4584 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x410>)
    4510:	f894 2057 	ldrb.w	r2, [r4, #87]	; 0x57
    4514:	f104 0358 	add.w	r3, r4, #88	; 0x58
    4518:	6871      	ldr	r1, [r6, #4]
    451a:	f811 0b03 	ldrb.w	r0, [r1], #3
    451e:	f3c0 1080 	ubfx	r0, r0, #6, #1
    4522:	f009 fb6d 	bl	dc00 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    4526:	f898 1000 	ldrb.w	r1, [r8]
    452a:	29ff      	cmp	r1, #255	; 0xff
    452c:	d004      	beq.n	4538 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3c4>
    452e:	b990      	cbnz	r0, 4556 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3e2>
    4530:	7e60      	ldrb	r0, [r4, #25]
    4532:	4288      	cmp	r0, r1
    4534:	d00f      	beq.n	4556 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3e2>
    4536:	e008      	b.n	454a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d6>
    4538:	b138      	cbz	r0, 454a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d6>
    453a:	6871      	ldr	r1, [r6, #4]
    453c:	f811 0b03 	ldrb.w	r0, [r1], #3
    4540:	f3c0 1080 	ubfx	r0, r0, #6, #1
    4544:	f00a fba2 	bl	ec8c <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x1c>
    4548:	b128      	cbz	r0, 4556 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3e2>
    454a:	2000      	movs	r0, #0
    454c:	78a1      	ldrb	r1, [r4, #2]
    454e:	0749      	lsls	r1, r1, #29
    4550:	d503      	bpl.n	455a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3e6>
    4552:	b990      	cbnz	r0, 457a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x406>
    4554:	e00e      	b.n	4574 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x400>
    4556:	2001      	movs	r0, #1
    4558:	e7f8      	b.n	454c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d8>
    455a:	b975      	cbnz	r5, 457a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x406>
    455c:	7be0      	ldrb	r0, [r4, #15]
    455e:	b108      	cbz	r0, 4564 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3f0>
    4560:	42b8      	cmp	r0, r7
    4562:	d107      	bne.n	4574 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x400>
    4564:	6871      	ldr	r1, [r6, #4]
    4566:	f811 0b03 	ldrb.w	r0, [r1], #3
    456a:	f3c0 1080 	ubfx	r0, r0, #6, #1
    456e:	f00a fb8d 	bl	ec8c <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x1c>
    4572:	b110      	cbz	r0, 457a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x406>
    4574:	2000      	movs	r0, #0
    4576:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    457a:	2001      	movs	r0, #1
    457c:	e7fb      	b.n	4576 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x402>
    457e:	0000      	.short	0x0000
    4580:	20000bcc 	.word	0x20000bcc
    4584:	200000d0 	.word	0x200000d0
    4588:	b570      	push	{r4, r5, r6, lr}
    458a:	4604      	mov	r4, r0
    458c:	8e00      	ldrh	r0, [r0, #48]	; 0x30
    458e:	4d10      	ldr	r5, [pc, #64]	; (45d0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x45c>)
    4590:	1c40      	adds	r0, r0, #1
    4592:	8620      	strh	r0, [r4, #48]	; 0x30
    4594:	7ba8      	ldrb	r0, [r5, #14]
    4596:	2600      	movs	r6, #0
    4598:	b120      	cbz	r0, 45a4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x430>
    459a:	f003 fc25 	bl	7de8 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    459e:	f003 fa49 	bl	7a34 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    45a2:	73ae      	strb	r6, [r5, #14]
    45a4:	702e      	strb	r6, [r5, #0]
    45a6:	f894 0069 	ldrb.w	r0, [r4, #105]	; 0x69
    45aa:	b108      	cbz	r0, 45b0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x43c>
    45ac:	2101      	movs	r1, #1
    45ae:	e00a      	b.n	45c6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x452>
    45b0:	7b60      	ldrb	r0, [r4, #13]
    45b2:	b138      	cbz	r0, 45c4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x450>
    45b4:	8e21      	ldrh	r1, [r4, #48]	; 0x30
    45b6:	4288      	cmp	r0, r1
    45b8:	d804      	bhi.n	45c4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x450>
    45ba:	2101      	movs	r1, #1
    45bc:	4620      	mov	r0, r4
    45be:	f00a fcc4 	bl	ef4a <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    45c2:	bd70      	pop	{r4, r5, r6, pc}
    45c4:	2100      	movs	r1, #0
    45c6:	4620      	mov	r0, r4
    45c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    45cc:	f00a bcbd 	b.w	ef4a <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    45d0:	20000bcc 	.word	0x20000bcc
    45d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    45d8:	4604      	mov	r4, r0
    45da:	f880 3075 	strb.w	r3, [r0, #117]	; 0x75
    45de:	8808      	ldrh	r0, [r1, #0]
    45e0:	f8a4 0076 	strh.w	r0, [r4, #118]	; 0x76
    45e4:	20ff      	movs	r0, #255	; 0xff
    45e6:	f884 0093 	strb.w	r0, [r4, #147]	; 0x93
    45ea:	f64f 70ff 	movw	r0, #65535	; 0xffff
    45ee:	4616      	mov	r6, r2
    45f0:	460d      	mov	r5, r1
    45f2:	f8a4 0094 	strh.w	r0, [r4, #148]	; 0x94
    45f6:	2b00      	cmp	r3, #0
    45f8:	d14b      	bne.n	4692 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x51e>
    45fa:	6928      	ldr	r0, [r5, #16]
    45fc:	f009 fbdd 	bl	ddba <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    4600:	f8a4 008c 	strh.w	r0, [r4, #140]	; 0x8c
    4604:	8b28      	ldrh	r0, [r5, #24]
    4606:	f8a4 008e 	strh.w	r0, [r4, #142]	; 0x8e
    460a:	8b68      	ldrh	r0, [r5, #26]
    460c:	f8a4 0090 	strh.w	r0, [r4, #144]	; 0x90
    4610:	f895 021b 	ldrb.w	r0, [r5, #539]	; 0x21b
    4614:	f884 0092 	strb.w	r0, [r4, #146]	; 0x92
    4618:	7e20      	ldrb	r0, [r4, #24]
    461a:	f104 0151 	add.w	r1, r4, #81	; 0x51
    461e:	460f      	mov	r7, r1
    4620:	2500      	movs	r5, #0
    4622:	b120      	cbz	r0, 462e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4ba>
    4624:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
    4628:	f00a fa3c 	bl	eaa4 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xac>
    462c:	b940      	cbnz	r0, 4640 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4cc>
    462e:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    4632:	b170      	cbz	r0, 4652 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4de>
    4634:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
    4638:	4639      	mov	r1, r7
    463a:	f00a fa2a 	bl	ea92 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x9a>
    463e:	b140      	cbz	r0, 4652 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4de>
    4640:	f8d4 0051 	ldr.w	r0, [r4, #81]	; 0x51
    4644:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    4648:	f8b4 0055 	ldrh.w	r0, [r4, #85]	; 0x55
    464c:	f8a4 0084 	strh.w	r0, [r4, #132]	; 0x84
    4650:	e003      	b.n	465a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4e6>
    4652:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
    4656:	f8a4 5084 	strh.w	r5, [r4, #132]	; 0x84
    465a:	4815      	ldr	r0, [pc, #84]	; (46b0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x53c>)
    465c:	2eff      	cmp	r6, #255	; 0xff
    465e:	6840      	ldr	r0, [r0, #4]
    4660:	7801      	ldrb	r1, [r0, #0]
    4662:	f3c1 1180 	ubfx	r1, r1, #6, #1
    4666:	f884 1079 	strb.w	r1, [r4, #121]	; 0x79
    466a:	f850 1f03 	ldr.w	r1, [r0, #3]!
    466e:	d017      	beq.n	46a0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x52c>
    4670:	f8c4 1086 	str.w	r1, [r4, #134]	; 0x86
    4674:	8880      	ldrh	r0, [r0, #4]
    4676:	f8a4 008a 	strh.w	r0, [r4, #138]	; 0x8a
    467a:	f104 027a 	add.w	r2, r4, #122	; 0x7a
    467e:	1e51      	subs	r1, r2, #1
    4680:	4630      	mov	r0, r6
    4682:	f7fe fb0f 	bl	2ca4 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    4686:	b130      	cbz	r0, 4696 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x522>
    4688:	f814 0f79 	ldrb.w	r0, [r4, #121]!
    468c:	f040 0002 	orr.w	r0, r0, #2
    4690:	7020      	strb	r0, [r4, #0]
    4692:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4696:	f640 418b 	movw	r1, #3211	; 0xc8b
    469a:	202d      	movs	r0, #45	; 0x2d
    469c:	f7fc feae 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    46a0:	f844 1f7a 	str.w	r1, [r4, #122]!
    46a4:	8880      	ldrh	r0, [r0, #4]
    46a6:	80a0      	strh	r0, [r4, #4]
    46a8:	60e5      	str	r5, [r4, #12]
    46aa:	8225      	strh	r5, [r4, #16]
    46ac:	e7f1      	b.n	4692 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x51e>
    46ae:	0000      	.short	0x0000
    46b0:	200000d0 	.word	0x200000d0
    46b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    46b6:	4604      	mov	r4, r0
    46b8:	20ff      	movs	r0, #255	; 0xff
    46ba:	f88d 0000 	strb.w	r0, [sp]
    46be:	2601      	movs	r6, #1
    46c0:	466a      	mov	r2, sp
    46c2:	2105      	movs	r1, #5
    46c4:	4620      	mov	r0, r4
    46c6:	f7ff fef3 	bl	44b0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x33c>
    46ca:	b160      	cbz	r0, 46e6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x572>
    46cc:	4d28      	ldr	r5, [pc, #160]	; (4770 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5fc>)
    46ce:	4f27      	ldr	r7, [pc, #156]	; (476c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5f8>)
    46d0:	6869      	ldr	r1, [r5, #4]
    46d2:	7bfa      	ldrb	r2, [r7, #15]
    46d4:	f107 0310 	add.w	r3, r7, #16
    46d8:	f811 0b03 	ldrb.w	r0, [r1], #3
    46dc:	f3c0 1080 	ubfx	r0, r0, #6, #1
    46e0:	f009 fa8e 	bl	dc00 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    46e4:	b110      	cbz	r0, 46ec <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x578>
    46e6:	2600      	movs	r6, #0
    46e8:	4630      	mov	r0, r6
    46ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    46ec:	686a      	ldr	r2, [r5, #4]
    46ee:	69e0      	ldr	r0, [r4, #28]
    46f0:	7812      	ldrb	r2, [r2, #0]
    46f2:	f810 1fa5 	ldrb.w	r1, [r0, #165]!
    46f6:	f3c2 1240 	ubfx	r2, r2, #5, #1
    46fa:	4011      	ands	r1, r2
    46fc:	7001      	strb	r1, [r0, #0]
    46fe:	2201      	movs	r2, #1
    4700:	4620      	mov	r0, r4
    4702:	69e1      	ldr	r1, [r4, #28]
    4704:	f000 f89a 	bl	483c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6c8>
    4708:	2300      	movs	r3, #0
    470a:	f89d 2000 	ldrb.w	r2, [sp]
    470e:	4620      	mov	r0, r4
    4710:	69e1      	ldr	r1, [r4, #28]
    4712:	f7ff ff5f 	bl	45d4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x460>
    4716:	2211      	movs	r2, #17
    4718:	4916      	ldr	r1, [pc, #88]	; (4774 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x600>)
    471a:	f104 006c 	add.w	r0, r4, #108	; 0x6c
    471e:	f009 fefc 	bl	e51a <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    4722:	69e0      	ldr	r0, [r4, #28]
    4724:	2205      	movs	r2, #5
    4726:	8801      	ldrh	r1, [r0, #0]
    4728:	f8a4 10b0 	strh.w	r1, [r4, #176]	; 0xb0
    472c:	f890 00a5 	ldrb.w	r0, [r0, #165]	; 0xa5
    4730:	f884 00b2 	strb.w	r0, [r4, #178]	; 0xb2
    4734:	4910      	ldr	r1, [pc, #64]	; (4778 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x604>)
    4736:	f104 00a6 	add.w	r0, r4, #166	; 0xa6
    473a:	f009 feee 	bl	e51a <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    473e:	2100      	movs	r1, #0
    4740:	69e0      	ldr	r0, [r4, #28]
    4742:	7039      	strb	r1, [r7, #0]
    4744:	460a      	mov	r2, r1
    4746:	4621      	mov	r1, r4
    4748:	f000 fa86 	bl	4c58 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ>
    474c:	6868      	ldr	r0, [r5, #4]
    474e:	69e1      	ldr	r1, [r4, #28]
    4750:	f8d0 2003 	ldr.w	r2, [r0, #3]
    4754:	f841 2f03 	str.w	r2, [r1, #3]!
    4758:	f8b0 2007 	ldrh.w	r2, [r0, #7]
    475c:	808a      	strh	r2, [r1, #4]
    475e:	7800      	ldrb	r0, [r0, #0]
    4760:	69e1      	ldr	r1, [r4, #28]
    4762:	f3c0 1080 	ubfx	r0, r0, #6, #1
    4766:	7088      	strb	r0, [r1, #2]
    4768:	e7be      	b.n	46e8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x574>
    476a:	0000      	.short	0x0000
    476c:	20000bcc 	.word	0x20000bcc
    4770:	200000d0 	.word	0x200000d0
    4774:	0000eccf 	.word	0x0000eccf
    4778:	0000ecbf 	.word	0x0000ecbf
    477c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    477e:	4604      	mov	r4, r0
    4780:	20ff      	movs	r0, #255	; 0xff
    4782:	f88d 0000 	strb.w	r0, [sp]
    4786:	2501      	movs	r5, #1
    4788:	466a      	mov	r2, sp
    478a:	2103      	movs	r1, #3
    478c:	4620      	mov	r0, r4
    478e:	f7ff fe8f 	bl	44b0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x33c>
    4792:	b1e8      	cbz	r0, 47d0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x65c>
    4794:	7b20      	ldrb	r0, [r4, #12]
    4796:	b120      	cbz	r0, 47a2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x62e>
    4798:	f89d 1000 	ldrb.w	r1, [sp]
    479c:	4620      	mov	r0, r4
    479e:	f7ff fe39 	bl	4414 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2a0>
    47a2:	4e0d      	ldr	r6, [pc, #52]	; (47d8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x664>)
    47a4:	2100      	movs	r1, #0
    47a6:	6870      	ldr	r0, [r6, #4]
    47a8:	8001      	strh	r1, [r0, #0]
    47aa:	2104      	movs	r1, #4
    47ac:	f009 fd3c 	bl	e228 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
    47b0:	4620      	mov	r0, r4
    47b2:	f000 f88b 	bl	48cc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x758>
    47b6:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
    47ba:	6c21      	ldr	r1, [r4, #64]	; 0x40
    47bc:	6870      	ldr	r0, [r6, #4]
    47be:	f009 fd6a 	bl	e296 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI>
    47c2:	4906      	ldr	r1, [pc, #24]	; (47dc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x668>)
    47c4:	2005      	movs	r0, #5
    47c6:	7008      	strb	r0, [r1, #0]
    47c8:	6870      	ldr	r0, [r6, #4]
    47ca:	f003 fda1 	bl	8310 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    47ce:	e000      	b.n	47d2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x65e>
    47d0:	2500      	movs	r5, #0
    47d2:	4628      	mov	r0, r5
    47d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    47d6:	0000      	.short	0x0000
    47d8:	200000d0 	.word	0x200000d0
    47dc:	20000bcc 	.word	0x20000bcc
    47e0:	b570      	push	{r4, r5, r6, lr}
    47e2:	4604      	mov	r4, r0
    47e4:	460e      	mov	r6, r1
    47e6:	7e40      	ldrb	r0, [r0, #25]
    47e8:	f7fe fa36 	bl	2c58 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    47ec:	0005      	movs	r5, r0
    47ee:	d019      	beq.n	4824 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6b0>
    47f0:	2110      	movs	r1, #16
    47f2:	f009 fc63 	bl	e0bc <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    47f6:	2800      	cmp	r0, #0
    47f8:	d114      	bne.n	4824 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6b0>
    47fa:	2001      	movs	r0, #1
    47fc:	f884 005e 	strb.w	r0, [r4, #94]	; 0x5e
    4800:	f104 015f 	add.w	r1, r4, #95	; 0x5f
    4804:	4632      	mov	r2, r6
    4806:	460c      	mov	r4, r1
    4808:	4628      	mov	r0, r5
    480a:	f009 fa29 	bl	dc60 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    480e:	4621      	mov	r1, r4
    4810:	4c05      	ldr	r4, [pc, #20]	; (4828 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6b4>)
    4812:	6860      	ldr	r0, [r4, #4]
    4814:	f009 fd23 	bl	e25e <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>
    4818:	6860      	ldr	r0, [r4, #4]
    481a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    481e:	2101      	movs	r1, #1
    4820:	f009 bd23 	b.w	e26a <sym_NAGMMCXDNSRJLJ55T6DS4CG2FNZEN6Y562ZTFRY>
    4824:	bd70      	pop	{r4, r5, r6, pc}
    4826:	0000      	.short	0x0000
    4828:	200000d0 	.word	0x200000d0
    482c:	4802      	ldr	r0, [pc, #8]	; (4838 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6c4>)
    482e:	2101      	movs	r1, #1
    4830:	6800      	ldr	r0, [r0, #0]
    4832:	f7ff bb19 	b.w	3e68 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x30>
    4836:	0000      	.short	0x0000
    4838:	200000d0 	.word	0x200000d0
    483c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4840:	4e21      	ldr	r6, [pc, #132]	; (48c8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x754>)
    4842:	4680      	mov	r8, r0
    4844:	460c      	mov	r4, r1
    4846:	6870      	ldr	r0, [r6, #4]
    4848:	4615      	mov	r5, r2
    484a:	f850 1f0f 	ldr.w	r1, [r0, #15]!
    484e:	6161      	str	r1, [r4, #20]
    4850:	6841      	ldr	r1, [r0, #4]
    4852:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    4856:	61e1      	str	r1, [r4, #28]
    4858:	8940      	ldrh	r0, [r0, #10]
    485a:	f009 faaa 	bl	ddb2 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    485e:	4607      	mov	r7, r0
    4860:	6120      	str	r0, [r4, #16]
    4862:	6870      	ldr	r0, [r6, #4]
    4864:	4639      	mov	r1, r7
    4866:	7d80      	ldrb	r0, [r0, #22]
    4868:	f009 fc1f 	bl	e0aa <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    486c:	84a0      	strh	r0, [r4, #36]	; 0x24
    486e:	6870      	ldr	r0, [r6, #4]
    4870:	4639      	mov	r1, r7
    4872:	f8b0 0017 	ldrh.w	r0, [r0, #23]
    4876:	f009 fc14 	bl	e0a2 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
    487a:	6220      	str	r0, [r4, #32]
    487c:	6870      	ldr	r0, [r6, #4]
    487e:	f830 1f1b 	ldrh.w	r1, [r0, #27]!
    4882:	8321      	strh	r1, [r4, #24]
    4884:	8841      	ldrh	r1, [r0, #2]
    4886:	8361      	strh	r1, [r4, #26]
    4888:	6841      	ldr	r1, [r0, #4]
    488a:	f8c4 10a6 	str.w	r1, [r4, #166]	; 0xa6
    488e:	7a01      	ldrb	r1, [r0, #8]
    4890:	f884 10aa 	strb.w	r1, [r4, #170]	; 0xaa
    4894:	7a41      	ldrb	r1, [r0, #9]
    4896:	f001 011f 	and.w	r1, r1, #31
    489a:	f884 10b1 	strb.w	r1, [r4, #177]	; 0xb1
    489e:	7a40      	ldrb	r0, [r0, #9]
    48a0:	0940      	lsrs	r0, r0, #5
    48a2:	f884 021b 	strb.w	r0, [r4, #539]	; 0x21b
    48a6:	f104 0062 	add.w	r0, r4, #98	; 0x62
    48aa:	7205      	strb	r5, [r0, #8]
    48ac:	7245      	strb	r5, [r0, #9]
    48ae:	21ff      	movs	r1, #255	; 0xff
    48b0:	7281      	strb	r1, [r0, #10]
    48b2:	2100      	movs	r1, #0
    48b4:	3836      	subs	r0, #54	; 0x36
    48b6:	f009 fedf 	bl	e678 <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>
    48ba:	f898 000e 	ldrb.w	r0, [r8, #14]
    48be:	f884 006e 	strb.w	r0, [r4, #110]	; 0x6e
    48c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    48c6:	0000      	.short	0x0000
    48c8:	200000d0 	.word	0x200000d0
    48cc:	b570      	push	{r4, r5, r6, lr}
    48ce:	4d07      	ldr	r5, [pc, #28]	; (48ec <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x778>)
    48d0:	4604      	mov	r4, r0
    48d2:	f100 0151 	add.w	r1, r0, #81	; 0x51
    48d6:	6868      	ldr	r0, [r5, #4]
    48d8:	f009 fcce 	bl	e278 <sym_UDZO6WOEWJ2CNEYVP45GSHBVFT4OP6GEANP3NQY>
    48dc:	f894 1050 	ldrb.w	r1, [r4, #80]	; 0x50
    48e0:	6868      	ldr	r0, [r5, #4]
    48e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    48e6:	f009 bccd 	b.w	e284 <sym_YBOODJ7VBLXRRILCBQXIORIXU3GHRAYK6WULLQY>
    48ea:	0000      	.short	0x0000
    48ec:	200000d0 	.word	0x200000d0
    48f0:	000040f5 	.word	0x000040f5
    48f4:	00003f7d 	.word	0x00003f7d
    48f8:	00004071 	.word	0x00004071
    48fc:	00000000 	.word	0x00000000
    4900:	00004049 	.word	0x00004049
    4904:	000040a1 	.word	0x000040a1
    4908:	0000ecb3 	.word	0x0000ecb3
    490c:	0000ecb9 	.word	0x0000ecb9
    4910:	00004309 	.word	0x00004309
    4914:	0000432d 	.word	0x0000432d
    4918:	0000482d 	.word	0x0000482d
    491c:	0000490c 	.word	0x0000490c
    4920:	00004904 	.word	0x00004904
    4924:	00004900 	.word	0x00004900

00004928 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>:
    4928:	b510      	push	{r4, lr}
    492a:	1e42      	subs	r2, r0, #1
    492c:	2a02      	cmp	r2, #2
    492e:	d901      	bls.n	4934 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0xc>
    4930:	21ca      	movs	r1, #202	; 0xca
    4932:	e009      	b.n	4948 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x20>
    4934:	1e40      	subs	r0, r0, #1
    4936:	2910      	cmp	r1, #16
    4938:	d009      	beq.n	494e <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x26>
    493a:	2912      	cmp	r1, #18
    493c:	d00c      	beq.n	4958 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x30>
    493e:	2913      	cmp	r1, #19
    4940:	d00a      	beq.n	4958 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x30>
    4942:	2915      	cmp	r1, #21
    4944:	d005      	beq.n	4952 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x2a>
    4946:	21d8      	movs	r1, #216	; 0xd8
    4948:	202f      	movs	r0, #47	; 0x2f
    494a:	f7fc fd57 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    494e:	4905      	ldr	r1, [pc, #20]	; (4964 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    4950:	e004      	b.n	495c <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x34>
    4952:	4904      	ldr	r1, [pc, #16]	; (4964 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    4954:	1d89      	adds	r1, r1, #6
    4956:	e001      	b.n	495c <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x34>
    4958:	4902      	ldr	r1, [pc, #8]	; (4964 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    495a:	1f89      	subs	r1, r1, #6
    495c:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    4960:	bd10      	pop	{r4, pc}
    4962:	0000      	.short	0x0000
    4964:	0000ef1a 	.word	0x0000ef1a

00004968 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>:
    4968:	1e42      	subs	r2, r0, #1
    496a:	b510      	push	{r4, lr}
    496c:	b2d2      	uxtb	r2, r2
    496e:	2a01      	cmp	r2, #1
    4970:	d903      	bls.n	497a <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x12>
    4972:	291d      	cmp	r1, #29
    4974:	d001      	beq.n	497a <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x12>
    4976:	21ee      	movs	r1, #238	; 0xee
    4978:	e00d      	b.n	4996 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x2e>
    497a:	2913      	cmp	r1, #19
    497c:	d013      	beq.n	49a6 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x3e>
    497e:	dc04      	bgt.n	498a <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x22>
    4980:	2910      	cmp	r1, #16
    4982:	d00b      	beq.n	499c <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x34>
    4984:	2912      	cmp	r1, #18
    4986:	d104      	bne.n	4992 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x2a>
    4988:	e00d      	b.n	49a6 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x3e>
    498a:	2915      	cmp	r1, #21
    498c:	d008      	beq.n	49a0 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x38>
    498e:	291d      	cmp	r1, #29
    4990:	d00e      	beq.n	49b0 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x48>
    4992:	f44f 7181 	mov.w	r1, #258	; 0x102
    4996:	202f      	movs	r0, #47	; 0x2f
    4998:	f7fc fd30 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    499c:	4807      	ldr	r0, [pc, #28]	; (49bc <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    499e:	e004      	b.n	49aa <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x42>
    49a0:	4806      	ldr	r0, [pc, #24]	; (49bc <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    49a2:	3008      	adds	r0, #8
    49a4:	e001      	b.n	49aa <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x42>
    49a6:	4805      	ldr	r0, [pc, #20]	; (49bc <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    49a8:	1d00      	adds	r0, r0, #4
    49aa:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
    49ae:	bd10      	pop	{r4, pc}
    49b0:	f240 315a 	movw	r1, #858	; 0x35a
    49b4:	fb10 f001 	smulbb	r0, r0, r1
    49b8:	bd10      	pop	{r4, pc}
    49ba:	0000      	.short	0x0000
    49bc:	0000ef08 	.word	0x0000ef08

000049c0 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>:
    49c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    49c4:	4604      	mov	r4, r0
    49c6:	f890 00e0 	ldrb.w	r0, [r0, #224]	; 0xe0
    49ca:	4616      	mov	r6, r2
    49cc:	460f      	mov	r7, r1
    49ce:	2800      	cmp	r0, #0
    49d0:	d15e      	bne.n	4a90 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xd0>
    49d2:	4621      	mov	r1, r4
    49d4:	484d      	ldr	r0, [pc, #308]	; (4b0c <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x14c>)
    49d6:	f006 fa57 	bl	ae88 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    49da:	4605      	mov	r5, r0
    49dc:	2820      	cmp	r0, #32
    49de:	d057      	beq.n	4a90 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xd0>
    49e0:	2250      	movs	r2, #80	; 0x50
    49e2:	2100      	movs	r1, #0
    49e4:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
    49e8:	f00c faa6 	bl	10f38 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    49ec:	f884 50c8 	strb.w	r5, [r4, #200]	; 0xc8
    49f0:	2501      	movs	r5, #1
    49f2:	f8c4 70cc 	str.w	r7, [r4, #204]	; 0xcc
    49f6:	f884 50e0 	strb.w	r5, [r4, #224]	; 0xe0
    49fa:	b137      	cbz	r7, 4a0a <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x4a>
    49fc:	f7fe feba 	bl	3774 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>
    4a00:	f000 0007 	and.w	r0, r0, #7
    4a04:	1c40      	adds	r0, r0, #1
    4a06:	f887 024c 	strb.w	r0, [r7, #588]	; 0x24c
    4a0a:	4620      	mov	r0, r4
    4a0c:	f00a fc3a 	bl	f284 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2ba>
    4a10:	f8a4 00f0 	strh.w	r0, [r4, #240]	; 0xf0
    4a14:	2002      	movs	r0, #2
    4a16:	f884 00f2 	strb.w	r0, [r4, #242]	; 0xf2
    4a1a:	46a8      	mov	r8, r5
    4a1c:	f884 50f3 	strb.w	r5, [r4, #243]	; 0xf3
    4a20:	2500      	movs	r5, #0
    4a22:	f804 5fe8 	strb.w	r5, [r4, #232]!
    4a26:	f007 fbbb 	bl	c1a0 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    4a2a:	4607      	mov	r7, r0
    4a2c:	f00c f880 	bl	10b30 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>
    4a30:	8921      	ldrh	r1, [r4, #8]
    4a32:	3ce8      	subs	r4, #232	; 0xe8
    4a34:	4288      	cmp	r0, r1
    4a36:	d800      	bhi.n	4a3a <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x7a>
    4a38:	4608      	mov	r0, r1
    4a3a:	4438      	add	r0, r7
    4a3c:	30cc      	adds	r0, #204	; 0xcc
    4a3e:	b287      	uxth	r7, r0
    4a40:	4620      	mov	r0, r4
    4a42:	f00a f8e2 	bl	ec0a <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    4a46:	b330      	cbz	r0, 4a96 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xd6>
    4a48:	f00b ff78 	bl	1093c <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
    4a4c:	f500 60cd 	add.w	r0, r0, #1640	; 0x668
    4a50:	b281      	uxth	r1, r0
    4a52:	4630      	mov	r0, r6
    4a54:	f007 fcc4 	bl	c3e0 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    4a58:	4430      	add	r0, r6
    4a5a:	f8c4 00ec 	str.w	r0, [r4, #236]	; 0xec
    4a5e:	3490      	adds	r4, #144	; 0x90
    4a60:	f006 fc22 	bl	b2a8 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    4a64:	19c0      	adds	r0, r0, r7
    4a66:	4169      	adcs	r1, r5
    4a68:	e9c4 011a 	strd	r0, r1, [r4, #104]	; 0x68
    4a6c:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
    4a70:	f824 5c6e 	strh.w	r5, [r4, #-110]
    4a74:	2001      	movs	r0, #1
    4a76:	f00a fa40 	bl	eefa <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
    4a7a:	f500 7088 	add.w	r0, r0, #272	; 0x110
    4a7e:	1a30      	subs	r0, r6, r0
    4a80:	6460      	str	r0, [r4, #68]	; 0x44
    4a82:	f04f 30ff 	mov.w	r0, #4294967295
    4a86:	0841      	lsrs	r1, r0, #1
    4a88:	e9c4 011e 	strd	r0, r1, [r4, #120]	; 0x78
    4a8c:	3c90      	subs	r4, #144	; 0x90
    4a8e:	e025      	b.n	4adc <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x11c>
    4a90:	200c      	movs	r0, #12
    4a92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4a96:	2100      	movs	r1, #0
    4a98:	4620      	mov	r0, r4
    4a9a:	f00a fb45 	bl	f128 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x15e>
    4a9e:	f8df 8070 	ldr.w	r8, [pc, #112]	; 4b10 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x150>
    4aa2:	f8c4 00ec 	str.w	r0, [r4, #236]	; 0xec
    4aa6:	2000      	movs	r0, #0
    4aa8:	f8b8 1004 	ldrh.w	r1, [r8, #4]
    4aac:	b149      	cbz	r1, 4ac2 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x102>
    4aae:	8c61      	ldrh	r1, [r4, #34]	; 0x22
    4ab0:	b139      	cbz	r1, 4ac2 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x102>
    4ab2:	f7fe fe5f 	bl	3774 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>
    4ab6:	f8b8 1004 	ldrh.w	r1, [r8, #4]
    4aba:	fbb0 f2f1 	udiv	r2, r0, r1
    4abe:	fb01 0012 	mls	r0, r1, r2, r0
    4ac2:	4407      	add	r7, r0
    4ac4:	f006 fbf0 	bl	b2a8 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    4ac8:	19c0      	adds	r0, r0, r7
    4aca:	4169      	adcs	r1, r5
    4acc:	e9c4 013e 	strd	r0, r1, [r4, #248]	; 0xf8
    4ad0:	b19e      	cbz	r6, 4afa <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x13a>
    4ad2:	1980      	adds	r0, r0, r6
    4ad4:	eb51 0105 	adcs.w	r1, r1, r5
    4ad8:	e9c4 0142 	strd	r0, r1, [r4, #264]	; 0x108
    4adc:	f894 00c8 	ldrb.w	r0, [r4, #200]	; 0xc8
    4ae0:	f104 01e8 	add.w	r1, r4, #232	; 0xe8
    4ae4:	f00a fbcc 	bl	f280 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2b6>
    4ae8:	b158      	cbz	r0, 4b02 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x142>
    4aea:	f8a4 5100 	strh.w	r5, [r4, #256]	; 0x100
    4aee:	2100      	movs	r1, #0
    4af0:	4620      	mov	r0, r4
    4af2:	f00a f8ba 	bl	ec6a <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    4af6:	2000      	movs	r0, #0
    4af8:	e7cb      	b.n	4a92 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xd2>
    4afa:	f04f 30ff 	mov.w	r0, #4294967295
    4afe:	0841      	lsrs	r1, r0, #1
    4b00:	e7ea      	b.n	4ad8 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x118>
    4b02:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
    4b06:	2030      	movs	r0, #48	; 0x30
    4b08:	f7fc fc78 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4b0c:	0000f3fd 	.word	0x0000f3fd
    4b10:	200000e0 	.word	0x200000e0

00004b14 <sym_YZMCMF2VDK5EZ5GH5K4G77V4XY7KHBJNPGELPVQ>:
    4b14:	4901      	ldr	r1, [pc, #4]	; (4b1c <sym_YZMCMF2VDK5EZ5GH5K4G77V4XY7KHBJNPGELPVQ+0x8>)
    4b16:	8088      	strh	r0, [r1, #4]
    4b18:	4770      	bx	lr
    4b1a:	0000      	.short	0x0000
    4b1c:	200000e0 	.word	0x200000e0

00004b20 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ>:
    4b20:	4805      	ldr	r0, [pc, #20]	; (4b38 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ+0x18>)
    4b22:	2100      	movs	r1, #0
    4b24:	7001      	strb	r1, [r0, #0]
    4b26:	2201      	movs	r2, #1
    4b28:	7082      	strb	r2, [r0, #2]
    4b2a:	7041      	strb	r1, [r0, #1]
    4b2c:	f242 7110 	movw	r1, #10000	; 0x2710
    4b30:	8081      	strh	r1, [r0, #4]
    4b32:	f000 b803 	b.w	4b3c <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>
    4b36:	0000      	.short	0x0000
    4b38:	200000e0 	.word	0x200000e0

00004b3c <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>:
    4b3c:	b51c      	push	{r2, r3, r4, lr}
    4b3e:	4909      	ldr	r1, [pc, #36]	; (4b64 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x28>)
    4b40:	e9d1 0100 	ldrd	r0, r1, [r1]
    4b44:	e9cd 0100 	strd	r0, r1, [sp]
    4b48:	e002      	b.n	4b50 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x14>
    4b4a:	9800      	ldr	r0, [sp, #0]
    4b4c:	f00a fa11 	bl	ef72 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>
    4b50:	4668      	mov	r0, sp
    4b52:	f7fc fe91 	bl	1878 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    4b56:	2800      	cmp	r0, #0
    4b58:	d0f7      	beq.n	4b4a <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0xe>
    4b5a:	f000 f8a9 	bl	4cb0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x58>
    4b5e:	2000      	movs	r0, #0
    4b60:	bd1c      	pop	{r2, r3, r4, pc}
    4b62:	0000      	.short	0x0000
    4b64:	00005410 	.word	0x00005410

00004b68 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI>:
    4b68:	4901      	ldr	r1, [pc, #4]	; (4b70 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI+0x8>)
    4b6a:	7008      	strb	r0, [r1, #0]
    4b6c:	4770      	bx	lr
    4b6e:	0000      	.short	0x0000
    4b70:	200000e0 	.word	0x200000e0

00004b74 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA>:
    4b74:	4908      	ldr	r1, [pc, #32]	; (4b98 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA+0x24>)
    4b76:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    4b7a:	fbb1 f1f2 	udiv	r1, r1, r2
    4b7e:	b510      	push	{r4, lr}
    4b80:	f501 7125 	add.w	r1, r1, #660	; 0x294
    4b84:	f009 fd91 	bl	e6aa <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>
    4b88:	f640 0148 	movw	r1, #2120	; 0x848
    4b8c:	4288      	cmp	r0, r1
    4b8e:	d300      	bcc.n	4b92 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA+0x1e>
    4b90:	4608      	mov	r0, r1
    4b92:	b280      	uxth	r0, r0
    4b94:	bd10      	pop	{r4, pc}
    4b96:	0000      	.short	0x0000
    4b98:	0001527d 	.word	0x0001527d

00004b9c <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY>:
    4b9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4ba0:	4c0f      	ldr	r4, [pc, #60]	; (4be0 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x44>)
    4ba2:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
    4ba6:	f003 facd 	bl	8144 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    4baa:	4605      	mov	r5, r0
    4bac:	4602      	mov	r2, r0
    4bae:	4639      	mov	r1, r7
    4bb0:	4630      	mov	r0, r6
    4bb2:	f009 f908 	bl	ddc6 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>
    4bb6:	4606      	mov	r6, r0
    4bb8:	68a0      	ldr	r0, [r4, #8]
    4bba:	4286      	cmp	r6, r0
    4bbc:	d005      	beq.n	4bca <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x2e>
    4bbe:	6921      	ldr	r1, [r4, #16]
    4bc0:	1a30      	subs	r0, r6, r0
    4bc2:	4408      	add	r0, r1
    4bc4:	6120      	str	r0, [r4, #16]
    4bc6:	f006 faa1 	bl	b10c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    4bca:	60a6      	str	r6, [r4, #8]
    4bcc:	42b5      	cmp	r5, r6
    4bce:	d801      	bhi.n	4bd4 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x38>
    4bd0:	7860      	ldrb	r0, [r4, #1]
    4bd2:	b110      	cbz	r0, 4bda <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x3e>
    4bd4:	2000      	movs	r0, #0
    4bd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4bda:	2001      	movs	r0, #1
    4bdc:	e7fb      	b.n	4bd6 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x3a>
    4bde:	0000      	.short	0x0000
    4be0:	200000e0 	.word	0x200000e0

00004be4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>:
    4be4:	b510      	push	{r4, lr}
    4be6:	4604      	mov	r4, r0
    4be8:	2906      	cmp	r1, #6
    4bea:	d22e      	bcs.n	4c4a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x66>
    4bec:	e8df f001 	tbb	[pc, r1]
    4bf0:	14031105 	.word	0x14031105
    4bf4:	2815      	.short	0x2815
    4bf6:	2100      	movs	r1, #0
    4bf8:	e006      	b.n	4c08 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x24>
    4bfa:	f8d4 02ac 	ldr.w	r0, [r4, #684]	; 0x2ac
    4bfe:	b110      	cbz	r0, 4c06 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x22>
    4c00:	4620      	mov	r0, r4
    4c02:	f00a fad0 	bl	f1a6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1dc>
    4c06:	2101      	movs	r1, #1
    4c08:	4620      	mov	r0, r4
    4c0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4c0e:	f000 b8f7 	b.w	4e00 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1a8>
    4c12:	2003      	movs	r0, #3
    4c14:	f884 025c 	strb.w	r0, [r4, #604]	; 0x25c
    4c18:	bd10      	pop	{r4, pc}
    4c1a:	f003 fa99 	bl	8150 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI>
    4c1e:	f8c4 02ac 	str.w	r0, [r4, #684]	; 0x2ac
    4c22:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    4c26:	f003 fb57 	bl	82d8 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    4c2a:	f8d4 12ac 	ldr.w	r1, [r4, #684]	; 0x2ac
    4c2e:	1a09      	subs	r1, r1, r0
    4c30:	4808      	ldr	r0, [pc, #32]	; (4c54 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x70>)
    4c32:	6882      	ldr	r2, [r0, #8]
    4c34:	440a      	add	r2, r1
    4c36:	6082      	str	r2, [r0, #8]
    4c38:	68c2      	ldr	r2, [r0, #12]
    4c3a:	4411      	add	r1, r2
    4c3c:	60c1      	str	r1, [r0, #12]
    4c3e:	bd10      	pop	{r4, pc}
    4c40:	4620      	mov	r0, r4
    4c42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4c46:	f00a ba99 	b.w	f17c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1b2>
    4c4a:	f44f 61e8 	mov.w	r1, #1856	; 0x740
    4c4e:	2030      	movs	r0, #48	; 0x30
    4c50:	f7fc fbd4 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4c54:	200000e0 	.word	0x200000e0

00004c58 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ>:
    4c58:	b570      	push	{r4, r5, r6, lr}
    4c5a:	460c      	mov	r4, r1
    4c5c:	4605      	mov	r5, r0
    4c5e:	b112      	cbz	r2, 4c66 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xe>
    4c60:	f240 716a 	movw	r1, #1898	; 0x76a
    4c64:	e010      	b.n	4c88 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x30>
    4c66:	f003 fa6d 	bl	8144 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    4c6a:	4601      	mov	r1, r0
    4c6c:	2200      	movs	r2, #0
    4c6e:	4620      	mov	r0, r4
    4c70:	f00a fb78 	bl	f364 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x39a>
    4c74:	f894 00c8 	ldrb.w	r0, [r4, #200]	; 0xc8
    4c78:	462a      	mov	r2, r5
    4c7a:	4905      	ldr	r1, [pc, #20]	; (4c90 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x38>)
    4c7c:	f005 ffba 	bl	abf4 <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI>
    4c80:	2800      	cmp	r0, #0
    4c82:	d104      	bne.n	4c8e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x36>
    4c84:	f240 7153 	movw	r1, #1875	; 0x753
    4c88:	2030      	movs	r0, #48	; 0x30
    4c8a:	f7fc fbb7 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4c8e:	bd70      	pop	{r4, r5, r6, pc}
    4c90:	0000f49f 	.word	0x0000f49f
    4c94:	b510      	push	{r4, lr}
    4c96:	280c      	cmp	r0, #12
    4c98:	d304      	bcc.n	4ca4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4c>
    4c9a:	f240 318b 	movw	r1, #907	; 0x38b
    4c9e:	2006      	movs	r0, #6
    4ca0:	f7fc fbac 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4ca4:	4901      	ldr	r1, [pc, #4]	; (4cac <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x54>)
    4ca6:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    4caa:	bd10      	pop	{r4, pc}
    4cac:	0000542c 	.word	0x0000542c
    4cb0:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    4cb4:	4d15      	ldr	r5, [pc, #84]	; (4d0c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xb4>)
    4cb6:	2001      	movs	r0, #1
    4cb8:	7068      	strb	r0, [r5, #1]
    4cba:	2400      	movs	r4, #0
    4cbc:	f64f 76ff 	movw	r6, #65535	; 0xffff
    4cc0:	e00b      	b.n	4cda <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x82>
    4cc2:	2100      	movs	r1, #0
    4cc4:	f008 fded 	bl	d8a2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    4cc8:	0007      	movs	r7, r0
    4cca:	d009      	beq.n	4ce0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x88>
    4ccc:	f897 02a4 	ldrb.w	r0, [r7, #676]	; 0x2a4
    4cd0:	f005 ffc2 	bl	ac58 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    4cd4:	4638      	mov	r0, r7
    4cd6:	f00a fb38 	bl	f34a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x380>
    4cda:	9400      	str	r4, [sp, #0]
    4cdc:	9401      	str	r4, [sp, #4]
    4cde:	e00d      	b.n	4cfc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xa4>
    4ce0:	f44f 7190 	mov.w	r1, #288	; 0x120
    4ce4:	2030      	movs	r0, #48	; 0x30
    4ce6:	f7fc fb89 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4cea:	9800      	ldr	r0, [sp, #0]
    4cec:	b130      	cbz	r0, 4cfc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xa4>
    4cee:	f890 125c 	ldrb.w	r1, [r0, #604]	; 0x25c
    4cf2:	b119      	cbz	r1, 4cfc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xa4>
    4cf4:	8800      	ldrh	r0, [r0, #0]
    4cf6:	42b0      	cmp	r0, r6
    4cf8:	d1e3      	bne.n	4cc2 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6a>
    4cfa:	e004      	b.n	4d06 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xae>
    4cfc:	4668      	mov	r0, sp
    4cfe:	f7fc fdbb 	bl	1878 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    4d02:	2800      	cmp	r0, #0
    4d04:	d0f1      	beq.n	4cea <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x92>
    4d06:	706c      	strb	r4, [r5, #1]
    4d08:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    4d0c:	200000e0 	.word	0x200000e0
    4d10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4d14:	4604      	mov	r4, r0
    4d16:	4839      	ldr	r0, [pc, #228]	; (4dfc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1a4>)
    4d18:	461e      	mov	r6, r3
    4d1a:	4690      	mov	r8, r2
    4d1c:	7880      	ldrb	r0, [r0, #2]
    4d1e:	4689      	mov	r9, r1
    4d20:	2500      	movs	r5, #0
    4d22:	2800      	cmp	r0, #0
    4d24:	d063      	beq.n	4dee <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x196>
    4d26:	f007 fb11 	bl	c34c <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    4d2a:	b3e0      	cbz	r0, 4da6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x14e>
    4d2c:	f8b4 0248 	ldrh.w	r0, [r4, #584]	; 0x248
    4d30:	2802      	cmp	r0, #2
    4d32:	d35c      	bcc.n	4dee <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x196>
    4d34:	f894 025c 	ldrb.w	r0, [r4, #604]	; 0x25c
    4d38:	2802      	cmp	r0, #2
    4d3a:	d058      	beq.n	4dee <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x196>
    4d3c:	f894 0272 	ldrb.w	r0, [r4, #626]	; 0x272
    4d40:	bb88      	cbnz	r0, 4da6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x14e>
    4d42:	f894 021b 	ldrb.w	r0, [r4, #539]	; 0x21b
    4d46:	f7ff ffa5 	bl	4c94 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3c>
    4d4a:	f500 60c8 	add.w	r0, r0, #1600	; 0x640
    4d4e:	b281      	uxth	r1, r0
    4d50:	8031      	strh	r1, [r6, #0]
    4d52:	f894 025c 	ldrb.w	r0, [r4, #604]	; 0x25c
    4d56:	2700      	movs	r7, #0
    4d58:	2801      	cmp	r0, #1
    4d5a:	d00d      	beq.n	4d78 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x120>
    4d5c:	6920      	ldr	r0, [r4, #16]
    4d5e:	f007 fb3f 	bl	c3e0 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    4d62:	f8b4 2236 	ldrh.w	r2, [r4, #566]	; 0x236
    4d66:	4442      	add	r2, r8
    4d68:	eba2 0109 	sub.w	r1, r2, r9
    4d6c:	f8d4 2264 	ldr.w	r2, [r4, #612]	; 0x264
    4d70:	1a82      	subs	r2, r0, r2
    4d72:	fb01 7502 	mla	r5, r1, r2, r7
    4d76:	e035      	b.n	4de4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x18c>
    4d78:	f894 00a1 	ldrb.w	r0, [r4, #161]	; 0xa1
    4d7c:	2803      	cmp	r0, #3
    4d7e:	d039      	beq.n	4df4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x19c>
    4d80:	2101      	movs	r1, #1
    4d82:	2000      	movs	r0, #0
    4d84:	f009 f8ea 	bl	df5c <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
    4d88:	6a21      	ldr	r1, [r4, #32]
    4d8a:	1847      	adds	r7, r0, r1
    4d8c:	8831      	ldrh	r1, [r6, #0]
    4d8e:	f8d4 0254 	ldr.w	r0, [r4, #596]	; 0x254
    4d92:	f007 fb25 	bl	c3e0 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    4d96:	f8d4 2250 	ldr.w	r2, [r4, #592]	; 0x250
    4d9a:	f8d4 1258 	ldr.w	r1, [r4, #600]	; 0x258
    4d9e:	1a82      	subs	r2, r0, r2
    4da0:	fb01 5502 	mla	r5, r1, r2, r5
    4da4:	e000      	b.n	4da8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x150>
    4da6:	e022      	b.n	4dee <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x196>
    4da8:	f8c4 0250 	str.w	r0, [r4, #592]	; 0x250
    4dac:	8831      	ldrh	r1, [r6, #0]
    4dae:	4638      	mov	r0, r7
    4db0:	f007 fb16 	bl	c3e0 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    4db4:	f8d4 1260 	ldr.w	r1, [r4, #608]	; 0x260
    4db8:	f8c4 0260 	str.w	r0, [r4, #608]	; 0x260
    4dbc:	1a41      	subs	r1, r0, r1
    4dbe:	440d      	add	r5, r1
    4dc0:	8831      	ldrh	r1, [r6, #0]
    4dc2:	6920      	ldr	r0, [r4, #16]
    4dc4:	f007 fb0c 	bl	c3e0 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    4dc8:	f8b4 2236 	ldrh.w	r2, [r4, #566]	; 0x236
    4dcc:	4442      	add	r2, r8
    4dce:	eba2 0109 	sub.w	r1, r2, r9
    4dd2:	f8d4 2258 	ldr.w	r2, [r4, #600]	; 0x258
    4dd6:	1a89      	subs	r1, r1, r2
    4dd8:	f8d4 2264 	ldr.w	r2, [r4, #612]	; 0x264
    4ddc:	1a82      	subs	r2, r0, r2
    4dde:	1e49      	subs	r1, r1, #1
    4de0:	fb01 5502 	mla	r5, r1, r2, r5
    4de4:	f8c4 0264 	str.w	r0, [r4, #612]	; 0x264
    4de8:	2001      	movs	r0, #1
    4dea:	f884 0272 	strb.w	r0, [r4, #626]	; 0x272
    4dee:	4628      	mov	r0, r5
    4df0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4df4:	f8d4 0254 	ldr.w	r0, [r4, #596]	; 0x254
    4df8:	e7c6      	b.n	4d88 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x130>
    4dfa:	0000      	.short	0x0000
    4dfc:	200000e0 	.word	0x200000e0
    4e00:	b538      	push	{r3, r4, r5, lr}
    4e02:	2500      	movs	r5, #0
    4e04:	4604      	mov	r4, r0
    4e06:	2901      	cmp	r1, #1
    4e08:	d102      	bne.n	4e10 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1b8>
    4e0a:	4810      	ldr	r0, [pc, #64]	; (4e4c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1f4>)
    4e0c:	7840      	ldrb	r0, [r0, #1]
    4e0e:	b170      	cbz	r0, 4e2e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1d6>
    4e10:	2004      	movs	r0, #4
    4e12:	f884 025c 	strb.w	r0, [r4, #604]	; 0x25c
    4e16:	bf00      	nop
    4e18:	f00a f9be 	bl	f198 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1ce>
    4e1c:	f8a4 52a2 	strh.w	r5, [r4, #674]	; 0x2a2
    4e20:	f8b4 0094 	ldrh.w	r0, [r4, #148]	; 0x94
    4e24:	f8a4 026e 	strh.w	r0, [r4, #622]	; 0x26e
    4e28:	f884 5271 	strb.w	r5, [r4, #625]	; 0x271
    4e2c:	bd38      	pop	{r3, r4, r5, pc}
    4e2e:	9500      	str	r5, [sp, #0]
    4e30:	f8b4 1224 	ldrh.w	r1, [r4, #548]	; 0x224
    4e34:	2301      	movs	r3, #1
    4e36:	2200      	movs	r2, #0
    4e38:	4620      	mov	r0, r4
    4e3a:	f000 f809 	bl	4e50 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1f8>
    4e3e:	2800      	cmp	r0, #0
    4e40:	d0ea      	beq.n	4e18 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1c0>
    4e42:	f240 61b5 	movw	r1, #1717	; 0x6b5
    4e46:	2030      	movs	r0, #48	; 0x30
    4e48:	f7fc fad8 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4e4c:	200000e0 	.word	0x200000e0
    4e50:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4e54:	b08b      	sub	sp, #44	; 0x2c
    4e56:	4604      	mov	r4, r0
    4e58:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    4e5c:	4699      	mov	r9, r3
    4e5e:	460f      	mov	r7, r1
    4e60:	9307      	str	r3, [sp, #28]
    4e62:	9005      	str	r0, [sp, #20]
    4e64:	f00b fd6a 	bl	1093c <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
    4e68:	4605      	mov	r5, r0
    4e6a:	f894 021b 	ldrb.w	r0, [r4, #539]	; 0x21b
    4e6e:	f7ff ff11 	bl	4c94 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3c>
    4e72:	4428      	add	r0, r5
    4e74:	f8ad 0004 	strh.w	r0, [sp, #4]
    4e78:	f894 009e 	ldrb.w	r0, [r4, #158]	; 0x9e
    4e7c:	280d      	cmp	r0, #13
    4e7e:	d004      	beq.n	4e8a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x232>
    4e80:	2000      	movs	r0, #0
    4e82:	9008      	str	r0, [sp, #32]
    4e84:	980d      	ldr	r0, [sp, #52]	; 0x34
    4e86:	b110      	cbz	r0, 4e8e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x236>
    4e88:	e02e      	b.n	4ee8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x290>
    4e8a:	2001      	movs	r0, #1
    4e8c:	e7f9      	b.n	4e82 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x22a>
    4e8e:	f894 025c 	ldrb.w	r0, [r4, #604]	; 0x25c
    4e92:	2803      	cmp	r0, #3
    4e94:	d128      	bne.n	4ee8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x290>
    4e96:	9808      	ldr	r0, [sp, #32]
    4e98:	b330      	cbz	r0, 4ee8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x290>
    4e9a:	f8b4 02cc 	ldrh.w	r0, [r4, #716]	; 0x2cc
    4e9e:	42b8      	cmp	r0, r7
    4ea0:	d122      	bne.n	4ee8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x290>
    4ea2:	f8d4 0264 	ldr.w	r0, [r4, #612]	; 0x264
    4ea6:	f8c4 0250 	str.w	r0, [r4, #592]	; 0x250
    4eaa:	6920      	ldr	r0, [r4, #16]
    4eac:	f8c4 0254 	str.w	r0, [r4, #596]	; 0x254
    4eb0:	f8b4 02a2 	ldrh.w	r0, [r4, #674]	; 0x2a2
    4eb4:	f8b4 1236 	ldrh.w	r1, [r4, #566]	; 0x236
    4eb8:	4408      	add	r0, r1
    4eba:	f8c4 0258 	str.w	r0, [r4, #600]	; 0x258
    4ebe:	4620      	mov	r0, r4
    4ec0:	f000 fac0 	bl	5444 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ>
    4ec4:	f8d4 02d0 	ldr.w	r0, [r4, #720]	; 0x2d0
    4ec8:	6220      	str	r0, [r4, #32]
    4eca:	f8b4 02ce 	ldrh.w	r0, [r4, #718]	; 0x2ce
    4ece:	84a0      	strh	r0, [r4, #36]	; 0x24
    4ed0:	f8d4 02d4 	ldr.w	r0, [r4, #724]	; 0x2d4
    4ed4:	6120      	str	r0, [r4, #16]
    4ed6:	f8b4 02d8 	ldrh.w	r0, [r4, #728]	; 0x2d8
    4eda:	8320      	strh	r0, [r4, #24]
    4edc:	f8b4 02da 	ldrh.w	r0, [r4, #730]	; 0x2da
    4ee0:	8360      	strh	r0, [r4, #26]
    4ee2:	2002      	movs	r0, #2
    4ee4:	f884 025c 	strb.w	r0, [r4, #604]	; 0x25c
    4ee8:	f8b4 0094 	ldrh.w	r0, [r4, #148]	; 0x94
    4eec:	f504 751e 	add.w	r5, r4, #632	; 0x278
    4ef0:	1a38      	subs	r0, r7, r0
    4ef2:	fa0f fa80 	sxth.w	sl, r0
    4ef6:	f8b4 02a0 	ldrh.w	r0, [r4, #672]	; 0x2a0
    4efa:	1a38      	subs	r0, r7, r0
    4efc:	fa0f f880 	sxth.w	r8, r0
    4f00:	f1b8 0f00 	cmp.w	r8, #0
    4f04:	da08      	bge.n	4f18 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2c0>
    4f06:	f8d4 0290 	ldr.w	r0, [r4, #656]	; 0x290
    4f0a:	f8d4 1294 	ldr.w	r1, [r4, #660]	; 0x294
    4f0e:	46d0      	mov	r8, sl
    4f10:	e9c4 01a6 	strd	r0, r1, [r4, #664]	; 0x298
    4f14:	2001      	movs	r0, #1
    4f16:	9007      	str	r0, [sp, #28]
    4f18:	ab01      	add	r3, sp, #4
    4f1a:	4652      	mov	r2, sl
    4f1c:	4641      	mov	r1, r8
    4f1e:	4620      	mov	r0, r4
    4f20:	f7ff fef6 	bl	4d10 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xb8>
    4f24:	9004      	str	r0, [sp, #16]
    4f26:	f894 025c 	ldrb.w	r0, [r4, #604]	; 0x25c
    4f2a:	f8df b334 	ldr.w	fp, [pc, #820]	; 5260 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x608>
    4f2e:	b140      	cbz	r0, 4f42 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2ea>
    4f30:	2801      	cmp	r0, #1
    4f32:	d07d      	beq.n	5030 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3d8>
    4f34:	2802      	cmp	r0, #2
    4f36:	d051      	beq.n	4fdc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x384>
    4f38:	2803      	cmp	r0, #3
    4f3a:	d07a      	beq.n	5032 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3da>
    4f3c:	f240 5143 	movw	r1, #1347	; 0x543
    4f40:	e18a      	b.n	5258 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x600>
    4f42:	2101      	movs	r1, #1
    4f44:	2000      	movs	r0, #0
    4f46:	f009 f809 	bl	df5c <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
    4f4a:	4606      	mov	r6, r0
    4f4c:	6a20      	ldr	r0, [r4, #32]
    4f4e:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    4f52:	4430      	add	r0, r6
    4f54:	f007 fa44 	bl	c3e0 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    4f58:	f8c4 0260 	str.w	r0, [r4, #608]	; 0x260
    4f5c:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    4f60:	6920      	ldr	r0, [r4, #16]
    4f62:	f007 fa3d 	bl	c3e0 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    4f66:	f8c4 0264 	str.w	r0, [r4, #612]	; 0x264
    4f6a:	a907      	add	r1, sp, #28
    4f6c:	a806      	add	r0, sp, #24
    4f6e:	f003 f851 	bl	8014 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY>
    4f72:	e9d4 01a6 	ldrd	r0, r1, [r4, #664]	; 0x298
    4f76:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    4f7a:	f006 f9a7 	bl	b2cc <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ>
    4f7e:	4682      	mov	sl, r0
    4f80:	4620      	mov	r0, r4
    4f82:	f00a f8fb 	bl	f17c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1b2>
    4f86:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    4f8a:	f8d4 82a8 	ldr.w	r8, [r4, #680]	; 0x2a8
    4f8e:	f003 f9cf 	bl	8330 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    4f92:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    4f96:	4401      	add	r1, r0
    4f98:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    4f9c:	fbb1 f0f0 	udiv	r0, r1, r0
    4fa0:	6a21      	ldr	r1, [r4, #32]
    4fa2:	f8d4 2260 	ldr.w	r2, [r4, #608]	; 0x260
    4fa6:	4431      	add	r1, r6
    4fa8:	1a08      	subs	r0, r1, r0
    4faa:	1a81      	subs	r1, r0, r2
    4fac:	4441      	add	r1, r8
    4fae:	3920      	subs	r1, #32
    4fb0:	eba1 060a 	sub.w	r6, r1, sl
    4fb4:	0050      	lsls	r0, r2, #1
    4fb6:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
    4fb8:	3060      	adds	r0, #96	; 0x60
    4fba:	4401      	add	r1, r0
    4fbc:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    4fc0:	f00a f94c 	bl	f25c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x292>
    4fc4:	3022      	adds	r0, #34	; 0x22
    4fc6:	f8cb 0014 	str.w	r0, [fp, #20]
    4fca:	f8d4 02a8 	ldr.w	r0, [r4, #680]	; 0x2a8
    4fce:	1a30      	subs	r0, r6, r0
    4fd0:	f5b0 7fde 	cmp.w	r0, #444	; 0x1bc
    4fd4:	d258      	bcs.n	5088 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x430>
    4fd6:	f240 41dc 	movw	r1, #1244	; 0x4dc
    4fda:	e13d      	b.n	5258 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x600>
    4fdc:	6a21      	ldr	r1, [r4, #32]
    4fde:	f8d4 0254 	ldr.w	r0, [r4, #596]	; 0x254
    4fe2:	4408      	add	r0, r1
    4fe4:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    4fe8:	f007 f9fa 	bl	c3e0 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    4fec:	f8c4 0260 	str.w	r0, [r4, #608]	; 0x260
    4ff0:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    4ff4:	6920      	ldr	r0, [r4, #16]
    4ff6:	f007 f9f3 	bl	c3e0 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    4ffa:	f8c4 0264 	str.w	r0, [r4, #612]	; 0x264
    4ffe:	4620      	mov	r0, r4
    5000:	f00a f8bc 	bl	f17c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1b2>
    5004:	f8b4 0236 	ldrh.w	r0, [r4, #566]	; 0x236
    5008:	bb10      	cbnz	r0, 5050 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3f8>
    500a:	f1b9 0f00 	cmp.w	r9, #0
    500e:	d01f      	beq.n	5050 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3f8>
    5010:	f894 806b 	ldrb.w	r8, [r4, #107]	; 0x6b
    5014:	4640      	mov	r0, r8
    5016:	f003 f98b 	bl	8330 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    501a:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    501e:	4401      	add	r1, r0
    5020:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    5024:	fbb1 f0f0 	udiv	r0, r1, r0
    5028:	f8d4 1260 	ldr.w	r1, [r4, #608]	; 0x260
    502c:	4408      	add	r0, r1
    502e:	e001      	b.n	5034 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3dc>
    5030:	e02b      	b.n	508a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x432>
    5032:	e047      	b.n	50c4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x46c>
    5034:	6a22      	ldr	r2, [r4, #32]
    5036:	f8d4 1254 	ldr.w	r1, [r4, #596]	; 0x254
    503a:	4411      	add	r1, r2
    503c:	1a0e      	subs	r6, r1, r0
    503e:	4640      	mov	r0, r8
    5040:	f003 f94a 	bl	82d8 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    5044:	f8d4 12ac 	ldr.w	r1, [r4, #684]	; 0x2ac
    5048:	1a08      	subs	r0, r1, r0
    504a:	4406      	add	r6, r0
    504c:	3e20      	subs	r6, #32
    504e:	e006      	b.n	505e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x406>
    5050:	6a21      	ldr	r1, [r4, #32]
    5052:	f8d4 0254 	ldr.w	r0, [r4, #596]	; 0x254
    5056:	4408      	add	r0, r1
    5058:	f8d4 1260 	ldr.w	r1, [r4, #608]	; 0x260
    505c:	1a46      	subs	r6, r0, r1
    505e:	f8d4 2258 	ldr.w	r2, [r4, #600]	; 0x258
    5062:	f8d4 1250 	ldr.w	r1, [r4, #592]	; 0x250
    5066:	f8d4 0260 	ldr.w	r0, [r4, #608]	; 0x260
    506a:	fb01 0002 	mla	r0, r1, r2, r0
    506e:	0040      	lsls	r0, r0, #1
    5070:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
    5072:	3060      	adds	r0, #96	; 0x60
    5074:	4401      	add	r1, r0
    5076:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    507a:	f00a f8ef 	bl	f25c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x292>
    507e:	f8cb 0014 	str.w	r0, [fp, #20]
    5082:	2001      	movs	r0, #1
    5084:	f884 025c 	strb.w	r0, [r4, #604]	; 0x25c
    5088:	e061      	b.n	514e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4f6>
    508a:	f8d4 2264 	ldr.w	r2, [r4, #612]	; 0x264
    508e:	6920      	ldr	r0, [r4, #16]
    5090:	f8b4 1236 	ldrh.w	r1, [r4, #566]	; 0x236
    5094:	1a86      	subs	r6, r0, r2
    5096:	eb01 000a 	add.w	r0, r1, sl
    509a:	f8d4 1258 	ldr.w	r1, [r4, #600]	; 0x258
    509e:	f8d4 c250 	ldr.w	ip, [r4, #592]	; 0x250
    50a2:	1a40      	subs	r0, r0, r1
    50a4:	f8d4 3260 	ldr.w	r3, [r4, #608]	; 0x260
    50a8:	1e40      	subs	r0, r0, #1
    50aa:	fb0c 3101 	mla	r1, ip, r1, r3
    50ae:	fb00 1002 	mla	r0, r0, r2, r1
    50b2:	0040      	lsls	r0, r0, #1
    50b4:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
    50b6:	3060      	adds	r0, #96	; 0x60
    50b8:	4401      	add	r1, r0
    50ba:	fb06 f608 	mul.w	r6, r6, r8
    50be:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    50c2:	e040      	b.n	5146 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4ee>
    50c4:	6920      	ldr	r0, [r4, #16]
    50c6:	f8d4 1264 	ldr.w	r1, [r4, #612]	; 0x264
    50ca:	fb00 f008 	mul.w	r0, r0, r8
    50ce:	fb08 0611 	mls	r6, r8, r1, r0
    50d2:	f894 009d 	ldrb.w	r0, [r4, #157]	; 0x9d
    50d6:	2825      	cmp	r0, #37	; 0x25
    50d8:	d003      	beq.n	50e2 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x48a>
    50da:	f894 009e 	ldrb.w	r0, [r4, #158]	; 0x9e
    50de:	2825      	cmp	r0, #37	; 0x25
    50e0:	d109      	bne.n	50f6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x49e>
    50e2:	f8b4 02cc 	ldrh.w	r0, [r4, #716]	; 0x2cc
    50e6:	1a38      	subs	r0, r7, r0
    50e8:	b200      	sxth	r0, r0
    50ea:	2800      	cmp	r0, #0
    50ec:	db03      	blt.n	50f6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x49e>
    50ee:	f894 02cf 	ldrb.w	r0, [r4, #719]	; 0x2cf
    50f2:	b100      	cbz	r0, 50f6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x49e>
    50f4:	9005      	str	r0, [sp, #20]
    50f6:	9807      	ldr	r0, [sp, #28]
    50f8:	b1d8      	cbz	r0, 5132 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4da>
    50fa:	f8b4 0236 	ldrh.w	r0, [r4, #566]	; 0x236
    50fe:	b9c0      	cbnz	r0, 5132 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4da>
    5100:	f8d4 02ac 	ldr.w	r0, [r4, #684]	; 0x2ac
    5104:	2800      	cmp	r0, #0
    5106:	d07d      	beq.n	5204 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5ac>
    5108:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    510c:	f003 f910 	bl	8330 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    5110:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    5114:	4401      	add	r1, r0
    5116:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    511a:	fbb1 f0f0 	udiv	r0, r1, r0
    511e:	1a36      	subs	r6, r6, r0
    5120:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    5124:	f003 f8d8 	bl	82d8 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    5128:	f8d4 12ac 	ldr.w	r1, [r4, #684]	; 0x2ac
    512c:	1a08      	subs	r0, r1, r0
    512e:	4406      	add	r6, r0
    5130:	3e20      	subs	r6, #32
    5132:	f8b4 1236 	ldrh.w	r1, [r4, #566]	; 0x236
    5136:	eb01 000a 	add.w	r0, r1, sl
    513a:	f8d4 1264 	ldr.w	r1, [r4, #612]	; 0x264
    513e:	4348      	muls	r0, r1
    5140:	0041      	lsls	r1, r0, #1
    5142:	3160      	adds	r1, #96	; 0x60
    5144:	9805      	ldr	r0, [sp, #20]
    5146:	f00a f889 	bl	f25c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x292>
    514a:	f8cb 0014 	str.w	r0, [fp, #20]
    514e:	9804      	ldr	r0, [sp, #16]
    5150:	f8db 2014 	ldr.w	r2, [fp, #20]
    5154:	1a31      	subs	r1, r6, r0
    5156:	f8d4 6264 	ldr.w	r6, [r4, #612]	; 0x264
    515a:	6920      	ldr	r0, [r4, #16]
    515c:	1b80      	subs	r0, r0, r6
    515e:	f2a0 2046 	subw	r0, r0, #582	; 0x246
    5162:	f8cb 0018 	str.w	r0, [fp, #24]
    5166:	4282      	cmp	r2, r0
    5168:	d800      	bhi.n	516c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x514>
    516a:	4610      	mov	r0, r2
    516c:	f8c4 0230 	str.w	r0, [r4, #560]	; 0x230
    5170:	2600      	movs	r6, #0
    5172:	702e      	strb	r6, [r5, #0]
    5174:	2064      	movs	r0, #100	; 0x64
    5176:	8128      	strh	r0, [r5, #8]
    5178:	e9d4 20a6 	ldrd	r2, r0, [r4, #664]	; 0x298
    517c:	1851      	adds	r1, r2, r1
    517e:	4170      	adcs	r0, r6
    5180:	e9c5 1004 	strd	r1, r0, [r5, #16]
    5184:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    5188:	f009 fa60 	bl	e64c <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    518c:	f8d4 1230 	ldr.w	r1, [r4, #560]	; 0x230
    5190:	4408      	add	r0, r1
    5192:	6068      	str	r0, [r5, #4]
    5194:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
    5198:	e9c4 01a6 	strd	r0, r1, [r4, #664]	; 0x298
    519c:	f8a4 72a0 	strh.w	r7, [r4, #672]	; 0x2a0
    51a0:	72ae      	strb	r6, [r5, #10]
    51a2:	f8b4 0220 	ldrh.w	r0, [r4, #544]	; 0x220
    51a6:	1bc0      	subs	r0, r0, r7
    51a8:	b200      	sxth	r0, r0
    51aa:	2800      	cmp	r0, #0
    51ac:	dd01      	ble.n	51b2 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x55a>
    51ae:	2002      	movs	r0, #2
    51b0:	72a8      	strb	r0, [r5, #10]
    51b2:	9808      	ldr	r0, [sp, #32]
    51b4:	b338      	cbz	r0, 5206 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5ae>
    51b6:	f1b9 0f00 	cmp.w	r9, #0
    51ba:	d01c      	beq.n	51f6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x59e>
    51bc:	f8b4 1248 	ldrh.w	r1, [r4, #584]	; 0x248
    51c0:	b3f1      	cbz	r1, 5240 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5e8>
    51c2:	f8b4 024a 	ldrh.w	r0, [r4, #586]	; 0x24a
    51c6:	bf00      	nop
    51c8:	f8a4 024a 	strh.w	r0, [r4, #586]	; 0x24a
    51cc:	f894 224c 	ldrb.w	r2, [r4, #588]	; 0x24c
    51d0:	1c40      	adds	r0, r0, #1
    51d2:	4342      	muls	r2, r0
    51d4:	428a      	cmp	r2, r1
    51d6:	d20e      	bcs.n	51f6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x59e>
    51d8:	7aa8      	ldrb	r0, [r5, #10]
    51da:	b160      	cbz	r0, 51f6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x59e>
    51dc:	72ae      	strb	r6, [r5, #10]
    51de:	f8b4 024a 	ldrh.w	r0, [r4, #586]	; 0x24a
    51e2:	1c40      	adds	r0, r0, #1
    51e4:	f8a4 024a 	strh.w	r0, [r4, #586]	; 0x24a
    51e8:	f7fe fabe 	bl	3768 <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ>
    51ec:	f000 0007 	and.w	r0, r0, #7
    51f0:	1c40      	adds	r0, r0, #1
    51f2:	f884 024c 	strb.w	r0, [r4, #588]	; 0x24c
    51f6:	f894 02a4 	ldrb.w	r0, [r4, #676]	; 0x2a4
    51fa:	4629      	mov	r1, r5
    51fc:	f00a f840 	bl	f280 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2b6>
    5200:	b340      	cbz	r0, 5254 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5fc>
    5202:	e001      	b.n	5208 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5b0>
    5204:	e009      	b.n	521a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5c2>
    5206:	e00b      	b.n	5220 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5c8>
    5208:	980d      	ldr	r0, [sp, #52]	; 0x34
    520a:	f080 0001 	eor.w	r0, r0, #1
    520e:	f884 0270 	strb.w	r0, [r4, #624]	; 0x270
    5212:	2000      	movs	r0, #0
    5214:	b00f      	add	sp, #60	; 0x3c
    5216:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    521a:	f240 512e 	movw	r1, #1326	; 0x52e
    521e:	e01b      	b.n	5258 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x600>
    5220:	f1b9 0f00 	cmp.w	r9, #0
    5224:	d1ca      	bne.n	51bc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x564>
    5226:	f894 025c 	ldrb.w	r0, [r4, #604]	; 0x25c
    522a:	2800      	cmp	r0, #0
    522c:	d0e3      	beq.n	51f6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x59e>
    522e:	f8d4 1264 	ldr.w	r1, [r4, #612]	; 0x264
    5232:	6920      	ldr	r0, [r4, #16]
    5234:	1a41      	subs	r1, r0, r1
    5236:	4628      	mov	r0, r5
    5238:	f008 fea2 	bl	df80 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    523c:	0400      	lsls	r0, r0, #16
    523e:	e000      	b.n	5242 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5ea>
    5240:	e006      	b.n	5250 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5f8>
    5242:	0c00      	lsrs	r0, r0, #16
    5244:	d0d7      	beq.n	51f6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x59e>
    5246:	9918      	ldr	r1, [sp, #96]	; 0x60
    5248:	b101      	cbz	r1, 524c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5f4>
    524a:	8008      	strh	r0, [r1, #0]
    524c:	2001      	movs	r0, #1
    524e:	e7e1      	b.n	5214 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5bc>
    5250:	2000      	movs	r0, #0
    5252:	e7b9      	b.n	51c8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x570>
    5254:	f240 518c 	movw	r1, #1420	; 0x58c
    5258:	2030      	movs	r0, #48	; 0x30
    525a:	f7fc f8cf 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    525e:	0000      	.short	0x0000
    5260:	200000e0 	.word	0x200000e0
    5264:	b570      	push	{r4, r5, r6, lr}
    5266:	4604      	mov	r4, r0
    5268:	f00b fc62 	bl	10b30 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>
    526c:	2864      	cmp	r0, #100	; 0x64
    526e:	d901      	bls.n	5274 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x61c>
    5270:	4605      	mov	r5, r0
    5272:	e000      	b.n	5276 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x61e>
    5274:	2564      	movs	r5, #100	; 0x64
    5276:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    527a:	2128      	movs	r1, #40	; 0x28
    527c:	f009 ff0c 	bl	f098 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xce>
    5280:	4428      	add	r0, r5
    5282:	f8d4 1264 	ldr.w	r1, [r4, #612]	; 0x264
    5286:	f500 7010 	add.w	r0, r0, #576	; 0x240
    528a:	180e      	adds	r6, r1, r0
    528c:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    5290:	2128      	movs	r1, #40	; 0x28
    5292:	f009 ff01 	bl	f098 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xce>
    5296:	f500 7229 	add.w	r2, r0, #676	; 0x2a4
    529a:	4620      	mov	r0, r4
    529c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    529e:	f009 f974 	bl	e58a <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    52a2:	4605      	mov	r5, r0
    52a4:	4632      	mov	r2, r6
    52a6:	4620      	mov	r0, r4
    52a8:	6921      	ldr	r1, [r4, #16]
    52aa:	f009 f96e 	bl	e58a <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    52ae:	4909      	ldr	r1, [pc, #36]	; (52d4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x67c>)
    52b0:	4285      	cmp	r5, r0
    52b2:	60c8      	str	r0, [r1, #12]
    52b4:	d200      	bcs.n	52b8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x660>
    52b6:	4628      	mov	r0, r5
    52b8:	6088      	str	r0, [r1, #8]
    52ba:	780a      	ldrb	r2, [r1, #0]
    52bc:	b902      	cbnz	r2, 52c0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x668>
    52be:	60c8      	str	r0, [r1, #12]
    52c0:	f8d4 027c 	ldr.w	r0, [r4, #636]	; 0x27c
    52c4:	f2a0 1069 	subw	r0, r0, #361	; 0x169
    52c8:	6108      	str	r0, [r1, #16]
    52ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    52ce:	f005 bf1d 	b.w	b10c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    52d2:	0000      	.short	0x0000
    52d4:	200000e0 	.word	0x200000e0
    52d8:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    52da:	4604      	mov	r4, r0
    52dc:	f005 ffe4 	bl	b2a8 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    52e0:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
    52e4:	f8d4 2294 	ldr.w	r2, [r4, #660]	; 0x294
    52e8:	1ac0      	subs	r0, r0, r3
    52ea:	eb61 0102 	sbc.w	r1, r1, r2
    52ee:	2200      	movs	r2, #0
    52f0:	4613      	mov	r3, r2
    52f2:	1a12      	subs	r2, r2, r0
    52f4:	418b      	sbcs	r3, r1
    52f6:	db02      	blt.n	52fe <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6a6>
    52f8:	f240 6109 	movw	r1, #1545	; 0x609
    52fc:	e04d      	b.n	539a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x742>
    52fe:	1c42      	adds	r2, r0, #1
    5300:	f171 0100 	sbcs.w	r1, r1, #0
    5304:	db02      	blt.n	530c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6b4>
    5306:	f240 610a 	movw	r1, #1546	; 0x60a
    530a:	e046      	b.n	539a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x742>
    530c:	6922      	ldr	r2, [r4, #16]
    530e:	2100      	movs	r1, #0
    5310:	b10a      	cbz	r2, 5316 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6be>
    5312:	fbb0 f1f2 	udiv	r1, r0, r2
    5316:	f894 009e 	ldrb.w	r0, [r4, #158]	; 0x9e
    531a:	280d      	cmp	r0, #13
    531c:	f8b4 026e 	ldrh.w	r0, [r4, #622]	; 0x26e
    5320:	d01b      	beq.n	535a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x702>
    5322:	f8b4 2094 	ldrh.w	r2, [r4, #148]	; 0x94
    5326:	1853      	adds	r3, r2, r1
    5328:	1ac3      	subs	r3, r0, r3
    532a:	b21b      	sxth	r3, r3
    532c:	2b00      	cmp	r3, #0
    532e:	db01      	blt.n	5334 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6dc>
    5330:	1c40      	adds	r0, r0, #1
    5332:	e001      	b.n	5338 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6e0>
    5334:	1c49      	adds	r1, r1, #1
    5336:	1850      	adds	r0, r2, r1
    5338:	f8a4 026e 	strh.w	r0, [r4, #622]	; 0x26e
    533c:	f894 0271 	ldrb.w	r0, [r4, #625]	; 0x271
    5340:	f88d 0000 	strb.w	r0, [sp]
    5344:	9800      	ldr	r0, [sp, #0]
    5346:	9000      	str	r0, [sp, #0]
    5348:	f89d 0000 	ldrb.w	r0, [sp]
    534c:	b940      	cbnz	r0, 5360 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x708>
    534e:	f8b4 026e 	ldrh.w	r0, [r4, #622]	; 0x26e
    5352:	f8b4 1224 	ldrh.w	r1, [r4, #548]	; 0x224
    5356:	4288      	cmp	r0, r1
    5358:	d102      	bne.n	5360 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x708>
    535a:	1c40      	adds	r0, r0, #1
    535c:	f8a4 026e 	strh.w	r0, [r4, #622]	; 0x26e
    5360:	f8b4 02a2 	ldrh.w	r0, [r4, #674]	; 0x2a2
    5364:	1c40      	adds	r0, r0, #1
    5366:	f8a4 02a2 	strh.w	r0, [r4, #674]	; 0x2a2
    536a:	f8b4 00ce 	ldrh.w	r0, [r4, #206]	; 0xce
    536e:	f8b4 10cc 	ldrh.w	r1, [r4, #204]	; 0xcc
    5372:	1a40      	subs	r0, r0, r1
    5374:	f8b4 1094 	ldrh.w	r1, [r4, #148]	; 0x94
    5378:	1e40      	subs	r0, r0, #1
    537a:	4408      	add	r0, r1
    537c:	b285      	uxth	r5, r0
    537e:	e026      	b.n	53ce <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x776>
    5380:	a801      	add	r0, sp, #4
    5382:	2300      	movs	r3, #0
    5384:	9000      	str	r0, [sp, #0]
    5386:	461a      	mov	r2, r3
    5388:	4620      	mov	r0, r4
    538a:	f7ff fd61 	bl	4e50 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1f8>
    538e:	2800      	cmp	r0, #0
    5390:	d03a      	beq.n	5408 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x7b0>
    5392:	2801      	cmp	r0, #1
    5394:	d004      	beq.n	53a0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x748>
    5396:	f240 6149 	movw	r1, #1609	; 0x649
    539a:	2030      	movs	r0, #48	; 0x30
    539c:	f7fc f82e 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    53a0:	f8b4 026e 	ldrh.w	r0, [r4, #622]	; 0x26e
    53a4:	f8b4 1220 	ldrh.w	r1, [r4, #544]	; 0x220
    53a8:	1a42      	subs	r2, r0, r1
    53aa:	b212      	sxth	r2, r2
    53ac:	2a00      	cmp	r2, #0
    53ae:	da09      	bge.n	53c4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x76c>
    53b0:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    53b4:	4402      	add	r2, r0
    53b6:	1aaa      	subs	r2, r5, r2
    53b8:	b212      	sxth	r2, r2
    53ba:	2a00      	cmp	r2, #0
    53bc:	da02      	bge.n	53c4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x76c>
    53be:	f8a4 126e 	strh.w	r1, [r4, #622]	; 0x26e
    53c2:	e004      	b.n	53ce <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x776>
    53c4:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    53c8:	4408      	add	r0, r1
    53ca:	f8a4 026e 	strh.w	r0, [r4, #622]	; 0x26e
    53ce:	f8b4 126e 	ldrh.w	r1, [r4, #622]	; 0x26e
    53d2:	1a68      	subs	r0, r5, r1
    53d4:	b200      	sxth	r0, r0
    53d6:	2800      	cmp	r0, #0
    53d8:	dad2      	bge.n	5380 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x728>
    53da:	f894 00a1 	ldrb.w	r0, [r4, #161]	; 0xa1
    53de:	b188      	cbz	r0, 5404 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x7ac>
    53e0:	f05f 0008 	movs.w	r0, #8
    53e4:	f884 00bd 	strb.w	r0, [r4, #189]	; 0xbd
    53e8:	220b      	movs	r2, #11
    53ea:	4908      	ldr	r1, [pc, #32]	; (540c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x7b4>)
    53ec:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
    53f0:	f009 f893 	bl	e51a <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    53f4:	4620      	mov	r0, r4
    53f6:	f00a f8d3 	bl	f5a0 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>
    53fa:	4620      	mov	r0, r4
    53fc:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    5400:	f009 bfa3 	b.w	f34a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x380>
    5404:	203e      	movs	r0, #62	; 0x3e
    5406:	e7ed      	b.n	53e4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x78c>
    5408:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    540a:	0000      	.short	0x0000
    540c:	0000e859 	.word	0x0000e859
    5410:	00000000 	.word	0x00000000
    5414:	00010000 	.word	0x00010000
    5418:	00000000 	.word	0x00000000
    541c:	00010000 	.word	0x00010000
    5420:	00000000 	.word	0x00000000
    5424:	00001e14 	.word	0x00001e14
    5428:	00001130 	.word	0x00001130
    542c:	00fa01f4 	.word	0x00fa01f4
    5430:	00640096 	.word	0x00640096
    5434:	0032004b 	.word	0x0032004b
    5438:	0014001e 	.word	0x0014001e
    543c:	0005000a 	.word	0x0005000a
    5440:	00010002 	.word	0x00010002

00005444 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ>:
    5444:	b510      	push	{r4, lr}
    5446:	4604      	mov	r4, r0
    5448:	f8d0 02d4 	ldr.w	r0, [r0, #724]	; 0x2d4
    544c:	6921      	ldr	r1, [r4, #16]
    544e:	4288      	cmp	r0, r1
    5450:	d109      	bne.n	5466 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x22>
    5452:	f8b4 12d8 	ldrh.w	r1, [r4, #728]	; 0x2d8
    5456:	8b22      	ldrh	r2, [r4, #24]
    5458:	4291      	cmp	r1, r2
    545a:	d104      	bne.n	5466 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x22>
    545c:	f8b4 12da 	ldrh.w	r1, [r4, #730]	; 0x2da
    5460:	8b62      	ldrh	r2, [r4, #26]
    5462:	4291      	cmp	r1, r2
    5464:	d014      	beq.n	5490 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x4c>
    5466:	8821      	ldrh	r1, [r4, #0]
    5468:	f8a4 11ca 	strh.w	r1, [r4, #458]	; 0x1ca
    546c:	f008 fca5 	bl	ddba <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    5470:	f8a4 01cc 	strh.w	r0, [r4, #460]	; 0x1cc
    5474:	f8b4 02d8 	ldrh.w	r0, [r4, #728]	; 0x2d8
    5478:	f8a4 01ce 	strh.w	r0, [r4, #462]	; 0x1ce
    547c:	f8b4 02da 	ldrh.w	r0, [r4, #730]	; 0x2da
    5480:	f8a4 01d0 	strh.w	r0, [r4, #464]	; 0x1d0
    5484:	2209      	movs	r2, #9
    5486:	4907      	ldr	r1, [pc, #28]	; (54a4 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x60>)
    5488:	f504 70df 	add.w	r0, r4, #446	; 0x1be
    548c:	f009 f859 	bl	e542 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    5490:	2102      	movs	r1, #2
    5492:	4620      	mov	r0, r4
    5494:	f7fd fd78 	bl	2f88 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    5498:	2000      	movs	r0, #0
    549a:	f804 0f9e 	strb.w	r0, [r4, #158]!
    549e:	2003      	movs	r0, #3
    54a0:	70e0      	strb	r0, [r4, #3]
    54a2:	bd10      	pop	{r4, pc}
    54a4:	0000e89d 	.word	0x0000e89d

000054a8 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI>:
    54a8:	4806      	ldr	r0, [pc, #24]	; (54c4 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x1c>)
    54aa:	4905      	ldr	r1, [pc, #20]	; (54c0 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x18>)
    54ac:	6501      	str	r1, [r0, #80]	; 0x50
    54ae:	4906      	ldr	r1, [pc, #24]	; (54c8 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x20>)
    54b0:	6541      	str	r1, [r0, #84]	; 0x54
    54b2:	4807      	ldr	r0, [pc, #28]	; (54d0 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x28>)
    54b4:	4905      	ldr	r1, [pc, #20]	; (54cc <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x24>)
    54b6:	6501      	str	r1, [r0, #80]	; 0x50
    54b8:	4906      	ldr	r1, [pc, #24]	; (54d4 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x2c>)
    54ba:	6541      	str	r1, [r0, #84]	; 0x54
    54bc:	4770      	bx	lr
    54be:	0000      	.short	0x0000
    54c0:	00006829 	.word	0x00006829
    54c4:	20000114 	.word	0x20000114
    54c8:	0000690d 	.word	0x0000690d
    54cc:	0000f7c1 	.word	0x0000f7c1
    54d0:	200001c0 	.word	0x200001c0
    54d4:	0000f7eb 	.word	0x0000f7eb

000054d8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA>:
    54d8:	481e      	ldr	r0, [pc, #120]	; (5554 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x7c>)
    54da:	491d      	ldr	r1, [pc, #116]	; (5550 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x78>)
    54dc:	6081      	str	r1, [r0, #8]
    54de:	491e      	ldr	r1, [pc, #120]	; (5558 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x80>)
    54e0:	6041      	str	r1, [r0, #4]
    54e2:	491e      	ldr	r1, [pc, #120]	; (555c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x84>)
    54e4:	6001      	str	r1, [r0, #0]
    54e6:	491e      	ldr	r1, [pc, #120]	; (5560 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x88>)
    54e8:	6281      	str	r1, [r0, #40]	; 0x28
    54ea:	491e      	ldr	r1, [pc, #120]	; (5564 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x8c>)
    54ec:	62c1      	str	r1, [r0, #44]	; 0x2c
    54ee:	491e      	ldr	r1, [pc, #120]	; (5568 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x90>)
    54f0:	60c1      	str	r1, [r0, #12]
    54f2:	491e      	ldr	r1, [pc, #120]	; (556c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x94>)
    54f4:	6181      	str	r1, [r0, #24]
    54f6:	491e      	ldr	r1, [pc, #120]	; (5570 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x98>)
    54f8:	6301      	str	r1, [r0, #48]	; 0x30
    54fa:	491e      	ldr	r1, [pc, #120]	; (5574 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x9c>)
    54fc:	6201      	str	r1, [r0, #32]
    54fe:	491e      	ldr	r1, [pc, #120]	; (5578 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa0>)
    5500:	64c1      	str	r1, [r0, #76]	; 0x4c
    5502:	491e      	ldr	r1, [pc, #120]	; (557c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa4>)
    5504:	6481      	str	r1, [r0, #72]	; 0x48
    5506:	491e      	ldr	r1, [pc, #120]	; (5580 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa8>)
    5508:	6441      	str	r1, [r0, #68]	; 0x44
    550a:	491e      	ldr	r1, [pc, #120]	; (5584 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xac>)
    550c:	6341      	str	r1, [r0, #52]	; 0x34
    550e:	491e      	ldr	r1, [pc, #120]	; (5588 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb0>)
    5510:	61c1      	str	r1, [r0, #28]
    5512:	491e      	ldr	r1, [pc, #120]	; (558c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb4>)
    5514:	6241      	str	r1, [r0, #36]	; 0x24
    5516:	481f      	ldr	r0, [pc, #124]	; (5594 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xbc>)
    5518:	491d      	ldr	r1, [pc, #116]	; (5590 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb8>)
    551a:	6081      	str	r1, [r0, #8]
    551c:	491e      	ldr	r1, [pc, #120]	; (5598 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc0>)
    551e:	61c1      	str	r1, [r0, #28]
    5520:	491e      	ldr	r1, [pc, #120]	; (559c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc4>)
    5522:	6241      	str	r1, [r0, #36]	; 0x24
    5524:	491e      	ldr	r1, [pc, #120]	; (55a0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc8>)
    5526:	62c1      	str	r1, [r0, #44]	; 0x2c
    5528:	491e      	ldr	r1, [pc, #120]	; (55a4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xcc>)
    552a:	6101      	str	r1, [r0, #16]
    552c:	491e      	ldr	r1, [pc, #120]	; (55a8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd0>)
    552e:	6141      	str	r1, [r0, #20]
    5530:	491e      	ldr	r1, [pc, #120]	; (55ac <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd4>)
    5532:	6441      	str	r1, [r0, #68]	; 0x44
    5534:	491e      	ldr	r1, [pc, #120]	; (55b0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd8>)
    5536:	6341      	str	r1, [r0, #52]	; 0x34
    5538:	491e      	ldr	r1, [pc, #120]	; (55b4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xdc>)
    553a:	6181      	str	r1, [r0, #24]
    553c:	491e      	ldr	r1, [pc, #120]	; (55b8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xe0>)
    553e:	6301      	str	r1, [r0, #48]	; 0x30
    5540:	491e      	ldr	r1, [pc, #120]	; (55bc <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xe4>)
    5542:	6481      	str	r1, [r0, #72]	; 0x48
    5544:	491e      	ldr	r1, [pc, #120]	; (55c0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xe8>)
    5546:	64c1      	str	r1, [r0, #76]	; 0x4c
    5548:	491e      	ldr	r1, [pc, #120]	; (55c4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xec>)
    554a:	6381      	str	r1, [r0, #56]	; 0x38
    554c:	4770      	bx	lr
    554e:	0000      	.short	0x0000
    5550:	00006c4d 	.word	0x00006c4d
    5554:	20000114 	.word	0x20000114
    5558:	00006619 	.word	0x00006619
    555c:	00006685 	.word	0x00006685
    5560:	0000f683 	.word	0x0000f683
    5564:	0000f6cd 	.word	0x0000f6cd
    5568:	00006745 	.word	0x00006745
    556c:	0000f6e5 	.word	0x0000f6e5
    5570:	00006d11 	.word	0x00006d11
    5574:	000067e1 	.word	0x000067e1
    5578:	0000f655 	.word	0x0000f655
    557c:	0000f62f 	.word	0x0000f62f
    5580:	00006bc5 	.word	0x00006bc5
    5584:	00006bf9 	.word	0x00006bf9
    5588:	00006c85 	.word	0x00006c85
    558c:	000067ed 	.word	0x000067ed
    5590:	0000f935 	.word	0x0000f935
    5594:	200001c0 	.word	0x200001c0
    5598:	00006ded 	.word	0x00006ded
    559c:	0000f7bd 	.word	0x0000f7bd
    55a0:	0000f855 	.word	0x0000f855
    55a4:	0000f797 	.word	0x0000f797
    55a8:	0000f917 	.word	0x0000f917
    55ac:	0000f8c5 	.word	0x0000f8c5
    55b0:	0000f8f5 	.word	0x0000f8f5
    55b4:	00006d79 	.word	0x00006d79
    55b8:	0000f957 	.word	0x0000f957
    55bc:	0000f81b 	.word	0x0000f81b
    55c0:	0000f845 	.word	0x0000f845
    55c4:	0000f913 	.word	0x0000f913

000055c8 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI>:
    55c8:	4806      	ldr	r0, [pc, #24]	; (55e4 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x1c>)
    55ca:	4905      	ldr	r1, [pc, #20]	; (55e0 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x18>)
    55cc:	6581      	str	r1, [r0, #88]	; 0x58
    55ce:	4906      	ldr	r1, [pc, #24]	; (55e8 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x20>)
    55d0:	6601      	str	r1, [r0, #96]	; 0x60
    55d2:	4807      	ldr	r0, [pc, #28]	; (55f0 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x28>)
    55d4:	4905      	ldr	r1, [pc, #20]	; (55ec <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x24>)
    55d6:	6581      	str	r1, [r0, #88]	; 0x58
    55d8:	4906      	ldr	r1, [pc, #24]	; (55f4 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x2c>)
    55da:	65c1      	str	r1, [r0, #92]	; 0x5c
    55dc:	4770      	bx	lr
    55de:	0000      	.short	0x0000
    55e0:	0000698d 	.word	0x0000698d
    55e4:	20000114 	.word	0x20000114
    55e8:	00006a71 	.word	0x00006a71
    55ec:	0000f87b 	.word	0x0000f87b
    55f0:	200001c0 	.word	0x200001c0
    55f4:	0000f8a5 	.word	0x0000f8a5

000055f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA>:
    55f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    55fa:	4c7c      	ldr	r4, [pc, #496]	; (57ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f4>)
    55fc:	2101      	movs	r1, #1
    55fe:	f1a4 0610 	sub.w	r6, r4, #16
    5602:	7021      	strb	r1, [r4, #0]
    5604:	2500      	movs	r5, #0
    5606:	6060      	str	r0, [r4, #4]
    5608:	8075      	strh	r5, [r6, #2]
    560a:	7075      	strb	r5, [r6, #1]
    560c:	7035      	strb	r5, [r6, #0]
    560e:	f880 122b 	strb.w	r1, [r0, #555]	; 0x22b
    5612:	8800      	ldrh	r0, [r0, #0]
    5614:	f7fc fb04 	bl	1c20 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    5618:	b180      	cbz	r0, 563c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x44>
    561a:	6860      	ldr	r0, [r4, #4]
    561c:	8800      	ldrh	r0, [r0, #0]
    561e:	f7fc fd67 	bl	20f0 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>
    5622:	6860      	ldr	r0, [r4, #4]
    5624:	8800      	ldrh	r0, [r0, #0]
    5626:	f7fc fd0b 	bl	2040 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>
    562a:	6860      	ldr	r0, [r4, #4]
    562c:	f8b0 1222 	ldrh.w	r1, [r0, #546]	; 0x222
    5630:	b1c9      	cbz	r1, 5666 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e>
    5632:	3080      	adds	r0, #128	; 0x80
    5634:	f009 ffc3 	bl	f5be <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    5638:	b118      	cbz	r0, 5642 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4a>
    563a:	e014      	b.n	5666 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e>
    563c:	f640 5159 	movw	r1, #3417	; 0xd59
    5640:	e06c      	b.n	571c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x124>
    5642:	6860      	ldr	r0, [r4, #4]
    5644:	f890 1130 	ldrb.w	r1, [r0, #304]	; 0x130
    5648:	f88d 1000 	strb.w	r1, [sp]
    564c:	9900      	ldr	r1, [sp, #0]
    564e:	9100      	str	r1, [sp, #0]
    5650:	f89d 1000 	ldrb.w	r1, [sp]
    5654:	b139      	cbz	r1, 5666 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e>
    5656:	f890 209f 	ldrb.w	r2, [r0, #159]	; 0x9f
    565a:	2301      	movs	r3, #1
    565c:	4619      	mov	r1, r3
    565e:	3080      	adds	r0, #128	; 0x80
    5660:	f008 fbc4 	bl	ddec <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5664:	b180      	cbz	r0, 5688 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x90>
    5666:	6860      	ldr	r0, [r4, #4]
    5668:	3080      	adds	r0, #128	; 0x80
    566a:	f009 ffa8 	bl	f5be <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    566e:	b128      	cbz	r0, 567c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x84>
    5670:	6860      	ldr	r0, [r4, #4]
    5672:	f890 0126 	ldrb.w	r0, [r0, #294]	; 0x126
    5676:	bf00      	nop
    5678:	f000 fbb4 	bl	5de4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7ec>
    567c:	6860      	ldr	r0, [r4, #4]
    567e:	f890 122d 	ldrb.w	r1, [r0, #557]	; 0x22d
    5682:	b189      	cbz	r1, 56a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb0>
    5684:	80b5      	strh	r5, [r6, #4]
    5686:	e01e      	b.n	56c6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xce>
    5688:	6860      	ldr	r0, [r4, #4]
    568a:	f8a0 50d0 	strh.w	r5, [r0, #208]	; 0xd0
    568e:	f890 1131 	ldrb.w	r1, [r0, #305]	; 0x131
    5692:	f880 1128 	strb.w	r1, [r0, #296]	; 0x128
    5696:	2100      	movs	r1, #0
    5698:	2002      	movs	r0, #2
    569a:	f000 fe63 	bl	6364 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd6c>
    569e:	6860      	ldr	r0, [r4, #4]
    56a0:	f880 522a 	strb.w	r5, [r0, #554]	; 0x22a
    56a4:	2002      	movs	r0, #2
    56a6:	e7e7      	b.n	5678 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x80>
    56a8:	f890 11c6 	ldrb.w	r1, [r0, #454]	; 0x1c6
    56ac:	f88d 1000 	strb.w	r1, [sp]
    56b0:	9900      	ldr	r1, [sp, #0]
    56b2:	9100      	str	r1, [sp, #0]
    56b4:	f89d 1000 	ldrb.w	r1, [sp]
    56b8:	b919      	cbnz	r1, 56c2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xca>
    56ba:	8cc1      	ldrh	r1, [r0, #38]	; 0x26
    56bc:	8b02      	ldrh	r2, [r0, #24]
    56be:	4291      	cmp	r1, r2
    56c0:	d800      	bhi.n	56c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcc>
    56c2:	8b01      	ldrh	r1, [r0, #24]
    56c4:	80b1      	strh	r1, [r6, #4]
    56c6:	f8b0 1226 	ldrh.w	r1, [r0, #550]	; 0x226
    56ca:	1e49      	subs	r1, r1, #1
    56cc:	b28f      	uxth	r7, r1
    56ce:	f8b0 1228 	ldrh.w	r1, [r0, #552]	; 0x228
    56d2:	4439      	add	r1, r7
    56d4:	f8a0 1228 	strh.w	r1, [r0, #552]	; 0x228
    56d8:	f830 1fcc 	ldrh.w	r1, [r0, #204]!
    56dc:	4439      	add	r1, r7
    56de:	8001      	strh	r1, [r0, #0]
    56e0:	f001 fbb2 	bl	6e48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1850>
    56e4:	b120      	cbz	r0, 56f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf8>
    56e6:	6860      	ldr	r0, [r4, #4]
    56e8:	f850 1fc0 	ldr.w	r1, [r0, #192]!
    56ec:	4439      	add	r1, r7
    56ee:	6001      	str	r1, [r0, #0]
    56f0:	6861      	ldr	r1, [r4, #4]
    56f2:	f8b1 0222 	ldrh.w	r0, [r1, #546]	; 0x222
    56f6:	2801      	cmp	r0, #1
    56f8:	d802      	bhi.n	5700 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x108>
    56fa:	1c40      	adds	r0, r0, #1
    56fc:	f8a1 0222 	strh.w	r0, [r1, #546]	; 0x222
    5700:	b10f      	cbz	r7, 5706 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10e>
    5702:	f881 5234 	strb.w	r5, [r1, #564]	; 0x234
    5706:	f881 522a 	strb.w	r5, [r1, #554]	; 0x22a
    570a:	f8b1 2226 	ldrh.w	r2, [r1, #550]	; 0x226
    570e:	f101 0080 	add.w	r0, r1, #128	; 0x80
    5712:	f008 fd0f 	bl	e134 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>
    5716:	b120      	cbz	r0, 5722 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12a>
    5718:	f44f 615a 	mov.w	r1, #3488	; 0xda0
    571c:	2031      	movs	r0, #49	; 0x31
    571e:	f7fb fe6d 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5722:	6860      	ldr	r0, [r4, #4]
    5724:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    5728:	290a      	cmp	r1, #10
    572a:	d001      	beq.n	5730 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x138>
    572c:	290b      	cmp	r1, #11
    572e:	d119      	bne.n	5764 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16c>
    5730:	f8b0 2094 	ldrh.w	r2, [r0, #148]	; 0x94
    5734:	f8b0 32cc 	ldrh.w	r3, [r0, #716]	; 0x2cc
    5738:	1ad2      	subs	r2, r2, r3
    573a:	b212      	sxth	r2, r2
    573c:	2a00      	cmp	r2, #0
    573e:	db11      	blt.n	5764 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16c>
    5740:	f8d0 12ce 	ldr.w	r1, [r0, #718]	; 0x2ce
    5744:	f8c0 10a6 	str.w	r1, [r0, #166]	; 0xa6
    5748:	f890 12d2 	ldrb.w	r1, [r0, #722]	; 0x2d2
    574c:	f880 10aa 	strb.w	r1, [r0, #170]	; 0xaa
    5750:	2103      	movs	r1, #3
    5752:	f7fd fc19 	bl	2f88 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    5756:	6860      	ldr	r0, [r4, #4]
    5758:	f880 509e 	strb.w	r5, [r0, #158]	; 0x9e
    575c:	21ff      	movs	r1, #255	; 0xff
    575e:	f880 10f4 	strb.w	r1, [r0, #244]	; 0xf4
    5762:	e026      	b.n	57b2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
    5764:	2925      	cmp	r1, #37	; 0x25
    5766:	d111      	bne.n	578c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x194>
    5768:	f8b0 1094 	ldrh.w	r1, [r0, #148]	; 0x94
    576c:	f8b0 22cc 	ldrh.w	r2, [r0, #716]	; 0x2cc
    5770:	1a89      	subs	r1, r1, r2
    5772:	b209      	sxth	r1, r1
    5774:	2900      	cmp	r1, #0
    5776:	db09      	blt.n	578c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x194>
    5778:	f880 509e 	strb.w	r5, [r0, #158]	; 0x9e
    577c:	f000 feac 	bl	64d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xee0>
    5780:	2800      	cmp	r0, #0
    5782:	6860      	ldr	r0, [r4, #4]
    5784:	f880 513c 	strb.w	r5, [r0, #316]	; 0x13c
    5788:	d029      	beq.n	57de <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e6>
    578a:	e012      	b.n	57b2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
    578c:	f890 109d 	ldrb.w	r1, [r0, #157]	; 0x9d
    5790:	2925      	cmp	r1, #37	; 0x25
    5792:	d001      	beq.n	5798 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a0>
    5794:	2927      	cmp	r1, #39	; 0x27
    5796:	d10c      	bne.n	57b2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
    5798:	f8b0 1094 	ldrh.w	r1, [r0, #148]	; 0x94
    579c:	f8b0 22cc 	ldrh.w	r2, [r0, #716]	; 0x2cc
    57a0:	1a89      	subs	r1, r1, r2
    57a2:	b209      	sxth	r1, r1
    57a4:	2900      	cmp	r1, #0
    57a6:	db04      	blt.n	57b2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
    57a8:	f880 509d 	strb.w	r5, [r0, #157]	; 0x9d
    57ac:	f000 fe94 	bl	64d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xee0>
    57b0:	b1a8      	cbz	r0, 57de <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e6>
    57b2:	480f      	ldr	r0, [pc, #60]	; (57f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f8>)
    57b4:	9000      	str	r0, [sp, #0]
    57b6:	e9d6 0104 	ldrd	r0, r1, [r6, #16]
    57ba:	4b0e      	ldr	r3, [pc, #56]	; (57f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1fc>)
    57bc:	4a0e      	ldr	r2, [pc, #56]	; (57f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x200>)
    57be:	f7fc fd25 	bl	220c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>
    57c2:	6860      	ldr	r0, [r4, #4]
    57c4:	2301      	movs	r3, #1
    57c6:	2105      	movs	r1, #5
    57c8:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    57cc:	3080      	adds	r0, #128	; 0x80
    57ce:	f008 fb0d 	bl	ddec <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    57d2:	2800      	cmp	r0, #0
    57d4:	d009      	beq.n	57ea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f2>
    57d6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    57da:	f7fc bd11 	b.w	2200 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>
    57de:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    57e2:	2100      	movs	r1, #0
    57e4:	4608      	mov	r0, r1
    57e6:	f000 bbc9 	b.w	5f7c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x984>
    57ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    57ec:	2000010c 	.word	0x2000010c
    57f0:	00005f7d 	.word	0x00005f7d
    57f4:	00005ab9 	.word	0x00005ab9
    57f8:	00006425 	.word	0x00006425
    57fc:	4804      	ldr	r0, [pc, #16]	; (5810 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x218>)
    57fe:	2100      	movs	r1, #0
    5800:	6840      	ldr	r0, [r0, #4]
    5802:	f820 1fd8 	strh.w	r1, [r0, #216]!
    5806:	7881      	ldrb	r1, [r0, #2]
    5808:	1c49      	adds	r1, r1, #1
    580a:	7081      	strb	r1, [r0, #2]
    580c:	4770      	bx	lr
    580e:	0000      	.short	0x0000
    5810:	2000010c 	.word	0x2000010c
    5814:	4807      	ldr	r0, [pc, #28]	; (5834 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x23c>)
    5816:	b510      	push	{r4, lr}
    5818:	6841      	ldr	r1, [r0, #4]
    581a:	f811 0fda 	ldrb.w	r0, [r1, #218]!
    581e:	1e40      	subs	r0, r0, #1
    5820:	b240      	sxtb	r0, r0
    5822:	7008      	strb	r0, [r1, #0]
    5824:	2800      	cmp	r0, #0
    5826:	da04      	bge.n	5832 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x23a>
    5828:	f240 2101 	movw	r1, #513	; 0x201
    582c:	2031      	movs	r0, #49	; 0x31
    582e:	f7fb fde5 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5832:	bd10      	pop	{r4, pc}
    5834:	2000010c 	.word	0x2000010c
    5838:	491d      	ldr	r1, [pc, #116]	; (58b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2b8>)
    583a:	b508      	push	{r3, lr}
    583c:	6849      	ldr	r1, [r1, #4]
    583e:	f891 209e 	ldrb.w	r2, [r1, #158]	; 0x9e
    5842:	b1c0      	cbz	r0, 5876 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x27e>
    5844:	2a11      	cmp	r2, #17
    5846:	d006      	beq.n	5856 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x25e>
    5848:	2a15      	cmp	r2, #21
    584a:	d007      	beq.n	585c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x264>
    584c:	2a16      	cmp	r2, #22
    584e:	d009      	beq.n	5864 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x26c>
    5850:	2a1c      	cmp	r2, #28
    5852:	d128      	bne.n	58a6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ae>
    5854:	e009      	b.n	586a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x272>
    5856:	2101      	movs	r1, #1
    5858:	200b      	movs	r0, #11
    585a:	e008      	b.n	586e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x276>
    585c:	4814      	ldr	r0, [pc, #80]	; (58b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2b8>)
    585e:	f009 ff52 	bl	f706 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x166>
    5862:	e006      	b.n	5872 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x27a>
    5864:	f000 fd9c 	bl	63a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xda8>
    5868:	e003      	b.n	5872 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x27a>
    586a:	2101      	movs	r1, #1
    586c:	2006      	movs	r0, #6
    586e:	f000 fd79 	bl	6364 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd6c>
    5872:	2001      	movs	r0, #1
    5874:	bd08      	pop	{r3, pc}
    5876:	2a22      	cmp	r2, #34	; 0x22
    5878:	d004      	beq.n	5884 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x28c>
    587a:	2a2f      	cmp	r2, #47	; 0x2f
    587c:	d113      	bne.n	58a6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ae>
    587e:	2101      	movs	r1, #1
    5880:	2011      	movs	r0, #17
    5882:	e7f4      	b.n	586e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x276>
    5884:	f891 013c 	ldrb.w	r0, [r1, #316]	; 0x13c
    5888:	2802      	cmp	r0, #2
    588a:	d00e      	beq.n	58aa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2b2>
    588c:	f891 013c 	ldrb.w	r0, [r1, #316]	; 0x13c
    5890:	2801      	cmp	r0, #1
    5892:	d108      	bne.n	58a6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ae>
    5894:	f891 013d 	ldrb.w	r0, [r1, #317]	; 0x13d
    5898:	f88d 0000 	strb.w	r0, [sp]
    589c:	9800      	ldr	r0, [sp, #0]
    589e:	9000      	str	r0, [sp, #0]
    58a0:	f89d 0000 	ldrb.w	r0, [sp]
    58a4:	b108      	cbz	r0, 58aa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2b2>
    58a6:	2000      	movs	r0, #0
    58a8:	bd08      	pop	{r3, pc}
    58aa:	2101      	movs	r1, #1
    58ac:	2017      	movs	r0, #23
    58ae:	e7de      	b.n	586e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x276>
    58b0:	2000010c 	.word	0x2000010c
    58b4:	b538      	push	{r3, r4, r5, lr}
    58b6:	2800      	cmp	r0, #0
    58b8:	d176      	bne.n	59a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3b0>
    58ba:	4c3c      	ldr	r4, [pc, #240]	; (59ac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3b4>)
    58bc:	6860      	ldr	r0, [r4, #4]
    58be:	f8d0 108c 	ldr.w	r1, [r0, #140]	; 0x8c
    58c2:	07ca      	lsls	r2, r1, #31
    58c4:	d002      	beq.n	58cc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2d4>
    58c6:	2101      	movs	r1, #1
    58c8:	2009      	movs	r0, #9
    58ca:	e069      	b.n	59a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3a8>
    58cc:	078a      	lsls	r2, r1, #30
    58ce:	d50a      	bpl.n	58e6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ee>
    58d0:	2101      	movs	r1, #1
    58d2:	200c      	movs	r0, #12
    58d4:	f000 fd46 	bl	6364 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd6c>
    58d8:	6860      	ldr	r0, [r4, #4]
    58da:	f810 1fdd 	ldrb.w	r1, [r0, #221]!
    58de:	f041 0101 	orr.w	r1, r1, #1
    58e2:	7001      	strb	r1, [r0, #0]
    58e4:	e05e      	b.n	59a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3ac>
    58e6:	074a      	lsls	r2, r1, #29
    58e8:	d502      	bpl.n	58f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2f8>
    58ea:	2101      	movs	r1, #1
    58ec:	2013      	movs	r0, #19
    58ee:	e057      	b.n	59a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3a8>
    58f0:	070a      	lsls	r2, r1, #28
    58f2:	d506      	bpl.n	5902 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x30a>
    58f4:	f890 1120 	ldrb.w	r1, [r0, #288]	; 0x120
    58f8:	f880 1128 	strb.w	r1, [r0, #296]	; 0x128
    58fc:	2101      	movs	r1, #1
    58fe:	2007      	movs	r0, #7
    5900:	e04e      	b.n	59a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3a8>
    5902:	f011 0f30 	tst.w	r1, #48	; 0x30
    5906:	d047      	beq.n	5998 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3a0>
    5908:	f890 1133 	ldrb.w	r1, [r0, #307]	; 0x133
    590c:	f88d 1000 	strb.w	r1, [sp]
    5910:	9900      	ldr	r1, [sp, #0]
    5912:	9100      	str	r1, [sp, #0]
    5914:	f89d 1000 	ldrb.w	r1, [sp]
    5918:	bbd9      	cbnz	r1, 5992 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x39a>
    591a:	f890 1132 	ldrb.w	r1, [r0, #306]	; 0x132
    591e:	2500      	movs	r5, #0
    5920:	f88d 1000 	strb.w	r1, [sp]
    5924:	9900      	ldr	r1, [sp, #0]
    5926:	9100      	str	r1, [sp, #0]
    5928:	f89d 1000 	ldrb.w	r1, [sp]
    592c:	b1c1      	cbz	r1, 5960 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x368>
    592e:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    5932:	2925      	cmp	r1, #37	; 0x25
    5934:	d02e      	beq.n	5994 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x39c>
    5936:	f890 109d 	ldrb.w	r1, [r0, #157]	; 0x9d
    593a:	2925      	cmp	r1, #37	; 0x25
    593c:	d02a      	beq.n	5994 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x39c>
    593e:	2300      	movs	r3, #0
    5940:	f200 22ce 	addw	r2, r0, #718	; 0x2ce
    5944:	f500 7199 	add.w	r1, r0, #306	; 0x132
    5948:	f008 fe11 	bl	e56e <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    594c:	6860      	ldr	r0, [r4, #4]
    594e:	f850 1f8c 	ldr.w	r1, [r0, #140]!
    5952:	f021 0120 	bic.w	r1, r1, #32
    5956:	f041 0110 	orr.w	r1, r1, #16
    595a:	6001      	str	r1, [r0, #0]
    595c:	f880 50a6 	strb.w	r5, [r0, #166]	; 0xa6
    5960:	6860      	ldr	r0, [r4, #4]
    5962:	f890 108c 	ldrb.w	r1, [r0, #140]	; 0x8c
    5966:	06c9      	lsls	r1, r1, #27
    5968:	d51e      	bpl.n	59a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3b0>
    596a:	f008 fe1b 	bl	e5a4 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    596e:	2105      	movs	r1, #5
    5970:	6860      	ldr	r0, [r4, #4]
    5972:	f7ff f937 	bl	4be4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    5976:	f000 f925 	bl	5bc4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5cc>
    597a:	6861      	ldr	r1, [r4, #4]
    597c:	f101 002c 	add.w	r0, r1, #44	; 0x2c
    5980:	8bc2      	ldrh	r2, [r0, #30]
    5982:	f8a1 2128 	strh.w	r2, [r1, #296]	; 0x128
    5986:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    5988:	f8a1 012a 	strh.w	r0, [r1, #298]	; 0x12a
    598c:	2101      	movs	r1, #1
    598e:	2015      	movs	r0, #21
    5990:	e006      	b.n	59a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3a8>
    5992:	e009      	b.n	59a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3b0>
    5994:	2301      	movs	r3, #1
    5996:	e7d3      	b.n	5940 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x348>
    5998:	0648      	lsls	r0, r1, #25
    599a:	d505      	bpl.n	59a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3b0>
    599c:	2101      	movs	r1, #1
    599e:	2024      	movs	r0, #36	; 0x24
    59a0:	f000 fce0 	bl	6364 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd6c>
    59a4:	2001      	movs	r0, #1
    59a6:	bd38      	pop	{r3, r4, r5, pc}
    59a8:	2000      	movs	r0, #0
    59aa:	bd38      	pop	{r3, r4, r5, pc}
    59ac:	2000010c 	.word	0x2000010c
    59b0:	b570      	push	{r4, r5, r6, lr}
    59b2:	460d      	mov	r5, r1
    59b4:	4606      	mov	r6, r0
    59b6:	f008 fd18 	bl	e3ea <sym_IMNEYE333DZSYFXBOKOMWVRET5JB5STH5YU7A5A>
    59ba:	4604      	mov	r4, r0
    59bc:	4630      	mov	r0, r6
    59be:	f008 fd16 	bl	e3ee <sym_UA37MSV2DKCYXYIDDSBDMFEEGPUD3YMYMAH3IEI>
    59c2:	4629      	mov	r1, r5
    59c4:	f000 f81e 	bl	5a04 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x40c>
    59c8:	b1b8      	cbz	r0, 59fa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x402>
    59ca:	4620      	mov	r0, r4
    59cc:	f008 fab8 	bl	df40 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    59d0:	0001      	movs	r1, r0
    59d2:	d00d      	beq.n	59f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3f8>
    59d4:	480a      	ldr	r0, [pc, #40]	; (5a00 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x408>)
    59d6:	6840      	ldr	r0, [r0, #4]
    59d8:	f890 206b 	ldrb.w	r2, [r0, #107]	; 0x6b
    59dc:	428a      	cmp	r2, r1
    59de:	d007      	beq.n	59f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3f8>
    59e0:	f890 113c 	ldrb.w	r1, [r0, #316]	; 0x13c
    59e4:	2901      	cmp	r1, #1
    59e6:	d005      	beq.n	59f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3fc>
    59e8:	f890 0067 	ldrb.w	r0, [r0, #103]	; 0x67
    59ec:	4220      	tst	r0, r4
    59ee:	d004      	beq.n	59fa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x402>
    59f0:	2001      	movs	r0, #1
    59f2:	bd70      	pop	{r4, r5, r6, pc}
    59f4:	f890 013f 	ldrb.w	r0, [r0, #319]	; 0x13f
    59f8:	e7f8      	b.n	59ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3f4>
    59fa:	2000      	movs	r0, #0
    59fc:	bd70      	pop	{r4, r5, r6, pc}
    59fe:	0000      	.short	0x0000
    5a00:	2000010c 	.word	0x2000010c
    5a04:	b570      	push	{r4, r5, r6, lr}
    5a06:	460d      	mov	r5, r1
    5a08:	4604      	mov	r4, r0
    5a0a:	f008 fa99 	bl	df40 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    5a0e:	b350      	cbz	r0, 5a66 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x46e>
    5a10:	4916      	ldr	r1, [pc, #88]	; (5a6c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x474>)
    5a12:	6849      	ldr	r1, [r1, #4]
    5a14:	f891 206a 	ldrb.w	r2, [r1, #106]	; 0x6a
    5a18:	4282      	cmp	r2, r0
    5a1a:	d024      	beq.n	5a66 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x46e>
    5a1c:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
    5a20:	2b01      	cmp	r3, #1
    5a22:	d005      	beq.n	5a30 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x438>
    5a24:	f891 3066 	ldrb.w	r3, [r1, #102]	; 0x66
    5a28:	4223      	tst	r3, r4
    5a2a:	d013      	beq.n	5a54 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x45c>
    5a2c:	b11d      	cbz	r5, 5a36 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x43e>
    5a2e:	e01a      	b.n	5a66 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x46e>
    5a30:	f891 313e 	ldrb.w	r3, [r1, #318]	; 0x13e
    5a34:	e7f8      	b.n	5a28 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x430>
    5a36:	f891 1063 	ldrb.w	r1, [r1, #99]	; 0x63
    5a3a:	4221      	tst	r1, r4
    5a3c:	d113      	bne.n	5a66 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x46e>
    5a3e:	b15a      	cbz	r2, 5a58 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x460>
    5a40:	2a04      	cmp	r2, #4
    5a42:	d00e      	beq.n	5a62 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x46a>
    5a44:	2804      	cmp	r0, #4
    5a46:	d00c      	beq.n	5a62 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x46a>
    5a48:	2a08      	cmp	r2, #8
    5a4a:	d00a      	beq.n	5a62 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x46a>
    5a4c:	2808      	cmp	r0, #8
    5a4e:	d008      	beq.n	5a62 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x46a>
    5a50:	4282      	cmp	r2, r0
    5a52:	d908      	bls.n	5a66 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x46e>
    5a54:	2000      	movs	r0, #0
    5a56:	bd70      	pop	{r4, r5, r6, pc}
    5a58:	f240 11a3 	movw	r1, #419	; 0x1a3
    5a5c:	2006      	movs	r0, #6
    5a5e:	f7fb fccd 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5a62:	4282      	cmp	r2, r0
    5a64:	d3f6      	bcc.n	5a54 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x45c>
    5a66:	2001      	movs	r0, #1
    5a68:	bd70      	pop	{r4, r5, r6, pc}
    5a6a:	0000      	.short	0x0000
    5a6c:	2000010c 	.word	0x2000010c
    5a70:	b510      	push	{r4, lr}
    5a72:	4c10      	ldr	r4, [pc, #64]	; (5ab4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4bc>)
    5a74:	2301      	movs	r3, #1
    5a76:	2100      	movs	r1, #0
    5a78:	6860      	ldr	r0, [r4, #4]
    5a7a:	f890 209d 	ldrb.w	r2, [r0, #157]	; 0x9d
    5a7e:	3080      	adds	r0, #128	; 0x80
    5a80:	f008 f9b4 	bl	ddec <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5a84:	b140      	cbz	r0, 5a98 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4a0>
    5a86:	6860      	ldr	r0, [r4, #4]
    5a88:	2301      	movs	r3, #1
    5a8a:	2104      	movs	r1, #4
    5a8c:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    5a90:	3080      	adds	r0, #128	; 0x80
    5a92:	f008 f9ab 	bl	ddec <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5a96:	b108      	cbz	r0, 5a9c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4a4>
    5a98:	2000      	movs	r0, #0
    5a9a:	bd10      	pop	{r4, pc}
    5a9c:	6860      	ldr	r0, [r4, #4]
    5a9e:	f890 00ca 	ldrb.w	r0, [r0, #202]	; 0xca
    5aa2:	2800      	cmp	r0, #0
    5aa4:	d0f9      	beq.n	5a9a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4a2>
    5aa6:	2100      	movs	r1, #0
    5aa8:	2012      	movs	r0, #18
    5aaa:	f000 fc5b 	bl	6364 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd6c>
    5aae:	2001      	movs	r0, #1
    5ab0:	bd10      	pop	{r4, pc}
    5ab2:	0000      	.short	0x0000
    5ab4:	2000010c 	.word	0x2000010c
    5ab8:	490d      	ldr	r1, [pc, #52]	; (5af0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4f8>)
    5aba:	4602      	mov	r2, r0
    5abc:	7848      	ldrb	r0, [r1, #1]
    5abe:	b9a0      	cbnz	r0, 5aea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4f2>
    5ac0:	f101 0010 	add.w	r0, r1, #16
    5ac4:	6840      	ldr	r0, [r0, #4]
    5ac6:	b142      	cbz	r2, 5ada <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4e2>
    5ac8:	7889      	ldrb	r1, [r1, #2]
    5aca:	0709      	lsls	r1, r1, #28
    5acc:	d503      	bpl.n	5ad6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4de>
    5ace:	f890 009f 	ldrb.w	r0, [r0, #159]	; 0x9f
    5ad2:	2807      	cmp	r0, #7
    5ad4:	d009      	beq.n	5aea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4f2>
    5ad6:	2001      	movs	r0, #1
    5ad8:	4770      	bx	lr
    5ada:	f100 012c 	add.w	r1, r0, #44	; 0x2c
    5ade:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    5ae0:	8e81      	ldrh	r1, [r0, #52]	; 0x34
    5ae2:	428a      	cmp	r2, r1
    5ae4:	d801      	bhi.n	5aea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4f2>
    5ae6:	f7ff b859 	b.w	4b9c <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY>
    5aea:	2000      	movs	r0, #0
    5aec:	4770      	bx	lr
    5aee:	0000      	.short	0x0000
    5af0:	200000fc 	.word	0x200000fc
    5af4:	b538      	push	{r3, r4, r5, lr}
    5af6:	4c32      	ldr	r4, [pc, #200]	; (5bc0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5c8>)
    5af8:	4605      	mov	r5, r0
    5afa:	6860      	ldr	r0, [r4, #4]
    5afc:	3080      	adds	r0, #128	; 0x80
    5afe:	f009 fd5e 	bl	f5be <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    5b02:	2800      	cmp	r0, #0
    5b04:	d15b      	bne.n	5bbe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5c6>
    5b06:	2d00      	cmp	r5, #0
    5b08:	d159      	bne.n	5bbe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5c6>
    5b0a:	6860      	ldr	r0, [r4, #4]
    5b0c:	2301      	movs	r3, #1
    5b0e:	4619      	mov	r1, r3
    5b10:	f890 209f 	ldrb.w	r2, [r0, #159]	; 0x9f
    5b14:	3080      	adds	r0, #128	; 0x80
    5b16:	f008 f969 	bl	ddec <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5b1a:	2800      	cmp	r0, #0
    5b1c:	d14f      	bne.n	5bbe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5c6>
    5b1e:	6860      	ldr	r0, [r4, #4]
    5b20:	f890 1130 	ldrb.w	r1, [r0, #304]	; 0x130
    5b24:	f88d 1000 	strb.w	r1, [sp]
    5b28:	9900      	ldr	r1, [sp, #0]
    5b2a:	9100      	str	r1, [sp, #0]
    5b2c:	f89d 2000 	ldrb.w	r2, [sp]
    5b30:	2100      	movs	r1, #0
    5b32:	b142      	cbz	r2, 5b46 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x54e>
    5b34:	f8a0 10d0 	strh.w	r1, [r0, #208]	; 0xd0
    5b38:	f890 1131 	ldrb.w	r1, [r0, #305]	; 0x131
    5b3c:	f880 1128 	strb.w	r1, [r0, #296]	; 0x128
    5b40:	2100      	movs	r1, #0
    5b42:	2002      	movs	r0, #2
    5b44:	e030      	b.n	5ba8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5b0>
    5b46:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    5b4a:	2301      	movs	r3, #1
    5b4c:	2104      	movs	r1, #4
    5b4e:	3080      	adds	r0, #128	; 0x80
    5b50:	f008 f94c 	bl	ddec <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5b54:	4605      	mov	r5, r0
    5b56:	f7ff fead 	bl	58b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2bc>
    5b5a:	2800      	cmp	r0, #0
    5b5c:	d12f      	bne.n	5bbe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5c6>
    5b5e:	4628      	mov	r0, r5
    5b60:	f7ff fe6a 	bl	5838 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x240>
    5b64:	2800      	cmp	r0, #0
    5b66:	d12a      	bne.n	5bbe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5c6>
    5b68:	f7ff ff82 	bl	5a70 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x478>
    5b6c:	2800      	cmp	r0, #0
    5b6e:	d126      	bne.n	5bbe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5c6>
    5b70:	6860      	ldr	r0, [r4, #4]
    5b72:	f890 109d 	ldrb.w	r1, [r0, #157]	; 0x9d
    5b76:	2909      	cmp	r1, #9
    5b78:	d01a      	beq.n	5bb0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5b8>
    5b7a:	2d00      	cmp	r5, #0
    5b7c:	d11f      	bne.n	5bbe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5c6>
    5b7e:	f000 fb1d 	bl	61bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbc4>
    5b82:	2800      	cmp	r0, #0
    5b84:	d11b      	bne.n	5bbe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5c6>
    5b86:	6860      	ldr	r0, [r4, #4]
    5b88:	2301      	movs	r3, #1
    5b8a:	2100      	movs	r1, #0
    5b8c:	f890 209d 	ldrb.w	r2, [r0, #157]	; 0x9d
    5b90:	3080      	adds	r0, #128	; 0x80
    5b92:	f008 f92b 	bl	ddec <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5b96:	2800      	cmp	r0, #0
    5b98:	d011      	beq.n	5bbe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5c6>
    5b9a:	6860      	ldr	r0, [r4, #4]
    5b9c:	f890 02c4 	ldrb.w	r0, [r0, #708]	; 0x2c4
    5ba0:	2800      	cmp	r0, #0
    5ba2:	d00c      	beq.n	5bbe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5c6>
    5ba4:	2100      	movs	r1, #0
    5ba6:	20ff      	movs	r0, #255	; 0xff
    5ba8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    5bac:	f000 bbda 	b.w	6364 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd6c>
    5bb0:	f890 1121 	ldrb.w	r1, [r0, #289]	; 0x121
    5bb4:	f880 1128 	strb.w	r1, [r0, #296]	; 0x128
    5bb8:	2100      	movs	r1, #0
    5bba:	2007      	movs	r0, #7
    5bbc:	e7f4      	b.n	5ba8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5b0>
    5bbe:	bd38      	pop	{r3, r4, r5, pc}
    5bc0:	2000010c 	.word	0x2000010c
    5bc4:	4808      	ldr	r0, [pc, #32]	; (5be8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5f0>)
    5bc6:	6843      	ldr	r3, [r0, #4]
    5bc8:	f893 0060 	ldrb.w	r0, [r3, #96]	; 0x60
    5bcc:	2801      	cmp	r0, #1
    5bce:	d006      	beq.n	5bde <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5e6>
    5bd0:	f503 72b1 	add.w	r2, r3, #354	; 0x162
    5bd4:	f103 012c 	add.w	r1, r3, #44	; 0x2c
    5bd8:	8818      	ldrh	r0, [r3, #0]
    5bda:	f7fd bd47 	b.w	366c <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    5bde:	2002      	movs	r0, #2
    5be0:	f883 0060 	strb.w	r0, [r3, #96]	; 0x60
    5be4:	4770      	bx	lr
    5be6:	0000      	.short	0x0000
    5be8:	2000010c 	.word	0x2000010c
    5bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5bee:	4d2b      	ldr	r5, [pc, #172]	; (5c9c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6a4>)
    5bf0:	0006      	movs	r6, r0
    5bf2:	f105 0410 	add.w	r4, r5, #16
    5bf6:	d133      	bne.n	5c60 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x668>
    5bf8:	f000 f8aa 	bl	5d50 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x758>
    5bfc:	f000 f852 	bl	5ca4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6ac>
    5c00:	0006      	movs	r6, r0
    5c02:	d12d      	bne.n	5c60 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x668>
    5c04:	8869      	ldrh	r1, [r5, #2]
    5c06:	0748      	lsls	r0, r1, #29
    5c08:	d506      	bpl.n	5c18 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x620>
    5c0a:	6860      	ldr	r0, [r4, #4]
    5c0c:	f890 009f 	ldrb.w	r0, [r0, #159]	; 0x9f
    5c10:	2806      	cmp	r0, #6
    5c12:	d101      	bne.n	5c18 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x620>
    5c14:	2001      	movs	r0, #1
    5c16:	7028      	strb	r0, [r5, #0]
    5c18:	0788      	lsls	r0, r1, #30
    5c1a:	d516      	bpl.n	5c4a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x652>
    5c1c:	68a8      	ldr	r0, [r5, #8]
    5c1e:	78c0      	ldrb	r0, [r0, #3]
    5c20:	282b      	cmp	r0, #43	; 0x2b
    5c22:	d207      	bcs.n	5c34 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x63c>
    5c24:	491e      	ldr	r1, [pc, #120]	; (5ca0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6a8>)
    5c26:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
    5c2a:	b119      	cbz	r1, 5c34 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x63c>
    5c2c:	481b      	ldr	r0, [pc, #108]	; (5c9c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6a4>)
    5c2e:	3010      	adds	r0, #16
    5c30:	4788      	blx	r1
    5c32:	e00a      	b.n	5c4a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x652>
    5c34:	28ff      	cmp	r0, #255	; 0xff
    5c36:	d004      	beq.n	5c42 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x64a>
    5c38:	f640 1102 	movw	r1, #2306	; 0x902
    5c3c:	2031      	movs	r0, #49	; 0x31
    5c3e:	f7fb fbdd 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5c42:	4816      	ldr	r0, [pc, #88]	; (5c9c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6a4>)
    5c44:	3010      	adds	r0, #16
    5c46:	f009 fd9d 	bl	f784 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e4>
    5c4a:	78a8      	ldrb	r0, [r5, #2]
    5c4c:	06c0      	lsls	r0, r0, #27
    5c4e:	d507      	bpl.n	5c60 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x668>
    5c50:	6860      	ldr	r0, [r4, #4]
    5c52:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    5c56:	290a      	cmp	r1, #10
    5c58:	d102      	bne.n	5c60 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x668>
    5c5a:	210b      	movs	r1, #11
    5c5c:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
    5c60:	7868      	ldrb	r0, [r5, #1]
    5c62:	0700      	lsls	r0, r0, #28
    5c64:	d518      	bpl.n	5c98 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6a0>
    5c66:	6860      	ldr	r0, [r4, #4]
    5c68:	2301      	movs	r3, #1
    5c6a:	2105      	movs	r1, #5
    5c6c:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    5c70:	3080      	adds	r0, #128	; 0x80
    5c72:	f008 f8bb 	bl	ddec <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5c76:	b108      	cbz	r0, 5c7c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x684>
    5c78:	2608      	movs	r6, #8
    5c7a:	e00d      	b.n	5c98 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6a0>
    5c7c:	2500      	movs	r5, #0
    5c7e:	4669      	mov	r1, sp
    5c80:	2003      	movs	r0, #3
    5c82:	9500      	str	r5, [sp, #0]
    5c84:	f7fc fb84 	bl	2390 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    5c88:	9800      	ldr	r0, [sp, #0]
    5c8a:	b128      	cbz	r0, 5c98 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6a0>
    5c8c:	7205      	strb	r5, [r0, #8]
    5c8e:	222a      	movs	r2, #42	; 0x2a
    5c90:	6861      	ldr	r1, [r4, #4]
    5c92:	9800      	ldr	r0, [sp, #0]
    5c94:	f008 fc41 	bl	e51a <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    5c98:	4630      	mov	r0, r6
    5c9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5c9c:	200000fc 	.word	0x200000fc
    5ca0:	200001c0 	.word	0x200001c0
    5ca4:	b570      	push	{r4, r5, r6, lr}
    5ca6:	4d28      	ldr	r5, [pc, #160]	; (5d48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x750>)
    5ca8:	2000      	movs	r0, #0
    5caa:	78a9      	ldrb	r1, [r5, #2]
    5cac:	07c9      	lsls	r1, r1, #31
    5cae:	d017      	beq.n	5ce0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e8>
    5cb0:	68e8      	ldr	r0, [r5, #12]
    5cb2:	f105 0410 	add.w	r4, r5, #16
    5cb6:	2301      	movs	r3, #1
    5cb8:	78c6      	ldrb	r6, [r0, #3]
    5cba:	6860      	ldr	r0, [r4, #4]
    5cbc:	2105      	movs	r1, #5
    5cbe:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    5cc2:	3080      	adds	r0, #128	; 0x80
    5cc4:	f008 f892 	bl	ddec <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5cc8:	b158      	cbz	r0, 5ce2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6ea>
    5cca:	1eb6      	subs	r6, r6, #2
    5ccc:	2e0a      	cmp	r6, #10
    5cce:	d206      	bcs.n	5cde <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e6>
    5cd0:	e8df f006 	tbb	[pc, r6]
    5cd4:	05050707 	.word	0x05050707
    5cd8:	05050707 	.word	0x05050707
    5cdc:	0707      	.short	0x0707
    5cde:	2008      	movs	r0, #8
    5ce0:	bd70      	pop	{r4, r5, r6, pc}
    5ce2:	68e8      	ldr	r0, [r5, #12]
    5ce4:	f7fd fa78 	bl	31d8 <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA>
    5ce8:	b338      	cbz	r0, 5d3a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x742>
    5cea:	68e8      	ldr	r0, [r5, #12]
    5cec:	78c5      	ldrb	r5, [r0, #3]
    5cee:	b11d      	cbz	r5, 5cf8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x700>
    5cf0:	2d01      	cmp	r5, #1
    5cf2:	d001      	beq.n	5cf8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x700>
    5cf4:	2d16      	cmp	r5, #22
    5cf6:	d113      	bne.n	5d20 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x728>
    5cf8:	6860      	ldr	r0, [r4, #4]
    5cfa:	f890 009d 	ldrb.w	r0, [r0, #157]	; 0x9d
    5cfe:	f008 f8cd 	bl	de9c <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    5d02:	b168      	cbz	r0, 5d20 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x728>
    5d04:	6861      	ldr	r1, [r4, #4]
    5d06:	f891 009d 	ldrb.w	r0, [r1, #157]	; 0x9d
    5d0a:	2820      	cmp	r0, #32
    5d0c:	d008      	beq.n	5d20 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x728>
    5d0e:	2821      	cmp	r0, #33	; 0x21
    5d10:	d003      	beq.n	5d1a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x722>
    5d12:	2d16      	cmp	r5, #22
    5d14:	d00f      	beq.n	5d36 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x73e>
    5d16:	2002      	movs	r0, #2
    5d18:	bd70      	pop	{r4, r5, r6, pc}
    5d1a:	202e      	movs	r0, #46	; 0x2e
    5d1c:	f881 009d 	strb.w	r0, [r1, #157]	; 0x9d
    5d20:	2d2b      	cmp	r5, #43	; 0x2b
    5d22:	d20a      	bcs.n	5d3a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x742>
    5d24:	4809      	ldr	r0, [pc, #36]	; (5d4c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x754>)
    5d26:	f850 1025 	ldr.w	r1, [r0, r5, lsl #2]
    5d2a:	b131      	cbz	r1, 5d3a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x742>
    5d2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5d30:	4805      	ldr	r0, [pc, #20]	; (5d48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x750>)
    5d32:	3010      	adds	r0, #16
    5d34:	4708      	bx	r1
    5d36:	2020      	movs	r0, #32
    5d38:	bd70      	pop	{r4, r5, r6, pc}
    5d3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5d3e:	4802      	ldr	r0, [pc, #8]	; (5d48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x750>)
    5d40:	3010      	adds	r0, #16
    5d42:	f000 bd59 	b.w	67f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1200>
    5d46:	0000      	.short	0x0000
    5d48:	200000fc 	.word	0x200000fc
    5d4c:	20000114 	.word	0x20000114
    5d50:	b570      	push	{r4, r5, r6, lr}
    5d52:	4e23      	ldr	r6, [pc, #140]	; (5de0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7e8>)
    5d54:	78b0      	ldrb	r0, [r6, #2]
    5d56:	0700      	lsls	r0, r0, #28
    5d58:	d540      	bpl.n	5ddc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7e4>
    5d5a:	f106 0410 	add.w	r4, r6, #16
    5d5e:	6860      	ldr	r0, [r4, #4]
    5d60:	3080      	adds	r0, #128	; 0x80
    5d62:	f009 fc2c 	bl	f5be <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    5d66:	b148      	cbz	r0, 5d7c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x784>
    5d68:	6860      	ldr	r0, [r4, #4]
    5d6a:	21fe      	movs	r1, #254	; 0xfe
    5d6c:	2500      	movs	r5, #0
    5d6e:	f880 1126 	strb.w	r1, [r0, #294]	; 0x126
    5d72:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    5d76:	291a      	cmp	r1, #26
    5d78:	d10c      	bne.n	5d94 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x79c>
    5d7a:	e004      	b.n	5d86 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x78e>
    5d7c:	f640 110e 	movw	r1, #2318	; 0x90e
    5d80:	2031      	movs	r0, #49	; 0x31
    5d82:	f7fb fb3b 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5d86:	f880 50db 	strb.w	r5, [r0, #219]	; 0xdb
    5d8a:	f7ff fd43 	bl	5814 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    5d8e:	6860      	ldr	r0, [r4, #4]
    5d90:	f880 509e 	strb.w	r5, [r0, #158]	; 0x9e
    5d94:	6860      	ldr	r0, [r4, #4]
    5d96:	f890 109d 	ldrb.w	r1, [r0, #157]	; 0x9d
    5d9a:	2920      	cmp	r1, #32
    5d9c:	d002      	beq.n	5da4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7ac>
    5d9e:	2931      	cmp	r1, #49	; 0x31
    5da0:	d113      	bne.n	5dca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7d2>
    5da2:	e00b      	b.n	5dbc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7c4>
    5da4:	f890 009e 	ldrb.w	r0, [r0, #158]	; 0x9e
    5da8:	f008 f878 	bl	de9c <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    5dac:	b108      	cbz	r0, 5db2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7ba>
    5dae:	202e      	movs	r0, #46	; 0x2e
    5db0:	e000      	b.n	5db4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7bc>
    5db2:	2021      	movs	r0, #33	; 0x21
    5db4:	6861      	ldr	r1, [r4, #4]
    5db6:	f881 009d 	strb.w	r0, [r1, #157]	; 0x9d
    5dba:	e006      	b.n	5dca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7d2>
    5dbc:	2101      	movs	r1, #1
    5dbe:	f880 12c5 	strb.w	r1, [r0, #709]	; 0x2c5
    5dc2:	f880 509d 	strb.w	r5, [r0, #157]	; 0x9d
    5dc6:	f880 50d6 	strb.w	r5, [r0, #214]	; 0xd6
    5dca:	6860      	ldr	r0, [r4, #4]
    5dcc:	f890 109f 	ldrb.w	r1, [r0, #159]	; 0x9f
    5dd0:	2907      	cmp	r1, #7
    5dd2:	d103      	bne.n	5ddc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7e4>
    5dd4:	2102      	movs	r1, #2
    5dd6:	7031      	strb	r1, [r6, #0]
    5dd8:	f880 1126 	strb.w	r1, [r0, #294]	; 0x126
    5ddc:	bd70      	pop	{r4, r5, r6, pc}
    5dde:	0000      	.short	0x0000
    5de0:	200000fc 	.word	0x200000fc
    5de4:	b538      	push	{r3, r4, r5, lr}
    5de6:	4605      	mov	r5, r0
    5de8:	4668      	mov	r0, sp
    5dea:	f7fc f96b 	bl	20c4 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>
    5dee:	b308      	cbz	r0, 5e34 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x83c>
    5df0:	2222      	movs	r2, #34	; 0x22
    5df2:	2100      	movs	r1, #0
    5df4:	9800      	ldr	r0, [sp, #0]
    5df6:	f00b f89f 	bl	10f38 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    5dfa:	2103      	movs	r1, #3
    5dfc:	9800      	ldr	r0, [sp, #0]
    5dfe:	f008 fb0e 	bl	e41e <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>
    5e02:	9800      	ldr	r0, [sp, #0]
    5e04:	7801      	ldrb	r1, [r0, #0]
    5e06:	f001 01ef 	and.w	r1, r1, #239	; 0xef
    5e0a:	7001      	strb	r1, [r0, #0]
    5e0c:	4629      	mov	r1, r5
    5e0e:	f7fd f9f3 	bl	31f8 <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ>
    5e12:	4c59      	ldr	r4, [pc, #356]	; (5f78 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x980>)
    5e14:	2d11      	cmp	r5, #17
    5e16:	d02d      	beq.n	5e74 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x87c>
    5e18:	dc0f      	bgt.n	5e3a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x842>
    5e1a:	f1a5 0502 	sub.w	r5, r5, #2
    5e1e:	2d0d      	cmp	r5, #13
    5e20:	d21f      	bcs.n	5e62 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x86a>
    5e22:	e8df f005 	tbb	[pc, r5]
    5e26:	1e21      	.short	0x1e21
    5e28:	219e9e51 	.word	0x219e9e51
    5e2c:	9e1e5e1e 	.word	0x9e1e5e1e
    5e30:	008c343a 	.word	0x008c343a
    5e34:	f640 31b5 	movw	r1, #2997	; 0xbb5
    5e38:	e099      	b.n	5f6e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x976>
    5e3a:	2d17      	cmp	r5, #23
    5e3c:	d070      	beq.n	5f20 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x928>
    5e3e:	dc08      	bgt.n	5e52 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x85a>
    5e40:	f1a5 0512 	sub.w	r5, r5, #18
    5e44:	2d05      	cmp	r5, #5
    5e46:	d20c      	bcs.n	5e62 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x86a>
    5e48:	e8df f005 	tbb	[pc, r5]
    5e4c:	50508b8b 	.word	0x50508b8b
    5e50:	0033      	.short	0x0033
    5e52:	2d23      	cmp	r5, #35	; 0x23
    5e54:	d077      	beq.n	5f46 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x94e>
    5e56:	2d24      	cmp	r5, #36	; 0x24
    5e58:	d075      	beq.n	5f46 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x94e>
    5e5a:	2d25      	cmp	r5, #37	; 0x25
    5e5c:	d073      	beq.n	5f46 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x94e>
    5e5e:	2dff      	cmp	r5, #255	; 0xff
    5e60:	d077      	beq.n	5f52 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x95a>
    5e62:	f640 4161 	movw	r1, #3169	; 0xc61
    5e66:	e082      	b.n	5f6e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x976>
    5e68:	6860      	ldr	r0, [r4, #4]
    5e6a:	9900      	ldr	r1, [sp, #0]
    5e6c:	f890 0128 	ldrb.w	r0, [r0, #296]	; 0x128
    5e70:	7108      	strb	r0, [r1, #4]
    5e72:	e076      	b.n	5f62 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x96a>
    5e74:	6860      	ldr	r0, [r4, #4]
    5e76:	f890 1123 	ldrb.w	r1, [r0, #291]	; 0x123
    5e7a:	9800      	ldr	r0, [sp, #0]
    5e7c:	f008 fabb 	bl	e3f6 <sym_YMBI57OSTLFK65WQKT7WKM26EFMSOHLSMFNNR4I>
    5e80:	6860      	ldr	r0, [r4, #4]
    5e82:	f890 1122 	ldrb.w	r1, [r0, #290]	; 0x122
    5e86:	9800      	ldr	r0, [sp, #0]
    5e88:	f008 fab9 	bl	e3fe <sym_HAHVMCZ4V2U4G5KM2JOTYBKS4GFM72EJZRT7M3A>
    5e8c:	e069      	b.n	5f62 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x96a>
    5e8e:	6861      	ldr	r1, [r4, #4]
    5e90:	9800      	ldr	r0, [sp, #0]
    5e92:	f891 1122 	ldrb.w	r1, [r1, #290]	; 0x122
    5e96:	7101      	strb	r1, [r0, #4]
    5e98:	e063      	b.n	5f62 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x96a>
    5e9a:	9800      	ldr	r0, [sp, #0]
    5e9c:	210c      	movs	r1, #12
    5e9e:	7101      	strb	r1, [r0, #4]
    5ea0:	2159      	movs	r1, #89	; 0x59
    5ea2:	7141      	strb	r1, [r0, #5]
    5ea4:	2100      	movs	r1, #0
    5ea6:	7181      	strb	r1, [r0, #6]
    5ea8:	214b      	movs	r1, #75	; 0x4b
    5eaa:	71c1      	strb	r1, [r0, #7]
    5eac:	2112      	movs	r1, #18
    5eae:	7201      	strb	r1, [r0, #8]
    5eb0:	e057      	b.n	5f62 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x96a>
    5eb2:	9800      	ldr	r0, [sp, #0]
    5eb4:	f8d4 1004 	ldr.w	r1, [r4, #4]
    5eb8:	f891 113e 	ldrb.w	r1, [r1, #318]	; 0x13e
    5ebc:	7101      	strb	r1, [r0, #4]
    5ebe:	6861      	ldr	r1, [r4, #4]
    5ec0:	f891 113f 	ldrb.w	r1, [r1, #319]	; 0x13f
    5ec4:	7141      	strb	r1, [r0, #5]
    5ec6:	e04c      	b.n	5f62 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x96a>
    5ec8:	6861      	ldr	r1, [r4, #4]
    5eca:	9800      	ldr	r0, [sp, #0]
    5ecc:	f501 7110 	add.w	r1, r1, #576	; 0x240
    5ed0:	f008 fa4c 	bl	e36c <sym_5WHAN4NH6PZY7VV5KTN53CABJRWXR3RJHHTA7KA>
    5ed4:	6861      	ldr	r1, [r4, #4]
    5ed6:	9800      	ldr	r0, [sp, #0]
    5ed8:	f501 718e 	add.w	r1, r1, #284	; 0x11c
    5edc:	f008 fa43 	bl	e366 <sym_RGBMWS6T65LAWR3HOVV5354MKQCATDBBY34XWQA>
    5ee0:	e03f      	b.n	5f62 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x96a>
    5ee2:	4825      	ldr	r0, [pc, #148]	; (5f78 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x980>)
    5ee4:	9900      	ldr	r1, [sp, #0]
    5ee6:	f7fd fcd7 	bl	3898 <sym_KQ4RAL3HW3LUBE4EKZDESO77BJMQRXFGP63ANLQ>
    5eea:	e03a      	b.n	5f62 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x96a>
    5eec:	6860      	ldr	r0, [r4, #4]
    5eee:	f8b0 104c 	ldrh.w	r1, [r0, #76]	; 0x4c
    5ef2:	9800      	ldr	r0, [sp, #0]
    5ef4:	f008 fa9b 	bl	e42e <sym_XW2AJRDPRGLPOQ7S6SBIDHJSPT737QJRC7LOWOI>
    5ef8:	6860      	ldr	r0, [r4, #4]
    5efa:	f8b0 112a 	ldrh.w	r1, [r0, #298]	; 0x12a
    5efe:	9800      	ldr	r0, [sp, #0]
    5f00:	f008 fa99 	bl	e436 <sym_LKCMUIZAJSOHIZE54V37DJ4ULJ25HGEY7F7ST5I>
    5f04:	6860      	ldr	r0, [r4, #4]
    5f06:	f8b0 1048 	ldrh.w	r1, [r0, #72]	; 0x48
    5f0a:	9800      	ldr	r0, [sp, #0]
    5f0c:	f008 fa97 	bl	e43e <sym_5NOMYYLIL22YATRZCGPQVOYH6BFSDNIEMEEMIZA>
    5f10:	6860      	ldr	r0, [r4, #4]
    5f12:	f8b0 1128 	ldrh.w	r1, [r0, #296]	; 0x128
    5f16:	9800      	ldr	r0, [sp, #0]
    5f18:	f008 fa95 	bl	e446 <sym_BD2MQHSWE7QNCT7DV5JGZCA5J2QIL2T6RGRVJ3Y>
    5f1c:	e021      	b.n	5f62 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x96a>
    5f1e:	e7ff      	b.n	5f20 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x928>
    5f20:	6861      	ldr	r1, [r4, #4]
    5f22:	f891 013c 	ldrb.w	r0, [r1, #316]	; 0x13c
    5f26:	2801      	cmp	r0, #1
    5f28:	9800      	ldr	r0, [sp, #0]
    5f2a:	d0c5      	beq.n	5eb8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8c0>
    5f2c:	f891 1066 	ldrb.w	r1, [r1, #102]	; 0x66
    5f30:	7101      	strb	r1, [r0, #4]
    5f32:	6861      	ldr	r1, [r4, #4]
    5f34:	f891 1067 	ldrb.w	r1, [r1, #103]	; 0x67
    5f38:	e7c4      	b.n	5ec4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8cc>
    5f3a:	e004      	b.n	5f46 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x94e>
    5f3c:	e009      	b.n	5f52 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x95a>
    5f3e:	9800      	ldr	r0, [sp, #0]
    5f40:	f7fd fc5a 	bl	37f8 <sym_CYYZ5DA5UWAE37FM7XP643I473QUSWWZ2MS7OLY>
    5f44:	e00d      	b.n	5f62 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x96a>
    5f46:	4a0c      	ldr	r2, [pc, #48]	; (5f78 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x980>)
    5f48:	4628      	mov	r0, r5
    5f4a:	9900      	ldr	r1, [sp, #0]
    5f4c:	f009 fd57 	bl	f9fe <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ>
    5f50:	e007      	b.n	5f62 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x96a>
    5f52:	6860      	ldr	r0, [r4, #4]
    5f54:	f890 22c7 	ldrb.w	r2, [r0, #711]	; 0x2c7
    5f58:	f8d0 12c8 	ldr.w	r1, [r0, #712]	; 0x2c8
    5f5c:	9800      	ldr	r0, [sp, #0]
    5f5e:	f008 fa50 	bl	e402 <sym_EHH4TL4V6XWVDGG5OCXTIQQT5C4OFTGXZXSIJAA>
    5f62:	f7fc f889 	bl	2078 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>
    5f66:	2800      	cmp	r0, #0
    5f68:	d104      	bne.n	5f74 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x97c>
    5f6a:	f640 4165 	movw	r1, #3173	; 0xc65
    5f6e:	2031      	movs	r0, #49	; 0x31
    5f70:	f7fb fa44 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5f74:	bd38      	pop	{r3, r4, r5, pc}
    5f76:	0000      	.short	0x0000
    5f78:	2000010c 	.word	0x2000010c
    5f7c:	e92d 5ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    5f80:	4e8c      	ldr	r6, [pc, #560]	; (61b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbbc>)
    5f82:	468a      	mov	sl, r1
    5f84:	6870      	ldr	r0, [r6, #4]
    5f86:	8800      	ldrh	r0, [r0, #0]
    5f88:	f7fb fe4a 	bl	1c20 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    5f8c:	0007      	movs	r7, r0
    5f8e:	d00c      	beq.n	5faa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9b2>
    5f90:	f1a6 0510 	sub.w	r5, r6, #16
    5f94:	f04f 0400 	mov.w	r4, #0
    5f98:	8868      	ldrh	r0, [r5, #2]
    5f9a:	05c0      	lsls	r0, r0, #23
    5f9c:	d50a      	bpl.n	5fb4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9bc>
    5f9e:	6870      	ldr	r0, [r6, #4]
    5fa0:	f8a0 40cc 	strh.w	r4, [r0, #204]	; 0xcc
    5fa4:	f880 4234 	strb.w	r4, [r0, #564]	; 0x234
    5fa8:	e009      	b.n	5fbe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9c6>
    5faa:	f640 7145 	movw	r1, #3909	; 0xf45
    5fae:	2031      	movs	r0, #49	; 0x31
    5fb0:	f7fb fa24 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5fb4:	6871      	ldr	r1, [r6, #4]
    5fb6:	f831 0fcc 	ldrh.w	r0, [r1, #204]!
    5fba:	1c40      	adds	r0, r0, #1
    5fbc:	8008      	strh	r0, [r1, #0]
    5fbe:	f000 ff43 	bl	6e48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1850>
    5fc2:	f04f 0901 	mov.w	r9, #1
    5fc6:	b340      	cbz	r0, 601a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa22>
    5fc8:	8868      	ldrh	r0, [r5, #2]
    5fca:	0500      	lsls	r0, r0, #20
    5fcc:	d506      	bpl.n	5fdc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9e4>
    5fce:	6870      	ldr	r0, [r6, #4]
    5fd0:	f890 10a3 	ldrb.w	r1, [r0, #163]	; 0xa3
    5fd4:	b111      	cbz	r1, 5fdc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9e4>
    5fd6:	f8c0 40c0 	str.w	r4, [r0, #192]	; 0xc0
    5fda:	e01e      	b.n	601a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa22>
    5fdc:	6870      	ldr	r0, [r6, #4]
    5fde:	f8d0 10c0 	ldr.w	r1, [r0, #192]	; 0xc0
    5fe2:	1c49      	adds	r1, r1, #1
    5fe4:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
    5fe8:	f8d0 20c4 	ldr.w	r2, [r0, #196]	; 0xc4
    5fec:	428a      	cmp	r2, r1
    5fee:	d301      	bcc.n	5ff4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9fc>
    5ff0:	1a53      	subs	r3, r2, r1
    5ff2:	e000      	b.n	5ff6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9fe>
    5ff4:	2300      	movs	r3, #0
    5ff6:	f8b5 c004 	ldrh.w	ip, [r5, #4]
    5ffa:	f10c 0c05 	add.w	ip, ip, #5
    5ffe:	4563      	cmp	r3, ip
    6000:	d801      	bhi.n	6006 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa0e>
    6002:	f880 90ca 	strb.w	r9, [r0, #202]	; 0xca
    6006:	4291      	cmp	r1, r2
    6008:	d307      	bcc.n	601a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa22>
    600a:	f8c0 40c0 	str.w	r4, [r0, #192]	; 0xc0
    600e:	220f      	movs	r2, #15
    6010:	4969      	ldr	r1, [pc, #420]	; (61b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbc0>)
    6012:	f500 70ac 	add.w	r0, r0, #344	; 0x158
    6016:	f008 fa94 	bl	e542 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    601a:	8868      	ldrh	r0, [r5, #2]
    601c:	f04f 0b02 	mov.w	fp, #2
    6020:	f410 7f40 	tst.w	r0, #768	; 0x300
    6024:	d00e      	beq.n	6044 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa4c>
    6026:	6870      	ldr	r0, [r6, #4]
    6028:	f890 10a1 	ldrb.w	r1, [r0, #161]	; 0xa1
    602c:	b111      	cbz	r1, 6034 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa3c>
    602e:	2903      	cmp	r1, #3
    6030:	d108      	bne.n	6044 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa4c>
    6032:	e002      	b.n	603a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa42>
    6034:	f880 90a1 	strb.w	r9, [r0, #161]	; 0xa1
    6038:	e001      	b.n	603e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa46>
    603a:	f880 b0a1 	strb.w	fp, [r0, #161]	; 0xa1
    603e:	2101      	movs	r1, #1
    6040:	f7fe fdd0 	bl	4be4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    6044:	6870      	ldr	r0, [r6, #4]
    6046:	46b0      	mov	r8, r6
    6048:	f890 10a1 	ldrb.w	r1, [r0, #161]	; 0xa1
    604c:	2901      	cmp	r1, #1
    604e:	d104      	bne.n	605a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa62>
    6050:	8869      	ldrh	r1, [r5, #2]
    6052:	0549      	lsls	r1, r1, #21
    6054:	d501      	bpl.n	605a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa62>
    6056:	f880 b0a1 	strb.w	fp, [r0, #161]	; 0xa1
    605a:	9900      	ldr	r1, [sp, #0]
    605c:	2900      	cmp	r1, #0
    605e:	d179      	bne.n	6154 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb5c>
    6060:	78a9      	ldrb	r1, [r5, #2]
    6062:	0649      	lsls	r1, r1, #25
    6064:	d502      	bpl.n	606c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa74>
    6066:	f8a0 4248 	strh.w	r4, [r0, #584]	; 0x248
    606a:	e004      	b.n	6076 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa7e>
    606c:	f8b0 1248 	ldrh.w	r1, [r0, #584]	; 0x248
    6070:	1c49      	adds	r1, r1, #1
    6072:	f8a0 1248 	strh.w	r1, [r0, #584]	; 0x248
    6076:	4650      	mov	r0, sl
    6078:	f7ff fdb8 	bl	5bec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5f4>
    607c:	ea40 000a 	orr.w	r0, r0, sl
    6080:	4682      	mov	sl, r0
    6082:	f7ff fd37 	bl	5af4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4fc>
    6086:	f8d8 6004 	ldr.w	r6, [r8, #4]
    608a:	f8b6 0228 	ldrh.w	r0, [r6, #552]	; 0x228
    608e:	1c40      	adds	r0, r0, #1
    6090:	f8a6 0228 	strh.w	r0, [r6, #552]	; 0x228
    6094:	f896 022c 	ldrb.w	r0, [r6, #556]	; 0x22c
    6098:	b128      	cbz	r0, 60a6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xaae>
    609a:	f7fc f9b7 	bl	240c <sym_ZWLSMB33C6NPFOBZGVPV4PN4UKQGSPLLR4WLDFI>
    609e:	b1b0      	cbz	r0, 60ce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xad6>
    60a0:	f8a6 4228 	strh.w	r4, [r6, #552]	; 0x228
    60a4:	e013      	b.n	60ce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xad6>
    60a6:	f7fc f88f 	bl	21c8 <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY>
    60aa:	b108      	cbz	r0, 60b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xab8>
    60ac:	f8a6 4228 	strh.w	r4, [r6, #552]	; 0x228
    60b0:	f7fc f884 	bl	21bc <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ>
    60b4:	b158      	cbz	r0, 60ce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xad6>
    60b6:	f896 0234 	ldrb.w	r0, [r6, #564]	; 0x234
    60ba:	1c40      	adds	r0, r0, #1
    60bc:	b2c0      	uxtb	r0, r0
    60be:	f886 0234 	strb.w	r0, [r6, #564]	; 0x234
    60c2:	2802      	cmp	r0, #2
    60c4:	d903      	bls.n	60ce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xad6>
    60c6:	f8a6 4228 	strh.w	r4, [r6, #552]	; 0x228
    60ca:	f886 4234 	strb.w	r4, [r6, #564]	; 0x234
    60ce:	f8d8 0004 	ldr.w	r0, [r8, #4]
    60d2:	4646      	mov	r6, r8
    60d4:	2301      	movs	r3, #1
    60d6:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    60da:	2100      	movs	r1, #0
    60dc:	3080      	adds	r0, #128	; 0x80
    60de:	f007 fe85 	bl	ddec <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    60e2:	b920      	cbnz	r0, 60ee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xaf6>
    60e4:	6870      	ldr	r0, [r6, #4]
    60e6:	f890 009e 	ldrb.w	r0, [r0, #158]	; 0x9e
    60ea:	280b      	cmp	r0, #11
    60ec:	d15f      	bne.n	61ae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbb6>
    60ee:	6870      	ldr	r0, [r6, #4]
    60f0:	2301      	movs	r3, #1
    60f2:	2100      	movs	r1, #0
    60f4:	f890 209d 	ldrb.w	r2, [r0, #157]	; 0x9d
    60f8:	3080      	adds	r0, #128	; 0x80
    60fa:	f007 fe77 	bl	ddec <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    60fe:	b350      	cbz	r0, 6156 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb5e>
    6100:	6870      	ldr	r0, [r6, #4]
    6102:	2301      	movs	r3, #1
    6104:	2100      	movs	r1, #0
    6106:	f890 209f 	ldrb.w	r2, [r0, #159]	; 0x9f
    610a:	3080      	adds	r0, #128	; 0x80
    610c:	f007 fe6e 	bl	ddec <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6110:	b308      	cbz	r0, 6156 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb5e>
    6112:	6870      	ldr	r0, [r6, #4]
    6114:	f890 10a1 	ldrb.w	r1, [r0, #161]	; 0xa1
    6118:	2902      	cmp	r1, #2
    611a:	d148      	bne.n	61ae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbb6>
    611c:	f890 0234 	ldrb.w	r0, [r0, #564]	; 0x234
    6120:	b9c8      	cbnz	r0, 6156 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb5e>
    6122:	4638      	mov	r0, r7
    6124:	f007 f969 	bl	d3fa <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    6128:	b1a8      	cbz	r0, 6156 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb5e>
    612a:	6870      	ldr	r0, [r6, #4]
    612c:	3080      	adds	r0, #128	; 0x80
    612e:	f009 fa46 	bl	f5be <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    6132:	b980      	cbnz	r0, 6156 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb5e>
    6134:	6871      	ldr	r1, [r6, #4]
    6136:	f8b1 0222 	ldrh.w	r0, [r1, #546]	; 0x222
    613a:	2801      	cmp	r0, #1
    613c:	d937      	bls.n	61ae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbb6>
    613e:	f881 922a 	strb.w	r9, [r1, #554]	; 0x22a
    6142:	f8b1 20ce 	ldrh.w	r2, [r1, #206]	; 0xce
    6146:	f8b1 00cc 	ldrh.w	r0, [r1, #204]	; 0xcc
    614a:	1e93      	subs	r3, r2, #2
    614c:	4298      	cmp	r0, r3
    614e:	db03      	blt.n	6158 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb60>
    6150:	2001      	movs	r0, #1
    6152:	e004      	b.n	615e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb66>
    6154:	e01c      	b.n	6190 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb98>
    6156:	e02a      	b.n	61ae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbb6>
    6158:	1a10      	subs	r0, r2, r0
    615a:	1e40      	subs	r0, r0, #1
    615c:	b280      	uxth	r0, r0
    615e:	f8b1 3228 	ldrh.w	r3, [r1, #552]	; 0x228
    6162:	88aa      	ldrh	r2, [r5, #4]
    6164:	4293      	cmp	r3, r2
    6166:	d301      	bcc.n	616c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb74>
    6168:	2201      	movs	r2, #1
    616a:	e002      	b.n	6172 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb7a>
    616c:	1ad2      	subs	r2, r2, r3
    616e:	1c52      	adds	r2, r2, #1
    6170:	b292      	uxth	r2, r2
    6172:	4290      	cmp	r0, r2
    6174:	d900      	bls.n	6178 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb80>
    6176:	4610      	mov	r0, r2
    6178:	2801      	cmp	r0, #1
    617a:	d101      	bne.n	6180 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb88>
    617c:	f881 422a 	strb.w	r4, [r1, #554]	; 0x22a
    6180:	6871      	ldr	r1, [r6, #4]
    6182:	f8b1 2094 	ldrh.w	r2, [r1, #148]	; 0x94
    6186:	4410      	add	r0, r2
    6188:	f8a1 0224 	strh.w	r0, [r1, #548]	; 0x224
    618c:	f000 ff28 	bl	6fe0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19e8>
    6190:	78a8      	ldrb	r0, [r5, #2]
    6192:	4652      	mov	r2, sl
    6194:	f3c0 1180 	ubfx	r1, r0, #6, #1
    6198:	9800      	ldr	r0, [sp, #0]
    619a:	f000 fe69 	bl	6e70 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1878>
    619e:	f8d8 0004 	ldr.w	r0, [r8, #4]
    61a2:	f880 422b 	strb.w	r4, [r0, #555]	; 0x22b
    61a6:	e8bd 5ffc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    61aa:	f7fb bf4f 	b.w	204c <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    61ae:	2001      	movs	r0, #1
    61b0:	6871      	ldr	r1, [r6, #4]
    61b2:	e7e3      	b.n	617c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb84>
    61b4:	2000010c 	.word	0x2000010c
    61b8:	0000e9a5 	.word	0x0000e9a5
    61bc:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    61be:	4c68      	ldr	r4, [pc, #416]	; (6360 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd68>)
    61c0:	2301      	movs	r3, #1
    61c2:	2100      	movs	r1, #0
    61c4:	6860      	ldr	r0, [r4, #4]
    61c6:	f890 209d 	ldrb.w	r2, [r0, #157]	; 0x9d
    61ca:	3080      	adds	r0, #128	; 0x80
    61cc:	f007 fe0e 	bl	ddec <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    61d0:	2800      	cmp	r0, #0
    61d2:	d07a      	beq.n	62ca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcd2>
    61d4:	6860      	ldr	r0, [r4, #4]
    61d6:	f890 1143 	ldrb.w	r1, [r0, #323]	; 0x143
    61da:	2500      	movs	r5, #0
    61dc:	b139      	cbz	r1, 61ee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbf6>
    61de:	2100      	movs	r1, #0
    61e0:	200e      	movs	r0, #14
    61e2:	f000 f8bf 	bl	6364 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd6c>
    61e6:	6860      	ldr	r0, [r4, #4]
    61e8:	f880 5143 	strb.w	r5, [r0, #323]	; 0x143
    61ec:	e0b5      	b.n	635a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd62>
    61ee:	f890 1142 	ldrb.w	r1, [r0, #322]	; 0x142
    61f2:	b119      	cbz	r1, 61fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc04>
    61f4:	f890 10dd 	ldrb.w	r1, [r0, #221]	; 0xdd
    61f8:	0789      	lsls	r1, r1, #30
    61fa:	d016      	beq.n	622a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc32>
    61fc:	f890 1132 	ldrb.w	r1, [r0, #306]	; 0x132
    6200:	f88d 1004 	strb.w	r1, [sp, #4]
    6204:	9901      	ldr	r1, [sp, #4]
    6206:	9101      	str	r1, [sp, #4]
    6208:	f89d 1004 	ldrb.w	r1, [sp, #4]
    620c:	b141      	cbz	r1, 6220 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc28>
    620e:	f890 1133 	ldrb.w	r1, [r0, #307]	; 0x133
    6212:	f88d 1000 	strb.w	r1, [sp]
    6216:	9900      	ldr	r1, [sp, #0]
    6218:	9100      	str	r1, [sp, #0]
    621a:	f89d 1000 	ldrb.w	r1, [sp]
    621e:	b189      	cbz	r1, 6244 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc4c>
    6220:	f890 113c 	ldrb.w	r1, [r0, #316]	; 0x13c
    6224:	2901      	cmp	r1, #1
    6226:	d030      	beq.n	628a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc92>
    6228:	e040      	b.n	62ac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcb4>
    622a:	2100      	movs	r1, #0
    622c:	200c      	movs	r0, #12
    622e:	f000 f899 	bl	6364 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd6c>
    6232:	6860      	ldr	r0, [r4, #4]
    6234:	f810 1fdd 	ldrb.w	r1, [r0, #221]!
    6238:	f041 0101 	orr.w	r1, r1, #1
    623c:	7001      	strb	r1, [r0, #0]
    623e:	f880 5065 	strb.w	r5, [r0, #101]	; 0x65
    6242:	e08a      	b.n	635a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd62>
    6244:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    6248:	2925      	cmp	r1, #37	; 0x25
    624a:	d01c      	beq.n	6286 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc8e>
    624c:	f890 109d 	ldrb.w	r1, [r0, #157]	; 0x9d
    6250:	2925      	cmp	r1, #37	; 0x25
    6252:	d018      	beq.n	6286 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc8e>
    6254:	f05f 0300 	movs.w	r3, #0
    6258:	f200 22ce 	addw	r2, r0, #718	; 0x2ce
    625c:	f500 7199 	add.w	r1, r0, #306	; 0x132
    6260:	f008 f985 	bl	e56e <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    6264:	6860      	ldr	r0, [r4, #4]
    6266:	f880 5132 	strb.w	r5, [r0, #306]	; 0x132
    626a:	2100      	movs	r1, #0
    626c:	2014      	movs	r0, #20
    626e:	f000 f879 	bl	6364 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd6c>
    6272:	6861      	ldr	r1, [r4, #4]
    6274:	f101 002c 	add.w	r0, r1, #44	; 0x2c
    6278:	8bc2      	ldrh	r2, [r0, #30]
    627a:	f8a1 2128 	strh.w	r2, [r1, #296]	; 0x128
    627e:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    6280:	f8a1 012a 	strh.w	r0, [r1, #298]	; 0x12a
    6284:	e069      	b.n	635a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd62>
    6286:	2301      	movs	r3, #1
    6288:	e7e6      	b.n	6258 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc60>
    628a:	f890 113d 	ldrb.w	r1, [r0, #317]	; 0x13d
    628e:	f88d 1000 	strb.w	r1, [sp]
    6292:	9900      	ldr	r1, [sp, #0]
    6294:	9100      	str	r1, [sp, #0]
    6296:	f89d 1000 	ldrb.w	r1, [sp]
    629a:	b939      	cbnz	r1, 62ac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcb4>
    629c:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    62a0:	2301      	movs	r3, #1
    62a2:	210b      	movs	r1, #11
    62a4:	3080      	adds	r0, #128	; 0x80
    62a6:	f007 fda1 	bl	ddec <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    62aa:	b178      	cbz	r0, 62cc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcd4>
    62ac:	6860      	ldr	r0, [r4, #4]
    62ae:	f890 1149 	ldrb.w	r1, [r0, #329]	; 0x149
    62b2:	f88d 1000 	strb.w	r1, [sp]
    62b6:	9900      	ldr	r1, [sp, #0]
    62b8:	9100      	str	r1, [sp, #0]
    62ba:	f89d 1000 	ldrb.w	r1, [sp]
    62be:	b3b9      	cbz	r1, 6330 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd38>
    62c0:	2100      	movs	r1, #0
    62c2:	2023      	movs	r0, #35	; 0x23
    62c4:	f000 f84e 	bl	6364 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd6c>
    62c8:	e047      	b.n	635a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd62>
    62ca:	e030      	b.n	632e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd36>
    62cc:	6860      	ldr	r0, [r4, #4]
    62ce:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
    62d2:	f009 f97c 	bl	f5ce <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    62d6:	4605      	mov	r5, r0
    62d8:	6860      	ldr	r0, [r4, #4]
    62da:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    62de:	f009 f976 	bl	f5ce <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    62e2:	4606      	mov	r6, r0
    62e4:	6860      	ldr	r0, [r4, #4]
    62e6:	f890 113e 	ldrb.w	r1, [r0, #318]	; 0x13e
    62ea:	4628      	mov	r0, r5
    62ec:	f009 f97a 	bl	f5e4 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x44>
    62f0:	b150      	cbz	r0, 6308 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd10>
    62f2:	6860      	ldr	r0, [r4, #4]
    62f4:	f890 113f 	ldrb.w	r1, [r0, #319]	; 0x13f
    62f8:	4630      	mov	r0, r6
    62fa:	f009 f973 	bl	f5e4 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x44>
    62fe:	b118      	cbz	r0, 6308 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd10>
    6300:	2000      	movs	r0, #0
    6302:	f000 f941 	bl	6588 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf90>
    6306:	e011      	b.n	632c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd34>
    6308:	6860      	ldr	r0, [r4, #4]
    630a:	2301      	movs	r3, #1
    630c:	2103      	movs	r1, #3
    630e:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    6312:	3080      	adds	r0, #128	; 0x80
    6314:	f007 fd6a 	bl	ddec <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6318:	b940      	cbnz	r0, 632c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd34>
    631a:	6860      	ldr	r0, [r4, #4]
    631c:	2301      	movs	r3, #1
    631e:	2102      	movs	r1, #2
    6320:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    6324:	3080      	adds	r0, #128	; 0x80
    6326:	f007 fd61 	bl	ddec <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    632a:	b110      	cbz	r0, 6332 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd3a>
    632c:	2000      	movs	r0, #0
    632e:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    6330:	e002      	b.n	6338 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd40>
    6332:	2100      	movs	r1, #0
    6334:	2016      	movs	r0, #22
    6336:	e7c5      	b.n	62c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xccc>
    6338:	f890 0146 	ldrb.w	r0, [r0, #326]	; 0x146
    633c:	f88d 0000 	strb.w	r0, [sp]
    6340:	9800      	ldr	r0, [sp, #0]
    6342:	9000      	str	r0, [sp, #0]
    6344:	f89d 0000 	ldrb.w	r0, [sp]
    6348:	2800      	cmp	r0, #0
    634a:	d0f0      	beq.n	632e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd36>
    634c:	2100      	movs	r1, #0
    634e:	2025      	movs	r0, #37	; 0x25
    6350:	f000 f808 	bl	6364 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd6c>
    6354:	6860      	ldr	r0, [r4, #4]
    6356:	f880 5146 	strb.w	r5, [r0, #326]	; 0x146
    635a:	2001      	movs	r0, #1
    635c:	e7e7      	b.n	632e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd36>
    635e:	0000      	.short	0x0000
    6360:	2000010c 	.word	0x2000010c
    6364:	b570      	push	{r4, r5, r6, lr}
    6366:	4c0d      	ldr	r4, [pc, #52]	; (639c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xda4>)
    6368:	4606      	mov	r6, r0
    636a:	460d      	mov	r5, r1
    636c:	6860      	ldr	r0, [r4, #4]
    636e:	3080      	adds	r0, #128	; 0x80
    6370:	f009 f925 	bl	f5be <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    6374:	b120      	cbz	r0, 6380 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd88>
    6376:	f640 416a 	movw	r1, #3178	; 0xc6a
    637a:	2031      	movs	r0, #49	; 0x31
    637c:	f7fb f83e 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6380:	6862      	ldr	r2, [r4, #4]
    6382:	2000      	movs	r0, #0
    6384:	2d01      	cmp	r5, #1
    6386:	f882 6126 	strb.w	r6, [r2, #294]	; 0x126
    638a:	d004      	beq.n	6396 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd9e>
    638c:	f822 0fd2 	strh.w	r0, [r2, #210]!
    6390:	2001      	movs	r0, #1
    6392:	7110      	strb	r0, [r2, #4]
    6394:	bd70      	pop	{r4, r5, r6, pc}
    6396:	f8a2 00d8 	strh.w	r0, [r2, #216]	; 0xd8
    639a:	bd70      	pop	{r4, r5, r6, pc}
    639c:	2000010c 	.word	0x2000010c
    63a0:	b538      	push	{r3, r4, r5, lr}
    63a2:	4c1f      	ldr	r4, [pc, #124]	; (6420 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe28>)
    63a4:	2500      	movs	r5, #0
    63a6:	6860      	ldr	r0, [r4, #4]
    63a8:	f890 12b0 	ldrb.w	r1, [r0, #688]	; 0x2b0
    63ac:	2901      	cmp	r1, #1
    63ae:	d00c      	beq.n	63ca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdd2>
    63b0:	2902      	cmp	r1, #2
    63b2:	d133      	bne.n	641c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe24>
    63b4:	f890 10dc 	ldrb.w	r1, [r0, #220]	; 0xdc
    63b8:	2900      	cmp	r1, #0
    63ba:	f04f 0106 	mov.w	r1, #6
    63be:	d01a      	beq.n	63f6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdfe>
    63c0:	f880 1128 	strb.w	r1, [r0, #296]	; 0x128
    63c4:	2101      	movs	r1, #1
    63c6:	2002      	movs	r0, #2
    63c8:	e023      	b.n	6412 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe1a>
    63ca:	f890 1212 	ldrb.w	r1, [r0, #530]	; 0x212
    63ce:	f88d 1000 	strb.w	r1, [sp]
    63d2:	9900      	ldr	r1, [sp, #0]
    63d4:	9100      	str	r1, [sp, #0]
    63d6:	f89d 1000 	ldrb.w	r1, [sp]
    63da:	2900      	cmp	r1, #0
    63dc:	d11e      	bne.n	641c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe24>
    63de:	f500 7384 	add.w	r3, r0, #264	; 0x108
    63e2:	f500 710e 	add.w	r1, r0, #568	; 0x238
    63e6:	2200      	movs	r2, #0
    63e8:	f200 20b1 	addw	r0, r0, #689	; 0x2b1
    63ec:	f007 fcb6 	bl	dd5c <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    63f0:	2101      	movs	r1, #1
    63f2:	2005      	movs	r0, #5
    63f4:	e00d      	b.n	6412 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe1a>
    63f6:	2003      	movs	r0, #3
    63f8:	f000 fcb4 	bl	6d64 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x176c>
    63fc:	6860      	ldr	r0, [r4, #4]
    63fe:	f890 00ec 	ldrb.w	r0, [r0, #236]	; 0xec
    6402:	0880      	lsrs	r0, r0, #2
    6404:	f010 0f01 	tst.w	r0, #1
    6408:	d001      	beq.n	640e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe16>
    640a:	2011      	movs	r0, #17
    640c:	e000      	b.n	6410 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe18>
    640e:	200d      	movs	r0, #13
    6410:	2101      	movs	r1, #1
    6412:	f7ff ffa7 	bl	6364 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd6c>
    6416:	6860      	ldr	r0, [r4, #4]
    6418:	f880 52b0 	strb.w	r5, [r0, #688]	; 0x2b0
    641c:	bd38      	pop	{r3, r4, r5, pc}
    641e:	0000      	.short	0x0000
    6420:	2000010c 	.word	0x2000010c
    6424:	b570      	push	{r4, r5, r6, lr}
    6426:	4b2b      	ldr	r3, [pc, #172]	; (64d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xedc>)
    6428:	4602      	mov	r2, r0
    642a:	8858      	ldrh	r0, [r3, #2]
    642c:	4310      	orrs	r0, r2
    642e:	8058      	strh	r0, [r3, #2]
    6430:	f103 0010 	add.w	r0, r3, #16
    6434:	2a40      	cmp	r2, #64	; 0x40
    6436:	6840      	ldr	r0, [r0, #4]
    6438:	d00d      	beq.n	6456 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe5e>
    643a:	0796      	lsls	r6, r2, #30
    643c:	f04f 0500 	mov.w	r5, #0
    6440:	f04f 0401 	mov.w	r4, #1
    6444:	ea4f 76c2 	mov.w	r6, r2, lsl #31
    6448:	d50c      	bpl.n	6464 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe6c>
    644a:	b14e      	cbz	r6, 6460 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe68>
    644c:	f640 61b2 	movw	r1, #3762	; 0xeb2
    6450:	2031      	movs	r0, #49	; 0x31
    6452:	f7fa ffd3 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6456:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    645a:	2104      	movs	r1, #4
    645c:	f7fe bbc2 	b.w	4be4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    6460:	6099      	str	r1, [r3, #8]
    6462:	e01c      	b.n	649e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xea6>
    6464:	b1c6      	cbz	r6, 6498 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xea0>
    6466:	60d9      	str	r1, [r3, #12]
    6468:	78c9      	ldrb	r1, [r1, #3]
    646a:	2906      	cmp	r1, #6
    646c:	d002      	beq.n	6474 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe7c>
    646e:	290b      	cmp	r1, #11
    6470:	d112      	bne.n	6498 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xea0>
    6472:	e009      	b.n	6488 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe90>
    6474:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    6478:	2918      	cmp	r1, #24
    647a:	d10d      	bne.n	6498 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xea0>
    647c:	2100      	movs	r1, #0
    647e:	e9c0 113e 	strd	r1, r1, [r0, #248]	; 0xf8
    6482:	f880 40a2 	strb.w	r4, [r0, #162]	; 0xa2
    6486:	e007      	b.n	6498 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xea0>
    6488:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    648c:	2912      	cmp	r1, #18
    648e:	d103      	bne.n	6498 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xea0>
    6490:	f880 50a2 	strb.w	r5, [r0, #162]	; 0xa2
    6494:	f880 40dc 	strb.w	r4, [r0, #220]	; 0xdc
    6498:	0791      	lsls	r1, r2, #30
    649a:	d516      	bpl.n	64ca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xed2>
    649c:	6899      	ldr	r1, [r3, #8]
    649e:	78c9      	ldrb	r1, [r1, #3]
    64a0:	2905      	cmp	r1, #5
    64a2:	d002      	beq.n	64aa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeb2>
    64a4:	290b      	cmp	r1, #11
    64a6:	d110      	bne.n	64ca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xed2>
    64a8:	e009      	b.n	64be <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xec6>
    64aa:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    64ae:	2916      	cmp	r1, #22
    64b0:	d10b      	bne.n	64ca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xed2>
    64b2:	2100      	movs	r1, #0
    64b4:	e9c0 1140 	strd	r1, r1, [r0, #256]	; 0x100
    64b8:	f880 40a3 	strb.w	r4, [r0, #163]	; 0xa3
    64bc:	e005      	b.n	64ca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xed2>
    64be:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    64c2:	2911      	cmp	r1, #17
    64c4:	d101      	bne.n	64ca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xed2>
    64c6:	f880 50a3 	strb.w	r5, [r0, #163]	; 0xa3
    64ca:	0690      	lsls	r0, r2, #26
    64cc:	d501      	bpl.n	64d2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeda>
    64ce:	2008      	movs	r0, #8
    64d0:	7058      	strb	r0, [r3, #1]
    64d2:	bd70      	pop	{r4, r5, r6, pc}
    64d4:	200000fc 	.word	0x200000fc
    64d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    64dc:	4c29      	ldr	r4, [pc, #164]	; (6584 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf8c>)
    64de:	2501      	movs	r5, #1
    64e0:	6863      	ldr	r3, [r4, #4]
    64e2:	f893 12ce 	ldrb.w	r1, [r3, #718]	; 0x2ce
    64e6:	b109      	cbz	r1, 64ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xef4>
    64e8:	2701      	movs	r7, #1
    64ea:	e000      	b.n	64ee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xef6>
    64ec:	2700      	movs	r7, #0
    64ee:	f893 02cf 	ldrb.w	r0, [r3, #719]	; 0x2cf
    64f2:	b108      	cbz	r0, 64f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf00>
    64f4:	2601      	movs	r6, #1
    64f6:	e000      	b.n	64fa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf02>
    64f8:	2600      	movs	r6, #0
    64fa:	b90f      	cbnz	r7, 6500 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf08>
    64fc:	f893 106a 	ldrb.w	r1, [r3, #106]	; 0x6a
    6500:	b90e      	cbnz	r6, 6506 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf0e>
    6502:	f893 006b 	ldrb.w	r0, [r3, #107]	; 0x6b
    6506:	f883 106a 	strb.w	r1, [r3, #106]	; 0x6a
    650a:	f883 006b 	strb.w	r0, [r3, #107]	; 0x6b
    650e:	f103 0262 	add.w	r2, r3, #98	; 0x62
    6512:	20ff      	movs	r0, #255	; 0xff
    6514:	7290      	strb	r0, [r2, #10]
    6516:	4618      	mov	r0, r3
    6518:	f009 fb33 	bl	fb82 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY>
    651c:	6860      	ldr	r0, [r4, #4]
    651e:	f890 013c 	ldrb.w	r0, [r0, #316]	; 0x13c
    6522:	2801      	cmp	r0, #1
    6524:	d001      	beq.n	652a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf32>
    6526:	b907      	cbnz	r7, 652a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf32>
    6528:	b116      	cbz	r6, 6530 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf38>
    652a:	2000      	movs	r0, #0
    652c:	f000 f82c 	bl	6588 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf90>
    6530:	6860      	ldr	r0, [r4, #4]
    6532:	302c      	adds	r0, #44	; 0x2c
    6534:	f008 f88a 	bl	e64c <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    6538:	4606      	mov	r6, r0
    653a:	6860      	ldr	r0, [r4, #4]
    653c:	f008 f832 	bl	e5a4 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    6540:	b130      	cbz	r0, 6550 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf58>
    6542:	6861      	ldr	r1, [r4, #4]
    6544:	f501 72b1 	add.w	r2, r1, #354	; 0x162
    6548:	f831 0b2c 	ldrh.w	r0, [r1], #44
    654c:	f7fd f88e 	bl	366c <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    6550:	2105      	movs	r1, #5
    6552:	6860      	ldr	r0, [r4, #4]
    6554:	f7fe fb46 	bl	4be4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    6558:	6860      	ldr	r0, [r4, #4]
    655a:	302c      	adds	r0, #44	; 0x2c
    655c:	f008 f876 	bl	e64c <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    6560:	4604      	mov	r4, r0
    6562:	42a6      	cmp	r6, r4
    6564:	d20a      	bcs.n	657c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf84>
    6566:	f003 fdff 	bl	a168 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>
    656a:	4601      	mov	r1, r0
    656c:	1ba0      	subs	r0, r4, r6
    656e:	2865      	cmp	r0, #101	; 0x65
    6570:	d200      	bcs.n	6574 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf7c>
    6572:	2065      	movs	r0, #101	; 0x65
    6574:	f003 fd1a 	bl	9fac <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    6578:	b100      	cbz	r0, 657c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf84>
    657a:	2500      	movs	r5, #0
    657c:	4628      	mov	r0, r5
    657e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6582:	0000      	.short	0x0000
    6584:	2000010c 	.word	0x2000010c
    6588:	b510      	push	{r4, lr}
    658a:	4c10      	ldr	r4, [pc, #64]	; (65cc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfd4>)
    658c:	6861      	ldr	r1, [r4, #4]
    658e:	880a      	ldrh	r2, [r1, #0]
    6590:	f8a1 21a6 	strh.w	r2, [r1, #422]	; 0x1a6
    6594:	f881 01a4 	strb.w	r0, [r1, #420]	; 0x1a4
    6598:	f891 006a 	ldrb.w	r0, [r1, #106]	; 0x6a
    659c:	f009 f817 	bl	f5ce <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    65a0:	6861      	ldr	r1, [r4, #4]
    65a2:	f881 01a8 	strb.w	r0, [r1, #424]	; 0x1a8
    65a6:	f891 006b 	ldrb.w	r0, [r1, #107]	; 0x6b
    65aa:	f009 f810 	bl	f5ce <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    65ae:	6863      	ldr	r3, [r4, #4]
    65b0:	2215      	movs	r2, #21
    65b2:	4907      	ldr	r1, [pc, #28]	; (65d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfd8>)
    65b4:	f883 01a9 	strb.w	r0, [r3, #425]	; 0x1a9
    65b8:	f503 70cd 	add.w	r0, r3, #410	; 0x19a
    65bc:	f007 ffc1 	bl	e542 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    65c0:	6861      	ldr	r1, [r4, #4]
    65c2:	2000      	movs	r0, #0
    65c4:	f881 013c 	strb.w	r0, [r1, #316]	; 0x13c
    65c8:	bd10      	pop	{r4, pc}
    65ca:	0000      	.short	0x0000
    65cc:	2000010c 	.word	0x2000010c
    65d0:	00010971 	.word	0x00010971
    65d4:	b570      	push	{r4, r5, r6, lr}
    65d6:	4d0f      	ldr	r5, [pc, #60]	; (6614 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x101c>)
    65d8:	686c      	ldr	r4, [r5, #4]
    65da:	f894 109d 	ldrb.w	r1, [r4, #157]	; 0x9d
    65de:	2921      	cmp	r1, #33	; 0x21
    65e0:	d002      	beq.n	65e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xff0>
    65e2:	292e      	cmp	r1, #46	; 0x2e
    65e4:	d003      	beq.n	65ee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xff6>
    65e6:	e011      	b.n	660c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1014>
    65e8:	f7ff ffce 	bl	6588 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf90>
    65ec:	e008      	b.n	6600 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1008>
    65ee:	f894 209e 	ldrb.w	r2, [r4, #158]	; 0x9e
    65f2:	f104 0080 	add.w	r0, r4, #128	; 0x80
    65f6:	2301      	movs	r3, #1
    65f8:	210b      	movs	r1, #11
    65fa:	f007 fbf7 	bl	ddec <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    65fe:	b138      	cbz	r0, 6610 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1018>
    6600:	6869      	ldr	r1, [r5, #4]
    6602:	2000      	movs	r0, #0
    6604:	f881 009d 	strb.w	r0, [r1, #157]	; 0x9d
    6608:	f881 00d6 	strb.w	r0, [r1, #214]	; 0xd6
    660c:	2000      	movs	r0, #0
    660e:	bd70      	pop	{r4, r5, r6, pc}
    6610:	202a      	movs	r0, #42	; 0x2a
    6612:	e7e9      	b.n	65e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xff0>
    6614:	2000010c 	.word	0x2000010c
    6618:	b570      	push	{r4, r5, r6, lr}
    661a:	4604      	mov	r4, r0
    661c:	6840      	ldr	r0, [r0, #4]
    661e:	2301      	movs	r3, #1
    6620:	2100      	movs	r1, #0
    6622:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    6626:	3080      	adds	r0, #128	; 0x80
    6628:	f007 fbe0 	bl	ddec <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    662c:	b1b8      	cbz	r0, 665e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1066>
    662e:	4d13      	ldr	r5, [pc, #76]	; (667c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1084>)
    6630:	68e8      	ldr	r0, [r5, #12]
    6632:	f007 fe46 	bl	e2c2 <sym_E5LV7NLJGDBOOHT3XI7LZP4SJ6B3AVX5ZM7II3A>
    6636:	6861      	ldr	r1, [r4, #4]
    6638:	f8a1 02cc 	strh.w	r0, [r1, #716]	; 0x2cc
    663c:	6861      	ldr	r1, [r4, #4]
    663e:	f8b1 1094 	ldrh.w	r1, [r1, #148]	; 0x94
    6642:	f008 ffdd 	bl	f600 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    6646:	b160      	cbz	r0, 6662 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x106a>
    6648:	6861      	ldr	r1, [r4, #4]
    664a:	2028      	movs	r0, #40	; 0x28
    664c:	220b      	movs	r2, #11
    664e:	f881 00bd 	strb.w	r0, [r1, #189]	; 0xbd
    6652:	6860      	ldr	r0, [r4, #4]
    6654:	490a      	ldr	r1, [pc, #40]	; (6680 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1088>)
    6656:	30b4      	adds	r0, #180	; 0xb4
    6658:	f007 ff5f 	bl	e51a <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    665c:	e00b      	b.n	6676 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x107e>
    665e:	2001      	movs	r0, #1
    6660:	bd70      	pop	{r4, r5, r6, pc}
    6662:	6861      	ldr	r1, [r4, #4]
    6664:	68e8      	ldr	r0, [r5, #12]
    6666:	f201 21ce 	addw	r1, r1, #718	; 0x2ce
    666a:	f007 fe25 	bl	e2b8 <sym_7VZW6MQYCHJNYQ6F4AFCRRJSPXBVUQDDS4RU32Y>
    666e:	6861      	ldr	r1, [r4, #4]
    6670:	200a      	movs	r0, #10
    6672:	f881 009e 	strb.w	r0, [r1, #158]	; 0x9e
    6676:	2000      	movs	r0, #0
    6678:	bd70      	pop	{r4, r5, r6, pc}
    667a:	0000      	.short	0x0000
    667c:	200000fc 	.word	0x200000fc
    6680:	0000e859 	.word	0x0000e859
    6684:	b570      	push	{r4, r5, r6, lr}
    6686:	4604      	mov	r4, r0
    6688:	6840      	ldr	r0, [r0, #4]
    668a:	2301      	movs	r3, #1
    668c:	2100      	movs	r1, #0
    668e:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    6692:	3080      	adds	r0, #128	; 0x80
    6694:	f007 fbaa 	bl	ddec <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6698:	b1e0      	cbz	r0, 66d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10dc>
    669a:	4d28      	ldr	r5, [pc, #160]	; (673c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1144>)
    669c:	2100      	movs	r1, #0
    669e:	68e8      	ldr	r0, [r5, #12]
    66a0:	f007 fe12 	bl	e2c8 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A>
    66a4:	b1c0      	cbz	r0, 66d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10e0>
    66a6:	68e8      	ldr	r0, [r5, #12]
    66a8:	6861      	ldr	r1, [r4, #4]
    66aa:	f8b0 000d 	ldrh.w	r0, [r0, #13]
    66ae:	f8a1 02cc 	strh.w	r0, [r1, #716]	; 0x2cc
    66b2:	6861      	ldr	r1, [r4, #4]
    66b4:	f8b1 1094 	ldrh.w	r1, [r1, #148]	; 0x94
    66b8:	f008 ffa2 	bl	f600 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    66bc:	b188      	cbz	r0, 66e2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10ea>
    66be:	6861      	ldr	r1, [r4, #4]
    66c0:	2028      	movs	r0, #40	; 0x28
    66c2:	220b      	movs	r2, #11
    66c4:	f881 00bd 	strb.w	r0, [r1, #189]	; 0xbd
    66c8:	6860      	ldr	r0, [r4, #4]
    66ca:	491d      	ldr	r1, [pc, #116]	; (6740 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1148>)
    66cc:	30b4      	adds	r0, #180	; 0xb4
    66ce:	f007 ff24 	bl	e51a <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    66d2:	e030      	b.n	6736 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x113e>
    66d4:	2001      	movs	r0, #1
    66d6:	bd70      	pop	{r4, r5, r6, pc}
    66d8:	4620      	mov	r0, r4
    66da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    66de:	f000 b88b 	b.w	67f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1200>
    66e2:	68e8      	ldr	r0, [r5, #12]
    66e4:	f007 fe1a 	bl	e31c <sym_GII4UQLGDHD6D5DSTGUIOYZXEEJFVPTQQUWUNII>
    66e8:	f007 fb63 	bl	ddb2 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    66ec:	4606      	mov	r6, r0
    66ee:	6860      	ldr	r0, [r4, #4]
    66f0:	4631      	mov	r1, r6
    66f2:	f8c0 62d4 	str.w	r6, [r0, #724]	; 0x2d4
    66f6:	68e8      	ldr	r0, [r5, #12]
    66f8:	7900      	ldrb	r0, [r0, #4]
    66fa:	f007 fcd6 	bl	e0aa <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    66fe:	6861      	ldr	r1, [r4, #4]
    6700:	f8a1 02ce 	strh.w	r0, [r1, #718]	; 0x2ce
    6704:	68e8      	ldr	r0, [r5, #12]
    6706:	4631      	mov	r1, r6
    6708:	f8b0 0005 	ldrh.w	r0, [r0, #5]
    670c:	f007 fcc9 	bl	e0a2 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
    6710:	6861      	ldr	r1, [r4, #4]
    6712:	f8c1 02d0 	str.w	r0, [r1, #720]	; 0x2d0
    6716:	68e8      	ldr	r0, [r5, #12]
    6718:	f007 fe03 	bl	e322 <sym_MD56XYITEHSLIFIRQT26SWOCASBX33AYW4XGGWY>
    671c:	6861      	ldr	r1, [r4, #4]
    671e:	f8a1 02d8 	strh.w	r0, [r1, #728]	; 0x2d8
    6722:	68e8      	ldr	r0, [r5, #12]
    6724:	f007 fe00 	bl	e328 <sym_EKDQHRHOWISU7QCQSGE4X3J4VBX22VVETALDGWI>
    6728:	6861      	ldr	r1, [r4, #4]
    672a:	f8a1 02da 	strh.w	r0, [r1, #730]	; 0x2da
    672e:	6861      	ldr	r1, [r4, #4]
    6730:	200d      	movs	r0, #13
    6732:	f881 009e 	strb.w	r0, [r1, #158]	; 0x9e
    6736:	2000      	movs	r0, #0
    6738:	bd70      	pop	{r4, r5, r6, pc}
    673a:	0000      	.short	0x0000
    673c:	200000fc 	.word	0x200000fc
    6740:	0000e859 	.word	0x0000e859
    6744:	b570      	push	{r4, r5, r6, lr}
    6746:	4604      	mov	r4, r0
    6748:	6840      	ldr	r0, [r0, #4]
    674a:	2301      	movs	r3, #1
    674c:	2100      	movs	r1, #0
    674e:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    6752:	3080      	adds	r0, #128	; 0x80
    6754:	f007 fb4a 	bl	ddec <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6758:	b970      	cbnz	r0, 6778 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1180>
    675a:	6860      	ldr	r0, [r4, #4]
    675c:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    6760:	2a13      	cmp	r2, #19
    6762:	d009      	beq.n	6778 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1180>
    6764:	2301      	movs	r3, #1
    6766:	2105      	movs	r1, #5
    6768:	3080      	adds	r0, #128	; 0x80
    676a:	f007 fb3f 	bl	ddec <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    676e:	b108      	cbz	r0, 6774 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x117c>
    6770:	2008      	movs	r0, #8
    6772:	bd70      	pop	{r4, r5, r6, pc}
    6774:	2001      	movs	r0, #1
    6776:	bd70      	pop	{r4, r5, r6, pc}
    6778:	6860      	ldr	r0, [r4, #4]
    677a:	f890 00dc 	ldrb.w	r0, [r0, #220]	; 0xdc
    677e:	b908      	cbnz	r0, 6784 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x118c>
    6780:	f7ff f83c 	bl	57fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>
    6784:	4d14      	ldr	r5, [pc, #80]	; (67d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11e0>)
    6786:	6861      	ldr	r1, [r4, #4]
    6788:	f501 710e 	add.w	r1, r1, #568	; 0x238
    678c:	68e8      	ldr	r0, [r5, #12]
    678e:	f007 fde4 	bl	e35a <sym_3BQBYKVQGWCA6VF5GDIUVXGAPLPPXRSSEFO5TXA>
    6792:	6861      	ldr	r1, [r4, #4]
    6794:	68e8      	ldr	r0, [r5, #12]
    6796:	f501 718c 	add.w	r1, r1, #280	; 0x118
    679a:	f007 fdd5 	bl	e348 <sym_NILDTLWW7AYBRN5PYE72ILWSBBVUBN4Y5FF3XQQ>
    679e:	6860      	ldr	r0, [r4, #4]
    67a0:	8801      	ldrh	r1, [r0, #0]
    67a2:	f8a0 12e6 	strh.w	r1, [r0, #742]	; 0x2e6
    67a6:	6861      	ldr	r1, [r4, #4]
    67a8:	68e8      	ldr	r0, [r5, #12]
    67aa:	f501 713a 	add.w	r1, r1, #744	; 0x2e8
    67ae:	f007 fdcf 	bl	e350 <sym_7LJR6S4GQKSUMWIUG2FRZAKXFD3RUBQ6FOHJMZQ>
    67b2:	6861      	ldr	r1, [r4, #4]
    67b4:	68e8      	ldr	r0, [r5, #12]
    67b6:	f501 713c 	add.w	r1, r1, #752	; 0x2f0
    67ba:	f007 fdc2 	bl	e342 <sym_FIJW4TR7AWR6OLWCHL3HTVQSVWXOS6T6XISXCQQ>
    67be:	6860      	ldr	r0, [r4, #4]
    67c0:	220a      	movs	r2, #10
    67c2:	4906      	ldr	r1, [pc, #24]	; (67dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11e4>)
    67c4:	f500 7037 	add.w	r0, r0, #732	; 0x2dc
    67c8:	f007 fea7 	bl	e51a <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    67cc:	6861      	ldr	r1, [r4, #4]
    67ce:	2015      	movs	r0, #21
    67d0:	f881 009e 	strb.w	r0, [r1, #158]	; 0x9e
    67d4:	2000      	movs	r0, #0
    67d6:	bd70      	pop	{r4, r5, r6, pc}
    67d8:	200000fc 	.word	0x200000fc
    67dc:	0000e90f 	.word	0x0000e90f
    67e0:	4901      	ldr	r1, [pc, #4]	; (67e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11f0>)
    67e2:	68c9      	ldr	r1, [r1, #12]
    67e4:	f7fc bfe6 	b.w	37b4 <sym_7ABLLIXUF3HMINU3DLWXJDVBNAU7RSUXPXZ3RFQ>
    67e8:	200000fc 	.word	0x200000fc
    67ec:	4901      	ldr	r1, [pc, #4]	; (67f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11fc>)
    67ee:	68c9      	ldr	r1, [r1, #12]
    67f0:	f7fd b810 	b.w	3814 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI>
    67f4:	200000fc 	.word	0x200000fc
    67f8:	b510      	push	{r4, lr}
    67fa:	6842      	ldr	r2, [r0, #4]
    67fc:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
    6800:	070b      	lsls	r3, r1, #28
    6802:	d501      	bpl.n	6808 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1210>
    6804:	2001      	movs	r0, #1
    6806:	bd10      	pop	{r4, pc}
    6808:	f041 0108 	orr.w	r1, r1, #8
    680c:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
    6810:	4904      	ldr	r1, [pc, #16]	; (6824 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x122c>)
    6812:	6840      	ldr	r0, [r0, #4]
    6814:	68c9      	ldr	r1, [r1, #12]
    6816:	78c9      	ldrb	r1, [r1, #3]
    6818:	f880 1120 	strb.w	r1, [r0, #288]	; 0x120
    681c:	f7fe ffee 	bl	57fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>
    6820:	2000      	movs	r0, #0
    6822:	bd10      	pop	{r4, pc}
    6824:	200000fc 	.word	0x200000fc
    6828:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    682c:	4605      	mov	r5, r0
    682e:	6840      	ldr	r0, [r0, #4]
    6830:	f890 008c 	ldrb.w	r0, [r0, #140]	; 0x8c
    6834:	f010 0f30 	tst.w	r0, #48	; 0x30
    6838:	d002      	beq.n	6840 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1248>
    683a:	2001      	movs	r0, #1
    683c:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    6840:	4c31      	ldr	r4, [pc, #196]	; (6908 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1310>)
    6842:	68e0      	ldr	r0, [r4, #12]
    6844:	f007 fda3 	bl	e38e <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY>
    6848:	b330      	cbz	r0, 6898 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12a0>
    684a:	68e0      	ldr	r0, [r4, #12]
    684c:	f007 fd99 	bl	e382 <sym_BWPZYUAKR5BUOCM2NWAMEPWQB6GIJXBPUENADMI>
    6850:	4680      	mov	r8, r0
    6852:	68e0      	ldr	r0, [r4, #12]
    6854:	f007 fd99 	bl	e38a <sym_M5NXXZSYW5XYDZUQUOZMKSTD6GIS5XZ7Y4SKNVI>
    6858:	4607      	mov	r7, r0
    685a:	68e0      	ldr	r0, [r4, #12]
    685c:	f007 fd8f 	bl	e37e <sym_PHCTC5YUX44NFLNJCEBJKKRAYHGUKTS4AC5GMAI>
    6860:	4606      	mov	r6, r0
    6862:	68e0      	ldr	r0, [r4, #12]
    6864:	f007 fd8f 	bl	e386 <sym_QDD7GI62CPYTU4DR5RMOF6JH72V5L65ZJXU3VAA>
    6868:	4601      	mov	r1, r0
    686a:	f8cd 8000 	str.w	r8, [sp]
    686e:	6868      	ldr	r0, [r5, #4]
    6870:	463b      	mov	r3, r7
    6872:	4632      	mov	r2, r6
    6874:	302c      	adds	r0, #44	; 0x2c
    6876:	f007 ff23 	bl	e6c0 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    687a:	78a0      	ldrb	r0, [r4, #2]
    687c:	0781      	lsls	r1, r0, #30
    687e:	f04f 0001 	mov.w	r0, #1
    6882:	d503      	bpl.n	688c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1294>
    6884:	68a1      	ldr	r1, [r4, #8]
    6886:	78c9      	ldrb	r1, [r1, #3]
    6888:	2914      	cmp	r1, #20
    688a:	d00a      	beq.n	68a2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12aa>
    688c:	6869      	ldr	r1, [r5, #4]
    688e:	f891 109d 	ldrb.w	r1, [r1, #157]	; 0x9d
    6892:	291d      	cmp	r1, #29
    6894:	d005      	beq.n	68a2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12aa>
    6896:	e007      	b.n	68a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12b0>
    6898:	4628      	mov	r0, r5
    689a:	e8bd 41fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    689e:	f7ff bfab 	b.w	67f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1200>
    68a2:	6869      	ldr	r1, [r5, #4]
    68a4:	f881 0060 	strb.w	r0, [r1, #96]	; 0x60
    68a8:	6868      	ldr	r0, [r5, #4]
    68aa:	f890 1060 	ldrb.w	r1, [r0, #96]	; 0x60
    68ae:	2901      	cmp	r1, #1
    68b0:	d011      	beq.n	68d6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12de>
    68b2:	f890 1133 	ldrb.w	r1, [r0, #307]	; 0x133
    68b6:	f88d 1004 	strb.w	r1, [sp, #4]
    68ba:	9901      	ldr	r1, [sp, #4]
    68bc:	9101      	str	r1, [sp, #4]
    68be:	f89d 1004 	ldrb.w	r1, [sp, #4]
    68c2:	b941      	cbnz	r1, 68d6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12de>
    68c4:	f890 1132 	ldrb.w	r1, [r0, #306]	; 0x132
    68c8:	f88d 1000 	strb.w	r1, [sp]
    68cc:	9900      	ldr	r1, [sp, #0]
    68ce:	9100      	str	r1, [sp, #0]
    68d0:	f89d 1000 	ldrb.w	r1, [sp]
    68d4:	b141      	cbz	r1, 68e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12f0>
    68d6:	f850 1f8c 	ldr.w	r1, [r0, #140]!
    68da:	f041 0110 	orr.w	r1, r1, #16
    68de:	6001      	str	r1, [r0, #0]
    68e0:	f7fe ff8c 	bl	57fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>
    68e4:	2000      	movs	r0, #0
    68e6:	e7a9      	b.n	683c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1244>
    68e8:	f850 1f8c 	ldr.w	r1, [r0, #140]!
    68ec:	f041 0120 	orr.w	r1, r1, #32
    68f0:	6001      	str	r1, [r0, #0]
    68f2:	4805      	ldr	r0, [pc, #20]	; (6908 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1310>)
    68f4:	3010      	adds	r0, #16
    68f6:	6843      	ldr	r3, [r0, #4]
    68f8:	f103 012c 	add.w	r1, r3, #44	; 0x2c
    68fc:	8818      	ldrh	r0, [r3, #0]
    68fe:	f503 72bc 	add.w	r2, r3, #376	; 0x178
    6902:	f7fc fedd 	bl	36c0 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>
    6906:	e7eb      	b.n	68e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12e8>
    6908:	200000fc 	.word	0x200000fc
    690c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6910:	4604      	mov	r4, r0
    6912:	6840      	ldr	r0, [r0, #4]
    6914:	2301      	movs	r3, #1
    6916:	210a      	movs	r1, #10
    6918:	f890 209d 	ldrb.w	r2, [r0, #157]	; 0x9d
    691c:	3080      	adds	r0, #128	; 0x80
    691e:	f007 fa65 	bl	ddec <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6922:	b370      	cbz	r0, 6982 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x138a>
    6924:	4d18      	ldr	r5, [pc, #96]	; (6988 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1390>)
    6926:	68e8      	ldr	r0, [r5, #12]
    6928:	f007 fd31 	bl	e38e <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY>
    692c:	b1e8      	cbz	r0, 696a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1372>
    692e:	68e8      	ldr	r0, [r5, #12]
    6930:	f007 fd27 	bl	e382 <sym_BWPZYUAKR5BUOCM2NWAMEPWQB6GIJXBPUENADMI>
    6934:	4607      	mov	r7, r0
    6936:	68e8      	ldr	r0, [r5, #12]
    6938:	f007 fd27 	bl	e38a <sym_M5NXXZSYW5XYDZUQUOZMKSTD6GIS5XZ7Y4SKNVI>
    693c:	4680      	mov	r8, r0
    693e:	68e8      	ldr	r0, [r5, #12]
    6940:	f007 fd1d 	bl	e37e <sym_PHCTC5YUX44NFLNJCEBJKKRAYHGUKTS4AC5GMAI>
    6944:	4606      	mov	r6, r0
    6946:	68e8      	ldr	r0, [r5, #12]
    6948:	f007 fd1d 	bl	e386 <sym_QDD7GI62CPYTU4DR5RMOF6JH72V5L65ZJXU3VAA>
    694c:	4601      	mov	r1, r0
    694e:	9700      	str	r7, [sp, #0]
    6950:	6860      	ldr	r0, [r4, #4]
    6952:	4643      	mov	r3, r8
    6954:	4632      	mov	r2, r6
    6956:	302c      	adds	r0, #44	; 0x2c
    6958:	f007 feb2 	bl	e6c0 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    695c:	6860      	ldr	r0, [r4, #4]
    695e:	f007 fe21 	bl	e5a4 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    6962:	2105      	movs	r1, #5
    6964:	6860      	ldr	r0, [r4, #4]
    6966:	f7fe f93d 	bl	4be4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    696a:	6861      	ldr	r1, [r4, #4]
    696c:	2000      	movs	r0, #0
    696e:	f881 00d6 	strb.w	r0, [r1, #214]	; 0xd6
    6972:	6861      	ldr	r1, [r4, #4]
    6974:	f881 009d 	strb.w	r0, [r1, #157]	; 0x9d
    6978:	f7ff f924 	bl	5bc4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5cc>
    697c:	2000      	movs	r0, #0
    697e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    6982:	e7ff      	b.n	6984 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x138c>
    6984:	2001      	movs	r0, #1
    6986:	e7fa      	b.n	697e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1386>
    6988:	200000fc 	.word	0x200000fc
    698c:	b538      	push	{r3, r4, r5, lr}
    698e:	4604      	mov	r4, r0
    6990:	6840      	ldr	r0, [r0, #4]
    6992:	2301      	movs	r3, #1
    6994:	210b      	movs	r1, #11
    6996:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    699a:	3080      	adds	r0, #128	; 0x80
    699c:	f007 fa26 	bl	ddec <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    69a0:	bb60      	cbnz	r0, 69fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1404>
    69a2:	6860      	ldr	r0, [r4, #4]
    69a4:	2301      	movs	r3, #1
    69a6:	2100      	movs	r1, #0
    69a8:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    69ac:	3080      	adds	r0, #128	; 0x80
    69ae:	f007 fa1d 	bl	ddec <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    69b2:	b308      	cbz	r0, 69f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1400>
    69b4:	6860      	ldr	r0, [r4, #4]
    69b6:	f890 009d 	ldrb.w	r0, [r0, #157]	; 0x9d
    69ba:	2825      	cmp	r0, #37	; 0x25
    69bc:	d01e      	beq.n	69fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1404>
    69be:	4d2a      	ldr	r5, [pc, #168]	; (6a68 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1470>)
    69c0:	68e8      	ldr	r0, [r5, #12]
    69c2:	f007 fcf6 	bl	e3b2 <sym_PBCQYO46QLEABI4SERHQCHCGDP6NXKCTAYVE53Y>
    69c6:	b1d8      	cbz	r0, 6a00 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1408>
    69c8:	68e8      	ldr	r0, [r5, #12]
    69ca:	6862      	ldr	r2, [r4, #4]
    69cc:	7941      	ldrb	r1, [r0, #5]
    69ce:	f001 0107 	and.w	r1, r1, #7
    69d2:	f882 1063 	strb.w	r1, [r2, #99]	; 0x63
    69d6:	7900      	ldrb	r0, [r0, #4]
    69d8:	f000 0107 	and.w	r1, r0, #7
    69dc:	6860      	ldr	r0, [r4, #4]
    69de:	f880 1062 	strb.w	r1, [r0, #98]	; 0x62
    69e2:	6860      	ldr	r0, [r4, #4]
    69e4:	f890 213d 	ldrb.w	r2, [r0, #317]	; 0x13d
    69e8:	f88d 2000 	strb.w	r2, [sp]
    69ec:	9a00      	ldr	r2, [sp, #0]
    69ee:	9200      	str	r2, [sp, #0]
    69f0:	f89d 2000 	ldrb.w	r2, [sp]
    69f4:	bb7a      	cbnz	r2, 6a56 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x145e>
    69f6:	e008      	b.n	6a0a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1412>
    69f8:	2001      	movs	r0, #1
    69fa:	bd38      	pop	{r3, r4, r5, pc}
    69fc:	2020      	movs	r0, #32
    69fe:	bd38      	pop	{r3, r4, r5, pc}
    6a00:	4620      	mov	r0, r4
    6a02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    6a06:	f7ff bef7 	b.w	67f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1200>
    6a0a:	f890 213c 	ldrb.w	r2, [r0, #316]	; 0x13c
    6a0e:	2a01      	cmp	r2, #1
    6a10:	d021      	beq.n	6a56 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x145e>
    6a12:	f100 026a 	add.w	r2, r0, #106	; 0x6a
    6a16:	f890 3063 	ldrb.w	r3, [r0, #99]	; 0x63
    6a1a:	7855      	ldrb	r5, [r2, #1]
    6a1c:	428d      	cmp	r5, r1
    6a1e:	d106      	bne.n	6a2e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1436>
    6a20:	7811      	ldrb	r1, [r2, #0]
    6a22:	4299      	cmp	r1, r3
    6a24:	d103      	bne.n	6a2e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1436>
    6a26:	2102      	movs	r1, #2
    6a28:	f880 113c 	strb.w	r1, [r0, #316]	; 0x13c
    6a2c:	e013      	b.n	6a56 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x145e>
    6a2e:	480e      	ldr	r0, [pc, #56]	; (6a68 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1470>)
    6a30:	3010      	adds	r0, #16
    6a32:	6841      	ldr	r1, [r0, #4]
    6a34:	f501 70cb 	add.w	r0, r1, #406	; 0x196
    6a38:	880a      	ldrh	r2, [r1, #0]
    6a3a:	f820 2b02 	strh.w	r2, [r0], #2
    6a3e:	f891 2062 	ldrb.w	r2, [r1, #98]	; 0x62
    6a42:	f800 2b01 	strb.w	r2, [r0], #1
    6a46:	f891 1063 	ldrb.w	r1, [r1, #99]	; 0x63
    6a4a:	f800 190d 	strb.w	r1, [r0], #-13
    6a4e:	2222      	movs	r2, #34	; 0x22
    6a50:	4906      	ldr	r1, [pc, #24]	; (6a6c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1474>)
    6a52:	f007 fd62 	bl	e51a <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    6a56:	6861      	ldr	r1, [r4, #4]
    6a58:	2022      	movs	r0, #34	; 0x22
    6a5a:	f881 009e 	strb.w	r0, [r1, #158]	; 0x9e
    6a5e:	f7fe fecd 	bl	57fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>
    6a62:	2000      	movs	r0, #0
    6a64:	bd38      	pop	{r3, r4, r5, pc}
    6a66:	0000      	.short	0x0000
    6a68:	200000fc 	.word	0x200000fc
    6a6c:	0001099b 	.word	0x0001099b
    6a70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6a74:	6845      	ldr	r5, [r0, #4]
    6a76:	4604      	mov	r4, r0
    6a78:	f895 009d 	ldrb.w	r0, [r5, #157]	; 0x9d
    6a7c:	2821      	cmp	r0, #33	; 0x21
    6a7e:	d008      	beq.n	6a92 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x149a>
    6a80:	f05f 0600 	movs.w	r6, #0
    6a84:	f895 009e 	ldrb.w	r0, [r5, #158]	; 0x9e
    6a88:	2823      	cmp	r0, #35	; 0x23
    6a8a:	d004      	beq.n	6a96 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x149e>
    6a8c:	b38e      	cbz	r6, 6af2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14fa>
    6a8e:	359d      	adds	r5, #157	; 0x9d
    6a90:	e002      	b.n	6a98 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14a0>
    6a92:	2601      	movs	r6, #1
    6a94:	e7f6      	b.n	6a84 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x148c>
    6a96:	359e      	adds	r5, #158	; 0x9e
    6a98:	f8df 8120 	ldr.w	r8, [pc, #288]	; 6bbc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15c4>
    6a9c:	f8d8 000c 	ldr.w	r0, [r8, #12]
    6aa0:	f007 fc93 	bl	e3ca <sym_A6H6572F75Y3NWHNM7XTQ5XKFPHT472D7ZS7PFQ>
    6aa4:	2700      	movs	r7, #0
    6aa6:	b340      	cbz	r0, 6afa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1502>
    6aa8:	4631      	mov	r1, r6
    6aaa:	f8d8 000c 	ldr.w	r0, [r8, #12]
    6aae:	f7fe ff7f 	bl	59b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3b8>
    6ab2:	b310      	cbz	r0, 6afa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1502>
    6ab4:	466a      	mov	r2, sp
    6ab6:	4646      	mov	r6, r8
    6ab8:	6860      	ldr	r0, [r4, #4]
    6aba:	f8d8 100c 	ldr.w	r1, [r8, #12]
    6abe:	f007 faaa 	bl	e016 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q>
    6ac2:	b3c0      	cbz	r0, 6b36 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x153e>
    6ac4:	68f0      	ldr	r0, [r6, #12]
    6ac6:	f007 fc7e 	bl	e3c6 <sym_FVNWXAKGSIJN4YGWC4O4B4H2WPPILAIKB7LLDVI>
    6aca:	6861      	ldr	r1, [r4, #4]
    6acc:	f8a1 02cc 	strh.w	r0, [r1, #716]	; 0x2cc
    6ad0:	6861      	ldr	r1, [r4, #4]
    6ad2:	f8b1 1094 	ldrh.w	r1, [r1, #148]	; 0x94
    6ad6:	f008 fd93 	bl	f600 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    6ada:	b368      	cbz	r0, 6b38 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1540>
    6adc:	6861      	ldr	r1, [r4, #4]
    6ade:	2028      	movs	r0, #40	; 0x28
    6ae0:	220b      	movs	r2, #11
    6ae2:	f881 00bd 	strb.w	r0, [r1, #189]	; 0xbd
    6ae6:	6860      	ldr	r0, [r4, #4]
    6ae8:	4935      	ldr	r1, [pc, #212]	; (6bc0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15c8>)
    6aea:	30b4      	adds	r0, #180	; 0xb4
    6aec:	f007 fd15 	bl	e51a <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    6af0:	e058      	b.n	6ba4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15ac>
    6af2:	e7ff      	b.n	6af4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14fc>
    6af4:	2002      	movs	r0, #2
    6af6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    6afa:	6860      	ldr	r0, [r4, #4]
    6afc:	f04f 0900 	mov.w	r9, #0
    6b00:	f890 113c 	ldrb.w	r1, [r0, #316]	; 0x13c
    6b04:	2901      	cmp	r1, #1
    6b06:	d018      	beq.n	6b3a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1542>
    6b08:	f880 713c 	strb.w	r7, [r0, #316]	; 0x13c
    6b0c:	b30e      	cbz	r6, 6b52 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x155a>
    6b0e:	f8d8 000c 	ldr.w	r0, [r8, #12]
    6b12:	6861      	ldr	r1, [r4, #4]
    6b14:	2201      	movs	r2, #1
    6b16:	78c0      	ldrb	r0, [r0, #3]
    6b18:	f881 0121 	strb.w	r0, [r1, #289]	; 0x121
    6b1c:	4082      	lsls	r2, r0
    6b1e:	6861      	ldr	r1, [r4, #4]
    6b20:	f3c2 6000 	ubfx	r0, r2, #24, #1
    6b24:	b168      	cbz	r0, 6b42 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x154a>
    6b26:	2009      	movs	r0, #9
    6b28:	f881 009d 	strb.w	r0, [r1, #157]	; 0x9d
    6b2c:	6860      	ldr	r0, [r4, #4]
    6b2e:	f890 00d6 	ldrb.w	r0, [r0, #214]	; 0xd6
    6b32:	b9a8      	cbnz	r0, 6b60 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1568>
    6b34:	e008      	b.n	6b48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1550>
    6b36:	e015      	b.n	6b64 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x156c>
    6b38:	e028      	b.n	6b8c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1594>
    6b3a:	201e      	movs	r0, #30
    6b3c:	f7ff fd24 	bl	6588 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf90>
    6b40:	e7e4      	b.n	6b0c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1514>
    6b42:	f240 4183 	movw	r1, #1155	; 0x483
    6b46:	e001      	b.n	6b4c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1554>
    6b48:	f240 418b 	movw	r1, #1163	; 0x48b
    6b4c:	2031      	movs	r0, #49	; 0x31
    6b4e:	f7fa fc55 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6b52:	702f      	strb	r7, [r5, #0]
    6b54:	f7fe fe5e 	bl	5814 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    6b58:	4620      	mov	r0, r4
    6b5a:	f7ff fe4d 	bl	67f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1200>
    6b5e:	4681      	mov	r9, r0
    6b60:	4648      	mov	r0, r9
    6b62:	e7c8      	b.n	6af6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14fe>
    6b64:	6860      	ldr	r0, [r4, #4]
    6b66:	f890 113c 	ldrb.w	r1, [r0, #316]	; 0x13c
    6b6a:	2901      	cmp	r1, #1
    6b6c:	d009      	beq.n	6b82 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x158a>
    6b6e:	f880 713c 	strb.w	r7, [r0, #316]	; 0x13c
    6b72:	6860      	ldr	r0, [r4, #4]
    6b74:	f100 019e 	add.w	r1, r0, #158	; 0x9e
    6b78:	42a9      	cmp	r1, r5
    6b7a:	d113      	bne.n	6ba4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15ac>
    6b7c:	f880 709e 	strb.w	r7, [r0, #158]	; 0x9e
    6b80:	e010      	b.n	6ba4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15ac>
    6b82:	2000      	movs	r0, #0
    6b84:	f7ff fd00 	bl	6588 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf90>
    6b88:	702f      	strb	r7, [r5, #0]
    6b8a:	e7f2      	b.n	6b72 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x157a>
    6b8c:	6861      	ldr	r1, [r4, #4]
    6b8e:	f89d 0000 	ldrb.w	r0, [sp]
    6b92:	f881 02ce 	strb.w	r0, [r1, #718]	; 0x2ce
    6b96:	6861      	ldr	r1, [r4, #4]
    6b98:	f89d 0001 	ldrb.w	r0, [sp, #1]
    6b9c:	f881 02cf 	strb.w	r0, [r1, #719]	; 0x2cf
    6ba0:	2025      	movs	r0, #37	; 0x25
    6ba2:	7028      	strb	r0, [r5, #0]
    6ba4:	6860      	ldr	r0, [r4, #4]
    6ba6:	f100 019e 	add.w	r1, r0, #158	; 0x9e
    6baa:	42a9      	cmp	r1, r5
    6bac:	d102      	bne.n	6bb4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15bc>
    6bae:	f7fe fe31 	bl	5814 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    6bb2:	e001      	b.n	6bb8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15c0>
    6bb4:	f880 70d6 	strb.w	r7, [r0, #214]	; 0xd6
    6bb8:	2000      	movs	r0, #0
    6bba:	e79c      	b.n	6af6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14fe>
    6bbc:	200000fc 	.word	0x200000fc
    6bc0:	0000e859 	.word	0x0000e859
    6bc4:	b570      	push	{r4, r5, r6, lr}
    6bc6:	4604      	mov	r4, r0
    6bc8:	6840      	ldr	r0, [r0, #4]
    6bca:	4d0a      	ldr	r5, [pc, #40]	; (6bf4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15fc>)
    6bcc:	f810 1fec 	ldrb.w	r1, [r0, #236]!
    6bd0:	f041 0104 	orr.w	r1, r1, #4
    6bd4:	7001      	strb	r1, [r0, #0]
    6bd6:	68e8      	ldr	r0, [r5, #12]
    6bd8:	f007 fc0b 	bl	e3f2 <sym_65MVSHFHYY3W6LGERKUEYJPJ7ENCODZZSM2L7CQ>
    6bdc:	4606      	mov	r6, r0
    6bde:	68e8      	ldr	r0, [r5, #12]
    6be0:	f007 fc0b 	bl	e3fa <sym_MR2HDMT6FMX7P5HJAUSXDTOYNLKDM5AILMXKYDY>
    6be4:	4601      	mov	r1, r0
    6be6:	4622      	mov	r2, r4
    6be8:	4630      	mov	r0, r6
    6bea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6bee:	f000 b895 	b.w	6d1c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1724>
    6bf2:	0000      	.short	0x0000
    6bf4:	200000fc 	.word	0x200000fc
    6bf8:	4602      	mov	r2, r0
    6bfa:	4813      	ldr	r0, [pc, #76]	; (6c48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1650>)
    6bfc:	68c0      	ldr	r0, [r0, #12]
    6bfe:	7901      	ldrb	r1, [r0, #4]
    6c00:	4811      	ldr	r0, [pc, #68]	; (6c48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1650>)
    6c02:	3010      	adds	r0, #16
    6c04:	6843      	ldr	r3, [r0, #4]
    6c06:	f893 009d 	ldrb.w	r0, [r3, #157]	; 0x9d
    6c0a:	2821      	cmp	r0, #33	; 0x21
    6c0c:	d010      	beq.n	6c30 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1638>
    6c0e:	282e      	cmp	r0, #46	; 0x2e
    6c10:	d00e      	beq.n	6c30 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1638>
    6c12:	2828      	cmp	r0, #40	; 0x28
    6c14:	d00e      	beq.n	6c34 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x163c>
    6c16:	2804      	cmp	r0, #4
    6c18:	d00e      	beq.n	6c38 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1640>
    6c1a:	280f      	cmp	r0, #15
    6c1c:	d00e      	beq.n	6c3c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1644>
    6c1e:	281d      	cmp	r0, #29
    6c20:	d00e      	beq.n	6c40 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1648>
    6c22:	f893 009e 	ldrb.w	r0, [r3, #158]	; 0x9e
    6c26:	2823      	cmp	r0, #35	; 0x23
    6c28:	d00c      	beq.n	6c44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x164c>
    6c2a:	20fe      	movs	r0, #254	; 0xfe
    6c2c:	f000 b876 	b.w	6d1c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1724>
    6c30:	2016      	movs	r0, #22
    6c32:	e7fb      	b.n	6c2c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1634>
    6c34:	2023      	movs	r0, #35	; 0x23
    6c36:	e7f9      	b.n	6c2c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1634>
    6c38:	200e      	movs	r0, #14
    6c3a:	e7f7      	b.n	6c2c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1634>
    6c3c:	2012      	movs	r0, #18
    6c3e:	e7f5      	b.n	6c2c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1634>
    6c40:	2014      	movs	r0, #20
    6c42:	e7f3      	b.n	6c2c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1634>
    6c44:	2017      	movs	r0, #23
    6c46:	e7f1      	b.n	6c2c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1634>
    6c48:	200000fc 	.word	0x200000fc
    6c4c:	b510      	push	{r4, lr}
    6c4e:	4604      	mov	r4, r0
    6c50:	6840      	ldr	r0, [r0, #4]
    6c52:	2301      	movs	r3, #1
    6c54:	4619      	mov	r1, r3
    6c56:	f890 209f 	ldrb.w	r2, [r0, #159]	; 0x9f
    6c5a:	3080      	adds	r0, #128	; 0x80
    6c5c:	f007 f8c6 	bl	ddec <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6c60:	b108      	cbz	r0, 6c66 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x166e>
    6c62:	2000      	movs	r0, #0
    6c64:	bd10      	pop	{r4, pc}
    6c66:	4806      	ldr	r0, [pc, #24]	; (6c80 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1688>)
    6c68:	68c0      	ldr	r0, [r0, #12]
    6c6a:	f007 fbf0 	bl	e44e <sym_AFBV6ZWWJ5TP5BBQPAY4D2XGGYVLQVI65FY6JPY>
    6c6e:	6861      	ldr	r1, [r4, #4]
    6c70:	f881 00a0 	strb.w	r0, [r1, #160]	; 0xa0
    6c74:	6861      	ldr	r1, [r4, #4]
    6c76:	2006      	movs	r0, #6
    6c78:	f881 009f 	strb.w	r0, [r1, #159]	; 0x9f
    6c7c:	e7f1      	b.n	6c62 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x166a>
    6c7e:	0000      	.short	0x0000
    6c80:	200000fc 	.word	0x200000fc
    6c84:	b570      	push	{r4, r5, r6, lr}
    6c86:	4604      	mov	r4, r0
    6c88:	481f      	ldr	r0, [pc, #124]	; (6d08 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1710>)
    6c8a:	2500      	movs	r5, #0
    6c8c:	68c0      	ldr	r0, [r0, #12]
    6c8e:	7903      	ldrb	r3, [r0, #4]
    6c90:	6860      	ldr	r0, [r4, #4]
    6c92:	2b16      	cmp	r3, #22
    6c94:	f890 009d 	ldrb.w	r0, [r0, #157]	; 0x9d
    6c98:	d013      	beq.n	6cc2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16ca>
    6c9a:	dc06      	bgt.n	6caa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16b2>
    6c9c:	2b0e      	cmp	r3, #14
    6c9e:	d009      	beq.n	6cb4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16bc>
    6ca0:	2b12      	cmp	r3, #18
    6ca2:	d007      	beq.n	6cb4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16bc>
    6ca4:	2b14      	cmp	r3, #20
    6ca6:	d12c      	bne.n	6d02 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x170a>
    6ca8:	e004      	b.n	6cb4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16bc>
    6caa:	2b17      	cmp	r3, #23
    6cac:	d002      	beq.n	6cb4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16bc>
    6cae:	2b23      	cmp	r3, #35	; 0x23
    6cb0:	d127      	bne.n	6d02 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x170a>
    6cb2:	e01f      	b.n	6cf4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16fc>
    6cb4:	4622      	mov	r2, r4
    6cb6:	2101      	movs	r1, #1
    6cb8:	4618      	mov	r0, r3
    6cba:	f008 fe4e 	bl	f95a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x3ba>
    6cbe:	4605      	mov	r5, r0
    6cc0:	e01f      	b.n	6d02 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x170a>
    6cc2:	2821      	cmp	r0, #33	; 0x21
    6cc4:	d001      	beq.n	6cca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16d2>
    6cc6:	282e      	cmp	r0, #46	; 0x2e
    6cc8:	d11b      	bne.n	6d02 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x170a>
    6cca:	4620      	mov	r0, r4
    6ccc:	f008 fca4 	bl	f618 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x78>
    6cd0:	6860      	ldr	r0, [r4, #4]
    6cd2:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    6cd6:	2922      	cmp	r1, #34	; 0x22
    6cd8:	d013      	beq.n	6d02 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x170a>
    6cda:	2108      	movs	r1, #8
    6cdc:	30ec      	adds	r0, #236	; 0xec
    6cde:	f008 fc4f 	bl	f580 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5b6>
    6ce2:	6860      	ldr	r0, [r4, #4]
    6ce4:	210b      	movs	r1, #11
    6ce6:	30ec      	adds	r0, #236	; 0xec
    6ce8:	f008 fc4a 	bl	f580 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5b6>
    6cec:	201a      	movs	r0, #26
    6cee:	f7ff fc4b 	bl	6588 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf90>
    6cf2:	e006      	b.n	6d02 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x170a>
    6cf4:	2828      	cmp	r0, #40	; 0x28
    6cf6:	d104      	bne.n	6d02 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x170a>
    6cf8:	4804      	ldr	r0, [pc, #16]	; (6d0c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1714>)
    6cfa:	6801      	ldr	r1, [r0, #0]
    6cfc:	b109      	cbz	r1, 6d02 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x170a>
    6cfe:	4620      	mov	r0, r4
    6d00:	4788      	blx	r1
    6d02:	4628      	mov	r0, r5
    6d04:	bd70      	pop	{r4, r5, r6, pc}
    6d06:	0000      	.short	0x0000
    6d08:	200000fc 	.word	0x200000fc
    6d0c:	20000270 	.word	0x20000270
    6d10:	4901      	ldr	r1, [pc, #4]	; (6d18 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1720>)
    6d12:	68c9      	ldr	r1, [r1, #12]
    6d14:	f7fc bdf2 	b.w	38fc <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY>
    6d18:	200000fc 	.word	0x200000fc
    6d1c:	4603      	mov	r3, r0
    6d1e:	2000      	movs	r0, #0
    6d20:	2b17      	cmp	r3, #23
    6d22:	d017      	beq.n	6d54 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x175c>
    6d24:	dc0a      	bgt.n	6d3c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1744>
    6d26:	2b0e      	cmp	r3, #14
    6d28:	d014      	beq.n	6d54 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x175c>
    6d2a:	2b12      	cmp	r3, #18
    6d2c:	d012      	beq.n	6d54 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x175c>
    6d2e:	2b14      	cmp	r3, #20
    6d30:	d010      	beq.n	6d54 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x175c>
    6d32:	2b16      	cmp	r3, #22
    6d34:	d112      	bne.n	6d5c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1764>
    6d36:	4608      	mov	r0, r1
    6d38:	f7ff bc4c 	b.w	65d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfdc>
    6d3c:	2b23      	cmp	r3, #35	; 0x23
    6d3e:	d003      	beq.n	6d48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1750>
    6d40:	2b24      	cmp	r3, #36	; 0x24
    6d42:	d001      	beq.n	6d48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1750>
    6d44:	2b25      	cmp	r3, #37	; 0x25
    6d46:	d109      	bne.n	6d5c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1764>
    6d48:	4a05      	ldr	r2, [pc, #20]	; (6d60 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1768>)
    6d4a:	6812      	ldr	r2, [r2, #0]
    6d4c:	2a00      	cmp	r2, #0
    6d4e:	d005      	beq.n	6d5c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1764>
    6d50:	4618      	mov	r0, r3
    6d52:	4710      	bx	r2
    6d54:	2100      	movs	r1, #0
    6d56:	4618      	mov	r0, r3
    6d58:	f008 bdff 	b.w	f95a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x3ba>
    6d5c:	4770      	bx	lr
    6d5e:	0000      	.short	0x0000
    6d60:	2000026c 	.word	0x2000026c
    6d64:	4a03      	ldr	r2, [pc, #12]	; (6d74 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x177c>)
    6d66:	6852      	ldr	r2, [r2, #4]
    6d68:	f882 0123 	strb.w	r0, [r2, #291]	; 0x123
    6d6c:	f882 1122 	strb.w	r1, [r2, #290]	; 0x122
    6d70:	4770      	bx	lr
    6d72:	0000      	.short	0x0000
    6d74:	2000010c 	.word	0x2000010c
    6d78:	b570      	push	{r4, r5, r6, lr}
    6d7a:	4604      	mov	r4, r0
    6d7c:	6840      	ldr	r0, [r0, #4]
    6d7e:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    6d82:	291c      	cmp	r1, #28
    6d84:	d004      	beq.n	6d90 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1798>
    6d86:	f640 014e 	movw	r1, #2126	; 0x84e
    6d8a:	2031      	movs	r0, #49	; 0x31
    6d8c:	f7fa fb36 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6d90:	2500      	movs	r5, #0
    6d92:	f880 50db 	strb.w	r5, [r0, #219]	; 0xdb
    6d96:	6860      	ldr	r0, [r4, #4]
    6d98:	f890 10dc 	ldrb.w	r1, [r0, #220]	; 0xdc
    6d9c:	b161      	cbz	r1, 6db8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17c0>
    6d9e:	f880 50dc 	strb.w	r5, [r0, #220]	; 0xdc
    6da2:	6860      	ldr	r0, [r4, #4]
    6da4:	220d      	movs	r2, #13
    6da6:	8801      	ldrh	r1, [r0, #0]
    6da8:	f8a0 1216 	strh.w	r1, [r0, #534]	; 0x216
    6dac:	6860      	ldr	r0, [r4, #4]
    6dae:	490d      	ldr	r1, [pc, #52]	; (6de4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17ec>)
    6db0:	f880 5214 	strb.w	r5, [r0, #532]	; 0x214
    6db4:	6860      	ldr	r0, [r4, #4]
    6db6:	e00c      	b.n	6dd2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17da>
    6db8:	8801      	ldrh	r1, [r0, #0]
    6dba:	f8a0 1216 	strh.w	r1, [r0, #534]	; 0x216
    6dbe:	6860      	ldr	r0, [r4, #4]
    6dc0:	f880 5214 	strb.w	r5, [r0, #532]	; 0x214
    6dc4:	6861      	ldr	r1, [r4, #4]
    6dc6:	2001      	movs	r0, #1
    6dc8:	220c      	movs	r2, #12
    6dca:	f881 0218 	strb.w	r0, [r1, #536]	; 0x218
    6dce:	4906      	ldr	r1, [pc, #24]	; (6de8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17f0>)
    6dd0:	6860      	ldr	r0, [r4, #4]
    6dd2:	f200 200a 	addw	r0, r0, #522	; 0x20a
    6dd6:	f007 fba0 	bl	e51a <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    6dda:	6860      	ldr	r0, [r4, #4]
    6ddc:	f880 509e 	strb.w	r5, [r0, #158]	; 0x9e
    6de0:	bd70      	pop	{r4, r5, r6, pc}
    6de2:	0000      	.short	0x0000
    6de4:	0000e8f9 	.word	0x0000e8f9
    6de8:	0000e8db 	.word	0x0000e8db
    6dec:	4915      	ldr	r1, [pc, #84]	; (6e44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x184c>)
    6dee:	b510      	push	{r4, lr}
    6df0:	6889      	ldr	r1, [r1, #8]
    6df2:	790a      	ldrb	r2, [r1, #4]
    6df4:	6841      	ldr	r1, [r0, #4]
    6df6:	f891 309d 	ldrb.w	r3, [r1, #157]	; 0x9d
    6dfa:	2b09      	cmp	r3, #9
    6dfc:	d10a      	bne.n	6e14 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x181c>
    6dfe:	f891 3121 	ldrb.w	r3, [r1, #289]	; 0x121
    6e02:	4293      	cmp	r3, r2
    6e04:	d106      	bne.n	6e14 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x181c>
    6e06:	2200      	movs	r2, #0
    6e08:	f881 209d 	strb.w	r2, [r1, #157]	; 0x9d
    6e0c:	6840      	ldr	r0, [r0, #4]
    6e0e:	f880 20d6 	strb.w	r2, [r0, #214]	; 0xd6
    6e12:	bd10      	pop	{r4, pc}
    6e14:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
    6e18:	071c      	lsls	r4, r3, #28
    6e1a:	d507      	bpl.n	6e2c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1834>
    6e1c:	f023 0008 	bic.w	r0, r3, #8
    6e20:	f8c1 008c 	str.w	r0, [r1, #140]	; 0x8c
    6e24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6e28:	f7fe bcf4 	b.w	5814 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    6e2c:	2aff      	cmp	r2, #255	; 0xff
    6e2e:	d004      	beq.n	6e3a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1842>
    6e30:	f240 71ea 	movw	r1, #2026	; 0x7ea
    6e34:	2031      	movs	r0, #49	; 0x31
    6e36:	f7fa fae1 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6e3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6e3e:	f008 bca1 	b.w	f784 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e4>
    6e42:	0000      	.short	0x0000
    6e44:	200000fc 	.word	0x200000fc
    6e48:	4808      	ldr	r0, [pc, #32]	; (6e6c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1874>)
    6e4a:	b510      	push	{r4, lr}
    6e4c:	6840      	ldr	r0, [r0, #4]
    6e4e:	f890 10a3 	ldrb.w	r1, [r0, #163]	; 0xa3
    6e52:	b941      	cbnz	r1, 6e66 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x186e>
    6e54:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    6e58:	2301      	movs	r3, #1
    6e5a:	2106      	movs	r1, #6
    6e5c:	3080      	adds	r0, #128	; 0x80
    6e5e:	f006 ffc5 	bl	ddec <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6e62:	2800      	cmp	r0, #0
    6e64:	d000      	beq.n	6e68 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1870>
    6e66:	2001      	movs	r0, #1
    6e68:	bd10      	pop	{r4, pc}
    6e6a:	0000      	.short	0x0000
    6e6c:	2000010c 	.word	0x2000010c
    6e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6e72:	4c59      	ldr	r4, [pc, #356]	; (6fd8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19e0>)
    6e74:	4606      	mov	r6, r0
    6e76:	4615      	mov	r5, r2
    6e78:	6860      	ldr	r0, [r4, #4]
    6e7a:	2200      	movs	r2, #0
    6e7c:	b111      	cbz	r1, 6e84 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x188c>
    6e7e:	f8a0 2236 	strh.w	r2, [r0, #566]	; 0x236
    6e82:	e006      	b.n	6e92 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x189a>
    6e84:	f8b0 1236 	ldrh.w	r1, [r0, #566]	; 0x236
    6e88:	f8b0 2226 	ldrh.w	r2, [r0, #550]	; 0x226
    6e8c:	4411      	add	r1, r2
    6e8e:	f8a0 1236 	strh.w	r1, [r0, #566]	; 0x236
    6e92:	f890 1130 	ldrb.w	r1, [r0, #304]	; 0x130
    6e96:	f88d 1000 	strb.w	r1, [sp]
    6e9a:	9900      	ldr	r1, [sp, #0]
    6e9c:	9100      	str	r1, [sp, #0]
    6e9e:	f89d 1000 	ldrb.w	r1, [sp]
    6ea2:	b939      	cbnz	r1, 6eb4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18bc>
    6ea4:	f890 209f 	ldrb.w	r2, [r0, #159]	; 0x9f
    6ea8:	2301      	movs	r3, #1
    6eaa:	4619      	mov	r1, r3
    6eac:	3080      	adds	r0, #128	; 0x80
    6eae:	f006 ff9d 	bl	ddec <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6eb2:	b130      	cbz	r0, 6ec2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18ca>
    6eb4:	6860      	ldr	r0, [r4, #4]
    6eb6:	f830 1fd0 	ldrh.w	r1, [r0, #208]!
    6eba:	f8b0 2156 	ldrh.w	r2, [r0, #342]	; 0x156
    6ebe:	4411      	add	r1, r2
    6ec0:	8001      	strh	r1, [r0, #0]
    6ec2:	6860      	ldr	r0, [r4, #4]
    6ec4:	f890 20d6 	ldrb.w	r2, [r0, #214]	; 0xd6
    6ec8:	b132      	cbz	r2, 6ed8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18e0>
    6eca:	f8b0 10d2 	ldrh.w	r1, [r0, #210]	; 0xd2
    6ece:	f8b0 3226 	ldrh.w	r3, [r0, #550]	; 0x226
    6ed2:	4419      	add	r1, r3
    6ed4:	f8a0 10d2 	strh.w	r1, [r0, #210]	; 0xd2
    6ed8:	f990 30da 	ldrsb.w	r3, [r0, #218]	; 0xda
    6edc:	2b00      	cmp	r3, #0
    6ede:	dd06      	ble.n	6eee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18f6>
    6ee0:	f8b0 10d8 	ldrh.w	r1, [r0, #216]	; 0xd8
    6ee4:	f8b0 7226 	ldrh.w	r7, [r0, #550]	; 0x226
    6ee8:	4439      	add	r1, r7
    6eea:	f8a0 10d8 	strh.w	r1, [r0, #216]	; 0xd8
    6eee:	f890 10bd 	ldrb.w	r1, [r0, #189]	; 0xbd
    6ef2:	bb09      	cbnz	r1, 6f38 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1940>
    6ef4:	b9be      	cbnz	r6, 6f26 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x192e>
    6ef6:	4938      	ldr	r1, [pc, #224]	; (6fd8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19e0>)
    6ef8:	3910      	subs	r1, #16
    6efa:	7809      	ldrb	r1, [r1, #0]
    6efc:	2902      	cmp	r1, #2
    6efe:	d006      	beq.n	6f0e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1916>
    6f00:	2901      	cmp	r1, #1
    6f02:	d00a      	beq.n	6f1a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1922>
    6f04:	b1f5      	cbz	r5, 6f44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x194c>
    6f06:	06e9      	lsls	r1, r5, #27
    6f08:	d50b      	bpl.n	6f22 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x192a>
    6f0a:	211e      	movs	r1, #30
    6f0c:	e042      	b.n	6f94 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x199c>
    6f0e:	f890 1128 	ldrb.w	r1, [r0, #296]	; 0x128
    6f12:	2906      	cmp	r1, #6
    6f14:	d03e      	beq.n	6f94 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x199c>
    6f16:	2116      	movs	r1, #22
    6f18:	e03c      	b.n	6f94 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x199c>
    6f1a:	f890 10a0 	ldrb.w	r1, [r0, #160]	; 0xa0
    6f1e:	b959      	cbnz	r1, 6f38 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1940>
    6f20:	e054      	b.n	6fcc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19d4>
    6f22:	0729      	lsls	r1, r5, #28
    6f24:	d501      	bpl.n	6f2a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1932>
    6f26:	213d      	movs	r1, #61	; 0x3d
    6f28:	e034      	b.n	6f94 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x199c>
    6f2a:	06a9      	lsls	r1, r5, #26
    6f2c:	d501      	bpl.n	6f32 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x193a>
    6f2e:	2123      	movs	r1, #35	; 0x23
    6f30:	e030      	b.n	6f94 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x199c>
    6f32:	07a9      	lsls	r1, r5, #30
    6f34:	d001      	beq.n	6f3a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1942>
    6f36:	212a      	movs	r1, #42	; 0x2a
    6f38:	e02c      	b.n	6f94 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x199c>
    6f3a:	f640 615e 	movw	r1, #3678	; 0xe5e
    6f3e:	2031      	movs	r0, #49	; 0x31
    6f40:	f7fa fa5c 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6f44:	b12a      	cbz	r2, 6f52 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x195a>
    6f46:	f8b0 10d2 	ldrh.w	r1, [r0, #210]	; 0xd2
    6f4a:	f8b0 20d4 	ldrh.w	r2, [r0, #212]	; 0xd4
    6f4e:	4291      	cmp	r1, r2
    6f50:	d216      	bcs.n	6f80 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1988>
    6f52:	2b00      	cmp	r3, #0
    6f54:	dd05      	ble.n	6f62 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x196a>
    6f56:	f8b0 10d8 	ldrh.w	r1, [r0, #216]	; 0xd8
    6f5a:	f8b0 20d4 	ldrh.w	r2, [r0, #212]	; 0xd4
    6f5e:	4291      	cmp	r1, r2
    6f60:	d20e      	bcs.n	6f80 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1988>
    6f62:	f8b0 20d0 	ldrh.w	r2, [r0, #208]	; 0xd0
    6f66:	f8b0 10ce 	ldrh.w	r1, [r0, #206]	; 0xce
    6f6a:	428a      	cmp	r2, r1
    6f6c:	d30a      	bcc.n	6f84 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x198c>
    6f6e:	f890 2130 	ldrb.w	r2, [r0, #304]	; 0x130
    6f72:	f88d 2000 	strb.w	r2, [sp]
    6f76:	9a00      	ldr	r2, [sp, #0]
    6f78:	9200      	str	r2, [sp, #0]
    6f7a:	f89d 2000 	ldrb.w	r2, [sp]
    6f7e:	b10a      	cbz	r2, 6f84 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x198c>
    6f80:	2122      	movs	r1, #34	; 0x22
    6f82:	e007      	b.n	6f94 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x199c>
    6f84:	f890 20a1 	ldrb.w	r2, [r0, #161]	; 0xa1
    6f88:	b172      	cbz	r2, 6fa8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19b0>
    6f8a:	f8b0 20cc 	ldrh.w	r2, [r0, #204]	; 0xcc
    6f8e:	428a      	cmp	r2, r1
    6f90:	d31c      	bcc.n	6fcc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19d4>
    6f92:	2108      	movs	r1, #8
    6f94:	f890 20bc 	ldrb.w	r2, [r0, #188]	; 0xbc
    6f98:	f88d 2000 	strb.w	r2, [sp]
    6f9c:	9a00      	ldr	r2, [sp, #0]
    6f9e:	9200      	str	r2, [sp, #0]
    6fa0:	f89d 2000 	ldrb.w	r2, [sp]
    6fa4:	b96a      	cbnz	r2, 6fc2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19ca>
    6fa6:	e005      	b.n	6fb4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19bc>
    6fa8:	f8b0 10cc 	ldrh.w	r1, [r0, #204]	; 0xcc
    6fac:	2906      	cmp	r1, #6
    6fae:	d30d      	bcc.n	6fcc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19d4>
    6fb0:	213e      	movs	r1, #62	; 0x3e
    6fb2:	e7ef      	b.n	6f94 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x199c>
    6fb4:	f880 10bd 	strb.w	r1, [r0, #189]	; 0xbd
    6fb8:	220b      	movs	r2, #11
    6fba:	4908      	ldr	r1, [pc, #32]	; (6fdc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19e4>)
    6fbc:	30b4      	adds	r0, #180	; 0xb4
    6fbe:	f007 faac 	bl	e51a <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    6fc2:	6860      	ldr	r0, [r4, #4]
    6fc4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    6fc8:	f008 baea 	b.w	f5a0 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>
    6fcc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    6fd0:	2100      	movs	r1, #0
    6fd2:	f7fd be07 	b.w	4be4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    6fd6:	0000      	.short	0x0000
    6fd8:	2000010c 	.word	0x2000010c
    6fdc:	0000e859 	.word	0x0000e859
    6fe0:	b570      	push	{r4, r5, r6, lr}
    6fe2:	4d2e      	ldr	r5, [pc, #184]	; (709c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x9c>)
    6fe4:	6868      	ldr	r0, [r5, #4]
    6fe6:	f890 10a1 	ldrb.w	r1, [r0, #161]	; 0xa1
    6fea:	b151      	cbz	r1, 7002 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2>
    6fec:	2901      	cmp	r1, #1
    6fee:	d008      	beq.n	7002 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2>
    6ff0:	2902      	cmp	r1, #2
    6ff2:	d009      	beq.n	7008 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8>
    6ff4:	2903      	cmp	r1, #3
    6ff6:	d007      	beq.n	7008 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8>
    6ff8:	f640 41d7 	movw	r1, #3287	; 0xcd7
    6ffc:	2031      	movs	r0, #49	; 0x31
    6ffe:	f7fa f9fd 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7002:	f8b0 1224 	ldrh.w	r1, [r0, #548]	; 0x224
    7006:	e037      	b.n	7078 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x78>
    7008:	f890 109f 	ldrb.w	r1, [r0, #159]	; 0x9f
    700c:	2907      	cmp	r1, #7
    700e:	d036      	beq.n	707e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7e>
    7010:	f8b0 20cc 	ldrh.w	r2, [r0, #204]	; 0xcc
    7014:	f8b0 10ce 	ldrh.w	r1, [r0, #206]	; 0xce
    7018:	2400      	movs	r4, #0
    701a:	1c93      	adds	r3, r2, #2
    701c:	4299      	cmp	r1, r3
    701e:	d306      	bcc.n	702e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2e>
    7020:	1a89      	subs	r1, r1, r2
    7022:	1e89      	subs	r1, r1, #2
    7024:	040c      	lsls	r4, r1, #16
    7026:	0c24      	lsrs	r4, r4, #16
    7028:	d001      	beq.n	702e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2e>
    702a:	1e64      	subs	r4, r4, #1
    702c:	b2a4      	uxth	r4, r4
    702e:	f890 10ca 	ldrb.w	r1, [r0, #202]	; 0xca
    7032:	b139      	cbz	r1, 7044 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x44>
    7034:	f890 209d 	ldrb.w	r2, [r0, #157]	; 0x9d
    7038:	2301      	movs	r3, #1
    703a:	2109      	movs	r1, #9
    703c:	3080      	adds	r0, #128	; 0x80
    703e:	f006 fed5 	bl	ddec <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    7042:	b340      	cbz	r0, 7096 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x96>
    7044:	f7ff ff00 	bl	6e48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1850>
    7048:	b178      	cbz	r0, 706a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6a>
    704a:	686a      	ldr	r2, [r5, #4]
    704c:	2000      	movs	r0, #0
    704e:	f8d2 10c4 	ldr.w	r1, [r2, #196]	; 0xc4
    7052:	f8d2 20c0 	ldr.w	r2, [r2, #192]	; 0xc0
    7056:	1c93      	adds	r3, r2, #2
    7058:	4299      	cmp	r1, r3
    705a:	d303      	bcc.n	7064 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x64>
    705c:	1a88      	subs	r0, r1, r2
    705e:	1e80      	subs	r0, r0, #2
    7060:	d000      	beq.n	7064 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x64>
    7062:	1e40      	subs	r0, r0, #1
    7064:	42a0      	cmp	r0, r4
    7066:	d200      	bcs.n	706a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6a>
    7068:	b284      	uxth	r4, r0
    706a:	b10c      	cbz	r4, 7070 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x70>
    706c:	1e64      	subs	r4, r4, #1
    706e:	b2a4      	uxth	r4, r4
    7070:	6868      	ldr	r0, [r5, #4]
    7072:	f8b0 1224 	ldrh.w	r1, [r0, #548]	; 0x224
    7076:	4421      	add	r1, r4
    7078:	f8a0 1220 	strh.w	r1, [r0, #544]	; 0x220
    707c:	bd70      	pop	{r4, r5, r6, pc}
    707e:	f8b0 10cc 	ldrh.w	r1, [r0, #204]	; 0xcc
    7082:	2903      	cmp	r1, #3
    7084:	d3bd      	bcc.n	7002 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2>
    7086:	f830 1f94 	ldrh.w	r1, [r0, #148]!
    708a:	8f42      	ldrh	r2, [r0, #58]	; 0x3a
    708c:	4411      	add	r1, r2
    708e:	1c49      	adds	r1, r1, #1
    7090:	f8a0 118c 	strh.w	r1, [r0, #396]	; 0x18c
    7094:	bd70      	pop	{r4, r5, r6, pc}
    7096:	2400      	movs	r4, #0
    7098:	e7ea      	b.n	7070 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x70>
    709a:	0000      	.short	0x0000
    709c:	2000010c 	.word	0x2000010c

000070a0 <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI>:
    70a0:	b570      	push	{r4, r5, r6, lr}
    70a2:	6844      	ldr	r4, [r0, #4]
    70a4:	220d      	movs	r2, #13
    70a6:	f504 7598 	add.w	r5, r4, #304	; 0x130
    70aa:	2100      	movs	r1, #0
    70ac:	f104 006f 	add.w	r0, r4, #111	; 0x6f
    70b0:	f009 ff42 	bl	10f38 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    70b4:	f44f 70a3 	mov.w	r0, #326	; 0x146
    70b8:	2100      	movs	r1, #0
    70ba:	f8a4 1144 	strh.w	r1, [r4, #324]	; 0x144
    70be:	5501      	strb	r1, [r0, r4]
    70c0:	f8a5 1017 	strh.w	r1, [r5, #23]
    70c4:	7669      	strb	r1, [r5, #25]
    70c6:	4608      	mov	r0, r1
    70c8:	f05f 017f 	movs.w	r1, #127	; 0x7f
    70cc:	eb04 0240 	add.w	r2, r4, r0, lsl #1
    70d0:	1c40      	adds	r0, r0, #1
    70d2:	b2c0      	uxtb	r0, r0
    70d4:	f882 1074 	strb.w	r1, [r2, #116]	; 0x74
    70d8:	2802      	cmp	r0, #2
    70da:	d3f7      	bcc.n	70cc <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI+0x2c>
    70dc:	f994 106e 	ldrsb.w	r1, [r4, #110]	; 0x6e
    70e0:	4620      	mov	r0, r4
    70e2:	f008 fd28 	bl	fb36 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY>
    70e6:	2000      	movs	r0, #0
    70e8:	21ff      	movs	r1, #255	; 0xff
    70ea:	1822      	adds	r2, r4, r0
    70ec:	1c40      	adds	r0, r0, #1
    70ee:	b2c0      	uxtb	r0, r0
    70f0:	f882 1077 	strb.w	r1, [r2, #119]	; 0x77
    70f4:	2802      	cmp	r0, #2
    70f6:	d3f8      	bcc.n	70ea <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI+0x4a>
    70f8:	bd70      	pop	{r4, r5, r6, pc}
	...

000070fc <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>:
    70fc:	4903      	ldr	r1, [pc, #12]	; (710c <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA+0x10>)
    70fe:	884a      	ldrh	r2, [r1, #2]
    7100:	8002      	strh	r2, [r0, #0]
    7102:	7809      	ldrb	r1, [r1, #0]
    7104:	7081      	strb	r1, [r0, #2]
    7106:	2000      	movs	r0, #0
    7108:	4770      	bx	lr
    710a:	0000      	.short	0x0000
    710c:	20000b90 	.word	0x20000b90

00007110 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>:
    7110:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    7112:	460c      	mov	r4, r1
    7114:	4605      	mov	r5, r0
    7116:	8800      	ldrh	r0, [r0, #0]
    7118:	4669      	mov	r1, sp
    711a:	f006 fe3d 	bl	dd98 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    711e:	2200      	movs	r2, #0
    7120:	b128      	cbz	r0, 712e <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x1e>
    7122:	f8c4 2002 	str.w	r2, [r4, #2]
    7126:	71a2      	strb	r2, [r4, #6]
    7128:	8022      	strh	r2, [r4, #0]
    712a:	2002      	movs	r0, #2
    712c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    712e:	9901      	ldr	r1, [sp, #4]
    7130:	f111 0180 	adds.w	r1, r1, #128	; 0x80
    7134:	f881 2074 	strb.w	r2, [r1, #116]	; 0x74
    7138:	f8d1 0026 	ldr.w	r0, [r1, #38]	; 0x26
    713c:	f8c4 0002 	str.w	r0, [r4, #2]
    7140:	f891 002a 	ldrb.w	r0, [r1, #42]	; 0x2a
    7144:	71a0      	strb	r0, [r4, #6]
    7146:	8828      	ldrh	r0, [r5, #0]
    7148:	8020      	strh	r0, [r4, #0]
    714a:	f891 0074 	ldrb.w	r0, [r1, #116]	; 0x74
    714e:	f88d 0008 	strb.w	r0, [sp, #8]
    7152:	9802      	ldr	r0, [sp, #8]
    7154:	9002      	str	r0, [sp, #8]
    7156:	f89d 0008 	ldrb.w	r0, [sp, #8]
    715a:	2800      	cmp	r0, #0
    715c:	d1ea      	bne.n	7134 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x24>
    715e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

00007160 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>:
    7160:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    7162:	460d      	mov	r5, r1
    7164:	4606      	mov	r6, r0
    7166:	8800      	ldrh	r0, [r0, #0]
    7168:	4669      	mov	r1, sp
    716a:	f006 fe15 	bl	dd98 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    716e:	2800      	cmp	r0, #0
    7170:	d11a      	bne.n	71a8 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x48>
    7172:	f8dd 4004 	ldr.w	r4, [sp, #4]
    7176:	2700      	movs	r7, #0
    7178:	f884 706c 	strb.w	r7, [r4, #108]	; 0x6c
    717c:	f814 0f6a 	ldrb.w	r0, [r4, #106]!
    7180:	f009 f9e5 	bl	1054e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2e>
    7184:	70a8      	strb	r0, [r5, #2]
    7186:	7860      	ldrb	r0, [r4, #1]
    7188:	f009 f9e1 	bl	1054e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2e>
    718c:	70e8      	strb	r0, [r5, #3]
    718e:	78a0      	ldrb	r0, [r4, #2]
    7190:	f88d 0008 	strb.w	r0, [sp, #8]
    7194:	9802      	ldr	r0, [sp, #8]
    7196:	9002      	str	r0, [sp, #8]
    7198:	f89d 0008 	ldrb.w	r0, [sp, #8]
    719c:	3c6a      	subs	r4, #106	; 0x6a
    719e:	2800      	cmp	r0, #0
    71a0:	d1ea      	bne.n	7178 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x18>
    71a2:	8830      	ldrh	r0, [r6, #0]
    71a4:	8028      	strh	r0, [r5, #0]
    71a6:	2000      	movs	r0, #0
    71a8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

000071ac <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>:
    71ac:	4903      	ldr	r1, [pc, #12]	; (71bc <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q+0x10>)
    71ae:	888a      	ldrh	r2, [r1, #4]
    71b0:	8002      	strh	r2, [r0, #0]
    71b2:	88c9      	ldrh	r1, [r1, #6]
    71b4:	8041      	strh	r1, [r0, #2]
    71b6:	2000      	movs	r0, #0
    71b8:	4770      	bx	lr
    71ba:	0000      	.short	0x0000
    71bc:	2000027c 	.word	0x2000027c

000071c0 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>:
    71c0:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    71c2:	2400      	movs	r4, #0
    71c4:	a902      	add	r1, sp, #8
    71c6:	f88d 4004 	strb.w	r4, [sp, #4]
    71ca:	f88d 4008 	strb.w	r4, [sp, #8]
    71ce:	9100      	str	r1, [sp, #0]
    71d0:	7882      	ldrb	r2, [r0, #2]
    71d2:	7841      	ldrb	r1, [r0, #1]
    71d4:	7800      	ldrb	r0, [r0, #0]
    71d6:	ab01      	add	r3, sp, #4
    71d8:	f009 fb2d 	bl	10836 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x316>
    71dc:	2800      	cmp	r0, #0
    71de:	d112      	bne.n	7206 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x46>
    71e0:	f89d 0004 	ldrb.w	r0, [sp, #4]
    71e4:	f009 fa67 	bl	106b6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x196>
    71e8:	b170      	cbz	r0, 7208 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x48>
    71ea:	f89d 0008 	ldrb.w	r0, [sp, #8]
    71ee:	f009 fa62 	bl	106b6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x196>
    71f2:	b148      	cbz	r0, 7208 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x48>
    71f4:	4805      	ldr	r0, [pc, #20]	; (720c <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x4c>)
    71f6:	f89d 1004 	ldrb.w	r1, [sp, #4]
    71fa:	7381      	strb	r1, [r0, #14]
    71fc:	f89d 1008 	ldrb.w	r1, [sp, #8]
    7200:	73c1      	strb	r1, [r0, #15]
    7202:	8204      	strh	r4, [r0, #16]
    7204:	2000      	movs	r0, #0
    7206:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    7208:	2011      	movs	r0, #17
    720a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    720c:	20000b90 	.word	0x20000b90

00007210 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>:
    7210:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    7214:	460f      	mov	r7, r1
    7216:	4605      	mov	r5, r0
    7218:	7806      	ldrb	r6, [r0, #0]
    721a:	f009 f9ff 	bl	1061c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xfc>
    721e:	2800      	cmp	r0, #0
    7220:	d10a      	bne.n	7238 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    7222:	4628      	mov	r0, r5
    7224:	f009 f9d4 	bl	105d0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xb0>
    7228:	2800      	cmp	r0, #0
    722a:	d105      	bne.n	7238 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    722c:	2001      	movs	r0, #1
    722e:	f7fa fad9 	bl	17e4 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    7232:	4286      	cmp	r6, r0
    7234:	d302      	bcc.n	723c <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x2c>
    7236:	2007      	movs	r0, #7
    7238:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    723c:	2101      	movs	r1, #1
    723e:	4630      	mov	r0, r6
    7240:	f006 fb2f 	bl	d8a2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    7244:	0004      	movs	r4, r0
    7246:	d004      	beq.n	7252 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x42>
    7248:	f007 febc 	bl	efc4 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    724c:	b168      	cbz	r0, 726a <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x5a>
    724e:	200c      	movs	r0, #12
    7250:	e7f2      	b.n	7238 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    7252:	2101      	movs	r1, #1
    7254:	4630      	mov	r0, r6
    7256:	f006 fb1a 	bl	d88e <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>
    725a:	0004      	movs	r4, r0
    725c:	d013      	beq.n	7286 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x76>
    725e:	4817      	ldr	r0, [pc, #92]	; (72bc <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xac>)
    7260:	f990 1000 	ldrsb.w	r1, [r0]
    7264:	4620      	mov	r0, r4
    7266:	f007 fc6f 	bl	eb48 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>
    726a:	4620      	mov	r0, r4
    726c:	f007 fcd7 	bl	ec1e <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
    7270:	7038      	strb	r0, [r7, #0]
    7272:	74e8      	strb	r0, [r5, #19]
    7274:	4629      	mov	r1, r5
    7276:	4620      	mov	r0, r4
    7278:	f7fc fce6 	bl	3c48 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>
    727c:	4606      	mov	r6, r0
    727e:	7e68      	ldrb	r0, [r5, #25]
    7280:	b1d0      	cbz	r0, 72b8 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xa8>
    7282:	b12e      	cbz	r6, 7290 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x80>
    7284:	e018      	b.n	72b8 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xa8>
    7286:	f241 31e8 	movw	r1, #5096	; 0x13e8
    728a:	2039      	movs	r0, #57	; 0x39
    728c:	f7fa f8b6 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7290:	2200      	movs	r2, #0
    7292:	4668      	mov	r0, sp
    7294:	6b61      	ldr	r1, [r4, #52]	; 0x34
    7296:	f006 fbb6 	bl	da06 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    729a:	2200      	movs	r2, #0
    729c:	2101      	movs	r1, #1
    729e:	6b60      	ldr	r0, [r4, #52]	; 0x34
    72a0:	f006 fc2b 	bl	dafa <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    72a4:	2204      	movs	r2, #4
    72a6:	4668      	mov	r0, sp
    72a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
    72aa:	f006 fbac 	bl	da06 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    72ae:	2200      	movs	r2, #0
    72b0:	4611      	mov	r1, r2
    72b2:	6b60      	ldr	r0, [r4, #52]	; 0x34
    72b4:	f006 fc21 	bl	dafa <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    72b8:	4630      	mov	r0, r6
    72ba:	e7bd      	b.n	7238 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    72bc:	20000274 	.word	0x20000274

000072c0 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>:
    72c0:	7801      	ldrb	r1, [r0, #0]
    72c2:	b171      	cbz	r1, 72e2 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    72c4:	7841      	ldrb	r1, [r0, #1]
    72c6:	b161      	cbz	r1, 72e2 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    72c8:	8841      	ldrh	r1, [r0, #2]
    72ca:	291b      	cmp	r1, #27
    72cc:	d309      	bcc.n	72e2 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    72ce:	8881      	ldrh	r1, [r0, #4]
    72d0:	291b      	cmp	r1, #27
    72d2:	d306      	bcc.n	72e2 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    72d4:	4904      	ldr	r1, [pc, #16]	; (72e8 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x28>)
    72d6:	6802      	ldr	r2, [r0, #0]
    72d8:	600a      	str	r2, [r1, #0]
    72da:	8880      	ldrh	r0, [r0, #4]
    72dc:	8088      	strh	r0, [r1, #4]
    72de:	2000      	movs	r0, #0
    72e0:	4770      	bx	lr
    72e2:	2012      	movs	r0, #18
    72e4:	4770      	bx	lr
    72e6:	0000      	.short	0x0000
    72e8:	20000b90 	.word	0x20000b90

000072ec <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>:
    72ec:	6800      	ldr	r0, [r0, #0]
    72ee:	f240 41e2 	movw	r1, #1250	; 0x4e2
    72f2:	4288      	cmp	r0, r1
    72f4:	d303      	bcc.n	72fe <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x12>
    72f6:	4903      	ldr	r1, [pc, #12]	; (7304 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x18>)
    72f8:	6088      	str	r0, [r1, #8]
    72fa:	2000      	movs	r0, #0
    72fc:	4770      	bx	lr
    72fe:	2012      	movs	r0, #18
    7300:	4770      	bx	lr
    7302:	0000      	.short	0x0000
    7304:	20000b90 	.word	0x20000b90

00007308 <sym_MCY7RRK5E6T6JDGA7HZL7CCKF7DGHVCG4MOX6PI>:
    7308:	b510      	push	{r4, lr}
    730a:	f7fb fed9 	bl	30c0 <sym_XECBDXJ42XLR262DOTTQGYR47BZ5WSNNCRAJKPI>
    730e:	f009 fa8a 	bl	10826 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x306>
    7312:	4901      	ldr	r1, [pc, #4]	; (7318 <sym_MCY7RRK5E6T6JDGA7HZL7CCKF7DGHVCG4MOX6PI+0x10>)
    7314:	7008      	strb	r0, [r1, #0]
    7316:	bd10      	pop	{r4, pc}
    7318:	20000274 	.word	0x20000274

0000731c <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>:
    731c:	4a03      	ldr	r2, [pc, #12]	; (732c <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x10>)
    731e:	e9d2 1204 	ldrd	r1, r2, [r2, #16]
    7322:	6001      	str	r1, [r0, #0]
    7324:	6042      	str	r2, [r0, #4]
    7326:	2000      	movs	r0, #0
    7328:	4770      	bx	lr
    732a:	0000      	.short	0x0000
    732c:	00007868 	.word	0x00007868

00007330 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>:
    7330:	b50e      	push	{r1, r2, r3, lr}
    7332:	8800      	ldrh	r0, [r0, #0]
    7334:	4669      	mov	r1, sp
    7336:	f006 fd2f 	bl	dd98 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    733a:	b960      	cbnz	r0, 7356 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x26>
    733c:	9801      	ldr	r0, [sp, #4]
    733e:	f009 fa36 	bl	107ae <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x28e>
    7342:	b140      	cbz	r0, 7356 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x26>
    7344:	9801      	ldr	r0, [sp, #4]
    7346:	4601      	mov	r1, r0
    7348:	f890 2142 	ldrb.w	r2, [r0, #322]	; 0x142
    734c:	3080      	adds	r0, #128	; 0x80
    734e:	f501 71a1 	add.w	r1, r1, #322	; 0x142
    7352:	b962      	cbnz	r2, 736e <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x3e>
    7354:	e001      	b.n	735a <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x2a>
    7356:	2002      	movs	r0, #2
    7358:	bd0e      	pop	{r1, r2, r3, pc}
    735a:	f890 2066 	ldrb.w	r2, [r0, #102]	; 0x66
    735e:	f88d 2008 	strb.w	r2, [sp, #8]
    7362:	9a02      	ldr	r2, [sp, #8]
    7364:	9202      	str	r2, [sp, #8]
    7366:	f89d 3008 	ldrb.w	r3, [sp, #8]
    736a:	2201      	movs	r2, #1
    736c:	b10b      	cbz	r3, 7372 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x42>
    736e:	203a      	movs	r0, #58	; 0x3a
    7370:	bd0e      	pop	{r1, r2, r3, pc}
    7372:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
    7376:	079b      	lsls	r3, r3, #30
    7378:	d006      	beq.n	7388 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x58>
    737a:	2203      	movs	r2, #3
    737c:	4905      	ldr	r1, [pc, #20]	; (7394 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x64>)
    737e:	305e      	adds	r0, #94	; 0x5e
    7380:	f007 f8df 	bl	e542 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    7384:	2000      	movs	r0, #0
    7386:	bd0e      	pop	{r1, r2, r3, pc}
    7388:	700a      	strb	r2, [r1, #0]
    738a:	4668      	mov	r0, sp
    738c:	f007 f8a2 	bl	e4d4 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
    7390:	e7f8      	b.n	7384 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x54>
    7392:	0000      	.short	0x0000
    7394:	0000e9b7 	.word	0x0000e9b7

00007398 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI>:
    7398:	b510      	push	{r4, lr}
    739a:	2005      	movs	r0, #5
    739c:	f000 faf6 	bl	798c <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>
    73a0:	f7fe f882 	bl	54a8 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI>
    73a4:	4902      	ldr	r1, [pc, #8]	; (73b0 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x18>)
    73a6:	4801      	ldr	r0, [pc, #4]	; (73ac <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x14>)
    73a8:	6048      	str	r0, [r1, #4]
    73aa:	bd10      	pop	{r4, pc}
    73ac:	000073e1 	.word	0x000073e1
    73b0:	20000274 	.word	0x20000274
    73b4:	b51c      	push	{r2, r3, r4, lr}
    73b6:	4909      	ldr	r1, [pc, #36]	; (73dc <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x44>)
    73b8:	e9d1 0100 	ldrd	r0, r1, [r1]
    73bc:	e9cd 0100 	strd	r0, r1, [sp]
    73c0:	e005      	b.n	73ce <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x36>
    73c2:	9800      	ldr	r0, [sp, #0]
    73c4:	f007 fdfe 	bl	efc4 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    73c8:	b108      	cbz	r0, 73ce <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x36>
    73ca:	2001      	movs	r0, #1
    73cc:	bd1c      	pop	{r2, r3, r4, pc}
    73ce:	4668      	mov	r0, sp
    73d0:	f7fa fa52 	bl	1878 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    73d4:	2800      	cmp	r0, #0
    73d6:	d0f4      	beq.n	73c2 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x2a>
    73d8:	2000      	movs	r0, #0
    73da:	bd1c      	pop	{r2, r3, r4, pc}
    73dc:	00007868 	.word	0x00007868
    73e0:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
    73e4:	4613      	mov	r3, r2
    73e6:	4a33      	ldr	r2, [pc, #204]	; (74b4 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x11c>)
    73e8:	460f      	mov	r7, r1
    73ea:	f8b0 1054 	ldrh.w	r1, [r0, #84]	; 0x54
    73ee:	8814      	ldrh	r4, [r2, #0]
    73f0:	f8b0 6052 	ldrh.w	r6, [r0, #82]	; 0x52
    73f4:	428c      	cmp	r4, r1
    73f6:	d200      	bcs.n	73fa <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x62>
    73f8:	4621      	mov	r1, r4
    73fa:	4688      	mov	r8, r1
    73fc:	8891      	ldrh	r1, [r2, #4]
    73fe:	42b1      	cmp	r1, r6
    7400:	d200      	bcs.n	7404 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x6c>
    7402:	460e      	mov	r6, r1
    7404:	8851      	ldrh	r1, [r2, #2]
    7406:	f640 0448 	movw	r4, #2120	; 0x848
    740a:	42a1      	cmp	r1, r4
    740c:	d300      	bcc.n	7410 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x78>
    740e:	4621      	mov	r1, r4
    7410:	88d5      	ldrh	r5, [r2, #6]
    7412:	42a5      	cmp	r5, r4
    7414:	d300      	bcc.n	7418 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x80>
    7416:	4625      	mov	r5, r4
    7418:	42a1      	cmp	r1, r4
    741a:	d200      	bcs.n	741e <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x86>
    741c:	460c      	mov	r4, r1
    741e:	f44f 72a4 	mov.w	r2, #328	; 0x148
    7422:	2e1b      	cmp	r6, #27
    7424:	d001      	beq.n	742a <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x92>
    7426:	4295      	cmp	r5, r2
    7428:	d104      	bne.n	7434 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x9c>
    742a:	f1b8 0f1b 	cmp.w	r8, #27
    742e:	d03e      	beq.n	74ae <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x116>
    7430:	4294      	cmp	r4, r2
    7432:	d03c      	beq.n	74ae <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x116>
    7434:	466a      	mov	r2, sp
    7436:	4619      	mov	r1, r3
    7438:	f009 f960 	bl	106fc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1dc>
    743c:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    7440:	4641      	mov	r1, r8
    7442:	4540      	cmp	r0, r8
    7444:	d900      	bls.n	7448 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xb0>
    7446:	4608      	mov	r0, r1
    7448:	80f8      	strh	r0, [r7, #6]
    744a:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    744e:	42a1      	cmp	r1, r4
    7450:	d800      	bhi.n	7454 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xbc>
    7452:	460c      	mov	r4, r1
    7454:	813c      	strh	r4, [r7, #8]
    7456:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    745a:	42b1      	cmp	r1, r6
    745c:	d800      	bhi.n	7460 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xc8>
    745e:	460e      	mov	r6, r1
    7460:	807e      	strh	r6, [r7, #2]
    7462:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    7466:	42a9      	cmp	r1, r5
    7468:	d800      	bhi.n	746c <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xd4>
    746a:	460d      	mov	r5, r1
    746c:	80bd      	strh	r5, [r7, #4]
    746e:	21ff      	movs	r1, #255	; 0xff
    7470:	7039      	strb	r1, [r7, #0]
    7472:	381b      	subs	r0, #27
    7474:	28e0      	cmp	r0, #224	; 0xe0
    7476:	d902      	bls.n	747e <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xe6>
    7478:	f640 516e 	movw	r1, #3438	; 0xd6e
    747c:	e014      	b.n	74a8 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x110>
    747e:	3e1b      	subs	r6, #27
    7480:	2ee0      	cmp	r6, #224	; 0xe0
    7482:	d902      	bls.n	748a <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xf2>
    7484:	f44f 6157 	mov.w	r1, #3440	; 0xd70
    7488:	e00e      	b.n	74a8 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x110>
    748a:	f44f 60e0 	mov.w	r0, #1792	; 0x700
    748e:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
    7492:	4284      	cmp	r4, r0
    7494:	d902      	bls.n	749c <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x104>
    7496:	f640 5172 	movw	r1, #3442	; 0xd72
    749a:	e005      	b.n	74a8 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x110>
    749c:	f5a5 75a4 	sub.w	r5, r5, #328	; 0x148
    74a0:	4285      	cmp	r5, r0
    74a2:	d904      	bls.n	74ae <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x116>
    74a4:	f640 5174 	movw	r1, #3444	; 0xd74
    74a8:	2039      	movs	r0, #57	; 0x39
    74aa:	f7f9 ffa7 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    74ae:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
    74b2:	0000      	.short	0x0000
    74b4:	2000027c 	.word	0x2000027c
    74b8:	b510      	push	{r4, lr}
    74ba:	480d      	ldr	r0, [pc, #52]	; (74f0 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x158>)
    74bc:	2100      	movs	r1, #0
    74be:	4b0d      	ldr	r3, [pc, #52]	; (74f4 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x15c>)
    74c0:	74c1      	strb	r1, [r0, #19]
    74c2:	8281      	strh	r1, [r0, #20]
    74c4:	221b      	movs	r2, #27
    74c6:	801a      	strh	r2, [r3, #0]
    74c8:	f44f 74a4 	mov.w	r4, #328	; 0x148
    74cc:	805c      	strh	r4, [r3, #2]
    74ce:	809a      	strh	r2, [r3, #4]
    74d0:	80dc      	strh	r4, [r3, #6]
    74d2:	7381      	strb	r1, [r0, #14]
    74d4:	73c1      	strb	r1, [r0, #15]
    74d6:	2303      	movs	r3, #3
    74d8:	7003      	strb	r3, [r0, #0]
    74da:	2302      	movs	r3, #2
    74dc:	7043      	strb	r3, [r0, #1]
    74de:	8042      	strh	r2, [r0, #2]
    74e0:	8082      	strh	r2, [r0, #4]
    74e2:	f640 62a6 	movw	r2, #3750	; 0xea6
    74e6:	6082      	str	r2, [r0, #8]
    74e8:	7481      	strb	r1, [r0, #18]
    74ea:	7301      	strb	r1, [r0, #12]
    74ec:	bd10      	pop	{r4, pc}
    74ee:	0000      	.short	0x0000
    74f0:	20000b90 	.word	0x20000b90
    74f4:	2000027c 	.word	0x2000027c
    74f8:	b510      	push	{r4, lr}
    74fa:	2101      	movs	r1, #1
    74fc:	2000      	movs	r0, #0
    74fe:	f006 f9d0 	bl	d8a2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    7502:	0004      	movs	r4, r0
    7504:	d10a      	bne.n	751c <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x184>
    7506:	2101      	movs	r1, #1
    7508:	f006 f9c1 	bl	d88e <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>
    750c:	0004      	movs	r4, r0
    750e:	d007      	beq.n	7520 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x188>
    7510:	4806      	ldr	r0, [pc, #24]	; (752c <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x194>)
    7512:	f990 1000 	ldrsb.w	r1, [r0]
    7516:	4620      	mov	r0, r4
    7518:	f007 fb16 	bl	eb48 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>
    751c:	4620      	mov	r0, r4
    751e:	bd10      	pop	{r4, pc}
    7520:	f44f 712c 	mov.w	r1, #688	; 0x2b0
    7524:	2039      	movs	r0, #57	; 0x39
    7526:	f7f9 ff69 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    752a:	0000      	.short	0x0000
    752c:	20000274 	.word	0x20000274

00007530 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>:
    7530:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    7534:	b087      	sub	sp, #28
    7536:	460c      	mov	r4, r1
    7538:	4680      	mov	r8, r0
    753a:	4605      	mov	r5, r0
    753c:	f007 fb72 	bl	ec24 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
    7540:	b198      	cbz	r0, 756a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    7542:	4628      	mov	r0, r5
    7544:	f007 fb61 	bl	ec0a <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    7548:	b130      	cbz	r0, 7558 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x28>
    754a:	f8b4 1001 	ldrh.w	r1, [r4, #1]
    754e:	2012      	movs	r0, #18
    7550:	2900      	cmp	r1, #0
    7552:	d00b      	beq.n	756c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3c>
    7554:	2980      	cmp	r1, #128	; 0x80
    7556:	d809      	bhi.n	756c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3c>
    7558:	4628      	mov	r0, r5
    755a:	f007 fb47 	bl	ebec <sym_WE45Z7LOSJEAVMD3HUIMZMMRDD5BLMKOFVBGE4Y>
    755e:	b140      	cbz	r0, 7572 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x42>
    7560:	4640      	mov	r0, r8
    7562:	f007 fab2 	bl	eaca <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>
    7566:	b130      	cbz	r0, 7576 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x46>
    7568:	e009      	b.n	757e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x4e>
    756a:	2042      	movs	r0, #66	; 0x42
    756c:	b007      	add	sp, #28
    756e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    7572:	200c      	movs	r0, #12
    7574:	e7fa      	b.n	756c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3c>
    7576:	4640      	mov	r0, r8
    7578:	f007 fb41 	bl	ebfe <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>
    757c:	b3c8      	cbz	r0, 75f2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xc2>
    757e:	4640      	mov	r0, r8
    7580:	f007 fd20 	bl	efc4 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    7584:	2800      	cmp	r0, #0
    7586:	d1f4      	bne.n	7572 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x42>
    7588:	4640      	mov	r0, r8
    758a:	f007 fab9 	bl	eb00 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ>
    758e:	2800      	cmp	r0, #0
    7590:	d1ef      	bne.n	7572 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x42>
    7592:	4640      	mov	r0, r8
    7594:	f7fc faf6 	bl	3b84 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>
    7598:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    759c:	f242 7110 	movw	r1, #10000	; 0x2710
    75a0:	fb00 f901 	mul.w	r9, r0, r1
    75a4:	78e1      	ldrb	r1, [r4, #3]
    75a6:	4640      	mov	r0, r8
    75a8:	f007 fb17 	bl	ebda <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>
    75ac:	4640      	mov	r0, r8
    75ae:	f007 fb28 	bl	ec02 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    75b2:	b308      	cbz	r0, 75f8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xc8>
    75b4:	2100      	movs	r1, #0
    75b6:	a801      	add	r0, sp, #4
    75b8:	f7fa f97e 	bl	18b8 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>
    75bc:	0004      	movs	r4, r0
    75be:	d07b      	beq.n	76b8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x188>
    75c0:	2100      	movs	r1, #0
    75c2:	f7fb fce1 	bl	2f88 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    75c6:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    75ca:	8020      	strh	r0, [r4, #0]
    75cc:	4621      	mov	r1, r4
    75ce:	4640      	mov	r0, r8
    75d0:	f007 fb3f 	bl	ec52 <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>
    75d4:	f000 f9e6 	bl	79a4 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    75d8:	0940      	lsrs	r0, r0, #5
    75da:	ea40 60c1 	orr.w	r0, r0, r1, lsl #27
    75de:	07c0      	lsls	r0, r0, #31
    75e0:	4d41      	ldr	r5, [pc, #260]	; (76e8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1b8>)
    75e2:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    75e6:	d011      	beq.n	760c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xdc>
    75e8:	8869      	ldrh	r1, [r5, #2]
    75ea:	88aa      	ldrh	r2, [r5, #4]
    75ec:	84c1      	strh	r1, [r0, #38]	; 0x26
    75ee:	8502      	strh	r2, [r0, #40]	; 0x28
    75f0:	e00f      	b.n	7612 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xe2>
    75f2:	e7ff      	b.n	75f4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xc4>
    75f4:	2012      	movs	r0, #18
    75f6:	e7b9      	b.n	756c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3c>
    75f8:	464a      	mov	r2, r9
    75fa:	2100      	movs	r1, #0
    75fc:	4640      	mov	r0, r8
    75fe:	f7fd f9df 	bl	49c0 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>
    7602:	2800      	cmp	r0, #0
    7604:	d0b2      	beq.n	756c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3c>
    7606:	f241 6122 	movw	r1, #5666	; 0x1622
    760a:	e05f      	b.n	76cc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x19c>
    760c:	221b      	movs	r2, #27
    760e:	84c2      	strh	r2, [r0, #38]	; 0x26
    7610:	8502      	strh	r2, [r0, #40]	; 0x28
    7612:	f000 f9c7 	bl	79a4 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    7616:	0788      	lsls	r0, r1, #30
    7618:	f04f 0601 	mov.w	r6, #1
    761c:	d505      	bpl.n	762a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xfa>
    761e:	f88d 6008 	strb.w	r6, [sp, #8]
    7622:	a802      	add	r0, sp, #8
    7624:	9403      	str	r4, [sp, #12]
    7626:	f7ff fd3b 	bl	70a0 <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI>
    762a:	68a8      	ldr	r0, [r5, #8]
    762c:	62e0      	str	r0, [r4, #44]	; 0x2c
    762e:	f641 574c 	movw	r7, #7500	; 0x1d4c
    7632:	4640      	mov	r0, r8
    7634:	f007 faed 	bl	ec12 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    7638:	b910      	cbnz	r0, 7640 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x110>
    763a:	4640      	mov	r0, r8
    763c:	f007 fb07 	bl	ec4e <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>
    7640:	6127      	str	r7, [r4, #16]
    7642:	8821      	ldrh	r1, [r4, #0]
    7644:	f8ad 1008 	strh.w	r1, [sp, #8]
    7648:	7ba9      	ldrb	r1, [r5, #14]
    764a:	f88d 100a 	strb.w	r1, [sp, #10]
    764e:	7be9      	ldrb	r1, [r5, #15]
    7650:	f88d 100b 	strb.w	r1, [sp, #11]
    7654:	8a29      	ldrh	r1, [r5, #16]
    7656:	f8ad 100c 	strh.w	r1, [sp, #12]
    765a:	a905      	add	r1, sp, #20
    765c:	9100      	str	r1, [sp, #0]
    765e:	4630      	mov	r0, r6
    7660:	ab04      	add	r3, sp, #16
    7662:	aa02      	add	r2, sp, #8
    7664:	4621      	mov	r1, r4
    7666:	f009 f87f 	bl	10768 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x248>
    766a:	b140      	cbz	r0, 767e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x14e>
    766c:	2100      	movs	r1, #0
    766e:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    7672:	f7fa f949 	bl	1908 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    7676:	b1f0      	cbz	r0, 76b6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x186>
    7678:	f241 617c 	movw	r1, #5756	; 0x167c
    767c:	e026      	b.n	76cc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x19c>
    767e:	f89d 0010 	ldrb.w	r0, [sp, #16]
    7682:	f88d 0018 	strb.w	r0, [sp, #24]
    7686:	f89d 0014 	ldrb.w	r0, [sp, #20]
    768a:	f88d 0019 	strb.w	r0, [sp, #25]
    768e:	f8bd 000c 	ldrh.w	r0, [sp, #12]
    7692:	f8ad 001a 	strh.w	r0, [sp, #26]
    7696:	a906      	add	r1, sp, #24
    7698:	4620      	mov	r0, r4
    769a:	f006 fc4d 	bl	df38 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    769e:	7868      	ldrb	r0, [r5, #1]
    76a0:	9000      	str	r0, [sp, #0]
    76a2:	782b      	ldrb	r3, [r5, #0]
    76a4:	88aa      	ldrh	r2, [r5, #4]
    76a6:	8869      	ldrh	r1, [r5, #2]
    76a8:	8820      	ldrh	r0, [r4, #0]
    76aa:	f7fa f9e3 	bl	1a74 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>
    76ae:	b128      	cbz	r0, 76bc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x18c>
    76b0:	f241 6187 	movw	r1, #5767	; 0x1687
    76b4:	e00a      	b.n	76cc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x19c>
    76b6:	e7ff      	b.n	76b8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x188>
    76b8:	2009      	movs	r0, #9
    76ba:	e757      	b.n	756c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3c>
    76bc:	464a      	mov	r2, r9
    76be:	4621      	mov	r1, r4
    76c0:	4640      	mov	r0, r8
    76c2:	f7fd f97d 	bl	49c0 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>
    76c6:	b120      	cbz	r0, 76d2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1a2>
    76c8:	f241 6189 	movw	r1, #5769	; 0x1689
    76cc:	2039      	movs	r0, #57	; 0x39
    76ce:	f7f9 fe95 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    76d2:	4806      	ldr	r0, [pc, #24]	; (76ec <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1bc>)
    76d4:	6843      	ldr	r3, [r0, #4]
    76d6:	b123      	cbz	r3, 76e2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1b2>
    76d8:	2200      	movs	r2, #0
    76da:	f504 7199 	add.w	r1, r4, #306	; 0x132
    76de:	4620      	mov	r0, r4
    76e0:	4798      	blx	r3
    76e2:	2000      	movs	r0, #0
    76e4:	e742      	b.n	756c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3c>
    76e6:	0000      	.short	0x0000
    76e8:	20000b90 	.word	0x20000b90
    76ec:	20000274 	.word	0x20000274
    76f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    76f4:	b088      	sub	sp, #32
    76f6:	4604      	mov	r4, r0
    76f8:	8800      	ldrh	r0, [r0, #0]
    76fa:	a906      	add	r1, sp, #24
    76fc:	f006 fb4c 	bl	dd98 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    7700:	2800      	cmp	r0, #0
    7702:	d147      	bne.n	7794 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x264>
    7704:	9807      	ldr	r0, [sp, #28]
    7706:	f890 1180 	ldrb.w	r1, [r0, #384]	; 0x180
    770a:	f88d 1008 	strb.w	r1, [sp, #8]
    770e:	9902      	ldr	r1, [sp, #8]
    7710:	9102      	str	r1, [sp, #8]
    7712:	f89d 1008 	ldrb.w	r1, [sp, #8]
    7716:	3080      	adds	r0, #128	; 0x80
    7718:	b101      	cbz	r1, 771c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1ec>
    771a:	2101      	movs	r1, #1
    771c:	f88d 100c 	strb.w	r1, [sp, #12]
    7720:	7b01      	ldrb	r1, [r0, #12]
    7722:	f04f 0800 	mov.w	r8, #0
    7726:	0689      	lsls	r1, r1, #26
    7728:	d502      	bpl.n	7730 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x200>
    772a:	f89d 100c 	ldrb.w	r1, [sp, #12]
    772e:	b149      	cbz	r1, 7744 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x214>
    7730:	f05f 0100 	movs.w	r1, #0
    7734:	f88d 1004 	strb.w	r1, [sp, #4]
    7738:	2105      	movs	r1, #5
    773a:	306c      	adds	r0, #108	; 0x6c
    773c:	f008 fa6b 	bl	fc16 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x94>
    7740:	b110      	cbz	r0, 7748 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x218>
    7742:	e004      	b.n	774e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x21e>
    7744:	2101      	movs	r1, #1
    7746:	e7f5      	b.n	7734 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x204>
    7748:	f89d 0004 	ldrb.w	r0, [sp, #4]
    774c:	b308      	cbz	r0, 7792 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x262>
    774e:	8921      	ldrh	r1, [r4, #8]
    7750:	88e0      	ldrh	r0, [r4, #6]
    7752:	f008 ffc5 	bl	106e0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1c0>
    7756:	2800      	cmp	r0, #0
    7758:	d11c      	bne.n	7794 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x264>
    775a:	88a1      	ldrh	r1, [r4, #4]
    775c:	8860      	ldrh	r0, [r4, #2]
    775e:	f008 ffbf 	bl	106e0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1c0>
    7762:	2800      	cmp	r0, #0
    7764:	d116      	bne.n	7794 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x264>
    7766:	8921      	ldrh	r1, [r4, #8]
    7768:	88e0      	ldrh	r0, [r4, #6]
    776a:	f008 ffaf 	bl	106cc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1ac>
    776e:	2800      	cmp	r0, #0
    7770:	d110      	bne.n	7794 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x264>
    7772:	88a1      	ldrh	r1, [r4, #4]
    7774:	8860      	ldrh	r0, [r4, #2]
    7776:	f008 ffa9 	bl	106cc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1ac>
    777a:	0006      	movs	r6, r0
    777c:	d10a      	bne.n	7794 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x264>
    777e:	9807      	ldr	r0, [sp, #28]
    7780:	f500 7599 	add.w	r5, r0, #306	; 0x132
    7784:	27ff      	movs	r7, #255	; 0xff
    7786:	706f      	strb	r7, [r5, #1]
    7788:	f89d 100c 	ldrb.w	r1, [sp, #12]
    778c:	b129      	cbz	r1, 779a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x26a>
    778e:	263a      	movs	r6, #58	; 0x3a
    7790:	e02e      	b.n	77f0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2c0>
    7792:	201a      	movs	r0, #26
    7794:	b008      	add	sp, #32
    7796:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    779a:	4641      	mov	r1, r8
    779c:	aa03      	add	r2, sp, #12
    779e:	f008 ffad 	bl	106fc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1dc>
    77a2:	8861      	ldrh	r1, [r4, #2]
    77a4:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    77a8:	4281      	cmp	r1, r0
    77aa:	d200      	bcs.n	77ae <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x27e>
    77ac:	4608      	mov	r0, r1
    77ae:	80e8      	strh	r0, [r5, #6]
    77b0:	88a1      	ldrh	r1, [r4, #4]
    77b2:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    77b6:	4281      	cmp	r1, r0
    77b8:	d200      	bcs.n	77bc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x28c>
    77ba:	4608      	mov	r0, r1
    77bc:	8128      	strh	r0, [r5, #8]
    77be:	88e2      	ldrh	r2, [r4, #6]
    77c0:	f8bd 100e 	ldrh.w	r1, [sp, #14]
    77c4:	428a      	cmp	r2, r1
    77c6:	d200      	bcs.n	77ca <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x29a>
    77c8:	4611      	mov	r1, r2
    77ca:	8069      	strh	r1, [r5, #2]
    77cc:	8922      	ldrh	r2, [r4, #8]
    77ce:	f8bd 1010 	ldrh.w	r1, [sp, #16]
    77d2:	428a      	cmp	r2, r1
    77d4:	d200      	bcs.n	77d8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2a8>
    77d6:	4611      	mov	r1, r2
    77d8:	f640 0248 	movw	r2, #2120	; 0x848
    77dc:	80a9      	strh	r1, [r5, #4]
    77de:	4291      	cmp	r1, r2
    77e0:	d300      	bcc.n	77e4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2b4>
    77e2:	4611      	mov	r1, r2
    77e4:	80a9      	strh	r1, [r5, #4]
    77e6:	4290      	cmp	r0, r2
    77e8:	d200      	bcs.n	77ec <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2bc>
    77ea:	4602      	mov	r2, r0
    77ec:	812a      	strh	r2, [r5, #8]
    77ee:	702f      	strb	r7, [r5, #0]
    77f0:	f885 8001 	strb.w	r8, [r5, #1]
    77f4:	4630      	mov	r0, r6
    77f6:	e7cd      	b.n	7794 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x264>
    77f8:	b51c      	push	{r2, r3, r4, lr}
    77fa:	490c      	ldr	r1, [pc, #48]	; (782c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2fc>)
    77fc:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
    7800:	e9cd 0100 	strd	r0, r1, [sp]
    7804:	e00a      	b.n	781c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2ec>
    7806:	9c00      	ldr	r4, [sp, #0]
    7808:	4620      	mov	r0, r4
    780a:	f007 fbdb 	bl	efc4 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    780e:	b128      	cbz	r0, 781c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2ec>
    7810:	4620      	mov	r0, r4
    7812:	f007 fa2d 	bl	ec70 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>
    7816:	b108      	cbz	r0, 781c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2ec>
    7818:	2001      	movs	r0, #1
    781a:	bd1c      	pop	{r2, r3, r4, pc}
    781c:	4668      	mov	r0, sp
    781e:	f7fa f82b 	bl	1878 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    7822:	2800      	cmp	r0, #0
    7824:	d0ef      	beq.n	7806 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2d6>
    7826:	2000      	movs	r0, #0
    7828:	bd1c      	pop	{r2, r3, r4, pc}
    782a:	0000      	.short	0x0000
    782c:	00007868 	.word	0x00007868
    7830:	b510      	push	{r4, lr}
    7832:	4604      	mov	r4, r0
    7834:	88c1      	ldrh	r1, [r0, #6]
    7836:	8880      	ldrh	r0, [r0, #4]
    7838:	f008 ff52 	bl	106e0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1c0>
    783c:	2800      	cmp	r0, #0
    783e:	d10f      	bne.n	7860 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x330>
    7840:	8861      	ldrh	r1, [r4, #2]
    7842:	8820      	ldrh	r0, [r4, #0]
    7844:	f008 ff4c 	bl	106e0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1c0>
    7848:	2800      	cmp	r0, #0
    784a:	d109      	bne.n	7860 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x330>
    784c:	4805      	ldr	r0, [pc, #20]	; (7864 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x334>)
    784e:	88a1      	ldrh	r1, [r4, #4]
    7850:	8081      	strh	r1, [r0, #4]
    7852:	8821      	ldrh	r1, [r4, #0]
    7854:	8001      	strh	r1, [r0, #0]
    7856:	88e1      	ldrh	r1, [r4, #6]
    7858:	80c1      	strh	r1, [r0, #6]
    785a:	8861      	ldrh	r1, [r4, #2]
    785c:	8041      	strh	r1, [r0, #2]
    785e:	2000      	movs	r0, #0
    7860:	bd10      	pop	{r4, pc}
    7862:	0000      	.short	0x0000
    7864:	2000027c 	.word	0x2000027c
    7868:	00000000 	.word	0x00000000
    786c:	00010000 	.word	0x00010000
    7870:	00000000 	.word	0x00000000
    7874:	00010000 	.word	0x00010000
    7878:	0c124b0c 	.word	0x0c124b0c
    787c:	124b0059 	.word	0x124b0059
    7880:	00000000 	.word	0x00000000
    7884:	00010000 	.word	0x00010000
    7888:	00000000 	.word	0x00000000
    788c:	00010000 	.word	0x00010000

00007890 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>:
    7890:	b510      	push	{r4, lr}
    7892:	f7fb fe23 	bl	34dc <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>
    7896:	4c05      	ldr	r4, [pc, #20]	; (78ac <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ+0x1c>)
    7898:	6860      	ldr	r0, [r4, #4]
    789a:	f009 f828 	bl	108ee <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3ce>
    789e:	f008 fdcd 	bl	1043c <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>
    78a2:	f7fb ff55 	bl	3750 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>
    78a6:	2001      	movs	r0, #1
    78a8:	7020      	strb	r0, [r4, #0]
    78aa:	bd10      	pop	{r4, pc}
    78ac:	20000284 	.word	0x20000284

000078b0 <sym_HG37ZAHWDO2P65KBJXRLV5PVSG5TCUWPMKZOZLQ>:
    78b0:	4801      	ldr	r0, [pc, #4]	; (78b8 <sym_HG37ZAHWDO2P65KBJXRLV5PVSG5TCUWPMKZOZLQ+0x8>)
    78b2:	7800      	ldrb	r0, [r0, #0]
    78b4:	4770      	bx	lr
    78b6:	0000      	.short	0x0000
    78b8:	20000284 	.word	0x20000284

000078bc <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>:
    78bc:	b510      	push	{r4, lr}
    78be:	4c06      	ldr	r4, [pc, #24]	; (78d8 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA+0x1c>)
    78c0:	68a0      	ldr	r0, [r4, #8]
    78c2:	f009 f814 	bl	108ee <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3ce>
    78c6:	68e0      	ldr	r0, [r4, #12]
    78c8:	f009 f811 	bl	108ee <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3ce>
    78cc:	f008 fe1b 	bl	10506 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>
    78d0:	2000      	movs	r0, #0
    78d2:	7020      	strb	r0, [r4, #0]
    78d4:	bd10      	pop	{r4, pc}
    78d6:	0000      	.short	0x0000
    78d8:	20000284 	.word	0x20000284

000078dc <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>:
    78dc:	b510      	push	{r4, lr}
    78de:	4905      	ldr	r1, [pc, #20]	; (78f4 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x18>)
    78e0:	4805      	ldr	r0, [pc, #20]	; (78f8 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
    78e2:	f008 fff7 	bl	108d4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3b4>
    78e6:	4804      	ldr	r0, [pc, #16]	; (78f8 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
    78e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    78ec:	4903      	ldr	r1, [pc, #12]	; (78fc <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x20>)
    78ee:	1d00      	adds	r0, r0, #4
    78f0:	f008 bff0 	b.w	108d4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3b4>
    78f4:	20000294 	.word	0x20000294
    78f8:	20000288 	.word	0x20000288
    78fc:	2000029c 	.word	0x2000029c

00007900 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA>:
    7900:	b510      	push	{r4, lr}
    7902:	4908      	ldr	r1, [pc, #32]	; (7924 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x24>)
    7904:	4808      	ldr	r0, [pc, #32]	; (7928 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    7906:	f008 ffe5 	bl	108d4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3b4>
    790a:	4807      	ldr	r0, [pc, #28]	; (7928 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    790c:	4907      	ldr	r1, [pc, #28]	; (792c <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x2c>)
    790e:	1d00      	adds	r0, r0, #4
    7910:	f008 ffe0 	bl	108d4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3b4>
    7914:	4804      	ldr	r0, [pc, #16]	; (7928 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    7916:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    791a:	4905      	ldr	r1, [pc, #20]	; (7930 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x30>)
    791c:	3008      	adds	r0, #8
    791e:	f008 bfd9 	b.w	108d4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3b4>
    7922:	0000      	.short	0x0000
    7924:	200002ac 	.word	0x200002ac
    7928:	20000288 	.word	0x20000288
    792c:	200002b4 	.word	0x200002b4
    7930:	200002a4 	.word	0x200002a4

00007934 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>:
    7934:	4801      	ldr	r0, [pc, #4]	; (793c <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x8>)
    7936:	7840      	ldrb	r0, [r0, #1]
    7938:	4770      	bx	lr
    793a:	0000      	.short	0x0000
    793c:	20000284 	.word	0x20000284
    7940:	b510      	push	{r4, lr}
    7942:	f7fc fa41 	bl	3dc8 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>
    7946:	f7fd f8eb 	bl	4b20 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ>
    794a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    794e:	4801      	ldr	r0, [pc, #4]	; (7954 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x20>)
    7950:	f7fc ba20 	b.w	3d94 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>
    7954:	200012a9 	.word	0x200012a9
    7958:	490a      	ldr	r1, [pc, #40]	; (7984 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x50>)
    795a:	b510      	push	{r4, lr}
    795c:	2001      	movs	r0, #1
    795e:	7048      	strb	r0, [r1, #1]
    7960:	f7fc fa62 	bl	3e28 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY>
    7964:	f7fd fdb8 	bl	54d8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA>
    7968:	f006 f948 	bl	dbfc <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>
    796c:	4906      	ldr	r1, [pc, #24]	; (7988 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x54>)
    796e:	f5a1 7081 	sub.w	r0, r1, #258	; 0x102
    7972:	f7fa fc2f 	bl	21d4 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>
    7976:	2000      	movs	r0, #0
    7978:	f005 ff70 	bl	d85c <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
    797c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7980:	f7fb bdb2 	b.w	34e8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q>
    7984:	20000284 	.word	0x20000284
    7988:	200013ab 	.word	0x200013ab

0000798c <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>:
    798c:	4a04      	ldr	r2, [pc, #16]	; (79a0 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY+0x14>)
    798e:	08c1      	lsrs	r1, r0, #3
    7990:	f000 0307 	and.w	r3, r0, #7
    7994:	2001      	movs	r0, #1
    7996:	4098      	lsls	r0, r3
    7998:	5c53      	ldrb	r3, [r2, r1]
    799a:	4303      	orrs	r3, r0
    799c:	5453      	strb	r3, [r2, r1]
    799e:	4770      	bx	lr
    79a0:	20000020 	.word	0x20000020

000079a4 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>:
    79a4:	4901      	ldr	r1, [pc, #4]	; (79ac <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ+0x8>)
    79a6:	e9d1 0100 	ldrd	r0, r1, [r1]
    79aa:	4770      	bx	lr
    79ac:	20000020 	.word	0x20000020

000079b0 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>:
    79b0:	4806      	ldr	r0, [pc, #24]	; (79cc <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ+0x1c>)
    79b2:	8801      	ldrh	r1, [r0, #0]
    79b4:	7900      	ldrb	r0, [r0, #4]
    79b6:	0602      	lsls	r2, r0, #24
    79b8:	ea42 2011 	orr.w	r0, r2, r1, lsr #8
    79bc:	f000 0001 	and.w	r0, r0, #1
    79c0:	1800      	adds	r0, r0, r0
    79c2:	b2c0      	uxtb	r0, r0
    79c4:	f040 0001 	orr.w	r0, r0, #1
    79c8:	4770      	bx	lr
    79ca:	0000      	.short	0x0000
    79cc:	20000020 	.word	0x20000020

000079d0 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>:
    79d0:	b510      	push	{r4, lr}
    79d2:	f004 fc97 	bl	c304 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    79d6:	2200      	movs	r2, #0
    79d8:	4b08      	ldr	r3, [pc, #32]	; (79fc <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x2c>)
    79da:	4611      	mov	r1, r2
    79dc:	f833 4021 	ldrh.w	r4, [r3, r1, lsl #2]
    79e0:	4284      	cmp	r4, r0
    79e2:	d303      	bcc.n	79ec <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x1c>
    79e4:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    79e8:	7882      	ldrb	r2, [r0, #2]
    79ea:	e003      	b.n	79f4 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x24>
    79ec:	1c49      	adds	r1, r1, #1
    79ee:	b2c9      	uxtb	r1, r1
    79f0:	290c      	cmp	r1, #12
    79f2:	d3f3      	bcc.n	79dc <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0xc>
    79f4:	4802      	ldr	r0, [pc, #8]	; (7a00 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x30>)
    79f6:	7002      	strb	r2, [r0, #0]
    79f8:	bd10      	pop	{r4, pc}
    79fa:	0000      	.short	0x0000
    79fc:	00010940 	.word	0x00010940
    7a00:	2000036f 	.word	0x2000036f

00007a04 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>:
    7a04:	b570      	push	{r4, r5, r6, lr}
    7a06:	4605      	mov	r5, r0
    7a08:	4616      	mov	r6, r2
    7a0a:	460c      	mov	r4, r1
    7a0c:	2002      	movs	r0, #2
    7a0e:	f000 f9b7 	bl	7d80 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    7a12:	4906      	ldr	r1, [pc, #24]	; (7a2c <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x28>)
    7a14:	2001      	movs	r0, #1
    7a16:	1ef6      	subs	r6, r6, #3
    7a18:	7008      	strb	r0, [r1, #0]
    7a1a:	4805      	ldr	r0, [pc, #20]	; (7a30 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    7a1c:	6006      	str	r6, [r0, #0]
    7a1e:	4804      	ldr	r0, [pc, #16]	; (7a30 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    7a20:	3808      	subs	r0, #8
    7a22:	6005      	str	r5, [r0, #0]
    7a24:	1f00      	subs	r0, r0, #4
    7a26:	6004      	str	r4, [r0, #0]
    7a28:	bd70      	pop	{r4, r5, r6, pc}
    7a2a:	0000      	.short	0x0000
    7a2c:	20000370 	.word	0x20000370
    7a30:	4000f510 	.word	0x4000f510

00007a34 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>:
    7a34:	b510      	push	{r4, lr}
    7a36:	4c0c      	ldr	r4, [pc, #48]	; (7a68 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x34>)
    7a38:	7820      	ldrb	r0, [r4, #0]
    7a3a:	b180      	cbz	r0, 7a5e <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x2a>
    7a3c:	490b      	ldr	r1, [pc, #44]	; (7a6c <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x38>)
    7a3e:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    7a42:	6008      	str	r0, [r1, #0]
    7a44:	f000 f86a 	bl	7b1c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    7a48:	2100      	movs	r1, #0
    7a4a:	b120      	cbz	r0, 7a56 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x22>
    7a4c:	2001      	movs	r0, #1
    7a4e:	7060      	strb	r0, [r4, #1]
    7a50:	4807      	ldr	r0, [pc, #28]	; (7a70 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x3c>)
    7a52:	6800      	ldr	r0, [r0, #0]
    7a54:	e001      	b.n	7a5a <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x26>
    7a56:	7061      	strb	r1, [r4, #1]
    7a58:	2010      	movs	r0, #16
    7a5a:	70a0      	strb	r0, [r4, #2]
    7a5c:	7021      	strb	r1, [r4, #0]
    7a5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7a62:	2000      	movs	r0, #0
    7a64:	f000 b98c 	b.w	7d80 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    7a68:	20000370 	.word	0x20000370
    7a6c:	4001f508 	.word	0x4001f508
    7a70:	4000f400 	.word	0x4000f400

00007a74 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>:
    7a74:	b510      	push	{r4, lr}
    7a76:	2002      	movs	r0, #2
    7a78:	f000 f982 	bl	7d80 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    7a7c:	4904      	ldr	r1, [pc, #16]	; (7a90 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x1c>)
    7a7e:	2001      	movs	r0, #1
    7a80:	7008      	strb	r0, [r1, #0]
    7a82:	f000 f859 	bl	7b38 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x64>
    7a86:	4903      	ldr	r1, [pc, #12]	; (7a94 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x20>)
    7a88:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    7a8c:	6008      	str	r0, [r1, #0]
    7a8e:	bd10      	pop	{r4, pc}
    7a90:	20000370 	.word	0x20000370
    7a94:	4001f504 	.word	0x4001f504

00007a98 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>:
    7a98:	4803      	ldr	r0, [pc, #12]	; (7aa8 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA+0x10>)
    7a9a:	2100      	movs	r1, #0
    7a9c:	7001      	strb	r1, [r0, #0]
    7a9e:	7041      	strb	r1, [r0, #1]
    7aa0:	2110      	movs	r1, #16
    7aa2:	7081      	strb	r1, [r0, #2]
    7aa4:	4770      	bx	lr
    7aa6:	0000      	.short	0x0000
    7aa8:	20000370 	.word	0x20000370

00007aac <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>:
    7aac:	4807      	ldr	r0, [pc, #28]	; (7acc <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x20>)
    7aae:	b510      	push	{r4, lr}
    7ab0:	7801      	ldrb	r1, [r0, #0]
    7ab2:	b141      	cbz	r1, 7ac6 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x1a>
    7ab4:	f000 f832 	bl	7b1c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    7ab8:	b118      	cbz	r0, 7ac2 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x16>
    7aba:	4805      	ldr	r0, [pc, #20]	; (7ad0 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x24>)
    7abc:	6800      	ldr	r0, [r0, #0]
    7abe:	b2c0      	uxtb	r0, r0
    7ac0:	bd10      	pop	{r4, pc}
    7ac2:	2010      	movs	r0, #16
    7ac4:	bd10      	pop	{r4, pc}
    7ac6:	7880      	ldrb	r0, [r0, #2]
    7ac8:	bd10      	pop	{r4, pc}
    7aca:	0000      	.short	0x0000
    7acc:	20000370 	.word	0x20000370
    7ad0:	4000f400 	.word	0x4000f400

00007ad4 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>:
    7ad4:	4808      	ldr	r0, [pc, #32]	; (7af8 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x24>)
    7ad6:	b510      	push	{r4, lr}
    7ad8:	7801      	ldrb	r1, [r0, #0]
    7ada:	b159      	cbz	r1, 7af4 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x20>
    7adc:	4807      	ldr	r0, [pc, #28]	; (7afc <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x28>)
    7ade:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    7ae2:	b128      	cbz	r0, 7af0 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1c>
    7ae4:	f000 f80c 	bl	7b00 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    7ae8:	2800      	cmp	r0, #0
    7aea:	d000      	beq.n	7aee <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1a>
    7aec:	2001      	movs	r0, #1
    7aee:	bd10      	pop	{r4, pc}
    7af0:	2002      	movs	r0, #2
    7af2:	bd10      	pop	{r4, pc}
    7af4:	7840      	ldrb	r0, [r0, #1]
    7af6:	bd10      	pop	{r4, pc}
    7af8:	20000370 	.word	0x20000370
    7afc:	4000f000 	.word	0x4000f000
    7b00:	4805      	ldr	r0, [pc, #20]	; (7b18 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x44>)
    7b02:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
    7b06:	b111      	cbz	r1, 7b0e <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3a>
    7b08:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
    7b0c:	b108      	cbz	r0, 7b12 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3e>
    7b0e:	2000      	movs	r0, #0
    7b10:	4770      	bx	lr
    7b12:	2001      	movs	r0, #1
    7b14:	4770      	bx	lr
    7b16:	0000      	.short	0x0000
    7b18:	4000f000 	.word	0x4000f000
    7b1c:	4805      	ldr	r0, [pc, #20]	; (7b34 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x60>)
    7b1e:	b510      	push	{r4, lr}
    7b20:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    7b24:	b120      	cbz	r0, 7b30 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    7b26:	f7ff ffeb 	bl	7b00 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    7b2a:	b108      	cbz	r0, 7b30 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    7b2c:	2001      	movs	r0, #1
    7b2e:	bd10      	pop	{r4, pc}
    7b30:	2000      	movs	r0, #0
    7b32:	bd10      	pop	{r4, pc}
    7b34:	4000f000 	.word	0x4000f000
    7b38:	4804      	ldr	r0, [pc, #16]	; (7b4c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x78>)
    7b3a:	2100      	movs	r1, #0
    7b3c:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    7b40:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    7b44:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    7b48:	4770      	bx	lr
    7b4a:	0000      	.short	0x0000
    7b4c:	4000f000 	.word	0x4000f000

00007b50 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>:
    7b50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7b54:	4604      	mov	r4, r0
    7b56:	461e      	mov	r6, r3
    7b58:	4690      	mov	r8, r2
    7b5a:	460f      	mov	r7, r1
    7b5c:	2001      	movs	r0, #1
    7b5e:	f000 f90f 	bl	7d80 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    7b62:	4d1e      	ldr	r5, [pc, #120]	; (7bdc <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x8c>)
    7b64:	481e      	ldr	r0, [pc, #120]	; (7be0 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x90>)
    7b66:	f004 0103 	and.w	r1, r4, #3
    7b6a:	712e      	strb	r6, [r5, #4]
    7b6c:	6800      	ldr	r0, [r0, #0]
    7b6e:	0432      	lsls	r2, r6, #16
    7b70:	f361 0007 	bfi	r0, r1, #0, #8
    7b74:	f366 200f 	bfi	r0, r6, #8, #8
    7b78:	0c00      	lsrs	r0, r0, #16
    7b7a:	4e1a      	ldr	r6, [pc, #104]	; (7be4 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x94>)
    7b7c:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
    7b80:	4308      	orrs	r0, r1
    7b82:	f8c6 0504 	str.w	r0, [r6, #1284]	; 0x504
    7b86:	4818      	ldr	r0, [pc, #96]	; (7be8 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x98>)
    7b88:	6007      	str	r7, [r0, #0]
    7b8a:	f009 f8d0 	bl	10d2e <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    7b8e:	b938      	cbnz	r0, 7ba0 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x50>
    7b90:	4815      	ldr	r0, [pc, #84]	; (7be8 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x98>)
    7b92:	3010      	adds	r0, #16
    7b94:	6801      	ldr	r1, [r0, #0]
    7b96:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
    7b9a:	ea41 0108 	orr.w	r1, r1, r8
    7b9e:	6001      	str	r1, [r0, #0]
    7ba0:	f000 f8e4 	bl	7d6c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x80>
    7ba4:	b10c      	cbz	r4, 7baa <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x5a>
    7ba6:	2c04      	cmp	r4, #4
    7ba8:	d107      	bne.n	7bba <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x6a>
    7baa:	4811      	ldr	r0, [pc, #68]	; (7bf0 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0xa0>)
    7bac:	490d      	ldr	r1, [pc, #52]	; (7be4 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x94>)
    7bae:	4a0f      	ldr	r2, [pc, #60]	; (7bec <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x9c>)
    7bb0:	1d09      	adds	r1, r1, #4
    7bb2:	f8c0 2510 	str.w	r2, [r0, #1296]	; 0x510
    7bb6:	f8c0 1514 	str.w	r1, [r0, #1300]	; 0x514
    7bba:	2001      	movs	r0, #1
    7bbc:	7068      	strb	r0, [r5, #1]
    7bbe:	70ec      	strb	r4, [r5, #3]
    7bc0:	b11c      	cbz	r4, 7bca <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x7a>
    7bc2:	2c01      	cmp	r4, #1
    7bc4:	d001      	beq.n	7bca <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x7a>
    7bc6:	2c02      	cmp	r4, #2
    7bc8:	d106      	bne.n	7bd8 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x88>
    7bca:	7028      	strb	r0, [r5, #0]
    7bcc:	2100      	movs	r1, #0
    7bce:	f8c6 1100 	str.w	r1, [r6, #256]	; 0x100
    7bd2:	f8c6 1200 	str.w	r1, [r6, #512]	; 0x200
    7bd6:	6030      	str	r0, [r6, #0]
    7bd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7bdc:	20000373 	.word	0x20000373
    7be0:	00007d7c 	.word	0x00007d7c
    7be4:	4000f000 	.word	0x4000f000
    7be8:	4000f508 	.word	0x4000f508
    7bec:	4000f100 	.word	0x4000f100
    7bf0:	4001f088 	.word	0x4001f088

00007bf4 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA>:
    7bf4:	b570      	push	{r4, r5, r6, lr}
    7bf6:	4a1c      	ldr	r2, [pc, #112]	; (7c68 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x74>)
    7bf8:	7853      	ldrb	r3, [r2, #1]
    7bfa:	b1a3      	cbz	r3, 7c26 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x32>
    7bfc:	4b1b      	ldr	r3, [pc, #108]	; (7c6c <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x78>)
    7bfe:	6019      	str	r1, [r3, #0]
    7c00:	1d19      	adds	r1, r3, #4
    7c02:	6008      	str	r0, [r1, #0]
    7c04:	2501      	movs	r5, #1
    7c06:	7095      	strb	r5, [r2, #2]
    7c08:	4610      	mov	r0, r2
    7c0a:	78d6      	ldrb	r6, [r2, #3]
    7c0c:	4b18      	ldr	r3, [pc, #96]	; (7c70 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x7c>)
    7c0e:	7800      	ldrb	r0, [r0, #0]
    7c10:	4c18      	ldr	r4, [pc, #96]	; (7c74 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x80>)
    7c12:	2100      	movs	r1, #0
    7c14:	b156      	cbz	r6, 7c2c <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x38>
    7c16:	2e04      	cmp	r6, #4
    7c18:	d01b      	beq.n	7c52 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x5e>
    7c1a:	b308      	cbz	r0, 7c60 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x6c>
    7c1c:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
    7c20:	0668      	lsls	r0, r5, #25
    7c22:	6018      	str	r0, [r3, #0]
    7c24:	bd70      	pop	{r4, r5, r6, pc}
    7c26:	f240 11bd 	movw	r1, #445	; 0x1bd
    7c2a:	e01a      	b.n	7c62 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x6e>
    7c2c:	b178      	cbz	r0, 7c4e <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x5a>
    7c2e:	4620      	mov	r0, r4
    7c30:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
    7c34:	f44f 3600 	mov.w	r6, #131072	; 0x20000
    7c38:	601e      	str	r6, [r3, #0]
    7c3a:	1271      	asrs	r1, r6, #9
    7c3c:	f008 fef8 	bl	10a30 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    7c40:	2800      	cmp	r0, #0
    7c42:	d0ef      	beq.n	7c24 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x30>
    7c44:	6065      	str	r5, [r4, #4]
    7c46:	480a      	ldr	r0, [pc, #40]	; (7c70 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x7c>)
    7c48:	1d00      	adds	r0, r0, #4
    7c4a:	6006      	str	r6, [r0, #0]
    7c4c:	bd70      	pop	{r4, r5, r6, pc}
    7c4e:	21b3      	movs	r1, #179	; 0xb3
    7c50:	e007      	b.n	7c62 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x6e>
    7c52:	7015      	strb	r5, [r2, #0]
    7c54:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
    7c58:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
    7c5c:	6025      	str	r5, [r4, #0]
    7c5e:	bd70      	pop	{r4, r5, r6, pc}
    7c60:	21c6      	movs	r1, #198	; 0xc6
    7c62:	203c      	movs	r0, #60	; 0x3c
    7c64:	f7f9 fbca 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7c68:	20000373 	.word	0x20000373
    7c6c:	4000f50c 	.word	0x4000f50c
    7c70:	4001f504 	.word	0x4001f504
    7c74:	4000f000 	.word	0x4000f000

00007c78 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>:
    7c78:	b570      	push	{r4, r5, r6, lr}
    7c7a:	4d05      	ldr	r5, [pc, #20]	; (7c90 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x18>)
    7c7c:	2400      	movs	r4, #0
    7c7e:	7828      	ldrb	r0, [r5, #0]
    7c80:	b110      	cbz	r0, 7c88 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x10>
    7c82:	f000 f873 	bl	7d6c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x80>
    7c86:	702c      	strb	r4, [r5, #0]
    7c88:	706c      	strb	r4, [r5, #1]
    7c8a:	70ac      	strb	r4, [r5, #2]
    7c8c:	bd70      	pop	{r4, r5, r6, pc}
    7c8e:	0000      	.short	0x0000
    7c90:	20000373 	.word	0x20000373

00007c94 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>:
    7c94:	4802      	ldr	r0, [pc, #8]	; (7ca0 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY+0xc>)
    7c96:	2100      	movs	r1, #0
    7c98:	7001      	strb	r1, [r0, #0]
    7c9a:	7041      	strb	r1, [r0, #1]
    7c9c:	7081      	strb	r1, [r0, #2]
    7c9e:	4770      	bx	lr
    7ca0:	20000373 	.word	0x20000373

00007ca4 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>:
    7ca4:	480b      	ldr	r0, [pc, #44]	; (7cd4 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x30>)
    7ca6:	b510      	push	{r4, lr}
    7ca8:	7800      	ldrb	r0, [r0, #0]
    7caa:	b158      	cbz	r0, 7cc4 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x20>
    7cac:	f44f 7182 	mov.w	r1, #260	; 0x104
    7cb0:	4809      	ldr	r0, [pc, #36]	; (7cd8 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x34>)
    7cb2:	f008 febd 	bl	10a30 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    7cb6:	b140      	cbz	r0, 7cca <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x26>
    7cb8:	4808      	ldr	r0, [pc, #32]	; (7cdc <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x38>)
    7cba:	6800      	ldr	r0, [r0, #0]
    7cbc:	2800      	cmp	r0, #0
    7cbe:	d000      	beq.n	7cc2 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x1e>
    7cc0:	2001      	movs	r0, #1
    7cc2:	bd10      	pop	{r4, pc}
    7cc4:	f240 2123 	movw	r1, #547	; 0x223
    7cc8:	e001      	b.n	7cce <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x2a>
    7cca:	f44f 7109 	mov.w	r1, #548	; 0x224
    7cce:	203c      	movs	r0, #60	; 0x3c
    7cd0:	f7f9 fb94 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7cd4:	20000373 	.word	0x20000373
    7cd8:	4000f000 	.word	0x4000f000
    7cdc:	4000f400 	.word	0x4000f400

00007ce0 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>:
    7ce0:	4801      	ldr	r0, [pc, #4]	; (7ce8 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA+0x8>)
    7ce2:	2101      	movs	r1, #1
    7ce4:	6081      	str	r1, [r0, #8]
    7ce6:	4770      	bx	lr
    7ce8:	4000f000 	.word	0x4000f000

00007cec <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>:
    7cec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7cf0:	481b      	ldr	r0, [pc, #108]	; (7d60 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x74>)
    7cf2:	7800      	ldrb	r0, [r0, #0]
    7cf4:	b1d8      	cbz	r0, 7d2e <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x42>
    7cf6:	f8df 806c 	ldr.w	r8, [pc, #108]	; 7d64 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x78>
    7cfa:	f44f 7682 	mov.w	r6, #260	; 0x104
    7cfe:	4631      	mov	r1, r6
    7d00:	4640      	mov	r0, r8
    7d02:	f008 fe95 	bl	10a30 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    7d06:	2800      	cmp	r0, #0
    7d08:	d128      	bne.n	7d5c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x70>
    7d0a:	2002      	movs	r0, #2
    7d0c:	f8c8 0304 	str.w	r0, [r8, #772]	; 0x304
    7d10:	4c15      	ldr	r4, [pc, #84]	; (7d68 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x7c>)
    7d12:	6820      	ldr	r0, [r4, #0]
    7d14:	43c0      	mvns	r0, r0
    7d16:	f340 1500 	sbfx	r5, r0, #4, #1
    7d1a:	6820      	ldr	r0, [r4, #0]
    7d1c:	f040 0010 	orr.w	r0, r0, #16
    7d20:	6020      	str	r0, [r4, #0]
    7d22:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    7d26:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    7d2a:	1c6d      	adds	r5, r5, #1
    7d2c:	e008      	b.n	7d40 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x54>
    7d2e:	f240 212f 	movw	r1, #559	; 0x22f
    7d32:	203c      	movs	r0, #60	; 0x3c
    7d34:	f7f9 fb62 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7d38:	f8c9 7280 	str.w	r7, [r9, #640]	; 0x280
    7d3c:	f009 f837 	bl	10dae <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    7d40:	4631      	mov	r1, r6
    7d42:	4640      	mov	r0, r8
    7d44:	f008 fe74 	bl	10a30 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    7d48:	2800      	cmp	r0, #0
    7d4a:	d0f5      	beq.n	7d38 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x4c>
    7d4c:	b91d      	cbnz	r5, 7d56 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x6a>
    7d4e:	6820      	ldr	r0, [r4, #0]
    7d50:	f020 0010 	bic.w	r0, r0, #16
    7d54:	6020      	str	r0, [r4, #0]
    7d56:	2002      	movs	r0, #2
    7d58:	f8c8 0308 	str.w	r0, [r8, #776]	; 0x308
    7d5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7d60:	20000373 	.word	0x20000373
    7d64:	4000f000 	.word	0x4000f000
    7d68:	e000ed10 	.word	0xe000ed10
    7d6c:	4902      	ldr	r1, [pc, #8]	; (7d78 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x8c>)
    7d6e:	4801      	ldr	r0, [pc, #4]	; (7d74 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x88>)
    7d70:	6008      	str	r0, [r1, #0]
    7d72:	4770      	bx	lr
    7d74:	02020000 	.word	0x02020000
    7d78:	4001f508 	.word	0x4001f508
    7d7c:	00010000 	.word	0x00010000

00007d80 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>:
    7d80:	b510      	push	{r4, lr}
    7d82:	4604      	mov	r4, r0
    7d84:	f000 f820 	bl	7dc8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>
    7d88:	2c00      	cmp	r4, #0
    7d8a:	d00e      	beq.n	7daa <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x2a>
    7d8c:	4a0b      	ldr	r2, [pc, #44]	; (7dbc <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>)
    7d8e:	480b      	ldr	r0, [pc, #44]	; (7dbc <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>)
    7d90:	490b      	ldr	r1, [pc, #44]	; (7dc0 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x40>)
    7d92:	3214      	adds	r2, #20
    7d94:	2c01      	cmp	r4, #1
    7d96:	d005      	beq.n	7da4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x24>
    7d98:	2c02      	cmp	r4, #2
    7d9a:	d007      	beq.n	7dac <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x2c>
    7d9c:	2182      	movs	r1, #130	; 0x82
    7d9e:	203d      	movs	r0, #61	; 0x3d
    7da0:	f7f9 fb2c 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7da4:	2302      	movs	r3, #2
    7da6:	6003      	str	r3, [r0, #0]
    7da8:	6011      	str	r1, [r2, #0]
    7daa:	bd10      	pop	{r4, pc}
    7dac:	2303      	movs	r3, #3
    7dae:	6003      	str	r3, [r0, #0]
    7db0:	6011      	str	r1, [r2, #0]
    7db2:	4904      	ldr	r1, [pc, #16]	; (7dc4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x44>)
    7db4:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    7db8:	6008      	str	r0, [r1, #0]
    7dba:	bd10      	pop	{r4, pc}
    7dbc:	4000f500 	.word	0x4000f500
    7dc0:	200014ad 	.word	0x200014ad
    7dc4:	4001f504 	.word	0x4001f504
    7dc8:	4805      	ldr	r0, [pc, #20]	; (7de0 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x60>)
    7dca:	b510      	push	{r4, lr}
    7dcc:	2100      	movs	r1, #0
    7dce:	6001      	str	r1, [r0, #0]
    7dd0:	6001      	str	r1, [r0, #0]
    7dd2:	f7ff ff51 	bl	7c78 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    7dd6:	4903      	ldr	r1, [pc, #12]	; (7de4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x64>)
    7dd8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    7ddc:	6008      	str	r0, [r1, #0]
    7dde:	bd10      	pop	{r4, pc}
    7de0:	4000f500 	.word	0x4000f500
    7de4:	4001f508 	.word	0x4001f508

00007de8 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>:
    7de8:	4805      	ldr	r0, [pc, #20]	; (7e00 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y+0x18>)
    7dea:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    7dee:	f021 0140 	bic.w	r1, r1, #64	; 0x40
    7df2:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    7df6:	2100      	movs	r1, #0
    7df8:	f8c0 1560 	str.w	r1, [r0, #1376]	; 0x560
    7dfc:	4770      	bx	lr
    7dfe:	0000      	.short	0x0000
    7e00:	40001000 	.word	0x40001000

00007e04 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>:
    7e04:	4904      	ldr	r1, [pc, #16]	; (7e18 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY+0x14>)
    7e06:	f8c1 0560 	str.w	r0, [r1, #1376]	; 0x560
    7e0a:	f8d1 0200 	ldr.w	r0, [r1, #512]	; 0x200
    7e0e:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    7e12:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    7e16:	4770      	bx	lr
    7e18:	40001000 	.word	0x40001000

00007e1c <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I>:
    7e1c:	4801      	ldr	r0, [pc, #4]	; (7e24 <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I+0x8>)
    7e1e:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    7e22:	4770      	bx	lr
    7e24:	20000bf4 	.word	0x20000bf4

00007e28 <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I>:
    7e28:	4902      	ldr	r1, [pc, #8]	; (7e34 <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I+0xc>)
    7e2a:	5c08      	ldrb	r0, [r1, r0]
    7e2c:	f500 6016 	add.w	r0, r0, #2400	; 0x960
    7e30:	4770      	bx	lr
    7e32:	0000      	.short	0x0000
    7e34:	00008b7e 	.word	0x00008b7e

00007e38 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>:
    7e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7e3a:	4c24      	ldr	r4, [pc, #144]	; (7ecc <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x94>)
    7e3c:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    7e40:	f010 0f10 	tst.w	r0, #16
    7e44:	d001      	beq.n	7e4a <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x12>
    7e46:	2701      	movs	r7, #1
    7e48:	e000      	b.n	7e4c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x14>
    7e4a:	2700      	movs	r7, #0
    7e4c:	2010      	movs	r0, #16
    7e4e:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    7e52:	2002      	movs	r0, #2
    7e54:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    7e58:	481d      	ldr	r0, [pc, #116]	; (7ed0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x98>)
    7e5a:	2500      	movs	r5, #0
    7e5c:	491d      	ldr	r1, [pc, #116]	; (7ed4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x9c>)
    7e5e:	f880 502c 	strb.w	r5, [r0, #44]	; 0x2c
    7e62:	f44f 2060 	mov.w	r0, #917504	; 0xe0000
    7e66:	6008      	str	r0, [r1, #0]
    7e68:	f8d4 0550 	ldr.w	r0, [r4, #1360]	; 0x550
    7e6c:	f44f 7688 	mov.w	r6, #272	; 0x110
    7e70:	f010 0fff 	tst.w	r0, #255	; 0xff
    7e74:	d019      	beq.n	7eaa <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x72>
    7e76:	20ff      	movs	r0, #255	; 0xff
    7e78:	f88d 0000 	strb.w	r0, [sp]
    7e7c:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    7e80:	2001      	movs	r0, #1
    7e82:	6120      	str	r0, [r4, #16]
    7e84:	e005      	b.n	7e92 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x5a>
    7e86:	bf00      	nop
    7e88:	f89d 0000 	ldrb.w	r0, [sp]
    7e8c:	1e40      	subs	r0, r0, #1
    7e8e:	f88d 0000 	strb.w	r0, [sp]
    7e92:	f89d 0000 	ldrb.w	r0, [sp]
    7e96:	b128      	cbz	r0, 7ea4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x6c>
    7e98:	4631      	mov	r1, r6
    7e9a:	4620      	mov	r0, r4
    7e9c:	f008 fdf7 	bl	10a8e <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    7ea0:	2800      	cmp	r0, #0
    7ea2:	d0f1      	beq.n	7e88 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x50>
    7ea4:	f89d 0000 	ldrb.w	r0, [sp]
    7ea8:	b158      	cbz	r0, 7ec2 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x8a>
    7eaa:	f000 fc57 	bl	875c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x90>
    7eae:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    7eb2:	f000 fde5 	bl	8a80 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b4>
    7eb6:	2f00      	cmp	r7, #0
    7eb8:	d002      	beq.n	7ec0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x88>
    7eba:	2010      	movs	r0, #16
    7ebc:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    7ec0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7ec2:	f640 01aa 	movw	r1, #2218	; 0x8aa
    7ec6:	203e      	movs	r0, #62	; 0x3e
    7ec8:	f7f9 fa98 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7ecc:	40001000 	.word	0x40001000
    7ed0:	20000bf4 	.word	0x20000bf4
    7ed4:	4001f508 	.word	0x4001f508

00007ed8 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>:
    7ed8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7edc:	4d18      	ldr	r5, [pc, #96]	; (7f40 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x68>)
    7ede:	4607      	mov	r7, r0
    7ee0:	f895 002c 	ldrb.w	r0, [r5, #44]	; 0x2c
    7ee4:	07c2      	lsls	r2, r0, #31
    7ee6:	d00f      	beq.n	7f08 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x30>
    7ee8:	4c16      	ldr	r4, [pc, #88]	; (7f44 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x6c>)
    7eea:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
    7eee:	f042 0201 	orr.w	r2, r2, #1
    7ef2:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
    7ef6:	f040 0002 	orr.w	r0, r0, #2
    7efa:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
    7efe:	2601      	movs	r6, #1
    7f00:	b13f      	cbz	r7, 7f12 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x3a>
    7f02:	2f01      	cmp	r7, #1
    7f04:	d00b      	beq.n	7f1e <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x46>
    7f06:	e010      	b.n	7f2a <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x52>
    7f08:	f240 7185 	movw	r1, #1925	; 0x785
    7f0c:	203e      	movs	r0, #62	; 0x3e
    7f0e:	f7f9 fa75 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7f12:	4608      	mov	r0, r1
    7f14:	f000 fe0e 	bl	8b34 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x468>
    7f18:	726e      	strb	r6, [r5, #9]
    7f1a:	6026      	str	r6, [r4, #0]
    7f1c:	e005      	b.n	7f2a <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x52>
    7f1e:	4608      	mov	r0, r1
    7f20:	f000 fdee 	bl	8b00 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x434>
    7f24:	2002      	movs	r0, #2
    7f26:	7268      	strb	r0, [r5, #9]
    7f28:	6066      	str	r6, [r4, #4]
    7f2a:	4807      	ldr	r0, [pc, #28]	; (7f48 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x70>)
    7f2c:	64c6      	str	r6, [r0, #76]	; 0x4c
    7f2e:	4806      	ldr	r0, [pc, #24]	; (7f48 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x70>)
    7f30:	300c      	adds	r0, #12
    7f32:	f8d0 1540 	ldr.w	r1, [r0, #1344]	; 0x540
    7f36:	4638      	mov	r0, r7
    7f38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7f3c:	f000 bd72 	b.w	8a24 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x358>
    7f40:	20000bf4 	.word	0x20000bf4
    7f44:	40001000 	.word	0x40001000
    7f48:	40008000 	.word	0x40008000

00007f4c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>:
    7f4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7f50:	4c2c      	ldr	r4, [pc, #176]	; (8004 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4>)
    7f52:	0006      	movs	r6, r0
    7f54:	4d2c      	ldr	r5, [pc, #176]	; (8008 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8>)
    7f56:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    7f5a:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 800c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc>
    7f5e:	f040 0002 	orr.w	r0, r0, #2
    7f62:	4689      	mov	r9, r1
    7f64:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    7f68:	f04f 0700 	mov.w	r7, #0
    7f6c:	d002      	beq.n	7f74 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x28>
    7f6e:	2e01      	cmp	r6, #1
    7f70:	d020      	beq.n	7fb4 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x68>
    7f72:	e036      	b.n	7fe2 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x96>
    7f74:	4608      	mov	r0, r1
    7f76:	f000 fddd 	bl	8b34 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x468>
    7f7a:	2001      	movs	r0, #1
    7f7c:	7260      	strb	r0, [r4, #9]
    7f7e:	79e0      	ldrb	r0, [r4, #7]
    7f80:	2801      	cmp	r0, #1
    7f82:	d105      	bne.n	7f90 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x44>
    7f84:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
    7f88:	f040 0008 	orr.w	r0, r0, #8
    7f8c:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    7f90:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    7f92:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
    7f96:	62a0      	str	r0, [r4, #40]	; 0x28
    7f98:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    7f9c:	f8c8 0000 	str.w	r0, [r8]
    7fa0:	491b      	ldr	r1, [pc, #108]	; (8010 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x10>)
    7fa2:	f831 0019 	ldrh.w	r0, [r1, r9, lsl #1]
    7fa6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    7faa:	f500 70fa 	add.w	r0, r0, #500	; 0x1f4
    7fae:	fbb0 f7f1 	udiv	r7, r0, r1
    7fb2:	e016      	b.n	7fe2 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x96>
    7fb4:	4608      	mov	r0, r1
    7fb6:	f000 fda3 	bl	8b00 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x434>
    7fba:	2002      	movs	r0, #2
    7fbc:	7260      	strb	r0, [r4, #9]
    7fbe:	79e0      	ldrb	r0, [r4, #7]
    7fc0:	2801      	cmp	r0, #1
    7fc2:	d105      	bne.n	7fd0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x84>
    7fc4:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
    7fc8:	f040 0004 	orr.w	r0, r0, #4
    7fcc:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    7fd0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    7fd2:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
    7fd6:	62a0      	str	r0, [r4, #40]	; 0x28
    7fd8:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
    7fdc:	f8c8 0000 	str.w	r0, [r8]
    7fe0:	2729      	movs	r7, #41	; 0x29
    7fe2:	f000 fc27 	bl	8834 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x168>
    7fe6:	f008 fd9a 	bl	10b1e <sym_F77FUTRRLLWPYDS7BBANG2WE3C4EDMYMAPNI54A>
    7fea:	b120      	cbz	r0, 7ff6 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xaa>
    7fec:	f7ff ff24 	bl	7e38 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    7ff0:	2000      	movs	r0, #0
    7ff2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7ff6:	2100      	movs	r1, #0
    7ff8:	4630      	mov	r0, r6
    7ffa:	f000 fd13 	bl	8a24 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x358>
    7ffe:	4638      	mov	r0, r7
    8000:	e7f7      	b.n	7ff2 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xa6>
    8002:	0000      	.short	0x0000
    8004:	20000bf4 	.word	0x20000bf4
    8008:	40001000 	.word	0x40001000
    800c:	4001f504 	.word	0x4001f504
    8010:	00008b78 	.word	0x00008b78

00008014 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY>:
    8014:	4a02      	ldr	r2, [pc, #8]	; (8020 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY+0xc>)
    8016:	6b13      	ldr	r3, [r2, #48]	; 0x30
    8018:	6003      	str	r3, [r0, #0]
    801a:	6b50      	ldr	r0, [r2, #52]	; 0x34
    801c:	6008      	str	r0, [r1, #0]
    801e:	4770      	bx	lr
    8020:	20000bf4 	.word	0x20000bf4

00008024 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>:
    8024:	b510      	push	{r4, lr}
    8026:	c81d      	ldmia	r0, {r0, r2, r3, r4}
    8028:	4901      	ldr	r1, [pc, #4]	; (8030 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI+0xc>)
    802a:	e881 001d 	stmia.w	r1, {r0, r2, r3, r4}
    802e:	bd10      	pop	{r4, pc}
    8030:	20000be4 	.word	0x20000be4

00008034 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA>:
    8034:	490f      	ldr	r1, [pc, #60]	; (8074 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x40>)
    8036:	b510      	push	{r4, lr}
    8038:	69ca      	ldr	r2, [r1, #28]
    803a:	4282      	cmp	r2, r0
    803c:	d302      	bcc.n	8044 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x10>
    803e:	f640 113a 	movw	r1, #2362	; 0x93a
    8042:	e00b      	b.n	805c <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x28>
    8044:	2201      	movs	r2, #1
    8046:	730a      	strb	r2, [r1, #12]
    8048:	6108      	str	r0, [r1, #16]
    804a:	490b      	ldr	r1, [pc, #44]	; (8078 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x44>)
    804c:	644a      	str	r2, [r1, #68]	; 0x44
    804e:	1d0a      	adds	r2, r1, #4
    8050:	f8d2 3540 	ldr.w	r3, [r2, #1344]	; 0x540
    8054:	4283      	cmp	r3, r0
    8056:	d304      	bcc.n	8062 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x2e>
    8058:	f640 1143 	movw	r1, #2371	; 0x943
    805c:	203e      	movs	r0, #62	; 0x3e
    805e:	f7f9 f9cd 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8062:	2300      	movs	r3, #0
    8064:	f8c1 3144 	str.w	r3, [r1, #324]	; 0x144
    8068:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    806c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8070:	f000 bcac 	b.w	89cc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x300>
    8074:	20000bf4 	.word	0x20000bf4
    8078:	40008000 	.word	0x40008000

0000807c <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>:
    807c:	b570      	push	{r4, r5, r6, lr}
    807e:	4c0f      	ldr	r4, [pc, #60]	; (80bc <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x40>)
    8080:	4603      	mov	r3, r0
    8082:	2002      	movs	r0, #2
    8084:	7320      	strb	r0, [r4, #12]
    8086:	f894 5021 	ldrb.w	r5, [r4, #33]	; 0x21
    808a:	2096      	movs	r0, #150	; 0x96
    808c:	f894 1020 	ldrb.w	r1, [r4, #32]
    8090:	7d22      	ldrb	r2, [r4, #20]
    8092:	2d01      	cmp	r5, #1
    8094:	d00e      	beq.n	80b4 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x38>
    8096:	f000 fdab 	bl	8bf0 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>
    809a:	6120      	str	r0, [r4, #16]
    809c:	4808      	ldr	r0, [pc, #32]	; (80c0 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x44>)
    809e:	2100      	movs	r1, #0
    80a0:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    80a4:	6921      	ldr	r1, [r4, #16]
    80a6:	69e0      	ldr	r0, [r4, #28]
    80a8:	4408      	add	r0, r1
    80aa:	4905      	ldr	r1, [pc, #20]	; (80c0 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x44>)
    80ac:	1d09      	adds	r1, r1, #4
    80ae:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    80b2:	bd70      	pop	{r4, r5, r6, pc}
    80b4:	f000 fdba 	bl	8c2c <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>
    80b8:	e7ef      	b.n	809a <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x1e>
    80ba:	0000      	.short	0x0000
    80bc:	20000bf4 	.word	0x20000bf4
    80c0:	40008000 	.word	0x40008000

000080c4 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI>:
    80c4:	b510      	push	{r4, lr}
    80c6:	f008 fe4e 	bl	10d66 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    80ca:	2800      	cmp	r0, #0
    80cc:	d006      	beq.n	80dc <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI+0x18>
    80ce:	4804      	ldr	r0, [pc, #16]	; (80e0 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI+0x1c>)
    80d0:	6801      	ldr	r1, [r0, #0]
    80d2:	f021 0101 	bic.w	r1, r1, #1
    80d6:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
    80da:	6001      	str	r1, [r0, #0]
    80dc:	bd10      	pop	{r4, pc}
    80de:	0000      	.short	0x0000
    80e0:	40001774 	.word	0x40001774

000080e4 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>:
    80e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    80e8:	2238      	movs	r2, #56	; 0x38
    80ea:	2100      	movs	r1, #0
    80ec:	4813      	ldr	r0, [pc, #76]	; (813c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x58>)
    80ee:	f008 ff23 	bl	10f38 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    80f2:	f000 fcc5 	bl	8a80 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b4>
    80f6:	f008 fdef 	bl	10cd8 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    80fa:	4d11      	ldr	r5, [pc, #68]	; (8140 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    80fc:	4e10      	ldr	r6, [pc, #64]	; (8140 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    80fe:	2400      	movs	r4, #0
    8100:	4f0f      	ldr	r7, [pc, #60]	; (8140 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    8102:	3508      	adds	r5, #8
    8104:	3610      	adds	r6, #16
    8106:	b928      	cbnz	r0, 8114 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    8108:	f008 fdfd 	bl	10d06 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    810c:	b910      	cbnz	r0, 8114 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    810e:	f008 fe04 	bl	10d1a <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    8112:	b108      	cbz	r0, 8118 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x34>
    8114:	2224      	movs	r2, #36	; 0x24
    8116:	e006      	b.n	8126 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    8118:	f008 fe3f 	bl	10d9a <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    811c:	b910      	cbnz	r0, 8124 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x40>
    811e:	f008 fe32 	bl	10d86 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    8122:	b140      	cbz	r0, 8136 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x52>
    8124:	2240      	movs	r2, #64	; 0x40
    8126:	21ff      	movs	r1, #255	; 0xff
    8128:	4638      	mov	r0, r7
    812a:	f008 ff05 	bl	10f38 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    812e:	602c      	str	r4, [r5, #0]
    8130:	6034      	str	r4, [r6, #0]
    8132:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8136:	2238      	movs	r2, #56	; 0x38
    8138:	e7f5      	b.n	8126 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    813a:	0000      	.short	0x0000
    813c:	20000bf4 	.word	0x20000bf4
    8140:	40000e00 	.word	0x40000e00

00008144 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>:
    8144:	4801      	ldr	r0, [pc, #4]	; (814c <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA+0x8>)
    8146:	69c0      	ldr	r0, [r0, #28]
    8148:	4770      	bx	lr
    814a:	0000      	.short	0x0000
    814c:	20000bf4 	.word	0x20000bf4

00008150 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI>:
    8150:	4801      	ldr	r0, [pc, #4]	; (8158 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI+0x8>)
    8152:	6980      	ldr	r0, [r0, #24]
    8154:	4770      	bx	lr
    8156:	0000      	.short	0x0000
    8158:	20000bf4 	.word	0x20000bf4

0000815c <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>:
    815c:	b510      	push	{r4, lr}
    815e:	f000 fc43 	bl	89e8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x31c>
    8162:	f7ff fe69 	bl	7e38 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    8166:	f004 fb69 	bl	c83c <mpsl_fem_disable>
    816a:	b130      	cbz	r0, 817a <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x1e>
    816c:	1c40      	adds	r0, r0, #1
    816e:	d004      	beq.n	817a <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x1e>
    8170:	f240 516d 	movw	r1, #1389	; 0x56d
    8174:	203e      	movs	r0, #62	; 0x3e
    8176:	f7f9 f941 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    817a:	480f      	ldr	r0, [pc, #60]	; (81b8 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x5c>)
    817c:	4a0f      	ldr	r2, [pc, #60]	; (81bc <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x60>)
    817e:	6a81      	ldr	r1, [r0, #40]	; 0x28
    8180:	f041 6144 	orr.w	r1, r1, #205520896	; 0xc400000
    8184:	6011      	str	r1, [r2, #0]
    8186:	2400      	movs	r4, #0
    8188:	6284      	str	r4, [r0, #40]	; 0x28
    818a:	7304      	strb	r4, [r0, #12]
    818c:	61c4      	str	r4, [r0, #28]
    818e:	6184      	str	r4, [r0, #24]
    8190:	f000 fc2a 	bl	89e8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x31c>
    8194:	480a      	ldr	r0, [pc, #40]	; (81c0 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x64>)
    8196:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
    819a:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    819e:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    81a2:	f8c0 414c 	str.w	r4, [r0, #332]	; 0x14c
    81a6:	2001      	movs	r0, #1
    81a8:	f008 fc60 	bl	10a6c <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    81ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    81b0:	2001      	movs	r0, #1
    81b2:	f008 bc4e 	b.w	10a52 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    81b6:	0000      	.short	0x0000
    81b8:	20000bf4 	.word	0x20000bf4
    81bc:	4001f508 	.word	0x4001f508
    81c0:	40008000 	.word	0x40008000

000081c4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>:
    81c4:	b570      	push	{r4, r5, r6, lr}
    81c6:	2001      	movs	r0, #1
    81c8:	f008 fc50 	bl	10a6c <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    81cc:	4c37      	ldr	r4, [pc, #220]	; (82ac <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe8>)
    81ce:	2000      	movs	r0, #0
    81d0:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
    81d4:	2001      	movs	r0, #1
    81d6:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
    81da:	f008 fdb4 	bl	10d46 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    81de:	4d34      	ldr	r5, [pc, #208]	; (82b0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    81e0:	b118      	cbz	r0, 81ea <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x26>
    81e2:	6828      	ldr	r0, [r5, #0]
    81e4:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    81e8:	6028      	str	r0, [r5, #0]
    81ea:	f008 fda0 	bl	10d2e <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    81ee:	b128      	cbz	r0, 81fc <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x38>
    81f0:	6828      	ldr	r0, [r5, #0]
    81f2:	4930      	ldr	r1, [pc, #192]	; (82b4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf0>)
    81f4:	f020 0069 	bic.w	r0, r0, #105	; 0x69
    81f8:	4308      	orrs	r0, r1
    81fa:	6028      	str	r0, [r5, #0]
    81fc:	f008 fdb3 	bl	10d66 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    8200:	b138      	cbz	r0, 8212 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x4e>
    8202:	482b      	ldr	r0, [pc, #172]	; (82b0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    8204:	1d00      	adds	r0, r0, #4
    8206:	6801      	ldr	r1, [r0, #0]
    8208:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
    820c:	f441 51b0 	orr.w	r1, r1, #5632	; 0x1600
    8210:	6001      	str	r1, [r0, #0]
    8212:	4927      	ldr	r1, [pc, #156]	; (82b0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    8214:	4828      	ldr	r0, [pc, #160]	; (82b8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf4>)
    8216:	313c      	adds	r1, #60	; 0x3c
    8218:	6008      	str	r0, [r1, #0]
    821a:	f004 fb49 	bl	c8b0 <mpsl_fem_device_config_254_apply_get>
    821e:	b140      	cbz	r0, 8232 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6e>
    8220:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    8224:	f8d0 0330 	ldr.w	r0, [r0, #816]	; 0x330
    8228:	1c41      	adds	r1, r0, #1
    822a:	d002      	beq.n	8232 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6e>
    822c:	4920      	ldr	r1, [pc, #128]	; (82b0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    822e:	3110      	adds	r1, #16
    8230:	6008      	str	r0, [r1, #0]
    8232:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    8236:	6e00      	ldr	r0, [r0, #96]	; 0x60
    8238:	1c41      	adds	r1, r0, #1
    823a:	d004      	beq.n	8246 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x82>
    823c:	491f      	ldr	r1, [pc, #124]	; (82bc <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf8>)
    823e:	680a      	ldr	r2, [r1, #0]
    8240:	f360 4217 	bfi	r2, r0, #16, #8
    8244:	600a      	str	r2, [r1, #0]
    8246:	f240 1103 	movw	r1, #259	; 0x103
    824a:	f240 605b 	movw	r0, #1627	; 0x65b
    824e:	f8c4 1534 	str.w	r1, [r4, #1332]	; 0x534
    8252:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    8256:	2001      	movs	r0, #1
    8258:	f8c4 0530 	str.w	r0, [r4, #1328]	; 0x530
    825c:	f000 f842 	bl	82e4 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    8260:	f240 2001 	movw	r0, #513	; 0x201
    8264:	f8c4 0650 	str.w	r0, [r4, #1616]	; 0x650
    8268:	2002      	movs	r0, #2
    826a:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    826e:	4914      	ldr	r1, [pc, #80]	; (82c0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xfc>)
    8270:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    8274:	6008      	str	r0, [r1, #0]
    8276:	4913      	ldr	r1, [pc, #76]	; (82c4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x100>)
    8278:	2000      	movs	r0, #0
    827a:	4d13      	ldr	r5, [pc, #76]	; (82c8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x104>)
    827c:	8608      	strh	r0, [r1, #48]	; 0x30
    827e:	3110      	adds	r1, #16
    8280:	61c8      	str	r0, [r1, #28]
    8282:	f881 002c 	strb.w	r0, [r1, #44]	; 0x2c
    8286:	7028      	strb	r0, [r5, #0]
    8288:	2001      	movs	r0, #1
    828a:	f008 fbe2 	bl	10a52 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    828e:	2010      	movs	r0, #16
    8290:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    8294:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    8298:	2002      	movs	r0, #2
    829a:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
    829e:	6868      	ldr	r0, [r5, #4]
    82a0:	2800      	cmp	r0, #0
    82a2:	d002      	beq.n	82aa <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe6>
    82a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    82a8:	4700      	bx	r0
    82aa:	bd70      	pop	{r4, r5, r6, pc}
    82ac:	40001000 	.word	0x40001000
    82b0:	4000173c 	.word	0x4000173c
    82b4:	80000096 	.word	0x80000096
    82b8:	8900002c 	.word	0x8900002c
    82bc:	4000158c 	.word	0x4000158c
    82c0:	4001f504 	.word	0x4001f504
    82c4:	20000be4 	.word	0x20000be4
    82c8:	200002bc 	.word	0x200002bc

000082cc <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>:
    82cc:	4901      	ldr	r1, [pc, #4]	; (82d4 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA+0x8>)
    82ce:	7548      	strb	r0, [r1, #21]
    82d0:	4770      	bx	lr
    82d2:	0000      	.short	0x0000
    82d4:	20000bf4 	.word	0x20000bf4

000082d8 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>:
    82d8:	4901      	ldr	r1, [pc, #4]	; (82e0 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY+0x8>)
    82da:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    82de:	4770      	bx	lr
    82e0:	00008bcc 	.word	0x00008bcc

000082e4 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>:
    82e4:	4908      	ldr	r1, [pc, #32]	; (8308 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x24>)
    82e6:	b510      	push	{r4, lr}
    82e8:	7508      	strb	r0, [r1, #20]
    82ea:	4908      	ldr	r1, [pc, #32]	; (830c <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x28>)
    82ec:	2801      	cmp	r0, #1
    82ee:	d006      	beq.n	82fe <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x1a>
    82f0:	2802      	cmp	r0, #2
    82f2:	d006      	beq.n	8302 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x1e>
    82f4:	f640 5186 	movw	r1, #3462	; 0xd86
    82f8:	203e      	movs	r0, #62	; 0x3e
    82fa:	f7f9 f87f 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    82fe:	2003      	movs	r0, #3
    8300:	e000      	b.n	8304 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x20>
    8302:	2004      	movs	r0, #4
    8304:	6008      	str	r0, [r1, #0]
    8306:	bd10      	pop	{r4, pc}
    8308:	20000bf4 	.word	0x20000bf4
    830c:	40001510 	.word	0x40001510

00008310 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>:
    8310:	4905      	ldr	r1, [pc, #20]	; (8328 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x18>)
    8312:	f8c1 0504 	str.w	r0, [r1, #1284]	; 0x504
    8316:	4805      	ldr	r0, [pc, #20]	; (832c <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x1c>)
    8318:	f810 1f2c 	ldrb.w	r1, [r0, #44]!
    831c:	f041 0101 	orr.w	r1, r1, #1
    8320:	7001      	strb	r1, [r0, #0]
    8322:	f000 ba4d 	b.w	87c0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
    8326:	0000      	.short	0x0000
    8328:	40001000 	.word	0x40001000
    832c:	20000bf4 	.word	0x20000bf4

00008330 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>:
    8330:	4901      	ldr	r1, [pc, #4]	; (8338 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY+0x8>)
    8332:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    8336:	4770      	bx	lr
    8338:	00008bd8 	.word	0x00008bd8

0000833c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>:
    833c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8340:	4e30      	ldr	r6, [pc, #192]	; (8404 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xc8>)
    8342:	4c31      	ldr	r4, [pc, #196]	; (8408 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xcc>)
    8344:	4688      	mov	r8, r1
    8346:	0007      	movs	r7, r0
    8348:	4615      	mov	r5, r2
    834a:	f04f 0901 	mov.w	r9, #1
    834e:	d006      	beq.n	835e <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x22>
    8350:	2f01      	cmp	r7, #1
    8352:	d012      	beq.n	837a <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x3e>
    8354:	f640 012d 	movw	r1, #2093	; 0x82d
    8358:	203e      	movs	r0, #62	; 0x3e
    835a:	f7f9 f84f 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    835e:	4610      	mov	r0, r2
    8360:	f000 fbe8 	bl	8b34 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x468>
    8364:	4829      	ldr	r0, [pc, #164]	; (840c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd0>)
    8366:	f884 9009 	strb.w	r9, [r4, #9]
    836a:	f830 1015 	ldrh.w	r1, [r0, r5, lsl #1]
    836e:	4640      	mov	r0, r8
    8370:	f000 fb8e 	bl	8a90 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3c4>
    8374:	4605      	mov	r5, r0
    8376:	4630      	mov	r0, r6
    8378:	e00c      	b.n	8394 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x58>
    837a:	4610      	mov	r0, r2
    837c:	f000 fbc0 	bl	8b00 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x434>
    8380:	2002      	movs	r0, #2
    8382:	7260      	strb	r0, [r4, #9]
    8384:	f649 71ba 	movw	r1, #40890	; 0x9fba
    8388:	4640      	mov	r0, r8
    838a:	f000 fb81 	bl	8a90 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3c4>
    838e:	4605      	mov	r5, r0
    8390:	481c      	ldr	r0, [pc, #112]	; (8404 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xc8>)
    8392:	1d00      	adds	r0, r0, #4
    8394:	f000 fb3a 	bl	8a0c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x340>
    8398:	f8df 8074 	ldr.w	r8, [pc, #116]	; 8410 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd4>
    839c:	f8c8 5540 	str.w	r5, [r8, #1344]	; 0x540
    83a0:	f8df a074 	ldr.w	sl, [pc, #116]	; 8418 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xdc>
    83a4:	481b      	ldr	r0, [pc, #108]	; (8414 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd8>)
    83a6:	f8ca 0510 	str.w	r0, [sl, #1296]	; 0x510
    83aa:	2010      	movs	r0, #16
    83ac:	f8c6 0304 	str.w	r0, [r6, #772]	; 0x304
    83b0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    83b2:	f44f 2600 	mov.w	r6, #524288	; 0x80000
    83b6:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
    83ba:	62a0      	str	r0, [r4, #40]	; 0x28
    83bc:	4817      	ldr	r0, [pc, #92]	; (841c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe0>)
    83be:	6006      	str	r6, [r0, #0]
    83c0:	f000 fa38 	bl	8834 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x168>
    83c4:	4641      	mov	r1, r8
    83c6:	f8c8 904c 	str.w	r9, [r8, #76]	; 0x4c
    83ca:	4811      	ldr	r0, [pc, #68]	; (8410 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd4>)
    83cc:	300c      	adds	r0, #12
    83ce:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    83d2:	42a8      	cmp	r0, r5
    83d4:	d310      	bcc.n	83f8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xbc>
    83d6:	2000      	movs	r0, #0
    83d8:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    83dc:	f8ca 0514 	str.w	r0, [sl, #1300]	; 0x514
    83e0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    83e2:	f420 2000 	bic.w	r0, r0, #524288	; 0x80000
    83e6:	62a0      	str	r0, [r4, #40]	; 0x28
    83e8:	480c      	ldr	r0, [pc, #48]	; (841c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe0>)
    83ea:	1d00      	adds	r0, r0, #4
    83ec:	6006      	str	r6, [r0, #0]
    83ee:	f7ff fd23 	bl	7e38 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    83f2:	2000      	movs	r0, #0
    83f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    83f8:	4629      	mov	r1, r5
    83fa:	4638      	mov	r0, r7
    83fc:	f000 fb12 	bl	8a24 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x358>
    8400:	2001      	movs	r0, #1
    8402:	e7f7      	b.n	83f4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xb8>
    8404:	40001000 	.word	0x40001000
    8408:	20000bf4 	.word	0x20000bf4
    840c:	00008b78 	.word	0x00008b78
    8410:	40008000 	.word	0x40008000
    8414:	40008140 	.word	0x40008140
    8418:	4001f098 	.word	0x4001f098
    841c:	4001f504 	.word	0x4001f504

00008420 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>:
    8420:	4b0d      	ldr	r3, [pc, #52]	; (8458 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x38>)
    8422:	b510      	push	{r4, lr}
    8424:	71d8      	strb	r0, [r3, #7]
    8426:	729a      	strb	r2, [r3, #10]
    8428:	b151      	cbz	r1, 8440 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x20>
    842a:	2002      	movs	r0, #2
    842c:	7218      	strb	r0, [r3, #8]
    842e:	2801      	cmp	r0, #1
    8430:	d008      	beq.n	8444 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x24>
    8432:	2802      	cmp	r0, #2
    8434:	d00f      	beq.n	8456 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    8436:	f640 2163 	movw	r1, #2659	; 0xa63
    843a:	203e      	movs	r0, #62	; 0x3e
    843c:	f7f8 ffde 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8440:	2001      	movs	r0, #1
    8442:	e7f3      	b.n	842c <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0xc>
    8444:	7a58      	ldrb	r0, [r3, #9]
    8446:	2802      	cmp	r0, #2
    8448:	d105      	bne.n	8456 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    844a:	f000 f97d 	bl	8748 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x7c>
    844e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8452:	f000 bab1 	b.w	89b8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2ec>
    8456:	bd10      	pop	{r4, pc}
    8458:	20000bf4 	.word	0x20000bf4

0000845c <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>:
    845c:	4902      	ldr	r1, [pc, #8]	; (8468 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ+0xc>)
    845e:	2000      	movs	r0, #0
    8460:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    8464:	4770      	bx	lr
    8466:	0000      	.short	0x0000
    8468:	40008000 	.word	0x40008000

0000846c <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>:
    846c:	4904      	ldr	r1, [pc, #16]	; (8480 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x14>)
    846e:	f8d1 1548 	ldr.w	r1, [r1, #1352]	; 0x548
    8472:	f001 017f 	and.w	r1, r1, #127	; 0x7f
    8476:	4249      	negs	r1, r1
    8478:	7001      	strb	r1, [r0, #0]
    847a:	2001      	movs	r0, #1
    847c:	4770      	bx	lr
    847e:	0000      	.short	0x0000
    8480:	40001000 	.word	0x40001000

00008484 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>:
    8484:	4903      	ldr	r1, [pc, #12]	; (8494 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA+0x10>)
    8486:	0e02      	lsrs	r2, r0, #24
    8488:	f8c1 2524 	str.w	r2, [r1, #1316]	; 0x524
    848c:	0200      	lsls	r0, r0, #8
    848e:	f8c1 051c 	str.w	r0, [r1, #1308]	; 0x51c
    8492:	4770      	bx	lr
    8494:	40001000 	.word	0x40001000

00008498 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>:
    8498:	4901      	ldr	r1, [pc, #4]	; (84a0 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A+0x8>)
    849a:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    849e:	4770      	bx	lr
    84a0:	40001000 	.word	0x40001000

000084a4 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>:
    84a4:	b510      	push	{r4, lr}
    84a6:	2200      	movs	r2, #0
    84a8:	2901      	cmp	r1, #1
    84aa:	d006      	beq.n	84ba <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x16>
    84ac:	2902      	cmp	r1, #2
    84ae:	d002      	beq.n	84b6 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x12>
    84b0:	f240 21d9 	movw	r1, #729	; 0x2d9
    84b4:	e014      	b.n	84e0 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x3c>
    84b6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    84ba:	490b      	ldr	r1, [pc, #44]	; (84e8 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x44>)
    84bc:	430a      	orrs	r2, r1
    84be:	490b      	ldr	r1, [pc, #44]	; (84ec <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x48>)
    84c0:	600a      	str	r2, [r1, #0]
    84c2:	490b      	ldr	r1, [pc, #44]	; (84f0 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x4c>)
    84c4:	4308      	orrs	r0, r1
    84c6:	4909      	ldr	r1, [pc, #36]	; (84ec <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x48>)
    84c8:	1d09      	adds	r1, r1, #4
    84ca:	6008      	str	r0, [r1, #0]
    84cc:	4809      	ldr	r0, [pc, #36]	; (84f4 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x50>)
    84ce:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
    84d2:	b2c0      	uxtb	r0, r0
    84d4:	2803      	cmp	r0, #3
    84d6:	d001      	beq.n	84dc <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x38>
    84d8:	280b      	cmp	r0, #11
    84da:	d104      	bne.n	84e6 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x42>
    84dc:	f240 21f1 	movw	r1, #753	; 0x2f1
    84e0:	203e      	movs	r0, #62	; 0x3e
    84e2:	f7f8 ff8b 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    84e6:	bd10      	pop	{r4, pc}
    84e8:	00100108 	.word	0x00100108
    84ec:	40001514 	.word	0x40001514
    84f0:	02030000 	.word	0x02030000
    84f4:	40001000 	.word	0x40001000

000084f8 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>:
    84f8:	4901      	ldr	r1, [pc, #4]	; (8500 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI+0x8>)
    84fa:	7588      	strb	r0, [r1, #22]
    84fc:	4770      	bx	lr
    84fe:	0000      	.short	0x0000
    8500:	20000bf4 	.word	0x20000bf4

00008504 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>:
    8504:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8508:	4853      	ldr	r0, [pc, #332]	; (8658 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    850a:	f04f 0a01 	mov.w	sl, #1
    850e:	f8c0 a04c 	str.w	sl, [r0, #76]	; 0x4c
    8512:	4851      	ldr	r0, [pc, #324]	; (8658 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    8514:	300c      	adds	r0, #12
    8516:	f8d0 7540 	ldr.w	r7, [r0, #1344]	; 0x540
    851a:	f008 fafe 	bl	10b1a <sym_6TZLBWMEWRMPI4KKAUVLC2XHUBDGXEA4B4JJJYQ>
    851e:	4c4f      	ldr	r4, [pc, #316]	; (865c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x158>)
    8520:	e9c4 070c 	strd	r0, r7, [r4, #48]	; 0x30
    8524:	f000 f91a 	bl	875c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x90>
    8528:	494d      	ldr	r1, [pc, #308]	; (8660 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x15c>)
    852a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    852c:	6008      	str	r0, [r1, #0]
    852e:	f8df 8134 	ldr.w	r8, [pc, #308]	; 8664 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x160>
    8532:	2000      	movs	r0, #0
    8534:	62a0      	str	r0, [r4, #40]	; 0x28
    8536:	f8d8 2200 	ldr.w	r2, [r8, #512]	; 0x200
    853a:	f240 131d 	movw	r3, #285	; 0x11d
    853e:	439a      	bics	r2, r3
    8540:	f8c8 2200 	str.w	r2, [r8, #512]	; 0x200
    8544:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    8548:	f000 f988 	bl	885c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x190>
    854c:	4605      	mov	r5, r0
    854e:	4842      	ldr	r0, [pc, #264]	; (8658 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    8550:	3008      	adds	r0, #8
    8552:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    8556:	4e40      	ldr	r6, [pc, #256]	; (8658 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    8558:	61e0      	str	r0, [r4, #28]
    855a:	1d36      	adds	r6, r6, #4
    855c:	f8d6 0540 	ldr.w	r0, [r6, #1344]	; 0x540
    8560:	61a0      	str	r0, [r4, #24]
    8562:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
    8566:	7d21      	ldrb	r1, [r4, #20]
    8568:	f884 1020 	strb.w	r1, [r4, #32]
    856c:	7a61      	ldrb	r1, [r4, #9]
    856e:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    8572:	46a1      	mov	r9, r4
    8574:	2400      	movs	r4, #0
    8576:	4639      	mov	r1, r7
    8578:	4628      	mov	r0, r5
    857a:	f000 f9e3 	bl	8944 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x278>
    857e:	b910      	cbnz	r0, 8586 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x82>
    8580:	f8c8 a010 	str.w	sl, [r8, #16]
    8584:	2401      	movs	r4, #1
    8586:	4f35      	ldr	r7, [pc, #212]	; (865c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x158>)
    8588:	07e8      	lsls	r0, r5, #31
    858a:	f1a7 0710 	sub.w	r7, r7, #16
    858e:	d002      	beq.n	8596 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x92>
    8590:	6838      	ldr	r0, [r7, #0]
    8592:	4780      	blx	r0
    8594:	e034      	b.n	8600 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xfc>
    8596:	07a8      	lsls	r0, r5, #30
    8598:	d529      	bpl.n	85ee <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xea>
    859a:	0768      	lsls	r0, r5, #29
    859c:	d421      	bmi.n	85e2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xde>
    859e:	f008 fbe2 	bl	10d66 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    85a2:	b9f0      	cbnz	r0, 85e2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xde>
    85a4:	f008 fbcf 	bl	10d46 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    85a8:	b9d8      	cbnz	r0, 85e2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xde>
    85aa:	482f      	ldr	r0, [pc, #188]	; (8668 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x164>)
    85ac:	6800      	ldr	r0, [r0, #0]
    85ae:	f3c0 5242 	ubfx	r2, r0, #21, #3
    85b2:	f3c0 6100 	ubfx	r1, r0, #24, #1
    85b6:	f000 0c0f 	and.w	ip, r0, #15
    85ba:	f3c0 1303 	ubfx	r3, r0, #4, #4
    85be:	f3c0 2803 	ubfx	r8, r0, #8, #4
    85c2:	b171      	cbz	r1, 85e2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xde>
    85c4:	f1bc 0f00 	cmp.w	ip, #0
    85c8:	d003      	beq.n	85d2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xce>
    85ca:	b113      	cbz	r3, 85d2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xce>
    85cc:	f1b8 0f00 	cmp.w	r8, #0
    85d0:	d107      	bne.n	85e2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xde>
    85d2:	f3c0 4004 	ubfx	r0, r0, #16, #5
    85d6:	2801      	cmp	r0, #1
    85d8:	d103      	bne.n	85e2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xde>
    85da:	2a03      	cmp	r2, #3
    85dc:	d201      	bcs.n	85e2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xde>
    85de:	f045 0504 	orr.w	r5, r5, #4
    85e2:	f345 0080 	sbfx	r0, r5, #2, #1
    85e6:	4621      	mov	r1, r4
    85e8:	1c40      	adds	r0, r0, #1
    85ea:	687a      	ldr	r2, [r7, #4]
    85ec:	e007      	b.n	85fe <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xfa>
    85ee:	f015 0f28 	tst.w	r5, #40	; 0x28
    85f2:	d005      	beq.n	8600 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xfc>
    85f4:	f345 1140 	sbfx	r1, r5, #5, #1
    85f8:	68ba      	ldr	r2, [r7, #8]
    85fa:	4620      	mov	r0, r4
    85fc:	1c49      	adds	r1, r1, #1
    85fe:	4790      	blx	r2
    8600:	06e8      	lsls	r0, r5, #27
    8602:	d501      	bpl.n	8608 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x104>
    8604:	68f8      	ldr	r0, [r7, #12]
    8606:	4780      	blx	r0
    8608:	f899 1009 	ldrb.w	r1, [r9, #9]
    860c:	4648      	mov	r0, r9
    860e:	2902      	cmp	r1, #2
    8610:	d120      	bne.n	8654 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>
    8612:	7b01      	ldrb	r1, [r0, #12]
    8614:	2900      	cmp	r1, #0
    8616:	d01d      	beq.n	8654 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>
    8618:	2902      	cmp	r1, #2
    861a:	d004      	beq.n	8626 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x122>
    861c:	2901      	cmp	r1, #1
    861e:	d009      	beq.n	8634 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x130>
    8620:	f640 4166 	movw	r1, #3174	; 0xc66
    8624:	e00d      	b.n	8642 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x13e>
    8626:	69c1      	ldr	r1, [r0, #28]
    8628:	f8d9 0010 	ldr.w	r0, [r9, #16]
    862c:	4408      	add	r0, r1
    862e:	f8c6 0540 	str.w	r0, [r6, #1344]	; 0x540
    8632:	e00b      	b.n	864c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x148>
    8634:	6901      	ldr	r1, [r0, #16]
    8636:	f8d9 001c 	ldr.w	r0, [r9, #28]
    863a:	4281      	cmp	r1, r0
    863c:	d804      	bhi.n	8648 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x144>
    863e:	f640 4167 	movw	r1, #3175	; 0xc67
    8642:	203e      	movs	r0, #62	; 0x3e
    8644:	f7f8 feda 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8648:	f8c6 1540 	str.w	r1, [r6, #1344]	; 0x540
    864c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8650:	f000 b9bc 	b.w	89cc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x300>
    8654:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8658:	40008000 	.word	0x40008000
    865c:	20000bf4 	.word	0x20000bf4
    8660:	4001f508 	.word	0x4001f508
    8664:	40001000 	.word	0x40001000
    8668:	40001450 	.word	0x40001450

0000866c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>:
    866c:	b570      	push	{r4, r5, r6, lr}
    866e:	4b16      	ldr	r3, [pc, #88]	; (86c8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x5c>)
    8670:	888c      	ldrh	r4, [r1, #4]
    8672:	eb03 0580 	add.w	r5, r3, r0, lsl #2
    8676:	f8c5 4620 	str.w	r4, [r5, #1568]	; 0x620
    867a:	780c      	ldrb	r4, [r1, #0]
    867c:	f8d1 1001 	ldr.w	r1, [r1, #1]
    8680:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    8684:	f8c5 1600 	str.w	r1, [r5, #1536]	; 0x600
    8688:	f8d3 1640 	ldr.w	r1, [r3, #1600]	; 0x640
    868c:	2401      	movs	r4, #1
    868e:	4084      	lsls	r4, r0
    8690:	b2c9      	uxtb	r1, r1
    8692:	b2e5      	uxtb	r5, r4
    8694:	4329      	orrs	r1, r5
    8696:	b132      	cbz	r2, 86a6 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3a>
    8698:	2a01      	cmp	r2, #1
    869a:	d00a      	beq.n	86b2 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x46>
    869c:	f240 51d4 	movw	r1, #1492	; 0x5d4
    86a0:	203e      	movs	r0, #62	; 0x3e
    86a2:	f7f8 feab 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    86a6:	f8d3 0640 	ldr.w	r0, [r3, #1600]	; 0x640
    86aa:	f3c0 2007 	ubfx	r0, r0, #8, #8
    86ae:	43a0      	bics	r0, r4
    86b0:	e004      	b.n	86bc <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x50>
    86b2:	f8d3 0640 	ldr.w	r0, [r3, #1600]	; 0x640
    86b6:	f3c0 2007 	ubfx	r0, r0, #8, #8
    86ba:	4328      	orrs	r0, r5
    86bc:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    86c0:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
    86c4:	bd70      	pop	{r4, r5, r6, pc}
    86c6:	0000      	.short	0x0000
    86c8:	40001000 	.word	0x40001000

000086cc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY>:
    86cc:	4901      	ldr	r1, [pc, #4]	; (86d4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8>)
    86ce:	2001      	movs	r0, #1
    86d0:	7008      	strb	r0, [r1, #0]
    86d2:	4770      	bx	lr
    86d4:	200002bc 	.word	0x200002bc
    86d8:	480b      	ldr	r0, [pc, #44]	; (8708 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3c>)
    86da:	7d81      	ldrb	r1, [r0, #22]
    86dc:	480b      	ldr	r0, [pc, #44]	; (870c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x40>)
    86de:	5c40      	ldrb	r0, [r0, r1]
    86e0:	f500 6016 	add.w	r0, r0, #2400	; 0x960
    86e4:	f5b0 6f16 	cmp.w	r0, #2400	; 0x960
    86e8:	d204      	bcs.n	86f4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x28>
    86ea:	f6a0 1038 	subw	r0, r0, #2360	; 0x938
    86ee:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    86f2:	e001      	b.n	86f8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c>
    86f4:	f5a0 6016 	sub.w	r0, r0, #2400	; 0x960
    86f8:	4a05      	ldr	r2, [pc, #20]	; (8710 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44>)
    86fa:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    86fe:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    8702:	f8c2 0554 	str.w	r0, [r2, #1364]	; 0x554
    8706:	4770      	bx	lr
    8708:	20000bf4 	.word	0x20000bf4
    870c:	00008b7e 	.word	0x00008b7e
    8710:	40001000 	.word	0x40001000
    8714:	b508      	push	{r3, lr}
    8716:	490b      	ldr	r1, [pc, #44]	; (8744 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x78>)
    8718:	466b      	mov	r3, sp
    871a:	f991 2015 	ldrsb.w	r2, [r1, #21]
    871e:	7d89      	ldrb	r1, [r1, #22]
    8720:	f000 fad0 	bl	8cc4 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ>
    8724:	f99d 0000 	ldrsb.w	r0, [sp]
    8728:	f000 faa0 	bl	8c6c <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
    872c:	f10d 0001 	add.w	r0, sp, #1
    8730:	f004 f8a8 	bl	c884 <mpsl_fem_pa_gain_set>
    8734:	2800      	cmp	r0, #0
    8736:	d004      	beq.n	8742 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x76>
    8738:	f240 6115 	movw	r1, #1557	; 0x615
    873c:	203e      	movs	r0, #62	; 0x3e
    873e:	f7f8 fe5d 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8742:	bd08      	pop	{r3, pc}
    8744:	20000bf4 	.word	0x20000bf4
    8748:	4803      	ldr	r0, [pc, #12]	; (8758 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8c>)
    874a:	7a01      	ldrb	r1, [r0, #8]
    874c:	2901      	cmp	r1, #1
    874e:	d102      	bne.n	8756 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8a>
    8750:	7a80      	ldrb	r0, [r0, #10]
    8752:	f7ff bfdf 	b.w	8714 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x48>
    8756:	4770      	bx	lr
    8758:	20000bf4 	.word	0x20000bf4
    875c:	480d      	ldr	r0, [pc, #52]	; (8794 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc8>)
    875e:	b510      	push	{r4, lr}
    8760:	7a40      	ldrb	r0, [r0, #9]
    8762:	2801      	cmp	r0, #1
    8764:	d00c      	beq.n	8780 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xb4>
    8766:	2802      	cmp	r0, #2
    8768:	d113      	bne.n	8792 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    876a:	f004 f86d 	bl	c848 <mpsl_fem_lna_configuration_clear>
    876e:	2800      	cmp	r0, #0
    8770:	d00f      	beq.n	8792 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    8772:	1c40      	adds	r0, r0, #1
    8774:	d00d      	beq.n	8792 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    8776:	f640 01c1 	movw	r1, #2241	; 0x8c1
    877a:	203e      	movs	r0, #62	; 0x3e
    877c:	f7f8 fe3e 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8780:	f004 f874 	bl	c86c <mpsl_fem_pa_configuration_clear>
    8784:	2800      	cmp	r0, #0
    8786:	d004      	beq.n	8792 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    8788:	1c40      	adds	r0, r0, #1
    878a:	d002      	beq.n	8792 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    878c:	f640 01bb 	movw	r1, #2235	; 0x8bb
    8790:	e7f3      	b.n	877a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xae>
    8792:	bd10      	pop	{r4, pc}
    8794:	20000bf4 	.word	0x20000bf4
    8798:	4808      	ldr	r0, [pc, #32]	; (87bc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf0>)
    879a:	2100      	movs	r1, #0
    879c:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    87a0:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
    87a4:	f8c0 1110 	str.w	r1, [r0, #272]	; 0x110
    87a8:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    87ac:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
    87b0:	f8c0 1118 	str.w	r1, [r0, #280]	; 0x118
    87b4:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    87b8:	4770      	bx	lr
    87ba:	0000      	.short	0x0000
    87bc:	40001000 	.word	0x40001000
    87c0:	4818      	ldr	r0, [pc, #96]	; (8824 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x158>)
    87c2:	b510      	push	{r4, lr}
    87c4:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
    87c8:	07c1      	lsls	r1, r0, #31
    87ca:	d029      	beq.n	8820 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x154>
    87cc:	0781      	lsls	r1, r0, #30
    87ce:	d514      	bpl.n	87fa <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x12e>
    87d0:	4815      	ldr	r0, [pc, #84]	; (8828 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x15c>)
    87d2:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    87d6:	f041 0101 	orr.w	r1, r1, #1
    87da:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    87de:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
    87e2:	b2c0      	uxtb	r0, r0
    87e4:	280b      	cmp	r0, #11
    87e6:	d005      	beq.n	87f4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x128>
    87e8:	280a      	cmp	r0, #10
    87ea:	d003      	beq.n	87f4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x128>
    87ec:	2803      	cmp	r0, #3
    87ee:	d001      	beq.n	87f4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x128>
    87f0:	2802      	cmp	r0, #2
    87f2:	d115      	bne.n	8820 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x154>
    87f4:	f240 613e 	movw	r1, #1598	; 0x63e
    87f8:	e00f      	b.n	881a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x14e>
    87fa:	0740      	lsls	r0, r0, #29
    87fc:	d510      	bpl.n	8820 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x154>
    87fe:	480a      	ldr	r0, [pc, #40]	; (8828 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x15c>)
    8800:	490a      	ldr	r1, [pc, #40]	; (882c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x160>)
    8802:	3008      	adds	r0, #8
    8804:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    8808:	f44f 71a0 	mov.w	r1, #320	; 0x140
    880c:	4808      	ldr	r0, [pc, #32]	; (8830 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x164>)
    880e:	f008 f943 	bl	10a98 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5e>
    8812:	2800      	cmp	r0, #0
    8814:	d004      	beq.n	8820 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x154>
    8816:	f240 6146 	movw	r1, #1606	; 0x646
    881a:	203e      	movs	r0, #62	; 0x3e
    881c:	f7f8 fdee 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8820:	bd10      	pop	{r4, pc}
    8822:	0000      	.short	0x0000
    8824:	20000bf4 	.word	0x20000bf4
    8828:	40001000 	.word	0x40001000
    882c:	4001f098 	.word	0x4001f098
    8830:	40008000 	.word	0x40008000
    8834:	4808      	ldr	r0, [pc, #32]	; (8858 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x18c>)
    8836:	4601      	mov	r1, r0
    8838:	79c2      	ldrb	r2, [r0, #7]
    883a:	f891 102c 	ldrb.w	r1, [r1, #44]	; 0x2c
    883e:	b112      	cbz	r2, 8846 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x17a>
    8840:	2a01      	cmp	r2, #1
    8842:	d003      	beq.n	884c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x180>
    8844:	e006      	b.n	8854 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x188>
    8846:	f041 0102 	orr.w	r1, r1, #2
    884a:	e001      	b.n	8850 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x184>
    884c:	f041 0104 	orr.w	r1, r1, #4
    8850:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c
    8854:	f7ff bfb4 	b.w	87c0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
    8858:	20000bf4 	.word	0x20000bf4
    885c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8860:	4d34      	ldr	r5, [pc, #208]	; (8934 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x268>)
    8862:	2400      	movs	r4, #0
    8864:	7b28      	ldrb	r0, [r5, #12]
    8866:	b138      	cbz	r0, 8878 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ac>
    8868:	f44f 71a2 	mov.w	r1, #324	; 0x144
    886c:	4832      	ldr	r0, [pc, #200]	; (8938 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x26c>)
    886e:	f008 f913 	bl	10a98 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5e>
    8872:	b108      	cbz	r0, 8878 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ac>
    8874:	2601      	movs	r6, #1
    8876:	e000      	b.n	887a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ae>
    8878:	2600      	movs	r6, #0
    887a:	7a68      	ldrb	r0, [r5, #9]
    887c:	4f2f      	ldr	r7, [pc, #188]	; (893c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x270>)
    887e:	f44f 7186 	mov.w	r1, #268	; 0x10c
    8882:	2801      	cmp	r0, #1
    8884:	d002      	beq.n	888c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1c0>
    8886:	2802      	cmp	r0, #2
    8888:	d006      	beq.n	8898 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1cc>
    888a:	e016      	b.n	88ba <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ee>
    888c:	4638      	mov	r0, r7
    888e:	f008 f8fe 	bl	10a8e <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    8892:	b190      	cbz	r0, 88ba <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ee>
    8894:	2408      	movs	r4, #8
    8896:	e010      	b.n	88ba <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ee>
    8898:	4638      	mov	r0, r7
    889a:	f008 f8f8 	bl	10a8e <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    889e:	b100      	cbz	r0, 88a2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1d6>
    88a0:	2402      	movs	r4, #2
    88a2:	f8d7 0400 	ldr.w	r0, [r7, #1024]	; 0x400
    88a6:	43c0      	mvns	r0, r0
    88a8:	f340 0000 	sbfx	r0, r0, #0, #1
    88ac:	1c40      	adds	r0, r0, #1
    88ae:	d101      	bne.n	88b4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1e8>
    88b0:	f044 0404 	orr.w	r4, r4, #4
    88b4:	b10e      	cbz	r6, 88ba <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ee>
    88b6:	f044 0401 	orr.w	r4, r4, #1
    88ba:	f014 0f0b 	tst.w	r4, #11
    88be:	d107      	bne.n	88d0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x204>
    88c0:	f44f 7188 	mov.w	r1, #272	; 0x110
    88c4:	4638      	mov	r0, r7
    88c6:	f008 f8e2 	bl	10a8e <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    88ca:	b108      	cbz	r0, 88d0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x204>
    88cc:	f044 0410 	orr.w	r4, r4, #16
    88d0:	481b      	ldr	r0, [pc, #108]	; (8940 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x274>)
    88d2:	7800      	ldrb	r0, [r0, #0]
    88d4:	b1f8      	cbz	r0, 8916 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x24a>
    88d6:	f8d7 0640 	ldr.w	r0, [r7, #1600]	; 0x640
    88da:	f010 06ff 	ands.w	r6, r0, #255	; 0xff
    88de:	d007      	beq.n	88f0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x224>
    88e0:	f44f 718a 	mov.w	r1, #276	; 0x114
    88e4:	4638      	mov	r0, r7
    88e6:	f008 f8d2 	bl	10a8e <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    88ea:	b108      	cbz	r0, 88f0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x224>
    88ec:	2001      	movs	r0, #1
    88ee:	e000      	b.n	88f2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x226>
    88f0:	2000      	movs	r0, #0
    88f2:	f885 0022 	strb.w	r0, [r5, #34]	; 0x22
    88f6:	b13e      	cbz	r6, 8908 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x23c>
    88f8:	f44f 718c 	mov.w	r1, #280	; 0x118
    88fc:	4638      	mov	r0, r7
    88fe:	f008 f8c6 	bl	10a8e <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    8902:	b108      	cbz	r0, 8908 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x23c>
    8904:	2001      	movs	r0, #1
    8906:	e000      	b.n	890a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x23e>
    8908:	2000      	movs	r0, #0
    890a:	f885 0023 	strb.w	r0, [r5, #35]	; 0x23
    890e:	f8d7 0410 	ldr.w	r0, [r7, #1040]	; 0x410
    8912:	f885 0024 	strb.w	r0, [r5, #36]	; 0x24
    8916:	f7ff ff3f 	bl	8798 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xcc>
    891a:	06e0      	lsls	r0, r4, #27
    891c:	d506      	bpl.n	892c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x260>
    891e:	0720      	lsls	r0, r4, #28
    8920:	d404      	bmi.n	892c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x260>
    8922:	7a68      	ldrb	r0, [r5, #9]
    8924:	2801      	cmp	r0, #1
    8926:	d101      	bne.n	892c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x260>
    8928:	f044 0420 	orr.w	r4, r4, #32
    892c:	4620      	mov	r0, r4
    892e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8932:	0000      	.short	0x0000
    8934:	20000bf4 	.word	0x20000bf4
    8938:	40008000 	.word	0x40008000
    893c:	40001000 	.word	0x40001000
    8940:	200002bc 	.word	0x200002bc
    8944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8948:	4c1a      	ldr	r4, [pc, #104]	; (89b4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2e8>)
    894a:	460d      	mov	r5, r1
    894c:	7a21      	ldrb	r1, [r4, #8]
    894e:	b129      	cbz	r1, 895c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x290>
    8950:	f010 0f11 	tst.w	r0, #17
    8954:	d007      	beq.n	8966 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x29a>
    8956:	f7ff fa6f 	bl	7e38 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    895a:	e024      	b.n	89a6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2da>
    895c:	f000 f890 	bl	8a80 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b4>
    8960:	2000      	movs	r0, #0
    8962:	7320      	strb	r0, [r4, #12]
    8964:	e01f      	b.n	89a6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2da>
    8966:	2901      	cmp	r1, #1
    8968:	d001      	beq.n	896e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2a2>
    896a:	2601      	movs	r6, #1
    896c:	e000      	b.n	8970 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2a4>
    896e:	2600      	movs	r6, #0
    8970:	79e0      	ldrb	r0, [r4, #7]
    8972:	2801      	cmp	r0, #1
    8974:	d00e      	beq.n	8994 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c8>
    8976:	2700      	movs	r7, #0
    8978:	f000 f882 	bl	8a80 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b4>
    897c:	2196      	movs	r1, #150	; 0x96
    897e:	4630      	mov	r0, r6
    8980:	f000 f894 	bl	8aac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3e0>
    8984:	4601      	mov	r1, r0
    8986:	b14f      	cbz	r7, 899c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2d0>
    8988:	353b      	adds	r5, #59	; 0x3b
    898a:	428d      	cmp	r5, r1
    898c:	d904      	bls.n	8998 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2cc>
    898e:	2000      	movs	r0, #0
    8990:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8994:	2701      	movs	r7, #1
    8996:	e7ef      	b.n	8978 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2ac>
    8998:	2001      	movs	r0, #1
    899a:	71e0      	strb	r0, [r4, #7]
    899c:	7aa2      	ldrb	r2, [r4, #10]
    899e:	4630      	mov	r0, r6
    89a0:	f7ff fccc 	bl	833c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    89a4:	b108      	cbz	r0, 89aa <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2de>
    89a6:	2001      	movs	r0, #1
    89a8:	e7f2      	b.n	8990 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c4>
    89aa:	f640 21c4 	movw	r1, #2756	; 0xac4
    89ae:	203e      	movs	r0, #62	; 0x3e
    89b0:	f7f8 fd24 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    89b4:	20000bf4 	.word	0x20000bf4
    89b8:	4803      	ldr	r0, [pc, #12]	; (89c8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2fc>)
    89ba:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    89be:	f441 7188 	orr.w	r1, r1, #272	; 0x110
    89c2:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    89c6:	4770      	bx	lr
    89c8:	40001000 	.word	0x40001000
    89cc:	4804      	ldr	r0, [pc, #16]	; (89e0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x314>)
    89ce:	6a81      	ldr	r1, [r0, #40]	; 0x28
    89d0:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
    89d4:	6281      	str	r1, [r0, #40]	; 0x28
    89d6:	4903      	ldr	r1, [pc, #12]	; (89e4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x318>)
    89d8:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    89dc:	6008      	str	r0, [r1, #0]
    89de:	4770      	bx	lr
    89e0:	20000bf4 	.word	0x20000bf4
    89e4:	4001f504 	.word	0x4001f504
    89e8:	4a07      	ldr	r2, [pc, #28]	; (8a08 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x33c>)
    89ea:	2000      	movs	r0, #0
    89ec:	3208      	adds	r2, #8
    89ee:	4906      	ldr	r1, [pc, #24]	; (8a08 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x33c>)
    89f0:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    89f4:	1d0a      	adds	r2, r1, #4
    89f6:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    89fa:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    89fe:	4902      	ldr	r1, [pc, #8]	; (8a08 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x33c>)
    8a00:	310c      	adds	r1, #12
    8a02:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    8a06:	4770      	bx	lr
    8a08:	40008000 	.word	0x40008000
    8a0c:	4903      	ldr	r1, [pc, #12]	; (8a1c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x350>)
    8a0e:	79c9      	ldrb	r1, [r1, #7]
    8a10:	2900      	cmp	r1, #0
    8a12:	d102      	bne.n	8a1a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x34e>
    8a14:	4902      	ldr	r1, [pc, #8]	; (8a20 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x354>)
    8a16:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    8a1a:	4770      	bx	lr
    8a1c:	20000bf4 	.word	0x20000bf4
    8a20:	4001f098 	.word	0x4001f098
    8a24:	b510      	push	{r4, lr}
    8a26:	4a14      	ldr	r2, [pc, #80]	; (8a78 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ac>)
    8a28:	b120      	cbz	r0, 8a34 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x368>
    8a2a:	2801      	cmp	r0, #1
    8a2c:	d011      	beq.n	8a52 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x386>
    8a2e:	f240 7169 	movw	r1, #1897	; 0x769
    8a32:	e01c      	b.n	8a6e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a2>
    8a34:	f101 0028 	add.w	r0, r1, #40	; 0x28
    8a38:	e9c2 1002 	strd	r1, r0, [r2, #8]
    8a3c:	490f      	ldr	r1, [pc, #60]	; (8a7c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b0>)
    8a3e:	480e      	ldr	r0, [pc, #56]	; (8a78 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ac>)
    8a40:	f003 ff1a 	bl	c878 <mpsl_fem_pa_configuration_set>
    8a44:	2800      	cmp	r0, #0
    8a46:	d015      	beq.n	8a74 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a8>
    8a48:	1c40      	adds	r0, r0, #1
    8a4a:	d013      	beq.n	8a74 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a8>
    8a4c:	f44f 61eb 	mov.w	r1, #1880	; 0x758
    8a50:	e00d      	b.n	8a6e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a2>
    8a52:	f101 0029 	add.w	r0, r1, #41	; 0x29
    8a56:	e9c2 1002 	strd	r1, r0, [r2, #8]
    8a5a:	4908      	ldr	r1, [pc, #32]	; (8a7c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b0>)
    8a5c:	4806      	ldr	r0, [pc, #24]	; (8a78 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ac>)
    8a5e:	f003 fef9 	bl	c854 <mpsl_fem_lna_configuration_set>
    8a62:	2800      	cmp	r0, #0
    8a64:	d006      	beq.n	8a74 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a8>
    8a66:	1c40      	adds	r0, r0, #1
    8a68:	d004      	beq.n	8a74 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a8>
    8a6a:	f240 7165 	movw	r1, #1893	; 0x765
    8a6e:	203e      	movs	r0, #62	; 0x3e
    8a70:	f7f8 fcc4 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8a74:	bd10      	pop	{r4, pc}
    8a76:	0000      	.short	0x0000
    8a78:	200002c4 	.word	0x200002c4
    8a7c:	00008ba8 	.word	0x00008ba8
    8a80:	4802      	ldr	r0, [pc, #8]	; (8a8c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3c0>)
    8a82:	2100      	movs	r1, #0
    8a84:	71c1      	strb	r1, [r0, #7]
    8a86:	7201      	strb	r1, [r0, #8]
    8a88:	7241      	strb	r1, [r0, #9]
    8a8a:	4770      	bx	lr
    8a8c:	20000bf4 	.word	0x20000bf4
    8a90:	4a05      	ldr	r2, [pc, #20]	; (8aa8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3dc>)
    8a92:	79d2      	ldrb	r2, [r2, #7]
    8a94:	2a01      	cmp	r2, #1
    8a96:	d006      	beq.n	8aa6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3da>
    8a98:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    8a9c:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4
    8aa0:	fbb1 f1f2 	udiv	r1, r1, r2
    8aa4:	1a40      	subs	r0, r0, r1
    8aa6:	4770      	bx	lr
    8aa8:	20000bf4 	.word	0x20000bf4
    8aac:	b570      	push	{r4, r5, r6, lr}
    8aae:	4c13      	ldr	r4, [pc, #76]	; (8afc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x430>)
    8ab0:	4603      	mov	r3, r0
    8ab2:	460d      	mov	r5, r1
    8ab4:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
    8ab8:	2000      	movs	r0, #0
    8aba:	b15a      	cbz	r2, 8ad4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x408>
    8abc:	4621      	mov	r1, r4
    8abe:	f891 1020 	ldrb.w	r1, [r1, #32]
    8ac2:	b163      	cbz	r3, 8ade <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x412>
    8ac4:	2b01      	cmp	r3, #1
    8ac6:	d111      	bne.n	8aec <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x420>
    8ac8:	2a01      	cmp	r2, #1
    8aca:	4628      	mov	r0, r5
    8acc:	d012      	beq.n	8af4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x428>
    8ace:	f007 ffe8 	bl	10aa2 <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>
    8ad2:	e009      	b.n	8ae8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x41c>
    8ad4:	f640 016e 	movw	r1, #2158	; 0x86e
    8ad8:	203e      	movs	r0, #62	; 0x3e
    8ada:	f7f8 fc8f 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8ade:	2a01      	cmp	r2, #1
    8ae0:	4628      	mov	r0, r5
    8ae2:	d004      	beq.n	8aee <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x422>
    8ae4:	f007 ffeb 	bl	10abe <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>
    8ae8:	69e1      	ldr	r1, [r4, #28]
    8aea:	4408      	add	r0, r1
    8aec:	bd70      	pop	{r4, r5, r6, pc}
    8aee:	f000 f8d1 	bl	8c94 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>
    8af2:	e7f9      	b.n	8ae8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x41c>
    8af4:	f000 f8c0 	bl	8c78 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>
    8af8:	e7f6      	b.n	8ae8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x41c>
    8afa:	0000      	.short	0x0000
    8afc:	20000bf4 	.word	0x20000bf4
    8b00:	b510      	push	{r4, lr}
    8b02:	f7ff fbef 	bl	82e4 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    8b06:	f7ff fde7 	bl	86d8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    8b0a:	f7ff fe1d 	bl	8748 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x7c>
    8b0e:	f7ff ff53 	bl	89b8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2ec>
    8b12:	f008 f928 	bl	10d66 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    8b16:	2800      	cmp	r0, #0
    8b18:	d108      	bne.n	8b2c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x460>
    8b1a:	f008 f914 	bl	10d46 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    8b1e:	2800      	cmp	r0, #0
    8b20:	d104      	bne.n	8b2c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x460>
    8b22:	4803      	ldr	r0, [pc, #12]	; (8b30 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x464>)
    8b24:	6801      	ldr	r1, [r0, #0]
    8b26:	f441 21c0 	orr.w	r1, r1, #393216	; 0x60000
    8b2a:	6001      	str	r1, [r0, #0]
    8b2c:	bd10      	pop	{r4, pc}
    8b2e:	0000      	.short	0x0000
    8b30:	40001568 	.word	0x40001568
    8b34:	b510      	push	{r4, lr}
    8b36:	4604      	mov	r4, r0
    8b38:	f7ff fbd4 	bl	82e4 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    8b3c:	f7ff fdcc 	bl	86d8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    8b40:	4620      	mov	r0, r4
    8b42:	f7ff fde7 	bl	8714 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x48>
    8b46:	f008 f90e 	bl	10d66 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    8b4a:	2800      	cmp	r0, #0
    8b4c:	d00d      	beq.n	8b6a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x49e>
    8b4e:	4a09      	ldr	r2, [pc, #36]	; (8b74 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4a8>)
    8b50:	6811      	ldr	r1, [r2, #0]
    8b52:	0650      	lsls	r0, r2, #25
    8b54:	2c02      	cmp	r4, #2
    8b56:	f8d0 0320 	ldr.w	r0, [r0, #800]	; 0x320
    8b5a:	d007      	beq.n	8b6c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4a0>
    8b5c:	f3c0 2006 	ubfx	r0, r0, #8, #7
    8b60:	f421 41fe 	bic.w	r1, r1, #32512	; 0x7f00
    8b64:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    8b68:	6010      	str	r0, [r2, #0]
    8b6a:	bd10      	pop	{r4, pc}
    8b6c:	f3c0 6006 	ubfx	r0, r0, #24, #7
    8b70:	e7f6      	b.n	8b60 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x494>
    8b72:	0000      	.short	0x0000
    8b74:	40001588 	.word	0x40001588
    8b78:	a62c0000 	.word	0xa62c0000
    8b7c:	0604a1e0 	.word	0x0604a1e0
    8b80:	0e0c0a08 	.word	0x0e0c0a08
    8b84:	16141210 	.word	0x16141210
    8b88:	201e1c18 	.word	0x201e1c18
    8b8c:	28262422 	.word	0x28262422
    8b90:	302e2c2a 	.word	0x302e2c2a
    8b94:	38363432 	.word	0x38363432
    8b98:	403e3c3a 	.word	0x403e3c3a
    8b9c:	48464442 	.word	0x48464442
    8ba0:	024e4c4a 	.word	0x024e4c4a
    8ba4:	0000501a 	.word	0x0000501a
    8ba8:	00000001 	.word	0x00000001
    8bac:	40001110 	.word	0x40001110
	...
    8bc4:	00001e14 	.word	0x00001e14
    8bc8:	00001130 	.word	0x00001130
    8bcc:	00000000 	.word	0x00000000
    8bd0:	00000028 	.word	0x00000028
    8bd4:	00000018 	.word	0x00000018
    8bd8:	00000000 	.word	0x00000000
    8bdc:	00001e14 	.word	0x00001e14
    8be0:	00001130 	.word	0x00001130
    8be4:	00000000 	.word	0x00000000
    8be8:	00001770 	.word	0x00001770
    8bec:	00000fa0 	.word	0x00000fa0

00008bf0 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>:
    8bf0:	b570      	push	{r4, r5, r6, lr}
    8bf2:	4605      	mov	r5, r0
    8bf4:	4614      	mov	r4, r2
    8bf6:	4608      	mov	r0, r1
    8bf8:	f7ff fb9a 	bl	8330 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    8bfc:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    8c00:	ebc1 11c5 	rsb	r1, r1, r5, lsl #7
    8c04:	ebc0 01c1 	rsb	r1, r0, r1, lsl #3
    8c08:	4807      	ldr	r0, [pc, #28]	; (8c28 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA+0x38>)
    8c0a:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    8c0e:	4408      	add	r0, r1
    8c10:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    8c14:	f600 30b7 	addw	r0, r0, #2999	; 0xbb7
    8c18:	fbb0 f5f1 	udiv	r5, r0, r1
    8c1c:	4620      	mov	r0, r4
    8c1e:	f7ff fb5b 	bl	82d8 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    8c22:	4428      	add	r0, r5
    8c24:	1d40      	adds	r0, r0, #5
    8c26:	bd70      	pop	{r4, r5, r6, pc}
    8c28:	00008cb8 	.word	0x00008cb8

00008c2c <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>:
    8c2c:	b570      	push	{r4, r5, r6, lr}
    8c2e:	4d0e      	ldr	r5, [pc, #56]	; (8c68 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x3c>)
    8c30:	461c      	mov	r4, r3
    8c32:	3d08      	subs	r5, #8
    8c34:	4b0c      	ldr	r3, [pc, #48]	; (8c68 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x3c>)
    8c36:	f835 1011 	ldrh.w	r1, [r5, r1, lsl #1]
    8c3a:	eb00 0540 	add.w	r5, r0, r0, lsl #1
    8c3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8c42:	ebc5 10c0 	rsb	r0, r5, r0, lsl #7
    8c46:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    8c4a:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    8c4e:	4418      	add	r0, r3
    8c50:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    8c54:	fbb0 f5f1 	udiv	r5, r0, r1
    8c58:	4610      	mov	r0, r2
    8c5a:	f7ff fb3d 	bl	82d8 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    8c5e:	4428      	add	r0, r5
    8c60:	4420      	add	r0, r4
    8c62:	1d40      	adds	r0, r0, #5
    8c64:	bd70      	pop	{r4, r5, r6, pc}
    8c66:	0000      	.short	0x0000
    8c68:	00008cb8 	.word	0x00008cb8

00008c6c <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>:
    8c6c:	4901      	ldr	r1, [pc, #4]	; (8c74 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA+0x8>)
    8c6e:	b2c0      	uxtb	r0, r0
    8c70:	6008      	str	r0, [r1, #0]
    8c72:	4770      	bx	lr
    8c74:	4000150c 	.word	0x4000150c

00008c78 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>:
    8c78:	4a05      	ldr	r2, [pc, #20]	; (8c90 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0x18>)
    8c7a:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
    8c7e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    8c82:	f201 31e7 	addw	r1, r1, #999	; 0x3e7
    8c86:	fbb1 f1f2 	udiv	r1, r1, r2
    8c8a:	4408      	add	r0, r1
    8c8c:	1e80      	subs	r0, r0, #2
    8c8e:	4770      	bx	lr
    8c90:	00008cb0 	.word	0x00008cb0

00008c94 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>:
    8c94:	4a05      	ldr	r2, [pc, #20]	; (8cac <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0x18>)
    8c96:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
    8c9a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    8c9e:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
    8ca2:	fbb1 f1f2 	udiv	r1, r1, r2
    8ca6:	4408      	add	r0, r1
    8ca8:	4770      	bx	lr
    8caa:	0000      	.short	0x0000
    8cac:	00008cb0 	.word	0x00008cb0
    8cb0:	05dc0000 	.word	0x05dc0000
    8cb4:	000003e8 	.word	0x000003e8
    8cb8:	00000000 	.word	0x00000000
    8cbc:	00001e14 	.word	0x00001e14
    8cc0:	00001130 	.word	0x00001130

00008cc4 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ>:
    8cc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8cc8:	461e      	mov	r6, r3
    8cca:	4617      	mov	r7, r2
    8ccc:	460c      	mov	r4, r1
    8cce:	4605      	mov	r5, r0
    8cd0:	f000 f856 	bl	8d80 <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA>
    8cd4:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 8d7c <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0xb8>
    8cd8:	4680      	mov	r8, r0
    8cda:	f899 0000 	ldrb.w	r0, [r9]
    8cde:	42a8      	cmp	r0, r5
    8ce0:	d110      	bne.n	8d04 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    8ce2:	f899 1001 	ldrb.w	r1, [r9, #1]
    8ce6:	4648      	mov	r0, r9
    8ce8:	42a1      	cmp	r1, r4
    8cea:	d10b      	bne.n	8d04 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    8cec:	f990 1002 	ldrsb.w	r1, [r0, #2]
    8cf0:	42b9      	cmp	r1, r7
    8cf2:	d107      	bne.n	8d04 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    8cf4:	78c2      	ldrb	r2, [r0, #3]
    8cf6:	4542      	cmp	r2, r8
    8cf8:	d104      	bne.n	8d04 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    8cfa:	8881      	ldrh	r1, [r0, #4]
    8cfc:	8031      	strh	r1, [r6, #0]
    8cfe:	7980      	ldrb	r0, [r0, #6]
    8d00:	70b0      	strb	r0, [r6, #2]
    8d02:	e037      	b.n	8d74 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0xb0>
    8d04:	463a      	mov	r2, r7
    8d06:	4621      	mov	r1, r4
    8d08:	2d01      	cmp	r5, #1
    8d0a:	d009      	beq.n	8d20 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x5c>
    8d0c:	2d02      	cmp	r5, #2
    8d0e:	d009      	beq.n	8d24 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x60>
    8d10:	2d04      	cmp	r5, #4
    8d12:	d009      	beq.n	8d28 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x64>
    8d14:	2d08      	cmp	r5, #8
    8d16:	d009      	beq.n	8d2c <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x68>
    8d18:	f240 4162 	movw	r1, #1122	; 0x462
    8d1c:	2006      	movs	r0, #6
    8d1e:	e00c      	b.n	8d3a <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x76>
    8d20:	2000      	movs	r0, #0
    8d22:	e004      	b.n	8d2e <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    8d24:	2001      	movs	r0, #1
    8d26:	e002      	b.n	8d2e <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    8d28:	2003      	movs	r0, #3
    8d2a:	e000      	b.n	8d2e <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    8d2c:	2002      	movs	r0, #2
    8d2e:	466b      	mov	r3, sp
    8d30:	f000 f89e 	bl	8e70 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ>
    8d34:	b118      	cbz	r0, 8d3e <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x7a>
    8d36:	213d      	movs	r1, #61	; 0x3d
    8d38:	2075      	movs	r0, #117	; 0x75
    8d3a:	f7f8 fb5f 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8d3e:	4620      	mov	r0, r4
    8d40:	f7ff f872 	bl	7e28 <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I>
    8d44:	4602      	mov	r2, r0
    8d46:	2300      	movs	r3, #0
    8d48:	4631      	mov	r1, r6
    8d4a:	f99d 0000 	ldrsb.w	r0, [sp]
    8d4e:	f003 fda5 	bl	c89c <mpsl_fem_tx_power_split>
    8d52:	4601      	mov	r1, r0
    8d54:	f889 1007 	strb.w	r1, [r9, #7]
    8d58:	8831      	ldrh	r1, [r6, #0]
    8d5a:	f8a9 1004 	strh.w	r1, [r9, #4]
    8d5e:	78b1      	ldrb	r1, [r6, #2]
    8d60:	f889 1006 	strb.w	r1, [r9, #6]
    8d64:	f889 5000 	strb.w	r5, [r9]
    8d68:	f889 4001 	strb.w	r4, [r9, #1]
    8d6c:	f889 7002 	strb.w	r7, [r9, #2]
    8d70:	f889 8003 	strb.w	r8, [r9, #3]
    8d74:	f999 0007 	ldrsb.w	r0, [r9, #7]
    8d78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    8d7c:	20000378 	.word	0x20000378

00008d80 <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA>:
    8d80:	4801      	ldr	r0, [pc, #4]	; (8d88 <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA+0x8>)
    8d82:	7800      	ldrb	r0, [r0, #0]
    8d84:	4770      	bx	lr
    8d86:	0000      	.short	0x0000
    8d88:	200002dc 	.word	0x200002dc

00008d8c <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>:
    8d8c:	b570      	push	{r4, r5, r6, lr}
    8d8e:	4c17      	ldr	r4, [pc, #92]	; (8dec <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x60>)
    8d90:	7860      	ldrb	r0, [r4, #1]
    8d92:	2800      	cmp	r0, #0
    8d94:	d123      	bne.n	8dde <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x52>
    8d96:	2001      	movs	r0, #1
    8d98:	7060      	strb	r0, [r4, #1]
    8d9a:	f007 ffbe 	bl	10d1a <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    8d9e:	f06f 0527 	mvn.w	r5, #39	; 0x27
    8da2:	b928      	cbnz	r0, 8db0 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x24>
    8da4:	f007 ffef 	bl	10d86 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    8da8:	b910      	cbnz	r0, 8db0 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x24>
    8daa:	f007 fff6 	bl	10d9a <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    8dae:	b120      	cbz	r0, 8dba <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x2e>
    8db0:	480f      	ldr	r0, [pc, #60]	; (8df0 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x64>)
    8db2:	6060      	str	r0, [r4, #4]
    8db4:	70a5      	strb	r5, [r4, #2]
    8db6:	2008      	movs	r0, #8
    8db8:	e010      	b.n	8ddc <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x50>
    8dba:	f007 ff83 	bl	10cc4 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    8dbe:	b940      	cbnz	r0, 8dd2 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x46>
    8dc0:	f007 ff8a 	bl	10cd8 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    8dc4:	b928      	cbnz	r0, 8dd2 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x46>
    8dc6:	f007 ff9e 	bl	10d06 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    8dca:	b910      	cbnz	r0, 8dd2 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x46>
    8dcc:	f007 ffaf 	bl	10d2e <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    8dd0:	b130      	cbz	r0, 8de0 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x54>
    8dd2:	4807      	ldr	r0, [pc, #28]	; (8df0 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x64>)
    8dd4:	3031      	adds	r0, #49	; 0x31
    8dd6:	6060      	str	r0, [r4, #4]
    8dd8:	70a5      	strb	r5, [r4, #2]
    8dda:	2004      	movs	r0, #4
    8ddc:	70e0      	strb	r0, [r4, #3]
    8dde:	bd70      	pop	{r4, r5, r6, pc}
    8de0:	f240 113f 	movw	r1, #319	; 0x13f
    8de4:	2074      	movs	r0, #116	; 0x74
    8de6:	f003 fb99 	bl	c51c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    8dea:	0000      	.short	0x0000
    8dec:	200002dc 	.word	0x200002dc
    8df0:	000110bb 	.word	0x000110bb

00008df4 <mpsl_tx_power_radio_supported_power_adjust>:
    8df4:	4a06      	ldr	r2, [pc, #24]	; (8e10 <mpsl_tx_power_radio_supported_power_adjust+0x1c>)
    8df6:	b500      	push	{lr}
    8df8:	f992 2003 	ldrsb.w	r2, [r2, #3]
    8dfc:	4290      	cmp	r0, r2
    8dfe:	db01      	blt.n	8e04 <mpsl_tx_power_radio_supported_power_adjust+0x10>
    8e00:	4610      	mov	r0, r2
    8e02:	bd00      	pop	{pc}
    8e04:	f000 f808 	bl	8e18 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ>
    8e08:	4902      	ldr	r1, [pc, #8]	; (8e14 <mpsl_tx_power_radio_supported_power_adjust+0x20>)
    8e0a:	5608      	ldrsb	r0, [r1, r0]
    8e0c:	bd00      	pop	{pc}
    8e0e:	0000      	.short	0x0000
    8e10:	200002dc 	.word	0x200002dc
    8e14:	000110ad 	.word	0x000110ad

00008e18 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ>:
    8e18:	4602      	mov	r2, r0
    8e1a:	4813      	ldr	r0, [pc, #76]	; (8e68 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x50>)
    8e1c:	b510      	push	{r4, lr}
    8e1e:	f990 3003 	ldrsb.w	r3, [r0, #3]
    8e22:	429a      	cmp	r2, r3
    8e24:	db01      	blt.n	8e2a <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x12>
    8e26:	200d      	movs	r0, #13
    8e28:	bd10      	pop	{r4, pc}
    8e2a:	f990 3002 	ldrsb.w	r3, [r0, #2]
    8e2e:	429a      	cmp	r2, r3
    8e30:	dc01      	bgt.n	8e36 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1e>
    8e32:	2000      	movs	r0, #0
    8e34:	bd10      	pop	{r4, pc}
    8e36:	b101      	cbz	r1, 8e3a <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x22>
    8e38:	2101      	movs	r1, #1
    8e3a:	1ad4      	subs	r4, r2, r3
    8e3c:	6843      	ldr	r3, [r0, #4]
    8e3e:	5d18      	ldrb	r0, [r3, r4]
    8e40:	4c0a      	ldr	r4, [pc, #40]	; (8e6c <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x54>)
    8e42:	5624      	ldrsb	r4, [r4, r0]
    8e44:	4294      	cmp	r4, r2
    8e46:	d0f5      	beq.n	8e34 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
    8e48:	4c08      	ldr	r4, [pc, #32]	; (8e6c <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x54>)
    8e4a:	4408      	add	r0, r1
    8e4c:	343f      	adds	r4, #63	; 0x3f
    8e4e:	b2c0      	uxtb	r0, r0
    8e50:	b2d2      	uxtb	r2, r2
    8e52:	42a3      	cmp	r3, r4
    8e54:	d1ee      	bne.n	8e34 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
    8e56:	2900      	cmp	r1, #0
    8e58:	d0ec      	beq.n	8e34 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
    8e5a:	2a01      	cmp	r2, #1
    8e5c:	d001      	beq.n	8e62 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x4a>
    8e5e:	2a02      	cmp	r2, #2
    8e60:	d1e8      	bne.n	8e34 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
    8e62:	1c40      	adds	r0, r0, #1
    8e64:	b2c0      	uxtb	r0, r0
    8e66:	bd10      	pop	{r4, pc}
    8e68:	200002dc 	.word	0x200002dc
    8e6c:	000110ad 	.word	0x000110ad

00008e70 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ>:
    8e70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8e74:	461c      	mov	r4, r3
    8e76:	4690      	mov	r8, r2
    8e78:	460d      	mov	r5, r1
    8e7a:	4606      	mov	r6, r0
    8e7c:	f06f 0715 	mvn.w	r7, #21
    8e80:	2804      	cmp	r0, #4
    8e82:	d804      	bhi.n	8e8e <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1e>
    8e84:	b11c      	cbz	r4, 8e8e <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1e>
    8e86:	f007 fe25 	bl	10ad4 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x16>
    8e8a:	42a8      	cmp	r0, r5
    8e8c:	d802      	bhi.n	8e94 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x24>
    8e8e:	4638      	mov	r0, r7
    8e90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8e94:	4805      	ldr	r0, [pc, #20]	; (8eac <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x3c>)
    8e96:	4642      	mov	r2, r8
    8e98:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
    8e9c:	b118      	cbz	r0, 8ea6 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x36>
    8e9e:	5740      	ldrsb	r0, [r0, r5]
    8ea0:	4282      	cmp	r2, r0
    8ea2:	dd00      	ble.n	8ea6 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x36>
    8ea4:	4602      	mov	r2, r0
    8ea6:	7022      	strb	r2, [r4, #0]
    8ea8:	2000      	movs	r0, #0
    8eaa:	e7f1      	b.n	8e90 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x20>
    8eac:	20000c2c 	.word	0x20000c2c

00008eb0 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>:
    8eb0:	4801      	ldr	r0, [pc, #4]	; (8eb8 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A+0x8>)
    8eb2:	7800      	ldrb	r0, [r0, #0]
    8eb4:	4770      	bx	lr
    8eb6:	0000      	.short	0x0000
    8eb8:	200002e4 	.word	0x200002e4

00008ebc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>:
    8ebc:	4905      	ldr	r1, [pc, #20]	; (8ed4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x18>)
    8ebe:	780a      	ldrb	r2, [r1, #0]
    8ec0:	4290      	cmp	r0, r2
    8ec2:	d301      	bcc.n	8ec8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc>
    8ec4:	2000      	movs	r0, #0
    8ec6:	4770      	bx	lr
    8ec8:	6849      	ldr	r1, [r1, #4]
    8eca:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    8ece:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    8ed2:	4770      	bx	lr
    8ed4:	200002e4 	.word	0x200002e4

00008ed8 <MPSL_IRQ_RADIO_Handler>:
    8ed8:	490e      	ldr	r1, [pc, #56]	; (8f14 <MPSL_IRQ_RADIO_Handler+0x3c>)
    8eda:	b510      	push	{r4, lr}
    8edc:	f891 0032 	ldrb.w	r0, [r1, #50]	; 0x32
    8ee0:	2820      	cmp	r0, #32
    8ee2:	d012      	beq.n	8f0a <MPSL_IRQ_RADIO_Handler+0x32>
    8ee4:	f891 0032 	ldrb.w	r0, [r1, #50]	; 0x32
    8ee8:	f5a1 6280 	sub.w	r2, r1, #1024	; 0x400
    8eec:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    8ef0:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    8ef4:	f891 1032 	ldrb.w	r1, [r1, #50]	; 0x32
    8ef8:	6840      	ldr	r0, [r0, #4]
    8efa:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    8efe:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
    8f02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8f06:	2104      	movs	r1, #4
    8f08:	4710      	bx	r2
    8f0a:	f640 01bc 	movw	r1, #2236	; 0x8bc
    8f0e:	2070      	movs	r0, #112	; 0x70
    8f10:	f003 fb04 	bl	c51c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    8f14:	20001040 	.word	0x20001040
    8f18:	b570      	push	{r4, r5, r6, lr}
    8f1a:	4605      	mov	r5, r0
    8f1c:	2a20      	cmp	r2, #32
    8f1e:	d028      	beq.n	8f72 <MPSL_IRQ_RADIO_Handler+0x9a>
    8f20:	4819      	ldr	r0, [pc, #100]	; (8f88 <MPSL_IRQ_RADIO_Handler+0xb0>)
    8f22:	4c1a      	ldr	r4, [pc, #104]	; (8f8c <MPSL_IRQ_RADIO_Handler+0xb4>)
    8f24:	eb00 1c83 	add.w	ip, r0, r3, lsl #6
    8f28:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    8f2c:	eb0c 0042 	add.w	r0, ip, r2, lsl #1
    8f30:	4423      	add	r3, r4
    8f32:	2920      	cmp	r1, #32
    8f34:	d022      	beq.n	8f7c <MPSL_IRQ_RADIO_Handler+0xa4>
    8f36:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
    8f3a:	7840      	ldrb	r0, [r0, #1]
    8f3c:	784c      	ldrb	r4, [r1, #1]
    8f3e:	7048      	strb	r0, [r1, #1]
    8f40:	4620      	mov	r0, r4
    8f42:	4601      	mov	r1, r0
    8f44:	eb0c 0041 	add.w	r0, ip, r1, lsl #1
    8f48:	4291      	cmp	r1, r2
    8f4a:	7005      	strb	r5, [r0, #0]
    8f4c:	7840      	ldrb	r0, [r0, #1]
    8f4e:	d1f8      	bne.n	8f42 <MPSL_IRQ_RADIO_Handler+0x6a>
    8f50:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
    8f54:	2a20      	cmp	r2, #32
    8f56:	bf1a      	itte	ne
    8f58:	eb0c 0242 	addne.w	r2, ip, r2, lsl #1
    8f5c:	7054      	strbne	r4, [r2, #1]
    8f5e:	f883 4021 	strbeq.w	r4, [r3, #33]	; 0x21
    8f62:	2220      	movs	r2, #32
    8f64:	eb0c 0c41 	add.w	ip, ip, r1, lsl #1
    8f68:	f88c 2001 	strb.w	r2, [ip, #1]
    8f6c:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
    8f70:	bd70      	pop	{r4, r5, r6, pc}
    8f72:	f44f 7126 	mov.w	r1, #664	; 0x298
    8f76:	2070      	movs	r0, #112	; 0x70
    8f78:	f003 fad0 	bl	c51c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    8f7c:	f893 4020 	ldrb.w	r4, [r3, #32]
    8f80:	7840      	ldrb	r0, [r0, #1]
    8f82:	f883 0020 	strb.w	r0, [r3, #32]
    8f86:	e7db      	b.n	8f40 <MPSL_IRQ_RADIO_Handler+0x68>
    8f88:	20000fc0 	.word	0x20000fc0
    8f8c:	20001040 	.word	0x20001040
    8f90:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8f94:	b08d      	sub	sp, #52	; 0x34
    8f96:	4615      	mov	r5, r2
    8f98:	460c      	mov	r4, r1
    8f9a:	f002 f9e9 	bl	b370 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    8f9e:	4428      	add	r0, r5
    8fa0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    8fa4:	9008      	str	r0, [sp, #32]
    8fa6:	6821      	ldr	r1, [r4, #0]
    8fa8:	1a08      	subs	r0, r1, r0
    8faa:	0200      	lsls	r0, r0, #8
    8fac:	17c1      	asrs	r1, r0, #31
    8fae:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    8fb2:	1200      	asrs	r0, r0, #8
    8fb4:	2800      	cmp	r0, #0
    8fb6:	f300 80f0 	bgt.w	919a <MPSL_IRQ_RADIO_Handler+0x2c2>
    8fba:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
    8fbe:	48cd      	ldr	r0, [pc, #820]	; (92f4 <MPSL_IRQ_RADIO_Handler+0x41c>)
    8fc0:	eb08 0148 	add.w	r1, r8, r8, lsl #1
    8fc4:	4408      	add	r0, r1
    8fc6:	9009      	str	r0, [sp, #36]	; 0x24
    8fc8:	f890 5020 	ldrb.w	r5, [r0, #32]
    8fcc:	2020      	movs	r0, #32
    8fce:	4eca      	ldr	r6, [pc, #808]	; (92f8 <MPSL_IRQ_RADIO_Handler+0x420>)
    8fd0:	f10d 0a18 	add.w	sl, sp, #24
    8fd4:	f10d 091c 	add.w	r9, sp, #28
    8fd8:	f88d 0018 	strb.w	r0, [sp, #24]
    8fdc:	2d20      	cmp	r5, #32
    8fde:	bf1c      	itt	ne
    8fe0:	48c6      	ldrne	r0, [pc, #792]	; (92fc <MPSL_IRQ_RADIO_Handler+0x424>)
    8fe2:	eb00 1b88 	addne.w	fp, r0, r8, lsl #6
    8fe6:	d038      	beq.n	905a <MPSL_IRQ_RADIO_Handler+0x182>
    8fe8:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    8fec:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    8ff0:	f100 0108 	add.w	r1, r0, #8
    8ff4:	68c0      	ldr	r0, [r0, #12]
    8ff6:	6827      	ldr	r7, [r4, #0]
    8ff8:	1a38      	subs	r0, r7, r0
    8ffa:	0200      	lsls	r0, r0, #8
    8ffc:	17c2      	asrs	r2, r0, #31
    8ffe:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    9002:	1200      	asrs	r0, r0, #8
    9004:	d429      	bmi.n	905a <MPSL_IRQ_RADIO_Handler+0x182>
    9006:	89e0      	ldrh	r0, [r4, #14]
    9008:	b300      	cbz	r0, 904c <MPSL_IRQ_RADIO_Handler+0x174>
    900a:	89c8      	ldrh	r0, [r1, #14]
    900c:	b9f0      	cbnz	r0, 904c <MPSL_IRQ_RADIO_Handler+0x174>
    900e:	6808      	ldr	r0, [r1, #0]
    9010:	9003      	str	r0, [sp, #12]
    9012:	f003 f8c5 	bl	c1a0 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    9016:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    901a:	bf08      	it	eq
    901c:	200d      	moveq	r0, #13
    901e:	d00b      	beq.n	9038 <MPSL_IRQ_RADIO_Handler+0x160>
    9020:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    9024:	3856      	subs	r0, #86	; 0x56
    9026:	bf08      	it	eq
    9028:	201c      	moveq	r0, #28
    902a:	d005      	beq.n	9038 <MPSL_IRQ_RADIO_Handler+0x160>
    902c:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    9030:	389f      	subs	r0, #159	; 0x9f
    9032:	bf14      	ite	ne
    9034:	2000      	movne	r0, #0
    9036:	2032      	moveq	r0, #50	; 0x32
    9038:	1c41      	adds	r1, r0, #1
    903a:	9803      	ldr	r0, [sp, #12]
    903c:	1a38      	subs	r0, r7, r0
    903e:	0200      	lsls	r0, r0, #8
    9040:	17c2      	asrs	r2, r0, #31
    9042:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    9046:	1200      	asrs	r0, r0, #8
    9048:	4288      	cmp	r0, r1
    904a:	db06      	blt.n	905a <MPSL_IRQ_RADIO_Handler+0x182>
    904c:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    9050:	f88a 5000 	strb.w	r5, [sl]
    9054:	7845      	ldrb	r5, [r0, #1]
    9056:	2d20      	cmp	r5, #32
    9058:	d1c6      	bne.n	8fe8 <MPSL_IRQ_RADIO_Handler+0x110>
    905a:	f89a 0000 	ldrb.w	r0, [sl]
    905e:	f889 0000 	strb.w	r0, [r9]
    9062:	2d20      	cmp	r5, #32
    9064:	bf1c      	itt	ne
    9066:	48a5      	ldrne	r0, [pc, #660]	; (92fc <MPSL_IRQ_RADIO_Handler+0x424>)
    9068:	eb00 1b88 	addne.w	fp, r0, r8, lsl #6
    906c:	f000 813e 	beq.w	92ec <MPSL_IRQ_RADIO_Handler+0x414>
    9070:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    9074:	eb06 0780 	add.w	r7, r6, r0, lsl #2
    9078:	6861      	ldr	r1, [r4, #4]
    907a:	f8d7 8008 	ldr.w	r8, [r7, #8]
    907e:	f107 0008 	add.w	r0, r7, #8
    9082:	eba8 0101 	sub.w	r1, r8, r1
    9086:	0209      	lsls	r1, r1, #8
    9088:	17ca      	asrs	r2, r1, #31
    908a:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    908e:	1209      	asrs	r1, r1, #8
    9090:	d427      	bmi.n	90e2 <MPSL_IRQ_RADIO_Handler+0x20a>
    9092:	89c0      	ldrh	r0, [r0, #14]
    9094:	2800      	cmp	r0, #0
    9096:	f000 8129 	beq.w	92ec <MPSL_IRQ_RADIO_Handler+0x414>
    909a:	89e0      	ldrh	r0, [r4, #14]
    909c:	2800      	cmp	r0, #0
    909e:	f040 8125 	bne.w	92ec <MPSL_IRQ_RADIO_Handler+0x414>
    90a2:	f8d4 a000 	ldr.w	sl, [r4]
    90a6:	f003 f87b 	bl	c1a0 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    90aa:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    90ae:	bf08      	it	eq
    90b0:	200d      	moveq	r0, #13
    90b2:	d00b      	beq.n	90cc <MPSL_IRQ_RADIO_Handler+0x1f4>
    90b4:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    90b8:	3856      	subs	r0, #86	; 0x56
    90ba:	bf08      	it	eq
    90bc:	201c      	moveq	r0, #28
    90be:	d005      	beq.n	90cc <MPSL_IRQ_RADIO_Handler+0x1f4>
    90c0:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    90c4:	389f      	subs	r0, #159	; 0x9f
    90c6:	bf14      	ite	ne
    90c8:	2000      	movne	r0, #0
    90ca:	2032      	moveq	r0, #50	; 0x32
    90cc:	1c41      	adds	r1, r0, #1
    90ce:	eba8 000a 	sub.w	r0, r8, sl
    90d2:	0200      	lsls	r0, r0, #8
    90d4:	17c2      	asrs	r2, r0, #31
    90d6:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    90da:	1200      	asrs	r0, r0, #8
    90dc:	4288      	cmp	r0, r1
    90de:	f280 8105 	bge.w	92ec <MPSL_IRQ_RADIO_Handler+0x414>
    90e2:	f889 5000 	strb.w	r5, [r9]
    90e6:	7e38      	ldrb	r0, [r7, #24]
    90e8:	7c21      	ldrb	r1, [r4, #16]
    90ea:	4288      	cmp	r0, r1
    90ec:	d906      	bls.n	90fc <MPSL_IRQ_RADIO_Handler+0x224>
    90ee:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    90f2:	7845      	ldrb	r5, [r0, #1]
    90f4:	2d20      	cmp	r5, #32
    90f6:	d1bb      	bne.n	9070 <MPSL_IRQ_RADIO_Handler+0x198>
    90f8:	f000 b8f8 	b.w	92ec <MPSL_IRQ_RADIO_Handler+0x414>
    90fc:	f89d 001c 	ldrb.w	r0, [sp, #28]
    9100:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    9104:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    9108:	8ac1      	ldrh	r1, [r0, #22]
    910a:	68c5      	ldr	r5, [r0, #12]
    910c:	bbe1      	cbnz	r1, 9188 <MPSL_IRQ_RADIO_Handler+0x2b0>
    910e:	89e1      	ldrh	r1, [r4, #14]
    9110:	b3d1      	cbz	r1, 9188 <MPSL_IRQ_RADIO_Handler+0x2b0>
    9112:	6887      	ldr	r7, [r0, #8]
    9114:	f003 f844 	bl	c1a0 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    9118:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    911c:	bf08      	it	eq
    911e:	200d      	moveq	r0, #13
    9120:	d00b      	beq.n	913a <MPSL_IRQ_RADIO_Handler+0x262>
    9122:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    9126:	3856      	subs	r0, #86	; 0x56
    9128:	bf08      	it	eq
    912a:	201c      	moveq	r0, #28
    912c:	d005      	beq.n	913a <MPSL_IRQ_RADIO_Handler+0x262>
    912e:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    9132:	389f      	subs	r0, #159	; 0x9f
    9134:	bf14      	ite	ne
    9136:	2000      	movne	r0, #0
    9138:	2032      	moveq	r0, #50	; 0x32
    913a:	1c41      	adds	r1, r0, #1
    913c:	1be8      	subs	r0, r5, r7
    913e:	0200      	lsls	r0, r0, #8
    9140:	17c2      	asrs	r2, r0, #31
    9142:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    9146:	1200      	asrs	r0, r0, #8
    9148:	4288      	cmp	r0, r1
    914a:	da1d      	bge.n	9188 <MPSL_IRQ_RADIO_Handler+0x2b0>
    914c:	f003 f828 	bl	c1a0 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    9150:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    9154:	bf08      	it	eq
    9156:	200d      	moveq	r0, #13
    9158:	d00b      	beq.n	9172 <MPSL_IRQ_RADIO_Handler+0x29a>
    915a:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    915e:	3856      	subs	r0, #86	; 0x56
    9160:	bf08      	it	eq
    9162:	201c      	moveq	r0, #28
    9164:	d005      	beq.n	9172 <MPSL_IRQ_RADIO_Handler+0x29a>
    9166:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    916a:	389f      	subs	r0, #159	; 0x9f
    916c:	bf14      	ite	ne
    916e:	2000      	movne	r0, #0
    9170:	2032      	moveq	r0, #50	; 0x32
    9172:	f89d 101c 	ldrb.w	r1, [sp, #28]
    9176:	1c40      	adds	r0, r0, #1
    9178:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    917c:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    9180:	6889      	ldr	r1, [r1, #8]
    9182:	4408      	add	r0, r1
    9184:	f020 457f 	bic.w	r5, r0, #4278190080	; 0xff000000
    9188:	9808      	ldr	r0, [sp, #32]
    918a:	1a28      	subs	r0, r5, r0
    918c:	0200      	lsls	r0, r0, #8
    918e:	17c1      	asrs	r1, r0, #31
    9190:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    9194:	1200      	asrs	r0, r0, #8
    9196:	2800      	cmp	r0, #0
    9198:	dd03      	ble.n	91a2 <MPSL_IRQ_RADIO_Handler+0x2ca>
    919a:	b011      	add	sp, #68	; 0x44
    919c:	2000      	movs	r0, #0
    919e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    91a2:	6820      	ldr	r0, [r4, #0]
    91a4:	42a8      	cmp	r0, r5
    91a6:	d902      	bls.n	91ae <MPSL_IRQ_RADIO_Handler+0x2d6>
    91a8:	68a1      	ldr	r1, [r4, #8]
    91aa:	1c49      	adds	r1, r1, #1
    91ac:	60a1      	str	r1, [r4, #8]
    91ae:	6861      	ldr	r1, [r4, #4]
    91b0:	f10d 0a18 	add.w	sl, sp, #24
    91b4:	1a08      	subs	r0, r1, r0
    91b6:	4428      	add	r0, r5
    91b8:	f025 417f 	bic.w	r1, r5, #4278190080	; 0xff000000
    91bc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    91c0:	e9c4 1000 	strd	r1, r0, [r4]
    91c4:	9810      	ldr	r0, [sp, #64]	; 0x40
    91c6:	900b      	str	r0, [sp, #44]	; 0x2c
    91c8:	9809      	ldr	r0, [sp, #36]	; 0x24
    91ca:	f10d 081c 	add.w	r8, sp, #28
    91ce:	f890 5020 	ldrb.w	r5, [r0, #32]
    91d2:	2020      	movs	r0, #32
    91d4:	f88d 0018 	strb.w	r0, [sp, #24]
    91d8:	2d20      	cmp	r5, #32
    91da:	d03c      	beq.n	9256 <MPSL_IRQ_RADIO_Handler+0x37e>
    91dc:	4947      	ldr	r1, [pc, #284]	; (92fc <MPSL_IRQ_RADIO_Handler+0x424>)
    91de:	980b      	ldr	r0, [sp, #44]	; 0x2c
    91e0:	eb01 1b80 	add.w	fp, r1, r0, lsl #6
    91e4:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    91e8:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    91ec:	f100 0108 	add.w	r1, r0, #8
    91f0:	68c0      	ldr	r0, [r0, #12]
    91f2:	6827      	ldr	r7, [r4, #0]
    91f4:	1a38      	subs	r0, r7, r0
    91f6:	0200      	lsls	r0, r0, #8
    91f8:	17c2      	asrs	r2, r0, #31
    91fa:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    91fe:	1200      	asrs	r0, r0, #8
    9200:	d429      	bmi.n	9256 <MPSL_IRQ_RADIO_Handler+0x37e>
    9202:	89e0      	ldrh	r0, [r4, #14]
    9204:	b300      	cbz	r0, 9248 <MPSL_IRQ_RADIO_Handler+0x370>
    9206:	89c8      	ldrh	r0, [r1, #14]
    9208:	b9f0      	cbnz	r0, 9248 <MPSL_IRQ_RADIO_Handler+0x370>
    920a:	f8d1 9000 	ldr.w	r9, [r1]
    920e:	f002 ffc7 	bl	c1a0 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    9212:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    9216:	bf08      	it	eq
    9218:	200d      	moveq	r0, #13
    921a:	d00b      	beq.n	9234 <MPSL_IRQ_RADIO_Handler+0x35c>
    921c:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    9220:	3856      	subs	r0, #86	; 0x56
    9222:	bf08      	it	eq
    9224:	201c      	moveq	r0, #28
    9226:	d005      	beq.n	9234 <MPSL_IRQ_RADIO_Handler+0x35c>
    9228:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    922c:	389f      	subs	r0, #159	; 0x9f
    922e:	bf14      	ite	ne
    9230:	2000      	movne	r0, #0
    9232:	2032      	moveq	r0, #50	; 0x32
    9234:	1c41      	adds	r1, r0, #1
    9236:	eba7 0009 	sub.w	r0, r7, r9
    923a:	0200      	lsls	r0, r0, #8
    923c:	17c2      	asrs	r2, r0, #31
    923e:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    9242:	1200      	asrs	r0, r0, #8
    9244:	4288      	cmp	r0, r1
    9246:	db06      	blt.n	9256 <MPSL_IRQ_RADIO_Handler+0x37e>
    9248:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    924c:	f88a 5000 	strb.w	r5, [sl]
    9250:	7845      	ldrb	r5, [r0, #1]
    9252:	2d20      	cmp	r5, #32
    9254:	d1c6      	bne.n	91e4 <MPSL_IRQ_RADIO_Handler+0x30c>
    9256:	f89a 0000 	ldrb.w	r0, [sl]
    925a:	f888 0000 	strb.w	r0, [r8]
    925e:	980b      	ldr	r0, [sp, #44]	; 0x2c
    9260:	2d20      	cmp	r5, #32
    9262:	bf1c      	itt	ne
    9264:	4925      	ldrne	r1, [pc, #148]	; (92fc <MPSL_IRQ_RADIO_Handler+0x424>)
    9266:	eb01 1b80 	addne.w	fp, r1, r0, lsl #6
    926a:	d03f      	beq.n	92ec <MPSL_IRQ_RADIO_Handler+0x414>
    926c:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    9270:	eb06 0780 	add.w	r7, r6, r0, lsl #2
    9274:	6860      	ldr	r0, [r4, #4]
    9276:	f8d7 9008 	ldr.w	r9, [r7, #8]
    927a:	f107 0108 	add.w	r1, r7, #8
    927e:	eba9 0000 	sub.w	r0, r9, r0
    9282:	0200      	lsls	r0, r0, #8
    9284:	17c2      	asrs	r2, r0, #31
    9286:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    928a:	1200      	asrs	r0, r0, #8
    928c:	d422      	bmi.n	92d4 <MPSL_IRQ_RADIO_Handler+0x3fc>
    928e:	89c8      	ldrh	r0, [r1, #14]
    9290:	b360      	cbz	r0, 92ec <MPSL_IRQ_RADIO_Handler+0x414>
    9292:	89e0      	ldrh	r0, [r4, #14]
    9294:	bb50      	cbnz	r0, 92ec <MPSL_IRQ_RADIO_Handler+0x414>
    9296:	f8d4 a000 	ldr.w	sl, [r4]
    929a:	f002 ff81 	bl	c1a0 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    929e:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    92a2:	bf08      	it	eq
    92a4:	200d      	moveq	r0, #13
    92a6:	d00b      	beq.n	92c0 <MPSL_IRQ_RADIO_Handler+0x3e8>
    92a8:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    92ac:	3856      	subs	r0, #86	; 0x56
    92ae:	bf08      	it	eq
    92b0:	201c      	moveq	r0, #28
    92b2:	d005      	beq.n	92c0 <MPSL_IRQ_RADIO_Handler+0x3e8>
    92b4:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    92b8:	389f      	subs	r0, #159	; 0x9f
    92ba:	bf14      	ite	ne
    92bc:	2000      	movne	r0, #0
    92be:	2032      	moveq	r0, #50	; 0x32
    92c0:	1c41      	adds	r1, r0, #1
    92c2:	eba9 000a 	sub.w	r0, r9, sl
    92c6:	0200      	lsls	r0, r0, #8
    92c8:	17c2      	asrs	r2, r0, #31
    92ca:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    92ce:	1200      	asrs	r0, r0, #8
    92d0:	4288      	cmp	r0, r1
    92d2:	da0b      	bge.n	92ec <MPSL_IRQ_RADIO_Handler+0x414>
    92d4:	f888 5000 	strb.w	r5, [r8]
    92d8:	7e38      	ldrb	r0, [r7, #24]
    92da:	7c21      	ldrb	r1, [r4, #16]
    92dc:	4288      	cmp	r0, r1
    92de:	f67f af0d 	bls.w	90fc <MPSL_IRQ_RADIO_Handler+0x224>
    92e2:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    92e6:	7845      	ldrb	r5, [r0, #1]
    92e8:	2d20      	cmp	r5, #32
    92ea:	d1bf      	bne.n	926c <MPSL_IRQ_RADIO_Handler+0x394>
    92ec:	b011      	add	sp, #68	; 0x44
    92ee:	2001      	movs	r0, #1
    92f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    92f4:	20001040 	.word	0x20001040
    92f8:	20000c40 	.word	0x20000c40
    92fc:	20000fc0 	.word	0x20000fc0
    9300:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9304:	460f      	mov	r7, r1
    9306:	4606      	mov	r6, r0
    9308:	eb01 0047 	add.w	r0, r1, r7, lsl #1
    930c:	494b      	ldr	r1, [pc, #300]	; (943c <MPSL_IRQ_RADIO_Handler+0x564>)
    930e:	4699      	mov	r9, r3
    9310:	4408      	add	r0, r1
    9312:	4692      	mov	sl, r2
    9314:	f890 4020 	ldrb.w	r4, [r0, #32]
    9318:	2020      	movs	r0, #32
    931a:	7010      	strb	r0, [r2, #0]
    931c:	f5a1 6880 	sub.w	r8, r1, #1024	; 0x400
    9320:	2c20      	cmp	r4, #32
    9322:	bf1c      	itt	ne
    9324:	4846      	ldrne	r0, [pc, #280]	; (9440 <MPSL_IRQ_RADIO_Handler+0x568>)
    9326:	eb00 1b87 	addne.w	fp, r0, r7, lsl #6
    932a:	d038      	beq.n	939e <MPSL_IRQ_RADIO_Handler+0x4c6>
    932c:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
    9330:	eb08 0080 	add.w	r0, r8, r0, lsl #2
    9334:	f100 0108 	add.w	r1, r0, #8
    9338:	68c0      	ldr	r0, [r0, #12]
    933a:	6835      	ldr	r5, [r6, #0]
    933c:	1a28      	subs	r0, r5, r0
    933e:	0200      	lsls	r0, r0, #8
    9340:	17c2      	asrs	r2, r0, #31
    9342:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    9346:	1200      	asrs	r0, r0, #8
    9348:	d429      	bmi.n	939e <MPSL_IRQ_RADIO_Handler+0x4c6>
    934a:	89f0      	ldrh	r0, [r6, #14]
    934c:	b300      	cbz	r0, 9390 <MPSL_IRQ_RADIO_Handler+0x4b8>
    934e:	89c8      	ldrh	r0, [r1, #14]
    9350:	b9f0      	cbnz	r0, 9390 <MPSL_IRQ_RADIO_Handler+0x4b8>
    9352:	6808      	ldr	r0, [r1, #0]
    9354:	9000      	str	r0, [sp, #0]
    9356:	f002 ff23 	bl	c1a0 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    935a:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    935e:	bf08      	it	eq
    9360:	200d      	moveq	r0, #13
    9362:	d00b      	beq.n	937c <MPSL_IRQ_RADIO_Handler+0x4a4>
    9364:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    9368:	3856      	subs	r0, #86	; 0x56
    936a:	bf08      	it	eq
    936c:	201c      	moveq	r0, #28
    936e:	d005      	beq.n	937c <MPSL_IRQ_RADIO_Handler+0x4a4>
    9370:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    9374:	389f      	subs	r0, #159	; 0x9f
    9376:	bf14      	ite	ne
    9378:	2000      	movne	r0, #0
    937a:	2032      	moveq	r0, #50	; 0x32
    937c:	1c41      	adds	r1, r0, #1
    937e:	9800      	ldr	r0, [sp, #0]
    9380:	1a28      	subs	r0, r5, r0
    9382:	0200      	lsls	r0, r0, #8
    9384:	17c2      	asrs	r2, r0, #31
    9386:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    938a:	1200      	asrs	r0, r0, #8
    938c:	4288      	cmp	r0, r1
    938e:	db06      	blt.n	939e <MPSL_IRQ_RADIO_Handler+0x4c6>
    9390:	eb0b 0044 	add.w	r0, fp, r4, lsl #1
    9394:	f88a 4000 	strb.w	r4, [sl]
    9398:	7844      	ldrb	r4, [r0, #1]
    939a:	2c20      	cmp	r4, #32
    939c:	d1c6      	bne.n	932c <MPSL_IRQ_RADIO_Handler+0x454>
    939e:	f89a 0000 	ldrb.w	r0, [sl]
    93a2:	f889 0000 	strb.w	r0, [r9]
    93a6:	2c20      	cmp	r4, #32
    93a8:	bf1c      	itt	ne
    93aa:	4825      	ldrne	r0, [pc, #148]	; (9440 <MPSL_IRQ_RADIO_Handler+0x568>)
    93ac:	eb00 1a87 	addne.w	sl, r0, r7, lsl #6
    93b0:	d040      	beq.n	9434 <MPSL_IRQ_RADIO_Handler+0x55c>
    93b2:	bf00      	nop
    93b4:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
    93b8:	eb08 0780 	add.w	r7, r8, r0, lsl #2
    93bc:	6870      	ldr	r0, [r6, #4]
    93be:	68bd      	ldr	r5, [r7, #8]
    93c0:	f107 0108 	add.w	r1, r7, #8
    93c4:	1a28      	subs	r0, r5, r0
    93c6:	0200      	lsls	r0, r0, #8
    93c8:	17c2      	asrs	r2, r0, #31
    93ca:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    93ce:	1200      	asrs	r0, r0, #8
    93d0:	d422      	bmi.n	9418 <MPSL_IRQ_RADIO_Handler+0x540>
    93d2:	89c8      	ldrh	r0, [r1, #14]
    93d4:	b370      	cbz	r0, 9434 <MPSL_IRQ_RADIO_Handler+0x55c>
    93d6:	89f0      	ldrh	r0, [r6, #14]
    93d8:	bb60      	cbnz	r0, 9434 <MPSL_IRQ_RADIO_Handler+0x55c>
    93da:	f8d6 b000 	ldr.w	fp, [r6]
    93de:	f002 fedf 	bl	c1a0 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    93e2:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    93e6:	bf08      	it	eq
    93e8:	200d      	moveq	r0, #13
    93ea:	d00b      	beq.n	9404 <MPSL_IRQ_RADIO_Handler+0x52c>
    93ec:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    93f0:	3856      	subs	r0, #86	; 0x56
    93f2:	bf08      	it	eq
    93f4:	201c      	moveq	r0, #28
    93f6:	d005      	beq.n	9404 <MPSL_IRQ_RADIO_Handler+0x52c>
    93f8:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    93fc:	389f      	subs	r0, #159	; 0x9f
    93fe:	bf14      	ite	ne
    9400:	2000      	movne	r0, #0
    9402:	2032      	moveq	r0, #50	; 0x32
    9404:	1c41      	adds	r1, r0, #1
    9406:	eba5 000b 	sub.w	r0, r5, fp
    940a:	0200      	lsls	r0, r0, #8
    940c:	17c2      	asrs	r2, r0, #31
    940e:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    9412:	1200      	asrs	r0, r0, #8
    9414:	4288      	cmp	r0, r1
    9416:	da0d      	bge.n	9434 <MPSL_IRQ_RADIO_Handler+0x55c>
    9418:	f889 4000 	strb.w	r4, [r9]
    941c:	7e38      	ldrb	r0, [r7, #24]
    941e:	7c31      	ldrb	r1, [r6, #16]
    9420:	4288      	cmp	r0, r1
    9422:	d802      	bhi.n	942a <MPSL_IRQ_RADIO_Handler+0x552>
    9424:	2000      	movs	r0, #0
    9426:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    942a:	eb0a 0044 	add.w	r0, sl, r4, lsl #1
    942e:	7844      	ldrb	r4, [r0, #1]
    9430:	2c20      	cmp	r4, #32
    9432:	d1bf      	bne.n	93b4 <MPSL_IRQ_RADIO_Handler+0x4dc>
    9434:	2001      	movs	r0, #1
    9436:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    943a:	0000      	.short	0x0000
    943c:	20001040 	.word	0x20001040
    9440:	20000fc0 	.word	0x20000fc0
    9444:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9448:	b098      	sub	sp, #96	; 0x60
    944a:	4615      	mov	r5, r2
    944c:	f002 fa52 	bl	b8f4 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>
    9450:	4604      	mov	r4, r0
    9452:	f002 fccd 	bl	bdf0 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    9456:	4606      	mov	r6, r0
    9458:	9819      	ldr	r0, [sp, #100]	; 0x64
    945a:	2801      	cmp	r0, #1
    945c:	bf18      	it	ne
    945e:	2802      	cmpne	r0, #2
    9460:	d005      	beq.n	946e <MPSL_IRQ_RADIO_Handler+0x596>
    9462:	f640 1192 	movw	r1, #2450	; 0x992
    9466:	f04f 0070 	mov.w	r0, #112	; 0x70
    946a:	f003 f857 	bl	c51c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    946e:	49f9      	ldr	r1, [pc, #996]	; (9854 <MPSL_IRQ_RADIO_Handler+0x97c>)
    9470:	2001      	movs	r0, #1
    9472:	6008      	str	r0, [r1, #0]
    9474:	49f8      	ldr	r1, [pc, #992]	; (9858 <MPSL_IRQ_RADIO_Handler+0x980>)
    9476:	6889      	ldr	r1, [r1, #8]
    9478:	6008      	str	r0, [r1, #0]
    947a:	2000      	movs	r0, #0
    947c:	f88d 0046 	strb.w	r0, [sp, #70]	; 0x46
    9480:	900a      	str	r0, [sp, #40]	; 0x28
    9482:	1e40      	subs	r0, r0, #1
    9484:	900b      	str	r0, [sp, #44]	; 0x2c
    9486:	49f5      	ldr	r1, [pc, #980]	; (985c <MPSL_IRQ_RADIO_Handler+0x984>)
    9488:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    948c:	eb01 0180 	add.w	r1, r1, r0, lsl #2
    9490:	f101 0008 	add.w	r0, r1, #8
    9494:	6989      	ldr	r1, [r1, #24]
    9496:	e890 100d 	ldmia.w	r0, {r0, r2, r3, ip}
    949a:	af0c      	add	r7, sp, #48	; 0x30
    949c:	9110      	str	r1, [sp, #64]	; 0x40
    949e:	e887 100d 	stmia.w	r7, {r0, r2, r3, ip}
    94a2:	f007 fb4e 	bl	10b42 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    94a6:	f8bd 803e 	ldrh.w	r8, [sp, #62]	; 0x3e
    94aa:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
    94ae:	4602      	mov	r2, r0
    94b0:	4441      	add	r1, r8
    94b2:	1c49      	adds	r1, r1, #1
    94b4:	4bea      	ldr	r3, [pc, #936]	; (9860 <MPSL_IRQ_RADIO_Handler+0x988>)
    94b6:	4408      	add	r0, r1
    94b8:	429a      	cmp	r2, r3
    94ba:	d854      	bhi.n	9566 <MPSL_IRQ_RADIO_Handler+0x68e>
    94bc:	4de9      	ldr	r5, [pc, #932]	; (9864 <MPSL_IRQ_RADIO_Handler+0x98c>)
    94be:	42a9      	cmp	r1, r5
    94c0:	dc58      	bgt.n	9574 <MPSL_IRQ_RADIO_Handler+0x69c>
    94c2:	426a      	negs	r2, r5
    94c4:	4291      	cmp	r1, r2
    94c6:	db5d      	blt.n	9584 <MPSL_IRQ_RADIO_Handler+0x6ac>
    94c8:	1c59      	adds	r1, r3, #1
    94ca:	4281      	cmp	r1, r0
    94cc:	bfdc      	itt	le
    94ce:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    94d2:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    94d6:	dd05      	ble.n	94e4 <MPSL_IRQ_RADIO_Handler+0x60c>
    94d8:	2800      	cmp	r0, #0
    94da:	bfbc      	itt	lt
    94dc:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    94e0:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    94e4:	9014      	str	r0, [sp, #80]	; 0x50
    94e6:	48e0      	ldr	r0, [pc, #896]	; (9868 <MPSL_IRQ_RADIO_Handler+0x990>)
    94e8:	f1b8 0f00 	cmp.w	r8, #0
    94ec:	8b80      	ldrh	r0, [r0, #28]
    94ee:	f8ad 0044 	strh.w	r0, [sp, #68]	; 0x44
    94f2:	bf14      	ite	ne
    94f4:	f04f 0a01 	movne.w	sl, #1
    94f8:	f04f 0a00 	moveq.w	sl, #0
    94fc:	f002 ff96 	bl	c42c <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    9500:	9016      	str	r0, [sp, #88]	; 0x58
    9502:	f1ba 0f00 	cmp.w	sl, #0
    9506:	d008      	beq.n	951a <MPSL_IRQ_RADIO_Handler+0x642>
    9508:	48d7      	ldr	r0, [pc, #860]	; (9868 <MPSL_IRQ_RADIO_Handler+0x990>)
    950a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    950c:	f1b0 3fff 	cmp.w	r0, #4294967295
    9510:	bf02      	ittt	eq
    9512:	9816      	ldreq	r0, [sp, #88]	; 0x58
    9514:	2800      	cmpeq	r0, #0
    9516:	2701      	moveq	r7, #1
    9518:	d001      	beq.n	951e <MPSL_IRQ_RADIO_Handler+0x646>
    951a:	f04f 0700 	mov.w	r7, #0
    951e:	f002 fe3f 	bl	c1a0 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    9522:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    9526:	bf08      	it	eq
    9528:	200d      	moveq	r0, #13
    952a:	d00b      	beq.n	9544 <MPSL_IRQ_RADIO_Handler+0x66c>
    952c:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    9530:	3856      	subs	r0, #86	; 0x56
    9532:	bf08      	it	eq
    9534:	201c      	moveq	r0, #28
    9536:	d005      	beq.n	9544 <MPSL_IRQ_RADIO_Handler+0x66c>
    9538:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    953c:	389f      	subs	r0, #159	; 0x9f
    953e:	bf14      	ite	ne
    9540:	2000      	movne	r0, #0
    9542:	2032      	moveq	r0, #50	; 0x32
    9544:	f04f 0900 	mov.w	r9, #0
    9548:	46cb      	mov	fp, r9
    954a:	9013      	str	r0, [sp, #76]	; 0x4c
    954c:	4546      	cmp	r6, r8
    954e:	d936      	bls.n	95be <MPSL_IRQ_RADIO_Handler+0x6e6>
    9550:	9b14      	ldr	r3, [sp, #80]	; 0x50
    9552:	f8df 930c 	ldr.w	r9, [pc, #780]	; 9860 <MPSL_IRQ_RADIO_Handler+0x988>
    9556:	ea6f 0c06 	mvn.w	ip, r6
    955a:	4669      	mov	r1, sp
    955c:	aa17      	add	r2, sp, #92	; 0x5c
    955e:	eb03 000c 	add.w	r0, r3, ip
    9562:	454b      	cmp	r3, r9
    9564:	d904      	bls.n	9570 <MPSL_IRQ_RADIO_Handler+0x698>
    9566:	f240 519e 	movw	r1, #1438	; 0x59e
    956a:	2070      	movs	r0, #112	; 0x70
    956c:	f002 ffd6 	bl	c51c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9570:	45ac      	cmp	ip, r5
    9572:	dd04      	ble.n	957e <MPSL_IRQ_RADIO_Handler+0x6a6>
    9574:	f240 519f 	movw	r1, #1439	; 0x59f
    9578:	2070      	movs	r0, #112	; 0x70
    957a:	f002 ffcf 	bl	c51c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    957e:	4bbb      	ldr	r3, [pc, #748]	; (986c <MPSL_IRQ_RADIO_Handler+0x994>)
    9580:	459c      	cmp	ip, r3
    9582:	da04      	bge.n	958e <MPSL_IRQ_RADIO_Handler+0x6b6>
    9584:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
    9588:	2070      	movs	r0, #112	; 0x70
    958a:	f002 ffc7 	bl	c51c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    958e:	4bb8      	ldr	r3, [pc, #736]	; (9870 <MPSL_IRQ_RADIO_Handler+0x998>)
    9590:	4283      	cmp	r3, r0
    9592:	bfdc      	itt	le
    9594:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    9598:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    959c:	dd05      	ble.n	95aa <MPSL_IRQ_RADIO_Handler+0x6d2>
    959e:	2800      	cmp	r0, #0
    95a0:	bfbc      	itt	lt
    95a2:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    95a6:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    95aa:	f001 fefd 	bl	b3a8 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    95ae:	9800      	ldr	r0, [sp, #0]
    95b0:	990c      	ldr	r1, [sp, #48]	; 0x30
    95b2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    95b6:	9000      	str	r0, [sp, #0]
    95b8:	1a08      	subs	r0, r1, r0
    95ba:	f020 497f 	bic.w	r9, r0, #4278190080	; 0xff000000
    95be:	2f00      	cmp	r7, #0
    95c0:	bf18      	it	ne
    95c2:	f8dd b04c 	ldrne.w	fp, [sp, #76]	; 0x4c
    95c6:	d105      	bne.n	95d4 <MPSL_IRQ_RADIO_Handler+0x6fc>
    95c8:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    95cc:	2800      	cmp	r0, #0
    95ce:	bf18      	it	ne
    95d0:	f04f 0b02 	movne.w	fp, #2
    95d4:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    95d8:	d008      	beq.n	95ec <MPSL_IRQ_RADIO_Handler+0x714>
    95da:	980c      	ldr	r0, [sp, #48]	; 0x30
    95dc:	1b00      	subs	r0, r0, r4
    95de:	0200      	lsls	r0, r0, #8
    95e0:	17c1      	asrs	r1, r0, #31
    95e2:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    95e6:	1200      	asrs	r0, r0, #8
    95e8:	2801      	cmp	r0, #1
    95ea:	da02      	bge.n	95f2 <MPSL_IRQ_RADIO_Handler+0x71a>
    95ec:	2003      	movs	r0, #3
    95ee:	9d18      	ldr	r5, [sp, #96]	; 0x60
    95f0:	e00d      	b.n	960e <MPSL_IRQ_RADIO_Handler+0x736>
    95f2:	b157      	cbz	r7, 960a <MPSL_IRQ_RADIO_Handler+0x732>
    95f4:	489c      	ldr	r0, [pc, #624]	; (9868 <MPSL_IRQ_RADIO_Handler+0x990>)
    95f6:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
    95fa:	b130      	cbz	r0, 960a <MPSL_IRQ_RADIO_Handler+0x732>
    95fc:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    9600:	f110 0b00 	adds.w	fp, r0, #0
    9604:	bf18      	it	ne
    9606:	f04f 0b02 	movne.w	fp, #2
    960a:	4625      	mov	r5, r4
    960c:	2000      	movs	r0, #0
    960e:	4483      	add	fp, r0
    9610:	980c      	ldr	r0, [sp, #48]	; 0x30
    9612:	eba0 0009 	sub.w	r0, r0, r9
    9616:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    961a:	1e48      	subs	r0, r1, #1
    961c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    9620:	1b42      	subs	r2, r0, r5
    9622:	0212      	lsls	r2, r2, #8
    9624:	17d3      	asrs	r3, r2, #31
    9626:	eb02 6213 	add.w	r2, r2, r3, lsr #24
    962a:	1212      	asrs	r2, r2, #8
    962c:	455a      	cmp	r2, fp
    962e:	db04      	blt.n	963a <MPSL_IRQ_RADIO_Handler+0x762>
    9630:	f1b9 0f00 	cmp.w	r9, #0
    9634:	bf18      	it	ne
    9636:	910c      	strne	r1, [sp, #48]	; 0x30
    9638:	e02d      	b.n	9696 <MPSL_IRQ_RADIO_Handler+0x7be>
    963a:	f1b9 0f00 	cmp.w	r9, #0
    963e:	d005      	beq.n	964c <MPSL_IRQ_RADIO_Handler+0x774>
    9640:	f89d 0045 	ldrb.w	r0, [sp, #69]	; 0x45
    9644:	b920      	cbnz	r0, 9650 <MPSL_IRQ_RADIO_Handler+0x778>
    9646:	f002 fbc9 	bl	bddc <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>
    964a:	b108      	cbz	r0, 9650 <MPSL_IRQ_RADIO_Handler+0x778>
    964c:	b9af      	cbnz	r7, 967a <MPSL_IRQ_RADIO_Handler+0x7a2>
    964e:	e00c      	b.n	966a <MPSL_IRQ_RADIO_Handler+0x792>
    9650:	b92f      	cbnz	r7, 965e <MPSL_IRQ_RADIO_Handler+0x786>
    9652:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    9656:	2800      	cmp	r0, #0
    9658:	bf18      	it	ne
    965a:	f1ab 0b02 	subne.w	fp, fp, #2
    965e:	f04f 0900 	mov.w	r9, #0
    9662:	f88d 9044 	strb.w	r9, [sp, #68]	; 0x44
    9666:	464e      	mov	r6, r9
    9668:	e007      	b.n	967a <MPSL_IRQ_RADIO_Handler+0x7a2>
    966a:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    966e:	b120      	cbz	r0, 967a <MPSL_IRQ_RADIO_Handler+0x7a2>
    9670:	2000      	movs	r0, #0
    9672:	f88d 0044 	strb.w	r0, [sp, #68]	; 0x44
    9676:	f1ab 0b02 	sub.w	fp, fp, #2
    967a:	980c      	ldr	r0, [sp, #48]	; 0x30
    967c:	eba0 0109 	sub.w	r1, r0, r9
    9680:	1e48      	subs	r0, r1, #1
    9682:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    9686:	1b42      	subs	r2, r0, r5
    9688:	0212      	lsls	r2, r2, #8
    968a:	17d3      	asrs	r3, r2, #31
    968c:	eb02 6213 	add.w	r2, r2, r3, lsr #24
    9690:	1212      	asrs	r2, r2, #8
    9692:	455a      	cmp	r2, fp
    9694:	db7e      	blt.n	9794 <MPSL_IRQ_RADIO_Handler+0x8bc>
    9696:	4a74      	ldr	r2, [pc, #464]	; (9868 <MPSL_IRQ_RADIO_Handler+0x990>)
    9698:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    969a:	1a89      	subs	r1, r1, r2
    969c:	0209      	lsls	r1, r1, #8
    969e:	17cb      	asrs	r3, r1, #31
    96a0:	eb01 6113 	add.w	r1, r1, r3, lsr #24
    96a4:	9b16      	ldr	r3, [sp, #88]	; 0x58
    96a6:	1209      	asrs	r1, r1, #8
    96a8:	b93b      	cbnz	r3, 96ba <MPSL_IRQ_RADIO_Handler+0x7e2>
    96aa:	f1b2 3fff 	cmp.w	r2, #4294967295
    96ae:	bf1c      	itt	ne
    96b0:	9a13      	ldrne	r2, [sp, #76]	; 0x4c
    96b2:	4291      	cmpne	r1, r2
    96b4:	bfb8      	it	lt
    96b6:	2100      	movlt	r1, #0
    96b8:	db00      	blt.n	96bc <MPSL_IRQ_RADIO_Handler+0x7e4>
    96ba:	2101      	movs	r1, #1
    96bc:	ea3a 0101 	bics.w	r1, sl, r1
    96c0:	d168      	bne.n	9794 <MPSL_IRQ_RADIO_Handler+0x8bc>
    96c2:	9919      	ldr	r1, [sp, #100]	; 0x64
    96c4:	4605      	mov	r5, r0
    96c6:	f04f 0900 	mov.w	r9, #0
    96ca:	9105      	str	r1, [sp, #20]
    96cc:	f001 ffd6 	bl	b67c <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    96d0:	1a28      	subs	r0, r5, r0
    96d2:	0200      	lsls	r0, r0, #8
    96d4:	17c1      	asrs	r1, r0, #31
    96d6:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    96da:	ea4f 2b20 	mov.w	fp, r0, asr #8
    96de:	f002 fd5f 	bl	c1a0 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    96e2:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    96e6:	bf08      	it	eq
    96e8:	200d      	moveq	r0, #13
    96ea:	d00b      	beq.n	9704 <MPSL_IRQ_RADIO_Handler+0x82c>
    96ec:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    96f0:	3856      	subs	r0, #86	; 0x56
    96f2:	bf08      	it	eq
    96f4:	201c      	moveq	r0, #28
    96f6:	d005      	beq.n	9704 <MPSL_IRQ_RADIO_Handler+0x82c>
    96f8:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    96fc:	389f      	subs	r0, #159	; 0x9f
    96fe:	bf14      	ite	ne
    9700:	2000      	movne	r0, #0
    9702:	2032      	moveq	r0, #50	; 0x32
    9704:	300b      	adds	r0, #11
    9706:	4558      	cmp	r0, fp
    9708:	dd1f      	ble.n	974a <MPSL_IRQ_RADIO_Handler+0x872>
    970a:	9805      	ldr	r0, [sp, #20]
    970c:	2801      	cmp	r0, #1
    970e:	d001      	beq.n	9714 <MPSL_IRQ_RADIO_Handler+0x83c>
    9710:	b147      	cbz	r7, 9724 <MPSL_IRQ_RADIO_Handler+0x84c>
    9712:	e012      	b.n	973a <MPSL_IRQ_RADIO_Handler+0x862>
    9714:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    9718:	d11c      	bne.n	9754 <MPSL_IRQ_RADIO_Handler+0x87c>
    971a:	f640 1113 	movw	r1, #2323	; 0x913
    971e:	2070      	movs	r0, #112	; 0x70
    9720:	f002 fefc 	bl	c51c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9724:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    9728:	d007      	beq.n	973a <MPSL_IRQ_RADIO_Handler+0x862>
    972a:	1b60      	subs	r0, r4, r5
    972c:	0200      	lsls	r0, r0, #8
    972e:	17c1      	asrs	r1, r0, #31
    9730:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    9734:	1200      	asrs	r0, r0, #8
    9736:	2804      	cmp	r0, #4
    9738:	dd04      	ble.n	9744 <MPSL_IRQ_RADIO_Handler+0x86c>
    973a:	462c      	mov	r4, r5
    973c:	4620      	mov	r0, r4
    973e:	f001 ffc3 	bl	b6c8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    9742:	e007      	b.n	9754 <MPSL_IRQ_RADIO_Handler+0x87c>
    9744:	2800      	cmp	r0, #0
    9746:	dc62      	bgt.n	980e <MPSL_IRQ_RADIO_Handler+0x936>
    9748:	e004      	b.n	9754 <MPSL_IRQ_RADIO_Handler+0x87c>
    974a:	462c      	mov	r4, r5
    974c:	4620      	mov	r0, r4
    974e:	f001 ffbb 	bl	b6c8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    9752:	46d1      	mov	r9, sl
    9754:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    9758:	d054      	beq.n	9804 <MPSL_IRQ_RADIO_Handler+0x92c>
    975a:	980c      	ldr	r0, [sp, #48]	; 0x30
    975c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    975e:	1b00      	subs	r0, r0, r4
    9760:	1b12      	subs	r2, r2, r4
    9762:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    9766:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    976a:	2801      	cmp	r0, #1
    976c:	d34f      	bcc.n	980e <MPSL_IRQ_RADIO_Handler+0x936>
    976e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    9772:	bf98      	it	ls
    9774:	f5b2 0f00 	cmpls.w	r2, #8388608	; 0x800000
    9778:	d849      	bhi.n	980e <MPSL_IRQ_RADIO_Handler+0x936>
    977a:	4620      	mov	r0, r4
    977c:	f007 f9e1 	bl	10b42 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    9780:	9914      	ldr	r1, [sp, #80]	; 0x50
    9782:	4a38      	ldr	r2, [pc, #224]	; (9864 <MPSL_IRQ_RADIO_Handler+0x98c>)
    9784:	1a0d      	subs	r5, r1, r0
    9786:	f04f 0b00 	mov.w	fp, #0
    978a:	1aaa      	subs	r2, r5, r2
    978c:	f17b 0200 	sbcs.w	r2, fp, #0
    9790:	d318      	bcc.n	97c4 <MPSL_IRQ_RADIO_Handler+0x8ec>
    9792:	e000      	b.n	9796 <MPSL_IRQ_RADIO_Handler+0x8be>
    9794:	e03b      	b.n	980e <MPSL_IRQ_RADIO_Handler+0x936>
    9796:	4b33      	ldr	r3, [pc, #204]	; (9864 <MPSL_IRQ_RADIO_Handler+0x98c>)
    9798:	1a42      	subs	r2, r0, r1
    979a:	1ad3      	subs	r3, r2, r3
    979c:	f17b 0300 	sbcs.w	r3, fp, #0
    97a0:	d310      	bcc.n	97c4 <MPSL_IRQ_RADIO_Handler+0x8ec>
    97a2:	4b2f      	ldr	r3, [pc, #188]	; (9860 <MPSL_IRQ_RADIO_Handler+0x988>)
    97a4:	42ab      	cmp	r3, r5
    97a6:	bf3e      	ittt	cc
    97a8:	f5c0 2090 	rsbcc	r0, r0, #294912	; 0x48000
    97ac:	f100 50f4 	addcc.w	r0, r0, #511705088	; 0x1e800000
    97b0:	1845      	addcc	r5, r0, r1
    97b2:	d307      	bcc.n	97c4 <MPSL_IRQ_RADIO_Handler+0x8ec>
    97b4:	4293      	cmp	r3, r2
    97b6:	d22e      	bcs.n	9816 <MPSL_IRQ_RADIO_Handler+0x93e>
    97b8:	f5c1 2190 	rsb	r1, r1, #294912	; 0x48000
    97bc:	f101 51f4 	add.w	r1, r1, #511705088	; 0x1e800000
    97c0:	4408      	add	r0, r1
    97c2:	4245      	negs	r5, r0
    97c4:	4f28      	ldr	r7, [pc, #160]	; (9868 <MPSL_IRQ_RADIO_Handler+0x990>)
    97c6:	7fb8      	ldrb	r0, [r7, #30]
    97c8:	b350      	cbz	r0, 9820 <MPSL_IRQ_RADIO_Handler+0x948>
    97ca:	9819      	ldr	r0, [sp, #100]	; 0x64
    97cc:	2801      	cmp	r0, #1
    97ce:	d005      	beq.n	97dc <MPSL_IRQ_RADIO_Handler+0x904>
    97d0:	2002      	movs	r0, #2
    97d2:	f002 f9c9 	bl	bb68 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    97d6:	2001      	movs	r0, #1
    97d8:	f002 f9c6 	bl	bb68 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    97dc:	45b0      	cmp	r8, r6
    97de:	d22b      	bcs.n	9838 <MPSL_IRQ_RADIO_Handler+0x960>
    97e0:	eba5 0106 	sub.w	r1, r5, r6
    97e4:	f04f 0002 	mov.w	r0, #2
    97e8:	f002 f908 	bl	b9fc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    97ec:	b388      	cbz	r0, 9852 <MPSL_IRQ_RADIO_Handler+0x97a>
    97ee:	f1b8 0f00 	cmp.w	r8, #0
    97f2:	bf1c      	itt	ne
    97f4:	eba5 0108 	subne.w	r1, r5, r8
    97f8:	2001      	movne	r0, #1
    97fa:	d043      	beq.n	9884 <MPSL_IRQ_RADIO_Handler+0x9ac>
    97fc:	f002 f8fe 	bl	b9fc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    9800:	b338      	cbz	r0, 9852 <MPSL_IRQ_RADIO_Handler+0x97a>
    9802:	e03f      	b.n	9884 <MPSL_IRQ_RADIO_Handler+0x9ac>
    9804:	f640 2131 	movw	r1, #2609	; 0xa31
    9808:	2070      	movs	r0, #112	; 0x70
    980a:	f002 fe87 	bl	c51c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    980e:	b01b      	add	sp, #108	; 0x6c
    9810:	2000      	movs	r0, #0
    9812:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9816:	f640 3105 	movw	r1, #2821	; 0xb05
    981a:	2070      	movs	r0, #112	; 0x70
    981c:	f002 fe7e 	bl	c51c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9820:	45b0      	cmp	r8, r6
    9822:	bf34      	ite	cc
    9824:	4630      	movcc	r0, r6
    9826:	4640      	movcs	r0, r8
    9828:	301e      	adds	r0, #30
    982a:	42a8      	cmp	r0, r5
    982c:	dbcd      	blt.n	97ca <MPSL_IRQ_RADIO_Handler+0x8f2>
    982e:	f640 2145 	movw	r1, #2629	; 0xa45
    9832:	2070      	movs	r0, #112	; 0x70
    9834:	f002 fe72 	bl	c51c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9838:	d91c      	bls.n	9874 <MPSL_IRQ_RADIO_Handler+0x99c>
    983a:	eba5 0108 	sub.w	r1, r5, r8
    983e:	2001      	movs	r0, #1
    9840:	f002 f8dc 	bl	b9fc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    9844:	b128      	cbz	r0, 9852 <MPSL_IRQ_RADIO_Handler+0x97a>
    9846:	2e00      	cmp	r6, #0
    9848:	bf1c      	itt	ne
    984a:	1ba9      	subne	r1, r5, r6
    984c:	2002      	movne	r0, #2
    984e:	d019      	beq.n	9884 <MPSL_IRQ_RADIO_Handler+0x9ac>
    9850:	e7d4      	b.n	97fc <MPSL_IRQ_RADIO_Handler+0x924>
    9852:	e042      	b.n	98da <MPSL_IRQ_RADIO_Handler+0xa02>
    9854:	40000508 	.word	0x40000508
    9858:	200002ec 	.word	0x200002ec
    985c:	20000c40 	.word	0x20000c40
    9860:	1e847fff 	.word	0x1e847fff
    9864:	0f424000 	.word	0x0f424000
    9868:	20001040 	.word	0x20001040
    986c:	f0bdc000 	.word	0xf0bdc000
    9870:	1e848000 	.word	0x1e848000
    9874:	ea56 0008 	orrs.w	r0, r6, r8
    9878:	d004      	beq.n	9884 <MPSL_IRQ_RADIO_Handler+0x9ac>
    987a:	f640 1176 	movw	r1, #2422	; 0x976
    987e:	2070      	movs	r0, #112	; 0x70
    9880:	f002 fe4c 	bl	c51c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9884:	4629      	mov	r1, r5
    9886:	2000      	movs	r0, #0
    9888:	f002 f8b8 	bl	b9fc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    988c:	b328      	cbz	r0, 98da <MPSL_IRQ_RADIO_Handler+0xa02>
    988e:	2601      	movs	r6, #1
    9890:	f1ba 0f00 	cmp.w	sl, #0
    9894:	bf04      	itt	eq
    9896:	f897 0030 	ldrbeq.w	r0, [r7, #48]	; 0x30
    989a:	2800      	cmpeq	r0, #0
    989c:	d002      	beq.n	98a4 <MPSL_IRQ_RADIO_Handler+0x9cc>
    989e:	f1b9 0f00 	cmp.w	r9, #0
    98a2:	d024      	beq.n	98ee <MPSL_IRQ_RADIO_Handler+0xa16>
    98a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    98a6:	f1b0 3fff 	cmp.w	r0, #4294967295
    98aa:	d004      	beq.n	98b6 <MPSL_IRQ_RADIO_Handler+0x9de>
    98ac:	f002 fc7e 	bl	c1ac <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    98b0:	f04f 30ff 	mov.w	r0, #4294967295
    98b4:	62f8      	str	r0, [r7, #44]	; 0x2c
    98b6:	f1b9 0f00 	cmp.w	r9, #0
    98ba:	d01c      	beq.n	98f6 <MPSL_IRQ_RADIO_Handler+0xa1e>
    98bc:	9813      	ldr	r0, [sp, #76]	; 0x4c
    98be:	1a20      	subs	r0, r4, r0
    98c0:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    98c4:	2005      	movs	r0, #5
    98c6:	f002 f899 	bl	b9fc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    98ca:	b360      	cbz	r0, 9926 <MPSL_IRQ_RADIO_Handler+0xa4e>
    98cc:	f897 0030 	ldrb.w	r0, [r7, #48]	; 0x30
    98d0:	2800      	cmp	r0, #0
    98d2:	bf08      	it	eq
    98d4:	f887 6030 	strbeq.w	r6, [r7, #48]	; 0x30
    98d8:	e015      	b.n	9906 <MPSL_IRQ_RADIO_Handler+0xa2e>
    98da:	2002      	movs	r0, #2
    98dc:	f002 f944 	bl	bb68 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    98e0:	2001      	movs	r0, #1
    98e2:	f002 f941 	bl	bb68 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    98e6:	b01b      	add	sp, #108	; 0x6c
    98e8:	2000      	movs	r0, #0
    98ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    98ee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    98f0:	f1b0 3fff 	cmp.w	r0, #4294967295
    98f4:	d012      	beq.n	991c <MPSL_IRQ_RADIO_Handler+0xa44>
    98f6:	f897 0030 	ldrb.w	r0, [r7, #48]	; 0x30
    98fa:	b120      	cbz	r0, 9906 <MPSL_IRQ_RADIO_Handler+0xa2e>
    98fc:	2005      	movs	r0, #5
    98fe:	f002 f933 	bl	bb68 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    9902:	f887 b030 	strb.w	fp, [r7, #48]	; 0x30
    9906:	eba5 0008 	sub.w	r0, r5, r8
    990a:	f1a0 0119 	sub.w	r1, r0, #25
    990e:	2900      	cmp	r1, #0
    9910:	dc0e      	bgt.n	9930 <MPSL_IRQ_RADIO_Handler+0xa58>
    9912:	f640 216e 	movw	r1, #2670	; 0xa6e
    9916:	2070      	movs	r0, #112	; 0x70
    9918:	f002 fe00 	bl	c51c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    991c:	f002 fc62 	bl	c1e4 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    9920:	f001 feac 	bl	b67c <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    9924:	e7c6      	b.n	98b4 <MPSL_IRQ_RADIO_Handler+0x9dc>
    9926:	f44f 713e 	mov.w	r1, #760	; 0x2f8
    992a:	2070      	movs	r0, #112	; 0x70
    992c:	f002 fdf6 	bl	c51c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9930:	2003      	movs	r0, #3
    9932:	f002 f863 	bl	b9fc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    9936:	b1b8      	cbz	r0, 9968 <MPSL_IRQ_RADIO_Handler+0xa90>
    9938:	480e      	ldr	r0, [pc, #56]	; (9974 <MPSL_IRQ_RADIO_Handler+0xa9c>)
    993a:	6880      	ldr	r0, [r0, #8]
    993c:	f8c0 b000 	str.w	fp, [r0]
    9940:	480d      	ldr	r0, [pc, #52]	; (9978 <MPSL_IRQ_RADIO_Handler+0xaa0>)
    9942:	f8c0 b000 	str.w	fp, [r0]
    9946:	f10d 0828 	add.w	r8, sp, #40	; 0x28
    994a:	e898 107f 	ldmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, ip}
    994e:	6038      	str	r0, [r7, #0]
    9950:	6079      	str	r1, [r7, #4]
    9952:	60ba      	str	r2, [r7, #8]
    9954:	60fb      	str	r3, [r7, #12]
    9956:	613c      	str	r4, [r7, #16]
    9958:	617d      	str	r5, [r7, #20]
    995a:	61be      	str	r6, [r7, #24]
    995c:	f8c7 c01c 	str.w	ip, [r7, #28]
    9960:	b01b      	add	sp, #108	; 0x6c
    9962:	2001      	movs	r0, #1
    9964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9968:	f640 2176 	movw	r1, #2678	; 0xa76
    996c:	2070      	movs	r0, #112	; 0x70
    996e:	f002 fdd5 	bl	c51c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9972:	0000      	.short	0x0000
    9974:	200002ec 	.word	0x200002ec
    9978:	40000508 	.word	0x40000508
    997c:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9980:	460d      	mov	r5, r1
    9982:	4614      	mov	r4, r2
    9984:	4606      	mov	r6, r0
    9986:	f04f 0a00 	mov.w	sl, #0
    998a:	892a      	ldrh	r2, [r5, #8]
    998c:	6841      	ldr	r1, [r0, #4]
    998e:	4650      	mov	r0, sl
    9990:	f362 401f 	bfi	r0, r2, #16, #16
    9994:	7aaa      	ldrb	r2, [r5, #10]
    9996:	46d1      	mov	r9, sl
    9998:	f362 0907 	bfi	r9, r2, #0, #8
    999c:	7aea      	ldrb	r2, [r5, #11]
    999e:	b083      	sub	sp, #12
    99a0:	f362 290f 	bfi	r9, r2, #8, #8
    99a4:	782a      	ldrb	r2, [r5, #0]
    99a6:	f8c4 a000 	str.w	sl, [r4]
    99aa:	f362 4917 	bfi	r9, r2, #16, #8
    99ae:	f8c4 a004 	str.w	sl, [r4, #4]
    99b2:	f8c4 9010 	str.w	r9, [r4, #16]
    99b6:	e9c4 1002 	strd	r1, r0, [r4, #8]
    99ba:	4f9d      	ldr	r7, [pc, #628]	; (9c30 <MPSL_IRQ_RADIO_Handler+0xd58>)
    99bc:	6870      	ldr	r0, [r6, #4]
    99be:	fba0 8907 	umull	r8, r9, r0, r7
    99c2:	6830      	ldr	r0, [r6, #0]
    99c4:	f007 f8bd 	bl	10b42 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    99c8:	eb10 0108 	adds.w	r1, r0, r8
    99cc:	eb4a 0209 	adc.w	r2, sl, r9
    99d0:	7828      	ldrb	r0, [r5, #0]
    99d2:	ea4f 0967 	mov.w	r9, r7, asr #1
    99d6:	f1c9 0b00 	rsb	fp, r9, #0
    99da:	b170      	cbz	r0, 99fa <MPSL_IRQ_RADIO_Handler+0xb22>
    99dc:	89e0      	ldrh	r0, [r4, #14]
    99de:	f894 8011 	ldrb.w	r8, [r4, #17]
    99e2:	43c0      	mvns	r0, r0
    99e4:	f8d5 a004 	ldr.w	sl, [r5, #4]
    99e8:	f104 020c 	add.w	r2, r4, #12
    99ec:	4548      	cmp	r0, r9
    99ee:	dd7c      	ble.n	9aea <MPSL_IRQ_RADIO_Handler+0xc12>
    99f0:	f240 519f 	movw	r1, #1439	; 0x59f
    99f4:	2070      	movs	r0, #112	; 0x70
    99f6:	f002 fd91 	bl	c51c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    99fa:	f8df c238 	ldr.w	ip, [pc, #568]	; 9c34 <MPSL_IRQ_RADIO_Handler+0xd5c>
    99fe:	e9d5 0304 	ldrd	r0, r3, [r5, #16]
    9a02:	eb11 0a0c 	adds.w	sl, r1, ip
    9a06:	f142 0c00 	adc.w	ip, r2, #0
    9a0a:	ebb0 0a0a 	subs.w	sl, r0, sl
    9a0e:	eb73 0c0c 	sbcs.w	ip, r3, ip
    9a12:	d272      	bcs.n	9afa <MPSL_IRQ_RADIO_Handler+0xc22>
    9a14:	1a41      	subs	r1, r0, r1
    9a16:	eb73 0102 	sbcs.w	r1, r3, r2
    9a1a:	d36e      	bcc.n	9afa <MPSL_IRQ_RADIO_Handler+0xc22>
    9a1c:	ebb0 0608 	subs.w	r6, r0, r8
    9a20:	42b7      	cmp	r7, r6
    9a22:	d82b      	bhi.n	9a7c <MPSL_IRQ_RADIO_Handler+0xba4>
    9a24:	89e0      	ldrh	r0, [r4, #14]
    9a26:	f1a6 58f4 	sub.w	r8, r6, #511705088	; 0x1e800000
    9a2a:	f5a8 2890 	sub.w	r8, r8, #294912	; 0x48000
    9a2e:	43c1      	mvns	r1, r0
    9a30:	4a81      	ldr	r2, [pc, #516]	; (9c38 <MPSL_IRQ_RADIO_Handler+0xd60>)
    9a32:	eb08 0001 	add.w	r0, r8, r1
    9a36:	4542      	cmp	r2, r8
    9a38:	d32b      	bcc.n	9a92 <MPSL_IRQ_RADIO_Handler+0xbba>
    9a3a:	4549      	cmp	r1, r9
    9a3c:	dcd8      	bgt.n	99f0 <MPSL_IRQ_RADIO_Handler+0xb18>
    9a3e:	4559      	cmp	r1, fp
    9a40:	db66      	blt.n	9b10 <MPSL_IRQ_RADIO_Handler+0xc38>
    9a42:	4287      	cmp	r7, r0
    9a44:	bfdc      	itt	le
    9a46:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    9a4a:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    9a4e:	dd05      	ble.n	9a5c <MPSL_IRQ_RADIO_Handler+0xb84>
    9a50:	2800      	cmp	r0, #0
    9a52:	bfbc      	itt	lt
    9a54:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    9a58:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    9a5c:	466a      	mov	r2, sp
    9a5e:	a901      	add	r1, sp, #4
    9a60:	f001 fca2 	bl	b3a8 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    9a64:	89e0      	ldrh	r0, [r4, #14]
    9a66:	f89d 1000 	ldrb.w	r1, [sp]
    9a6a:	1a30      	subs	r0, r6, r0
    9a6c:	1a40      	subs	r0, r0, r1
    9a6e:	1e40      	subs	r0, r0, #1
    9a70:	42b8      	cmp	r0, r7
    9a72:	d302      	bcc.n	9a7a <MPSL_IRQ_RADIO_Handler+0xba2>
    9a74:	68a0      	ldr	r0, [r4, #8]
    9a76:	1c40      	adds	r0, r0, #1
    9a78:	60a0      	str	r0, [r4, #8]
    9a7a:	4646      	mov	r6, r8
    9a7c:	89e0      	ldrh	r0, [r4, #14]
    9a7e:	4b6e      	ldr	r3, [pc, #440]	; (9c38 <MPSL_IRQ_RADIO_Handler+0xd60>)
    9a80:	43c1      	mvns	r1, r0
    9a82:	686d      	ldr	r5, [r5, #4]
    9a84:	f894 8011 	ldrb.w	r8, [r4, #17]
    9a88:	1870      	adds	r0, r6, r1
    9a8a:	f104 020c 	add.w	r2, r4, #12
    9a8e:	429e      	cmp	r6, r3
    9a90:	d904      	bls.n	9a9c <MPSL_IRQ_RADIO_Handler+0xbc4>
    9a92:	f240 519e 	movw	r1, #1438	; 0x59e
    9a96:	2070      	movs	r0, #112	; 0x70
    9a98:	f002 fd40 	bl	c51c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9a9c:	4549      	cmp	r1, r9
    9a9e:	dca7      	bgt.n	99f0 <MPSL_IRQ_RADIO_Handler+0xb18>
    9aa0:	4559      	cmp	r1, fp
    9aa2:	db35      	blt.n	9b10 <MPSL_IRQ_RADIO_Handler+0xc38>
    9aa4:	4287      	cmp	r7, r0
    9aa6:	bfdc      	itt	le
    9aa8:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    9aac:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    9ab0:	dd05      	ble.n	9abe <MPSL_IRQ_RADIO_Handler+0xbe6>
    9ab2:	2800      	cmp	r0, #0
    9ab4:	bfbc      	itt	lt
    9ab6:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    9aba:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    9abe:	4621      	mov	r1, r4
    9ac0:	f001 fc72 	bl	b3a8 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    9ac4:	6820      	ldr	r0, [r4, #0]
    9ac6:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    9aca:	1970      	adds	r0, r6, r5
    9acc:	1c40      	adds	r0, r0, #1
    9ace:	6021      	str	r1, [r4, #0]
    9ad0:	f1b8 0f00 	cmp.w	r8, #0
    9ad4:	bf08      	it	eq
    9ad6:	307a      	addeq	r0, #122	; 0x7a
    9ad8:	d004      	beq.n	9ae4 <MPSL_IRQ_RADIO_Handler+0xc0c>
    9ada:	f1b8 0f01 	cmp.w	r8, #1
    9ade:	bf08      	it	eq
    9ae0:	3048      	addeq	r0, #72	; 0x48
    9ae2:	d13a      	bne.n	9b5a <MPSL_IRQ_RADIO_Handler+0xc82>
    9ae4:	f001 fc44 	bl	b370 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    9ae8:	e001      	b.n	9aee <MPSL_IRQ_RADIO_Handler+0xc16>
    9aea:	e00e      	b.n	9b0a <MPSL_IRQ_RADIO_Handler+0xc32>
    9aec:	e005      	b.n	9afa <MPSL_IRQ_RADIO_Handler+0xc22>
    9aee:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    9af2:	6060      	str	r0, [r4, #4]
    9af4:	b007      	add	sp, #28
    9af6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9afa:	6830      	ldr	r0, [r6, #0]
    9afc:	1e40      	subs	r0, r0, #1
    9afe:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    9b02:	6020      	str	r0, [r4, #0]
    9b04:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
    9b08:	e7f3      	b.n	9af2 <MPSL_IRQ_RADIO_Handler+0xc1a>
    9b0a:	4601      	mov	r1, r0
    9b0c:	4558      	cmp	r0, fp
    9b0e:	da04      	bge.n	9b1a <MPSL_IRQ_RADIO_Handler+0xc42>
    9b10:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
    9b14:	2070      	movs	r0, #112	; 0x70
    9b16:	f002 fd01 	bl	c51c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9b1a:	4287      	cmp	r7, r0
    9b1c:	bfdc      	itt	le
    9b1e:	f1a1 50f4 	suble.w	r0, r1, #511705088	; 0x1e800000
    9b22:	f5a0 2090 	suble.w	r0, r0, #294912	; 0x48000
    9b26:	dd05      	ble.n	9b34 <MPSL_IRQ_RADIO_Handler+0xc5c>
    9b28:	2800      	cmp	r0, #0
    9b2a:	bfbc      	itt	lt
    9b2c:	f101 50f4 	addlt.w	r0, r1, #511705088	; 0x1e800000
    9b30:	f500 2090 	addlt.w	r0, r0, #294912	; 0x48000
    9b34:	4621      	mov	r1, r4
    9b36:	f001 fc37 	bl	b3a8 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    9b3a:	6820      	ldr	r0, [r4, #0]
    9b3c:	f1b8 0f00 	cmp.w	r8, #0
    9b40:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    9b44:	f10a 0001 	add.w	r0, sl, #1
    9b48:	6021      	str	r1, [r4, #0]
    9b4a:	bf08      	it	eq
    9b4c:	307a      	addeq	r0, #122	; 0x7a
    9b4e:	d009      	beq.n	9b64 <MPSL_IRQ_RADIO_Handler+0xc8c>
    9b50:	f1b8 0f01 	cmp.w	r8, #1
    9b54:	bf08      	it	eq
    9b56:	3048      	addeq	r0, #72	; 0x48
    9b58:	d004      	beq.n	9b64 <MPSL_IRQ_RADIO_Handler+0xc8c>
    9b5a:	f240 6139 	movw	r1, #1593	; 0x639
    9b5e:	2070      	movs	r0, #112	; 0x70
    9b60:	f002 fcdc 	bl	c51c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9b64:	f001 fc04 	bl	b370 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    9b68:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    9b6c:	6061      	str	r1, [r4, #4]
    9b6e:	f8b4 900e 	ldrh.w	r9, [r4, #14]
    9b72:	aa01      	add	r2, sp, #4
    9b74:	4669      	mov	r1, sp
    9b76:	4648      	mov	r0, r9
    9b78:	6837      	ldr	r7, [r6, #0]
    9b7a:	f001 fc15 	bl	b3a8 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    9b7e:	f002 f937 	bl	bdf0 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    9b82:	f001 fbf5 	bl	b370 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    9b86:	4680      	mov	r8, r0
    9b88:	482c      	ldr	r0, [pc, #176]	; (9c3c <MPSL_IRQ_RADIO_Handler+0xd64>)
    9b8a:	f890 1032 	ldrb.w	r1, [r0, #50]	; 0x32
    9b8e:	2920      	cmp	r1, #32
    9b90:	d02a      	beq.n	9be8 <MPSL_IRQ_RADIO_Handler+0xd10>
    9b92:	68c0      	ldr	r0, [r0, #12]
    9b94:	1d40      	adds	r0, r0, #5
    9b96:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    9b9a:	bf00      	nop
    9b9c:	e9d4 2100 	ldrd	r2, r1, [r4]
    9ba0:	1a89      	subs	r1, r1, r2
    9ba2:	4401      	add	r1, r0
    9ba4:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    9ba8:	e9c4 0100 	strd	r0, r1, [r4]
    9bac:	6831      	ldr	r1, [r6, #0]
    9bae:	4281      	cmp	r1, r0
    9bb0:	d902      	bls.n	9bb8 <MPSL_IRQ_RADIO_Handler+0xce0>
    9bb2:	68a0      	ldr	r0, [r4, #8]
    9bb4:	1c40      	adds	r0, r0, #1
    9bb6:	60a0      	str	r0, [r4, #8]
    9bb8:	6832      	ldr	r2, [r6, #0]
    9bba:	6928      	ldr	r0, [r5, #16]
    9bbc:	4621      	mov	r1, r4
    9bbe:	9b06      	ldr	r3, [sp, #24]
    9bc0:	f7ff f9e6 	bl	8f90 <MPSL_IRQ_RADIO_Handler+0xb8>
    9bc4:	2800      	cmp	r0, #0
    9bc6:	bf1c      	itt	ne
    9bc8:	b007      	addne	sp, #28
    9bca:	e8bd 8ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9bce:	e9d4 1000 	ldrd	r1, r0, [r4]
    9bd2:	1a40      	subs	r0, r0, r1
    9bd4:	6831      	ldr	r1, [r6, #0]
    9bd6:	6021      	str	r1, [r4, #0]
    9bd8:	6831      	ldr	r1, [r6, #0]
    9bda:	4408      	add	r0, r1
    9bdc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    9be0:	6060      	str	r0, [r4, #4]
    9be2:	b007      	add	sp, #28
    9be4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9be8:	3709      	adds	r7, #9
    9bea:	f1b9 0f00 	cmp.w	r9, #0
    9bee:	d016      	beq.n	9c1e <MPSL_IRQ_RADIO_Handler+0xd46>
    9bf0:	f002 fc1c 	bl	c42c <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    9bf4:	b998      	cbnz	r0, 9c1e <MPSL_IRQ_RADIO_Handler+0xd46>
    9bf6:	f002 fad3 	bl	c1a0 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    9bfa:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    9bfe:	bf08      	it	eq
    9c00:	200d      	moveq	r0, #13
    9c02:	d00b      	beq.n	9c1c <MPSL_IRQ_RADIO_Handler+0xd44>
    9c04:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    9c08:	3856      	subs	r0, #86	; 0x56
    9c0a:	bf08      	it	eq
    9c0c:	201c      	moveq	r0, #28
    9c0e:	d005      	beq.n	9c1c <MPSL_IRQ_RADIO_Handler+0xd44>
    9c10:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    9c14:	389f      	subs	r0, #159	; 0x9f
    9c16:	bf14      	ite	ne
    9c18:	2000      	movne	r0, #0
    9c1a:	2032      	moveq	r0, #50	; 0x32
    9c1c:	4407      	add	r7, r0
    9c1e:	9800      	ldr	r0, [sp, #0]
    9c20:	4580      	cmp	r8, r0
    9c22:	bf84      	itt	hi
    9c24:	eba8 0000 	subhi.w	r0, r8, r0
    9c28:	4407      	addhi	r7, r0
    9c2a:	f027 407f 	bic.w	r0, r7, #4278190080	; 0xff000000
    9c2e:	e7b5      	b.n	9b9c <MPSL_IRQ_RADIO_Handler+0xcc4>
    9c30:	1e848000 	.word	0x1e848000
    9c34:	0f424000 	.word	0x0f424000
    9c38:	1e847fff 	.word	0x1e847fff
    9c3c:	20001040 	.word	0x20001040
    9c40:	b570      	push	{r4, r5, r6, lr}
    9c42:	4d1e      	ldr	r5, [pc, #120]	; (9cbc <MPSL_IRQ_RADIO_Handler+0xde4>)
    9c44:	f895 0032 	ldrb.w	r0, [r5, #50]	; 0x32
    9c48:	2820      	cmp	r0, #32
    9c4a:	bf18      	it	ne
    9c4c:	bd70      	popne	{r4, r5, r6, pc}
    9c4e:	f895 2031 	ldrb.w	r2, [r5, #49]	; 0x31
    9c52:	eb02 0042 	add.w	r0, r2, r2, lsl #1
    9c56:	4428      	add	r0, r5
    9c58:	f890 4020 	ldrb.w	r4, [r0, #32]
    9c5c:	2c20      	cmp	r4, #32
    9c5e:	d027      	beq.n	9cb0 <MPSL_IRQ_RADIO_Handler+0xdd8>
    9c60:	4b17      	ldr	r3, [pc, #92]	; (9cc0 <MPSL_IRQ_RADIO_Handler+0xde8>)
    9c62:	eb03 1182 	add.w	r1, r3, r2, lsl #6
    9c66:	eb01 0144 	add.w	r1, r1, r4, lsl #1
    9c6a:	7849      	ldrb	r1, [r1, #1]
    9c6c:	f880 1020 	strb.w	r1, [r0, #32]
    9c70:	20ff      	movs	r0, #255	; 0xff
    9c72:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
    9c76:	f885 4032 	strb.w	r4, [r5, #50]	; 0x32
    9c7a:	4621      	mov	r1, r4
    9c7c:	2002      	movs	r0, #2
    9c7e:	f000 f891 	bl	9da4 <MPSL_IRQ_RADIO_Handler+0xecc>
    9c82:	2000      	movs	r0, #0
    9c84:	f885 0028 	strb.w	r0, [r5, #40]	; 0x28
    9c88:	77a8      	strb	r0, [r5, #30]
    9c8a:	490e      	ldr	r1, [pc, #56]	; (9cc4 <MPSL_IRQ_RADIO_Handler+0xdec>)
    9c8c:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
    9c90:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    9c94:	7e00      	ldrb	r0, [r0, #24]
    9c96:	2800      	cmp	r0, #0
    9c98:	bf08      	it	eq
    9c9a:	f002 fda9 	bleq	c7f0 <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q>
    9c9e:	2000      	movs	r0, #0
    9ca0:	4909      	ldr	r1, [pc, #36]	; (9cc8 <MPSL_IRQ_RADIO_Handler+0xdf0>)
    9ca2:	6849      	ldr	r1, [r1, #4]
    9ca4:	2900      	cmp	r1, #0
    9ca6:	bf08      	it	eq
    9ca8:	bd70      	popeq	{r4, r5, r6, pc}
    9caa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    9cae:	4708      	bx	r1
    9cb0:	f240 3132 	movw	r1, #818	; 0x332
    9cb4:	2070      	movs	r0, #112	; 0x70
    9cb6:	f002 fc31 	bl	c51c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9cba:	0000      	.short	0x0000
    9cbc:	20001040 	.word	0x20001040
    9cc0:	20000fc0 	.word	0x20000fc0
    9cc4:	20000c40 	.word	0x20000c40
    9cc8:	200002ec 	.word	0x200002ec
    9ccc:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    9cd0:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 9d94 <MPSL_IRQ_RADIO_Handler+0xebc>
    9cd4:	f898 5031 	ldrb.w	r5, [r8, #49]	; 0x31
    9cd8:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    9cdc:	4440      	add	r0, r8
    9cde:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    9ce2:	2c20      	cmp	r4, #32
    9ce4:	bf08      	it	eq
    9ce6:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    9cea:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 9d98 <MPSL_IRQ_RADIO_Handler+0xec0>
    9cee:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 9d9c <MPSL_IRQ_RADIO_Handler+0xec4>
    9cf2:	f5aa 7960 	sub.w	r9, sl, #896	; 0x380
    9cf6:	eb0a 1785 	add.w	r7, sl, r5, lsl #6
    9cfa:	2607      	movs	r6, #7
    9cfc:	f817 0014 	ldrb.w	r0, [r7, r4, lsl #1]
    9d00:	2801      	cmp	r0, #1
    9d02:	d00e      	beq.n	9d22 <MPSL_IRQ_RADIO_Handler+0xe4a>
    9d04:	2804      	cmp	r0, #4
    9d06:	bf08      	it	eq
    9d08:	2602      	moveq	r6, #2
    9d0a:	d00a      	beq.n	9d22 <MPSL_IRQ_RADIO_Handler+0xe4a>
    9d0c:	2805      	cmp	r0, #5
    9d0e:	bf0c      	ite	eq
    9d10:	2603      	moveq	r6, #3
    9d12:	2806      	cmpne	r0, #6
    9d14:	d005      	beq.n	9d22 <MPSL_IRQ_RADIO_Handler+0xe4a>
    9d16:	f640 01dd 	movw	r1, #2269	; 0x8dd
    9d1a:	f04f 0070 	mov.w	r0, #112	; 0x70
    9d1e:	f002 fbfd 	bl	c51c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9d22:	f1bb 0f00 	cmp.w	fp, #0
    9d26:	bf18      	it	ne
    9d28:	f3af 8000 	nopne.w
    9d2c:	f3ef 8010 	mrs	r0, PRIMASK
    9d30:	b672      	cpsid	i
    9d32:	eb07 0144 	add.w	r1, r7, r4, lsl #1
    9d36:	784a      	ldrb	r2, [r1, #1]
    9d38:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    9d3c:	4441      	add	r1, r8
    9d3e:	f881 2021 	strb.w	r2, [r1, #33]	; 0x21
    9d42:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    9d46:	42a2      	cmp	r2, r4
    9d48:	bf04      	itt	eq
    9d4a:	2220      	moveq	r2, #32
    9d4c:	f881 2022 	strbeq.w	r2, [r1, #34]	; 0x22
    9d50:	b1c0      	cbz	r0, 9d84 <MPSL_IRQ_RADIO_Handler+0xeac>
    9d52:	462a      	mov	r2, r5
    9d54:	4621      	mov	r1, r4
    9d56:	2001      	movs	r0, #1
    9d58:	f000 f824 	bl	9da4 <MPSL_IRQ_RADIO_Handler+0xecc>
    9d5c:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    9d60:	eb09 0081 	add.w	r0, r9, r1, lsl #2
    9d64:	f859 2021 	ldr.w	r2, [r9, r1, lsl #2]
    9d68:	6840      	ldr	r0, [r0, #4]
    9d6a:	4631      	mov	r1, r6
    9d6c:	4790      	blx	r2
    9d6e:	f898 5031 	ldrb.w	r5, [r8, #49]	; 0x31
    9d72:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    9d76:	4440      	add	r0, r8
    9d78:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    9d7c:	2c20      	cmp	r4, #32
    9d7e:	d1ba      	bne.n	9cf6 <MPSL_IRQ_RADIO_Handler+0xe1e>
    9d80:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    9d84:	4806      	ldr	r0, [pc, #24]	; (9da0 <MPSL_IRQ_RADIO_Handler+0xec8>)
    9d86:	2800      	cmp	r0, #0
    9d88:	bf18      	it	ne
    9d8a:	f3af 8000 	nopne.w
    9d8e:	b662      	cpsie	i
    9d90:	e7df      	b.n	9d52 <MPSL_IRQ_RADIO_Handler+0xe7a>
    9d92:	0000      	.short	0x0000
    9d94:	20001040 	.word	0x20001040
    9d98:	00000000 	.word	0x00000000
    9d9c:	20000fc0 	.word	0x20000fc0
    9da0:	00000000 	.word	0x00000000
    9da4:	f8df c058 	ldr.w	ip, [pc, #88]	; 9e00 <MPSL_IRQ_RADIO_Handler+0xf28>
    9da8:	b510      	push	{r4, lr}
    9daa:	2300      	movs	r3, #0
    9dac:	eb0c 1c82 	add.w	ip, ip, r2, lsl #6
    9db0:	2807      	cmp	r0, #7
    9db2:	d21f      	bcs.n	9df4 <MPSL_IRQ_RADIO_Handler+0xf1c>
    9db4:	e8df f000 	tbb	[pc, r0]
    9db8:	05050505 	.word	0x05050505
    9dbc:	00040404 	.word	0x00040404
    9dc0:	2301      	movs	r3, #1
    9dc2:	f80c 0011 	strb.w	r0, [ip, r1, lsl #1]
    9dc6:	2b00      	cmp	r3, #0
    9dc8:	bf08      	it	eq
    9dca:	bd10      	popeq	{r4, pc}
    9dcc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    9dd0:	480c      	ldr	r0, [pc, #48]	; (9e04 <MPSL_IRQ_RADIO_Handler+0xf2c>)
    9dd2:	4402      	add	r2, r0
    9dd4:	f892 0022 	ldrb.w	r0, [r2, #34]	; 0x22
    9dd8:	2820      	cmp	r0, #32
    9dda:	bf0e      	itee	eq
    9ddc:	f882 1021 	strbeq.w	r1, [r2, #33]	; 0x21
    9de0:	eb0c 0040 	addne.w	r0, ip, r0, lsl #1
    9de4:	7041      	strbne	r1, [r0, #1]
    9de6:	2020      	movs	r0, #32
    9de8:	eb0c 0341 	add.w	r3, ip, r1, lsl #1
    9dec:	7058      	strb	r0, [r3, #1]
    9dee:	f882 1022 	strb.w	r1, [r2, #34]	; 0x22
    9df2:	bd10      	pop	{r4, pc}
    9df4:	f240 216e 	movw	r1, #622	; 0x26e
    9df8:	2070      	movs	r0, #112	; 0x70
    9dfa:	f002 fb8f 	bl	c51c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9dfe:	0000      	.short	0x0000
    9e00:	20000fc0 	.word	0x20000fc0
    9e04:	20001040 	.word	0x20001040
    9e08:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    9e0c:	460f      	mov	r7, r1
    9e0e:	4680      	mov	r8, r0
    9e10:	f8df a160 	ldr.w	sl, [pc, #352]	; 9f74 <MPSL_IRQ_RADIO_Handler+0x109c>
    9e14:	eb01 0047 	add.w	r0, r1, r7, lsl #1
    9e18:	4450      	add	r0, sl
    9e1a:	f1b8 0f01 	cmp.w	r8, #1
    9e1e:	f890 4020 	ldrb.w	r4, [r0, #32]
    9e22:	4625      	mov	r5, r4
    9e24:	bf18      	it	ne
    9e26:	f1b8 0f02 	cmpne.w	r8, #2
    9e2a:	d005      	beq.n	9e38 <MPSL_IRQ_RADIO_Handler+0xf60>
    9e2c:	f640 21ac 	movw	r1, #2732	; 0xaac
    9e30:	f04f 0070 	mov.w	r0, #112	; 0x70
    9e34:	f002 fb72 	bl	c51c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9e38:	f04f 0b00 	mov.w	fp, #0
    9e3c:	2d20      	cmp	r5, #32
    9e3e:	d042      	beq.n	9ec6 <MPSL_IRQ_RADIO_Handler+0xfee>
    9e40:	f89a 001e 	ldrb.w	r0, [sl, #30]
    9e44:	2600      	movs	r6, #0
    9e46:	2800      	cmp	r0, #0
    9e48:	bf08      	it	eq
    9e4a:	2602      	moveq	r6, #2
    9e4c:	f001 fc16 	bl	b67c <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    9e50:	f8df c124 	ldr.w	ip, [pc, #292]	; 9f78 <MPSL_IRQ_RADIO_Handler+0x10a0>
    9e54:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    9e58:	eb0c 0181 	add.w	r1, ip, r1, lsl #2
    9e5c:	688a      	ldr	r2, [r1, #8]
    9e5e:	68c9      	ldr	r1, [r1, #12]
    9e60:	1a12      	subs	r2, r2, r0
    9e62:	1a09      	subs	r1, r1, r0
    9e64:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    9e68:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    9e6c:	4296      	cmp	r6, r2
    9e6e:	bf99      	ittee	ls
    9e70:	f5b2 0f00 	cmpls.w	r2, #8388608	; 0x800000
    9e74:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    9e78:	4a40      	ldrhi	r2, [pc, #256]	; (9f7c <MPSL_IRQ_RADIO_Handler+0x10a4>)
    9e7a:	eb02 1987 	addhi.w	r9, r2, r7, lsl #6
    9e7e:	d920      	bls.n	9ec2 <MPSL_IRQ_RADIO_Handler+0xfea>
    9e80:	4622      	mov	r2, r4
    9e82:	eb09 0142 	add.w	r1, r9, r2, lsl #1
    9e86:	784c      	ldrb	r4, [r1, #1]
    9e88:	2c20      	cmp	r4, #32
    9e8a:	d012      	beq.n	9eb2 <MPSL_IRQ_RADIO_Handler+0xfda>
    9e8c:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    9e90:	eb0c 0181 	add.w	r1, ip, r1, lsl #2
    9e94:	688b      	ldr	r3, [r1, #8]
    9e96:	68c9      	ldr	r1, [r1, #12]
    9e98:	1a1b      	subs	r3, r3, r0
    9e9a:	1a09      	subs	r1, r1, r0
    9e9c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    9ea0:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    9ea4:	429e      	cmp	r6, r3
    9ea6:	bf9c      	itt	ls
    9ea8:	f5b3 0f00 	cmpls.w	r3, #8388608	; 0x800000
    9eac:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    9eb0:	d8e6      	bhi.n	9e80 <MPSL_IRQ_RADIO_Handler+0xfa8>
    9eb2:	2a20      	cmp	r2, #32
    9eb4:	d005      	beq.n	9ec2 <MPSL_IRQ_RADIO_Handler+0xfea>
    9eb6:	463b      	mov	r3, r7
    9eb8:	2120      	movs	r1, #32
    9eba:	2004      	movs	r0, #4
    9ebc:	f7ff f82c 	bl	8f18 <MPSL_IRQ_RADIO_Handler+0x40>
    9ec0:	4604      	mov	r4, r0
    9ec2:	42ac      	cmp	r4, r5
    9ec4:	d116      	bne.n	9ef4 <MPSL_IRQ_RADIO_Handler+0x101c>
    9ec6:	482e      	ldr	r0, [pc, #184]	; (9f80 <MPSL_IRQ_RADIO_Handler+0x10a8>)
    9ec8:	2800      	cmp	r0, #0
    9eca:	bf18      	it	ne
    9ecc:	f3af 8000 	nopne.w
    9ed0:	f001 fbd4 	bl	b67c <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    9ed4:	4603      	mov	r3, r0
    9ed6:	f89a 0033 	ldrb.w	r0, [sl, #51]	; 0x33
    9eda:	2820      	cmp	r0, #32
    9edc:	d00d      	beq.n	9efa <MPSL_IRQ_RADIO_Handler+0x1022>
    9ede:	f8da 0008 	ldr.w	r0, [sl, #8]
    9ee2:	1c99      	adds	r1, r3, #2
    9ee4:	1a08      	subs	r0, r1, r0
    9ee6:	0200      	lsls	r0, r0, #8
    9ee8:	17c1      	asrs	r1, r0, #31
    9eea:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    9eee:	1200      	asrs	r0, r0, #8
    9ef0:	2800      	cmp	r0, #0
    9ef2:	dd02      	ble.n	9efa <MPSL_IRQ_RADIO_Handler+0x1022>
    9ef4:	2000      	movs	r0, #0
    9ef6:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    9efa:	2d20      	cmp	r5, #32
    9efc:	d014      	beq.n	9f28 <MPSL_IRQ_RADIO_Handler+0x1050>
    9efe:	462a      	mov	r2, r5
    9f00:	4641      	mov	r1, r8
    9f02:	4618      	mov	r0, r3
    9f04:	f7ff fa9e 	bl	9444 <MPSL_IRQ_RADIO_Handler+0x56c>
    9f08:	2800      	cmp	r0, #0
    9f0a:	bf1e      	ittt	ne
    9f0c:	f88a 5033 	strbne.w	r5, [sl, #51]	; 0x33
    9f10:	2002      	movne	r0, #2
    9f12:	e8bd 9ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    9f16:	463b      	mov	r3, r7
    9f18:	462a      	mov	r2, r5
    9f1a:	2120      	movs	r1, #32
    9f1c:	2004      	movs	r0, #4
    9f1e:	f7fe fffb 	bl	8f18 <MPSL_IRQ_RADIO_Handler+0x40>
    9f22:	2000      	movs	r0, #0
    9f24:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    9f28:	f8da 002c 	ldr.w	r0, [sl, #44]	; 0x2c
    9f2c:	f1b0 3fff 	cmp.w	r0, #4294967295
    9f30:	d005      	beq.n	9f3e <MPSL_IRQ_RADIO_Handler+0x1066>
    9f32:	f002 f93b 	bl	c1ac <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    9f36:	f04f 30ff 	mov.w	r0, #4294967295
    9f3a:	f8ca 002c 	str.w	r0, [sl, #44]	; 0x2c
    9f3e:	f89a 0030 	ldrb.w	r0, [sl, #48]	; 0x30
    9f42:	b120      	cbz	r0, 9f4e <MPSL_IRQ_RADIO_Handler+0x1076>
    9f44:	2005      	movs	r0, #5
    9f46:	f001 fe0f 	bl	bb68 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    9f4a:	f88a b030 	strb.w	fp, [sl, #48]	; 0x30
    9f4e:	2004      	movs	r0, #4
    9f50:	f001 fe0a 	bl	bb68 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    9f54:	f001 fe78 	bl	bc48 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    9f58:	2020      	movs	r0, #32
    9f5a:	f88a 0033 	strb.w	r0, [sl, #51]	; 0x33
    9f5e:	4809      	ldr	r0, [pc, #36]	; (9f84 <MPSL_IRQ_RADIO_Handler+0x10ac>)
    9f60:	6880      	ldr	r0, [r0, #8]
    9f62:	f8c0 b000 	str.w	fp, [r0]
    9f66:	4808      	ldr	r0, [pc, #32]	; (9f88 <MPSL_IRQ_RADIO_Handler+0x10b0>)
    9f68:	f8c0 b000 	str.w	fp, [r0]
    9f6c:	2001      	movs	r0, #1
    9f6e:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    9f72:	0000      	.short	0x0000
    9f74:	20001040 	.word	0x20001040
    9f78:	20000c40 	.word	0x20000c40
    9f7c:	20000fc0 	.word	0x20000fc0
    9f80:	00000000 	.word	0x00000000
    9f84:	200002ec 	.word	0x200002ec
    9f88:	40000508 	.word	0x40000508

00009f8c <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>:
    9f8c:	4906      	ldr	r1, [pc, #24]	; (9fa8 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI+0x1c>)
    9f8e:	b510      	push	{r4, lr}
    9f90:	f891 2032 	ldrb.w	r2, [r1, #50]	; 0x32
    9f94:	2a20      	cmp	r2, #32
    9f96:	bf1c      	itt	ne
    9f98:	7788      	strbne	r0, [r1, #30]
    9f9a:	bd10      	popne	{r4, pc}
    9f9c:	f240 319a 	movw	r1, #922	; 0x39a
    9fa0:	2070      	movs	r0, #112	; 0x70
    9fa2:	f002 fabb 	bl	c51c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9fa6:	0000      	.short	0x0000
    9fa8:	20001040 	.word	0x20001040

00009fac <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>:
    9fac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9fb0:	4e69      	ldr	r6, [pc, #420]	; (a158 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1ac>)
    9fb2:	4607      	mov	r7, r0
    9fb4:	b08d      	sub	sp, #52	; 0x34
    9fb6:	f896 0032 	ldrb.w	r0, [r6, #50]	; 0x32
    9fba:	4688      	mov	r8, r1
    9fbc:	2820      	cmp	r0, #32
    9fbe:	d055      	beq.n	a06c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xc0>
    9fc0:	f896 0032 	ldrb.w	r0, [r6, #50]	; 0x32
    9fc4:	f106 0408 	add.w	r4, r6, #8
    9fc8:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    9fcc:	f5a6 6980 	sub.w	r9, r6, #1024	; 0x400
    9fd0:	eb09 0a80 	add.w	sl, r9, r0, lsl #2
    9fd4:	2020      	movs	r0, #32
    9fd6:	f88d 0020 	strb.w	r0, [sp, #32]
    9fda:	f896 0031 	ldrb.w	r0, [r6, #49]	; 0x31
    9fde:	aa0a      	add	r2, sp, #40	; 0x28
    9fe0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    9fe4:	4430      	add	r0, r6
    9fe6:	a909      	add	r1, sp, #36	; 0x24
    9fe8:	f890 5020 	ldrb.w	r5, [r0, #32]
    9fec:	68f0      	ldr	r0, [r6, #12]
    9fee:	9002      	str	r0, [sp, #8]
    9ff0:	6830      	ldr	r0, [r6, #0]
    9ff2:	4438      	add	r0, r7
    9ff4:	f001 f9d8 	bl	b3a8 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    9ff8:	f8da 000c 	ldr.w	r0, [sl, #12]
    9ffc:	9909      	ldr	r1, [sp, #36]	; 0x24
    9ffe:	2f65      	cmp	r7, #101	; 0x65
    a000:	4408      	add	r0, r1
    a002:	d338      	bcc.n	a076 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xca>
    a004:	4a55      	ldr	r2, [pc, #340]	; (a15c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b0>)
    a006:	2100      	movs	r1, #0
    a008:	1bd2      	subs	r2, r2, r7
    a00a:	eb71 0201 	sbcs.w	r2, r1, r1
    a00e:	d332      	bcc.n	a076 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xca>
    a010:	6822      	ldr	r2, [r4, #0]
    a012:	1a82      	subs	r2, r0, r2
    a014:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    a018:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
    a01c:	d82b      	bhi.n	a076 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xca>
    a01e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    a022:	6060      	str	r0, [r4, #4]
    a024:	4630      	mov	r0, r6
    a026:	f884 8010 	strb.w	r8, [r4, #16]
    a02a:	f890 0031 	ldrb.w	r0, [r0, #49]	; 0x31
    a02e:	f10d 0a20 	add.w	sl, sp, #32
    a032:	2d20      	cmp	r5, #32
    a034:	bf1c      	itt	ne
    a036:	494a      	ldrne	r1, [pc, #296]	; (a160 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b4>)
    a038:	eb01 1b80 	addne.w	fp, r1, r0, lsl #6
    a03c:	d050      	beq.n	a0e0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    a03e:	bf00      	nop
    a040:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    a044:	eb09 0880 	add.w	r8, r9, r0, lsl #2
    a048:	6861      	ldr	r1, [r4, #4]
    a04a:	f8d8 6008 	ldr.w	r6, [r8, #8]
    a04e:	f108 0008 	add.w	r0, r8, #8
    a052:	1a71      	subs	r1, r6, r1
    a054:	0209      	lsls	r1, r1, #8
    a056:	17ca      	asrs	r2, r1, #31
    a058:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    a05c:	1209      	asrs	r1, r1, #8
    a05e:	d42d      	bmi.n	a0bc <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x110>
    a060:	89c0      	ldrh	r0, [r0, #14]
    a062:	2800      	cmp	r0, #0
    a064:	d03c      	beq.n	a0e0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    a066:	89e0      	ldrh	r0, [r4, #14]
    a068:	b148      	cbz	r0, a07e <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xd2>
    a06a:	e039      	b.n	a0e0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    a06c:	f640 3173 	movw	r1, #2931	; 0xb73
    a070:	2070      	movs	r0, #112	; 0x70
    a072:	f002 fa53 	bl	c51c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a076:	b00d      	add	sp, #52	; 0x34
    a078:	2001      	movs	r0, #1
    a07a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a07e:	6820      	ldr	r0, [r4, #0]
    a080:	900c      	str	r0, [sp, #48]	; 0x30
    a082:	f002 f88d 	bl	c1a0 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    a086:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    a08a:	bf08      	it	eq
    a08c:	200d      	moveq	r0, #13
    a08e:	d00b      	beq.n	a0a8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xfc>
    a090:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    a094:	3856      	subs	r0, #86	; 0x56
    a096:	bf08      	it	eq
    a098:	201c      	moveq	r0, #28
    a09a:	d005      	beq.n	a0a8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xfc>
    a09c:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    a0a0:	389f      	subs	r0, #159	; 0x9f
    a0a2:	bf14      	ite	ne
    a0a4:	2000      	movne	r0, #0
    a0a6:	2032      	moveq	r0, #50	; 0x32
    a0a8:	1c41      	adds	r1, r0, #1
    a0aa:	980c      	ldr	r0, [sp, #48]	; 0x30
    a0ac:	1a30      	subs	r0, r6, r0
    a0ae:	0200      	lsls	r0, r0, #8
    a0b0:	17c2      	asrs	r2, r0, #31
    a0b2:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    a0b6:	1200      	asrs	r0, r0, #8
    a0b8:	4288      	cmp	r0, r1
    a0ba:	da11      	bge.n	a0e0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    a0bc:	f88a 5000 	strb.w	r5, [sl]
    a0c0:	f898 1018 	ldrb.w	r1, [r8, #24]
    a0c4:	7c20      	ldrb	r0, [r4, #16]
    a0c6:	4281      	cmp	r1, r0
    a0c8:	d805      	bhi.n	a0d6 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x12a>
    a0ca:	9802      	ldr	r0, [sp, #8]
    a0cc:	6060      	str	r0, [r4, #4]
    a0ce:	b00d      	add	sp, #52	; 0x34
    a0d0:	2002      	movs	r0, #2
    a0d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a0d6:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    a0da:	7845      	ldrb	r5, [r0, #1]
    a0dc:	2d20      	cmp	r5, #32
    a0de:	d1af      	bne.n	a040 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x94>
    a0e0:	2005      	movs	r0, #5
    a0e2:	f001 fd41 	bl	bb68 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    a0e6:	4c1c      	ldr	r4, [pc, #112]	; (a158 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1ac>)
    a0e8:	f04f 30ff 	mov.w	r0, #4294967295
    a0ec:	6060      	str	r0, [r4, #4]
    a0ee:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
    a0f2:	f89d 2020 	ldrb.w	r2, [sp, #32]
    a0f6:	2120      	movs	r1, #32
    a0f8:	2a20      	cmp	r2, #32
    a0fa:	d003      	beq.n	a104 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x158>
    a0fc:	2005      	movs	r0, #5
    a0fe:	f7fe ff0b 	bl	8f18 <MPSL_IRQ_RADIO_Handler+0x40>
    a102:	e004      	b.n	a10e <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x162>
    a104:	eb03 0043 	add.w	r0, r3, r3, lsl #1
    a108:	4420      	add	r0, r4
    a10a:	f890 0020 	ldrb.w	r0, [r0, #32]
    a10e:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
    a112:	4913      	ldr	r1, [pc, #76]	; (a160 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b4>)
    a114:	eb01 1182 	add.w	r1, r1, r2, lsl #6
    a118:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
    a11c:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    a120:	7048      	strb	r0, [r1, #1]
    a122:	6820      	ldr	r0, [r4, #0]
    a124:	4438      	add	r0, r7
    a126:	6020      	str	r0, [r4, #0]
    a128:	20ff      	movs	r0, #255	; 0xff
    a12a:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    a12e:	7e60      	ldrb	r0, [r4, #25]
    a130:	2801      	cmp	r0, #1
    a132:	d105      	bne.n	a140 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x194>
    a134:	68e0      	ldr	r0, [r4, #12]
    a136:	1e40      	subs	r0, r0, #1
    a138:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    a13c:	f001 fb78 	bl	b830 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    a140:	f89d 0020 	ldrb.w	r0, [sp, #32]
    a144:	2820      	cmp	r0, #32
    a146:	d003      	beq.n	a150 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1a4>
    a148:	4806      	ldr	r0, [pc, #24]	; (a164 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b8>)
    a14a:	7840      	ldrb	r0, [r0, #1]
    a14c:	f002 faba 	bl	c6c4 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    a150:	b00d      	add	sp, #52	; 0x34
    a152:	2000      	movs	r0, #0
    a154:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a158:	20001040 	.word	0x20001040
    a15c:	0f424000 	.word	0x0f424000
    a160:	20000fc0 	.word	0x20000fc0
    a164:	200002ec 	.word	0x200002ec

0000a168 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>:
    a168:	4806      	ldr	r0, [pc, #24]	; (a184 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA+0x1c>)
    a16a:	b510      	push	{r4, lr}
    a16c:	f890 1032 	ldrb.w	r1, [r0, #50]	; 0x32
    a170:	2920      	cmp	r1, #32
    a172:	bf1c      	itt	ne
    a174:	7e00      	ldrbne	r0, [r0, #24]
    a176:	bd10      	popne	{r4, pc}
    a178:	f640 316d 	movw	r1, #2925	; 0xb6d
    a17c:	2070      	movs	r0, #112	; 0x70
    a17e:	f002 f9cd 	bl	c51c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a182:	0000      	.short	0x0000
    a184:	20001040 	.word	0x20001040

0000a188 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>:
    a188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a18a:	4d6f      	ldr	r5, [pc, #444]	; (a348 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c0>)
    a18c:	2601      	movs	r6, #1
    a18e:	f505 6480 	add.w	r4, r5, #1024	; 0x400
    a192:	4a6e      	ldr	r2, [pc, #440]	; (a34c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c4>)
    a194:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    a196:	2808      	cmp	r0, #8
    a198:	d272      	bcs.n	a280 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xf8>
    a19a:	e8df f000 	tbb	[pc, r0]
    a19e:	7704      	.short	0x7704
    a1a0:	44cfb19f 	.word	0x44cfb19f
    a1a4:	bbb6      	.short	0xbbb6
    a1a6:	f1b1 3fff 	cmp.w	r1, #4294967295
    a1aa:	d104      	bne.n	a1b6 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x2e>
    a1ac:	f002 f81a 	bl	c1e4 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    a1b0:	f001 fa64 	bl	b67c <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    a1b4:	62e0      	str	r0, [r4, #44]	; 0x2c
    a1b6:	8ae0      	ldrh	r0, [r4, #22]
    a1b8:	b110      	cbz	r0, a1c0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x38>
    a1ba:	f002 f937 	bl	c42c <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    a1be:	b180      	cbz	r0, a1e2 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x5a>
    a1c0:	f7ff fd3e 	bl	9c40 <MPSL_IRQ_RADIO_Handler+0xd68>
    a1c4:	20ff      	movs	r0, #255	; 0xff
    a1c6:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
    a1ca:	6861      	ldr	r1, [r4, #4]
    a1cc:	f1b1 3fff 	cmp.w	r1, #4294967295
    a1d0:	d003      	beq.n	a1da <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x52>
    a1d2:	2005      	movs	r0, #5
    a1d4:	f001 fc12 	bl	b9fc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    a1d8:	b140      	cbz	r0, a1ec <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x64>
    a1da:	7e60      	ldrb	r0, [r4, #25]
    a1dc:	2801      	cmp	r0, #1
    a1de:	d110      	bne.n	a202 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x7a>
    a1e0:	e009      	b.n	a1f6 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x6e>
    a1e2:	f640 0169 	movw	r1, #2153	; 0x869
    a1e6:	2070      	movs	r0, #112	; 0x70
    a1e8:	f002 f998 	bl	c51c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a1ec:	f640 016e 	movw	r1, #2158	; 0x86e
    a1f0:	2070      	movs	r0, #112	; 0x70
    a1f2:	f002 f993 	bl	c51c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a1f6:	68e0      	ldr	r0, [r4, #12]
    a1f8:	1e40      	subs	r0, r0, #1
    a1fa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    a1fe:	f001 fb17 	bl	b830 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    a202:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    a206:	f894 1032 	ldrb.w	r1, [r4, #50]	; 0x32
    a20a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    a20e:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    a212:	6840      	ldr	r0, [r0, #4]
    a214:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    a218:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    a21c:	b001      	add	sp, #4
    a21e:	2101      	movs	r1, #1
    a220:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    a224:	4710      	bx	r2
    a226:	f894 0030 	ldrb.w	r0, [r4, #48]	; 0x30
    a22a:	b158      	cbz	r0, a244 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xbc>
    a22c:	f1b1 3fff 	cmp.w	r1, #4294967295
    a230:	d104      	bne.n	a23c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xb4>
    a232:	f001 ffd7 	bl	c1e4 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    a236:	f001 fa21 	bl	b67c <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    a23a:	62e0      	str	r0, [r4, #44]	; 0x2c
    a23c:	2000      	movs	r0, #0
    a23e:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    a242:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a244:	f7ff fcfc 	bl	9c40 <MPSL_IRQ_RADIO_Handler+0xd68>
    a248:	f04f 30ff 	mov.w	r0, #4294967295
    a24c:	6060      	str	r0, [r4, #4]
    a24e:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    a252:	f88d 0000 	strb.w	r0, [sp]
    a256:	f89d 0000 	ldrb.w	r0, [sp]
    a25a:	b190      	cbz	r0, a282 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xfa>
    a25c:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    a260:	f894 1032 	ldrb.w	r1, [r4, #50]	; 0x32
    a264:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    a268:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    a26c:	6840      	ldr	r0, [r0, #4]
    a26e:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    a272:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    a276:	b001      	add	sp, #4
    a278:	2106      	movs	r1, #6
    a27a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    a27e:	4710      	bx	r2
    a280:	e05c      	b.n	a33c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b4>
    a282:	f640 0185 	movw	r1, #2181	; 0x885
    a286:	2070      	movs	r0, #112	; 0x70
    a288:	f002 f948 	bl	c51c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a28c:	f7ff fcd8 	bl	9c40 <MPSL_IRQ_RADIO_Handler+0xd68>
    a290:	f884 6026 	strb.w	r6, [r4, #38]	; 0x26
    a294:	f002 f8ca 	bl	c42c <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    a298:	b120      	cbz	r0, a2a4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x11c>
    a29a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    a29c:	f1b0 3fff 	cmp.w	r0, #4294967295
    a2a0:	d005      	beq.n	a2ae <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x126>
    a2a2:	e009      	b.n	a2b8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x130>
    a2a4:	f640 0193 	movw	r1, #2195	; 0x893
    a2a8:	2070      	movs	r0, #112	; 0x70
    a2aa:	f002 f937 	bl	c51c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a2ae:	f001 ff99 	bl	c1e4 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    a2b2:	f001 f9e3 	bl	b67c <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    a2b6:	62e0      	str	r0, [r4, #44]	; 0x2c
    a2b8:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    a2bc:	f894 1032 	ldrb.w	r1, [r4, #50]	; 0x32
    a2c0:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    a2c4:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    a2c8:	6840      	ldr	r0, [r0, #4]
    a2ca:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    a2ce:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    a2d2:	b001      	add	sp, #4
    a2d4:	2100      	movs	r1, #0
    a2d6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    a2da:	4710      	bx	r2
    a2dc:	f001 fd6a 	bl	bdb4 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>
    a2e0:	8ae0      	ldrh	r0, [r4, #22]
    a2e2:	b110      	cbz	r0, a2ea <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x162>
    a2e4:	f002 f8a2 	bl	c42c <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    a2e8:	b128      	cbz	r0, a2f6 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x16e>
    a2ea:	f001 fd77 	bl	bddc <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>
    a2ee:	2800      	cmp	r0, #0
    a2f0:	bf18      	it	ne
    a2f2:	7766      	strbne	r6, [r4, #29]
    a2f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a2f6:	f640 019d 	movw	r1, #2205	; 0x89d
    a2fa:	2070      	movs	r0, #112	; 0x70
    a2fc:	f002 f90e 	bl	c51c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a300:	4813      	ldr	r0, [pc, #76]	; (a350 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c8>)
    a302:	6006      	str	r6, [r0, #0]
    a304:	6890      	ldr	r0, [r2, #8]
    a306:	6006      	str	r6, [r0, #0]
    a308:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a30a:	7810      	ldrb	r0, [r2, #0]
    a30c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    a310:	f002 b9d8 	b.w	c6c4 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    a314:	f7ff fc94 	bl	9c40 <MPSL_IRQ_RADIO_Handler+0xd68>
    a318:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    a31c:	f894 1032 	ldrb.w	r1, [r4, #50]	; 0x32
    a320:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    a324:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    a328:	6840      	ldr	r0, [r0, #4]
    a32a:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    a32e:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    a332:	b001      	add	sp, #4
    a334:	2105      	movs	r1, #5
    a336:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    a33a:	4710      	bx	r2
    a33c:	f44f 610b 	mov.w	r1, #2224	; 0x8b0
    a340:	2070      	movs	r0, #112	; 0x70
    a342:	f002 f8eb 	bl	c51c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a346:	0000      	.short	0x0000
    a348:	20000c40 	.word	0x20000c40
    a34c:	200002ec 	.word	0x200002ec
    a350:	40000508 	.word	0x40000508

0000a354 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>:
    a354:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a358:	4682      	mov	sl, r0
    a35a:	48ed      	ldr	r0, [pc, #948]	; (a710 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3bc>)
    a35c:	b08d      	sub	sp, #52	; 0x34
    a35e:	6800      	ldr	r0, [r0, #0]
    a360:	4dec      	ldr	r5, [pc, #944]	; (a714 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3c0>)
    a362:	05c0      	lsls	r0, r0, #23
    a364:	0dc0      	lsrs	r0, r0, #23
    a366:	d00e      	beq.n	a386 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32>
    a368:	3810      	subs	r0, #16
    a36a:	b240      	sxtb	r0, r0
    a36c:	2800      	cmp	r0, #0
    a36e:	bfb8      	it	lt
    a370:	f000 000f 	andlt.w	r0, r0, #15
    a374:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    a378:	bfac      	ite	ge
    a37a:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    a37e:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    a382:	0940      	lsrs	r0, r0, #5
    a384:	d00d      	beq.n	a3a2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4e>
    a386:	980e      	ldr	r0, [sp, #56]	; 0x38
    a388:	f04f 0b00 	mov.w	fp, #0
    a38c:	7800      	ldrb	r0, [r0, #0]
    a38e:	2800      	cmp	r0, #0
    a390:	bf18      	it	ne
    a392:	2801      	cmpne	r0, #1
    a394:	d018      	beq.n	a3c8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    a396:	f240 713b 	movw	r1, #1851	; 0x73b
    a39a:	f04f 0070 	mov.w	r0, #112	; 0x70
    a39e:	f002 f8bd 	bl	c51c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a3a2:	f895 0032 	ldrb.w	r0, [r5, #50]	; 0x32
    a3a6:	f04f 0b01 	mov.w	fp, #1
    a3aa:	2820      	cmp	r0, #32
    a3ac:	d007      	beq.n	a3be <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x6a>
    a3ae:	980e      	ldr	r0, [sp, #56]	; 0x38
    a3b0:	7800      	ldrb	r0, [r0, #0]
    a3b2:	b148      	cbz	r0, a3c8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    a3b4:	f240 7137 	movw	r1, #1847	; 0x737
    a3b8:	2070      	movs	r0, #112	; 0x70
    a3ba:	f002 f8af 	bl	c51c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a3be:	f240 7134 	movw	r1, #1844	; 0x734
    a3c2:	2070      	movs	r0, #112	; 0x70
    a3c4:	f002 f8aa 	bl	c51c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a3c8:	4cd3      	ldr	r4, [pc, #844]	; (a718 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3c4>)
    a3ca:	b124      	cbz	r4, a3d6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x82>
    a3cc:	2100      	movs	r1, #0
    a3ce:	f240 703e 	movw	r0, #1854	; 0x73e
    a3d2:	f3af 8000 	nop.w
    a3d6:	2000      	movs	r0, #0
    a3d8:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
    a3dc:	49cf      	ldr	r1, [pc, #828]	; (a71c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3c8>)
    a3de:	ebca 00ca 	rsb	r0, sl, sl, lsl #3
    a3e2:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    a3e6:	f04f 0901 	mov.w	r9, #1
    a3ea:	9000      	str	r0, [sp, #0]
    a3ec:	b124      	cbz	r4, a3f8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xa4>
    a3ee:	2100      	movs	r1, #0
    a3f0:	f240 7049 	movw	r0, #1865	; 0x749
    a3f4:	f3af 8000 	nop.w
    a3f8:	f1b9 0f00 	cmp.w	r9, #0
    a3fc:	d00a      	beq.n	a414 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xc0>
    a3fe:	bf00      	nop
    a400:	f895 6031 	ldrb.w	r6, [r5, #49]	; 0x31
    a404:	f04f 0800 	mov.w	r8, #0
    a408:	f885 8029 	strb.w	r8, [r5, #41]	; 0x29
    a40c:	f1bb 0f00 	cmp.w	fp, #0
    a410:	d007      	beq.n	a422 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xce>
    a412:	e038      	b.n	a486 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x132>
    a414:	48c2      	ldr	r0, [pc, #776]	; (a720 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3cc>)
    a416:	2800      	cmp	r0, #0
    a418:	bf18      	it	ne
    a41a:	f3af 8000 	nopne.w
    a41e:	b662      	cpsie	i
    a420:	e7ee      	b.n	a400 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xac>
    a422:	4637      	mov	r7, r6
    a424:	2001      	movs	r0, #1
    a426:	ea20 0607 	bic.w	r6, r0, r7
    a42a:	48be      	ldr	r0, [pc, #760]	; (a724 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3d0>)
    a42c:	2240      	movs	r2, #64	; 0x40
    a42e:	eb00 1187 	add.w	r1, r0, r7, lsl #6
    a432:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    a436:	f006 fd05 	bl	10e44 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    a43a:	b124      	cbz	r4, a446 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xf2>
    a43c:	2100      	movs	r1, #0
    a43e:	f240 505e 	movw	r0, #1374	; 0x55e
    a442:	f3af 8000 	nop.w
    a446:	eb07 0147 	add.w	r1, r7, r7, lsl #1
    a44a:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    a44e:	4429      	add	r1, r5
    a450:	4428      	add	r0, r5
    a452:	8c0a      	ldrh	r2, [r1, #32]
    a454:	8402      	strh	r2, [r0, #32]
    a456:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
    a45a:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
    a45e:	b124      	cbz	r4, a46a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x116>
    a460:	2100      	movs	r1, #0
    a462:	f240 5062 	movw	r0, #1378	; 0x562
    a466:	f3af 8000 	nop.w
    a46a:	b124      	cbz	r4, a476 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x122>
    a46c:	2100      	movs	r1, #0
    a46e:	f240 7053 	movw	r0, #1875	; 0x753
    a472:	f3af 8000 	nop.w
    a476:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
    a47a:	f88d 0018 	strb.w	r0, [sp, #24]
    a47e:	f89d 0018 	ldrb.w	r0, [sp, #24]
    a482:	2800      	cmp	r0, #0
    a484:	d1b2      	bne.n	a3ec <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
    a486:	b124      	cbz	r4, a492 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x13e>
    a488:	2100      	movs	r1, #0
    a48a:	f240 705d 	movw	r0, #1885	; 0x75d
    a48e:	f3af 8000 	nop.w
    a492:	a806      	add	r0, sp, #24
    a494:	f001 f8f8 	bl	b688 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>
    a498:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    a49c:	e9cd 0108 	strd	r0, r1, [sp, #32]
    a4a0:	4633      	mov	r3, r6
    a4a2:	aa01      	add	r2, sp, #4
    a4a4:	a808      	add	r0, sp, #32
    a4a6:	990e      	ldr	r1, [sp, #56]	; 0x38
    a4a8:	f7ff fa68 	bl	997c <MPSL_IRQ_RADIO_Handler+0xaa4>
    a4ac:	b124      	cbz	r4, a4b8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x164>
    a4ae:	2100      	movs	r1, #0
    a4b0:	f240 7064 	movw	r0, #1892	; 0x764
    a4b4:	f3af 8000 	nop.w
    a4b8:	4a9a      	ldr	r2, [pc, #616]	; (a724 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3d0>)
    a4ba:	9908      	ldr	r1, [sp, #32]
    a4bc:	eb02 1786 	add.w	r7, r2, r6, lsl #6
    a4c0:	a801      	add	r0, sp, #4
    a4c2:	f817 201a 	ldrb.w	r2, [r7, sl, lsl #1]
    a4c6:	2a01      	cmp	r2, #1
    a4c8:	bf18      	it	ne
    a4ca:	2a02      	cmpne	r2, #2
    a4cc:	d138      	bne.n	a540 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1ec>
    a4ce:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
    a4d2:	9a01      	ldr	r2, [sp, #4]
    a4d4:	9b02      	ldr	r3, [sp, #8]
    a4d6:	eba2 0201 	sub.w	r2, r2, r1
    a4da:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    a4de:	eba3 0101 	sub.w	r1, r3, r1
    a4e2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    a4e6:	2a02      	cmp	r2, #2
    a4e8:	d360      	bcc.n	a5ac <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    a4ea:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
    a4ee:	bf98      	it	ls
    a4f0:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    a4f4:	d85a      	bhi.n	a5ac <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    a4f6:	f04f 0801 	mov.w	r8, #1
    a4fa:	ab07      	add	r3, sp, #28
    a4fc:	aa06      	add	r2, sp, #24
    a4fe:	4631      	mov	r1, r6
    a500:	f7fe fefe 	bl	9300 <MPSL_IRQ_RADIO_Handler+0x428>
    a504:	2800      	cmp	r0, #0
    a506:	d059      	beq.n	a5bc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x268>
    a508:	f89d 1018 	ldrb.w	r1, [sp, #24]
    a50c:	f89d 201c 	ldrb.w	r2, [sp, #28]
    a510:	4633      	mov	r3, r6
    a512:	428a      	cmp	r2, r1
    a514:	d056      	beq.n	a5c4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x270>
    a516:	2005      	movs	r0, #5
    a518:	f7fe fcfe 	bl	8f18 <MPSL_IRQ_RADIO_Handler+0x40>
    a51c:	eb07 014a 	add.w	r1, r7, sl, lsl #1
    a520:	7048      	strb	r0, [r1, #1]
    a522:	f89d 0018 	ldrb.w	r0, [sp, #24]
    a526:	2820      	cmp	r0, #32
    a528:	bf1c      	itt	ne
    a52a:	eb07 0040 	addne.w	r0, r7, r0, lsl #1
    a52e:	f880 a001 	strbne.w	sl, [r0, #1]
    a532:	d053      	beq.n	a5dc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x288>
    a534:	4632      	mov	r2, r6
    a536:	4651      	mov	r1, sl
    a538:	f05f 0003 	movs.w	r0, #3
    a53c:	f7ff fc32 	bl	9da4 <MPSL_IRQ_RADIO_Handler+0xecc>
    a540:	b124      	cbz	r4, a54c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1f8>
    a542:	2100      	movs	r1, #0
    a544:	f240 7069 	movw	r0, #1897	; 0x769
    a548:	f3af 8000 	nop.w
    a54c:	4876      	ldr	r0, [pc, #472]	; (a728 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3d4>)
    a54e:	2800      	cmp	r0, #0
    a550:	bf18      	it	ne
    a552:	f3af 8000 	nopne.w
    a556:	f3ef 8910 	mrs	r9, PRIMASK
    a55a:	b672      	cpsid	i
    a55c:	b124      	cbz	r4, a568 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x214>
    a55e:	2100      	movs	r1, #0
    a560:	f240 706f 	movw	r0, #1903	; 0x76f
    a564:	f3af 8000 	nop.w
    a568:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
    a56c:	f88d 0018 	strb.w	r0, [sp, #24]
    a570:	f89d 0018 	ldrb.w	r0, [sp, #24]
    a574:	2800      	cmp	r0, #0
    a576:	f47f af39 	bne.w	a3ec <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
    a57a:	b124      	cbz	r4, a586 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x232>
    a57c:	2100      	movs	r1, #0
    a57e:	f240 7077 	movw	r0, #1911	; 0x777
    a582:	f3af 8000 	nop.w
    a586:	e89d 108f 	ldmia.w	sp, {r0, r1, r2, r3, r7, ip}
    a58a:	f100 0008 	add.w	r0, r0, #8
    a58e:	f1b8 0f00 	cmp.w	r8, #0
    a592:	e880 108e 	stmia.w	r0, {r1, r2, r3, r7, ip}
    a596:	d051      	beq.n	a63c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2e8>
    a598:	b124      	cbz	r4, a5a4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x250>
    a59a:	2100      	movs	r1, #0
    a59c:	f240 7084 	movw	r0, #1924	; 0x784
    a5a0:	f3af 8000 	nop.w
    a5a4:	f1bb 0f00 	cmp.w	fp, #0
    a5a8:	d139      	bne.n	a61e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ca>
    a5aa:	e01f      	b.n	a5ec <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x298>
    a5ac:	4632      	mov	r2, r6
    a5ae:	4651      	mov	r1, sl
    a5b0:	2004      	movs	r0, #4
    a5b2:	f7ff fbf7 	bl	9da4 <MPSL_IRQ_RADIO_Handler+0xecc>
    a5b6:	f04f 0801 	mov.w	r8, #1
    a5ba:	e7c1      	b.n	a540 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1ec>
    a5bc:	4632      	mov	r2, r6
    a5be:	4651      	mov	r1, sl
    a5c0:	2004      	movs	r0, #4
    a5c2:	e7bb      	b.n	a53c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1e8>
    a5c4:	2920      	cmp	r1, #32
    a5c6:	bf19      	ittee	ne
    a5c8:	eb07 0041 	addne.w	r0, r7, r1, lsl #1
    a5cc:	7840      	ldrbne	r0, [r0, #1]
    a5ce:	eb06 0046 	addeq.w	r0, r6, r6, lsl #1
    a5d2:	4428      	addeq	r0, r5
    a5d4:	bf08      	it	eq
    a5d6:	f890 0020 	ldrbeq.w	r0, [r0, #32]
    a5da:	e79f      	b.n	a51c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1c8>
    a5dc:	eb06 0146 	add.w	r1, r6, r6, lsl #1
    a5e0:	4429      	add	r1, r5
    a5e2:	f881 a020 	strb.w	sl, [r1, #32]
    a5e6:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
    a5ea:	e7a3      	b.n	a534 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1e0>
    a5ec:	980b      	ldr	r0, [sp, #44]	; 0x2c
    a5ee:	f010 0fff 	tst.w	r0, #255	; 0xff
    a5f2:	d014      	beq.n	a61e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ca>
    a5f4:	f895 0032 	ldrb.w	r0, [r5, #50]	; 0x32
    a5f8:	2820      	cmp	r0, #32
    a5fa:	d110      	bne.n	a61e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ca>
    a5fc:	b124      	cbz	r4, a608 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2b4>
    a5fe:	2100      	movs	r1, #0
    a600:	f240 7089 	movw	r0, #1929	; 0x789
    a604:	f3af 8000 	nop.w
    a608:	4631      	mov	r1, r6
    a60a:	2002      	movs	r0, #2
    a60c:	f7ff fbfc 	bl	9e08 <MPSL_IRQ_RADIO_Handler+0xf30>
    a610:	900a      	str	r0, [sp, #40]	; 0x28
    a612:	b920      	cbnz	r0, a61e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ca>
    a614:	980e      	ldr	r0, [sp, #56]	; 0x38
    a616:	7800      	ldrb	r0, [r0, #0]
    a618:	b1e8      	cbz	r0, a656 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x302>
    a61a:	2801      	cmp	r0, #1
    a61c:	d02a      	beq.n	a674 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x320>
    a61e:	b124      	cbz	r4, a62a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d6>
    a620:	2100      	movs	r1, #0
    a622:	f240 70a6 	movw	r0, #1958	; 0x7a6
    a626:	f3af 8000 	nop.w
    a62a:	20ff      	movs	r0, #255	; 0xff
    a62c:	f1bb 0f00 	cmp.w	fp, #0
    a630:	bf18      	it	ne
    a632:	f885 0029 	strbne.w	r0, [r5, #41]	; 0x29
    a636:	d026      	beq.n	a686 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x332>
    a638:	f04f 0801 	mov.w	r8, #1
    a63c:	b124      	cbz	r4, a648 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2f4>
    a63e:	2100      	movs	r1, #0
    a640:	f240 70b7 	movw	r0, #1975	; 0x7b7
    a644:	f3af 8000 	nop.w
    a648:	980a      	ldr	r0, [sp, #40]	; 0x28
    a64a:	4e38      	ldr	r6, [pc, #224]	; (a72c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3d8>)
    a64c:	2802      	cmp	r0, #2
    a64e:	d023      	beq.n	a698 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x344>
    a650:	2801      	cmp	r0, #1
    a652:	d029      	beq.n	a6a8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x354>
    a654:	e02d      	b.n	a6b2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x35e>
    a656:	b124      	cbz	r4, a662 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x30e>
    a658:	2100      	movs	r1, #0
    a65a:	f240 7091 	movw	r0, #1937	; 0x791
    a65e:	f3af 8000 	nop.w
    a662:	f895 2031 	ldrb.w	r2, [r5, #49]	; 0x31
    a666:	4651      	mov	r1, sl
    a668:	2004      	movs	r0, #4
    a66a:	f7ff fb9b 	bl	9da4 <MPSL_IRQ_RADIO_Handler+0xecc>
    a66e:	f04f 0801 	mov.w	r8, #1
    a672:	e7e3      	b.n	a63c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2e8>
    a674:	2c00      	cmp	r4, #0
    a676:	f43f aeb9 	beq.w	a3ec <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
    a67a:	2100      	movs	r1, #0
    a67c:	f240 709c 	movw	r0, #1948	; 0x79c
    a680:	f3af 8000 	nop.w
    a684:	e6b2      	b.n	a3ec <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
    a686:	f895 2031 	ldrb.w	r2, [r5, #49]	; 0x31
    a68a:	2101      	movs	r1, #1
    a68c:	4391      	bics	r1, r2
    a68e:	f885 1031 	strb.w	r1, [r5, #49]	; 0x31
    a692:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
    a696:	e7cf      	b.n	a638 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2e4>
    a698:	68a8      	ldr	r0, [r5, #8]
    a69a:	9908      	ldr	r1, [sp, #32]
    a69c:	1a40      	subs	r0, r0, r1
    a69e:	f006 fa50 	bl	10b42 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    a6a2:	6871      	ldr	r1, [r6, #4]
    a6a4:	b921      	cbnz	r1, a6b0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x35c>
    a6a6:	e004      	b.n	a6b2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x35e>
    a6a8:	6871      	ldr	r1, [r6, #4]
    a6aa:	f04f 30ff 	mov.w	r0, #4294967295
    a6ae:	b101      	cbz	r1, a6b2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x35e>
    a6b0:	4788      	blx	r1
    a6b2:	f1b9 0f00 	cmp.w	r9, #0
    a6b6:	d024      	beq.n	a702 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3ae>
    a6b8:	b124      	cbz	r4, a6c4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x370>
    a6ba:	2100      	movs	r1, #0
    a6bc:	f240 70c7 	movw	r0, #1991	; 0x7c7
    a6c0:	f3af 8000 	nop.w
    a6c4:	f1b8 0f00 	cmp.w	r8, #0
    a6c8:	d011      	beq.n	a6ee <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x39a>
    a6ca:	f895 0031 	ldrb.w	r0, [r5, #49]	; 0x31
    a6ce:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    a6d2:	4428      	add	r0, r5
    a6d4:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
    a6d8:	2820      	cmp	r0, #32
    a6da:	d008      	beq.n	a6ee <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x39a>
    a6dc:	b124      	cbz	r4, a6e8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x394>
    a6de:	2100      	movs	r1, #0
    a6e0:	f240 70ce 	movw	r0, #1998	; 0x7ce
    a6e4:	f3af 8000 	nop.w
    a6e8:	7870      	ldrb	r0, [r6, #1]
    a6ea:	f001 ffeb 	bl	c6c4 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    a6ee:	b124      	cbz	r4, a6fa <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3a6>
    a6f0:	2100      	movs	r1, #0
    a6f2:	f240 70d3 	movw	r0, #2003	; 0x7d3
    a6f6:	f3af 8000 	nop.w
    a6fa:	b00f      	add	sp, #60	; 0x3c
    a6fc:	4640      	mov	r0, r8
    a6fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a702:	4807      	ldr	r0, [pc, #28]	; (a720 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3cc>)
    a704:	2800      	cmp	r0, #0
    a706:	bf18      	it	ne
    a708:	f3af 8000 	nopne.w
    a70c:	b662      	cpsie	i
    a70e:	e7d3      	b.n	a6b8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x364>
    a710:	e000ed04 	.word	0xe000ed04
    a714:	20001040 	.word	0x20001040
    a718:	00000000 	.word	0x00000000
    a71c:	20000c40 	.word	0x20000c40
    a720:	00000000 	.word	0x00000000
    a724:	20000fc0 	.word	0x20000fc0
    a728:	00000000 	.word	0x00000000
    a72c:	200002ec 	.word	0x200002ec

0000a730 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>:
    a730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a734:	4606      	mov	r6, r0
    a736:	7800      	ldrb	r0, [r0, #0]
    a738:	b08d      	sub	sp, #52	; 0x34
    a73a:	b118      	cbz	r0, a744 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x14>
    a73c:	b00d      	add	sp, #52	; 0x34
    a73e:	2000      	movs	r0, #0
    a740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a744:	488c      	ldr	r0, [pc, #560]	; (a978 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x248>)
    a746:	6800      	ldr	r0, [r0, #0]
    a748:	05c0      	lsls	r0, r0, #23
    a74a:	0dc0      	lsrs	r0, r0, #23
    a74c:	d00e      	beq.n	a76c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x3c>
    a74e:	3810      	subs	r0, #16
    a750:	b240      	sxtb	r0, r0
    a752:	2800      	cmp	r0, #0
    a754:	bfb8      	it	lt
    a756:	f000 000f 	andlt.w	r0, r0, #15
    a75a:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    a75e:	bfac      	ite	ge
    a760:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    a764:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    a768:	0940      	lsrs	r0, r0, #5
    a76a:	d0e7      	beq.n	a73c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xc>
    a76c:	4d83      	ldr	r5, [pc, #524]	; (a97c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x24c>)
    a76e:	4c84      	ldr	r4, [pc, #528]	; (a980 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x250>)
    a770:	f04f 0b01 	mov.w	fp, #1
    a774:	2700      	movs	r7, #0
    a776:	b125      	cbz	r5, a782 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x52>
    a778:	2100      	movs	r1, #0
    a77a:	f240 50e5 	movw	r0, #1509	; 0x5e5
    a77e:	f3af 8000 	nop.w
    a782:	f894 a031 	ldrb.w	sl, [r4, #49]	; 0x31
    a786:	f884 7029 	strb.w	r7, [r4, #41]	; 0x29
    a78a:	f04f 0900 	mov.w	r9, #0
    a78e:	b125      	cbz	r5, a79a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x6a>
    a790:	2100      	movs	r1, #0
    a792:	f240 50ea 	movw	r0, #1514	; 0x5ea
    a796:	f3af 8000 	nop.w
    a79a:	487a      	ldr	r0, [pc, #488]	; (a984 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x254>)
    a79c:	ea2b 080a 	bic.w	r8, fp, sl
    a7a0:	eb00 118a 	add.w	r1, r0, sl, lsl #6
    a7a4:	eb00 1088 	add.w	r0, r0, r8, lsl #6
    a7a8:	2240      	movs	r2, #64	; 0x40
    a7aa:	f006 fb4b 	bl	10e44 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    a7ae:	b125      	cbz	r5, a7ba <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x8a>
    a7b0:	2100      	movs	r1, #0
    a7b2:	f240 505e 	movw	r0, #1374	; 0x55e
    a7b6:	f3af 8000 	nop.w
    a7ba:	eb0a 014a 	add.w	r1, sl, sl, lsl #1
    a7be:	eb08 0048 	add.w	r0, r8, r8, lsl #1
    a7c2:	4421      	add	r1, r4
    a7c4:	4420      	add	r0, r4
    a7c6:	8c0a      	ldrh	r2, [r1, #32]
    a7c8:	8402      	strh	r2, [r0, #32]
    a7ca:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
    a7ce:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
    a7d2:	b125      	cbz	r5, a7de <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xae>
    a7d4:	2100      	movs	r1, #0
    a7d6:	f240 5062 	movw	r0, #1378	; 0x562
    a7da:	f3af 8000 	nop.w
    a7de:	b125      	cbz	r5, a7ea <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xba>
    a7e0:	2100      	movs	r1, #0
    a7e2:	f240 50ef 	movw	r0, #1519	; 0x5ef
    a7e6:	f3af 8000 	nop.w
    a7ea:	a808      	add	r0, sp, #32
    a7ec:	f000 ff4c 	bl	b688 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>
    a7f0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    a7f4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
    a7f8:	4643      	mov	r3, r8
    a7fa:	466a      	mov	r2, sp
    a7fc:	4631      	mov	r1, r6
    a7fe:	a80a      	add	r0, sp, #40	; 0x28
    a800:	f7ff f8bc 	bl	997c <MPSL_IRQ_RADIO_Handler+0xaa4>
    a804:	b125      	cbz	r5, a810 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xe0>
    a806:	2100      	movs	r1, #0
    a808:	f240 50f5 	movw	r0, #1525	; 0x5f5
    a80c:	f3af 8000 	nop.w
    a810:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    a814:	2820      	cmp	r0, #32
    a816:	d01a      	beq.n	a84e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x11e>
    a818:	68e0      	ldr	r0, [r4, #12]
    a81a:	9900      	ldr	r1, [sp, #0]
    a81c:	1a09      	subs	r1, r1, r0
    a81e:	0209      	lsls	r1, r1, #8
    a820:	17ca      	asrs	r2, r1, #31
    a822:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    a826:	1209      	asrs	r1, r1, #8
    a828:	d511      	bpl.n	a84e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x11e>
    a82a:	9900      	ldr	r1, [sp, #0]
    a82c:	4281      	cmp	r1, r0
    a82e:	d902      	bls.n	a836 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x106>
    a830:	9902      	ldr	r1, [sp, #8]
    a832:	1c49      	adds	r1, r1, #1
    a834:	9102      	str	r1, [sp, #8]
    a836:	e9dd 2100 	ldrd	r2, r1, [sp]
    a83a:	1a89      	subs	r1, r1, r2
    a83c:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
    a840:	4408      	add	r0, r1
    a842:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    a846:	e9cd 2000 	strd	r2, r0, [sp]
    a84a:	f04f 0901 	mov.w	r9, #1
    a84e:	b125      	cbz	r5, a85a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x12a>
    a850:	2100      	movs	r1, #0
    a852:	f240 50ff 	movw	r0, #1535	; 0x5ff
    a856:	f3af 8000 	nop.w
    a85a:	9900      	ldr	r1, [sp, #0]
    a85c:	980a      	ldr	r0, [sp, #40]	; 0x28
    a85e:	9a01      	ldr	r2, [sp, #4]
    a860:	1a09      	subs	r1, r1, r0
    a862:	1a10      	subs	r0, r2, r0
    a864:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    a868:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    a86c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
    a870:	bf98      	it	ls
    a872:	f5b0 0f00 	cmpls.w	r0, #8388608	; 0x800000
    a876:	d809      	bhi.n	a88c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x15c>
    a878:	4643      	mov	r3, r8
    a87a:	4669      	mov	r1, sp
    a87c:	4842      	ldr	r0, [pc, #264]	; (a988 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x258>)
    a87e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a880:	f7fe fb86 	bl	8f90 <MPSL_IRQ_RADIO_Handler+0xb8>
    a884:	ea59 0000 	orrs.w	r0, r9, r0
    a888:	d129      	bne.n	a8de <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1ae>
    a88a:	e042      	b.n	a912 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1e2>
    a88c:	980b      	ldr	r0, [sp, #44]	; 0x2c
    a88e:	f8bd a00e 	ldrh.w	sl, [sp, #14]
    a892:	9002      	str	r0, [sp, #8]
    a894:	aa09      	add	r2, sp, #36	; 0x24
    a896:	a907      	add	r1, sp, #28
    a898:	4650      	mov	r0, sl
    a89a:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
    a89e:	f000 fd83 	bl	b3a8 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    a8a2:	f001 faa5 	bl	bdf0 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    a8a6:	f000 fd63 	bl	b370 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    a8aa:	4681      	mov	r9, r0
    a8ac:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    a8b0:	2820      	cmp	r0, #32
    a8b2:	d03b      	beq.n	a92c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1fc>
    a8b4:	68e0      	ldr	r0, [r4, #12]
    a8b6:	1d40      	adds	r0, r0, #5
    a8b8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    a8bc:	9900      	ldr	r1, [sp, #0]
    a8be:	4281      	cmp	r1, r0
    a8c0:	d902      	bls.n	a8c8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x198>
    a8c2:	9902      	ldr	r1, [sp, #8]
    a8c4:	1c49      	adds	r1, r1, #1
    a8c6:	9102      	str	r1, [sp, #8]
    a8c8:	e9dd 2100 	ldrd	r2, r1, [sp]
    a8cc:	1a89      	subs	r1, r1, r2
    a8ce:	9000      	str	r0, [sp, #0]
    a8d0:	4408      	add	r0, r1
    a8d2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    a8d6:	9001      	str	r0, [sp, #4]
    a8d8:	201f      	movs	r0, #31
    a8da:	f88d 000c 	strb.w	r0, [sp, #12]
    a8de:	9800      	ldr	r0, [sp, #0]
    a8e0:	f006 f92f 	bl	10b42 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    a8e4:	1c41      	adds	r1, r0, #1
    a8e6:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    a8ea:	f89d 200c 	ldrb.w	r2, [sp, #12]
    a8ee:	4410      	add	r0, r2
    a8f0:	4408      	add	r0, r1
    a8f2:	e9c6 0704 	strd	r0, r7, [r6, #16]
    a8f6:	b125      	cbz	r5, a902 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1d2>
    a8f8:	2100      	movs	r1, #0
    a8fa:	f240 601a 	movw	r0, #1562	; 0x61a
    a8fe:	f3af 8000 	nop.w
    a902:	e9d6 1004 	ldrd	r1, r0, [r6, #16]
    a906:	4a21      	ldr	r2, [pc, #132]	; (a98c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x25c>)
    a908:	9b02      	ldr	r3, [sp, #8]
    a90a:	fbe3 1002 	umlal	r1, r0, r3, r2
    a90e:	e9c6 1004 	strd	r1, r0, [r6, #16]
    a912:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    a916:	f88d 0014 	strb.w	r0, [sp, #20]
    a91a:	f89d 0014 	ldrb.w	r0, [sp, #20]
    a91e:	2800      	cmp	r0, #0
    a920:	f47f af29 	bne.w	a776 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x46>
    a924:	b00d      	add	sp, #52	; 0x34
    a926:	2001      	movs	r0, #1
    a928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a92c:	f108 0809 	add.w	r8, r8, #9
    a930:	f1ba 0f00 	cmp.w	sl, #0
    a934:	d016      	beq.n	a964 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x234>
    a936:	f001 fd79 	bl	c42c <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    a93a:	b998      	cbnz	r0, a964 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x234>
    a93c:	f001 fc30 	bl	c1a0 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    a940:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    a944:	bf08      	it	eq
    a946:	200d      	moveq	r0, #13
    a948:	d00b      	beq.n	a962 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x232>
    a94a:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    a94e:	3856      	subs	r0, #86	; 0x56
    a950:	bf08      	it	eq
    a952:	201c      	moveq	r0, #28
    a954:	d005      	beq.n	a962 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x232>
    a956:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    a95a:	389f      	subs	r0, #159	; 0x9f
    a95c:	bf14      	ite	ne
    a95e:	4638      	movne	r0, r7
    a960:	2032      	moveq	r0, #50	; 0x32
    a962:	4480      	add	r8, r0
    a964:	9807      	ldr	r0, [sp, #28]
    a966:	4581      	cmp	r9, r0
    a968:	bf84      	itt	hi
    a96a:	eba9 0000 	subhi.w	r0, r9, r0
    a96e:	4480      	addhi	r8, r0
    a970:	f028 407f 	bic.w	r0, r8, #4278190080	; 0xff000000
    a974:	e7a2      	b.n	a8bc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x18c>
    a976:	0000      	.short	0x0000
    a978:	e000ed04 	.word	0xe000ed04
    a97c:	00000000 	.word	0x00000000
    a980:	20001040 	.word	0x20001040
    a984:	20000fc0 	.word	0x20000fc0
    a988:	0f424000 	.word	0x0f424000
    a98c:	1e848000 	.word	0x1e848000

0000a990 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>:
    a990:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a994:	4d92      	ldr	r5, [pc, #584]	; (abe0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x250>)
    a996:	b08c      	sub	sp, #48	; 0x30
    a998:	f895 0031 	ldrb.w	r0, [r5, #49]	; 0x31
    a99c:	2000      	movs	r0, #0
    a99e:	9008      	str	r0, [sp, #32]
    a9a0:	9006      	str	r0, [sp, #24]
    a9a2:	2001      	movs	r0, #1
    a9a4:	4c8f      	ldr	r4, [pc, #572]	; (abe4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x254>)
    a9a6:	f1a5 0980 	sub.w	r9, r5, #128	; 0x80
    a9aa:	f04f 0800 	mov.w	r8, #0
    a9ae:	4607      	mov	r7, r0
    a9b0:	9007      	str	r0, [sp, #28]
    a9b2:	b124      	cbz	r4, a9be <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x2e>
    a9b4:	2100      	movs	r1, #0
    a9b6:	f240 70e4 	movw	r0, #2020	; 0x7e4
    a9ba:	f3af 8000 	nop.w
    a9be:	9807      	ldr	r0, [sp, #28]
    a9c0:	2800      	cmp	r0, #0
    a9c2:	d03c      	beq.n	aa3e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xae>
    a9c4:	f885 8029 	strb.w	r8, [r5, #41]	; 0x29
    a9c8:	b124      	cbz	r4, a9d4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x44>
    a9ca:	2100      	movs	r1, #0
    a9cc:	f240 70e9 	movw	r0, #2025	; 0x7e9
    a9d0:	f3af 8000 	nop.w
    a9d4:	f895 a031 	ldrb.w	sl, [r5, #49]	; 0x31
    a9d8:	2240      	movs	r2, #64	; 0x40
    a9da:	ea27 060a 	bic.w	r6, r7, sl
    a9de:	eb09 1086 	add.w	r0, r9, r6, lsl #6
    a9e2:	eb09 118a 	add.w	r1, r9, sl, lsl #6
    a9e6:	4683      	mov	fp, r0
    a9e8:	f006 fa2c 	bl	10e44 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    a9ec:	b124      	cbz	r4, a9f8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x68>
    a9ee:	2100      	movs	r1, #0
    a9f0:	f240 505e 	movw	r0, #1374	; 0x55e
    a9f4:	f3af 8000 	nop.w
    a9f8:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    a9fc:	eb0a 014a 	add.w	r1, sl, sl, lsl #1
    aa00:	4428      	add	r0, r5
    aa02:	4429      	add	r1, r5
    aa04:	9000      	str	r0, [sp, #0]
    aa06:	8c0a      	ldrh	r2, [r1, #32]
    aa08:	8402      	strh	r2, [r0, #32]
    aa0a:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
    aa0e:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
    aa12:	b124      	cbz	r4, aa1e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x8e>
    aa14:	2100      	movs	r1, #0
    aa16:	f240 5062 	movw	r0, #1378	; 0x562
    aa1a:	f3af 8000 	nop.w
    aa1e:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
    aa22:	f88d 0008 	strb.w	r0, [sp, #8]
    aa26:	f89d 0008 	ldrb.w	r0, [sp, #8]
    aa2a:	b178      	cbz	r0, aa4c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xbc>
    aa2c:	2c00      	cmp	r4, #0
    aa2e:	bf1c      	itt	ne
    aa30:	2100      	movne	r1, #0
    aa32:	f240 70ef 	movwne	r0, #2031	; 0x7ef
    aa36:	d0bc      	beq.n	a9b2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22>
    aa38:	f3af 8000 	nop.w
    aa3c:	e7b9      	b.n	a9b2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22>
    aa3e:	486a      	ldr	r0, [pc, #424]	; (abe8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x258>)
    aa40:	2800      	cmp	r0, #0
    aa42:	bf18      	it	ne
    aa44:	f3af 8000 	nopne.w
    aa48:	b662      	cpsie	i
    aa4a:	e7bb      	b.n	a9c4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x34>
    aa4c:	b124      	cbz	r4, aa58 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xc8>
    aa4e:	2100      	movs	r1, #0
    aa50:	f240 70f3 	movw	r0, #2035	; 0x7f3
    aa54:	f3af 8000 	nop.w
    aa58:	980c      	ldr	r0, [sp, #48]	; 0x30
    aa5a:	f81b 0010 	ldrb.w	r0, [fp, r0, lsl #1]
    aa5e:	2803      	cmp	r0, #3
    aa60:	d17e      	bne.n	ab60 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d0>
    aa62:	9a00      	ldr	r2, [sp, #0]
    aa64:	990c      	ldr	r1, [sp, #48]	; 0x30
    aa66:	f892 0020 	ldrb.w	r0, [r2, #32]
    aa6a:	4288      	cmp	r0, r1
    aa6c:	bf14      	ite	ne
    aa6e:	f04f 0a00 	movne.w	sl, #0
    aa72:	f04f 0a01 	moveq.w	sl, #1
    aa76:	f102 0c20 	add.w	ip, r2, #32
    aa7a:	4683      	mov	fp, r0
    aa7c:	2220      	movs	r2, #32
    aa7e:	eb09 1386 	add.w	r3, r9, r6, lsl #6
    aa82:	e003      	b.n	aa8c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xfc>
    aa84:	4602      	mov	r2, r0
    aa86:	eb03 0042 	add.w	r0, r3, r2, lsl #1
    aa8a:	7840      	ldrb	r0, [r0, #1]
    aa8c:	4288      	cmp	r0, r1
    aa8e:	d002      	beq.n	aa96 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x106>
    aa90:	2820      	cmp	r0, #32
    aa92:	d00a      	beq.n	aaaa <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11a>
    aa94:	e7f6      	b.n	aa84 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xf4>
    aa96:	2820      	cmp	r0, #32
    aa98:	d007      	beq.n	aaaa <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11a>
    aa9a:	4583      	cmp	fp, r0
    aa9c:	d107      	bne.n	aaae <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11e>
    aa9e:	eb03 004b 	add.w	r0, r3, fp, lsl #1
    aaa2:	7840      	ldrb	r0, [r0, #1]
    aaa4:	f88c 0000 	strb.w	r0, [ip]
    aaa8:	e007      	b.n	aaba <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x12a>
    aaaa:	4640      	mov	r0, r8
    aaac:	e00c      	b.n	aac8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x138>
    aaae:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    aab2:	eb03 0142 	add.w	r1, r3, r2, lsl #1
    aab6:	7840      	ldrb	r0, [r0, #1]
    aab8:	7048      	strb	r0, [r1, #1]
    aaba:	b124      	cbz	r4, aac6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x136>
    aabc:	2100      	movs	r1, #0
    aabe:	f240 40c9 	movw	r0, #1225	; 0x4c9
    aac2:	f3af 8000 	nop.w
    aac6:	4638      	mov	r0, r7
    aac8:	46c3      	mov	fp, r8
    aaca:	ea10 0f0a 	tst.w	r0, sl
    aace:	bf18      	it	ne
    aad0:	46bb      	movne	fp, r7
    aad2:	2800      	cmp	r0, #0
    aad4:	d04e      	beq.n	ab74 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e4>
    aad6:	b124      	cbz	r4, aae2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x152>
    aad8:	2100      	movs	r1, #0
    aada:	f44f 60ff 	mov.w	r0, #2040	; 0x7f8
    aade:	f3af 8000 	nop.w
    aae2:	4632      	mov	r2, r6
    aae4:	2001      	movs	r0, #1
    aae6:	990c      	ldr	r1, [sp, #48]	; 0x30
    aae8:	f7ff f95c 	bl	9da4 <MPSL_IRQ_RADIO_Handler+0xecc>
    aaec:	b124      	cbz	r4, aaf8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x168>
    aaee:	2100      	movs	r1, #0
    aaf0:	f640 0001 	movw	r0, #2049	; 0x801
    aaf4:	f3af 8000 	nop.w
    aaf8:	483c      	ldr	r0, [pc, #240]	; (abec <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x25c>)
    aafa:	2800      	cmp	r0, #0
    aafc:	bf18      	it	ne
    aafe:	f3af 8000 	nopne.w
    ab02:	f3ef 8010 	mrs	r0, PRIMASK
    ab06:	b672      	cpsid	i
    ab08:	9007      	str	r0, [sp, #28]
    ab0a:	b124      	cbz	r4, ab16 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x186>
    ab0c:	2100      	movs	r1, #0
    ab0e:	f640 0006 	movw	r0, #2054	; 0x806
    ab12:	f3af 8000 	nop.w
    ab16:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
    ab1a:	f88d 0008 	strb.w	r0, [sp, #8]
    ab1e:	f89d 0008 	ldrb.w	r0, [sp, #8]
    ab22:	b138      	cbz	r0, ab34 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1a4>
    ab24:	2c00      	cmp	r4, #0
    ab26:	bf1c      	itt	ne
    ab28:	2100      	movne	r1, #0
    ab2a:	f640 000a 	movwne	r0, #2058	; 0x80a
    ab2e:	f43f af40 	beq.w	a9b2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22>
    ab32:	e781      	b.n	aa38 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xa8>
    ab34:	f1bb 0f00 	cmp.w	fp, #0
    ab38:	d009      	beq.n	ab4e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1be>
    ab3a:	f895 0032 	ldrb.w	r0, [r5, #50]	; 0x32
    ab3e:	2820      	cmp	r0, #32
    ab40:	d105      	bne.n	ab4e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1be>
    ab42:	4631      	mov	r1, r6
    ab44:	2002      	movs	r0, #2
    ab46:	f7ff f95f 	bl	9e08 <MPSL_IRQ_RADIO_Handler+0xf30>
    ab4a:	9006      	str	r0, [sp, #24]
    ab4c:	b1f8      	cbz	r0, ab8e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1fe>
    ab4e:	b124      	cbz	r4, ab5a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ca>
    ab50:	2100      	movs	r1, #0
    ab52:	f640 001e 	movw	r0, #2078	; 0x81e
    ab56:	f3af 8000 	nop.w
    ab5a:	f895 0031 	ldrb.w	r0, [r5, #49]	; 0x31
    ab5e:	e000      	b.n	ab62 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d2>
    ab60:	e008      	b.n	ab74 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e4>
    ab62:	ea27 0000 	bic.w	r0, r7, r0
    ab66:	f885 0031 	strb.w	r0, [r5, #49]	; 0x31
    ab6a:	20ff      	movs	r0, #255	; 0xff
    ab6c:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
    ab70:	2001      	movs	r0, #1
    ab72:	9008      	str	r0, [sp, #32]
    ab74:	b124      	cbz	r4, ab80 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f0>
    ab76:	2100      	movs	r1, #0
    ab78:	f640 0027 	movw	r0, #2087	; 0x827
    ab7c:	f3af 8000 	nop.w
    ab80:	9806      	ldr	r0, [sp, #24]
    ab82:	4e1b      	ldr	r6, [pc, #108]	; (abf0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x260>)
    ab84:	2802      	cmp	r0, #2
    ab86:	d009      	beq.n	ab9c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20c>
    ab88:	2801      	cmp	r0, #1
    ab8a:	d010      	beq.n	abae <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x21e>
    ab8c:	e014      	b.n	abb8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x228>
    ab8e:	b19c      	cbz	r4, abb8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x228>
    ab90:	2100      	movs	r1, #0
    ab92:	f640 0019 	movw	r0, #2073	; 0x819
    ab96:	f3af 8000 	nop.w
    ab9a:	e7ec      	b.n	ab76 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e6>
    ab9c:	f000 fd6e 	bl	b67c <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    aba0:	68a9      	ldr	r1, [r5, #8]
    aba2:	1a08      	subs	r0, r1, r0
    aba4:	f005 ffcd 	bl	10b42 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    aba8:	6871      	ldr	r1, [r6, #4]
    abaa:	b921      	cbnz	r1, abb6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x226>
    abac:	e004      	b.n	abb8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x228>
    abae:	6871      	ldr	r1, [r6, #4]
    abb0:	f04f 30ff 	mov.w	r0, #4294967295
    abb4:	b101      	cbz	r1, abb8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x228>
    abb6:	4788      	blx	r1
    abb8:	9807      	ldr	r0, [sp, #28]
    abba:	b148      	cbz	r0, abd0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x240>
    abbc:	b124      	cbz	r4, abc8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x238>
    abbe:	2100      	movs	r1, #0
    abc0:	f640 003c 	movw	r0, #2108	; 0x83c
    abc4:	f3af 8000 	nop.w
    abc8:	9808      	ldr	r0, [sp, #32]
    abca:	b00d      	add	sp, #52	; 0x34
    abcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    abd0:	4805      	ldr	r0, [pc, #20]	; (abe8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x258>)
    abd2:	2800      	cmp	r0, #0
    abd4:	bf18      	it	ne
    abd6:	f3af 8000 	nopne.w
    abda:	b662      	cpsie	i
    abdc:	e7ee      	b.n	abbc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22c>
    abde:	0000      	.short	0x0000
    abe0:	20001040 	.word	0x20001040
	...
    abf0:	200002ec 	.word	0x200002ec

0000abf4 <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI>:
    abf4:	2820      	cmp	r0, #32
    abf6:	bf24      	itt	cs
    abf8:	2000      	movcs	r0, #0
    abfa:	4770      	bxcs	lr
    abfc:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    ac00:	4b03      	ldr	r3, [pc, #12]	; (ac10 <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI+0x1c>)
    ac02:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
    ac06:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    ac0a:	6042      	str	r2, [r0, #4]
    ac0c:	2001      	movs	r0, #1
    ac0e:	4770      	bx	lr
    ac10:	20000c40 	.word	0x20000c40

0000ac14 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>:
    ac14:	b510      	push	{r4, lr}
    ac16:	2820      	cmp	r0, #32
    ac18:	d211      	bcs.n	ac3e <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    ac1a:	490e      	ldr	r1, [pc, #56]	; (ac54 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x40>)
    ac1c:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    ac20:	f1a1 0280 	sub.w	r2, r1, #128	; 0x80
    ac24:	eb02 1c83 	add.w	ip, r2, r3, lsl #6
    ac28:	f81c 3010 	ldrb.w	r3, [ip, r0, lsl #1]
    ac2c:	b13b      	cbz	r3, ac3e <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    ac2e:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    ac32:	eb02 1283 	add.w	r2, r2, r3, lsl #6
    ac36:	f812 2010 	ldrb.w	r2, [r2, r0, lsl #1]
    ac3a:	2a01      	cmp	r2, #1
    ac3c:	d001      	beq.n	ac42 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2e>
    ac3e:	2000      	movs	r0, #0
    ac40:	bd10      	pop	{r4, pc}
    ac42:	f891 2031 	ldrb.w	r2, [r1, #49]	; 0x31
    ac46:	4601      	mov	r1, r0
    ac48:	2000      	movs	r0, #0
    ac4a:	f7ff f8ab 	bl	9da4 <MPSL_IRQ_RADIO_Handler+0xecc>
    ac4e:	2001      	movs	r0, #1
    ac50:	bd10      	pop	{r4, pc}
    ac52:	0000      	.short	0x0000
    ac54:	20001040 	.word	0x20001040

0000ac58 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>:
    ac58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ac5c:	4e86      	ldr	r6, [pc, #536]	; (ae78 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x220>)
    ac5e:	4680      	mov	r8, r0
    ac60:	f896 0031 	ldrb.w	r0, [r6, #49]	; 0x31
    ac64:	f1a6 0780 	sub.w	r7, r6, #128	; 0x80
    ac68:	eb07 1080 	add.w	r0, r7, r0, lsl #6
    ac6c:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    ac70:	2800      	cmp	r0, #0
    ac72:	d071      	beq.n	ad58 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x100>
    ac74:	f896 9031 	ldrb.w	r9, [r6, #49]	; 0x31
    ac78:	4d80      	ldr	r5, [pc, #512]	; (ae7c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x224>)
    ac7a:	b125      	cbz	r5, ac86 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x2e>
    ac7c:	2100      	movs	r1, #0
    ac7e:	f640 30b9 	movw	r0, #3001	; 0xbb9
    ac82:	f3af 8000 	nop.w
    ac86:	eb07 1489 	add.w	r4, r7, r9, lsl #6
    ac8a:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    ac8e:	2801      	cmp	r0, #1
    ac90:	d018      	beq.n	acc4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6c>
    ac92:	b2c0      	uxtb	r0, r0
    ac94:	2804      	cmp	r0, #4
    ac96:	bf1c      	itt	ne
    ac98:	2805      	cmpne	r0, #5
    ac9a:	2806      	cmpne	r0, #6
    ac9c:	d061      	beq.n	ad62 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x10a>
    ac9e:	b12d      	cbz	r5, acac <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x54>
    aca0:	f04f 0100 	mov.w	r1, #0
    aca4:	f640 30c5 	movw	r0, #3013	; 0xbc5
    aca8:	f3af 8000 	nop.w
    acac:	f006 f87f 	bl	10dae <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    acb0:	b125      	cbz	r5, acbc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x64>
    acb2:	2100      	movs	r1, #0
    acb4:	f640 30c9 	movw	r0, #3017	; 0xbc9
    acb8:	f3af 8000 	nop.w
    acbc:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    acc0:	2801      	cmp	r0, #1
    acc2:	d1e6      	bne.n	ac92 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x3a>
    acc4:	2401      	movs	r4, #1
    acc6:	b125      	cbz	r5, acd2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7a>
    acc8:	2100      	movs	r1, #0
    acca:	f44f 603d 	mov.w	r0, #3024	; 0xbd0
    acce:	f3af 8000 	nop.w
    acd2:	2c00      	cmp	r4, #0
    acd4:	d04b      	beq.n	ad6e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x116>
    acd6:	2000      	movs	r0, #0
    acd8:	f886 0029 	strb.w	r0, [r6, #41]	; 0x29
    acdc:	b125      	cbz	r5, ace8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x90>
    acde:	2100      	movs	r1, #0
    ace0:	f640 30d5 	movw	r0, #3029	; 0xbd5
    ace4:	f3af 8000 	nop.w
    ace8:	f896 b031 	ldrb.w	fp, [r6, #49]	; 0x31
    acec:	2001      	movs	r0, #1
    acee:	ea20 090b 	bic.w	r9, r0, fp
    acf2:	eb07 118b 	add.w	r1, r7, fp, lsl #6
    acf6:	eb07 1089 	add.w	r0, r7, r9, lsl #6
    acfa:	2240      	movs	r2, #64	; 0x40
    acfc:	f006 f8a2 	bl	10e44 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    ad00:	b125      	cbz	r5, ad0c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xb4>
    ad02:	2100      	movs	r1, #0
    ad04:	f240 505e 	movw	r0, #1374	; 0x55e
    ad08:	f3af 8000 	nop.w
    ad0c:	eb09 0049 	add.w	r0, r9, r9, lsl #1
    ad10:	eb00 0a06 	add.w	sl, r0, r6
    ad14:	eb0b 004b 	add.w	r0, fp, fp, lsl #1
    ad18:	4430      	add	r0, r6
    ad1a:	8c01      	ldrh	r1, [r0, #32]
    ad1c:	f8aa 1020 	strh.w	r1, [sl, #32]
    ad20:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    ad24:	f88a 0022 	strb.w	r0, [sl, #34]	; 0x22
    ad28:	b125      	cbz	r5, ad34 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xdc>
    ad2a:	2100      	movs	r1, #0
    ad2c:	f240 5062 	movw	r0, #1378	; 0x562
    ad30:	f3af 8000 	nop.w
    ad34:	f896 0029 	ldrb.w	r0, [r6, #41]	; 0x29
    ad38:	f88d 0000 	strb.w	r0, [sp]
    ad3c:	f89d 0000 	ldrb.w	r0, [sp]
    ad40:	b1e0      	cbz	r0, ad7c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x124>
    ad42:	2d00      	cmp	r5, #0
    ad44:	bf1c      	itt	ne
    ad46:	2100      	movne	r1, #0
    ad48:	f640 30db 	movwne	r0, #3035	; 0xbdb
    ad4c:	d0bb      	beq.n	acc6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    ad4e:	bf00      	nop
    ad50:	f3af 8000 	nop.w
    ad54:	e7b7      	b.n	acc6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    ad56:	e7ff      	b.n	ad58 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x100>
    ad58:	f44f 613b 	mov.w	r1, #2992	; 0xbb0
    ad5c:	2070      	movs	r0, #112	; 0x70
    ad5e:	f001 fbdd 	bl	c51c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    ad62:	464a      	mov	r2, r9
    ad64:	4641      	mov	r1, r8
    ad66:	2001      	movs	r0, #1
    ad68:	f7ff f81c 	bl	9da4 <MPSL_IRQ_RADIO_Handler+0xecc>
    ad6c:	e7a0      	b.n	acb0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x58>
    ad6e:	4844      	ldr	r0, [pc, #272]	; (ae80 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x228>)
    ad70:	2800      	cmp	r0, #0
    ad72:	bf18      	it	ne
    ad74:	f3af 8000 	nopne.w
    ad78:	b662      	cpsie	i
    ad7a:	e7ac      	b.n	acd6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7e>
    ad7c:	b125      	cbz	r5, ad88 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x130>
    ad7e:	2100      	movs	r1, #0
    ad80:	f640 30df 	movw	r0, #3039	; 0xbdf
    ad84:	f3af 8000 	nop.w
    ad88:	f89a 3021 	ldrb.w	r3, [sl, #33]	; 0x21
    ad8c:	f10a 0121 	add.w	r1, sl, #33	; 0x21
    ad90:	4640      	mov	r0, r8
    ad92:	461c      	mov	r4, r3
    ad94:	f04f 0b20 	mov.w	fp, #32
    ad98:	eb07 1289 	add.w	r2, r7, r9, lsl #6
    ad9c:	f10a 0a22 	add.w	sl, sl, #34	; 0x22
    ada0:	e004      	b.n	adac <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x154>
    ada2:	46a3      	mov	fp, r4
    ada4:	eb02 0c4b 	add.w	ip, r2, fp, lsl #1
    ada8:	f89c 4001 	ldrb.w	r4, [ip, #1]
    adac:	4284      	cmp	r4, r0
    adae:	d002      	beq.n	adb6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x15e>
    adb0:	2c20      	cmp	r4, #32
    adb2:	d02b      	beq.n	ae0c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b4>
    adb4:	e7f5      	b.n	ada2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x14a>
    adb6:	2c20      	cmp	r4, #32
    adb8:	d028      	beq.n	ae0c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b4>
    adba:	42a3      	cmp	r3, r4
    adbc:	d104      	bne.n	adc8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x170>
    adbe:	eb02 0043 	add.w	r0, r2, r3, lsl #1
    adc2:	7840      	ldrb	r0, [r0, #1]
    adc4:	7008      	strb	r0, [r1, #0]
    adc6:	e005      	b.n	add4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x17c>
    adc8:	eb02 0044 	add.w	r0, r2, r4, lsl #1
    adcc:	eb02 014b 	add.w	r1, r2, fp, lsl #1
    add0:	7840      	ldrb	r0, [r0, #1]
    add2:	7048      	strb	r0, [r1, #1]
    add4:	f1ba 0f00 	cmp.w	sl, #0
    add8:	d011      	beq.n	adfe <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a6>
    adda:	b125      	cbz	r5, ade6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x18e>
    addc:	2100      	movs	r1, #0
    adde:	f240 40c1 	movw	r0, #1217	; 0x4c1
    ade2:	f3af 8000 	nop.w
    ade6:	f89a 0000 	ldrb.w	r0, [sl]
    adea:	42a0      	cmp	r0, r4
    adec:	d107      	bne.n	adfe <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a6>
    adee:	b125      	cbz	r5, adfa <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a2>
    adf0:	2100      	movs	r1, #0
    adf2:	f240 40c4 	movw	r0, #1220	; 0x4c4
    adf6:	f3af 8000 	nop.w
    adfa:	f88a b000 	strb.w	fp, [sl]
    adfe:	b15d      	cbz	r5, ae18 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1c0>
    ae00:	2100      	movs	r1, #0
    ae02:	f240 40c9 	movw	r0, #1225	; 0x4c9
    ae06:	f3af 8000 	nop.w
    ae0a:	e000      	b.n	ae0e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b6>
    ae0c:	b125      	cbz	r5, ae18 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1c0>
    ae0e:	2100      	movs	r1, #0
    ae10:	f640 30e3 	movw	r0, #3043	; 0xbe3
    ae14:	f3af 8000 	nop.w
    ae18:	481a      	ldr	r0, [pc, #104]	; (ae84 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x22c>)
    ae1a:	2800      	cmp	r0, #0
    ae1c:	bf18      	it	ne
    ae1e:	f3af 8000 	nopne.w
    ae22:	f3ef 8410 	mrs	r4, PRIMASK
    ae26:	b672      	cpsid	i
    ae28:	f896 0029 	ldrb.w	r0, [r6, #41]	; 0x29
    ae2c:	f88d 0000 	strb.w	r0, [sp]
    ae30:	f89d 0000 	ldrb.w	r0, [sp]
    ae34:	b138      	cbz	r0, ae46 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1ee>
    ae36:	2d00      	cmp	r5, #0
    ae38:	bf1c      	itt	ne
    ae3a:	2100      	movne	r1, #0
    ae3c:	f640 30e9 	movwne	r0, #3049	; 0xbe9
    ae40:	f43f af41 	beq.w	acc6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    ae44:	e784      	b.n	ad50 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xf8>
    ae46:	f886 9031 	strb.w	r9, [r6, #49]	; 0x31
    ae4a:	20ff      	movs	r0, #255	; 0xff
    ae4c:	f886 0029 	strb.w	r0, [r6, #41]	; 0x29
    ae50:	b154      	cbz	r4, ae68 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x210>
    ae52:	2d00      	cmp	r5, #0
    ae54:	bf08      	it	eq
    ae56:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ae5a:	2100      	movs	r1, #0
    ae5c:	f640 30f6 	movw	r0, #3062	; 0xbf6
    ae60:	f3af 8000 	nop.w
    ae64:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ae68:	4805      	ldr	r0, [pc, #20]	; (ae80 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x228>)
    ae6a:	2800      	cmp	r0, #0
    ae6c:	bf18      	it	ne
    ae6e:	f3af 8000 	nopne.w
    ae72:	b662      	cpsie	i
    ae74:	e7ed      	b.n	ae52 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1fa>
    ae76:	0000      	.short	0x0000
    ae78:	20001040 	.word	0x20001040
	...

0000ae88 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>:
    ae88:	b570      	push	{r4, r5, r6, lr}
    ae8a:	460d      	mov	r5, r1
    ae8c:	4606      	mov	r6, r0
    ae8e:	f001 fabb 	bl	c408 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    ae92:	480f      	ldr	r0, [pc, #60]	; (aed0 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x48>)
    ae94:	f890 2031 	ldrb.w	r2, [r0, #49]	; 0x31
    ae98:	2400      	movs	r4, #0
    ae9a:	3880      	subs	r0, #128	; 0x80
    ae9c:	eb00 1082 	add.w	r0, r0, r2, lsl #6
    aea0:	f810 1014 	ldrb.w	r1, [r0, r4, lsl #1]
    aea4:	b129      	cbz	r1, aeb2 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x2a>
    aea6:	1c61      	adds	r1, r4, #1
    aea8:	b2cc      	uxtb	r4, r1
    aeaa:	2c20      	cmp	r4, #32
    aeac:	d3f8      	bcc.n	aea0 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x18>
    aeae:	2020      	movs	r0, #32
    aeb0:	bd70      	pop	{r4, r5, r6, pc}
    aeb2:	4808      	ldr	r0, [pc, #32]	; (aed4 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x4c>)
    aeb4:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    aeb8:	f840 6021 	str.w	r6, [r0, r1, lsl #2]
    aebc:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    aec0:	4621      	mov	r1, r4
    aec2:	6045      	str	r5, [r0, #4]
    aec4:	2001      	movs	r0, #1
    aec6:	f7fe ff6d 	bl	9da4 <MPSL_IRQ_RADIO_Handler+0xecc>
    aeca:	4620      	mov	r0, r4
    aecc:	bd70      	pop	{r4, r5, r6, pc}
    aece:	0000      	.short	0x0000
    aed0:	20001040 	.word	0x20001040
    aed4:	20000c40 	.word	0x20000c40

0000aed8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>:
    aed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    aedc:	b083      	sub	sp, #12
    aede:	f000 fbcd 	bl	b67c <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    aee2:	4605      	mov	r5, r0
    aee4:	f000 feb0 	bl	bc48 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    aee8:	4c84      	ldr	r4, [pc, #528]	; (b0fc <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x224>)
    aeea:	6860      	ldr	r0, [r4, #4]
    aeec:	f1b0 3fff 	cmp.w	r0, #4294967295
    aef0:	bf1c      	itt	ne
    aef2:	f04f 30ff 	movne.w	r0, #4294967295
    aef6:	6060      	strne	r0, [r4, #4]
    aef8:	7fa0      	ldrb	r0, [r4, #30]
    aefa:	f8df 9204 	ldr.w	r9, [pc, #516]	; b100 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x228>
    aefe:	b990      	cbnz	r0, af26 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x4e>
    af00:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
    af04:	1a40      	subs	r0, r0, r1
    af06:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    af0a:	f44f 710c 	mov.w	r1, #560	; 0x230
    af0e:	f001 fa67 	bl	c3e0 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    af12:	68e1      	ldr	r1, [r4, #12]
    af14:	4408      	add	r0, r1
    af16:	1a28      	subs	r0, r5, r0
    af18:	0200      	lsls	r0, r0, #8
    af1a:	17c1      	asrs	r1, r0, #31
    af1c:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    af20:	1200      	asrs	r0, r0, #8
    af22:	0fc0      	lsrs	r0, r0, #31
    af24:	d012      	beq.n	af4c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x74>
    af26:	7e60      	ldrb	r0, [r4, #25]
    af28:	b320      	cbz	r0, af74 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x9c>
    af2a:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    af2e:	f88d 0000 	strb.w	r0, [sp]
    af32:	f89d 0000 	ldrb.w	r0, [sp]
    af36:	b1e8      	cbz	r0, af74 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x9c>
    af38:	f000 fce2 	bl	b900 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>
    af3c:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
    af40:	b1f0      	cbz	r0, af80 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xa8>
    af42:	f240 31f5 	movw	r1, #1013	; 0x3f5
    af46:	2070      	movs	r0, #112	; 0x70
    af48:	f001 fae8 	bl	c51c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    af4c:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    af50:	f894 1032 	ldrb.w	r1, [r4, #50]	; 0x32
    af54:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    af58:	eb09 0080 	add.w	r0, r9, r0, lsl #2
    af5c:	6840      	ldr	r0, [r0, #4]
    af5e:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    af62:	f859 2021 	ldr.w	r2, [r9, r1, lsl #2]
    af66:	2108      	movs	r1, #8
    af68:	4790      	blx	r2
    af6a:	f240 31dd 	movw	r1, #989	; 0x3dd
    af6e:	2070      	movs	r0, #112	; 0x70
    af70:	f001 fad4 	bl	c51c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    af74:	1ce8      	adds	r0, r5, #3
    af76:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    af7a:	f000 fba5 	bl	b6c8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    af7e:	e7dd      	b.n	af3c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x64>
    af80:	2001      	movs	r0, #1
    af82:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    af86:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    af8a:	2820      	cmp	r0, #32
    af8c:	d021      	beq.n	afd2 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xfa>
    af8e:	f894 8032 	ldrb.w	r8, [r4, #50]	; 0x32
    af92:	2020      	movs	r0, #32
    af94:	f884 0032 	strb.w	r0, [r4, #50]	; 0x32
    af98:	f884 0033 	strb.w	r0, [r4, #51]	; 0x33
    af9c:	2000      	movs	r0, #0
    af9e:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    afa2:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
    afa6:	6020      	str	r0, [r4, #0]
    afa8:	f000 ff28 	bl	bdfc <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI>
    afac:	7720      	strb	r0, [r4, #28]
    afae:	f894 6031 	ldrb.w	r6, [r4, #49]	; 0x31
    afb2:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    afb6:	1907      	adds	r7, r0, r4
    afb8:	f897 0020 	ldrb.w	r0, [r7, #32]
    afbc:	2820      	cmp	r0, #32
    afbe:	d058      	beq.n	b072 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x19a>
    afc0:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    afc4:	eb09 0980 	add.w	r9, r9, r0, lsl #2
    afc8:	f899 001a 	ldrb.w	r0, [r9, #26]
    afcc:	2801      	cmp	r0, #1
    afce:	d005      	beq.n	afdc <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x104>
    afd0:	e04f      	b.n	b072 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x19a>
    afd2:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
    afd6:	2070      	movs	r0, #112	; 0x70
    afd8:	f001 faa0 	bl	c51c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    afdc:	f8b9 b016 	ldrh.w	fp, [r9, #22]
    afe0:	aa01      	add	r2, sp, #4
    afe2:	4669      	mov	r1, sp
    afe4:	4658      	mov	r0, fp
    afe6:	f000 f9df 	bl	b3a8 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    afea:	f000 ff01 	bl	bdf0 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    afee:	f000 f9bf 	bl	b370 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    aff2:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    aff6:	2820      	cmp	r0, #32
    aff8:	d004      	beq.n	b004 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x12c>
    affa:	68e0      	ldr	r0, [r4, #12]
    affc:	1d40      	adds	r0, r0, #5
    affe:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    b002:	e01d      	b.n	b040 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x168>
    b004:	f105 0a09 	add.w	sl, r5, #9
    b008:	f1bb 0f00 	cmp.w	fp, #0
    b00c:	d016      	beq.n	b03c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x164>
    b00e:	f001 fa0d 	bl	c42c <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    b012:	b998      	cbnz	r0, b03c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x164>
    b014:	f001 f8c4 	bl	c1a0 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    b018:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    b01c:	bf08      	it	eq
    b01e:	200d      	moveq	r0, #13
    b020:	d00b      	beq.n	b03a <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x162>
    b022:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    b026:	3856      	subs	r0, #86	; 0x56
    b028:	bf08      	it	eq
    b02a:	201c      	moveq	r0, #28
    b02c:	d005      	beq.n	b03a <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x162>
    b02e:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    b032:	389f      	subs	r0, #159	; 0x9f
    b034:	bf14      	ite	ne
    b036:	2000      	movne	r0, #0
    b038:	2032      	moveq	r0, #50	; 0x32
    b03a:	4482      	add	sl, r0
    b03c:	f02a 407f 	bic.w	r0, sl, #4278190080	; 0xff000000
    b040:	f8d9 2008 	ldr.w	r2, [r9, #8]
    b044:	1a81      	subs	r1, r0, r2
    b046:	0209      	lsls	r1, r1, #8
    b048:	17cb      	asrs	r3, r1, #31
    b04a:	eb01 6113 	add.w	r1, r1, r3, lsr #24
    b04e:	1209      	asrs	r1, r1, #8
    b050:	2900      	cmp	r1, #0
    b052:	dc0e      	bgt.n	b072 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x19a>
    b054:	f109 0308 	add.w	r3, r9, #8
    b058:	4282      	cmp	r2, r0
    b05a:	d202      	bcs.n	b062 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x18a>
    b05c:	6899      	ldr	r1, [r3, #8]
    b05e:	1e49      	subs	r1, r1, #1
    b060:	6099      	str	r1, [r3, #8]
    b062:	e9d3 2100 	ldrd	r2, r1, [r3]
    b066:	1a89      	subs	r1, r1, r2
    b068:	6018      	str	r0, [r3, #0]
    b06a:	4408      	add	r0, r1
    b06c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    b070:	6058      	str	r0, [r3, #4]
    b072:	4631      	mov	r1, r6
    b074:	2001      	movs	r0, #1
    b076:	f7fe fec7 	bl	9e08 <MPSL_IRQ_RADIO_Handler+0xf30>
    b07a:	ea5f 0900 	movs.w	r9, r0
    b07e:	d0f8      	beq.n	b072 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x19a>
    b080:	4820      	ldr	r0, [pc, #128]	; (b104 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x22c>)
    b082:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    b086:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    b08a:	2802      	cmp	r0, #2
    b08c:	d104      	bne.n	b098 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1c0>
    b08e:	4632      	mov	r2, r6
    b090:	4641      	mov	r1, r8
    b092:	2006      	movs	r0, #6
    b094:	f7fe fe86 	bl	9da4 <MPSL_IRQ_RADIO_Handler+0xecc>
    b098:	20ff      	movs	r0, #255	; 0xff
    b09a:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    b09e:	f897 0021 	ldrb.w	r0, [r7, #33]	; 0x21
    b0a2:	4e19      	ldr	r6, [pc, #100]	; (b108 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x230>)
    b0a4:	2820      	cmp	r0, #32
    b0a6:	bf1c      	itt	ne
    b0a8:	7870      	ldrbne	r0, [r6, #1]
    b0aa:	f001 fb0b 	blne	c6c4 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    b0ae:	7f20      	ldrb	r0, [r4, #28]
    b0b0:	b120      	cbz	r0, b0bc <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1e4>
    b0b2:	f000 fe7f 	bl	bdb4 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>
    b0b6:	2000      	movs	r0, #0
    b0b8:	7720      	strb	r0, [r4, #28]
    b0ba:	7760      	strb	r0, [r4, #29]
    b0bc:	f1b9 0f02 	cmp.w	r9, #2
    b0c0:	d011      	beq.n	b0e6 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x20e>
    b0c2:	f1b9 0f01 	cmp.w	r9, #1
    b0c6:	bf1c      	itt	ne
    b0c8:	b003      	addne	sp, #12
    b0ca:	e8bd 8ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b0ce:	f04f 30ff 	mov.w	r0, #4294967295
    b0d2:	6871      	ldr	r1, [r6, #4]
    b0d4:	2900      	cmp	r1, #0
    b0d6:	bf04      	itt	eq
    b0d8:	b003      	addeq	sp, #12
    b0da:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b0de:	b003      	add	sp, #12
    b0e0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b0e4:	4708      	bx	r1
    b0e6:	68a0      	ldr	r0, [r4, #8]
    b0e8:	1b40      	subs	r0, r0, r5
    b0ea:	f005 fd2a 	bl	10b42 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    b0ee:	6871      	ldr	r1, [r6, #4]
    b0f0:	2900      	cmp	r1, #0
    b0f2:	d1f4      	bne.n	b0de <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x206>
    b0f4:	b003      	add	sp, #12
    b0f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b0fa:	0000      	.short	0x0000
    b0fc:	20001040 	.word	0x20001040
    b100:	20000c40 	.word	0x20000c40
    b104:	20000fc0 	.word	0x20000fc0
    b108:	200002ec 	.word	0x200002ec

0000b10c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>:
    b10c:	b570      	push	{r4, r5, r6, lr}
    b10e:	4c42      	ldr	r4, [pc, #264]	; (b218 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x10c>)
    b110:	4605      	mov	r5, r0
    b112:	b082      	sub	sp, #8
    b114:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    b118:	2820      	cmp	r0, #32
    b11a:	d008      	beq.n	b12e <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x22>
    b11c:	6860      	ldr	r0, [r4, #4]
    b11e:	f1b0 3fff 	cmp.w	r0, #4294967295
    b122:	d009      	beq.n	b138 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x2c>
    b124:	f640 21e4 	movw	r1, #2788	; 0xae4
    b128:	2070      	movs	r0, #112	; 0x70
    b12a:	f001 f9f7 	bl	c51c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b12e:	f640 21e3 	movw	r1, #2787	; 0xae3
    b132:	2070      	movs	r0, #112	; 0x70
    b134:	f001 f9f2 	bl	c51c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b138:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    b13c:	4937      	ldr	r1, [pc, #220]	; (b21c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x110>)
    b13e:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    b142:	eb01 0680 	add.w	r6, r1, r0, lsl #2
    b146:	68b0      	ldr	r0, [r6, #8]
    b148:	f005 fcfb 	bl	10b42 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    b14c:	4602      	mov	r2, r0
    b14e:	8af0      	ldrh	r0, [r6, #22]
    b150:	7d31      	ldrb	r1, [r6, #20]
    b152:	4b33      	ldr	r3, [pc, #204]	; (b220 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x114>)
    b154:	4408      	add	r0, r1
    b156:	1c40      	adds	r0, r0, #1
    b158:	1811      	adds	r1, r2, r0
    b15a:	429a      	cmp	r2, r3
    b15c:	d817      	bhi.n	b18e <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x82>
    b15e:	4a31      	ldr	r2, [pc, #196]	; (b224 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x118>)
    b160:	4290      	cmp	r0, r2
    b162:	dc1b      	bgt.n	b19c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x90>
    b164:	f1c2 0c00 	rsb	ip, r2, #0
    b168:	4560      	cmp	r0, ip
    b16a:	db1e      	blt.n	b1aa <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x9e>
    b16c:	0056      	lsls	r6, r2, #1
    b16e:	428e      	cmp	r6, r1
    b170:	bfdc      	itt	le
    b172:	f501 01f7 	addle.w	r1, r1, #8093696	; 0x7b8000
    b176:	f1a1 51f8 	suble.w	r1, r1, #520093696	; 0x1f000000
    b17a:	dd05      	ble.n	b188 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x7c>
    b17c:	2900      	cmp	r1, #0
    b17e:	bfbc      	itt	lt
    b180:	f5a1 01f7 	sublt.w	r1, r1, #8093696	; 0x7b8000
    b184:	f101 51f8 	addlt.w	r1, r1, #520093696	; 0x1f000000
    b188:	1948      	adds	r0, r1, r5
    b18a:	4299      	cmp	r1, r3
    b18c:	d904      	bls.n	b198 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x8c>
    b18e:	f240 519e 	movw	r1, #1438	; 0x59e
    b192:	2070      	movs	r0, #112	; 0x70
    b194:	f001 f9c2 	bl	c51c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b198:	4295      	cmp	r5, r2
    b19a:	dd04      	ble.n	b1a6 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x9a>
    b19c:	f240 519f 	movw	r1, #1439	; 0x59f
    b1a0:	2070      	movs	r0, #112	; 0x70
    b1a2:	f001 f9bb 	bl	c51c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b1a6:	4565      	cmp	r5, ip
    b1a8:	da04      	bge.n	b1b4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xa8>
    b1aa:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
    b1ae:	2070      	movs	r0, #112	; 0x70
    b1b0:	f001 f9b4 	bl	c51c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b1b4:	4286      	cmp	r6, r0
    b1b6:	bfdc      	itt	le
    b1b8:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    b1bc:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    b1c0:	dd05      	ble.n	b1ce <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xc2>
    b1c2:	2800      	cmp	r0, #0
    b1c4:	bfbc      	itt	lt
    b1c6:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    b1ca:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    b1ce:	aa01      	add	r2, sp, #4
    b1d0:	4669      	mov	r1, sp
    b1d2:	f000 f8e9 	bl	b3a8 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    b1d6:	f89d 0004 	ldrb.w	r0, [sp, #4]
    b1da:	280f      	cmp	r0, #15
    b1dc:	bf8c      	ite	hi
    b1de:	2001      	movhi	r0, #1
    b1e0:	2000      	movls	r0, #0
    b1e2:	9900      	ldr	r1, [sp, #0]
    b1e4:	4408      	add	r0, r1
    b1e6:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    b1ea:	6061      	str	r1, [r4, #4]
    b1ec:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    b1f0:	f88d 0000 	strb.w	r0, [sp]
    b1f4:	f89d 0000 	ldrb.w	r0, [sp]
    b1f8:	2800      	cmp	r0, #0
    b1fa:	bf04      	itt	eq
    b1fc:	b002      	addeq	sp, #8
    b1fe:	bd70      	popeq	{r4, r5, r6, pc}
    b200:	2005      	movs	r0, #5
    b202:	f000 fbfb 	bl	b9fc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    b206:	2800      	cmp	r0, #0
    b208:	bf1c      	itt	ne
    b20a:	b002      	addne	sp, #8
    b20c:	bd70      	popne	{r4, r5, r6, pc}
    b20e:	f640 21eb 	movw	r1, #2795	; 0xaeb
    b212:	2070      	movs	r0, #112	; 0x70
    b214:	f001 f982 	bl	c51c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b218:	20001040 	.word	0x20001040
    b21c:	20000c40 	.word	0x20000c40
    b220:	1e847fff 	.word	0x1e847fff
    b224:	0f424000 	.word	0x0f424000

0000b228 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>:
    b228:	b570      	push	{r4, r5, r6, lr}
    b22a:	4c1c      	ldr	r4, [pc, #112]	; (b29c <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x74>)
    b22c:	2120      	movs	r1, #32
    b22e:	f884 1020 	strb.w	r1, [r4, #32]
    b232:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    b236:	f884 1022 	strb.w	r1, [r4, #34]	; 0x22
    b23a:	2000      	movs	r0, #0
    b23c:	f884 0031 	strb.w	r0, [r4, #49]	; 0x31
    b240:	f884 1032 	strb.w	r1, [r4, #50]	; 0x32
    b244:	1e42      	subs	r2, r0, #1
    b246:	e9c4 0200 	strd	r0, r2, [r4]
    b24a:	77a0      	strb	r0, [r4, #30]
    b24c:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    b250:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
    b254:	7720      	strb	r0, [r4, #28]
    b256:	7760      	strb	r0, [r4, #29]
    b258:	f884 1033 	strb.w	r1, [r4, #51]	; 0x33
    b25c:	62e2      	str	r2, [r4, #44]	; 0x2c
    b25e:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    b262:	f1a4 0182 	sub.w	r1, r4, #130	; 0x82
    b266:	2210      	movs	r2, #16
    b268:	7088      	strb	r0, [r1, #2]
    b26a:	f801 0f04 	strb.w	r0, [r1, #4]!
    b26e:	1e52      	subs	r2, r2, #1
    b270:	d1fa      	bne.n	b268 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x40>
    b272:	f000 fdcd 	bl	be10 <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY>
    b276:	4d0a      	ldr	r5, [pc, #40]	; (b2a0 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x78>)
    b278:	2601      	movs	r6, #1
    b27a:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
    b27e:	20ff      	movs	r0, #255	; 0xff
    b280:	7028      	strb	r0, [r5, #0]
    b282:	4808      	ldr	r0, [pc, #32]	; (b2a4 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x7c>)
    b284:	f001 fa00 	bl	c688 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    b288:	7068      	strb	r0, [r5, #1]
    b28a:	f001 fa6b 	bl	c764 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>
    b28e:	60a8      	str	r0, [r5, #8]
    b290:	f000 fd48 	bl	bd24 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>
    b294:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
    b298:	bd70      	pop	{r4, r5, r6, pc}
    b29a:	0000      	.short	0x0000
    b29c:	20001040 	.word	0x20001040
    b2a0:	200002ec 	.word	0x200002ec
    b2a4:	00009ccd 	.word	0x00009ccd

0000b2a8 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>:
    b2a8:	b500      	push	{lr}
    b2aa:	b083      	sub	sp, #12
    b2ac:	4668      	mov	r0, sp
    b2ae:	f000 f9eb 	bl	b688 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>
    b2b2:	9800      	ldr	r0, [sp, #0]
    b2b4:	f005 fc45 	bl	10b42 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    b2b8:	9a01      	ldr	r2, [sp, #4]
    b2ba:	4b03      	ldr	r3, [pc, #12]	; (b2c8 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q+0x20>)
    b2bc:	2100      	movs	r1, #0
    b2be:	fbe2 0103 	umlal	r0, r1, r2, r3
    b2c2:	b003      	add	sp, #12
    b2c4:	bd00      	pop	{pc}
    b2c6:	0000      	.short	0x0000
    b2c8:	1e848000 	.word	0x1e848000

0000b2cc <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ>:
    b2cc:	b570      	push	{r4, r5, r6, lr}
    b2ce:	4606      	mov	r6, r0
    b2d0:	b082      	sub	sp, #8
    b2d2:	461d      	mov	r5, r3
    b2d4:	4610      	mov	r0, r2
    b2d6:	f005 fc34 	bl	10b42 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    b2da:	4604      	mov	r4, r0
    b2dc:	4668      	mov	r0, sp
    b2de:	f000 f9d3 	bl	b688 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>
    b2e2:	4920      	ldr	r1, [pc, #128]	; (b364 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x98>)
    b2e4:	9801      	ldr	r0, [sp, #4]
    b2e6:	fba0 0201 	umull	r0, r2, r0, r1
    b2ea:	1a30      	subs	r0, r6, r0
    b2ec:	bf44      	itt	mi
    b2ee:	f5a0 00f7 	submi.w	r0, r0, #8093696	; 0x7b8000
    b2f2:	f110 50f8 	addsmi.w	r0, r0, #520093696	; 0x1f000000
    b2f6:	d504      	bpl.n	b302 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x36>
    b2f8:	f640 410b 	movw	r1, #3083	; 0xc0b
    b2fc:	2070      	movs	r0, #112	; 0x70
    b2fe:	f001 f90d 	bl	c51c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b302:	4288      	cmp	r0, r1
    b304:	db04      	blt.n	b310 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x44>
    b306:	f640 410c 	movw	r1, #3084	; 0xc0c
    b30a:	2070      	movs	r0, #112	; 0x70
    b30c:	f001 f906 	bl	c51c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b310:	4a15      	ldr	r2, [pc, #84]	; (b368 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x9c>)
    b312:	1a21      	subs	r1, r4, r0
    b314:	2300      	movs	r3, #0
    b316:	1a8a      	subs	r2, r1, r2
    b318:	f173 0200 	sbcs.w	r2, r3, #0
    b31c:	d318      	bcc.n	b350 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x84>
    b31e:	f8df c048 	ldr.w	ip, [pc, #72]	; b368 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x9c>
    b322:	1b02      	subs	r2, r0, r4
    b324:	ebb2 0c0c 	subs.w	ip, r2, ip
    b328:	f173 0300 	sbcs.w	r3, r3, #0
    b32c:	d310      	bcc.n	b350 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x84>
    b32e:	4b0f      	ldr	r3, [pc, #60]	; (b36c <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0xa0>)
    b330:	428b      	cmp	r3, r1
    b332:	bf3e      	ittt	cc
    b334:	f5c0 2090 	rsbcc	r0, r0, #294912	; 0x48000
    b338:	f100 50f4 	addcc.w	r0, r0, #511705088	; 0x1e800000
    b33c:	1901      	addcc	r1, r0, r4
    b33e:	d307      	bcc.n	b350 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x84>
    b340:	4293      	cmp	r3, r2
    b342:	d20a      	bcs.n	b35a <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x8e>
    b344:	f5c4 2190 	rsb	r1, r4, #294912	; 0x48000
    b348:	f101 51f4 	add.w	r1, r1, #511705088	; 0x1e800000
    b34c:	4408      	add	r0, r1
    b34e:	4241      	negs	r1, r0
    b350:	f101 000f 	add.w	r0, r1, #15
    b354:	b002      	add	sp, #8
    b356:	1a28      	subs	r0, r5, r0
    b358:	bd70      	pop	{r4, r5, r6, pc}
    b35a:	f640 3105 	movw	r1, #2821	; 0xb05
    b35e:	2070      	movs	r0, #112	; 0x70
    b360:	f001 f8dc 	bl	c51c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b364:	1e848000 	.word	0x1e848000
    b368:	0f424000 	.word	0x0f424000
    b36c:	1e847fff 	.word	0x1e847fff

0000b370 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>:
    b370:	0b41      	lsrs	r1, r0, #13
    b372:	f248 6237 	movw	r2, #34359	; 0x8637
    b376:	4351      	muls	r1, r2
    b378:	0c0a      	lsrs	r2, r1, #16
    b37a:	4b09      	ldr	r3, [pc, #36]	; (b3a0 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x30>)
    b37c:	0251      	lsls	r1, r2, #9
    b37e:	fb02 0203 	mla	r2, r2, r3, r0
    b382:	4808      	ldr	r0, [pc, #32]	; (b3a4 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x34>)
    b384:	4350      	muls	r0, r2
    b386:	f500 3086 	add.w	r0, r0, #68608	; 0x10c00
    b38a:	306e      	adds	r0, #110	; 0x6e
    b38c:	0d40      	lsrs	r0, r0, #21
    b38e:	425b      	negs	r3, r3
    b390:	fb10 f303 	smulbb	r3, r0, r3
    b394:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
    b398:	bf88      	it	hi
    b39a:	1c49      	addhi	r1, r1, #1
    b39c:	4408      	add	r0, r1
    b39e:	4770      	bx	lr
    b3a0:	ffffc2f7 	.word	0xffffc2f7
    b3a4:	00010c6f 	.word	0x00010c6f

0000b3a8 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>:
    b3a8:	0b43      	lsrs	r3, r0, #13
    b3aa:	f248 6c37 	movw	ip, #34359	; 0x8637
    b3ae:	fb03 f30c 	mul.w	r3, r3, ip
    b3b2:	b430      	push	{r4, r5}
    b3b4:	0c1b      	lsrs	r3, r3, #16
    b3b6:	f8df c044 	ldr.w	ip, [pc, #68]	; b3fc <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x54>
    b3ba:	025c      	lsls	r4, r3, #9
    b3bc:	fb03 030c 	mla	r3, r3, ip, r0
    b3c0:	480f      	ldr	r0, [pc, #60]	; (b400 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x58>)
    b3c2:	4358      	muls	r0, r3
    b3c4:	ea4f 5c50 	mov.w	ip, r0, lsr #21
    b3c8:	eb04 000c 	add.w	r0, r4, ip
    b3cc:	f643 5409 	movw	r4, #15625	; 0x3d09
    b3d0:	fb1c f404 	smulbb	r4, ip, r4
    b3d4:	f504 7c80 	add.w	ip, r4, #256	; 0x100
    b3d8:	f643 5508 	movw	r5, #15624	; 0x3d08
    b3dc:	eba3 2c5c 	sub.w	ip, r3, ip, lsr #9
    b3e0:	442c      	add	r4, r5
    b3e2:	f00c 0cff 	and.w	ip, ip, #255	; 0xff
    b3e6:	ebb3 2f54 	cmp.w	r3, r4, lsr #9
    b3ea:	bf84      	itt	hi
    b3ec:	f04f 0c00 	movhi.w	ip, #0
    b3f0:	1c40      	addhi	r0, r0, #1
    b3f2:	6008      	str	r0, [r1, #0]
    b3f4:	f882 c000 	strb.w	ip, [r2]
    b3f8:	bc30      	pop	{r4, r5}
    b3fa:	4770      	bx	lr
    b3fc:	ffffc2f7 	.word	0xffffc2f7
    b400:	00010c6f 	.word	0x00010c6f

0000b404 <MPSL_IRQ_RTC0_Handler>:
    b404:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b408:	4d3b      	ldr	r5, [pc, #236]	; (b4f8 <MPSL_IRQ_RTC0_Handler+0xf4>)
    b40a:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    b40e:	f8df 80ec 	ldr.w	r8, [pc, #236]	; b4fc <MPSL_IRQ_RTC0_Handler+0xf8>
    b412:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    b416:	f44f 6600 	mov.w	r6, #2048	; 0x800
    b41a:	f04f 27e0 	mov.w	r7, #3758153728	; 0xe000e000
    b41e:	f04f 0400 	mov.w	r4, #0
    b422:	d019      	beq.n	b458 <MPSL_IRQ_RTC0_Handler+0x54>
    b424:	4836      	ldr	r0, [pc, #216]	; (b500 <MPSL_IRQ_RTC0_Handler+0xfc>)
    b426:	6800      	ldr	r0, [r0, #0]
    b428:	b1b0      	cbz	r0, b458 <MPSL_IRQ_RTC0_Handler+0x54>
    b42a:	f8c5 4140 	str.w	r4, [r5, #320]	; 0x140
    b42e:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    b432:	f8d5 0540 	ldr.w	r0, [r5, #1344]	; 0x540
    b436:	f8d8 1000 	ldr.w	r1, [r8]
    b43a:	1a40      	subs	r0, r0, r1
    b43c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    b440:	2802      	cmp	r0, #2
    b442:	d302      	bcc.n	b44a <MPSL_IRQ_RTC0_Handler+0x46>
    b444:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    b448:	d906      	bls.n	b458 <MPSL_IRQ_RTC0_Handler+0x54>
    b44a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    b44e:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    b452:	2004      	movs	r0, #4
    b454:	f7fe fe98 	bl	a188 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    b458:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    b45c:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    b460:	d01a      	beq.n	b498 <MPSL_IRQ_RTC0_Handler+0x94>
    b462:	4828      	ldr	r0, [pc, #160]	; (b504 <MPSL_IRQ_RTC0_Handler+0x100>)
    b464:	6800      	ldr	r0, [r0, #0]
    b466:	b1b8      	cbz	r0, b498 <MPSL_IRQ_RTC0_Handler+0x94>
    b468:	f8c5 4144 	str.w	r4, [r5, #324]	; 0x144
    b46c:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    b470:	4825      	ldr	r0, [pc, #148]	; (b508 <MPSL_IRQ_RTC0_Handler+0x104>)
    b472:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    b476:	f8d8 1000 	ldr.w	r1, [r8]
    b47a:	1a40      	subs	r0, r0, r1
    b47c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    b480:	2802      	cmp	r0, #2
    b482:	d302      	bcc.n	b48a <MPSL_IRQ_RTC0_Handler+0x86>
    b484:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    b488:	d906      	bls.n	b498 <MPSL_IRQ_RTC0_Handler+0x94>
    b48a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    b48e:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    b492:	2005      	movs	r0, #5
    b494:	f7fe fe78 	bl	a188 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    b498:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    b49c:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    b4a0:	d01a      	beq.n	b4d8 <MPSL_IRQ_RTC0_Handler+0xd4>
    b4a2:	481a      	ldr	r0, [pc, #104]	; (b50c <MPSL_IRQ_RTC0_Handler+0x108>)
    b4a4:	6800      	ldr	r0, [r0, #0]
    b4a6:	b1b8      	cbz	r0, b4d8 <MPSL_IRQ_RTC0_Handler+0xd4>
    b4a8:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
    b4ac:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    b4b0:	4817      	ldr	r0, [pc, #92]	; (b510 <MPSL_IRQ_RTC0_Handler+0x10c>)
    b4b2:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    b4b6:	f8d8 1000 	ldr.w	r1, [r8]
    b4ba:	1a40      	subs	r0, r0, r1
    b4bc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    b4c0:	2802      	cmp	r0, #2
    b4c2:	d302      	bcc.n	b4ca <MPSL_IRQ_RTC0_Handler+0xc6>
    b4c4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    b4c8:	d906      	bls.n	b4d8 <MPSL_IRQ_RTC0_Handler+0xd4>
    b4ca:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    b4ce:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    b4d2:	2006      	movs	r0, #6
    b4d4:	f7fe fe58 	bl	a188 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    b4d8:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
    b4dc:	2800      	cmp	r0, #0
    b4de:	bf08      	it	eq
    b4e0:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    b4e4:	f8c5 4104 	str.w	r4, [r5, #260]	; 0x104
    b4e8:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    b4ec:	4809      	ldr	r0, [pc, #36]	; (b514 <MPSL_IRQ_RTC0_Handler+0x110>)
    b4ee:	68c1      	ldr	r1, [r0, #12]
    b4f0:	1c49      	adds	r1, r1, #1
    b4f2:	60c1      	str	r1, [r0, #12]
    b4f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b4f8:	4000b000 	.word	0x4000b000
    b4fc:	4000b504 	.word	0x4000b504
    b500:	4000b140 	.word	0x4000b140
    b504:	4000b144 	.word	0x4000b144
    b508:	4000b004 	.word	0x4000b004
    b50c:	4000b148 	.word	0x4000b148
    b510:	4000b008 	.word	0x4000b008
    b514:	200002f8 	.word	0x200002f8

0000b518 <MPSL_IRQ_TIMER0_Handler>:
    b518:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b51c:	4d38      	ldr	r5, [pc, #224]	; (b600 <MPSL_IRQ_TIMER0_Handler+0xe8>)
    b51e:	7828      	ldrb	r0, [r5, #0]
    b520:	2804      	cmp	r0, #4
    b522:	d068      	beq.n	b5f6 <MPSL_IRQ_TIMER0_Handler+0xde>
    b524:	1ca8      	adds	r0, r5, #2
    b526:	2201      	movs	r2, #1
    b528:	7801      	ldrb	r1, [r0, #0]
    b52a:	b159      	cbz	r1, b544 <MPSL_IRQ_TIMER0_Handler+0x2c>
    b52c:	2901      	cmp	r1, #1
    b52e:	bf08      	it	eq
    b530:	706a      	strbeq	r2, [r5, #1]
    b532:	d002      	beq.n	b53a <MPSL_IRQ_TIMER0_Handler+0x22>
    b534:	7869      	ldrb	r1, [r5, #1]
    b536:	2900      	cmp	r1, #0
    b538:	d058      	beq.n	b5ec <MPSL_IRQ_TIMER0_Handler+0xd4>
    b53a:	2102      	movs	r1, #2
    b53c:	7001      	strb	r1, [r0, #0]
    b53e:	7840      	ldrb	r0, [r0, #1]
    b540:	f000 fb12 	bl	bb68 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    b544:	4c2f      	ldr	r4, [pc, #188]	; (b604 <MPSL_IRQ_TIMER0_Handler+0xec>)
    b546:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    b54a:	f04f 0800 	mov.w	r8, #0
    b54e:	f410 2f00 	tst.w	r0, #524288	; 0x80000
    b552:	f44f 7780 	mov.w	r7, #256	; 0x100
    b556:	f04f 26e0 	mov.w	r6, #3758153728	; 0xe000e000
    b55a:	d00a      	beq.n	b572 <MPSL_IRQ_TIMER0_Handler+0x5a>
    b55c:	482a      	ldr	r0, [pc, #168]	; (b608 <MPSL_IRQ_TIMER0_Handler+0xf0>)
    b55e:	6800      	ldr	r0, [r0, #0]
    b560:	b138      	cbz	r0, b572 <MPSL_IRQ_TIMER0_Handler+0x5a>
    b562:	2003      	movs	r0, #3
    b564:	f000 fb00 	bl	bb68 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    b568:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    b56c:	2003      	movs	r0, #3
    b56e:	f7fe fe0b 	bl	a188 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    b572:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    b576:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    b57a:	d00a      	beq.n	b592 <MPSL_IRQ_TIMER0_Handler+0x7a>
    b57c:	4823      	ldr	r0, [pc, #140]	; (b60c <MPSL_IRQ_TIMER0_Handler+0xf4>)
    b57e:	6800      	ldr	r0, [r0, #0]
    b580:	b138      	cbz	r0, b592 <MPSL_IRQ_TIMER0_Handler+0x7a>
    b582:	2002      	movs	r0, #2
    b584:	f000 faf0 	bl	bb68 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    b588:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    b58c:	2002      	movs	r0, #2
    b58e:	f7fe fdfb 	bl	a188 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    b592:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    b596:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    b59a:	d00a      	beq.n	b5b2 <MPSL_IRQ_TIMER0_Handler+0x9a>
    b59c:	481c      	ldr	r0, [pc, #112]	; (b610 <MPSL_IRQ_TIMER0_Handler+0xf8>)
    b59e:	6800      	ldr	r0, [r0, #0]
    b5a0:	b138      	cbz	r0, b5b2 <MPSL_IRQ_TIMER0_Handler+0x9a>
    b5a2:	2001      	movs	r0, #1
    b5a4:	f000 fae0 	bl	bb68 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    b5a8:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    b5ac:	2001      	movs	r0, #1
    b5ae:	f7fe fdeb 	bl	a188 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    b5b2:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    b5b6:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    b5ba:	bf08      	it	eq
    b5bc:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    b5c0:	4814      	ldr	r0, [pc, #80]	; (b614 <MPSL_IRQ_TIMER0_Handler+0xfc>)
    b5c2:	6800      	ldr	r0, [r0, #0]
    b5c4:	2800      	cmp	r0, #0
    b5c6:	bf08      	it	eq
    b5c8:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    b5cc:	2000      	movs	r0, #0
    b5ce:	f000 facb 	bl	bb68 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    b5d2:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    b5d6:	2004      	movs	r0, #4
    b5d8:	7028      	strb	r0, [r5, #0]
    b5da:	f8c5 8004 	str.w	r8, [r5, #4]
    b5de:	f8c4 8200 	str.w	r8, [r4, #512]	; 0x200
    b5e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    b5e6:	2000      	movs	r0, #0
    b5e8:	f7fe bdce 	b.w	a188 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    b5ec:	f44f 6195 	mov.w	r1, #1192	; 0x4a8
    b5f0:	206c      	movs	r0, #108	; 0x6c
    b5f2:	f000 ff93 	bl	c51c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b5f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    b5fa:	2007      	movs	r0, #7
    b5fc:	f7fe bdc4 	b.w	a188 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    b600:	200002f8 	.word	0x200002f8
    b604:	40008000 	.word	0x40008000
    b608:	4000814c 	.word	0x4000814c
    b60c:	40008148 	.word	0x40008148
    b610:	40008144 	.word	0x40008144
    b614:	40008140 	.word	0x40008140
    b618:	2201      	movs	r2, #1
    b61a:	0211      	lsls	r1, r2, #8
    b61c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    b620:	2000      	movs	r0, #0
    b622:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    b626:	f503 73c0 	add.w	r3, r3, #384	; 0x180
    b62a:	f3bf 8f4f 	dsb	sy
    b62e:	f3bf 8f6f 	isb	sy
    b632:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    b636:	490e      	ldr	r1, [pc, #56]	; (b670 <MPSL_IRQ_TIMER0_Handler+0x158>)
    b638:	f841 2f04 	str.w	r2, [r1, #4]!
    b63c:	1e43      	subs	r3, r0, #1
    b63e:	f8c1 3304 	str.w	r3, [r1, #772]	; 0x304
    b642:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    b646:	f8c1 013c 	str.w	r0, [r1, #316]	; 0x13c
    b64a:	4b0a      	ldr	r3, [pc, #40]	; (b674 <MPSL_IRQ_TIMER0_Handler+0x15c>)
    b64c:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    b650:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    b654:	1d1b      	adds	r3, r3, #4
    b656:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    b65a:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    b65e:	1d1b      	adds	r3, r3, #4
    b660:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    b664:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    b668:	60ca      	str	r2, [r1, #12]
    b66a:	4903      	ldr	r1, [pc, #12]	; (b678 <MPSL_IRQ_TIMER0_Handler+0x160>)
    b66c:	7048      	strb	r0, [r1, #1]
    b66e:	4770      	bx	lr
    b670:	40008000 	.word	0x40008000
    b674:	40008004 	.word	0x40008004
    b678:	200002f8 	.word	0x200002f8

0000b67c <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>:
    b67c:	4801      	ldr	r0, [pc, #4]	; (b684 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY+0x8>)
    b67e:	6800      	ldr	r0, [r0, #0]
    b680:	4770      	bx	lr
    b682:	0000      	.short	0x0000
    b684:	4000b504 	.word	0x4000b504

0000b688 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>:
    b688:	b430      	push	{r4, r5}
    b68a:	f3ef 8c10 	mrs	ip, PRIMASK
    b68e:	b672      	cpsid	i
    b690:	2500      	movs	r5, #0
    b692:	4b0b      	ldr	r3, [pc, #44]	; (b6c0 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x38>)
    b694:	4a0b      	ldr	r2, [pc, #44]	; (b6c4 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x3c>)
    b696:	bf00      	nop
    b698:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
    b69c:	f8d3 4104 	ldr.w	r4, [r3, #260]	; 0x104
    b6a0:	b12c      	cbz	r4, b6ae <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x26>
    b6a2:	68d1      	ldr	r1, [r2, #12]
    b6a4:	1c49      	adds	r1, r1, #1
    b6a6:	60d1      	str	r1, [r2, #12]
    b6a8:	f8c3 5104 	str.w	r5, [r3, #260]	; 0x104
    b6ac:	e7f4      	b.n	b698 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x10>
    b6ae:	68d2      	ldr	r2, [r2, #12]
    b6b0:	f1bc 0f00 	cmp.w	ip, #0
    b6b4:	d100      	bne.n	b6b8 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x30>
    b6b6:	b662      	cpsie	i
    b6b8:	e9c0 1200 	strd	r1, r2, [r0]
    b6bc:	bc30      	pop	{r4, r5}
    b6be:	4770      	bx	lr
    b6c0:	4000b000 	.word	0x4000b000
    b6c4:	200002f8 	.word	0x200002f8

0000b6c8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>:
    b6c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b6cc:	f8df 8134 	ldr.w	r8, [pc, #308]	; b804 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x13c>
    b6d0:	4605      	mov	r5, r0
    b6d2:	f1a8 0602 	sub.w	r6, r8, #2
    b6d6:	f898 3000 	ldrb.w	r3, [r8]
    b6da:	68b0      	ldr	r0, [r6, #8]
    b6dc:	2b01      	cmp	r3, #1
    b6de:	bf04      	itt	eq
    b6e0:	42a8      	cmpeq	r0, r5
    b6e2:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b6e6:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
    b6ea:	4a47      	ldr	r2, [pc, #284]	; (b808 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x140>)
    b6ec:	6011      	str	r1, [r2, #0]
    b6ee:	4948      	ldr	r1, [pc, #288]	; (b810 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x148>)
    b6f0:	4a46      	ldr	r2, [pc, #280]	; (b80c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x144>)
    b6f2:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    b6f6:	f101 0c04 	add.w	ip, r1, #4
    b6fa:	f04f 0400 	mov.w	r4, #0
    b6fe:	2b00      	cmp	r3, #0
    b700:	d055      	beq.n	b7ae <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xe6>
    b702:	4a44      	ldr	r2, [pc, #272]	; (b814 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x14c>)
    b704:	f8c1 2348 	str.w	r2, [r1, #840]	; 0x348
    b708:	f8cc 4540 	str.w	r4, [ip, #1344]	; 0x540
    b70c:	f8c1 4144 	str.w	r4, [r1, #324]	; 0x144
    b710:	f8d1 2148 	ldr.w	r2, [r1, #328]	; 0x148
    b714:	2701      	movs	r7, #1
    b716:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    b71a:	2a00      	cmp	r2, #0
    b71c:	bf01      	itttt	eq
    b71e:	f8d1 2104 	ldreq.w	r2, [r1, #260]	; 0x104
    b722:	2a00      	cmpeq	r2, #0
    b724:	f44f 6200 	moveq.w	r2, #2048	; 0x800
    b728:	f8c9 2280 	streq.w	r2, [r9, #640]	; 0x280
    b72c:	f04f 0a10 	mov.w	sl, #16
    b730:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    b734:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    b738:	f8c1 2348 	str.w	r2, [r1, #840]	; 0x348
    b73c:	f8c1 4140 	str.w	r4, [r1, #320]	; 0x140
    b740:	4a35      	ldr	r2, [pc, #212]	; (b818 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x150>)
    b742:	f8d2 c000 	ldr.w	ip, [r2]
    b746:	eba5 0c0c 	sub.w	ip, r5, ip
    b74a:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
    b74e:	f1bc 0f02 	cmp.w	ip, #2
    b752:	d337      	bcc.n	b7c4 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xfc>
    b754:	f5bc 0f00 	cmp.w	ip, #8388608	; 0x800000
    b758:	d834      	bhi.n	b7c4 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xfc>
    b75a:	f8c1 5540 	str.w	r5, [r1, #1344]	; 0x540
    b75e:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
    b762:	f8c1 c344 	str.w	ip, [r1, #836]	; 0x344
    b766:	b12b      	cbz	r3, b774 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xac>
    b768:	6811      	ldr	r1, [r2, #0]
    b76a:	1a41      	subs	r1, r0, r1
    b76c:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    b770:	2902      	cmp	r1, #2
    b772:	d3f9      	bcc.n	b768 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xa0>
    b774:	6077      	str	r7, [r6, #4]
    b776:	7034      	strb	r4, [r6, #0]
    b778:	f7ff ff4e 	bl	b618 <MPSL_IRQ_TIMER0_Handler+0x100>
    b77c:	4827      	ldr	r0, [pc, #156]	; (b81c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x154>)
    b77e:	f8d0 1504 	ldr.w	r1, [r0, #1284]	; 0x504
    b782:	f364 0101 	bfi	r1, r4, #0, #2
    b786:	f8c0 1504 	str.w	r1, [r0, #1284]	; 0x504
    b78a:	f8d0 2508 	ldr.w	r2, [r0, #1288]	; 0x508
    b78e:	2102      	movs	r1, #2
    b790:	f361 0201 	bfi	r2, r1, #0, #2
    b794:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
    b798:	fa9a f1aa 	rbit	r1, sl
    b79c:	fab1 f181 	clz	r1, r1
    b7a0:	2909      	cmp	r1, #9
    b7a2:	d917      	bls.n	b7d4 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x10c>
    b7a4:	f240 3155 	movw	r1, #853	; 0x355
    b7a8:	a01d      	add	r0, pc, #116	; (adr r0, b820 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x158>)
    b7aa:	f000 fe8b 	bl	c4c4 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
    b7ae:	f8c1 2348 	str.w	r2, [r1, #840]	; 0x348
    b7b2:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    b7b6:	f8c1 4140 	str.w	r4, [r1, #320]	; 0x140
    b7ba:	f8cc 4540 	str.w	r4, [ip, #1344]	; 0x540
    b7be:	f8c1 4144 	str.w	r4, [r1, #324]	; 0x144
    b7c2:	e7a5      	b.n	b710 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x48>
    b7c4:	2000      	movs	r0, #0
    b7c6:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    b7ca:	f44f 7127 	mov.w	r1, #668	; 0x29c
    b7ce:	206c      	movs	r0, #108	; 0x6c
    b7d0:	f000 fea4 	bl	c51c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b7d4:	f8c0 1510 	str.w	r1, [r0, #1296]	; 0x510
    b7d8:	60c7      	str	r7, [r0, #12]
    b7da:	6871      	ldr	r1, [r6, #4]
    b7dc:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    b7e0:	f44f 7080 	mov.w	r0, #256	; 0x100
    b7e4:	f8c9 0280 	str.w	r0, [r9, #640]	; 0x280
    b7e8:	f8c9 0100 	str.w	r0, [r9, #256]	; 0x100
    b7ec:	490f      	ldr	r1, [pc, #60]	; (b82c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x164>)
    b7ee:	05c0      	lsls	r0, r0, #23
    b7f0:	6008      	str	r0, [r1, #0]
    b7f2:	2004      	movs	r0, #4
    b7f4:	60b5      	str	r5, [r6, #8]
    b7f6:	f888 0001 	strb.w	r0, [r8, #1]
    b7fa:	f888 7000 	strb.w	r7, [r8]
    b7fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b802:	0000      	.short	0x0000
    b804:	200002fa 	.word	0x200002fa
    b808:	4001f508 	.word	0x4001f508
    b80c:	fffbfffd 	.word	0xfffbfffd
    b810:	4000b000 	.word	0x4000b000
    b814:	fffafffd 	.word	0xfffafffd
    b818:	4000b504 	.word	0x4000b504
    b81c:	40008000 	.word	0x40008000
    b820:	5f66726e 	.word	0x5f66726e
    b824:	656d6974 	.word	0x656d6974
    b828:	00682e72 	.word	0x00682e72
    b82c:	4001f504 	.word	0x4001f504

0000b830 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>:
    b830:	b570      	push	{r4, r5, r6, lr}
    b832:	4c2a      	ldr	r4, [pc, #168]	; (b8dc <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xac>)
    b834:	68a1      	ldr	r1, [r4, #8]
    b836:	4281      	cmp	r1, r0
    b838:	bf14      	ite	ne
    b83a:	2201      	movne	r2, #1
    b83c:	2200      	moveq	r2, #0
    b83e:	f8df c0a0 	ldr.w	ip, [pc, #160]	; b8e0 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb0>
    b842:	f89c 5000 	ldrb.w	r5, [ip]
    b846:	2d02      	cmp	r5, #2
    b848:	d002      	beq.n	b850 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x20>
    b84a:	2a00      	cmp	r2, #0
    b84c:	d034      	beq.n	b8b8 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x88>
    b84e:	e002      	b.n	b856 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x26>
    b850:	2a00      	cmp	r2, #0
    b852:	bf08      	it	eq
    b854:	bd70      	popeq	{r4, r5, r6, pc}
    b856:	7862      	ldrb	r2, [r4, #1]
    b858:	b39a      	cbz	r2, b8c2 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x92>
    b85a:	4b22      	ldr	r3, [pc, #136]	; (b8e4 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb4>)
    b85c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    b860:	601a      	str	r2, [r3, #0]
    b862:	4b21      	ldr	r3, [pc, #132]	; (b8e8 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb8>)
    b864:	1392      	asrs	r2, r2, #14
    b866:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    b86a:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
    b86e:	2200      	movs	r2, #0
    b870:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    b874:	4a1d      	ldr	r2, [pc, #116]	; (b8ec <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xbc>)
    b876:	6816      	ldr	r6, [r2, #0]
    b878:	1b86      	subs	r6, r0, r6
    b87a:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
    b87e:	2e02      	cmp	r6, #2
    b880:	d324      	bcc.n	b8cc <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x9c>
    b882:	f5b6 0f00 	cmp.w	r6, #8388608	; 0x800000
    b886:	d821      	bhi.n	b8cc <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x9c>
    b888:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    b88c:	f44f 3680 	mov.w	r6, #65536	; 0x10000
    b890:	f8c3 6344 	str.w	r6, [r3, #836]	; 0x344
    b894:	b12d      	cbz	r5, b8a2 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x72>
    b896:	6813      	ldr	r3, [r2, #0]
    b898:	1acb      	subs	r3, r1, r3
    b89a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    b89e:	2b02      	cmp	r3, #2
    b8a0:	d3f9      	bcc.n	b896 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x66>
    b8a2:	4b13      	ldr	r3, [pc, #76]	; (b8f0 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc0>)
    b8a4:	2102      	movs	r1, #2
    b8a6:	074a      	lsls	r2, r1, #29
    b8a8:	601a      	str	r2, [r3, #0]
    b8aa:	60a0      	str	r0, [r4, #8]
    b8ac:	2004      	movs	r0, #4
    b8ae:	f88c 0001 	strb.w	r0, [ip, #1]
    b8b2:	f88c 1000 	strb.w	r1, [ip]
    b8b6:	bd70      	pop	{r4, r5, r6, pc}
    b8b8:	f240 21aa 	movw	r1, #682	; 0x2aa
    b8bc:	206c      	movs	r0, #108	; 0x6c
    b8be:	f000 fe2d 	bl	c51c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b8c2:	f240 21ae 	movw	r1, #686	; 0x2ae
    b8c6:	206c      	movs	r0, #108	; 0x6c
    b8c8:	f000 fe28 	bl	c51c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b8cc:	2000      	movs	r0, #0
    b8ce:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    b8d2:	f240 21ba 	movw	r1, #698	; 0x2ba
    b8d6:	206c      	movs	r0, #108	; 0x6c
    b8d8:	f000 fe20 	bl	c51c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b8dc:	200002f8 	.word	0x200002f8
    b8e0:	200002fa 	.word	0x200002fa
    b8e4:	4001f508 	.word	0x4001f508
    b8e8:	4000b000 	.word	0x4000b000
    b8ec:	4000b504 	.word	0x4000b504
    b8f0:	4001f504 	.word	0x4001f504

0000b8f4 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>:
    b8f4:	4801      	ldr	r0, [pc, #4]	; (b8fc <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY+0x8>)
    b8f6:	6880      	ldr	r0, [r0, #8]
    b8f8:	4770      	bx	lr
    b8fa:	0000      	.short	0x0000
    b8fc:	200002f8 	.word	0x200002f8

0000b900 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>:
    b900:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b904:	4836      	ldr	r0, [pc, #216]	; (b9e0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe0>)
    b906:	4a35      	ldr	r2, [pc, #212]	; (b9dc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xdc>)
    b908:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    b90c:	f8df c0d4 	ldr.w	ip, [pc, #212]	; b9e4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe4>
    b910:	1d03      	adds	r3, r0, #4
    b912:	2100      	movs	r1, #0
    b914:	f89c 4000 	ldrb.w	r4, [ip]
    b918:	b184      	cbz	r4, b93c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x3c>
    b91a:	4a33      	ldr	r2, [pc, #204]	; (b9e8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe8>)
    b91c:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    b920:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    b924:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    b928:	f8d0 2148 	ldr.w	r2, [r0, #328]	; 0x148
    b92c:	2301      	movs	r3, #1
    b92e:	2a00      	cmp	r2, #0
    b930:	bf04      	itt	eq
    b932:	f8d0 0104 	ldreq.w	r0, [r0, #260]	; 0x104
    b936:	2800      	cmpeq	r0, #0
    b938:	d111      	bne.n	b95e <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x5e>
    b93a:	e00a      	b.n	b952 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x52>
    b93c:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    b940:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    b944:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    b948:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    b94c:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    b950:	e7ea      	b.n	b928 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x28>
    b952:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    b956:	f44f 6000 	mov.w	r0, #2048	; 0x800
    b95a:	f8c2 0280 	str.w	r0, [r2, #640]	; 0x280
    b95e:	2c02      	cmp	r4, #2
    b960:	d004      	beq.n	b96c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x6c>
    b962:	f240 21c6 	movw	r1, #710	; 0x2c6
    b966:	206c      	movs	r0, #108	; 0x6c
    b968:	f000 fdd8 	bl	c51c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b96c:	4e1f      	ldr	r6, [pc, #124]	; (b9ec <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xec>)
    b96e:	6830      	ldr	r0, [r6, #0]
    b970:	4c1f      	ldr	r4, [pc, #124]	; (b9f0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf0>)
    b972:	1cc0      	adds	r0, r0, #3
    b974:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    b978:	68a2      	ldr	r2, [r4, #8]
    b97a:	4d1e      	ldr	r5, [pc, #120]	; (b9f4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf4>)
    b97c:	4290      	cmp	r0, r2
    b97e:	d00b      	beq.n	b998 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x98>
    b980:	6837      	ldr	r7, [r6, #0]
    b982:	1bd7      	subs	r7, r2, r7
    b984:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
    b988:	2f04      	cmp	r7, #4
    b98a:	d305      	bcc.n	b998 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x98>
    b98c:	f5b7 0f00 	cmp.w	r7, #8388608	; 0x800000
    b990:	d802      	bhi.n	b998 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x98>
    b992:	f7ff fe99 	bl	b6c8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    b996:	e01b      	b.n	b9d0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd0>
    b998:	6830      	ldr	r0, [r6, #0]
    b99a:	1a10      	subs	r0, r2, r0
    b99c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    b9a0:	2802      	cmp	r0, #2
    b9a2:	d313      	bcc.n	b9cc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xcc>
    b9a4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    b9a8:	d810      	bhi.n	b9cc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xcc>
    b9aa:	4a13      	ldr	r2, [pc, #76]	; (b9f8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf8>)
    b9ac:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    b9b0:	6010      	str	r0, [r2, #0]
    b9b2:	6063      	str	r3, [r4, #4]
    b9b4:	7021      	strb	r1, [r4, #0]
    b9b6:	606b      	str	r3, [r5, #4]
    b9b8:	60eb      	str	r3, [r5, #12]
    b9ba:	0040      	lsls	r0, r0, #1
    b9bc:	1f11      	subs	r1, r2, #4
    b9be:	6008      	str	r0, [r1, #0]
    b9c0:	2004      	movs	r0, #4
    b9c2:	f88c 0001 	strb.w	r0, [ip, #1]
    b9c6:	f88c 3000 	strb.w	r3, [ip]
    b9ca:	e001      	b.n	b9d0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd0>
    b9cc:	6063      	str	r3, [r4, #4]
    b9ce:	7021      	strb	r1, [r4, #0]
    b9d0:	6860      	ldr	r0, [r4, #4]
    b9d2:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    b9d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b9da:	0000      	.short	0x0000
    b9dc:	fffbfffd 	.word	0xfffbfffd
    b9e0:	4000b000 	.word	0x4000b000
    b9e4:	200002fa 	.word	0x200002fa
    b9e8:	fffafffd 	.word	0xfffafffd
    b9ec:	4000b504 	.word	0x4000b504
    b9f0:	200002f8 	.word	0x200002f8
    b9f4:	40008000 	.word	0x40008000
    b9f8:	4001f508 	.word	0x4001f508

0000b9fc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>:
    b9fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ba00:	4a54      	ldr	r2, [pc, #336]	; (bb54 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x158>)
    ba02:	2500      	movs	r5, #0
    ba04:	2401      	movs	r4, #1
    ba06:	f892 c000 	ldrb.w	ip, [r2]
    ba0a:	7853      	ldrb	r3, [r2, #1]
    ba0c:	f44f 76a0 	mov.w	r6, #320	; 0x140
    ba10:	2807      	cmp	r0, #7
    ba12:	d27d      	bcs.n	bb10 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x114>
    ba14:	e8df f000 	tbb	[pc, r0]
    ba18:	04040404 	.word	0x04040404
    ba1c:	00585858 	.word	0x00585858
    ba20:	4a4d      	ldr	r2, [pc, #308]	; (bb58 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x15c>)
    ba22:	6897      	ldr	r7, [r2, #8]
    ba24:	f1b7 7f80 	cmp.w	r7, #16777216	; 0x1000000
    ba28:	bf04      	itt	eq
    ba2a:	7852      	ldrbeq	r2, [r2, #1]
    ba2c:	2a00      	cmpeq	r2, #0
    ba2e:	d003      	beq.n	ba38 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x3c>
    ba30:	f1bc 0f02 	cmp.w	ip, #2
    ba34:	d005      	beq.n	ba42 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x46>
    ba36:	e026      	b.n	ba86 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x8a>
    ba38:	f240 3156 	movw	r1, #854	; 0x356
    ba3c:	206c      	movs	r0, #108	; 0x6c
    ba3e:	f000 fd6d 	bl	c51c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    ba42:	1f1a      	subs	r2, r3, #4
    ba44:	b2d2      	uxtb	r2, r2
    ba46:	eb06 0282 	add.w	r2, r6, r2, lsl #2
    ba4a:	f102 4680 	add.w	r6, r2, #1073741824	; 0x40000000
    ba4e:	f506 4630 	add.w	r6, r6, #45056	; 0xb000
    ba52:	2200      	movs	r2, #0
    ba54:	f1bc 0f01 	cmp.w	ip, #1
    ba58:	d003      	beq.n	ba62 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x66>
    ba5a:	f1bc 0f02 	cmp.w	ip, #2
    ba5e:	d008      	beq.n	ba72 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x76>
    ba60:	e00e      	b.n	ba80 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x84>
    ba62:	2b04      	cmp	r3, #4
    ba64:	bf24      	itt	cs
    ba66:	6837      	ldrcs	r7, [r6, #0]
    ba68:	2f00      	cmpcs	r7, #0
    ba6a:	bf08      	it	eq
    ba6c:	f04f 4200 	moveq.w	r2, #2147483648	; 0x80000000
    ba70:	e006      	b.n	ba80 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x84>
    ba72:	2b04      	cmp	r3, #4
    ba74:	bf24      	itt	cs
    ba76:	6837      	ldrcs	r7, [r6, #0]
    ba78:	2f00      	cmpcs	r7, #0
    ba7a:	bf08      	it	eq
    ba7c:	f042 4280 	orreq.w	r2, r2, #1073741824	; 0x40000000
    ba80:	f012 4f80 	tst.w	r2, #1073741824	; 0x40000000
    ba84:	d1e5      	bne.n	ba52 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x56>
    ba86:	f8df c0d4 	ldr.w	ip, [pc, #212]	; bb5c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x160>
    ba8a:	f100 0210 	add.w	r2, r0, #16
    ba8e:	fa04 f202 	lsl.w	r2, r4, r2
    ba92:	f8cc 2308 	str.w	r2, [ip, #776]	; 0x308
    ba96:	f04f 0340 	mov.w	r3, #64	; 0x40
    ba9a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    ba9e:	b2db      	uxtb	r3, r3
    baa0:	4463      	add	r3, ip
    baa2:	601c      	str	r4, [r3, #0]
    baa4:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
    baa8:	f8d0 3540 	ldr.w	r3, [r0, #1344]	; 0x540
    baac:	eba1 0303 	sub.w	r3, r1, r3
    bab0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    bab4:	2b03      	cmp	r3, #3
    bab6:	bf26      	itte	cs
    bab8:	f8c0 1540 	strcs.w	r1, [r0, #1344]	; 0x540
    babc:	f8cc 2304 	strcs.w	r2, [ip, #772]	; 0x304
    bac0:	f8c0 5540 	strcc.w	r5, [r0, #1344]	; 0x540
    bac4:	d237      	bcs.n	bb36 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x13a>
    bac6:	e03c      	b.n	bb42 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x146>
    bac8:	f1bc 0f00 	cmp.w	ip, #0
    bacc:	d006      	beq.n	badc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xe0>
    bace:	4283      	cmp	r3, r0
    bad0:	d104      	bne.n	badc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xe0>
    bad2:	f240 3176 	movw	r1, #886	; 0x376
    bad6:	206c      	movs	r0, #108	; 0x6c
    bad8:	f000 fd20 	bl	c51c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    badc:	1f02      	subs	r2, r0, #4
    bade:	b2d3      	uxtb	r3, r2
    bae0:	2b03      	cmp	r3, #3
    bae2:	d304      	bcc.n	baee <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xf2>
    bae4:	f240 11d1 	movw	r1, #465	; 0x1d1
    bae8:	206c      	movs	r0, #108	; 0x6c
    baea:	f000 fd17 	bl	c51c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    baee:	f8df c070 	ldr.w	ip, [pc, #112]	; bb60 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x164>
    baf2:	f103 0210 	add.w	r2, r3, #16
    baf6:	fa04 f202 	lsl.w	r2, r4, r2
    bafa:	f8cc 2308 	str.w	r2, [ip, #776]	; 0x308
    bafe:	f8cc 2348 	str.w	r2, [ip, #840]	; 0x348
    bb02:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    bb06:	f84c 5003 	str.w	r5, [ip, r3]
    bb0a:	4b16      	ldr	r3, [pc, #88]	; (bb64 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x168>)
    bb0c:	681b      	ldr	r3, [r3, #0]
    bb0e:	e000      	b.n	bb12 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x116>
    bb10:	e01a      	b.n	bb48 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x14c>
    bb12:	1f00      	subs	r0, r0, #4
    bb14:	1acb      	subs	r3, r1, r3
    bb16:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    bb1a:	b2c0      	uxtb	r0, r0
    bb1c:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
    bb20:	2b02      	cmp	r3, #2
    bb22:	d30b      	bcc.n	bb3c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x140>
    bb24:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    bb28:	d808      	bhi.n	bb3c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x140>
    bb2a:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    bb2e:	f8cc 2304 	str.w	r2, [ip, #772]	; 0x304
    bb32:	f8cc 2344 	str.w	r2, [ip, #836]	; 0x344
    bb36:	2001      	movs	r0, #1
    bb38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bb3c:	2100      	movs	r1, #0
    bb3e:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    bb42:	2000      	movs	r0, #0
    bb44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bb48:	f240 317a 	movw	r1, #890	; 0x37a
    bb4c:	206c      	movs	r0, #108	; 0x6c
    bb4e:	f000 fce5 	bl	c51c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    bb52:	0000      	.short	0x0000
    bb54:	200002fa 	.word	0x200002fa
    bb58:	200002f8 	.word	0x200002f8
    bb5c:	40008000 	.word	0x40008000
    bb60:	4000b000 	.word	0x4000b000
    bb64:	4000b504 	.word	0x4000b504

0000bb68 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>:
    bb68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    bb6c:	2601      	movs	r6, #1
    bb6e:	2700      	movs	r7, #0
    bb70:	f44f 78a0 	mov.w	r8, #320	; 0x140
    bb74:	2807      	cmp	r0, #7
    bb76:	d251      	bcs.n	bc1c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb4>
    bb78:	e8df f000 	tbb	[pc, r0]
    bb7c:	04040404 	.word	0x04040404
    bb80:	00191919 	.word	0x00191919
    bb84:	f100 0110 	add.w	r1, r0, #16
    bb88:	fa06 f201 	lsl.w	r2, r6, r1
    bb8c:	4926      	ldr	r1, [pc, #152]	; (bc28 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc0>)
    bb8e:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    bb92:	eb01 0380 	add.w	r3, r1, r0, lsl #2
    bb96:	2200      	movs	r2, #0
    bb98:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    bb9c:	eb08 0280 	add.w	r2, r8, r0, lsl #2
    bba0:	508f      	str	r7, [r1, r2]
    bba2:	4922      	ldr	r1, [pc, #136]	; (bc2c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc4>)
    bba4:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    bba8:	9000      	str	r0, [sp, #0]
    bbaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    bbae:	4d20      	ldr	r5, [pc, #128]	; (bc30 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc8>)
    bbb0:	1f01      	subs	r1, r0, #4
    bbb2:	b2cc      	uxtb	r4, r1
    bbb4:	7829      	ldrb	r1, [r5, #0]
    bbb6:	b179      	cbz	r1, bbd8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x70>
    bbb8:	786a      	ldrb	r2, [r5, #1]
    bbba:	4282      	cmp	r2, r0
    bbbc:	d10c      	bne.n	bbd8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x70>
    bbbe:	4a1d      	ldr	r2, [pc, #116]	; (bc34 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xcc>)
    bbc0:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    bbc4:	6010      	str	r0, [r2, #0]
    bbc6:	2901      	cmp	r1, #1
    bbc8:	bf08      	it	eq
    bbca:	f7ff fd25 	bleq	b618 <MPSL_IRQ_TIMER0_Handler+0x100>
    bbce:	702f      	strb	r7, [r5, #0]
    bbd0:	4919      	ldr	r1, [pc, #100]	; (bc38 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd0>)
    bbd2:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    bbd6:	6088      	str	r0, [r1, #8]
    bbd8:	4918      	ldr	r1, [pc, #96]	; (bc3c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd4>)
    bbda:	f104 0010 	add.w	r0, r4, #16
    bbde:	fa06 f000 	lsl.w	r0, r6, r0
    bbe2:	f8c1 0308 	str.w	r0, [r1, #776]	; 0x308
    bbe6:	f8c1 0348 	str.w	r0, [r1, #840]	; 0x348
    bbea:	00a0      	lsls	r0, r4, #2
    bbec:	4408      	add	r0, r1
    bbee:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    bbf2:	4a13      	ldr	r2, [pc, #76]	; (bc40 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd8>)
    bbf4:	6812      	ldr	r2, [r2, #0]
    bbf6:	1a80      	subs	r0, r0, r2
    bbf8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    bbfc:	2802      	cmp	r0, #2
    bbfe:	d307      	bcc.n	bc10 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xa8>
    bc00:	eb01 0284 	add.w	r2, r1, r4, lsl #2
    bc04:	2000      	movs	r0, #0
    bc06:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    bc0a:	eb08 0084 	add.w	r0, r8, r4, lsl #2
    bc0e:	500f      	str	r7, [r1, r0]
    bc10:	480c      	ldr	r0, [pc, #48]	; (bc44 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xdc>)
    bc12:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    bc16:	9000      	str	r0, [sp, #0]
    bc18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    bc1c:	f240 31fe 	movw	r1, #1022	; 0x3fe
    bc20:	206c      	movs	r0, #108	; 0x6c
    bc22:	f000 fc7b 	bl	c51c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    bc26:	0000      	.short	0x0000
    bc28:	40008000 	.word	0x40008000
    bc2c:	40008140 	.word	0x40008140
    bc30:	200002fa 	.word	0x200002fa
    bc34:	4001f508 	.word	0x4001f508
    bc38:	200002f8 	.word	0x200002f8
    bc3c:	4000b000 	.word	0x4000b000
    bc40:	4000b504 	.word	0x4000b504
    bc44:	4000b140 	.word	0x4000b140

0000bc48 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>:
    bc48:	4825      	ldr	r0, [pc, #148]	; (bce0 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x98>)
    bc4a:	4a24      	ldr	r2, [pc, #144]	; (bcdc <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x94>)
    bc4c:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    bc50:	4924      	ldr	r1, [pc, #144]	; (bce4 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x9c>)
    bc52:	1d03      	adds	r3, r0, #4
    bc54:	f891 c000 	ldrb.w	ip, [r1]
    bc58:	2100      	movs	r1, #0
    bc5a:	f1bc 0f00 	cmp.w	ip, #0
    bc5e:	d010      	beq.n	bc82 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x3a>
    bc60:	4a21      	ldr	r2, [pc, #132]	; (bce8 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0xa0>)
    bc62:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    bc66:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    bc6a:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    bc6e:	bf00      	nop
    bc70:	f8d0 2148 	ldr.w	r2, [r0, #328]	; 0x148
    bc74:	2a00      	cmp	r2, #0
    bc76:	bf04      	itt	eq
    bc78:	f8d0 0104 	ldreq.w	r0, [r0, #260]	; 0x104
    bc7c:	2800      	cmpeq	r0, #0
    bc7e:	d111      	bne.n	bca4 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x5c>
    bc80:	e00a      	b.n	bc98 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x50>
    bc82:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    bc86:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    bc8a:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    bc8e:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    bc92:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    bc96:	e7eb      	b.n	bc70 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x28>
    bc98:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    bc9c:	f44f 6000 	mov.w	r0, #2048	; 0x800
    bca0:	f8c2 0280 	str.w	r0, [r2, #640]	; 0x280
    bca4:	4811      	ldr	r0, [pc, #68]	; (bcec <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0xa4>)
    bca6:	f04f 32ff 	mov.w	r2, #4294967295
    bcaa:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    bcae:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    bcb2:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    bcb6:	f100 0204 	add.w	r2, r0, #4
    bcba:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    bcbe:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    bcc2:	f102 0204 	add.w	r2, r2, #4
    bcc6:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    bcca:	f8c0 1148 	str.w	r1, [r0, #328]	; 0x148
    bcce:	f102 0204 	add.w	r2, r2, #4
    bcd2:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    bcd6:	f8c0 114c 	str.w	r1, [r0, #332]	; 0x14c
    bcda:	4770      	bx	lr
    bcdc:	fffbfffd 	.word	0xfffbfffd
    bce0:	4000b000 	.word	0x4000b000
    bce4:	200002fa 	.word	0x200002fa
    bce8:	fffafffd 	.word	0xfffafffd
    bcec:	40008000 	.word	0x40008000

0000bcf0 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA>:
    bcf0:	b510      	push	{r4, lr}
    bcf2:	2807      	cmp	r0, #7
    bcf4:	d20d      	bcs.n	bd12 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x22>
    bcf6:	e8df f000 	tbb	[pc, r0]
    bcfa:	0404      	.short	0x0404
    bcfc:	06060404 	.word	0x06060404
    bd00:	0006      	.short	0x0006
    bd02:	4906      	ldr	r1, [pc, #24]	; (bd1c <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x2c>)
    bd04:	e002      	b.n	bd0c <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x1c>
    bd06:	1f00      	subs	r0, r0, #4
    bd08:	4905      	ldr	r1, [pc, #20]	; (bd20 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x30>)
    bd0a:	b2c0      	uxtb	r0, r0
    bd0c:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    bd10:	bd10      	pop	{r4, pc}
    bd12:	f240 319e 	movw	r1, #926	; 0x39e
    bd16:	206c      	movs	r0, #108	; 0x6c
    bd18:	f000 fc00 	bl	c51c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    bd1c:	40008140 	.word	0x40008140
    bd20:	4000b140 	.word	0x4000b140

0000bd24 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>:
    bd24:	b570      	push	{r4, r5, r6, lr}
    bd26:	481f      	ldr	r0, [pc, #124]	; (bda4 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x80>)
    bd28:	2400      	movs	r4, #0
    bd2a:	2104      	movs	r1, #4
    bd2c:	7004      	strb	r4, [r0, #0]
    bd2e:	1e80      	subs	r0, r0, #2
    bd30:	7001      	strb	r1, [r0, #0]
    bd32:	0589      	lsls	r1, r1, #22
    bd34:	60c4      	str	r4, [r0, #12]
    bd36:	6081      	str	r1, [r0, #8]
    bd38:	f7ff fc6e 	bl	b618 <MPSL_IRQ_TIMER0_Handler+0x100>
    bd3c:	2501      	movs	r5, #1
    bd3e:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
    bd42:	02eb      	lsls	r3, r5, #11
    bd44:	f8cc 3180 	str.w	r3, [ip, #384]	; 0x180
    bd48:	f3bf 8f4f 	dsb	sy
    bd4c:	f3bf 8f6f 	isb	sy
    bd50:	f8cc 3280 	str.w	r3, [ip, #640]	; 0x280
    bd54:	4814      	ldr	r0, [pc, #80]	; (bda8 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x84>)
    bd56:	6045      	str	r5, [r0, #4]
    bd58:	6085      	str	r5, [r0, #8]
    bd5a:	4914      	ldr	r1, [pc, #80]	; (bdac <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x88>)
    bd5c:	680a      	ldr	r2, [r1, #0]
    bd5e:	2a00      	cmp	r2, #0
    bd60:	d1fc      	bne.n	bd5c <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x38>
    bd62:	1e51      	subs	r1, r2, #1
    bd64:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    bd68:	f8c0 1348 	str.w	r1, [r0, #840]	; 0x348
    bd6c:	f8c0 4540 	str.w	r4, [r0, #1344]	; 0x540
    bd70:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    bd74:	490e      	ldr	r1, [pc, #56]	; (bdb0 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x8c>)
    bd76:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    bd7a:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    bd7e:	1d09      	adds	r1, r1, #4
    bd80:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    bd84:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
    bd88:	f8c0 4104 	str.w	r4, [r0, #260]	; 0x104
    bd8c:	f8cc 3100 	str.w	r3, [ip, #256]	; 0x100
    bd90:	6005      	str	r5, [r0, #0]
    bd92:	f44f 7182 	mov.w	r1, #260	; 0x104
    bd96:	f8c0 1344 	str.w	r1, [r0, #836]	; 0x344
    bd9a:	2102      	movs	r1, #2
    bd9c:	f8c0 1304 	str.w	r1, [r0, #772]	; 0x304
    bda0:	bd70      	pop	{r4, r5, r6, pc}
    bda2:	0000      	.short	0x0000
    bda4:	200002fa 	.word	0x200002fa
    bda8:	4000b000 	.word	0x4000b000
    bdac:	4000b504 	.word	0x4000b504
    bdb0:	4000b004 	.word	0x4000b004

0000bdb4 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>:
    bdb4:	4808      	ldr	r0, [pc, #32]	; (bdd8 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ+0x24>)
    bdb6:	f990 0000 	ldrsb.w	r0, [r0]
    bdba:	2800      	cmp	r0, #0
    bdbc:	bfb8      	it	lt
    bdbe:	4770      	bxlt	lr
    bdc0:	f000 011f 	and.w	r1, r0, #31
    bdc4:	2201      	movs	r2, #1
    bdc6:	fa02 f101 	lsl.w	r1, r2, r1
    bdca:	0940      	lsrs	r0, r0, #5
    bdcc:	0080      	lsls	r0, r0, #2
    bdce:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    bdd2:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    bdd6:	4770      	bx	lr
    bdd8:	20000380 	.word	0x20000380

0000bddc <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>:
    bddc:	4803      	ldr	r0, [pc, #12]	; (bdec <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI+0x10>)
    bdde:	7800      	ldrb	r0, [r0, #0]
    bde0:	2803      	cmp	r0, #3
    bde2:	bf0c      	ite	eq
    bde4:	2001      	moveq	r0, #1
    bde6:	2000      	movne	r0, #0
    bde8:	4770      	bx	lr
    bdea:	0000      	.short	0x0000
    bdec:	20000358 	.word	0x20000358

0000bdf0 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>:
    bdf0:	4801      	ldr	r0, [pc, #4]	; (bdf8 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII+0x8>)
    bdf2:	8840      	ldrh	r0, [r0, #2]
    bdf4:	4770      	bx	lr
    bdf6:	0000      	.short	0x0000
    bdf8:	20000358 	.word	0x20000358

0000bdfc <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI>:
    bdfc:	4803      	ldr	r0, [pc, #12]	; (be0c <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI+0x10>)
    bdfe:	7800      	ldrb	r0, [r0, #0]
    be00:	2802      	cmp	r0, #2
    be02:	bf16      	itet	ne
    be04:	2803      	cmpne	r0, #3
    be06:	2001      	moveq	r0, #1
    be08:	2000      	movne	r0, #0
    be0a:	4770      	bx	lr
    be0c:	20000358 	.word	0x20000358

0000be10 <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY>:
    be10:	4802      	ldr	r0, [pc, #8]	; (be1c <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY+0xc>)
    be12:	2100      	movs	r1, #0
    be14:	7001      	strb	r1, [r0, #0]
    be16:	8041      	strh	r1, [r0, #2]
    be18:	4770      	bx	lr
    be1a:	0000      	.short	0x0000
    be1c:	20000358 	.word	0x20000358

0000be20 <MPSL_IRQ_CLOCK_Handler>:
    be20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    be24:	4c16      	ldr	r4, [pc, #88]	; (be80 <MPSL_IRQ_CLOCK_Handler+0x60>)
    be26:	7a60      	ldrb	r0, [r4, #9]
    be28:	2800      	cmp	r0, #0
    be2a:	d027      	beq.n	be7c <MPSL_IRQ_CLOCK_Handler+0x5c>
    be2c:	f44f 7180 	mov.w	r1, #256	; 0x100
    be30:	058d      	lsls	r5, r1, #22
    be32:	4628      	mov	r0, r5
    be34:	f004 feb0 	bl	10b98 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    be38:	4680      	mov	r8, r0
    be3a:	f44f 7182 	mov.w	r1, #260	; 0x104
    be3e:	4628      	mov	r0, r5
    be40:	f004 feaa 	bl	10b98 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    be44:	2600      	movs	r6, #0
    be46:	4607      	mov	r7, r0
    be48:	f1b8 0f00 	cmp.w	r8, #0
    be4c:	d009      	beq.n	be62 <MPSL_IRQ_CLOCK_Handler+0x42>
    be4e:	2001      	movs	r0, #1
    be50:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    be54:	7920      	ldrb	r0, [r4, #4]
    be56:	b120      	cbz	r0, be62 <MPSL_IRQ_CLOCK_Handler+0x42>
    be58:	7126      	strb	r6, [r4, #4]
    be5a:	69e0      	ldr	r0, [r4, #28]
    be5c:	b108      	cbz	r0, be62 <MPSL_IRQ_CLOCK_Handler+0x42>
    be5e:	4780      	blx	r0
    be60:	61e6      	str	r6, [r4, #28]
    be62:	b137      	cbz	r7, be72 <MPSL_IRQ_CLOCK_Handler+0x52>
    be64:	f8c5 6104 	str.w	r6, [r5, #260]	; 0x104
    be68:	2002      	movs	r0, #2
    be6a:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    be6e:	f000 fa75 	bl	c35c <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    be72:	4640      	mov	r0, r8
    be74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    be78:	f000 b858 	b.w	bf2c <MPSL_IRQ_CLOCK_Handler+0x10c>
    be7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    be80:	20000308 	.word	0x20000308
    be84:	b510      	push	{r4, lr}
    be86:	f004 ff31 	bl	10cec <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    be8a:	b930      	cbnz	r0, be9a <MPSL_IRQ_CLOCK_Handler+0x7a>
    be8c:	f004 ff4f 	bl	10d2e <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    be90:	b918      	cbnz	r0, be9a <MPSL_IRQ_CLOCK_Handler+0x7a>
    be92:	f004 ff82 	bl	10d9a <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    be96:	2800      	cmp	r0, #0
    be98:	d002      	beq.n	bea0 <MPSL_IRQ_CLOCK_Handler+0x80>
    be9a:	4902      	ldr	r1, [pc, #8]	; (bea4 <MPSL_IRQ_CLOCK_Handler+0x84>)
    be9c:	2002      	movs	r0, #2
    be9e:	6008      	str	r0, [r1, #0]
    bea0:	bd10      	pop	{r4, pc}
    bea2:	0000      	.short	0x0000
    bea4:	40000c34 	.word	0x40000c34
    bea8:	b570      	push	{r4, r5, r6, lr}
    beaa:	f000 f99b 	bl	c1e4 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    beae:	f000 fabd 	bl	c42c <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    beb2:	4c09      	ldr	r4, [pc, #36]	; (bed8 <MPSL_IRQ_CLOCK_Handler+0xb8>)
    beb4:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    beb8:	b130      	cbz	r0, bec8 <MPSL_IRQ_CLOCK_Handler+0xa8>
    beba:	f7ff ffe3 	bl	be84 <MPSL_IRQ_CLOCK_Handler+0x64>
    bebe:	2001      	movs	r0, #1
    bec0:	6128      	str	r0, [r5, #16]
    bec2:	2004      	movs	r0, #4
    bec4:	72a0      	strb	r0, [r4, #10]
    bec6:	e004      	b.n	bed2 <MPSL_IRQ_CLOCK_Handler+0xb2>
    bec8:	2003      	movs	r0, #3
    beca:	72a0      	strb	r0, [r4, #10]
    becc:	2001      	movs	r0, #1
    bece:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    bed2:	2000      	movs	r0, #0
    bed4:	71e0      	strb	r0, [r4, #7]
    bed6:	bd70      	pop	{r4, r5, r6, pc}
    bed8:	20000308 	.word	0x20000308
    bedc:	b570      	push	{r4, r5, r6, lr}
    bede:	4c12      	ldr	r4, [pc, #72]	; (bf28 <MPSL_IRQ_CLOCK_Handler+0x108>)
    bee0:	79a0      	ldrb	r0, [r4, #6]
    bee2:	b1e0      	cbz	r0, bf1e <MPSL_IRQ_CLOCK_Handler+0xfe>
    bee4:	79e1      	ldrb	r1, [r4, #7]
    bee6:	1e40      	subs	r0, r0, #1
    bee8:	4281      	cmp	r1, r0
    beea:	da18      	bge.n	bf1e <MPSL_IRQ_CLOCK_Handler+0xfe>
    beec:	f000 fa9e 	bl	c42c <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    bef0:	4605      	mov	r5, r0
    bef2:	f000 fb87 	bl	c604 <mpsl_temperature_get>
    bef6:	79a1      	ldrb	r1, [r4, #6]
    bef8:	2901      	cmp	r1, #1
    befa:	d902      	bls.n	bf02 <MPSL_IRQ_CLOCK_Handler+0xe2>
    befc:	79e1      	ldrb	r1, [r4, #7]
    befe:	1c49      	adds	r1, r1, #1
    bf00:	71e1      	strb	r1, [r4, #7]
    bf02:	b10d      	cbz	r5, bf08 <MPSL_IRQ_CLOCK_Handler+0xe8>
    bf04:	6961      	ldr	r1, [r4, #20]
    bf06:	e000      	b.n	bf0a <MPSL_IRQ_CLOCK_Handler+0xea>
    bf08:	6921      	ldr	r1, [r4, #16]
    bf0a:	1a41      	subs	r1, r0, r1
    bf0c:	2902      	cmp	r1, #2
    bf0e:	da02      	bge.n	bf16 <MPSL_IRQ_CLOCK_Handler+0xf6>
    bf10:	f111 0f02 	cmn.w	r1, #2
    bf14:	dc07      	bgt.n	bf26 <MPSL_IRQ_CLOCK_Handler+0x106>
    bf16:	b10d      	cbz	r5, bf1c <MPSL_IRQ_CLOCK_Handler+0xfc>
    bf18:	6160      	str	r0, [r4, #20]
    bf1a:	e000      	b.n	bf1e <MPSL_IRQ_CLOCK_Handler+0xfe>
    bf1c:	6120      	str	r0, [r4, #16]
    bf1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    bf22:	f7ff bfc1 	b.w	bea8 <MPSL_IRQ_CLOCK_Handler+0x88>
    bf26:	bd70      	pop	{r4, r5, r6, pc}
    bf28:	20000308 	.word	0x20000308
    bf2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bf30:	4606      	mov	r6, r0
    bf32:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    bf36:	f44f 7186 	mov.w	r1, #268	; 0x10c
    bf3a:	4628      	mov	r0, r5
    bf3c:	f004 fe2c 	bl	10b98 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    bf40:	4680      	mov	r8, r0
    bf42:	f44f 7188 	mov.w	r1, #272	; 0x110
    bf46:	4628      	mov	r0, r5
    bf48:	f004 fe26 	bl	10b98 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    bf4c:	4c27      	ldr	r4, [pc, #156]	; (bfec <MPSL_IRQ_CLOCK_Handler+0x1cc>)
    bf4e:	4682      	mov	sl, r0
    bf50:	7827      	ldrb	r7, [r4, #0]
    bf52:	f104 0008 	add.w	r0, r4, #8
    bf56:	f004 fe93 	bl	10c80 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    bf5a:	b110      	cbz	r0, bf62 <MPSL_IRQ_CLOCK_Handler+0x142>
    bf5c:	f44f 71db 	mov.w	r1, #438	; 0x1b6
    bf60:	e016      	b.n	bf90 <MPSL_IRQ_CLOCK_Handler+0x170>
    bf62:	f04f 0901 	mov.w	r9, #1
    bf66:	b146      	cbz	r6, bf7a <MPSL_IRQ_CLOCK_Handler+0x15a>
    bf68:	7aa0      	ldrb	r0, [r4, #10]
    bf6a:	2803      	cmp	r0, #3
    bf6c:	d105      	bne.n	bf7a <MPSL_IRQ_CLOCK_Handler+0x15a>
    bf6e:	2004      	movs	r0, #4
    bf70:	72a0      	strb	r0, [r4, #10]
    bf72:	f7ff ff87 	bl	be84 <MPSL_IRQ_CLOCK_Handler+0x64>
    bf76:	f8c5 9010 	str.w	r9, [r5, #16]
    bf7a:	2600      	movs	r6, #0
    bf7c:	f1b8 0f00 	cmp.w	r8, #0
    bf80:	d018      	beq.n	bfb4 <MPSL_IRQ_CLOCK_Handler+0x194>
    bf82:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
    bf86:	7aa0      	ldrb	r0, [r4, #10]
    bf88:	2804      	cmp	r0, #4
    bf8a:	d004      	beq.n	bf96 <MPSL_IRQ_CLOCK_Handler+0x176>
    bf8c:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
    bf90:	206d      	movs	r0, #109	; 0x6d
    bf92:	f000 fac3 	bl	c51c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    bf96:	f004 fea9 	bl	10cec <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    bf9a:	b928      	cbnz	r0, bfa8 <MPSL_IRQ_CLOCK_Handler+0x188>
    bf9c:	f004 fec7 	bl	10d2e <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    bfa0:	b910      	cbnz	r0, bfa8 <MPSL_IRQ_CLOCK_Handler+0x188>
    bfa2:	f004 fefa 	bl	10d9a <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    bfa6:	b108      	cbz	r0, bfac <MPSL_IRQ_CLOCK_Handler+0x18c>
    bfa8:	4811      	ldr	r0, [pc, #68]	; (bff0 <MPSL_IRQ_CLOCK_Handler+0x1d0>)
    bfaa:	6006      	str	r6, [r0, #0]
    bfac:	2002      	movs	r0, #2
    bfae:	72a0      	strb	r0, [r4, #10]
    bfb0:	f000 f8fc 	bl	c1ac <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    bfb4:	f1ba 0f00 	cmp.w	sl, #0
    bfb8:	d008      	beq.n	bfcc <MPSL_IRQ_CLOCK_Handler+0x1ac>
    bfba:	f8c5 6110 	str.w	r6, [r5, #272]	; 0x110
    bfbe:	7aa0      	ldrb	r0, [r4, #10]
    bfc0:	2802      	cmp	r0, #2
    bfc2:	d101      	bne.n	bfc8 <MPSL_IRQ_CLOCK_Handler+0x1a8>
    bfc4:	f7ff ff8a 	bl	bedc <MPSL_IRQ_CLOCK_Handler+0xbc>
    bfc8:	f8c5 9014 	str.w	r9, [r5, #20]
    bfcc:	b13f      	cbz	r7, bfde <MPSL_IRQ_CLOCK_Handler+0x1be>
    bfce:	7026      	strb	r6, [r4, #0]
    bfd0:	7aa0      	ldrb	r0, [r4, #10]
    bfd2:	2802      	cmp	r0, #2
    bfd4:	d101      	bne.n	bfda <MPSL_IRQ_CLOCK_Handler+0x1ba>
    bfd6:	f7ff ff67 	bl	bea8 <MPSL_IRQ_CLOCK_Handler+0x88>
    bfda:	f000 f8e7 	bl	c1ac <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    bfde:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bfe2:	4802      	ldr	r0, [pc, #8]	; (bfec <MPSL_IRQ_CLOCK_Handler+0x1cc>)
    bfe4:	3008      	adds	r0, #8
    bfe6:	f004 be62 	b.w	10cae <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    bfea:	0000      	.short	0x0000
    bfec:	20000308 	.word	0x20000308
    bff0:	40000c34 	.word	0x40000c34
    bff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bff8:	4c49      	ldr	r4, [pc, #292]	; (c120 <MPSL_IRQ_CLOCK_Handler+0x300>)
    bffa:	2700      	movs	r7, #0
    bffc:	4606      	mov	r6, r0
    bffe:	61a7      	str	r7, [r4, #24]
    c000:	7842      	ldrb	r2, [r0, #1]
    c002:	7881      	ldrb	r1, [r0, #2]
    c004:	7800      	ldrb	r0, [r0, #0]
    c006:	72e0      	strb	r0, [r4, #11]
    c008:	7162      	strb	r2, [r4, #5]
    c00a:	71a1      	strb	r1, [r4, #6]
    c00c:	71e7      	strb	r7, [r4, #7]
    c00e:	f04f 0801 	mov.w	r8, #1
    c012:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    c016:	2805      	cmp	r0, #5
    c018:	d225      	bcs.n	c066 <MPSL_IRQ_CLOCK_Handler+0x246>
    c01a:	e8df f000 	tbb	[pc, r0]
    c01e:	0310      	.short	0x0310
    c020:	00222006 	.word	0x00222006
    c024:	f8c4 8018 	str.w	r8, [r4, #24]
    c028:	e009      	b.n	c03e <MPSL_IRQ_CLOCK_Handler+0x21e>
    c02a:	f000 f8db 	bl	c1e4 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    c02e:	2101      	movs	r1, #1
    c030:	4628      	mov	r0, r5
    c032:	f004 fdb6 	bl	10ba2 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x60>
    c036:	2800      	cmp	r0, #0
    c038:	d0f9      	beq.n	c02e <MPSL_IRQ_CLOCK_Handler+0x20e>
    c03a:	2002      	movs	r0, #2
    c03c:	61a0      	str	r0, [r4, #24]
    c03e:	f004 fddc 	bl	10bfa <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>
    c042:	b1c0      	cbz	r0, c076 <MPSL_IRQ_CLOCK_Handler+0x256>
    c044:	f000 fa0c 	bl	c460 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>
    c048:	7e21      	ldrb	r1, [r4, #24]
    c04a:	f001 0103 	and.w	r1, r1, #3
    c04e:	4288      	cmp	r0, r1
    c050:	d111      	bne.n	c076 <MPSL_IRQ_CLOCK_Handler+0x256>
    c052:	79b0      	ldrb	r0, [r6, #6]
    c054:	b160      	cbz	r0, c070 <MPSL_IRQ_CLOCK_Handler+0x250>
    c056:	2002      	movs	r0, #2
    c058:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    c05c:	e044      	b.n	c0e8 <MPSL_IRQ_CLOCK_Handler+0x2c8>
    c05e:	4831      	ldr	r0, [pc, #196]	; (c124 <MPSL_IRQ_CLOCK_Handler+0x304>)
    c060:	e7ec      	b.n	c03c <MPSL_IRQ_CLOCK_Handler+0x21c>
    c062:	4831      	ldr	r0, [pc, #196]	; (c128 <MPSL_IRQ_CLOCK_Handler+0x308>)
    c064:	e7ea      	b.n	c03c <MPSL_IRQ_CLOCK_Handler+0x21c>
    c066:	f240 313d 	movw	r1, #829	; 0x33d
    c06a:	206d      	movs	r0, #109	; 0x6d
    c06c:	f000 fa56 	bl	c51c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c070:	f000 f9ca 	bl	c408 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    c074:	e038      	b.n	c0e8 <MPSL_IRQ_CLOCK_Handler+0x2c8>
    c076:	f8c5 800c 	str.w	r8, [r5, #12]
    c07a:	f8c5 7104 	str.w	r7, [r5, #260]	; 0x104
    c07e:	69a0      	ldr	r0, [r4, #24]
    c080:	f8c5 0518 	str.w	r0, [r5, #1304]	; 0x518
    c084:	f004 fe1e 	bl	10cc4 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    c088:	b940      	cbnz	r0, c09c <MPSL_IRQ_CLOCK_Handler+0x27c>
    c08a:	f004 fe25 	bl	10cd8 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    c08e:	b928      	cbnz	r0, c09c <MPSL_IRQ_CLOCK_Handler+0x27c>
    c090:	f004 fe39 	bl	10d06 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    c094:	b910      	cbnz	r0, c09c <MPSL_IRQ_CLOCK_Handler+0x27c>
    c096:	f004 fe4a 	bl	10d2e <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    c09a:	b138      	cbz	r0, c0ac <MPSL_IRQ_CLOCK_Handler+0x28c>
    c09c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c0a0:	f8d0 0244 	ldr.w	r0, [r0, #580]	; 0x244
    c0a4:	4921      	ldr	r1, [pc, #132]	; (c12c <MPSL_IRQ_CLOCK_Handler+0x30c>)
    c0a6:	f3c0 3042 	ubfx	r0, r0, #13, #3
    c0aa:	6008      	str	r0, [r1, #0]
    c0ac:	f004 fe0a 	bl	10cc4 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    c0b0:	b940      	cbnz	r0, c0c4 <MPSL_IRQ_CLOCK_Handler+0x2a4>
    c0b2:	f004 fe11 	bl	10cd8 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    c0b6:	b928      	cbnz	r0, c0c4 <MPSL_IRQ_CLOCK_Handler+0x2a4>
    c0b8:	f004 fe25 	bl	10d06 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    c0bc:	b910      	cbnz	r0, c0c4 <MPSL_IRQ_CLOCK_Handler+0x2a4>
    c0be:	f004 fe36 	bl	10d2e <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    c0c2:	b118      	cbz	r0, c0cc <MPSL_IRQ_CLOCK_Handler+0x2ac>
    c0c4:	4919      	ldr	r1, [pc, #100]	; (c12c <MPSL_IRQ_CLOCK_Handler+0x30c>)
    c0c6:	3110      	adds	r1, #16
    c0c8:	f8c1 8000 	str.w	r8, [r1]
    c0cc:	f8c5 8008 	str.w	r8, [r5, #8]
    c0d0:	2002      	movs	r0, #2
    c0d2:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    c0d6:	79b0      	ldrb	r0, [r6, #6]
    c0d8:	b930      	cbnz	r0, c0e8 <MPSL_IRQ_CLOCK_Handler+0x2c8>
    c0da:	f000 f829 	bl	c130 <MPSL_IRQ_CLOCK_Handler+0x310>
    c0de:	2002      	movs	r0, #2
    c0e0:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    c0e4:	f8c5 7104 	str.w	r7, [r5, #260]	; 0x104
    c0e8:	79a0      	ldrb	r0, [r4, #6]
    c0ea:	b170      	cbz	r0, c10a <MPSL_IRQ_CLOCK_Handler+0x2ea>
    c0ec:	7830      	ldrb	r0, [r6, #0]
    c0ee:	b960      	cbnz	r0, c10a <MPSL_IRQ_CLOCK_Handler+0x2ea>
    c0f0:	f000 f99c 	bl	c42c <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    c0f4:	4606      	mov	r6, r0
    c0f6:	f000 fa85 	bl	c604 <mpsl_temperature_get>
    c0fa:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    c0fe:	b116      	cbz	r6, c106 <MPSL_IRQ_CLOCK_Handler+0x2e6>
    c100:	e9c4 1004 	strd	r1, r0, [r4, #16]
    c104:	e001      	b.n	c10a <MPSL_IRQ_CLOCK_Handler+0x2ea>
    c106:	e9c4 0104 	strd	r0, r1, [r4, #16]
    c10a:	2101      	movs	r1, #1
    c10c:	4628      	mov	r0, r5
    c10e:	f004 fd48 	bl	10ba2 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x60>
    c112:	b108      	cbz	r0, c118 <MPSL_IRQ_CLOCK_Handler+0x2f8>
    c114:	f000 f984 	bl	c420 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    c118:	72a7      	strb	r7, [r4, #10]
    c11a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c11e:	0000      	.short	0x0000
    c120:	20000308 	.word	0x20000308
    c124:	00020001 	.word	0x00020001
    c128:	00030001 	.word	0x00030001
    c12c:	4000053c 	.word	0x4000053c
    c130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c134:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    c138:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    c13c:	f010 0f02 	tst.w	r0, #2
    c140:	d011      	beq.n	c166 <MPSL_IRQ_CLOCK_Handler+0x346>
    c142:	4c16      	ldr	r4, [pc, #88]	; (c19c <MPSL_IRQ_CLOCK_Handler+0x37c>)
    c144:	6820      	ldr	r0, [r4, #0]
    c146:	43c0      	mvns	r0, r0
    c148:	f340 1600 	sbfx	r6, r0, #4, #1
    c14c:	6820      	ldr	r0, [r4, #0]
    c14e:	f040 0010 	orr.w	r0, r0, #16
    c152:	6020      	str	r0, [r4, #0]
    c154:	f44f 7782 	mov.w	r7, #260	; 0x104
    c158:	4639      	mov	r1, r7
    c15a:	4628      	mov	r0, r5
    c15c:	1c76      	adds	r6, r6, #1
    c15e:	f004 fd1b 	bl	10b98 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    c162:	b128      	cbz	r0, c170 <MPSL_IRQ_CLOCK_Handler+0x350>
    c164:	e00a      	b.n	c17c <MPSL_IRQ_CLOCK_Handler+0x35c>
    c166:	f44f 713e 	mov.w	r1, #760	; 0x2f8
    c16a:	206d      	movs	r0, #109	; 0x6d
    c16c:	f000 f9d6 	bl	c51c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c170:	f004 fe1f 	bl	10db2 <sym_PHK7RXLFFTGYQNCW3IEEUVLOAYXWQJQYEN3DT7Y>
    c174:	e002      	b.n	c17c <MPSL_IRQ_CLOCK_Handler+0x35c>
    c176:	bf00      	nop
    c178:	f004 fe19 	bl	10dae <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    c17c:	4639      	mov	r1, r7
    c17e:	4628      	mov	r0, r5
    c180:	f004 fd0a 	bl	10b98 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    c184:	2800      	cmp	r0, #0
    c186:	d0f7      	beq.n	c178 <MPSL_IRQ_CLOCK_Handler+0x358>
    c188:	f000 f93e 	bl	c408 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    c18c:	2e00      	cmp	r6, #0
    c18e:	d103      	bne.n	c198 <MPSL_IRQ_CLOCK_Handler+0x378>
    c190:	6820      	ldr	r0, [r4, #0]
    c192:	f020 0010 	bic.w	r0, r0, #16
    c196:	6020      	str	r0, [r4, #0]
    c198:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c19c:	e000ed10 	.word	0xe000ed10

0000c1a0 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>:
    c1a0:	4801      	ldr	r0, [pc, #4]	; (c1a8 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q+0x8>)
    c1a2:	89c0      	ldrh	r0, [r0, #14]
    c1a4:	4770      	bx	lr
    c1a6:	0000      	.short	0x0000
    c1a8:	20000308 	.word	0x20000308

0000c1ac <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>:
    c1ac:	b510      	push	{r4, lr}
    c1ae:	f3ef 8410 	mrs	r4, PRIMASK
    c1b2:	b672      	cpsid	i
    c1b4:	480a      	ldr	r0, [pc, #40]	; (c1e0 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x34>)
    c1b6:	7841      	ldrb	r1, [r0, #1]
    c1b8:	b129      	cbz	r1, c1c6 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x1a>
    c1ba:	7841      	ldrb	r1, [r0, #1]
    c1bc:	1e49      	subs	r1, r1, #1
    c1be:	7041      	strb	r1, [r0, #1]
    c1c0:	7841      	ldrb	r1, [r0, #1]
    c1c2:	b129      	cbz	r1, c1d0 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x24>
    c1c4:	e008      	b.n	c1d8 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    c1c6:	f240 1119 	movw	r1, #281	; 0x119
    c1ca:	206d      	movs	r0, #109	; 0x6d
    c1cc:	f000 f9a6 	bl	c51c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c1d0:	7880      	ldrb	r0, [r0, #2]
    c1d2:	b908      	cbnz	r0, c1d8 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    c1d4:	f000 f938 	bl	c448 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    c1d8:	2c00      	cmp	r4, #0
    c1da:	d100      	bne.n	c1de <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x32>
    c1dc:	b662      	cpsie	i
    c1de:	bd10      	pop	{r4, pc}
    c1e0:	20000308 	.word	0x20000308

0000c1e4 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>:
    c1e4:	b510      	push	{r4, lr}
    c1e6:	f3ef 8410 	mrs	r4, PRIMASK
    c1ea:	b672      	cpsid	i
    c1ec:	4806      	ldr	r0, [pc, #24]	; (c208 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x24>)
    c1ee:	7841      	ldrb	r1, [r0, #1]
    c1f0:	1c49      	adds	r1, r1, #1
    c1f2:	7041      	strb	r1, [r0, #1]
    c1f4:	7840      	ldrb	r0, [r0, #1]
    c1f6:	2801      	cmp	r0, #1
    c1f8:	d101      	bne.n	c1fe <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x1a>
    c1fa:	f004 fce9 	bl	10bd0 <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>
    c1fe:	2c00      	cmp	r4, #0
    c200:	d100      	bne.n	c204 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x20>
    c202:	b662      	cpsie	i
    c204:	bd10      	pop	{r4, pc}
    c206:	0000      	.short	0x0000
    c208:	20000308 	.word	0x20000308

0000c20c <mpsl_clock_hfclk_release>:
    c20c:	4805      	ldr	r0, [pc, #20]	; (c224 <mpsl_clock_hfclk_release+0x18>)
    c20e:	b510      	push	{r4, lr}
    c210:	78c1      	ldrb	r1, [r0, #3]
    c212:	b121      	cbz	r1, c21e <mpsl_clock_hfclk_release+0x12>
    c214:	2100      	movs	r1, #0
    c216:	7101      	strb	r1, [r0, #4]
    c218:	70c1      	strb	r1, [r0, #3]
    c21a:	f7ff ffc7 	bl	c1ac <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    c21e:	2000      	movs	r0, #0
    c220:	bd10      	pop	{r4, pc}
    c222:	0000      	.short	0x0000
    c224:	20000308 	.word	0x20000308

0000c228 <mpsl_clock_hfclk_request>:
    c228:	b570      	push	{r4, r5, r6, lr}
    c22a:	4c0c      	ldr	r4, [pc, #48]	; (c25c <mpsl_clock_hfclk_request+0x34>)
    c22c:	78e1      	ldrb	r1, [r4, #3]
    c22e:	b961      	cbnz	r1, c24a <mpsl_clock_hfclk_request+0x22>
    c230:	2501      	movs	r5, #1
    c232:	70e5      	strb	r5, [r4, #3]
    c234:	61e0      	str	r0, [r4, #28]
    c236:	f7ff ffd5 	bl	c1e4 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    c23a:	f000 f8f7 	bl	c42c <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    c23e:	b130      	cbz	r0, c24e <mpsl_clock_hfclk_request+0x26>
    c240:	69e0      	ldr	r0, [r4, #28]
    c242:	b110      	cbz	r0, c24a <mpsl_clock_hfclk_request+0x22>
    c244:	4780      	blx	r0
    c246:	2000      	movs	r0, #0
    c248:	61e0      	str	r0, [r4, #28]
    c24a:	2000      	movs	r0, #0
    c24c:	bd70      	pop	{r4, r5, r6, pc}
    c24e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    c252:	7125      	strb	r5, [r4, #4]
    c254:	f8c0 5304 	str.w	r5, [r0, #772]	; 0x304
    c258:	e7f7      	b.n	c24a <mpsl_clock_hfclk_request+0x22>
    c25a:	0000      	.short	0x0000
    c25c:	20000308 	.word	0x20000308

0000c260 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>:
    c260:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c264:	0005      	movs	r5, r0
    c266:	f06f 0015 	mvn.w	r0, #21
    c26a:	d03f      	beq.n	c2ec <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    c26c:	7829      	ldrb	r1, [r5, #0]
    c26e:	2904      	cmp	r1, #4
    c270:	d83c      	bhi.n	c2ec <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    c272:	2900      	cmp	r1, #0
    c274:	7869      	ldrb	r1, [r5, #1]
    c276:	d03b      	beq.n	c2f0 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x90>
    c278:	2900      	cmp	r1, #0
    c27a:	d137      	bne.n	c2ec <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    c27c:	78a9      	ldrb	r1, [r5, #2]
    c27e:	2900      	cmp	r1, #0
    c280:	d134      	bne.n	c2ec <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    c282:	2000      	movs	r0, #0
    c284:	f004 fc77 	bl	10b76 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x34>
    c288:	2000      	movs	r0, #0
    c28a:	f004 fc67 	bl	10b5c <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x1a>
    c28e:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
    c292:	f04f 31ff 	mov.w	r1, #4294967295
    c296:	f8c8 1308 	str.w	r1, [r8, #776]	; 0x308
    c29a:	2600      	movs	r6, #0
    c29c:	f8c8 6100 	str.w	r6, [r8, #256]	; 0x100
    c2a0:	f8c8 6104 	str.w	r6, [r8, #260]	; 0x104
    c2a4:	f8c8 610c 	str.w	r6, [r8, #268]	; 0x10c
    c2a8:	f8c8 6110 	str.w	r6, [r8, #272]	; 0x110
    c2ac:	4c14      	ldr	r4, [pc, #80]	; (c300 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0xa0>)
    c2ae:	7066      	strb	r6, [r4, #1]
    c2b0:	88a8      	ldrh	r0, [r5, #4]
    c2b2:	81a0      	strh	r0, [r4, #12]
    c2b4:	f004 fc83 	bl	10bbe <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>
    c2b8:	2701      	movs	r7, #1
    c2ba:	b108      	cbz	r0, c2c0 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x60>
    c2bc:	70e7      	strb	r7, [r4, #3]
    c2be:	7067      	strb	r7, [r4, #1]
    c2c0:	2101      	movs	r1, #1
    c2c2:	4640      	mov	r0, r8
    c2c4:	f004 fc6d 	bl	10ba2 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x60>
    c2c8:	b108      	cbz	r0, c2ce <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x6e>
    c2ca:	f000 f8a9 	bl	c420 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    c2ce:	f240 50f5 	movw	r0, #1525	; 0x5f5
    c2d2:	81e0      	strh	r0, [r4, #14]
    c2d4:	4628      	mov	r0, r5
    c2d6:	f7ff fe8d 	bl	bff4 <MPSL_IRQ_CLOCK_Handler+0x1d4>
    c2da:	7267      	strb	r7, [r4, #9]
    c2dc:	2000      	movs	r0, #0
    c2de:	f004 fc3d 	bl	10b5c <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x1a>
    c2e2:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    c2e6:	4630      	mov	r0, r6
    c2e8:	f8c1 7100 	str.w	r7, [r1, #256]	; 0x100
    c2ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c2f0:	2900      	cmp	r1, #0
    c2f2:	d0fb      	beq.n	c2ec <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    c2f4:	2920      	cmp	r1, #32
    c2f6:	d8f9      	bhi.n	c2ec <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    c2f8:	78a9      	ldrb	r1, [r5, #2]
    c2fa:	2921      	cmp	r1, #33	; 0x21
    c2fc:	d9c1      	bls.n	c282 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x22>
    c2fe:	e7f5      	b.n	c2ec <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    c300:	20000308 	.word	0x20000308

0000c304 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>:
    c304:	4801      	ldr	r0, [pc, #4]	; (c30c <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY+0x8>)
    c306:	8980      	ldrh	r0, [r0, #12]
    c308:	4770      	bx	lr
    c30a:	0000      	.short	0x0000
    c30c:	20000308 	.word	0x20000308

0000c310 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA>:
    c310:	b510      	push	{r4, lr}
    c312:	480d      	ldr	r0, [pc, #52]	; (c348 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    c314:	f004 fcb4 	bl	10c80 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    c318:	490b      	ldr	r1, [pc, #44]	; (c348 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    c31a:	3908      	subs	r1, #8
    c31c:	b148      	cbz	r0, c332 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x22>
    c31e:	2001      	movs	r0, #1
    c320:	7008      	strb	r0, [r1, #0]
    c322:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    c326:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    c32a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c32e:	f7ff bf59 	b.w	c1e4 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    c332:	7a88      	ldrb	r0, [r1, #10]
    c334:	2802      	cmp	r0, #2
    c336:	d101      	bne.n	c33c <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x2c>
    c338:	f7ff fdb6 	bl	bea8 <MPSL_IRQ_CLOCK_Handler+0x88>
    c33c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c340:	4801      	ldr	r0, [pc, #4]	; (c348 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    c342:	f004 bcb4 	b.w	10cae <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    c346:	0000      	.short	0x0000
    c348:	20000310 	.word	0x20000310

0000c34c <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>:
    c34c:	4802      	ldr	r0, [pc, #8]	; (c358 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xc>)
    c34e:	7a80      	ldrb	r0, [r0, #10]
    c350:	2800      	cmp	r0, #0
    c352:	d000      	beq.n	c356 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xa>
    c354:	2001      	movs	r0, #1
    c356:	4770      	bx	lr
    c358:	20000308 	.word	0x20000308

0000c35c <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>:
    c35c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c35e:	4d1f      	ldr	r5, [pc, #124]	; (c3dc <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    c360:	7ae8      	ldrb	r0, [r5, #11]
    c362:	2800      	cmp	r0, #0
    c364:	d10f      	bne.n	c386 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    c366:	7e28      	ldrb	r0, [r5, #24]
    c368:	f000 0003 	and.w	r0, r0, #3
    c36c:	f004 fc35 	bl	10bda <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    c370:	2800      	cmp	r0, #0
    c372:	d008      	beq.n	c386 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    c374:	f3ef 8110 	mrs	r1, PRIMASK
    c378:	b672      	cpsid	i
    c37a:	f7ff ffe7 	bl	c34c <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    c37e:	b118      	cbz	r0, c388 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2c>
    c380:	2900      	cmp	r1, #0
    c382:	d100      	bne.n	c386 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    c384:	b662      	cpsie	i
    c386:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c388:	2601      	movs	r6, #1
    c38a:	72ae      	strb	r6, [r5, #10]
    c38c:	b901      	cbnz	r1, c390 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x34>
    c38e:	b662      	cpsie	i
    c390:	2018      	movs	r0, #24
    c392:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    c396:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    c39a:	61a6      	str	r6, [r4, #24]
    c39c:	f44f 7020 	mov.w	r0, #640	; 0x280
    c3a0:	f8ad 0000 	strh.w	r0, [sp]
    c3a4:	f8bd 0000 	ldrh.w	r0, [sp]
    c3a8:	1e41      	subs	r1, r0, #1
    c3aa:	f8ad 1000 	strh.w	r1, [sp]
    c3ae:	d2f9      	bcs.n	c3a4 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x48>
    c3b0:	2700      	movs	r7, #0
    c3b2:	f8c4 710c 	str.w	r7, [r4, #268]	; 0x10c
    c3b6:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
    c3ba:	4808      	ldr	r0, [pc, #32]	; (c3dc <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    c3bc:	3008      	adds	r0, #8
    c3be:	f004 fc72 	bl	10ca6 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    c3c2:	702f      	strb	r7, [r5, #0]
    c3c4:	f7ff fd70 	bl	bea8 <MPSL_IRQ_CLOCK_Handler+0x88>
    c3c8:	6166      	str	r6, [r4, #20]
    c3ca:	7968      	ldrb	r0, [r5, #5]
    c3cc:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    c3d0:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    c3d4:	2018      	movs	r0, #24
    c3d6:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    c3da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c3dc:	20000308 	.word	0x20000308

0000c3e0 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>:
    c3e0:	4602      	mov	r2, r0
    c3e2:	b510      	push	{r4, lr}
    c3e4:	2000      	movs	r0, #0
    c3e6:	2900      	cmp	r1, #0
    c3e8:	d00a      	beq.n	c400 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x20>
    c3ea:	2a00      	cmp	r2, #0
    c3ec:	d008      	beq.n	c400 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x20>
    c3ee:	fba2 0101 	umull	r0, r1, r2, r1
    c3f2:	1e40      	subs	r0, r0, #1
    c3f4:	4a03      	ldr	r2, [pc, #12]	; (c404 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x24>)
    c3f6:	f141 31ff 	adc.w	r1, r1, #4294967295
    c3fa:	f004 fcdc 	bl	10db6 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA>
    c3fe:	1c40      	adds	r0, r0, #1
    c400:	bd10      	pop	{r4, pc}
    c402:	0000      	.short	0x0000
    c404:	000f4240 	.word	0x000f4240

0000c408 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>:
    c408:	b510      	push	{r4, lr}
    c40a:	4c04      	ldr	r4, [pc, #16]	; (c41c <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x14>)
    c40c:	7e20      	ldrb	r0, [r4, #24]
    c40e:	f000 0003 	and.w	r0, r0, #3
    c412:	f004 fbe2 	bl	10bda <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    c416:	2800      	cmp	r0, #0
    c418:	d0f8      	beq.n	c40c <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x4>
    c41a:	bd10      	pop	{r4, pc}
    c41c:	20000308 	.word	0x20000308

0000c420 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>:
    c420:	4901      	ldr	r1, [pc, #4]	; (c428 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA+0x8>)
    c422:	2001      	movs	r0, #1
    c424:	7008      	strb	r0, [r1, #0]
    c426:	4770      	bx	lr
    c428:	20000381 	.word	0x20000381

0000c42c <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>:
    c42c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    c430:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    c434:	b918      	cbnz	r0, c43e <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x12>
    c436:	4803      	ldr	r0, [pc, #12]	; (c444 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x18>)
    c438:	7800      	ldrb	r0, [r0, #0]
    c43a:	2800      	cmp	r0, #0
    c43c:	d000      	beq.n	c440 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x14>
    c43e:	2001      	movs	r0, #1
    c440:	4770      	bx	lr
    c442:	0000      	.short	0x0000
    c444:	20000381 	.word	0x20000381

0000c448 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>:
    c448:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    c44c:	2101      	movs	r1, #1
    c44e:	6041      	str	r1, [r0, #4]
    c450:	2100      	movs	r1, #0
    c452:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    c456:	4801      	ldr	r0, [pc, #4]	; (c45c <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ+0x14>)
    c458:	7001      	strb	r1, [r0, #0]
    c45a:	4770      	bx	lr
    c45c:	20000381 	.word	0x20000381

0000c460 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>:
    c460:	4802      	ldr	r0, [pc, #8]	; (c46c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0xc>)
    c462:	6800      	ldr	r0, [r0, #0]
    c464:	f000 0003 	and.w	r0, r0, #3
    c468:	4770      	bx	lr
    c46a:	0000      	.short	0x0000
    c46c:	4000041c 	.word	0x4000041c
    c470:	b510      	push	{r4, lr}
    c472:	b131      	cbz	r1, c482 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x22>
    c474:	2901      	cmp	r1, #1
    c476:	d007      	beq.n	c488 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x28>
    c478:	f240 3102 	movw	r1, #770	; 0x302
    c47c:	a005      	add	r0, pc, #20	; (adr r0, c494 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x34>)
    c47e:	f000 f821 	bl	c4c4 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
    c482:	f8d0 0414 	ldr.w	r0, [r0, #1044]	; 0x414
    c486:	e001      	b.n	c48c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x2c>
    c488:	f8d0 0408 	ldr.w	r0, [r0, #1032]	; 0x408
    c48c:	f000 0001 	and.w	r0, r0, #1
    c490:	bd10      	pop	{r4, pc}
    c492:	0000      	.short	0x0000
    c494:	5f66726e 	.word	0x5f66726e
    c498:	636f6c63 	.word	0x636f6c63
    c49c:	00682e6b 	.word	0x00682e6b
    c4a0:	f3bf 8f4f 	dsb	sy
    c4a4:	4805      	ldr	r0, [pc, #20]	; (c4bc <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x5c>)
    c4a6:	6801      	ldr	r1, [r0, #0]
    c4a8:	4a05      	ldr	r2, [pc, #20]	; (c4c0 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x60>)
    c4aa:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    c4ae:	4311      	orrs	r1, r2
    c4b0:	6001      	str	r1, [r0, #0]
    c4b2:	f3bf 8f4f 	dsb	sy
    c4b6:	bf00      	nop
    c4b8:	e7fd      	b.n	c4b6 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x56>
    c4ba:	0000      	.short	0x0000
    c4bc:	e000ed0c 	.word	0xe000ed0c
    c4c0:	05fa0004 	.word	0x05fa0004

0000c4c4 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>:
    c4c4:	b672      	cpsid	i
    c4c6:	4a03      	ldr	r2, [pc, #12]	; (c4d4 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x10>)
    c4c8:	6852      	ldr	r2, [r2, #4]
    c4ca:	b102      	cbz	r2, c4ce <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0xa>
    c4cc:	4790      	blx	r2
    c4ce:	f7ff ffe7 	bl	c4a0 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    c4d2:	0000      	.short	0x0000
    c4d4:	20000328 	.word	0x20000328
    c4d8:	4806      	ldr	r0, [pc, #24]	; (c4f4 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x30>)
    c4da:	b510      	push	{r4, lr}
    c4dc:	2100      	movs	r1, #0
    c4de:	6001      	str	r1, [r0, #0]
    c4e0:	2101      	movs	r1, #1
    c4e2:	6001      	str	r1, [r0, #0]
    c4e4:	4608      	mov	r0, r1
    c4e6:	f004 fb9f 	bl	10c28 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    c4ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c4ee:	2001      	movs	r0, #1
    c4f0:	f004 bb8d 	b.w	10c0e <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    c4f4:	40001ffc 	.word	0x40001ffc
    c4f8:	4807      	ldr	r0, [pc, #28]	; (c518 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x54>)
    c4fa:	b510      	push	{r4, lr}
    c4fc:	2101      	movs	r1, #1
    c4fe:	6041      	str	r1, [r0, #4]
    c500:	1e89      	subs	r1, r1, #2
    c502:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    c506:	200c      	movs	r0, #12
    c508:	f004 fb8e 	bl	10c28 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    c50c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c510:	200c      	movs	r0, #12
    c512:	f004 bb7c 	b.w	10c0e <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    c516:	0000      	.short	0x0000
    c518:	4000c000 	.word	0x4000c000

0000c51c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>:
    c51c:	b50e      	push	{r1, r2, r3, lr}
    c51e:	b672      	cpsid	i
    c520:	4a0f      	ldr	r2, [pc, #60]	; (c560 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x44>)
    c522:	6855      	ldr	r5, [r2, #4]
    c524:	b1d5      	cbz	r5, c55c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x40>
    c526:	2200      	movs	r2, #0
    c528:	4603      	mov	r3, r0
    c52a:	466e      	mov	r6, sp
    c52c:	240a      	movs	r4, #10
    c52e:	e003      	b.n	c538 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x1c>
    c530:	fbb0 f0f4 	udiv	r0, r0, r4
    c534:	1c52      	adds	r2, r2, #1
    c536:	b2d2      	uxtb	r2, r2
    c538:	2800      	cmp	r0, #0
    c53a:	d1f9      	bne.n	c530 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x14>
    c53c:	54b0      	strb	r0, [r6, r2]
    c53e:	e009      	b.n	c554 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x38>
    c540:	fbb3 f0f4 	udiv	r0, r3, r4
    c544:	fb04 3010 	mls	r0, r4, r0, r3
    c548:	fbb3 f3f4 	udiv	r3, r3, r4
    c54c:	1e52      	subs	r2, r2, #1
    c54e:	b2d2      	uxtb	r2, r2
    c550:	3030      	adds	r0, #48	; 0x30
    c552:	54b0      	strb	r0, [r6, r2]
    c554:	2a00      	cmp	r2, #0
    c556:	d1f3      	bne.n	c540 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x24>
    c558:	4630      	mov	r0, r6
    c55a:	47a8      	blx	r5
    c55c:	f7ff ffa0 	bl	c4a0 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    c560:	20000328 	.word	0x20000328

0000c564 <mpsl_init>:
    c564:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c568:	4c18      	ldr	r4, [pc, #96]	; (c5cc <mpsl_init+0x68>)
    c56a:	4606      	mov	r6, r0
    c56c:	4617      	mov	r7, r2
    c56e:	7860      	ldrb	r0, [r4, #1]
    c570:	460d      	mov	r5, r1
    c572:	b118      	cbz	r0, c57c <mpsl_init+0x18>
    c574:	f04f 30ff 	mov.w	r0, #4294967295
    c578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c57c:	f7fc fc06 	bl	8d8c <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>
    c580:	b906      	cbnz	r6, c584 <mpsl_init+0x20>
    c582:	4e13      	ldr	r6, [pc, #76]	; (c5d0 <mpsl_init+0x6c>)
    c584:	6067      	str	r7, [r4, #4]
    c586:	7025      	strb	r5, [r4, #0]
    c588:	f7ff ffa6 	bl	c4d8 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x14>
    c58c:	f7ff ffb4 	bl	c4f8 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x34>
    c590:	4630      	mov	r0, r6
    c592:	f7ff fe65 	bl	c260 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>
    c596:	0006      	movs	r6, r0
    c598:	d1ee      	bne.n	c578 <mpsl_init+0x14>
    c59a:	f7fe fe45 	bl	b228 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>
    c59e:	f7ff fedd 	bl	c35c <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    c5a2:	f004 faaa 	bl	10afa <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>
    c5a6:	4628      	mov	r0, r5
    c5a8:	f004 fb31 	bl	10c0e <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    c5ac:	2001      	movs	r0, #1
    c5ae:	2d00      	cmp	r5, #0
    c5b0:	db09      	blt.n	c5c6 <mpsl_init+0x62>
    c5b2:	f005 011f 	and.w	r1, r5, #31
    c5b6:	fa00 f101 	lsl.w	r1, r0, r1
    c5ba:	096a      	lsrs	r2, r5, #5
    c5bc:	0092      	lsls	r2, r2, #2
    c5be:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    c5c2:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
    c5c6:	7060      	strb	r0, [r4, #1]
    c5c8:	4630      	mov	r0, r6
    c5ca:	e7d5      	b.n	c578 <mpsl_init+0x14>
    c5cc:	20000328 	.word	0x20000328
    c5d0:	00010c4a 	.word	0x00010c4a

0000c5d4 <mpsl_is_initialized>:
    c5d4:	4801      	ldr	r0, [pc, #4]	; (c5dc <mpsl_is_initialized+0x8>)
    c5d6:	7840      	ldrb	r0, [r0, #1]
    c5d8:	4770      	bx	lr
    c5da:	0000      	.short	0x0000
    c5dc:	20000328 	.word	0x20000328

0000c5e0 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>:
    c5e0:	4807      	ldr	r0, [pc, #28]	; (c600 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x20>)
    c5e2:	f990 0000 	ldrsb.w	r0, [r0]
    c5e6:	2800      	cmp	r0, #0
    c5e8:	db09      	blt.n	c5fe <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x1e>
    c5ea:	f000 021f 	and.w	r2, r0, #31
    c5ee:	2101      	movs	r1, #1
    c5f0:	4091      	lsls	r1, r2
    c5f2:	0940      	lsrs	r0, r0, #5
    c5f4:	0080      	lsls	r0, r0, #2
    c5f6:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    c5fa:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    c5fe:	4770      	bx	lr
    c600:	20000328 	.word	0x20000328

0000c604 <mpsl_temperature_get>:
    c604:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c608:	2601      	movs	r6, #1
    c60a:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    c60e:	0331      	lsls	r1, r6, #12
    c610:	f04f 0800 	mov.w	r8, #0
    c614:	4640      	mov	r0, r8
    c616:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    c61a:	f3bf 8f4f 	dsb	sy
    c61e:	f3bf 8f6f 	isb	sy
    c622:	4c16      	ldr	r4, [pc, #88]	; (c67c <mpsl_temperature_get+0x78>)
    c624:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
    c628:	200c      	movs	r0, #12
    c62a:	f004 fb1c 	bl	10c66 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    c62e:	4d14      	ldr	r5, [pc, #80]	; (c680 <mpsl_temperature_get+0x7c>)
    c630:	6828      	ldr	r0, [r5, #0]
    c632:	43c0      	mvns	r0, r0
    c634:	f340 1700 	sbfx	r7, r0, #4, #1
    c638:	6828      	ldr	r0, [r5, #0]
    c63a:	f040 0010 	orr.w	r0, r0, #16
    c63e:	6028      	str	r0, [r5, #0]
    c640:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    c644:	6026      	str	r6, [r4, #0]
    c646:	1c7f      	adds	r7, r7, #1
    c648:	e002      	b.n	c650 <mpsl_temperature_get+0x4c>
    c64a:	bf00      	nop
    c64c:	f004 fbaf 	bl	10dae <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    c650:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    c654:	2800      	cmp	r0, #0
    c656:	d0f9      	beq.n	c64c <mpsl_temperature_get+0x48>
    c658:	b91f      	cbnz	r7, c662 <mpsl_temperature_get+0x5e>
    c65a:	6828      	ldr	r0, [r5, #0]
    c65c:	f020 0010 	bic.w	r0, r0, #16
    c660:	6028      	str	r0, [r5, #0]
    c662:	4808      	ldr	r0, [pc, #32]	; (c684 <mpsl_temperature_get+0x80>)
    c664:	6805      	ldr	r5, [r0, #0]
    c666:	6066      	str	r6, [r4, #4]
    c668:	f8c4 6308 	str.w	r6, [r4, #776]	; 0x308
    c66c:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    c670:	200c      	movs	r0, #12
    c672:	f004 faf8 	bl	10c66 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    c676:	4628      	mov	r0, r5
    c678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c67c:	4000c000 	.word	0x4000c000
    c680:	e000ed10 	.word	0xe000ed10
    c684:	4000c508 	.word	0x4000c508

0000c688 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>:
    c688:	b510      	push	{r4, lr}
    c68a:	4602      	mov	r2, r0
    c68c:	2005      	movs	r0, #5
    c68e:	490c      	ldr	r1, [pc, #48]	; (c6c0 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x38>)
    c690:	e004      	b.n	c69c <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x14>
    c692:	bf00      	nop
    c694:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    c698:	791b      	ldrb	r3, [r3, #4]
    c69a:	b133      	cbz	r3, c6aa <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x22>
    c69c:	1e40      	subs	r0, r0, #1
    c69e:	b2c0      	uxtb	r0, r0
    c6a0:	d2f8      	bcs.n	c694 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0xc>
    c6a2:	2148      	movs	r1, #72	; 0x48
    c6a4:	2069      	movs	r0, #105	; 0x69
    c6a6:	f7ff ff39 	bl	c51c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c6aa:	f841 2030 	str.w	r2, [r1, r0, lsl #3]
    c6ae:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    c6b2:	2200      	movs	r2, #0
    c6b4:	714a      	strb	r2, [r1, #5]
    c6b6:	718a      	strb	r2, [r1, #6]
    c6b8:	2201      	movs	r2, #1
    c6ba:	710a      	strb	r2, [r1, #4]
    c6bc:	bd10      	pop	{r4, pc}
    c6be:	0000      	.short	0x0000
    c6c0:	20001078 	.word	0x20001078

0000c6c4 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>:
    c6c4:	b510      	push	{r4, lr}
    c6c6:	2805      	cmp	r0, #5
    c6c8:	d301      	bcc.n	c6ce <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0xa>
    c6ca:	2158      	movs	r1, #88	; 0x58
    c6cc:	e006      	b.n	c6dc <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x18>
    c6ce:	490a      	ldr	r1, [pc, #40]	; (c6f8 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x34>)
    c6d0:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    c6d4:	7901      	ldrb	r1, [r0, #4]
    c6d6:	2901      	cmp	r1, #1
    c6d8:	d003      	beq.n	c6e2 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x1e>
    c6da:	2159      	movs	r1, #89	; 0x59
    c6dc:	2069      	movs	r0, #105	; 0x69
    c6de:	f7ff ff1d 	bl	c51c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c6e2:	7941      	ldrb	r1, [r0, #5]
    c6e4:	7982      	ldrb	r2, [r0, #6]
    c6e6:	1c49      	adds	r1, r1, #1
    c6e8:	b2c9      	uxtb	r1, r1
    c6ea:	428a      	cmp	r2, r1
    c6ec:	d000      	beq.n	c6f0 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x2c>
    c6ee:	7141      	strb	r1, [r0, #5]
    c6f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c6f4:	f7ff bf74 	b.w	c5e0 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>
    c6f8:	20001078 	.word	0x20001078

0000c6fc <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY>:
    c6fc:	b510      	push	{r4, lr}
    c6fe:	2805      	cmp	r0, #5
    c700:	d303      	bcc.n	c70a <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY+0xe>
    c702:	214f      	movs	r1, #79	; 0x4f
    c704:	2069      	movs	r0, #105	; 0x69
    c706:	f7ff ff09 	bl	c51c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c70a:	4a03      	ldr	r2, [pc, #12]	; (c718 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY+0x1c>)
    c70c:	2100      	movs	r1, #0
    c70e:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
    c712:	7101      	strb	r1, [r0, #4]
    c714:	bd10      	pop	{r4, pc}
    c716:	0000      	.short	0x0000
    c718:	20001078 	.word	0x20001078

0000c71c <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>:
    c71c:	b570      	push	{r4, r5, r6, lr}
    c71e:	2505      	movs	r5, #5
    c720:	4e0e      	ldr	r6, [pc, #56]	; (c75c <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x40>)
    c722:	4c0f      	ldr	r4, [pc, #60]	; (c760 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x44>)
    c724:	e016      	b.n	c754 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    c726:	7821      	ldrb	r1, [r4, #0]
    c728:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
    c72c:	7902      	ldrb	r2, [r0, #4]
    c72e:	2a01      	cmp	r2, #1
    c730:	d108      	bne.n	c744 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    c732:	7942      	ldrb	r2, [r0, #5]
    c734:	7983      	ldrb	r3, [r0, #6]
    c736:	429a      	cmp	r2, r3
    c738:	d004      	beq.n	c744 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    c73a:	7942      	ldrb	r2, [r0, #5]
    c73c:	7182      	strb	r2, [r0, #6]
    c73e:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
    c742:	4780      	blx	r0
    c744:	7820      	ldrb	r0, [r4, #0]
    c746:	1c40      	adds	r0, r0, #1
    c748:	b2c0      	uxtb	r0, r0
    c74a:	7020      	strb	r0, [r4, #0]
    c74c:	2805      	cmp	r0, #5
    c74e:	d301      	bcc.n	c754 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    c750:	2000      	movs	r0, #0
    c752:	7020      	strb	r0, [r4, #0]
    c754:	1e6d      	subs	r5, r5, #1
    c756:	b2ed      	uxtb	r5, r5
    c758:	d2e5      	bcs.n	c726 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0xa>
    c75a:	bd70      	pop	{r4, r5, r6, pc}
    c75c:	20001078 	.word	0x20001078
    c760:	20000382 	.word	0x20000382

0000c764 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>:
    c764:	b500      	push	{lr}
    c766:	f004 faad 	bl	10cc4 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    c76a:	b940      	cbnz	r0, c77e <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    c76c:	f004 fab4 	bl	10cd8 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    c770:	b928      	cbnz	r0, c77e <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    c772:	f004 fac8 	bl	10d06 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    c776:	b910      	cbnz	r0, c77e <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    c778:	f004 fad9 	bl	10d2e <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    c77c:	b108      	cbz	r0, c782 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1e>
    c77e:	4802      	ldr	r0, [pc, #8]	; (c788 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x24>)
    c780:	bd00      	pop	{pc}
    c782:	4802      	ldr	r0, [pc, #8]	; (c78c <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x28>)
    c784:	bd00      	pop	{pc}
    c786:	0000      	.short	0x0000
    c788:	4000050c 	.word	0x4000050c
    c78c:	4001e700 	.word	0x4001e700
    c790:	b510      	push	{r4, lr}
    c792:	f004 facc 	bl	10d2e <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    c796:	b330      	cbz	r0, c7e6 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x82>
    c798:	f3ef 8010 	mrs	r0, PRIMASK
    c79c:	b1c8      	cbz	r0, c7d2 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x6e>
    c79e:	2100      	movs	r1, #0
    c7a0:	b672      	cpsid	i
    c7a2:	4812      	ldr	r0, [pc, #72]	; (c7ec <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x88>)
    c7a4:	6802      	ldr	r2, [r0, #0]
    c7a6:	6803      	ldr	r3, [r0, #0]
    c7a8:	f3c2 1200 	ubfx	r2, r2, #4, #1
    c7ac:	f043 0310 	orr.w	r3, r3, #16
    c7b0:	6003      	str	r3, [r0, #0]
    c7b2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    c7b6:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    c7ba:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
    c7be:	431c      	orrs	r4, r3
    c7c0:	d000      	beq.n	c7c4 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x60>
    c7c2:	bf40      	sev
    c7c4:	bf20      	wfe
    c7c6:	bf00      	nop
    c7c8:	bf00      	nop
    c7ca:	bf00      	nop
    c7cc:	bf00      	nop
    c7ce:	b112      	cbz	r2, c7d6 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x72>
    c7d0:	e005      	b.n	c7de <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x7a>
    c7d2:	2101      	movs	r1, #1
    c7d4:	e7e4      	b.n	c7a0 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x3c>
    c7d6:	6802      	ldr	r2, [r0, #0]
    c7d8:	f022 0210 	bic.w	r2, r2, #16
    c7dc:	6002      	str	r2, [r0, #0]
    c7de:	2900      	cmp	r1, #0
    c7e0:	d000      	beq.n	c7e4 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x80>
    c7e2:	b662      	cpsie	i
    c7e4:	bd10      	pop	{r4, pc}
    c7e6:	bf20      	wfe
    c7e8:	bd10      	pop	{r4, pc}
    c7ea:	0000      	.short	0x0000
    c7ec:	e000ed10 	.word	0xe000ed10

0000c7f0 <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q>:
    c7f0:	4901      	ldr	r1, [pc, #4]	; (c7f8 <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q+0x8>)
    c7f2:	2001      	movs	r0, #1
    c7f4:	7088      	strb	r0, [r1, #2]
    c7f6:	4770      	bx	lr
    c7f8:	20000330 	.word	0x20000330

0000c7fc <sym_NIQMZN22R7GGCSNM3BZ25GTCR6D457XB3DIUGWA>:
    c7fc:	00011011 00011049 00011033 00011021     ....I...3...!...
    c80c:	0001102d 0001101b 0001100f 0001100d     -...............
    c81c:	00011045 00011039 00011027 00011015     E...9...'.......
    c82c:	00011007 00010fff 00011003 00010ff9     ................

0000c83c <mpsl_fem_disable>:
    c83c:	4801      	ldr	r0, [pc, #4]	; (c844 <mpsl_fem_disable+0x8>)
    c83e:	6800      	ldr	r0, [r0, #0]
    c840:	6800      	ldr	r0, [r0, #0]
    c842:	4700      	bx	r0
    c844:	20000344 	.word	0x20000344

0000c848 <mpsl_fem_lna_configuration_clear>:
    c848:	4801      	ldr	r0, [pc, #4]	; (c850 <mpsl_fem_lna_configuration_clear+0x8>)
    c84a:	6800      	ldr	r0, [r0, #0]
    c84c:	6940      	ldr	r0, [r0, #20]
    c84e:	4700      	bx	r0
    c850:	20000344 	.word	0x20000344

0000c854 <mpsl_fem_lna_configuration_set>:
    c854:	4a01      	ldr	r2, [pc, #4]	; (c85c <mpsl_fem_lna_configuration_set+0x8>)
    c856:	6812      	ldr	r2, [r2, #0]
    c858:	68d2      	ldr	r2, [r2, #12]
    c85a:	4710      	bx	r2
    c85c:	20000344 	.word	0x20000344

0000c860 <mpsl_fem_lna_is_configured>:
    c860:	4901      	ldr	r1, [pc, #4]	; (c868 <mpsl_fem_lna_is_configured+0x8>)
    c862:	6809      	ldr	r1, [r1, #0]
    c864:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    c866:	4708      	bx	r1
    c868:	20000344 	.word	0x20000344

0000c86c <mpsl_fem_pa_configuration_clear>:
    c86c:	4801      	ldr	r0, [pc, #4]	; (c874 <mpsl_fem_pa_configuration_clear+0x8>)
    c86e:	6800      	ldr	r0, [r0, #0]
    c870:	6900      	ldr	r0, [r0, #16]
    c872:	4700      	bx	r0
    c874:	20000344 	.word	0x20000344

0000c878 <mpsl_fem_pa_configuration_set>:
    c878:	4a01      	ldr	r2, [pc, #4]	; (c880 <mpsl_fem_pa_configuration_set+0x8>)
    c87a:	6812      	ldr	r2, [r2, #0]
    c87c:	6892      	ldr	r2, [r2, #8]
    c87e:	4710      	bx	r2
    c880:	20000344 	.word	0x20000344

0000c884 <mpsl_fem_pa_gain_set>:
    c884:	4901      	ldr	r1, [pc, #4]	; (c88c <mpsl_fem_pa_gain_set+0x8>)
    c886:	6809      	ldr	r1, [r1, #0]
    c888:	6a49      	ldr	r1, [r1, #36]	; 0x24
    c88a:	4708      	bx	r1
    c88c:	20000344 	.word	0x20000344

0000c890 <mpsl_fem_pa_is_configured>:
    c890:	4901      	ldr	r1, [pc, #4]	; (c898 <mpsl_fem_pa_is_configured+0x8>)
    c892:	6809      	ldr	r1, [r1, #0]
    c894:	6a89      	ldr	r1, [r1, #40]	; 0x28
    c896:	4708      	bx	r1
    c898:	20000344 	.word	0x20000344

0000c89c <mpsl_fem_tx_power_split>:
    c89c:	b430      	push	{r4, r5}
    c89e:	4c03      	ldr	r4, [pc, #12]	; (c8ac <mpsl_fem_tx_power_split+0x10>)
    c8a0:	6824      	ldr	r4, [r4, #0]
    c8a2:	6864      	ldr	r4, [r4, #4]
    c8a4:	46a4      	mov	ip, r4
    c8a6:	bc30      	pop	{r4, r5}
    c8a8:	4760      	bx	ip
    c8aa:	0000      	.short	0x0000
    c8ac:	20000344 	.word	0x20000344

0000c8b0 <mpsl_fem_device_config_254_apply_get>:
    c8b0:	4801      	ldr	r0, [pc, #4]	; (c8b8 <mpsl_fem_device_config_254_apply_get+0x8>)
    c8b2:	7800      	ldrb	r0, [r0, #0]
    c8b4:	4770      	bx	lr
    c8b6:	0000      	.short	0x0000
    c8b8:	20000383 	.word	0x20000383

0000c8bc <__udivmoddi4>:
    c8bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c8c0:	4686      	mov	lr, r0
    c8c2:	468c      	mov	ip, r1
    c8c4:	4608      	mov	r0, r1
    c8c6:	9e08      	ldr	r6, [sp, #32]
    c8c8:	4615      	mov	r5, r2
    c8ca:	4674      	mov	r4, lr
    c8cc:	4619      	mov	r1, r3
    c8ce:	2b00      	cmp	r3, #0
    c8d0:	f040 80c2 	bne.w	ca58 <__udivmoddi4+0x19c>
    c8d4:	4285      	cmp	r5, r0
    c8d6:	fab2 f282 	clz	r2, r2
    c8da:	d945      	bls.n	c968 <__udivmoddi4+0xac>
    c8dc:	b14a      	cbz	r2, c8f2 <__udivmoddi4+0x36>
    c8de:	f1c2 0320 	rsb	r3, r2, #32
    c8e2:	fa00 fc02 	lsl.w	ip, r0, r2
    c8e6:	fa2e f303 	lsr.w	r3, lr, r3
    c8ea:	4095      	lsls	r5, r2
    c8ec:	ea43 0c0c 	orr.w	ip, r3, ip
    c8f0:	4094      	lsls	r4, r2
    c8f2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    c8f6:	b2a8      	uxth	r0, r5
    c8f8:	fbbc f8fe 	udiv	r8, ip, lr
    c8fc:	0c23      	lsrs	r3, r4, #16
    c8fe:	fb0e cc18 	mls	ip, lr, r8, ip
    c902:	fb08 f900 	mul.w	r9, r8, r0
    c906:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    c90a:	4599      	cmp	r9, r3
    c90c:	d928      	bls.n	c960 <__udivmoddi4+0xa4>
    c90e:	18eb      	adds	r3, r5, r3
    c910:	f108 37ff 	add.w	r7, r8, #4294967295
    c914:	d204      	bcs.n	c920 <__udivmoddi4+0x64>
    c916:	4599      	cmp	r9, r3
    c918:	d902      	bls.n	c920 <__udivmoddi4+0x64>
    c91a:	f1a8 0702 	sub.w	r7, r8, #2
    c91e:	442b      	add	r3, r5
    c920:	eba3 0309 	sub.w	r3, r3, r9
    c924:	b2a4      	uxth	r4, r4
    c926:	fbb3 fcfe 	udiv	ip, r3, lr
    c92a:	fb0e 331c 	mls	r3, lr, ip, r3
    c92e:	fb0c f000 	mul.w	r0, ip, r0
    c932:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    c936:	42a0      	cmp	r0, r4
    c938:	d914      	bls.n	c964 <__udivmoddi4+0xa8>
    c93a:	192c      	adds	r4, r5, r4
    c93c:	f10c 33ff 	add.w	r3, ip, #4294967295
    c940:	d204      	bcs.n	c94c <__udivmoddi4+0x90>
    c942:	42a0      	cmp	r0, r4
    c944:	d902      	bls.n	c94c <__udivmoddi4+0x90>
    c946:	f1ac 0302 	sub.w	r3, ip, #2
    c94a:	442c      	add	r4, r5
    c94c:	1a24      	subs	r4, r4, r0
    c94e:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
    c952:	b11e      	cbz	r6, c95c <__udivmoddi4+0xa0>
    c954:	40d4      	lsrs	r4, r2
    c956:	2300      	movs	r3, #0
    c958:	6034      	str	r4, [r6, #0]
    c95a:	6073      	str	r3, [r6, #4]
    c95c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c960:	4647      	mov	r7, r8
    c962:	e7dd      	b.n	c920 <__udivmoddi4+0x64>
    c964:	4663      	mov	r3, ip
    c966:	e7f1      	b.n	c94c <__udivmoddi4+0x90>
    c968:	bb92      	cbnz	r2, c9d0 <__udivmoddi4+0x114>
    c96a:	1b43      	subs	r3, r0, r5
    c96c:	2101      	movs	r1, #1
    c96e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    c972:	b2af      	uxth	r7, r5
    c974:	fbb3 fcfe 	udiv	ip, r3, lr
    c978:	0c20      	lsrs	r0, r4, #16
    c97a:	fb0e 331c 	mls	r3, lr, ip, r3
    c97e:	fb0c f807 	mul.w	r8, ip, r7
    c982:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    c986:	4598      	cmp	r8, r3
    c988:	d962      	bls.n	ca50 <__udivmoddi4+0x194>
    c98a:	18eb      	adds	r3, r5, r3
    c98c:	f10c 30ff 	add.w	r0, ip, #4294967295
    c990:	d204      	bcs.n	c99c <__udivmoddi4+0xe0>
    c992:	4598      	cmp	r8, r3
    c994:	d902      	bls.n	c99c <__udivmoddi4+0xe0>
    c996:	f1ac 0002 	sub.w	r0, ip, #2
    c99a:	442b      	add	r3, r5
    c99c:	eba3 0308 	sub.w	r3, r3, r8
    c9a0:	b2a4      	uxth	r4, r4
    c9a2:	fbb3 fcfe 	udiv	ip, r3, lr
    c9a6:	fb0e 331c 	mls	r3, lr, ip, r3
    c9aa:	fb0c f707 	mul.w	r7, ip, r7
    c9ae:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    c9b2:	42a7      	cmp	r7, r4
    c9b4:	d94e      	bls.n	ca54 <__udivmoddi4+0x198>
    c9b6:	192c      	adds	r4, r5, r4
    c9b8:	f10c 33ff 	add.w	r3, ip, #4294967295
    c9bc:	d204      	bcs.n	c9c8 <__udivmoddi4+0x10c>
    c9be:	42a7      	cmp	r7, r4
    c9c0:	d902      	bls.n	c9c8 <__udivmoddi4+0x10c>
    c9c2:	f1ac 0302 	sub.w	r3, ip, #2
    c9c6:	442c      	add	r4, r5
    c9c8:	1be4      	subs	r4, r4, r7
    c9ca:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    c9ce:	e7c0      	b.n	c952 <__udivmoddi4+0x96>
    c9d0:	f1c2 0320 	rsb	r3, r2, #32
    c9d4:	fa20 f103 	lsr.w	r1, r0, r3
    c9d8:	4095      	lsls	r5, r2
    c9da:	4090      	lsls	r0, r2
    c9dc:	fa2e f303 	lsr.w	r3, lr, r3
    c9e0:	4303      	orrs	r3, r0
    c9e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    c9e6:	b2af      	uxth	r7, r5
    c9e8:	fbb1 fcfe 	udiv	ip, r1, lr
    c9ec:	fb0e 101c 	mls	r0, lr, ip, r1
    c9f0:	0c19      	lsrs	r1, r3, #16
    c9f2:	fb0c f807 	mul.w	r8, ip, r7
    c9f6:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    c9fa:	4588      	cmp	r8, r1
    c9fc:	fa04 f402 	lsl.w	r4, r4, r2
    ca00:	d922      	bls.n	ca48 <__udivmoddi4+0x18c>
    ca02:	1869      	adds	r1, r5, r1
    ca04:	f10c 30ff 	add.w	r0, ip, #4294967295
    ca08:	d204      	bcs.n	ca14 <__udivmoddi4+0x158>
    ca0a:	4588      	cmp	r8, r1
    ca0c:	d902      	bls.n	ca14 <__udivmoddi4+0x158>
    ca0e:	f1ac 0002 	sub.w	r0, ip, #2
    ca12:	4429      	add	r1, r5
    ca14:	eba1 0108 	sub.w	r1, r1, r8
    ca18:	b29b      	uxth	r3, r3
    ca1a:	fbb1 fcfe 	udiv	ip, r1, lr
    ca1e:	fb0e 111c 	mls	r1, lr, ip, r1
    ca22:	fb0c f707 	mul.w	r7, ip, r7
    ca26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    ca2a:	429f      	cmp	r7, r3
    ca2c:	d90e      	bls.n	ca4c <__udivmoddi4+0x190>
    ca2e:	18eb      	adds	r3, r5, r3
    ca30:	f10c 31ff 	add.w	r1, ip, #4294967295
    ca34:	d204      	bcs.n	ca40 <__udivmoddi4+0x184>
    ca36:	429f      	cmp	r7, r3
    ca38:	d902      	bls.n	ca40 <__udivmoddi4+0x184>
    ca3a:	f1ac 0102 	sub.w	r1, ip, #2
    ca3e:	442b      	add	r3, r5
    ca40:	1bdb      	subs	r3, r3, r7
    ca42:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    ca46:	e792      	b.n	c96e <__udivmoddi4+0xb2>
    ca48:	4660      	mov	r0, ip
    ca4a:	e7e3      	b.n	ca14 <__udivmoddi4+0x158>
    ca4c:	4661      	mov	r1, ip
    ca4e:	e7f7      	b.n	ca40 <__udivmoddi4+0x184>
    ca50:	4660      	mov	r0, ip
    ca52:	e7a3      	b.n	c99c <__udivmoddi4+0xe0>
    ca54:	4663      	mov	r3, ip
    ca56:	e7b7      	b.n	c9c8 <__udivmoddi4+0x10c>
    ca58:	4283      	cmp	r3, r0
    ca5a:	d906      	bls.n	ca6a <__udivmoddi4+0x1ae>
    ca5c:	b916      	cbnz	r6, ca64 <__udivmoddi4+0x1a8>
    ca5e:	2100      	movs	r1, #0
    ca60:	4608      	mov	r0, r1
    ca62:	e77b      	b.n	c95c <__udivmoddi4+0xa0>
    ca64:	e9c6 e000 	strd	lr, r0, [r6]
    ca68:	e7f9      	b.n	ca5e <__udivmoddi4+0x1a2>
    ca6a:	fab3 f783 	clz	r7, r3
    ca6e:	b98f      	cbnz	r7, ca94 <__udivmoddi4+0x1d8>
    ca70:	4283      	cmp	r3, r0
    ca72:	d301      	bcc.n	ca78 <__udivmoddi4+0x1bc>
    ca74:	4572      	cmp	r2, lr
    ca76:	d808      	bhi.n	ca8a <__udivmoddi4+0x1ce>
    ca78:	ebbe 0402 	subs.w	r4, lr, r2
    ca7c:	eb60 0303 	sbc.w	r3, r0, r3
    ca80:	2001      	movs	r0, #1
    ca82:	469c      	mov	ip, r3
    ca84:	b91e      	cbnz	r6, ca8e <__udivmoddi4+0x1d2>
    ca86:	2100      	movs	r1, #0
    ca88:	e768      	b.n	c95c <__udivmoddi4+0xa0>
    ca8a:	4638      	mov	r0, r7
    ca8c:	e7fa      	b.n	ca84 <__udivmoddi4+0x1c8>
    ca8e:	e9c6 4c00 	strd	r4, ip, [r6]
    ca92:	e7f8      	b.n	ca86 <__udivmoddi4+0x1ca>
    ca94:	f1c7 0c20 	rsb	ip, r7, #32
    ca98:	40bb      	lsls	r3, r7
    ca9a:	fa22 f40c 	lsr.w	r4, r2, ip
    ca9e:	431c      	orrs	r4, r3
    caa0:	fa2e f10c 	lsr.w	r1, lr, ip
    caa4:	fa20 f30c 	lsr.w	r3, r0, ip
    caa8:	40b8      	lsls	r0, r7
    caaa:	4301      	orrs	r1, r0
    caac:	ea4f 4914 	mov.w	r9, r4, lsr #16
    cab0:	fa0e f507 	lsl.w	r5, lr, r7
    cab4:	fbb3 f8f9 	udiv	r8, r3, r9
    cab8:	fa1f fe84 	uxth.w	lr, r4
    cabc:	fb09 3018 	mls	r0, r9, r8, r3
    cac0:	0c0b      	lsrs	r3, r1, #16
    cac2:	fb08 fa0e 	mul.w	sl, r8, lr
    cac6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    caca:	459a      	cmp	sl, r3
    cacc:	fa02 f207 	lsl.w	r2, r2, r7
    cad0:	d940      	bls.n	cb54 <__udivmoddi4+0x298>
    cad2:	18e3      	adds	r3, r4, r3
    cad4:	f108 30ff 	add.w	r0, r8, #4294967295
    cad8:	d204      	bcs.n	cae4 <__udivmoddi4+0x228>
    cada:	459a      	cmp	sl, r3
    cadc:	d902      	bls.n	cae4 <__udivmoddi4+0x228>
    cade:	f1a8 0002 	sub.w	r0, r8, #2
    cae2:	4423      	add	r3, r4
    cae4:	eba3 030a 	sub.w	r3, r3, sl
    cae8:	b289      	uxth	r1, r1
    caea:	fbb3 f8f9 	udiv	r8, r3, r9
    caee:	fb09 3318 	mls	r3, r9, r8, r3
    caf2:	fb08 fe0e 	mul.w	lr, r8, lr
    caf6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    cafa:	458e      	cmp	lr, r1
    cafc:	d92c      	bls.n	cb58 <__udivmoddi4+0x29c>
    cafe:	1861      	adds	r1, r4, r1
    cb00:	f108 33ff 	add.w	r3, r8, #4294967295
    cb04:	d204      	bcs.n	cb10 <__udivmoddi4+0x254>
    cb06:	458e      	cmp	lr, r1
    cb08:	d902      	bls.n	cb10 <__udivmoddi4+0x254>
    cb0a:	f1a8 0302 	sub.w	r3, r8, #2
    cb0e:	4421      	add	r1, r4
    cb10:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    cb14:	fba0 9802 	umull	r9, r8, r0, r2
    cb18:	eba1 010e 	sub.w	r1, r1, lr
    cb1c:	4541      	cmp	r1, r8
    cb1e:	46ce      	mov	lr, r9
    cb20:	4643      	mov	r3, r8
    cb22:	d302      	bcc.n	cb2a <__udivmoddi4+0x26e>
    cb24:	d106      	bne.n	cb34 <__udivmoddi4+0x278>
    cb26:	454d      	cmp	r5, r9
    cb28:	d204      	bcs.n	cb34 <__udivmoddi4+0x278>
    cb2a:	ebb9 0e02 	subs.w	lr, r9, r2
    cb2e:	eb68 0304 	sbc.w	r3, r8, r4
    cb32:	3801      	subs	r0, #1
    cb34:	2e00      	cmp	r6, #0
    cb36:	d0a6      	beq.n	ca86 <__udivmoddi4+0x1ca>
    cb38:	ebb5 020e 	subs.w	r2, r5, lr
    cb3c:	eb61 0103 	sbc.w	r1, r1, r3
    cb40:	fa01 fc0c 	lsl.w	ip, r1, ip
    cb44:	fa22 f307 	lsr.w	r3, r2, r7
    cb48:	ea4c 0303 	orr.w	r3, ip, r3
    cb4c:	40f9      	lsrs	r1, r7
    cb4e:	e9c6 3100 	strd	r3, r1, [r6]
    cb52:	e798      	b.n	ca86 <__udivmoddi4+0x1ca>
    cb54:	4640      	mov	r0, r8
    cb56:	e7c5      	b.n	cae4 <__udivmoddi4+0x228>
    cb58:	4643      	mov	r3, r8
    cb5a:	e7d9      	b.n	cb10 <__udivmoddi4+0x254>

0000cb5c <strcmp>:
    cb5c:	f810 2b01 	ldrb.w	r2, [r0], #1
    cb60:	f811 3b01 	ldrb.w	r3, [r1], #1
    cb64:	2a01      	cmp	r2, #1
    cb66:	bf28      	it	cs
    cb68:	429a      	cmpcs	r2, r3
    cb6a:	d0f7      	beq.n	cb5c <strcmp>
    cb6c:	1ad0      	subs	r0, r2, r3
    cb6e:	4770      	bx	lr

0000cb70 <strlen>:
    cb70:	4603      	mov	r3, r0
    cb72:	f813 2b01 	ldrb.w	r2, [r3], #1
    cb76:	2a00      	cmp	r2, #0
    cb78:	d1fb      	bne.n	cb72 <strlen+0x2>
    cb7a:	1a18      	subs	r0, r3, r0
    cb7c:	3801      	subs	r0, #1
    cb7e:	4770      	bx	lr
    cb80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cb84:	460c      	mov	r4, r1
    cb86:	4681      	mov	r9, r0
    cb88:	7849      	ldrb	r1, [r1, #1]
    cb8a:	f100 0003 	add.w	r0, r0, #3
    cb8e:	f88d 1000 	strb.w	r1, [sp]
    cb92:	f020 0003 	bic.w	r0, r0, #3
    cb96:	78a1      	ldrb	r1, [r4, #2]
    cb98:	0015      	movs	r5, r2
    cb9a:	4606      	mov	r6, r0
    cb9c:	f88d 1001 	strb.w	r1, [sp, #1]
    cba0:	d000      	beq.n	cba4 <strlen+0x34>
    cba2:	2000      	movs	r0, #0
    cba4:	4669      	mov	r1, sp
    cba6:	f7f4 fe2b 	bl	1800 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>
    cbaa:	eb06 0a00 	add.w	sl, r6, r0
    cbae:	7820      	ldrb	r0, [r4, #0]
    cbb0:	7861      	ldrb	r1, [r4, #1]
    cbb2:	2700      	movs	r7, #0
    cbb4:	4408      	add	r0, r1
    cbb6:	f000 08ff 	and.w	r8, r0, #255	; 0xff
    cbba:	463e      	mov	r6, r7
    cbbc:	e008      	b.n	cbd0 <strlen+0x60>
    cbbe:	7a23      	ldrb	r3, [r4, #8]
    cbc0:	79e2      	ldrb	r2, [r4, #7]
    cbc2:	79a1      	ldrb	r1, [r4, #6]
    cbc4:	7960      	ldrb	r0, [r4, #5]
    cbc6:	f000 fe80 	bl	d8ca <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>
    cbca:	1c76      	adds	r6, r6, #1
    cbcc:	4407      	add	r7, r0
    cbce:	b2f6      	uxtb	r6, r6
    cbd0:	4546      	cmp	r6, r8
    cbd2:	d3f4      	bcc.n	cbbe <strlen+0x4e>
    cbd4:	f10a 0003 	add.w	r0, sl, #3
    cbd8:	f020 0003 	bic.w	r0, r0, #3
    cbdc:	4606      	mov	r6, r0
    cbde:	b105      	cbz	r5, cbe2 <strlen+0x72>
    cbe0:	2000      	movs	r0, #0
    cbe2:	463a      	mov	r2, r7
    cbe4:	4641      	mov	r1, r8
    cbe6:	f7f4 ffbf 	bl	1b68 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>
    cbea:	4430      	add	r0, r6
    cbec:	78a1      	ldrb	r1, [r4, #2]
    cbee:	462e      	mov	r6, r5
    cbf0:	b159      	cbz	r1, cc0a <strlen+0x9a>
    cbf2:	1cc0      	adds	r0, r0, #3
    cbf4:	f020 0003 	bic.w	r0, r0, #3
    cbf8:	8a63      	ldrh	r3, [r4, #18]
    cbfa:	78e2      	ldrb	r2, [r4, #3]
    cbfc:	4605      	mov	r5, r0
    cbfe:	b2c9      	uxtb	r1, r1
    cc00:	b106      	cbz	r6, cc04 <strlen+0x94>
    cc02:	2000      	movs	r0, #0
    cc04:	f7f5 f864 	bl	1cd0 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ>
    cc08:	4428      	add	r0, r5
    cc0a:	1dc0      	adds	r0, r0, #7
    cc0c:	f020 0007 	bic.w	r0, r0, #7
    cc10:	eba0 0009 	sub.w	r0, r0, r9
    cc14:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000cc18 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>:
    cc18:	b50e      	push	{r1, r2, r3, lr}
    cc1a:	4601      	mov	r1, r0
    cc1c:	4668      	mov	r0, sp
    cc1e:	f000 f818 	bl	cc52 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>
    cc22:	4668      	mov	r0, sp
    cc24:	f001 fc62 	bl	e4ec <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>
    cc28:	bd0e      	pop	{r1, r2, r3, pc}
    cc2a:	b570      	push	{r4, r5, r6, lr}
    cc2c:	460c      	mov	r4, r1
    cc2e:	4605      	mov	r5, r0
    cc30:	f7f4 fd5c 	bl	16ec <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>
    cc34:	2800      	cmp	r0, #0
    cc36:	d002      	beq.n	cc3e <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY+0x26>
    cc38:	2d3e      	cmp	r5, #62	; 0x3e
    cc3a:	d001      	beq.n	cc40 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY+0x28>
    cc3c:	2001      	movs	r0, #1
    cc3e:	bd70      	pop	{r4, r5, r6, pc}
    cc40:	2c12      	cmp	r4, #18
    cc42:	d004      	beq.n	cc4e <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY+0x36>
    cc44:	4620      	mov	r0, r4
    cc46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    cc4a:	f7f4 bd61 	b.w	1710 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    cc4e:	2000      	movs	r0, #0
    cc50:	bd70      	pop	{r4, r5, r6, pc}

0000cc52 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>:
    cc52:	880a      	ldrh	r2, [r1, #0]
    cc54:	f3c2 020b 	ubfx	r2, r2, #0, #12
    cc58:	8082      	strh	r2, [r0, #4]
    cc5a:	884a      	ldrh	r2, [r1, #2]
    cc5c:	80c2      	strh	r2, [r0, #6]
    cc5e:	784a      	ldrb	r2, [r1, #1]
    cc60:	0993      	lsrs	r3, r2, #6
    cc62:	2200      	movs	r2, #0
    cc64:	7242      	strb	r2, [r0, #9]
    cc66:	784b      	ldrb	r3, [r1, #1]
    cc68:	f3c3 1301 	ubfx	r3, r3, #4, #2
    cc6c:	b11b      	cbz	r3, cc76 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    cc6e:	2b01      	cmp	r3, #1
    cc70:	d005      	beq.n	cc7e <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x2c>
    cc72:	2b02      	cmp	r3, #2
    cc74:	d005      	beq.n	cc82 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x30>
    cc76:	7202      	strb	r2, [r0, #8]
    cc78:	1d09      	adds	r1, r1, #4
    cc7a:	6001      	str	r1, [r0, #0]
    cc7c:	4770      	bx	lr
    cc7e:	2201      	movs	r2, #1
    cc80:	e7f9      	b.n	cc76 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    cc82:	2202      	movs	r2, #2
    cc84:	e7f7      	b.n	cc76 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>

0000cc86 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>:
    cc86:	b510      	push	{r4, lr}
    cc88:	460c      	mov	r4, r1
    cc8a:	7909      	ldrb	r1, [r1, #4]
    cc8c:	7001      	strb	r1, [r0, #0]
    cc8e:	7841      	ldrb	r1, [r0, #1]
    cc90:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
    cc94:	7041      	strb	r1, [r0, #1]
    cc96:	88a2      	ldrh	r2, [r4, #4]
    cc98:	f3c2 2203 	ubfx	r2, r2, #8, #4
    cc9c:	4311      	orrs	r1, r2
    cc9e:	7041      	strb	r1, [r0, #1]
    cca0:	79a2      	ldrb	r2, [r4, #6]
    cca2:	7082      	strb	r2, [r0, #2]
    cca4:	88e2      	ldrh	r2, [r4, #6]
    cca6:	f001 01cf 	and.w	r1, r1, #207	; 0xcf
    ccaa:	0a12      	lsrs	r2, r2, #8
    ccac:	70c2      	strb	r2, [r0, #3]
    ccae:	7041      	strb	r1, [r0, #1]
    ccb0:	7a22      	ldrb	r2, [r4, #8]
    ccb2:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    ccb6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
    ccba:	7041      	strb	r1, [r0, #1]
    ccbc:	7a62      	ldrb	r2, [r4, #9]
    ccbe:	ea41 1182 	orr.w	r1, r1, r2, lsl #6
    ccc2:	7041      	strb	r1, [r0, #1]
    ccc4:	6821      	ldr	r1, [r4, #0]
    ccc6:	1d02      	adds	r2, r0, #4
    ccc8:	4291      	cmp	r1, r2
    ccca:	d006      	beq.n	ccda <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x54>
    cccc:	88e2      	ldrh	r2, [r4, #6]
    ccce:	2afb      	cmp	r2, #251	; 0xfb
    ccd0:	d300      	bcc.n	ccd4 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x4e>
    ccd2:	22fb      	movs	r2, #251	; 0xfb
    ccd4:	1d00      	adds	r0, r0, #4
    ccd6:	f004 f8b5 	bl	10e44 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    ccda:	79a0      	ldrb	r0, [r4, #6]
    ccdc:	1d00      	adds	r0, r0, #4
    ccde:	b2c0      	uxtb	r0, r0
    cce0:	bd10      	pop	{r4, pc}

0000cce2 <sym_XBPRCWTRXORTYBBILZLCEINUIX4S5BJ5RTZD2RY>:
    cce2:	b430      	push	{r4, r5}
    cce4:	790a      	ldrb	r2, [r1, #4]
    cce6:	7002      	strb	r2, [r0, #0]
    cce8:	7842      	ldrb	r2, [r0, #1]
    ccea:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
    ccee:	7042      	strb	r2, [r0, #1]
    ccf0:	888b      	ldrh	r3, [r1, #4]
    ccf2:	f3c3 2303 	ubfx	r3, r3, #8, #4
    ccf6:	431a      	orrs	r2, r3
    ccf8:	7042      	strb	r2, [r0, #1]
    ccfa:	798b      	ldrb	r3, [r1, #6]
    ccfc:	7083      	strb	r3, [r0, #2]
    ccfe:	78c3      	ldrb	r3, [r0, #3]
    cd00:	f002 02cf 	and.w	r2, r2, #207	; 0xcf
    cd04:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    cd08:	70c3      	strb	r3, [r0, #3]
    cd0a:	88cc      	ldrh	r4, [r1, #6]
    cd0c:	f3c4 2405 	ubfx	r4, r4, #8, #6
    cd10:	4323      	orrs	r3, r4
    cd12:	70c3      	strb	r3, [r0, #3]
    cd14:	7042      	strb	r2, [r0, #1]
    cd16:	7a0c      	ldrb	r4, [r1, #8]
    cd18:	f004 0403 	and.w	r4, r4, #3
    cd1c:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
    cd20:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
    cd24:	7042      	strb	r2, [r0, #1]
    cd26:	7a4c      	ldrb	r4, [r1, #9]
    cd28:	ea42 1284 	orr.w	r2, r2, r4, lsl #6
    cd2c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    cd30:	7042      	strb	r2, [r0, #1]
    cd32:	f003 023f 	and.w	r2, r3, #63	; 0x3f
    cd36:	70c2      	strb	r2, [r0, #3]
    cd38:	680b      	ldr	r3, [r1, #0]
    cd3a:	1d02      	adds	r2, r0, #4
    cd3c:	4293      	cmp	r3, r2
    cd3e:	d005      	beq.n	cd4c <sym_XBPRCWTRXORTYBBILZLCEINUIX4S5BJ5RTZD2RY+0x6a>
    cd40:	88ca      	ldrh	r2, [r1, #6]
    cd42:	bc30      	pop	{r4, r5}
    cd44:	4619      	mov	r1, r3
    cd46:	1d00      	adds	r0, r0, #4
    cd48:	f004 b87c 	b.w	10e44 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    cd4c:	bc30      	pop	{r4, r5}
    cd4e:	4770      	bx	lr

0000cd50 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>:
    cd50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cd54:	460d      	mov	r5, r1
    cd56:	4604      	mov	r4, r0
    cd58:	780f      	ldrb	r7, [r1, #0]
    cd5a:	2000      	movs	r0, #0
    cd5c:	220c      	movs	r2, #12
    cd5e:	2305      	movs	r3, #5
    cd60:	263e      	movs	r6, #62	; 0x3e
    cd62:	21ff      	movs	r1, #255	; 0xff
    cd64:	2f1e      	cmp	r7, #30
    cd66:	d27d      	bcs.n	ce64 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x114>
    cd68:	e8df f007 	tbb	[pc, r7]
    cd6c:	28260fce 	.word	0x28260fce
    cd70:	645349ce 	.word	0x645349ce
    cd74:	a0959380 	.word	0xa0959380
    cd78:	ced0c6ab 	.word	0xced0c6ab
    cd7c:	b62ecece 	.word	0xb62ecece
    cd80:	f4f1d9b9 	.word	0xf4f1d9b9
    cd84:	ebecedee 	.word	0xebecedee
    cd88:	e9ea      	.short	0xe9ea
    cd8a:	7022      	strb	r2, [r4, #0]
    cd8c:	7928      	ldrb	r0, [r5, #4]
    cd8e:	70a0      	strb	r0, [r4, #2]
    cd90:	7968      	ldrb	r0, [r5, #5]
    cd92:	70e0      	strb	r0, [r4, #3]
    cd94:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    cd98:	0a00      	lsrs	r0, r0, #8
    cd9a:	7120      	strb	r0, [r4, #4]
    cd9c:	79e8      	ldrb	r0, [r5, #7]
    cd9e:	7160      	strb	r0, [r4, #5]
    cda0:	7a28      	ldrb	r0, [r5, #8]
    cda2:	71a0      	strb	r0, [r4, #6]
    cda4:	8928      	ldrh	r0, [r5, #8]
    cda6:	0a00      	lsrs	r0, r0, #8
    cda8:	71e0      	strb	r0, [r4, #7]
    cdaa:	7aa8      	ldrb	r0, [r5, #10]
    cdac:	7220      	strb	r0, [r4, #8]
    cdae:	8968      	ldrh	r0, [r5, #10]
    cdb0:	0a00      	lsrs	r0, r0, #8
    cdb2:	7260      	strb	r0, [r4, #9]
    cdb4:	2008      	movs	r0, #8
    cdb6:	e0a5      	b.n	cf04 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1b4>
    cdb8:	2010      	movs	r0, #16
    cdba:	e000      	b.n	cdbe <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x6e>
    cdbc:	201a      	movs	r0, #26
    cdbe:	7020      	strb	r0, [r4, #0]
    cdc0:	7928      	ldrb	r0, [r5, #4]
    cdc2:	70a0      	strb	r0, [r4, #2]
    cdc4:	2001      	movs	r0, #1
    cdc6:	e09d      	b.n	cf04 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1b4>
    cdc8:	2029      	movs	r0, #41	; 0x29
    cdca:	f7f4 fca1 	bl	1710 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    cdce:	b148      	cbz	r0, cde4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x94>
    cdd0:	7026      	strb	r6, [r4, #0]
    cdd2:	2029      	movs	r0, #41	; 0x29
    cdd4:	70a0      	strb	r0, [r4, #2]
    cdd6:	2221      	movs	r2, #33	; 0x21
    cdd8:	1d29      	adds	r1, r5, #4
    cdda:	1ce0      	adds	r0, r4, #3
    cddc:	f004 f832 	bl	10e44 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    cde0:	2022      	movs	r0, #34	; 0x22
    cde2:	e08f      	b.n	cf04 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1b4>
    cde4:	200a      	movs	r0, #10
    cde6:	f7f4 fc93 	bl	1710 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    cdea:	2800      	cmp	r0, #0
    cdec:	4629      	mov	r1, r5
    cdee:	4620      	mov	r0, r4
    cdf0:	d002      	beq.n	cdf8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0xa8>
    cdf2:	f000 f95b 	bl	d0ac <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA+0x52>
    cdf6:	e083      	b.n	cf00 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1b0>
    cdf8:	f000 f92f 	bl	d05a <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA>
    cdfc:	e080      	b.n	cf00 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1b0>
    cdfe:	7026      	strb	r6, [r4, #0]
    ce00:	2014      	movs	r0, #20
    ce02:	70a0      	strb	r0, [r4, #2]
    ce04:	7928      	ldrb	r0, [r5, #4]
    ce06:	70e0      	strb	r0, [r4, #3]
    ce08:	88a8      	ldrh	r0, [r5, #4]
    ce0a:	0a00      	lsrs	r0, r0, #8
    ce0c:	7120      	strb	r0, [r4, #4]
    ce0e:	79a8      	ldrb	r0, [r5, #6]
    ce10:	e0bf      	b.n	cf92 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x242>
    ce12:	223e      	movs	r2, #62	; 0x3e
    ce14:	7022      	strb	r2, [r4, #0]
    ce16:	2204      	movs	r2, #4
    ce18:	70a2      	strb	r2, [r4, #2]
    ce1a:	6868      	ldr	r0, [r5, #4]
    ce1c:	f8c4 0003 	str.w	r0, [r4, #3]
    ce20:	68a8      	ldr	r0, [r5, #8]
    ce22:	f8c4 0007 	str.w	r0, [r4, #7]
    ce26:	89a8      	ldrh	r0, [r5, #12]
    ce28:	f8a4 000b 	strh.w	r0, [r4, #11]
    ce2c:	7ba8      	ldrb	r0, [r5, #14]
    ce2e:	7360      	strb	r0, [r4, #13]
    ce30:	200c      	movs	r0, #12
    ce32:	e067      	b.n	cf04 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1b4>
    ce34:	7026      	strb	r6, [r4, #0]
    ce36:	2003      	movs	r0, #3
    ce38:	70a0      	strb	r0, [r4, #2]
    ce3a:	7928      	ldrb	r0, [r5, #4]
    ce3c:	70e0      	strb	r0, [r4, #3]
    ce3e:	79a8      	ldrb	r0, [r5, #6]
    ce40:	7120      	strb	r0, [r4, #4]
    ce42:	88e8      	ldrh	r0, [r5, #6]
    ce44:	0a00      	lsrs	r0, r0, #8
    ce46:	7160      	strb	r0, [r4, #5]
    ce48:	7a28      	ldrb	r0, [r5, #8]
    ce4a:	71a0      	strb	r0, [r4, #6]
    ce4c:	8928      	ldrh	r0, [r5, #8]
    ce4e:	0a00      	lsrs	r0, r0, #8
    ce50:	71e0      	strb	r0, [r4, #7]
    ce52:	7aa8      	ldrb	r0, [r5, #10]
    ce54:	7220      	strb	r0, [r4, #8]
    ce56:	8968      	ldrh	r0, [r5, #10]
    ce58:	0a00      	lsrs	r0, r0, #8
    ce5a:	7260      	strb	r0, [r4, #9]
    ce5c:	7b28      	ldrb	r0, [r5, #12]
    ce5e:	72a0      	strb	r0, [r4, #10]
    ce60:	89a8      	ldrh	r0, [r5, #12]
    ce62:	e000      	b.n	ce66 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x116>
    ce64:	e050      	b.n	cf08 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1b8>
    ce66:	0a00      	lsrs	r0, r0, #8
    ce68:	72e0      	strb	r0, [r4, #11]
    ce6a:	e0cf      	b.n	d00c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2bc>
    ce6c:	7026      	strb	r6, [r4, #0]
    ce6e:	70a3      	strb	r3, [r4, #2]
    ce70:	7928      	ldrb	r0, [r5, #4]
    ce72:	70e0      	strb	r0, [r4, #3]
    ce74:	88a8      	ldrh	r0, [r5, #4]
    ce76:	0a00      	lsrs	r0, r0, #8
    ce78:	7120      	strb	r0, [r4, #4]
    ce7a:	f8d5 0006 	ldr.w	r0, [r5, #6]
    ce7e:	f8c4 0005 	str.w	r0, [r4, #5]
    ce82:	f8d5 000a 	ldr.w	r0, [r5, #10]
    ce86:	f8c4 0009 	str.w	r0, [r4, #9]
    ce8a:	89e8      	ldrh	r0, [r5, #14]
    ce8c:	f8a4 000d 	strh.w	r0, [r4, #13]
    ce90:	e0e1      	b.n	d056 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x306>
    ce92:	2011      	movs	r0, #17
    ce94:	e03b      	b.n	cf0e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1be>
    ce96:	7023      	strb	r3, [r4, #0]
    ce98:	7928      	ldrb	r0, [r5, #4]
    ce9a:	70a0      	strb	r0, [r4, #2]
    ce9c:	7968      	ldrb	r0, [r5, #5]
    ce9e:	70e0      	strb	r0, [r4, #3]
    cea0:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    cea4:	0a00      	lsrs	r0, r0, #8
    cea6:	7120      	strb	r0, [r4, #4]
    cea8:	79e8      	ldrb	r0, [r5, #7]
    ceaa:	e072      	b.n	cf92 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x242>
    ceac:	2008      	movs	r0, #8
    ceae:	7020      	strb	r0, [r4, #0]
    ceb0:	7928      	ldrb	r0, [r5, #4]
    ceb2:	70a0      	strb	r0, [r4, #2]
    ceb4:	79a8      	ldrb	r0, [r5, #6]
    ceb6:	70e0      	strb	r0, [r4, #3]
    ceb8:	88e8      	ldrh	r0, [r5, #6]
    ceba:	0a00      	lsrs	r0, r0, #8
    cebc:	7120      	strb	r0, [r4, #4]
    cebe:	7a28      	ldrb	r0, [r5, #8]
    cec0:	e067      	b.n	cf92 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x242>
    cec2:	2030      	movs	r0, #48	; 0x30
    cec4:	7020      	strb	r0, [r4, #0]
    cec6:	7928      	ldrb	r0, [r5, #4]
    cec8:	70a0      	strb	r0, [r4, #2]
    ceca:	79a8      	ldrb	r0, [r5, #6]
    cecc:	70e0      	strb	r0, [r4, #3]
    cece:	88e8      	ldrh	r0, [r5, #6]
    ced0:	0a00      	lsrs	r0, r0, #8
    ced2:	7120      	strb	r0, [r4, #4]
    ced4:	2003      	movs	r0, #3
    ced6:	e015      	b.n	cf04 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1b4>
    ced8:	7026      	strb	r6, [r4, #0]
    ceda:	2007      	movs	r0, #7
    cedc:	e05e      	b.n	cf9c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x24c>
    cede:	7026      	strb	r6, [r4, #0]
    cee0:	70a2      	strb	r2, [r4, #2]
    cee2:	7928      	ldrb	r0, [r5, #4]
    cee4:	70e0      	strb	r0, [r4, #3]
    cee6:	79a8      	ldrb	r0, [r5, #6]
    cee8:	7120      	strb	r0, [r4, #4]
    ceea:	88e8      	ldrh	r0, [r5, #6]
    ceec:	0a00      	lsrs	r0, r0, #8
    ceee:	7160      	strb	r0, [r4, #5]
    cef0:	7a28      	ldrb	r0, [r5, #8]
    cef2:	71a0      	strb	r0, [r4, #6]
    cef4:	7a68      	ldrb	r0, [r5, #9]
    cef6:	e01f      	b.n	cf38 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1e8>
    cef8:	1d29      	adds	r1, r5, #4
    cefa:	4620      	mov	r0, r4
    cefc:	f7f4 fbc8 	bl	1690 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xa0>
    cf00:	2800      	cmp	r0, #0
    cf02:	d001      	beq.n	cf08 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1b8>
    cf04:	7060      	strb	r0, [r4, #1]
    cf06:	1c80      	adds	r0, r0, #2
    cf08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cf0c:	2057      	movs	r0, #87	; 0x57
    cf0e:	7020      	strb	r0, [r4, #0]
    cf10:	7928      	ldrb	r0, [r5, #4]
    cf12:	70a0      	strb	r0, [r4, #2]
    cf14:	88a8      	ldrh	r0, [r5, #4]
    cf16:	0a00      	lsrs	r0, r0, #8
    cf18:	70e0      	strb	r0, [r4, #3]
    cf1a:	2002      	movs	r0, #2
    cf1c:	e7f2      	b.n	cf04 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1b4>
    cf1e:	7026      	strb	r6, [r4, #0]
    cf20:	2012      	movs	r0, #18
    cf22:	70a0      	strb	r0, [r4, #2]
    cf24:	7928      	ldrb	r0, [r5, #4]
    cf26:	70e0      	strb	r0, [r4, #3]
    cf28:	7968      	ldrb	r0, [r5, #5]
    cf2a:	7120      	strb	r0, [r4, #4]
    cf2c:	79a8      	ldrb	r0, [r5, #6]
    cf2e:	7160      	strb	r0, [r4, #5]
    cf30:	88e8      	ldrh	r0, [r5, #6]
    cf32:	0a00      	lsrs	r0, r0, #8
    cf34:	71a0      	strb	r0, [r4, #6]
    cf36:	7a28      	ldrb	r0, [r5, #8]
    cf38:	71e0      	strb	r0, [r4, #7]
    cf3a:	2006      	movs	r0, #6
    cf3c:	e7e2      	b.n	cf04 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1b4>
    cf3e:	e075      	b.n	d02c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2dc>
    cf40:	e048      	b.n	cfd4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x284>
    cf42:	e029      	b.n	cf98 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x248>
    cf44:	e054      	b.n	cff0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2a0>
    cf46:	e063      	b.n	d010 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2c0>
    cf48:	e01b      	b.n	cf82 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x232>
    cf4a:	e003      	b.n	cf54 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x204>
    cf4c:	e7ff      	b.n	cf4e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1fe>
    cf4e:	7026      	strb	r6, [r4, #0]
    cf50:	2020      	movs	r0, #32
    cf52:	e041      	b.n	cfd8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x288>
    cf54:	7026      	strb	r6, [r4, #0]
    cf56:	2021      	movs	r0, #33	; 0x21
    cf58:	70a0      	strb	r0, [r4, #2]
    cf5a:	7928      	ldrb	r0, [r5, #4]
    cf5c:	70e0      	strb	r0, [r4, #3]
    cf5e:	7968      	ldrb	r0, [r5, #5]
    cf60:	7120      	strb	r0, [r4, #4]
    cf62:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    cf66:	0a00      	lsrs	r0, r0, #8
    cf68:	7160      	strb	r0, [r4, #5]
    cf6a:	79e8      	ldrb	r0, [r5, #7]
    cf6c:	71a0      	strb	r0, [r4, #6]
    cf6e:	7a28      	ldrb	r0, [r5, #8]
    cf70:	71e0      	strb	r0, [r4, #7]
    cf72:	7a68      	ldrb	r0, [r5, #9]
    cf74:	7220      	strb	r0, [r4, #8]
    cf76:	7aa8      	ldrb	r0, [r5, #10]
    cf78:	7260      	strb	r0, [r4, #9]
    cf7a:	7ae8      	ldrb	r0, [r5, #11]
    cf7c:	72a0      	strb	r0, [r4, #10]
    cf7e:	2009      	movs	r0, #9
    cf80:	e7c0      	b.n	cf04 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1b4>
    cf82:	7021      	strb	r1, [r4, #0]
    cf84:	20a1      	movs	r0, #161	; 0xa1
    cf86:	70a0      	strb	r0, [r4, #2]
    cf88:	7928      	ldrb	r0, [r5, #4]
    cf8a:	70e0      	strb	r0, [r4, #3]
    cf8c:	7968      	ldrb	r0, [r5, #5]
    cf8e:	7120      	strb	r0, [r4, #4]
    cf90:	2000      	movs	r0, #0
    cf92:	7160      	strb	r0, [r4, #5]
    cf94:	2004      	movs	r0, #4
    cf96:	e7b5      	b.n	cf04 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1b4>
    cf98:	7021      	strb	r1, [r4, #0]
    cf9a:	20a2      	movs	r0, #162	; 0xa2
    cf9c:	70a0      	strb	r0, [r4, #2]
    cf9e:	7928      	ldrb	r0, [r5, #4]
    cfa0:	70e0      	strb	r0, [r4, #3]
    cfa2:	88a8      	ldrh	r0, [r5, #4]
    cfa4:	0a00      	lsrs	r0, r0, #8
    cfa6:	7120      	strb	r0, [r4, #4]
    cfa8:	79a8      	ldrb	r0, [r5, #6]
    cfaa:	7160      	strb	r0, [r4, #5]
    cfac:	88e8      	ldrh	r0, [r5, #6]
    cfae:	0a00      	lsrs	r0, r0, #8
    cfb0:	71a0      	strb	r0, [r4, #6]
    cfb2:	7a28      	ldrb	r0, [r5, #8]
    cfb4:	71e0      	strb	r0, [r4, #7]
    cfb6:	8928      	ldrh	r0, [r5, #8]
    cfb8:	0a00      	lsrs	r0, r0, #8
    cfba:	7220      	strb	r0, [r4, #8]
    cfbc:	7aa8      	ldrb	r0, [r5, #10]
    cfbe:	7260      	strb	r0, [r4, #9]
    cfc0:	8968      	ldrh	r0, [r5, #10]
    cfc2:	0a00      	lsrs	r0, r0, #8
    cfc4:	72a0      	strb	r0, [r4, #10]
    cfc6:	7b28      	ldrb	r0, [r5, #12]
    cfc8:	72e0      	strb	r0, [r4, #11]
    cfca:	89a8      	ldrh	r0, [r5, #12]
    cfcc:	0a00      	lsrs	r0, r0, #8
    cfce:	7320      	strb	r0, [r4, #12]
    cfd0:	200b      	movs	r0, #11
    cfd2:	e797      	b.n	cf04 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1b4>
    cfd4:	7021      	strb	r1, [r4, #0]
    cfd6:	20a3      	movs	r0, #163	; 0xa3
    cfd8:	70a0      	strb	r0, [r4, #2]
    cfda:	7928      	ldrb	r0, [r5, #4]
    cfdc:	70e0      	strb	r0, [r4, #3]
    cfde:	88a8      	ldrh	r0, [r5, #4]
    cfe0:	0a00      	lsrs	r0, r0, #8
    cfe2:	7120      	strb	r0, [r4, #4]
    cfe4:	79a8      	ldrb	r0, [r5, #6]
    cfe6:	7160      	strb	r0, [r4, #5]
    cfe8:	79e8      	ldrb	r0, [r5, #7]
    cfea:	71a0      	strb	r0, [r4, #6]
    cfec:	2005      	movs	r0, #5
    cfee:	e789      	b.n	cf04 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1b4>
    cff0:	7026      	strb	r6, [r4, #0]
    cff2:	2013      	movs	r0, #19
    cff4:	70a0      	strb	r0, [r4, #2]
    cff6:	7928      	ldrb	r0, [r5, #4]
    cff8:	70e0      	strb	r0, [r4, #3]
    cffa:	7968      	ldrb	r0, [r5, #5]
    cffc:	7120      	strb	r0, [r4, #4]
    cffe:	f8d5 0006 	ldr.w	r0, [r5, #6]
    d002:	f8c4 0005 	str.w	r0, [r4, #5]
    d006:	8968      	ldrh	r0, [r5, #10]
    d008:	f8a4 0009 	strh.w	r0, [r4, #9]
    d00c:	200a      	movs	r0, #10
    d00e:	e779      	b.n	cf04 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1b4>
    d010:	7021      	strb	r1, [r4, #0]
    d012:	20a4      	movs	r0, #164	; 0xa4
    d014:	70a0      	strb	r0, [r4, #2]
    d016:	7928      	ldrb	r0, [r5, #4]
    d018:	70e0      	strb	r0, [r4, #3]
    d01a:	88a8      	ldrh	r0, [r5, #4]
    d01c:	0a00      	lsrs	r0, r0, #8
    d01e:	7120      	strb	r0, [r4, #4]
    d020:	79a8      	ldrb	r0, [r5, #6]
    d022:	7160      	strb	r0, [r4, #5]
    d024:	79e8      	ldrb	r0, [r5, #7]
    d026:	71a0      	strb	r0, [r4, #6]
    d028:	2007      	movs	r0, #7
    d02a:	e76b      	b.n	cf04 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1b4>
    d02c:	7021      	strb	r1, [r4, #0]
    d02e:	2080      	movs	r0, #128	; 0x80
    d030:	70a0      	strb	r0, [r4, #2]
    d032:	88a9      	ldrh	r1, [r5, #4]
    d034:	f8a4 1003 	strh.w	r1, [r4, #3]
    d038:	88e9      	ldrh	r1, [r5, #6]
    d03a:	f8a4 1005 	strh.w	r1, [r4, #5]
    d03e:	7a29      	ldrb	r1, [r5, #8]
    d040:	71e1      	strb	r1, [r4, #7]
    d042:	8969      	ldrh	r1, [r5, #10]
    d044:	8121      	strh	r1, [r4, #8]
    d046:	89a9      	ldrh	r1, [r5, #12]
    d048:	8161      	strh	r1, [r4, #10]
    d04a:	89e9      	ldrh	r1, [r5, #14]
    d04c:	81a1      	strh	r1, [r4, #12]
    d04e:	7c29      	ldrb	r1, [r5, #16]
    d050:	f001 0101 	and.w	r1, r1, #1
    d054:	73a1      	strb	r1, [r4, #14]
    d056:	200d      	movs	r0, #13
    d058:	e754      	b.n	cf04 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1b4>

0000d05a <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA>:
    d05a:	223e      	movs	r2, #62	; 0x3e
    d05c:	7002      	strb	r2, [r0, #0]
    d05e:	2201      	movs	r2, #1
    d060:	7082      	strb	r2, [r0, #2]
    d062:	790a      	ldrb	r2, [r1, #4]
    d064:	70c2      	strb	r2, [r0, #3]
    d066:	f811 2f05 	ldrb.w	r2, [r1, #5]!
    d06a:	7102      	strb	r2, [r0, #4]
    d06c:	880a      	ldrh	r2, [r1, #0]
    d06e:	0a12      	lsrs	r2, r2, #8
    d070:	7142      	strb	r2, [r0, #5]
    d072:	788a      	ldrb	r2, [r1, #2]
    d074:	7182      	strb	r2, [r0, #6]
    d076:	78ca      	ldrb	r2, [r1, #3]
    d078:	71c2      	strb	r2, [r0, #7]
    d07a:	684a      	ldr	r2, [r1, #4]
    d07c:	6082      	str	r2, [r0, #8]
    d07e:	890a      	ldrh	r2, [r1, #8]
    d080:	8182      	strh	r2, [r0, #12]
    d082:	7d8a      	ldrb	r2, [r1, #22]
    d084:	7382      	strb	r2, [r0, #14]
    d086:	8aca      	ldrh	r2, [r1, #22]
    d088:	0a12      	lsrs	r2, r2, #8
    d08a:	73c2      	strb	r2, [r0, #15]
    d08c:	7e0a      	ldrb	r2, [r1, #24]
    d08e:	7402      	strb	r2, [r0, #16]
    d090:	8b0a      	ldrh	r2, [r1, #24]
    d092:	0a12      	lsrs	r2, r2, #8
    d094:	7442      	strb	r2, [r0, #17]
    d096:	7e8a      	ldrb	r2, [r1, #26]
    d098:	7482      	strb	r2, [r0, #18]
    d09a:	8b4a      	ldrh	r2, [r1, #26]
    d09c:	0a12      	lsrs	r2, r2, #8
    d09e:	74c2      	strb	r2, [r0, #19]
    d0a0:	7f09      	ldrb	r1, [r1, #28]
    d0a2:	7501      	strb	r1, [r0, #20]
    d0a4:	2113      	movs	r1, #19
    d0a6:	7041      	strb	r1, [r0, #1]
    d0a8:	4608      	mov	r0, r1
    d0aa:	4770      	bx	lr
    d0ac:	223e      	movs	r2, #62	; 0x3e
    d0ae:	7002      	strb	r2, [r0, #0]
    d0b0:	220a      	movs	r2, #10
    d0b2:	7082      	strb	r2, [r0, #2]
    d0b4:	790a      	ldrb	r2, [r1, #4]
    d0b6:	70c2      	strb	r2, [r0, #3]
    d0b8:	f811 2f05 	ldrb.w	r2, [r1, #5]!
    d0bc:	7102      	strb	r2, [r0, #4]
    d0be:	880a      	ldrh	r2, [r1, #0]
    d0c0:	0a12      	lsrs	r2, r2, #8
    d0c2:	7142      	strb	r2, [r0, #5]
    d0c4:	788a      	ldrb	r2, [r1, #2]
    d0c6:	7182      	strb	r2, [r0, #6]
    d0c8:	78ca      	ldrb	r2, [r1, #3]
    d0ca:	71c2      	strb	r2, [r0, #7]
    d0cc:	684a      	ldr	r2, [r1, #4]
    d0ce:	6082      	str	r2, [r0, #8]
    d0d0:	890a      	ldrh	r2, [r1, #8]
    d0d2:	8182      	strh	r2, [r0, #12]
    d0d4:	f8d1 200a 	ldr.w	r2, [r1, #10]
    d0d8:	f8c0 200e 	str.w	r2, [r0, #14]
    d0dc:	89ca      	ldrh	r2, [r1, #14]
    d0de:	8242      	strh	r2, [r0, #18]
    d0e0:	690a      	ldr	r2, [r1, #16]
    d0e2:	6142      	str	r2, [r0, #20]
    d0e4:	8a8a      	ldrh	r2, [r1, #20]
    d0e6:	8302      	strh	r2, [r0, #24]
    d0e8:	7d8a      	ldrb	r2, [r1, #22]
    d0ea:	7682      	strb	r2, [r0, #26]
    d0ec:	8aca      	ldrh	r2, [r1, #22]
    d0ee:	0a12      	lsrs	r2, r2, #8
    d0f0:	76c2      	strb	r2, [r0, #27]
    d0f2:	7e0a      	ldrb	r2, [r1, #24]
    d0f4:	7702      	strb	r2, [r0, #28]
    d0f6:	8b0a      	ldrh	r2, [r1, #24]
    d0f8:	0a12      	lsrs	r2, r2, #8
    d0fa:	7742      	strb	r2, [r0, #29]
    d0fc:	7e8a      	ldrb	r2, [r1, #26]
    d0fe:	7782      	strb	r2, [r0, #30]
    d100:	8b4a      	ldrh	r2, [r1, #26]
    d102:	0a12      	lsrs	r2, r2, #8
    d104:	77c2      	strb	r2, [r0, #31]
    d106:	7f09      	ldrb	r1, [r1, #28]
    d108:	f880 1020 	strb.w	r1, [r0, #32]
    d10c:	211f      	movs	r1, #31
    d10e:	7041      	strb	r1, [r0, #1]
    d110:	4608      	mov	r0, r1
    d112:	4770      	bx	lr
    d114:	094a      	lsrs	r2, r1, #5
    d116:	f001 011f 	and.w	r1, r1, #31
    d11a:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
    d11e:	40c8      	lsrs	r0, r1
    d120:	f000 0001 	and.w	r0, r0, #1
    d124:	4770      	bx	lr

0000d126 <sdc_hci_data_put>:
    d126:	b510      	push	{r4, lr}
    d128:	f06f 0415 	mvn.w	r4, #21
    d12c:	b120      	cbz	r0, d138 <sdc_hci_data_put+0x12>
    d12e:	f7ff fd73 	bl	cc18 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>
    d132:	b108      	cbz	r0, d138 <sdc_hci_data_put+0x12>
    d134:	2000      	movs	r0, #0
    d136:	bd10      	pop	{r4, pc}
    d138:	4620      	mov	r0, r4
    d13a:	bd10      	pop	{r4, pc}

0000d13c <sdc_hci_get>:
    d13c:	b510      	push	{r4, lr}
    d13e:	460c      	mov	r4, r1
    d140:	b130      	cbz	r0, d150 <sdc_hci_get+0x14>
    d142:	b12c      	cbz	r4, d150 <sdc_hci_get+0x14>
    d144:	f7f4 fa54 	bl	15f0 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A>
    d148:	b128      	cbz	r0, d156 <sdc_hci_get+0x1a>
    d14a:	7020      	strb	r0, [r4, #0]
    d14c:	2000      	movs	r0, #0
    d14e:	bd10      	pop	{r4, pc}
    d150:	f06f 0015 	mvn.w	r0, #21
    d154:	bd10      	pop	{r4, pc}
    d156:	f06f 0022 	mvn.w	r0, #34	; 0x22
    d15a:	bd10      	pop	{r4, pc}

0000d15c <sdc_hci_cmd_cb_read_authenticated_payload_timeout>:
    d15c:	f003 b910 	b.w	10380 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>

0000d160 <sdc_hci_cmd_cb_read_transmit_power_level>:
    d160:	f003 b92b 	b.w	103ba <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>

0000d164 <sdc_hci_cmd_cb_set_event_mask>:
    d164:	b510      	push	{r4, lr}
    d166:	f7f4 faed 	bl	1744 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>
    d16a:	2000      	movs	r0, #0
    d16c:	bd10      	pop	{r4, pc}

0000d16e <sdc_hci_cmd_cb_set_event_mask_page_2>:
    d16e:	b510      	push	{r4, lr}
    d170:	f7f4 fafa 	bl	1768 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>
    d174:	2000      	movs	r0, #0
    d176:	bd10      	pop	{r4, pc}

0000d178 <sdc_hci_cmd_cb_write_authenticated_payload_timeout>:
    d178:	f003 b940 	b.w	103fc <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>

0000d17c <sdc_hci_cmd_vs_conn_event_extend>:
    d17c:	b508      	push	{r3, lr}
    d17e:	7800      	ldrb	r0, [r0, #0]
    d180:	f88d 0000 	strb.w	r0, [sp]
    d184:	4668      	mov	r0, sp
    d186:	f003 f81c 	bl	101c2 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    d18a:	bd08      	pop	{r3, pc}

0000d18c <sdc_hci_cmd_vs_conn_update>:
    d18c:	2001      	movs	r0, #1
    d18e:	4770      	bx	lr

0000d190 <sdc_hci_cmd_vs_event_length_set>:
    d190:	f7fa b8ac 	b.w	72ec <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>

0000d194 <sdc_hci_cmd_vs_llpm_mode_set>:
    d194:	2001      	movs	r0, #1
    d196:	4770      	bx	lr

0000d198 <sdc_hci_cmd_vs_peripheral_latency_mode_set>:
    d198:	7881      	ldrb	r1, [r0, #2]
    d19a:	8800      	ldrh	r0, [r0, #0]
    d19c:	f002 bfc1 	b.w	10122 <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY>

0000d1a0 <sdc_hci_cmd_vs_qos_conn_event_report_enable>:
    d1a0:	7800      	ldrb	r0, [r0, #0]
    d1a2:	b100      	cbz	r0, d1a6 <sdc_hci_cmd_vs_qos_conn_event_report_enable+0x6>
    d1a4:	2001      	movs	r0, #1
    d1a6:	f002 bfb7 	b.w	10118 <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>

0000d1aa <sdc_hci_cmd_vs_set_adv_randomness>:
    d1aa:	f002 bfe4 	b.w	10176 <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI>

0000d1ae <sdc_hci_cmd_vs_zephyr_read_chip_temp>:
    d1ae:	b510      	push	{r4, lr}
    d1b0:	4604      	mov	r4, r0
    d1b2:	f7ff fa27 	bl	c604 <mpsl_temperature_get>
    d1b6:	17c1      	asrs	r1, r0, #31
    d1b8:	eb00 7091 	add.w	r0, r0, r1, lsr #30
    d1bc:	1080      	asrs	r0, r0, #2
    d1be:	287f      	cmp	r0, #127	; 0x7f
    d1c0:	dd01      	ble.n	d1c6 <sdc_hci_cmd_vs_zephyr_read_chip_temp+0x18>
    d1c2:	207f      	movs	r0, #127	; 0x7f
    d1c4:	e004      	b.n	d1d0 <sdc_hci_cmd_vs_zephyr_read_chip_temp+0x22>
    d1c6:	f06f 017e 	mvn.w	r1, #126	; 0x7e
    d1ca:	4288      	cmp	r0, r1
    d1cc:	da00      	bge.n	d1d0 <sdc_hci_cmd_vs_zephyr_read_chip_temp+0x22>
    d1ce:	4608      	mov	r0, r1
    d1d0:	7020      	strb	r0, [r4, #0]
    d1d2:	2000      	movs	r0, #0
    d1d4:	bd10      	pop	{r4, pc}

0000d1d6 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>:
    d1d6:	b570      	push	{r4, r5, r6, lr}
    d1d8:	4605      	mov	r5, r0
    d1da:	2210      	movs	r2, #16
    d1dc:	2100      	movs	r1, #0
    d1de:	f003 feab 	bl	10f38 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d1e2:	2210      	movs	r2, #16
    d1e4:	2100      	movs	r1, #0
    d1e6:	f105 0010 	add.w	r0, r5, #16
    d1ea:	f003 fea5 	bl	10f38 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d1ee:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
    d1f2:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    d1f6:	1c40      	adds	r0, r0, #1
    d1f8:	d10b      	bne.n	d212 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    d1fa:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    d1fe:	1c40      	adds	r0, r0, #1
    d200:	d107      	bne.n	d212 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    d202:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
    d206:	1c40      	adds	r0, r0, #1
    d208:	d103      	bne.n	d212 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    d20a:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    d20e:	1c40      	adds	r0, r0, #1
    d210:	d00b      	beq.n	d22a <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x54>
    d212:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
    d216:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    d21a:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
    d21e:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
    d222:	612a      	str	r2, [r5, #16]
    d224:	6168      	str	r0, [r5, #20]
    d226:	61a9      	str	r1, [r5, #24]
    d228:	61eb      	str	r3, [r5, #28]
    d22a:	2000      	movs	r0, #0
    d22c:	f7f4 ffb0 	bl	2190 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    d230:	b918      	cbnz	r0, d23a <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x64>
    d232:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
    d236:	07c0      	lsls	r0, r0, #31
    d238:	d118      	bne.n	d26c <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    d23a:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
    d23e:	1c40      	adds	r0, r0, #1
    d240:	d10b      	bne.n	d25a <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    d242:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    d246:	1c40      	adds	r0, r0, #1
    d248:	d107      	bne.n	d25a <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    d24a:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
    d24e:	1c40      	adds	r0, r0, #1
    d250:	d103      	bne.n	d25a <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    d252:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
    d256:	1c40      	adds	r0, r0, #1
    d258:	d008      	beq.n	d26c <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    d25a:	f854 0f90 	ldr.w	r0, [r4, #144]!
    d25e:	6861      	ldr	r1, [r4, #4]
    d260:	68a2      	ldr	r2, [r4, #8]
    d262:	68e3      	ldr	r3, [r4, #12]
    d264:	6028      	str	r0, [r5, #0]
    d266:	6069      	str	r1, [r5, #4]
    d268:	60aa      	str	r2, [r5, #8]
    d26a:	60eb      	str	r3, [r5, #12]
    d26c:	2000      	movs	r0, #0
    d26e:	bd70      	pop	{r4, r5, r6, pc}

0000d270 <sdc_hci_cmd_vs_zephyr_read_static_addresses>:
    d270:	b538      	push	{r3, r4, r5, lr}
    d272:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    d276:	4604      	mov	r4, r0
    d278:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    d27c:	1c40      	adds	r0, r0, #1
    d27e:	d105      	bne.n	d28c <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x1c>
    d280:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
    d284:	43c0      	mvns	r0, r0
    d286:	0400      	lsls	r0, r0, #16
    d288:	0c00      	lsrs	r0, r0, #16
    d28a:	d03e      	beq.n	d30a <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x9a>
    d28c:	f8d5 00a0 	ldr.w	r0, [r5, #160]	; 0xa0
    d290:	07c0      	lsls	r0, r0, #31
    d292:	d03a      	beq.n	d30a <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x9a>
    d294:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    d298:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
    d29c:	f8ad 1000 	strh.w	r1, [sp]
    d2a0:	f8c4 0001 	str.w	r0, [r4, #1]
    d2a4:	f8bd 0000 	ldrh.w	r0, [sp]
    d2a8:	f8a4 0005 	strh.w	r0, [r4, #5]
    d2ac:	79a0      	ldrb	r0, [r4, #6]
    d2ae:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
    d2b2:	71a0      	strb	r0, [r4, #6]
    d2b4:	f8d5 0090 	ldr.w	r0, [r5, #144]	; 0x90
    d2b8:	1c40      	adds	r0, r0, #1
    d2ba:	d00f      	beq.n	d2dc <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    d2bc:	f8d5 0094 	ldr.w	r0, [r5, #148]	; 0x94
    d2c0:	1c40      	adds	r0, r0, #1
    d2c2:	d00b      	beq.n	d2dc <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    d2c4:	f8d5 0098 	ldr.w	r0, [r5, #152]	; 0x98
    d2c8:	1c40      	adds	r0, r0, #1
    d2ca:	d007      	beq.n	d2dc <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    d2cc:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
    d2d0:	1c40      	adds	r0, r0, #1
    d2d2:	d003      	beq.n	d2dc <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    d2d4:	2000      	movs	r0, #0
    d2d6:	f7f4 ff5b 	bl	2190 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    d2da:	b140      	cbz	r0, d2ee <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x7e>
    d2dc:	2210      	movs	r2, #16
    d2de:	2100      	movs	r1, #0
    d2e0:	1de0      	adds	r0, r4, #7
    d2e2:	f003 fe29 	bl	10f38 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d2e6:	2001      	movs	r0, #1
    d2e8:	7020      	strb	r0, [r4, #0]
    d2ea:	2000      	movs	r0, #0
    d2ec:	bd38      	pop	{r3, r4, r5, pc}
    d2ee:	f855 2f90 	ldr.w	r2, [r5, #144]!
    d2f2:	6869      	ldr	r1, [r5, #4]
    d2f4:	68a8      	ldr	r0, [r5, #8]
    d2f6:	68eb      	ldr	r3, [r5, #12]
    d2f8:	f8c4 2007 	str.w	r2, [r4, #7]
    d2fc:	f8c4 100b 	str.w	r1, [r4, #11]
    d300:	f8c4 000f 	str.w	r0, [r4, #15]
    d304:	f8c4 3013 	str.w	r3, [r4, #19]
    d308:	e7ed      	b.n	d2e6 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x76>
    d30a:	2000      	movs	r0, #0
    d30c:	e7ec      	b.n	d2e8 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x78>

0000d30e <sdc_hci_cmd_vs_zephyr_write_bd_addr>:
    d30e:	f002 bf47 	b.w	101a0 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>

0000d312 <sdc_hci_cmd_ip_read_bd_addr>:
    d312:	f003 b846 	b.w	103a2 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>

0000d316 <sdc_hci_cmd_ip_read_local_version_information>:
    d316:	f7fa b801 	b.w	731c <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>

0000d31a <sdc_hci_cmd_le_add_device_to_filter_accept_list>:
    d31a:	f002 bcda 	b.w	fcd2 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>

0000d31e <sdc_hci_cmd_le_clear_filter_accept_list>:
    d31e:	f002 bcef 	b.w	fd00 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>

0000d322 <sdc_hci_cmd_le_encrypt>:
    d322:	f002 bcf7 	b.w	fd14 <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>

0000d326 <sdc_hci_cmd_le_long_term_key_request_negative_reply>:
    d326:	8802      	ldrh	r2, [r0, #0]
    d328:	800a      	strh	r2, [r1, #0]
    d32a:	f002 bcfc 	b.w	fd26 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>

0000d32e <sdc_hci_cmd_le_long_term_key_request_reply>:
    d32e:	8802      	ldrh	r2, [r0, #0]
    d330:	800a      	strh	r2, [r1, #0]
    d332:	f002 bd11 	b.w	fd58 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI>

0000d336 <sdc_hci_cmd_le_rand>:
    d336:	f002 bd39 	b.w	fdac <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>

0000d33a <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>:
    d33a:	f002 bd3d 	b.w	fdb8 <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>

0000d33e <sdc_hci_cmd_le_read_buffer_size>:
    d33e:	f7f9 bedd 	b.w	70fc <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>

0000d342 <sdc_hci_cmd_le_read_channel_map>:
    d342:	f7f9 bee5 	b.w	7110 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>

0000d346 <sdc_hci_cmd_le_read_filter_accept_list_size>:
    d346:	f002 bd77 	b.w	fe38 <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>

0000d34a <sdc_hci_cmd_le_read_max_data_length>:
    d34a:	f002 bd40 	b.w	fdce <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>

0000d34e <sdc_hci_cmd_le_read_phy>:
    d34e:	f7f9 bf07 	b.w	7160 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>

0000d352 <sdc_hci_cmd_le_read_remote_features>:
    d352:	f002 bd45 	b.w	fde0 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>

0000d356 <sdc_hci_cmd_le_read_suggested_default_data_length>:
    d356:	f7f9 bf29 	b.w	71ac <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>

0000d35a <sdc_hci_cmd_le_read_transmit_power>:
    d35a:	f002 bd5d 	b.w	fe18 <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>

0000d35e <sdc_hci_cmd_le_remove_device_from_filter_accept_list>:
    d35e:	f002 bd6f 	b.w	fe40 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>

0000d362 <sdc_hci_cmd_le_set_adv_data>:
    d362:	f002 bd82 	b.w	fe6a <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>

0000d366 <sdc_hci_cmd_le_set_adv_enable>:
    d366:	f002 bd95 	b.w	fe94 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>

0000d36a <sdc_hci_cmd_le_set_adv_params>:
    d36a:	f002 bdc6 	b.w	fefa <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>

0000d36e <sdc_hci_cmd_le_set_data_length>:
    d36e:	f002 be59 	b.w	10024 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>

0000d372 <sdc_hci_cmd_le_set_data_related_address_changes>:
    d372:	f002 be77 	b.w	10064 <sym_QUXPDBBA3LF6URTUQCXVFN4UTAQY2K4DGZD5OMY>

0000d376 <sdc_hci_cmd_le_set_default_phy>:
    d376:	f7f9 bf23 	b.w	71c0 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>

0000d37a <sdc_hci_cmd_le_set_event_mask>:
    d37a:	b510      	push	{r4, lr}
    d37c:	f7f4 f9d0 	bl	1720 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>
    d380:	2000      	movs	r0, #0
    d382:	bd10      	pop	{r4, pc}

0000d384 <sdc_hci_cmd_le_set_phy>:
    d384:	f002 be7b 	b.w	1007e <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>

0000d388 <sdc_hci_cmd_le_set_random_address>:
    d388:	f002 be92 	b.w	100b0 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>

0000d38c <sdc_hci_cmd_le_set_scan_response_data>:
    d38c:	f002 be9e 	b.w	100cc <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>

0000d390 <sdc_hci_cmd_le_write_suggested_default_data_length>:
    d390:	f002 beb1 	b.w	100f6 <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>

0000d394 <sdc_hci_cmd_lc_disconnect>:
    d394:	f002 bc4f 	b.w	fc36 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>

0000d398 <sdc_hci_cmd_lc_read_remote_version_information>:
    d398:	f7f9 bfca 	b.w	7330 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>
    d39c:	b570      	push	{r4, r5, r6, lr}
    d39e:	880b      	ldrh	r3, [r1, #0]
    d3a0:	7cc4      	ldrb	r4, [r0, #19]
    d3a2:	f100 0518 	add.w	r5, r0, #24
    d3a6:	f3c3 060e 	ubfx	r6, r3, #0, #15
    d3aa:	8802      	ldrh	r2, [r0, #0]
    d3ac:	4435      	add	r5, r6
    d3ae:	1d64      	adds	r4, r4, #5
    d3b0:	882d      	ldrh	r5, [r5, #0]
    d3b2:	4422      	add	r2, r4
    d3b4:	b292      	uxth	r2, r2
    d3b6:	4425      	add	r5, r4
    d3b8:	1e54      	subs	r4, r2, #1
    d3ba:	442c      	add	r4, r5
    d3bc:	fb94 f4f2 	sdiv	r4, r4, r2
    d3c0:	fb02 6204 	mla	r2, r2, r4, r6
    d3c4:	8840      	ldrh	r0, [r0, #2]
    d3c6:	b292      	uxth	r2, r2
    d3c8:	4290      	cmp	r0, r2
    d3ca:	d903      	bls.n	d3d4 <sdc_hci_cmd_lc_read_remote_version_information+0x3c>
    d3cc:	f403 4000 	and.w	r0, r3, #32768	; 0x8000
    d3d0:	4310      	orrs	r0, r2
    d3d2:	e002      	b.n	d3da <sdc_hci_cmd_lc_read_remote_version_information+0x42>
    d3d4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    d3d8:	4398      	bics	r0, r3
    d3da:	8008      	strh	r0, [r1, #0]
    d3dc:	bd70      	pop	{r4, r5, r6, pc}
    d3de:	0442      	lsls	r2, r0, #17
    d3e0:	ebb2 4f41 	cmp.w	r2, r1, lsl #17
    d3e4:	d107      	bne.n	d3f6 <sdc_hci_cmd_lc_read_remote_version_information+0x5e>
    d3e6:	f400 4000 	and.w	r0, r0, #32768	; 0x8000
    d3ea:	f401 4100 	and.w	r1, r1, #32768	; 0x8000
    d3ee:	4288      	cmp	r0, r1
    d3f0:	d001      	beq.n	d3f6 <sdc_hci_cmd_lc_read_remote_version_information+0x5e>
    d3f2:	2001      	movs	r0, #1
    d3f4:	4770      	bx	lr
    d3f6:	2000      	movs	r0, #0
    d3f8:	4770      	bx	lr

0000d3fa <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>:
    d3fa:	8881      	ldrh	r1, [r0, #4]
    d3fc:	88c0      	ldrh	r0, [r0, #6]
    d3fe:	4288      	cmp	r0, r1
    d400:	d101      	bne.n	d406 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI+0xc>
    d402:	2001      	movs	r0, #1
    d404:	4770      	bx	lr
    d406:	2000      	movs	r0, #0
    d408:	4770      	bx	lr

0000d40a <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>:
    d40a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d40e:	460f      	mov	r7, r1
    d410:	4604      	mov	r4, r0
    d412:	f100 0118 	add.w	r1, r0, #24
    d416:	8880      	ldrh	r0, [r0, #4]
    d418:	2600      	movs	r6, #0
    d41a:	f3c0 000e 	ubfx	r0, r0, #0, #15
    d41e:	1845      	adds	r5, r0, r1
    d420:	603e      	str	r6, [r7, #0]
    d422:	89e0      	ldrh	r0, [r4, #14]
    d424:	2800      	cmp	r0, #0
    d426:	d016      	beq.n	d456 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x4c>
    d428:	8961      	ldrh	r1, [r4, #10]
    d42a:	4408      	add	r0, r1
    d42c:	b280      	uxth	r0, r0
    d42e:	8160      	strh	r0, [r4, #10]
    d430:	8829      	ldrh	r1, [r5, #0]
    d432:	4288      	cmp	r0, r1
    d434:	d905      	bls.n	d442 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x38>
    d436:	f240 1151 	movw	r1, #337	; 0x151
    d43a:	f04f 0014 	mov.w	r0, #20
    d43e:	f7f3 ffdd 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d442:	d106      	bne.n	d452 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x48>
    d444:	f104 0104 	add.w	r1, r4, #4
    d448:	4620      	mov	r0, r4
    d44a:	f7ff ffa7 	bl	d39c <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d44e:	8166      	strh	r6, [r4, #10]
    d450:	603d      	str	r5, [r7, #0]
    d452:	81e6      	strh	r6, [r4, #14]
    d454:	2001      	movs	r0, #1
    d456:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d45a <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>:
    d45a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d45e:	4604      	mov	r4, r0
    d460:	f100 0318 	add.w	r3, r0, #24
    d464:	88c0      	ldrh	r0, [r0, #6]
    d466:	460e      	mov	r6, r1
    d468:	f3c0 070e 	ubfx	r7, r0, #0, #15
    d46c:	8a20      	ldrh	r0, [r4, #16]
    d46e:	19d9      	adds	r1, r3, r7
    d470:	b108      	cbz	r0, d476 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1c>
    d472:	42b0      	cmp	r0, r6
    d474:	d202      	bcs.n	d47c <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x22>
    d476:	2000      	movs	r0, #0
    d478:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d47c:	89a0      	ldrh	r0, [r4, #12]
    d47e:	2500      	movs	r5, #0
    d480:	b140      	cbz	r0, d494 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x3a>
    d482:	f8b1 c000 	ldrh.w	ip, [r1]
    d486:	4560      	cmp	r0, ip
    d488:	d006      	beq.n	d498 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x3e>
    d48a:	f44f 7101 	mov.w	r1, #516	; 0x204
    d48e:	2014      	movs	r0, #20
    d490:	f7f3 ffb4 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d494:	800d      	strh	r5, [r1, #0]
    d496:	e00e      	b.n	d4b6 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x5c>
    d498:	f894 c013 	ldrb.w	ip, [r4, #19]
    d49c:	4418      	add	r0, r3
    d49e:	f10c 0c05 	add.w	ip, ip, #5
    d4a2:	44bc      	add	ip, r7
    d4a4:	4460      	add	r0, ip
    d4a6:	f8b4 c014 	ldrh.w	ip, [r4, #20]
    d4aa:	f820 cc03 	strh.w	ip, [r0, #-3]
    d4ae:	f894 c016 	ldrb.w	ip, [r4, #22]
    d4b2:	f800 cc01 	strb.w	ip, [r0, #-1]
    d4b6:	89a0      	ldrh	r0, [r4, #12]
    d4b8:	4430      	add	r0, r6
    d4ba:	81a0      	strh	r0, [r4, #12]
    d4bc:	8808      	ldrh	r0, [r1, #0]
    d4be:	4430      	add	r0, r6
    d4c0:	8008      	strh	r0, [r1, #0]
    d4c2:	b12a      	cbz	r2, d4d0 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x76>
    d4c4:	1da1      	adds	r1, r4, #6
    d4c6:	4620      	mov	r0, r4
    d4c8:	f7ff ff68 	bl	d39c <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d4cc:	81a5      	strh	r5, [r4, #12]
    d4ce:	e00a      	b.n	d4e6 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x8c>
    d4d0:	7ce0      	ldrb	r0, [r4, #19]
    d4d2:	89a1      	ldrh	r1, [r4, #12]
    d4d4:	1d40      	adds	r0, r0, #5
    d4d6:	4438      	add	r0, r7
    d4d8:	4419      	add	r1, r3
    d4da:	4408      	add	r0, r1
    d4dc:	f830 1d03 	ldrh.w	r1, [r0, #-3]!
    d4e0:	82a1      	strh	r1, [r4, #20]
    d4e2:	7880      	ldrb	r0, [r0, #2]
    d4e4:	75a0      	strb	r0, [r4, #22]
    d4e6:	8225      	strh	r5, [r4, #16]
    d4e8:	2001      	movs	r0, #1
    d4ea:	e7c5      	b.n	d478 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1e>

0000d4ec <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>:
    d4ec:	1c80      	adds	r0, r0, #2
    d4ee:	4770      	bx	lr

0000d4f0 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>:
    d4f0:	b510      	push	{r4, lr}
    d4f2:	4604      	mov	r4, r0
    d4f4:	88c0      	ldrh	r0, [r0, #6]
    d4f6:	88a1      	ldrh	r1, [r4, #4]
    d4f8:	4281      	cmp	r1, r0
    d4fa:	d003      	beq.n	d504 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x14>
    d4fc:	8960      	ldrh	r0, [r4, #10]
    d4fe:	b908      	cbnz	r0, d504 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x14>
    d500:	89e0      	ldrh	r0, [r4, #14]
    d502:	b108      	cbz	r0, d508 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x18>
    d504:	2000      	movs	r0, #0
    d506:	bd10      	pop	{r4, pc}
    d508:	1d21      	adds	r1, r4, #4
    d50a:	4620      	mov	r0, r4
    d50c:	f7ff ff46 	bl	d39c <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d510:	2000      	movs	r0, #0
    d512:	81e0      	strh	r0, [r4, #14]
    d514:	2001      	movs	r0, #1
    d516:	bd10      	pop	{r4, pc}

0000d518 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>:
    d518:	b510      	push	{r4, lr}
    d51a:	4604      	mov	r4, r0
    d51c:	f100 0218 	add.w	r2, r0, #24
    d520:	88c0      	ldrh	r0, [r0, #6]
    d522:	f3c0 000e 	ubfx	r0, r0, #0, #15
    d526:	4402      	add	r2, r0
    d528:	8820      	ldrh	r0, [r4, #0]
    d52a:	2845      	cmp	r0, #69	; 0x45
    d52c:	d200      	bcs.n	d530 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x18>
    d52e:	2045      	movs	r0, #69	; 0x45
    d530:	4288      	cmp	r0, r1
    d532:	d204      	bcs.n	d53e <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x26>
    d534:	f44f 7182 	mov.w	r1, #260	; 0x104
    d538:	2014      	movs	r0, #20
    d53a:	f7f3 ff5f 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d53e:	7ca0      	ldrb	r0, [r4, #18]
    d540:	2800      	cmp	r0, #0
    d542:	d003      	beq.n	d54c <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x34>
    d544:	8810      	ldrh	r0, [r2, #0]
    d546:	4288      	cmp	r0, r1
    d548:	d201      	bcs.n	d54e <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x36>
    d54a:	2000      	movs	r0, #0
    d54c:	bd10      	pop	{r4, pc}
    d54e:	8011      	strh	r1, [r2, #0]
    d550:	1da1      	adds	r1, r4, #6
    d552:	4620      	mov	r0, r4
    d554:	f7ff ff22 	bl	d39c <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d558:	2000      	movs	r0, #0
    d55a:	74a0      	strb	r0, [r4, #18]
    d55c:	2001      	movs	r0, #1
    d55e:	bd10      	pop	{r4, pc}

0000d560 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>:
    d560:	b510      	push	{r4, lr}
    d562:	88c4      	ldrh	r4, [r0, #6]
    d564:	8883      	ldrh	r3, [r0, #4]
    d566:	4601      	mov	r1, r0
    d568:	f100 0218 	add.w	r2, r0, #24
    d56c:	f3c3 000e 	ubfx	r0, r3, #0, #15
    d570:	4410      	add	r0, r2
    d572:	42a3      	cmp	r3, r4
    d574:	d002      	beq.n	d57c <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x1c>
    d576:	8949      	ldrh	r1, [r1, #10]
    d578:	2900      	cmp	r1, #0
    d57a:	d000      	beq.n	d57e <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x1e>
    d57c:	2000      	movs	r0, #0
    d57e:	bd10      	pop	{r4, pc}

0000d580 <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>:
    d580:	8803      	ldrh	r3, [r0, #0]
    d582:	2b45      	cmp	r3, #69	; 0x45
    d584:	d200      	bcs.n	d588 <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA+0x8>
    d586:	2345      	movs	r3, #69	; 0x45
    d588:	8013      	strh	r3, [r2, #0]
    d58a:	88c2      	ldrh	r2, [r0, #6]
    d58c:	f3c2 030e 	ubfx	r3, r2, #0, #15
    d590:	f100 0218 	add.w	r2, r0, #24
    d594:	441a      	add	r2, r3
    d596:	600a      	str	r2, [r1, #0]
    d598:	8980      	ldrh	r0, [r0, #12]
    d59a:	4770      	bx	lr

0000d59c <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>:
    d59c:	7cc0      	ldrb	r0, [r0, #19]
    d59e:	1d40      	adds	r0, r0, #5
    d5a0:	4408      	add	r0, r1
    d5a2:	1ec0      	subs	r0, r0, #3
    d5a4:	6010      	str	r0, [r2, #0]
    d5a6:	8808      	ldrh	r0, [r1, #0]
    d5a8:	4770      	bx	lr

0000d5aa <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>:
    d5aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d5ae:	460e      	mov	r6, r1
    d5b0:	88c1      	ldrh	r1, [r0, #6]
    d5b2:	8902      	ldrh	r2, [r0, #8]
    d5b4:	4604      	mov	r4, r0
    d5b6:	f100 0818 	add.w	r8, r0, #24
    d5ba:	8800      	ldrh	r0, [r0, #0]
    d5bc:	f3c1 050e 	ubfx	r5, r1, #0, #15
    d5c0:	f3c2 070e 	ubfx	r7, r2, #0, #15
    d5c4:	2845      	cmp	r0, #69	; 0x45
    d5c6:	d200      	bcs.n	d5ca <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x20>
    d5c8:	2045      	movs	r0, #69	; 0x45
    d5ca:	42b0      	cmp	r0, r6
    d5cc:	d203      	bcs.n	d5d6 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x2c>
    d5ce:	21c6      	movs	r1, #198	; 0xc6
    d5d0:	2014      	movs	r0, #20
    d5d2:	f7f3 ff13 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d5d6:	4610      	mov	r0, r2
    d5d8:	f7ff ff01 	bl	d3de <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    d5dc:	b110      	cbz	r0, d5e4 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x3a>
    d5de:	2000      	movs	r0, #0
    d5e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d5e4:	42af      	cmp	r7, r5
    d5e6:	d908      	bls.n	d5fa <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    d5e8:	7ce1      	ldrb	r1, [r4, #19]
    d5ea:	1b78      	subs	r0, r7, r5
    d5ec:	1a40      	subs	r0, r0, r1
    d5ee:	1f40      	subs	r0, r0, #5
    d5f0:	4286      	cmp	r6, r0
    d5f2:	dd02      	ble.n	d5fa <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    d5f4:	2000      	movs	r0, #0
    d5f6:	74a0      	strb	r0, [r4, #18]
    d5f8:	e7f1      	b.n	d5de <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x34>
    d5fa:	eb08 0005 	add.w	r0, r8, r5
    d5fe:	2101      	movs	r1, #1
    d600:	8006      	strh	r6, [r0, #0]
    d602:	74a1      	strb	r1, [r4, #18]
    d604:	e7ec      	b.n	d5e0 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x36>

0000d606 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>:
    d606:	b538      	push	{r3, r4, r5, lr}
    d608:	88c4      	ldrh	r4, [r0, #6]
    d60a:	8881      	ldrh	r1, [r0, #4]
    d60c:	f100 0218 	add.w	r2, r0, #24
    d610:	f3c1 030e 	ubfx	r3, r1, #0, #15
    d614:	441a      	add	r2, r3
    d616:	42a1      	cmp	r1, r4
    d618:	d010      	beq.n	d63c <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    d61a:	8943      	ldrh	r3, [r0, #10]
    d61c:	89c5      	ldrh	r5, [r0, #14]
    d61e:	8812      	ldrh	r2, [r2, #0]
    d620:	442b      	add	r3, r5
    d622:	4293      	cmp	r3, r2
    d624:	d308      	bcc.n	d638 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x32>
    d626:	f8ad 1000 	strh.w	r1, [sp]
    d62a:	4669      	mov	r1, sp
    d62c:	f7ff feb6 	bl	d39c <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d630:	f8bd 0000 	ldrh.w	r0, [sp]
    d634:	42a0      	cmp	r0, r4
    d636:	d001      	beq.n	d63c <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    d638:	2001      	movs	r0, #1
    d63a:	bd38      	pop	{r3, r4, r5, pc}
    d63c:	2000      	movs	r0, #0
    d63e:	bd38      	pop	{r3, r4, r5, pc}

0000d640 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>:
    d640:	b570      	push	{r4, r5, r6, lr}
    d642:	88c6      	ldrh	r6, [r0, #6]
    d644:	8885      	ldrh	r5, [r0, #4]
    d646:	4603      	mov	r3, r0
    d648:	f100 0418 	add.w	r4, r0, #24
    d64c:	f3c5 000e 	ubfx	r0, r5, #0, #15
    d650:	4420      	add	r0, r4
    d652:	42b5      	cmp	r5, r6
    d654:	d102      	bne.n	d65c <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x1c>
    d656:	2000      	movs	r0, #0
    d658:	81d8      	strh	r0, [r3, #14]
    d65a:	bd70      	pop	{r4, r5, r6, pc}
    d65c:	8804      	ldrh	r4, [r0, #0]
    d65e:	895d      	ldrh	r5, [r3, #10]
    d660:	7cde      	ldrb	r6, [r3, #19]
    d662:	1b64      	subs	r4, r4, r5
    d664:	4435      	add	r5, r6
    d666:	4428      	add	r0, r5
    d668:	880d      	ldrh	r5, [r1, #0]
    d66a:	b2a4      	uxth	r4, r4
    d66c:	1c80      	adds	r0, r0, #2
    d66e:	42a5      	cmp	r5, r4
    d670:	d900      	bls.n	d674 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x34>
    d672:	800c      	strh	r4, [r1, #0]
    d674:	895c      	ldrh	r4, [r3, #10]
    d676:	b124      	cbz	r4, d682 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x42>
    d678:	2400      	movs	r4, #0
    d67a:	7014      	strb	r4, [r2, #0]
    d67c:	8809      	ldrh	r1, [r1, #0]
    d67e:	81d9      	strh	r1, [r3, #14]
    d680:	bd70      	pop	{r4, r5, r6, pc}
    d682:	2401      	movs	r4, #1
    d684:	e7f9      	b.n	d67a <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x3a>

0000d686 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>:
    d686:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d68a:	461d      	mov	r5, r3
    d68c:	4616      	mov	r6, r2
    d68e:	9f06      	ldr	r7, [sp, #24]
    d690:	460b      	mov	r3, r1
    d692:	4604      	mov	r4, r0
    d694:	463a      	mov	r2, r7
    d696:	4629      	mov	r1, r5
    d698:	4630      	mov	r0, r6
    d69a:	f000 f839 	bl	d710 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    d69e:	4283      	cmp	r3, r0
    d6a0:	d201      	bcs.n	d6a6 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x20>
    d6a2:	219e      	movs	r1, #158	; 0x9e
    d6a4:	e012      	b.n	d6cc <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x46>
    d6a6:	07a0      	lsls	r0, r4, #30
    d6a8:	d001      	beq.n	d6ae <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x28>
    d6aa:	219f      	movs	r1, #159	; 0x9f
    d6ac:	e00e      	b.n	d6cc <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x46>
    d6ae:	2218      	movs	r2, #24
    d6b0:	2100      	movs	r1, #0
    d6b2:	4620      	mov	r0, r4
    d6b4:	f003 fc40 	bl	10f38 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d6b8:	19a8      	adds	r0, r5, r6
    d6ba:	1d40      	adds	r0, r0, #5
    d6bc:	4378      	muls	r0, r7
    d6be:	b280      	uxth	r0, r0
    d6c0:	74e5      	strb	r5, [r4, #19]
    d6c2:	8060      	strh	r0, [r4, #2]
    d6c4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    d6c8:	d903      	bls.n	d6d2 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x4c>
    d6ca:	21a4      	movs	r1, #164	; 0xa4
    d6cc:	2014      	movs	r0, #20
    d6ce:	f7f3 fe95 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d6d2:	8026      	strh	r6, [r4, #0]
    d6d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d6d8 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>:
    d6d8:	b570      	push	{r4, r5, r6, lr}
    d6da:	460b      	mov	r3, r1
    d6dc:	4604      	mov	r4, r0
    d6de:	f100 0118 	add.w	r1, r0, #24
    d6e2:	8902      	ldrh	r2, [r0, #8]
    d6e4:	8880      	ldrh	r0, [r0, #4]
    d6e6:	f3c2 050e 	ubfx	r5, r2, #0, #15
    d6ea:	440d      	add	r5, r1
    d6ec:	4282      	cmp	r2, r0
    d6ee:	d101      	bne.n	d6f4 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x1c>
    d6f0:	2000      	movs	r0, #0
    d6f2:	bd70      	pop	{r4, r5, r6, pc}
    d6f4:	b123      	cbz	r3, d700 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x28>
    d6f6:	7ce2      	ldrb	r2, [r4, #19]
    d6f8:	1ca9      	adds	r1, r5, #2
    d6fa:	4618      	mov	r0, r3
    d6fc:	f003 fba2 	bl	10e44 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d700:	882d      	ldrh	r5, [r5, #0]
    d702:	f104 0108 	add.w	r1, r4, #8
    d706:	4620      	mov	r0, r4
    d708:	f7ff fe48 	bl	d39c <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d70c:	4628      	mov	r0, r5
    d70e:	bd70      	pop	{r4, r5, r6, pc}

0000d710 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>:
    d710:	4401      	add	r1, r0
    d712:	1d49      	adds	r1, r1, #5
    d714:	4351      	muls	r1, r2
    d716:	b28a      	uxth	r2, r1
    d718:	2100      	movs	r1, #0
    d71a:	2845      	cmp	r0, #69	; 0x45
    d71c:	d202      	bcs.n	d724 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY+0x14>
    d71e:	f1c0 0045 	rsb	r0, r0, #69	; 0x45
    d722:	b281      	uxth	r1, r0
    d724:	3218      	adds	r2, #24
    d726:	1850      	adds	r0, r2, r1
    d728:	b280      	uxth	r0, r0
    d72a:	4770      	bx	lr

0000d72c <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>:
    d72c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d730:	4688      	mov	r8, r1
    d732:	88c1      	ldrh	r1, [r0, #6]
    d734:	4604      	mov	r4, r0
    d736:	8900      	ldrh	r0, [r0, #8]
    d738:	f3c1 060e 	ubfx	r6, r1, #0, #15
    d73c:	f104 0518 	add.w	r5, r4, #24
    d740:	f3c0 070e 	ubfx	r7, r0, #0, #15
    d744:	eb05 0906 	add.w	r9, r5, r6
    d748:	f7ff fe49 	bl	d3de <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    d74c:	2200      	movs	r2, #0
    d74e:	b998      	cbnz	r0, d778 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x4c>
    d750:	8820      	ldrh	r0, [r4, #0]
    d752:	2845      	cmp	r0, #69	; 0x45
    d754:	d200      	bcs.n	d758 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x2c>
    d756:	2045      	movs	r0, #69	; 0x45
    d758:	42b7      	cmp	r7, r6
    d75a:	d906      	bls.n	d76a <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    d75c:	7ce3      	ldrb	r3, [r4, #19]
    d75e:	1bb9      	subs	r1, r7, r6
    d760:	1ac9      	subs	r1, r1, r3
    d762:	1f49      	subs	r1, r1, #5
    d764:	4281      	cmp	r1, r0
    d766:	da00      	bge.n	d76a <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    d768:	4608      	mov	r0, r1
    d76a:	89a1      	ldrh	r1, [r4, #12]
    d76c:	b111      	cbz	r1, d774 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x48>
    d76e:	f8b9 3000 	ldrh.w	r3, [r9]
    d772:	1ac0      	subs	r0, r0, r3
    d774:	4540      	cmp	r0, r8
    d776:	da03      	bge.n	d780 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x54>
    d778:	8222      	strh	r2, [r4, #16]
    d77a:	2000      	movs	r0, #0
    d77c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d780:	7ce0      	ldrb	r0, [r4, #19]
    d782:	4429      	add	r1, r5
    d784:	1d40      	adds	r0, r0, #5
    d786:	4430      	add	r0, r6
    d788:	4408      	add	r0, r1
    d78a:	f8a4 8010 	strh.w	r8, [r4, #16]
    d78e:	1ec0      	subs	r0, r0, #3
    d790:	e7f4      	b.n	d77c <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x50>

0000d792 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>:
    d792:	b570      	push	{r4, r5, r6, lr}
    d794:	2300      	movs	r3, #0
    d796:	f1a1 0208 	sub.w	r2, r1, #8
    d79a:	f64f 74f7 	movw	r4, #65527	; 0xfff7
    d79e:	42a2      	cmp	r2, r4
    d7a0:	d304      	bcc.n	d7ac <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x1a>
    d7a2:	f240 11cd 	movw	r1, #461	; 0x1cd
    d7a6:	2015      	movs	r0, #21
    d7a8:	f7f3 fe28 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d7ac:	6802      	ldr	r2, [r0, #0]
    d7ae:	b90a      	cbnz	r2, d7b4 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x22>
    d7b0:	e01e      	b.n	d7f0 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5e>
    d7b2:	4610      	mov	r0, r2
    d7b4:	6802      	ldr	r2, [r0, #0]
    d7b6:	8893      	ldrh	r3, [r2, #4]
    d7b8:	428b      	cmp	r3, r1
    d7ba:	d002      	beq.n	d7c2 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x30>
    d7bc:	6813      	ldr	r3, [r2, #0]
    d7be:	2b00      	cmp	r3, #0
    d7c0:	d1f7      	bne.n	d7b2 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x20>
    d7c2:	8894      	ldrh	r4, [r2, #4]
    d7c4:	4613      	mov	r3, r2
    d7c6:	428c      	cmp	r4, r1
    d7c8:	d101      	bne.n	d7ce <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x3c>
    d7ca:	6811      	ldr	r1, [r2, #0]
    d7cc:	e00d      	b.n	d7ea <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x58>
    d7ce:	f101 0508 	add.w	r5, r1, #8
    d7d2:	b2ae      	uxth	r6, r5
    d7d4:	2500      	movs	r5, #0
    d7d6:	42b4      	cmp	r4, r6
    d7d8:	d309      	bcc.n	d7ee <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5c>
    d7da:	1a64      	subs	r4, r4, r1
    d7dc:	4411      	add	r1, r2
    d7de:	600d      	str	r5, [r1, #0]
    d7e0:	808c      	strh	r4, [r1, #4]
    d7e2:	6802      	ldr	r2, [r0, #0]
    d7e4:	6812      	ldr	r2, [r2, #0]
    d7e6:	6002      	str	r2, [r0, #0]
    d7e8:	600a      	str	r2, [r1, #0]
    d7ea:	6001      	str	r1, [r0, #0]
    d7ec:	e000      	b.n	d7f0 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5e>
    d7ee:	2300      	movs	r3, #0
    d7f0:	4618      	mov	r0, r3
    d7f2:	bd70      	pop	{r4, r5, r6, pc}

0000d7f4 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>:
    d7f4:	b510      	push	{r4, lr}
    d7f6:	000c      	movs	r4, r1
    d7f8:	d004      	beq.n	d804 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x10>
    d7fa:	2c08      	cmp	r4, #8
    d7fc:	d207      	bcs.n	d80e <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1a>
    d7fe:	f240 1195 	movw	r1, #405	; 0x195
    d802:	e00a      	b.n	d81a <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x26>
    d804:	b108      	cbz	r0, d80a <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x16>
    d806:	2100      	movs	r1, #0
    d808:	6001      	str	r1, [r0, #0]
    d80a:	2000      	movs	r0, #0
    d80c:	bd10      	pop	{r4, pc}
    d80e:	b158      	cbz	r0, d828 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x34>
    d810:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
    d814:	d304      	bcc.n	d820 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x2c>
    d816:	f240 11a7 	movw	r1, #423	; 0x1a7
    d81a:	2015      	movs	r0, #21
    d81c:	f7f3 fdee 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d820:	b2a1      	uxth	r1, r4
    d822:	6800      	ldr	r0, [r0, #0]
    d824:	f000 f814 	bl	d850 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>
    d828:	1d20      	adds	r0, r4, #4
    d82a:	bd10      	pop	{r4, pc}

0000d82c <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>:
    d82c:	2100      	movs	r1, #0
    d82e:	6802      	ldr	r2, [r0, #0]
    d830:	e003      	b.n	d83a <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0xe>
    d832:	8893      	ldrh	r3, [r2, #4]
    d834:	6812      	ldr	r2, [r2, #0]
    d836:	4419      	add	r1, r3
    d838:	b289      	uxth	r1, r1
    d83a:	2a00      	cmp	r2, #0
    d83c:	d1f9      	bne.n	d832 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0x6>
    d83e:	f000 b807 	b.w	d850 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>

0000d842 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>:
    d842:	2300      	movs	r3, #0
    d844:	600b      	str	r3, [r1, #0]
    d846:	808a      	strh	r2, [r1, #4]
    d848:	6802      	ldr	r2, [r0, #0]
    d84a:	600a      	str	r2, [r1, #0]
    d84c:	6001      	str	r1, [r0, #0]
    d84e:	4770      	bx	lr
    d850:	2300      	movs	r3, #0
    d852:	6043      	str	r3, [r0, #4]
    d854:	1d02      	adds	r2, r0, #4
    d856:	8101      	strh	r1, [r0, #8]
    d858:	6002      	str	r2, [r0, #0]
    d85a:	4770      	bx	lr

0000d85c <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>:
    d85c:	b51c      	push	{r2, r3, r4, lr}
    d85e:	4604      	mov	r4, r0
    d860:	2000      	movs	r0, #0
    d862:	9001      	str	r0, [sp, #4]
    d864:	9000      	str	r0, [sp, #0]
    d866:	f88d 4006 	strb.w	r4, [sp, #6]
    d86a:	e00a      	b.n	d882 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x26>
    d86c:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    d870:	4621      	mov	r1, r4
    d872:	f7f4 f849 	bl	1908 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    d876:	b120      	cbz	r0, d882 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x26>
    d878:	f44f 7129 	mov.w	r1, #676	; 0x2a4
    d87c:	2017      	movs	r0, #23
    d87e:	f7f3 fdbd 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d882:	4668      	mov	r0, sp
    d884:	f7f3 fff8 	bl	1878 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    d888:	2800      	cmp	r0, #0
    d88a:	d0ef      	beq.n	d86c <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x10>
    d88c:	bd1c      	pop	{r2, r3, r4, pc}

0000d88e <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>:
    d88e:	f5a0 427f 	sub.w	r2, r0, #65280	; 0xff00
    d892:	3aff      	subs	r2, #255	; 0xff
    d894:	d001      	beq.n	d89a <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0xc>
    d896:	2902      	cmp	r1, #2
    d898:	d301      	bcc.n	d89e <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0x10>
    d89a:	2000      	movs	r0, #0
    d89c:	4770      	bx	lr
    d89e:	f7f4 b865 	b.w	196c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x64>

0000d8a2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>:
    d8a2:	f5a0 427f 	sub.w	r2, r0, #65280	; 0xff00
    d8a6:	3aff      	subs	r2, #255	; 0xff
    d8a8:	d001      	beq.n	d8ae <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0xc>
    d8aa:	2902      	cmp	r1, #2
    d8ac:	d301      	bcc.n	d8b2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x10>
    d8ae:	2000      	movs	r0, #0
    d8b0:	4770      	bx	lr
    d8b2:	f7f4 b883 	b.w	19bc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb4>
    d8b6:	b510      	push	{r4, lr}
    d8b8:	4604      	mov	r4, r0
    d8ba:	f7f4 f8cb 	bl	1a54 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x14c>
    d8be:	42a0      	cmp	r0, r4
    d8c0:	d901      	bls.n	d8c6 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x24>
    d8c2:	2001      	movs	r0, #1
    d8c4:	bd10      	pop	{r4, pc}
    d8c6:	2000      	movs	r0, #0
    d8c8:	bd10      	pop	{r4, pc}

0000d8ca <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>:
    d8ca:	b570      	push	{r4, r5, r6, lr}
    d8cc:	460e      	mov	r6, r1
    d8ce:	461d      	mov	r5, r3
    d8d0:	4611      	mov	r1, r2
    d8d2:	f000 f813 	bl	d8fc <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x32>
    d8d6:	4604      	mov	r4, r0
    d8d8:	4629      	mov	r1, r5
    d8da:	4630      	mov	r0, r6
    d8dc:	f000 f804 	bl	d8e8 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1e>
    d8e0:	4420      	add	r0, r4
    d8e2:	1d00      	adds	r0, r0, #4
    d8e4:	b280      	uxth	r0, r0
    d8e6:	bd70      	pop	{r4, r5, r6, pc}
    d8e8:	b510      	push	{r4, lr}
    d8ea:	460a      	mov	r2, r1
    d8ec:	2109      	movs	r1, #9
    d8ee:	f7ff ff0f 	bl	d710 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    d8f2:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    d8f6:	1cc0      	adds	r0, r0, #3
    d8f8:	4008      	ands	r0, r1
    d8fa:	bd10      	pop	{r4, pc}
    d8fc:	b510      	push	{r4, lr}
    d8fe:	460a      	mov	r2, r1
    d900:	210a      	movs	r1, #10
    d902:	f7ff ff05 	bl	d710 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    d906:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    d90a:	1cc0      	adds	r0, r0, #3
    d90c:	4008      	ands	r0, r1
    d90e:	bd10      	pop	{r4, pc}
    d910:	b109      	cbz	r1, d916 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x4c>
    d912:	2100      	movs	r1, #0
    d914:	e000      	b.n	d918 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x4e>
    d916:	2102      	movs	r1, #2
    d918:	1843      	adds	r3, r0, r1
    d91a:	7d1a      	ldrb	r2, [r3, #20]
    d91c:	2a02      	cmp	r2, #2
    d91e:	d008      	beq.n	d932 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x68>
    d920:	7d5b      	ldrb	r3, [r3, #21]
    d922:	2b02      	cmp	r3, #2
    d924:	d009      	beq.n	d93a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x70>
    d926:	2a03      	cmp	r2, #3
    d928:	d003      	beq.n	d932 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x68>
    d92a:	2b03      	cmp	r3, #3
    d92c:	d005      	beq.n	d93a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x70>
    d92e:	2000      	movs	r0, #0
    d930:	4770      	bx	lr
    d932:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    d936:	8b00      	ldrh	r0, [r0, #24]
    d938:	4770      	bx	lr
    d93a:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    d93e:	8b40      	ldrh	r0, [r0, #26]
    d940:	4770      	bx	lr
    d942:	b109      	cbz	r1, d948 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x7e>
    d944:	2100      	movs	r1, #0
    d946:	e000      	b.n	d94a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x80>
    d948:	2102      	movs	r1, #2
    d94a:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    d94e:	8b01      	ldrh	r1, [r0, #24]
    d950:	b911      	cbnz	r1, d958 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x8e>
    d952:	8b40      	ldrh	r0, [r0, #26]
    d954:	2800      	cmp	r0, #0
    d956:	d000      	beq.n	d95a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x90>
    d958:	2001      	movs	r0, #1
    d95a:	4770      	bx	lr
    d95c:	b538      	push	{r3, r4, r5, lr}
    d95e:	7883      	ldrb	r3, [r0, #2]
    d960:	f88d 3000 	strb.w	r3, [sp]
    d964:	9b00      	ldr	r3, [sp, #0]
    d966:	9300      	str	r3, [sp, #0]
    d968:	f89d 3000 	ldrb.w	r3, [sp]
    d96c:	b95b      	cbnz	r3, d986 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xbc>
    d96e:	2400      	movs	r4, #0
    d970:	b10a      	cbz	r2, d976 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xac>
    d972:	2300      	movs	r3, #0
    d974:	e000      	b.n	d978 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xae>
    d976:	2302      	movs	r3, #2
    d978:	18c2      	adds	r2, r0, r3
    d97a:	7d15      	ldrb	r5, [r2, #20]
    d97c:	2d02      	cmp	r5, #2
    d97e:	d004      	beq.n	d98a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xc0>
    d980:	7d52      	ldrb	r2, [r2, #21]
    d982:	2a02      	cmp	r2, #2
    d984:	d004      	beq.n	d990 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xc6>
    d986:	2000      	movs	r0, #0
    d988:	bd38      	pop	{r3, r4, r5, pc}
    d98a:	461a      	mov	r2, r3
    d98c:	1c5b      	adds	r3, r3, #1
    d98e:	e000      	b.n	d992 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xc8>
    d990:	1c5a      	adds	r2, r3, #1
    d992:	b179      	cbz	r1, d9b4 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xea>
    d994:	18c5      	adds	r5, r0, r3
    d996:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    d99a:	752c      	strb	r4, [r5, #20]
    d99c:	831c      	strh	r4, [r3, #24]
    d99e:	2303      	movs	r3, #3
    d9a0:	1884      	adds	r4, r0, r2
    d9a2:	7523      	strb	r3, [r4, #20]
    d9a4:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    d9a8:	eb00 0042 	add.w	r0, r0, r2, lsl #1
    d9ac:	685b      	ldr	r3, [r3, #4]
    d9ae:	600b      	str	r3, [r1, #0]
    d9b0:	8b00      	ldrh	r0, [r0, #24]
    d9b2:	8088      	strh	r0, [r1, #4]
    d9b4:	2001      	movs	r0, #1
    d9b6:	bd38      	pop	{r3, r4, r5, pc}
    d9b8:	b510      	push	{r4, lr}
    d9ba:	b109      	cbz	r1, d9c0 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xf6>
    d9bc:	2100      	movs	r1, #0
    d9be:	e000      	b.n	d9c2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xf8>
    d9c0:	2102      	movs	r1, #2
    d9c2:	1843      	adds	r3, r0, r1
    d9c4:	7d1c      	ldrb	r4, [r3, #20]
    d9c6:	4294      	cmp	r4, r2
    d9c8:	d103      	bne.n	d9d2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x108>
    d9ca:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    d9ce:	8b00      	ldrh	r0, [r0, #24]
    d9d0:	bd10      	pop	{r4, pc}
    d9d2:	7d5b      	ldrb	r3, [r3, #21]
    d9d4:	4293      	cmp	r3, r2
    d9d6:	d103      	bne.n	d9e0 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x116>
    d9d8:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    d9dc:	8b40      	ldrh	r0, [r0, #26]
    d9de:	bd10      	pop	{r4, pc}
    d9e0:	2000      	movs	r0, #0
    d9e2:	bd10      	pop	{r4, pc}
    d9e4:	f5b0 7fff 	cmp.w	r0, #510	; 0x1fe
    d9e8:	d201      	bcs.n	d9ee <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x124>
    d9ea:	0841      	lsrs	r1, r0, #1
    d9ec:	e000      	b.n	d9f0 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x126>
    d9ee:	21ff      	movs	r1, #255	; 0xff
    d9f0:	1a40      	subs	r0, r0, r1
    d9f2:	f240 6172 	movw	r1, #1650	; 0x672
    d9f6:	4288      	cmp	r0, r1
    d9f8:	db00      	blt.n	d9fc <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x132>
    d9fa:	4608      	mov	r0, r1
    d9fc:	b280      	uxth	r0, r0
    d9fe:	4770      	bx	lr

0000da00 <sym_RIJIFYF46ZRKFDPA3GKV7WCH2VGEUEP6MVN4JFI>:
    da00:	2101      	movs	r1, #1
    da02:	f7ff bf85 	b.w	d910 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x46>

0000da06 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>:
    da06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    da0a:	4606      	mov	r6, r0
    da0c:	f342 0780 	sbfx	r7, r2, #2, #1
    da10:	7848      	ldrb	r0, [r1, #1]
    da12:	460c      	mov	r4, r1
    da14:	f022 0504 	bic.w	r5, r2, #4
    da18:	1c7f      	adds	r7, r7, #1
    da1a:	b100      	cbz	r0, da1e <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x18>
    da1c:	b90d      	cbnz	r5, da22 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x1c>
    da1e:	4328      	orrs	r0, r5
    da20:	d104      	bne.n	da2c <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x26>
    da22:	b145      	cbz	r5, da36 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x30>
    da24:	2100      	movs	r1, #0
    da26:	4620      	mov	r0, r4
    da28:	f7f4 f912 	bl	1c50 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x30>
    da2c:	20ff      	movs	r0, #255	; 0xff
    da2e:	70a0      	strb	r0, [r4, #2]
    da30:	b11f      	cbz	r7, da3a <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x34>
    da32:	2000      	movs	r0, #0
    da34:	e002      	b.n	da3c <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x36>
    da36:	2101      	movs	r1, #1
    da38:	e7f5      	b.n	da26 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x20>
    da3a:	2002      	movs	r0, #2
    da3c:	1821      	adds	r1, r4, r0
    da3e:	7d09      	ldrb	r1, [r1, #20]
    da40:	2903      	cmp	r1, #3
    da42:	d102      	bne.n	da4a <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x44>
    da44:	2d02      	cmp	r5, #2
    da46:	d000      	beq.n	da4a <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x44>
    da48:	1c40      	adds	r0, r0, #1
    da4a:	1822      	adds	r2, r4, r0
    da4c:	2101      	movs	r1, #1
    da4e:	7511      	strb	r1, [r2, #20]
    da50:	eb04 0140 	add.w	r1, r4, r0, lsl #1
    da54:	2200      	movs	r2, #0
    da56:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    da5a:	830a      	strh	r2, [r1, #24]
    da5c:	6840      	ldr	r0, [r0, #4]
    da5e:	70a2      	strb	r2, [r4, #2]
    da60:	4631      	mov	r1, r6
    da62:	f362 010f 	bfi	r1, r2, #0, #16
    da66:	e9c6 0100 	strd	r0, r1, [r6]
    da6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000da6e <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>:
    da6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    da72:	461e      	mov	r6, r3
    da74:	4613      	mov	r3, r2
    da76:	4604      	mov	r4, r0
    da78:	b109      	cbz	r1, da7e <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x10>
    da7a:	2000      	movs	r0, #0
    da7c:	e000      	b.n	da80 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x12>
    da7e:	2002      	movs	r0, #2
    da80:	21ff      	movs	r1, #255	; 0xff
    da82:	70a1      	strb	r1, [r4, #2]
    da84:	1821      	adds	r1, r4, r0
    da86:	7d0a      	ldrb	r2, [r1, #20]
    da88:	2a01      	cmp	r2, #1
    da8a:	d003      	beq.n	da94 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x26>
    da8c:	7d49      	ldrb	r1, [r1, #21]
    da8e:	2901      	cmp	r1, #1
    da90:	d10c      	bne.n	daac <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x3e>
    da92:	1c40      	adds	r0, r0, #1
    da94:	eb04 0540 	add.w	r5, r4, r0, lsl #1
    da98:	2700      	movs	r7, #0
    da9a:	8b29      	ldrh	r1, [r5, #24]
    da9c:	f8b5 c020 	ldrh.w	ip, [r5, #32]
    daa0:	198a      	adds	r2, r1, r6
    daa2:	4562      	cmp	r2, ip
    daa4:	d905      	bls.n	dab2 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x44>
    daa6:	4420      	add	r0, r4
    daa8:	832f      	strh	r7, [r5, #24]
    daaa:	7507      	strb	r7, [r0, #20]
    daac:	2000      	movs	r0, #0
    daae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dab2:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    dab6:	4632      	mov	r2, r6
    dab8:	6840      	ldr	r0, [r0, #4]
    daba:	4408      	add	r0, r1
    dabc:	4619      	mov	r1, r3
    dabe:	f003 f9c1 	bl	10e44 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    dac2:	8b28      	ldrh	r0, [r5, #24]
    dac4:	4430      	add	r0, r6
    dac6:	8328      	strh	r0, [r5, #24]
    dac8:	70a7      	strb	r7, [r4, #2]
    daca:	2001      	movs	r0, #1
    dacc:	e7ef      	b.n	daae <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x40>

0000dace <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY>:
    dace:	b510      	push	{r4, lr}
    dad0:	2101      	movs	r1, #1
    dad2:	f7ff ff36 	bl	d942 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x78>
    dad6:	2800      	cmp	r0, #0
    dad8:	d000      	beq.n	dadc <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY+0xe>
    dada:	2001      	movs	r0, #1
    dadc:	bd10      	pop	{r4, pc}

0000dade <sym_VPXIA5P4C72CY3ME4ZVXBADOKEG5S4C7Z7QZZFA>:
    dade:	2201      	movs	r2, #1
    dae0:	f7ff bf3c 	b.w	d95c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x92>

0000dae4 <sym_MF4WRTQNYFRYRFGW7FZUI3ZAYNQZ5EQ54QSK6JQ>:
    dae4:	2200      	movs	r2, #0
    dae6:	f7ff bf39 	b.w	d95c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x92>

0000daea <sym_IBQ2J6PQMWEGB2QFNQVSDUN2ZUMMRTUFKUUZT2I>:
    daea:	b510      	push	{r4, lr}
    daec:	2100      	movs	r1, #0
    daee:	f7ff ff28 	bl	d942 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x78>
    daf2:	2800      	cmp	r0, #0
    daf4:	d000      	beq.n	daf8 <sym_IBQ2J6PQMWEGB2QFNQVSDUN2ZUMMRTUFKUUZT2I+0xe>
    daf6:	2001      	movs	r0, #1
    daf8:	bd10      	pop	{r4, pc}

0000dafa <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>:
    dafa:	b570      	push	{r4, r5, r6, lr}
    dafc:	b109      	cbz	r1, db02 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x8>
    dafe:	2300      	movs	r3, #0
    db00:	e000      	b.n	db04 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0xa>
    db02:	2302      	movs	r3, #2
    db04:	21ff      	movs	r1, #255	; 0xff
    db06:	7081      	strb	r1, [r0, #2]
    db08:	18c1      	adds	r1, r0, r3
    db0a:	2402      	movs	r4, #2
    db0c:	7d0d      	ldrb	r5, [r1, #20]
    db0e:	2d01      	cmp	r5, #1
    db10:	d007      	beq.n	db22 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x28>
    db12:	7d4d      	ldrb	r5, [r1, #21]
    db14:	2d01      	cmp	r5, #1
    db16:	d009      	beq.n	db2c <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x32>
    db18:	f44f 718b 	mov.w	r1, #278	; 0x116
    db1c:	2009      	movs	r0, #9
    db1e:	f7f3 fc6d 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    db22:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    db26:	831a      	strh	r2, [r3, #24]
    db28:	750c      	strb	r4, [r1, #20]
    db2a:	e003      	b.n	db34 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x3a>
    db2c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    db30:	835a      	strh	r2, [r3, #26]
    db32:	754c      	strb	r4, [r1, #21]
    db34:	2100      	movs	r1, #0
    db36:	7081      	strb	r1, [r0, #2]
    db38:	bd70      	pop	{r4, r5, r6, pc}

0000db3a <sym_SCCFLYV5KOPRJ5S7RGDC2KDSCCHMKXYC3EQIE6A>:
    db3a:	2101      	movs	r1, #1
    db3c:	7001      	strb	r1, [r0, #0]
    db3e:	4770      	bx	lr

0000db40 <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>:
    db40:	2201      	movs	r2, #1
    db42:	4611      	mov	r1, r2
    db44:	f7ff bf38 	b.w	d9b8 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xee>

0000db48 <sym_27RZBWKBTESKUPVNN3E7RHYQU6UH4RT372SK2WA>:
    db48:	2201      	movs	r2, #1
    db4a:	2100      	movs	r1, #0
    db4c:	f7ff bf34 	b.w	d9b8 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xee>

0000db50 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ>:
    db50:	2100      	movs	r1, #0
    db52:	f7ff bedd 	b.w	d910 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x46>
    db56:	2800      	cmp	r0, #0
    db58:	db09      	blt.n	db6e <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x1e>
    db5a:	f000 021f 	and.w	r2, r0, #31
    db5e:	2101      	movs	r1, #1
    db60:	4091      	lsls	r1, r2
    db62:	0940      	lsrs	r0, r0, #5
    db64:	0080      	lsls	r0, r0, #2
    db66:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    db6a:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    db6e:	4770      	bx	lr
    db70:	2800      	cmp	r0, #0
    db72:	db0d      	blt.n	db90 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x40>
    db74:	f000 021f 	and.w	r2, r0, #31
    db78:	2101      	movs	r1, #1
    db7a:	4091      	lsls	r1, r2
    db7c:	0940      	lsrs	r0, r0, #5
    db7e:	0080      	lsls	r0, r0, #2
    db80:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    db84:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    db88:	f3bf 8f4f 	dsb	sy
    db8c:	f3bf 8f6f 	isb	sy
    db90:	4770      	bx	lr
    db92:	b510      	push	{r4, lr}
    db94:	200e      	movs	r0, #14
    db96:	f7ff ffeb 	bl	db70 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x20>
    db9a:	200e      	movs	r0, #14
    db9c:	f7ff ffdb 	bl	db56 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x6>
    dba0:	200f      	movs	r0, #15
    dba2:	f7ff ffe5 	bl	db70 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x20>
    dba6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    dbaa:	200f      	movs	r0, #15
    dbac:	f7ff bfd3 	b.w	db56 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x6>
    dbb0:	2800      	cmp	r0, #0
    dbb2:	db09      	blt.n	dbc8 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x78>
    dbb4:	f000 021f 	and.w	r2, r0, #31
    dbb8:	2101      	movs	r1, #1
    dbba:	4091      	lsls	r1, r2
    dbbc:	0940      	lsrs	r0, r0, #5
    dbbe:	0080      	lsls	r0, r0, #2
    dbc0:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    dbc4:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    dbc8:	4770      	bx	lr
    dbca:	5840      	ldr	r0, [r0, r1]
    dbcc:	2800      	cmp	r0, #0
    dbce:	d000      	beq.n	dbd2 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x82>
    dbd0:	2001      	movs	r0, #1
    dbd2:	4770      	bx	lr

0000dbd4 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>:
    dbd4:	b510      	push	{r4, lr}
    dbd6:	4604      	mov	r4, r0
    dbd8:	4620      	mov	r0, r4
    dbda:	f7f4 f941 	bl	1e60 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x28>
    dbde:	2811      	cmp	r0, #17
    dbe0:	d0fa      	beq.n	dbd8 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x4>
    dbe2:	bd10      	pop	{r4, pc}

0000dbe4 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>:
    dbe4:	b510      	push	{r4, lr}
    dbe6:	f7ff fff5 	bl	dbd4 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>
    dbea:	2800      	cmp	r0, #0
    dbec:	d003      	beq.n	dbf6 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A+0x12>
    dbee:	21a0      	movs	r1, #160	; 0xa0
    dbf0:	201d      	movs	r0, #29
    dbf2:	f7f3 fc03 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dbf6:	bd10      	pop	{r4, pc}

0000dbf8 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>:
    dbf8:	f7f4 ba90 	b.w	211c <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x20>

0000dbfc <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>:
    dbfc:	f7f4 ba7e 	b.w	20fc <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>

0000dc00 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>:
    dc00:	b510      	push	{r4, lr}
    dc02:	4050      	eors	r0, r2
    dc04:	780a      	ldrb	r2, [r1, #0]
    dc06:	781c      	ldrb	r4, [r3, #0]
    dc08:	4062      	eors	r2, r4
    dc0a:	4410      	add	r0, r2
    dc0c:	784a      	ldrb	r2, [r1, #1]
    dc0e:	785c      	ldrb	r4, [r3, #1]
    dc10:	4062      	eors	r2, r4
    dc12:	4410      	add	r0, r2
    dc14:	788a      	ldrb	r2, [r1, #2]
    dc16:	789c      	ldrb	r4, [r3, #2]
    dc18:	4062      	eors	r2, r4
    dc1a:	4410      	add	r0, r2
    dc1c:	78ca      	ldrb	r2, [r1, #3]
    dc1e:	78dc      	ldrb	r4, [r3, #3]
    dc20:	4062      	eors	r2, r4
    dc22:	4410      	add	r0, r2
    dc24:	790a      	ldrb	r2, [r1, #4]
    dc26:	791c      	ldrb	r4, [r3, #4]
    dc28:	7949      	ldrb	r1, [r1, #5]
    dc2a:	4062      	eors	r2, r4
    dc2c:	4410      	add	r0, r2
    dc2e:	795a      	ldrb	r2, [r3, #5]
    dc30:	4051      	eors	r1, r2
    dc32:	42c1      	cmn	r1, r0
    dc34:	d101      	bne.n	dc3a <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI+0x3a>
    dc36:	2001      	movs	r0, #1
    dc38:	bd10      	pop	{r4, pc}
    dc3a:	2000      	movs	r0, #0
    dc3c:	bd10      	pop	{r4, pc}

0000dc3e <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>:
    dc3e:	b510      	push	{r4, lr}
    dc40:	2900      	cmp	r1, #0
    dc42:	4604      	mov	r4, r0
    dc44:	f04f 0106 	mov.w	r1, #6
    dc48:	d002      	beq.n	dc50 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x12>
    dc4a:	f7f3 fc77 	bl	153c <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    dc4e:	e001      	b.n	dc54 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x16>
    dc50:	f7f3 fc82 	bl	1558 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    dc54:	7960      	ldrb	r0, [r4, #5]
    dc56:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    dc5a:	7160      	strb	r0, [r4, #5]
    dc5c:	bd10      	pop	{r4, pc}

0000dc5e <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>:
    dc5e:	4770      	bx	lr

0000dc60 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>:
    dc60:	b530      	push	{r4, r5, lr}
    dc62:	460c      	mov	r4, r1
    dc64:	4605      	mov	r5, r0
    dc66:	b08d      	sub	sp, #52	; 0x34
    dc68:	f04f 0103 	mov.w	r1, #3
    dc6c:	f104 0003 	add.w	r0, r4, #3
    dc70:	b112      	cbz	r2, dc78 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x18>
    dc72:	f7f3 fc63 	bl	153c <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    dc76:	e001      	b.n	dc7c <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x1c>
    dc78:	f7f3 fc6e 	bl	1558 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    dc7c:	7960      	ldrb	r0, [r4, #5]
    dc7e:	220d      	movs	r2, #13
    dc80:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    dc84:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    dc88:	7160      	strb	r0, [r4, #5]
    dc8a:	2100      	movs	r1, #0
    dc8c:	a804      	add	r0, sp, #16
    dc8e:	f003 f953 	bl	10f38 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    dc92:	78e0      	ldrb	r0, [r4, #3]
    dc94:	f88d 001f 	strb.w	r0, [sp, #31]
    dc98:	7920      	ldrb	r0, [r4, #4]
    dc9a:	f88d 001e 	strb.w	r0, [sp, #30]
    dc9e:	7960      	ldrb	r0, [r4, #5]
    dca0:	f88d 001d 	strb.w	r0, [sp, #29]
    dca4:	2210      	movs	r2, #16
    dca6:	4629      	mov	r1, r5
    dca8:	4668      	mov	r0, sp
    dcaa:	f003 f8cb 	bl	10e44 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    dcae:	4668      	mov	r0, sp
    dcb0:	f7ff ff98 	bl	dbe4 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    dcb4:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
    dcb8:	7020      	strb	r0, [r4, #0]
    dcba:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
    dcbe:	7060      	strb	r0, [r4, #1]
    dcc0:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
    dcc4:	70a0      	strb	r0, [r4, #2]
    dcc6:	b00d      	add	sp, #52	; 0x34
    dcc8:	bd30      	pop	{r4, r5, pc}

0000dcca <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>:
    dcca:	f7f4 bd9f 	b.w	280c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3d4>
    dcce:	07c1      	lsls	r1, r0, #31
    dcd0:	d001      	beq.n	dcd6 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0xc>
    dcd2:	2001      	movs	r0, #1
    dcd4:	4770      	bx	lr
    dcd6:	0780      	lsls	r0, r0, #30
    dcd8:	d501      	bpl.n	dcde <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x14>
    dcda:	2002      	movs	r0, #2
    dcdc:	4770      	bx	lr
    dcde:	2000      	movs	r0, #0
    dce0:	4770      	bx	lr
    dce2:	b510      	push	{r4, lr}
    dce4:	2801      	cmp	r0, #1
    dce6:	d008      	beq.n	dcfa <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x30>
    dce8:	2802      	cmp	r0, #2
    dcea:	d004      	beq.n	dcf6 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x2c>
    dcec:	f240 4122 	movw	r1, #1058	; 0x422
    dcf0:	2006      	movs	r0, #6
    dcf2:	f7f3 fb83 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dcf6:	2001      	movs	r0, #1
    dcf8:	bd10      	pop	{r4, pc}
    dcfa:	2000      	movs	r0, #0
    dcfc:	bd10      	pop	{r4, pc}
    dcfe:	2900      	cmp	r1, #0
    dd00:	d004      	beq.n	dd0c <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x42>
    dd02:	2801      	cmp	r0, #1
    dd04:	d003      	beq.n	dd0e <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x44>
    dd06:	2901      	cmp	r1, #1
    dd08:	d001      	beq.n	dd0e <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x44>
    dd0a:	2002      	movs	r0, #2
    dd0c:	4770      	bx	lr
    dd0e:	2001      	movs	r0, #1
    dd10:	4770      	bx	lr
    dd12:	f7ff bc95 	b.w	d640 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>

0000dd16 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>:
    dd16:	2101      	movs	r1, #1
    dd18:	f7f5 b882 	b.w	2e20 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x74>

0000dd1c <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>:
    dd1c:	b510      	push	{r4, lr}
    dd1e:	f002 fe75 	bl	10a0c <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>
    dd22:	b118      	cbz	r0, dd2c <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA+0x10>
    dd24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    dd28:	f7f9 bec0 	b.w	7aac <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>
    dd2c:	20ff      	movs	r0, #255	; 0xff
    dd2e:	bd10      	pop	{r4, pc}

0000dd30 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>:
    dd30:	b510      	push	{r4, lr}
    dd32:	f7f5 f8bd 	bl	2eb0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    dd36:	2810      	cmp	r0, #16
    dd38:	d003      	beq.n	dd42 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x12>
    dd3a:	f7f5 f889 	bl	2e50 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    dd3e:	2810      	cmp	r0, #16
    dd40:	d100      	bne.n	dd44 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x14>
    dd42:	2008      	movs	r0, #8
    dd44:	bd10      	pop	{r4, pc}

0000dd46 <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>:
    dd46:	b510      	push	{r4, lr}
    dd48:	f7f5 f8b2 	bl	2eb0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    dd4c:	2810      	cmp	r0, #16
    dd4e:	d003      	beq.n	dd58 <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY+0x12>
    dd50:	f7f5 f90c 	bl	2f6c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1c0>
    dd54:	2001      	movs	r0, #1
    dd56:	bd10      	pop	{r4, pc}
    dd58:	2000      	movs	r0, #0
    dd5a:	bd10      	pop	{r4, pc}

0000dd5c <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>:
    dd5c:	b570      	push	{r4, r5, r6, lr}
    dd5e:	460e      	mov	r6, r1
    dd60:	b08c      	sub	sp, #48	; 0x30
    dd62:	4614      	mov	r4, r2
    dd64:	4601      	mov	r1, r0
    dd66:	461d      	mov	r5, r3
    dd68:	2210      	movs	r2, #16
    dd6a:	4668      	mov	r0, sp
    dd6c:	f000 f938 	bl	dfe0 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    dd70:	2210      	movs	r2, #16
    dd72:	4631      	mov	r1, r6
    dd74:	a804      	add	r0, sp, #16
    dd76:	f000 f933 	bl	dfe0 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    dd7a:	4668      	mov	r0, sp
    dd7c:	f7ff ff32 	bl	dbe4 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    dd80:	a908      	add	r1, sp, #32
    dd82:	f04f 0210 	mov.w	r2, #16
    dd86:	4628      	mov	r0, r5
    dd88:	b11c      	cbz	r4, dd92 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x36>
    dd8a:	f000 f929 	bl	dfe0 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    dd8e:	b00c      	add	sp, #48	; 0x30
    dd90:	bd70      	pop	{r4, r5, r6, pc}
    dd92:	f003 f857 	bl	10e44 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    dd96:	e7fa      	b.n	dd8e <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x32>

0000dd98 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>:
    dd98:	b510      	push	{r4, lr}
    dd9a:	460c      	mov	r4, r1
    dd9c:	2100      	movs	r1, #0
    dd9e:	f7ff fd80 	bl	d8a2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    dda2:	6060      	str	r0, [r4, #4]
    dda4:	b118      	cbz	r0, ddae <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA+0x16>
    dda6:	2001      	movs	r0, #1
    dda8:	7020      	strb	r0, [r4, #0]
    ddaa:	2000      	movs	r0, #0
    ddac:	bd10      	pop	{r4, pc}
    ddae:	2002      	movs	r0, #2
    ddb0:	bd10      	pop	{r4, pc}

0000ddb2 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>:
    ddb2:	f240 41e2 	movw	r1, #1250	; 0x4e2
    ddb6:	4348      	muls	r0, r1
    ddb8:	4770      	bx	lr

0000ddba <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>:
    ddba:	f240 41e2 	movw	r1, #1250	; 0x4e2
    ddbe:	fbb0 f0f1 	udiv	r0, r0, r1
    ddc2:	b280      	uxth	r0, r0
    ddc4:	4770      	bx	lr

0000ddc6 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>:
    ddc6:	b570      	push	{r4, r5, r6, lr}
    ddc8:	4604      	mov	r4, r0
    ddca:	4290      	cmp	r0, r2
    ddcc:	d20b      	bcs.n	dde6 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x20>
    ddce:	1b10      	subs	r0, r2, r4
    ddd0:	2865      	cmp	r0, #101	; 0x65
    ddd2:	d200      	bcs.n	ddd6 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x10>
    ddd4:	2065      	movs	r0, #101	; 0x65
    ddd6:	1825      	adds	r5, r4, r0
    ddd8:	428d      	cmp	r5, r1
    ddda:	d803      	bhi.n	dde4 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x1e>
    dddc:	2103      	movs	r1, #3
    ddde:	f7fc f8e5 	bl	9fac <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    dde2:	b108      	cbz	r0, dde8 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x22>
    dde4:	4620      	mov	r0, r4
    dde6:	bd70      	pop	{r4, r5, r6, pc}
    dde8:	4628      	mov	r0, r5
    ddea:	bd70      	pop	{r4, r5, r6, pc}

0000ddec <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>:
    ddec:	b510      	push	{r4, lr}
    ddee:	f1a2 0310 	sub.w	r3, r2, #16
    ddf2:	290d      	cmp	r1, #13
    ddf4:	d24d      	bcs.n	de92 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    ddf6:	e8df f001 	tbb	[pc, r1]
    ddfa:	0907      	.short	0x0907
    ddfc:	1d1a150e 	.word	0x1d1a150e
    de00:	4e2c2921 	.word	0x4e2c2921
    de04:	0048362f 	.word	0x0048362f
    de08:	b3f2      	cbz	r2, de88 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x9c>
    de0a:	e042      	b.n	de92 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    de0c:	2a06      	cmp	r2, #6
    de0e:	d03e      	beq.n	de8e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    de10:	2a07      	cmp	r2, #7
    de12:	d03c      	beq.n	de8e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    de14:	e03d      	b.n	de92 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    de16:	2a0b      	cmp	r2, #11
    de18:	d039      	beq.n	de8e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    de1a:	2a0c      	cmp	r2, #12
    de1c:	d037      	beq.n	de8e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    de1e:	2a0a      	cmp	r2, #10
    de20:	d035      	beq.n	de8e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    de22:	e036      	b.n	de92 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    de24:	2a0d      	cmp	r2, #13
    de26:	d032      	beq.n	de8e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    de28:	2a0e      	cmp	r2, #14
    de2a:	d030      	beq.n	de8e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    de2c:	e031      	b.n	de92 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    de2e:	2b0c      	cmp	r3, #12
    de30:	d92d      	bls.n	de8e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    de32:	e02e      	b.n	de92 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    de34:	3a11      	subs	r2, #17
    de36:	2a0b      	cmp	r2, #11
    de38:	d929      	bls.n	de8e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    de3a:	e02a      	b.n	de92 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    de3c:	2b03      	cmp	r3, #3
    de3e:	d926      	bls.n	de8e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    de40:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
    de44:	b1f8      	cbz	r0, de86 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x9a>
    de46:	2a1c      	cmp	r2, #28
    de48:	d921      	bls.n	de8e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    de4a:	e022      	b.n	de92 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    de4c:	2a04      	cmp	r2, #4
    de4e:	d01e      	beq.n	de8e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    de50:	e01f      	b.n	de92 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    de52:	2a01      	cmp	r2, #1
    de54:	d01b      	beq.n	de8e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    de56:	e01c      	b.n	de92 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    de58:	2a1d      	cmp	r2, #29
    de5a:	d018      	beq.n	de8e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    de5c:	2a1e      	cmp	r2, #30
    de5e:	d016      	beq.n	de8e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    de60:	2a1f      	cmp	r2, #31
    de62:	d014      	beq.n	de8e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    de64:	e015      	b.n	de92 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    de66:	2a20      	cmp	r2, #32
    de68:	d011      	beq.n	de8e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    de6a:	2a21      	cmp	r2, #33	; 0x21
    de6c:	d00f      	beq.n	de8e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    de6e:	2a22      	cmp	r2, #34	; 0x22
    de70:	d00d      	beq.n	de8e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    de72:	2a23      	cmp	r2, #35	; 0x23
    de74:	d00b      	beq.n	de8e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    de76:	2a24      	cmp	r2, #36	; 0x24
    de78:	d009      	beq.n	de8e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    de7a:	2a25      	cmp	r2, #37	; 0x25
    de7c:	d007      	beq.n	de8e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    de7e:	2a26      	cmp	r2, #38	; 0x26
    de80:	d005      	beq.n	de8e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    de82:	2a2e      	cmp	r2, #46	; 0x2e
    de84:	d003      	beq.n	de8e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    de86:	e004      	b.n	de92 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    de88:	e001      	b.n	de8e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    de8a:	2a28      	cmp	r2, #40	; 0x28
    de8c:	d101      	bne.n	de92 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    de8e:	2001      	movs	r0, #1
    de90:	bd10      	pop	{r4, pc}
    de92:	2000      	movs	r0, #0
    de94:	bd10      	pop	{r4, pc}
    de96:	2a0f      	cmp	r2, #15
    de98:	d1fb      	bne.n	de92 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    de9a:	e7f8      	b.n	de8e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>

0000de9c <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>:
    de9c:	280b      	cmp	r0, #11
    de9e:	d019      	beq.n	ded4 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    dea0:	280c      	cmp	r0, #12
    dea2:	d017      	beq.n	ded4 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    dea4:	280a      	cmp	r0, #10
    dea6:	d015      	beq.n	ded4 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    dea8:	280d      	cmp	r0, #13
    deaa:	d013      	beq.n	ded4 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    deac:	280e      	cmp	r0, #14
    deae:	d011      	beq.n	ded4 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    deb0:	2820      	cmp	r0, #32
    deb2:	d00f      	beq.n	ded4 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    deb4:	2821      	cmp	r0, #33	; 0x21
    deb6:	d00d      	beq.n	ded4 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    deb8:	2822      	cmp	r0, #34	; 0x22
    deba:	d00b      	beq.n	ded4 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    debc:	2823      	cmp	r0, #35	; 0x23
    debe:	d009      	beq.n	ded4 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    dec0:	2824      	cmp	r0, #36	; 0x24
    dec2:	d007      	beq.n	ded4 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    dec4:	2825      	cmp	r0, #37	; 0x25
    dec6:	d005      	beq.n	ded4 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    dec8:	2826      	cmp	r0, #38	; 0x26
    deca:	d003      	beq.n	ded4 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    decc:	282e      	cmp	r0, #46	; 0x2e
    dece:	d001      	beq.n	ded4 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    ded0:	2000      	movs	r0, #0
    ded2:	4770      	bx	lr
    ded4:	2001      	movs	r0, #1
    ded6:	4770      	bx	lr

0000ded8 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>:
    ded8:	f011 0f0c 	tst.w	r1, #12
    dedc:	d018      	beq.n	df10 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x38>
    dede:	074a      	lsls	r2, r1, #29
    dee0:	f44f 7116 	mov.w	r1, #600	; 0x258
    dee4:	2a00      	cmp	r2, #0
    dee6:	da02      	bge.n	deee <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x16>
    dee8:	f04f 0210 	mov.w	r2, #16
    deec:	e001      	b.n	def2 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x1a>
    deee:	f04f 0240 	mov.w	r2, #64	; 0x40
    def2:	da01      	bge.n	def8 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x20>
    def4:	f04f 0196 	mov.w	r1, #150	; 0x96
    def8:	f501 71bc 	add.w	r1, r1, #376	; 0x178
    defc:	eba0 0301 	sub.w	r3, r0, r1
    df00:	4288      	cmp	r0, r1
    df02:	d903      	bls.n	df0c <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    df04:	fb93 f0f2 	sdiv	r0, r3, r2
    df08:	b280      	uxth	r0, r0
    df0a:	4770      	bx	lr
    df0c:	2000      	movs	r0, #0
    df0e:	4770      	bx	lr
    df10:	2902      	cmp	r1, #2
    df12:	d008      	beq.n	df26 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    df14:	2870      	cmp	r0, #112	; 0x70
    df16:	d9f9      	bls.n	df0c <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    df18:	3870      	subs	r0, #112	; 0x70
    df1a:	17c1      	asrs	r1, r0, #31
    df1c:	eb00 7051 	add.w	r0, r0, r1, lsr #29
    df20:	f3c0 00cf 	ubfx	r0, r0, #3, #16
    df24:	4770      	bx	lr
    df26:	283c      	cmp	r0, #60	; 0x3c
    df28:	d9f0      	bls.n	df0c <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    df2a:	383c      	subs	r0, #60	; 0x3c
    df2c:	17c1      	asrs	r1, r0, #31
    df2e:	eb00 7091 	add.w	r0, r0, r1, lsr #30
    df32:	f3c0 008f 	ubfx	r0, r0, #2, #16
    df36:	4770      	bx	lr

0000df38 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>:
    df38:	6809      	ldr	r1, [r1, #0]
    df3a:	f8c0 1066 	str.w	r1, [r0, #102]	; 0x66
    df3e:	4770      	bx	lr

0000df40 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>:
    df40:	07c1      	lsls	r1, r0, #31
    df42:	d001      	beq.n	df48 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x8>
    df44:	2001      	movs	r0, #1
    df46:	4770      	bx	lr
    df48:	0781      	lsls	r1, r0, #30
    df4a:	d501      	bpl.n	df50 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x10>
    df4c:	2002      	movs	r0, #2
    df4e:	4770      	bx	lr
    df50:	0740      	lsls	r0, r0, #29
    df52:	d501      	bpl.n	df58 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x18>
    df54:	2008      	movs	r0, #8
    df56:	4770      	bx	lr
    df58:	2000      	movs	r0, #0
    df5a:	4770      	bx	lr

0000df5c <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>:
    df5c:	b510      	push	{r4, lr}
    df5e:	f640 12c4 	movw	r2, #2500	; 0x9c4
    df62:	2901      	cmp	r1, #1
    df64:	d006      	beq.n	df74 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x18>
    df66:	2902      	cmp	r1, #2
    df68:	d005      	beq.n	df76 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1a>
    df6a:	f240 31a1 	movw	r1, #929	; 0x3a1
    df6e:	2029      	movs	r0, #41	; 0x29
    df70:	f7f3 fa44 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    df74:	b108      	cbz	r0, df7a <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1e>
    df76:	4610      	mov	r0, r2
    df78:	bd10      	pop	{r4, pc}
    df7a:	f240 40e2 	movw	r0, #1250	; 0x4e2
    df7e:	bd10      	pop	{r4, pc}

0000df80 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>:
    df80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    df84:	4607      	mov	r7, r0
    df86:	460e      	mov	r6, r1
    df88:	e9d7 5404 	ldrd	r5, r4, [r7, #16]
    df8c:	f7fc fbd0 	bl	a730 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>
    df90:	b198      	cbz	r0, dfba <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x3a>
    df92:	b31e      	cbz	r6, dfdc <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x5c>
    df94:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
    df98:	1b40      	subs	r0, r0, r5
    df9a:	2300      	movs	r3, #0
    df9c:	eb61 0104 	sbc.w	r1, r1, r4
    dfa0:	461a      	mov	r2, r3
    dfa2:	1a1b      	subs	r3, r3, r0
    dfa4:	418a      	sbcs	r2, r1
    dfa6:	da19      	bge.n	dfdc <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x5c>
    dfa8:	1c42      	adds	r2, r0, #1
    dfaa:	f171 0100 	sbcs.w	r1, r1, #0
    dfae:	db07      	blt.n	dfc0 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x40>
    dfb0:	f240 211b 	movw	r1, #539	; 0x21b
    dfb4:	2029      	movs	r0, #41	; 0x29
    dfb6:	f7f3 fa21 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dfba:	f240 2111 	movw	r1, #529	; 0x211
    dfbe:	e7f9      	b.n	dfb4 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x34>
    dfc0:	4430      	add	r0, r6
    dfc2:	1e40      	subs	r0, r0, #1
    dfc4:	fbb0 f1f6 	udiv	r1, r0, r6
    dfc8:	fb01 f006 	mul.w	r0, r1, r6
    dfcc:	1828      	adds	r0, r5, r0
    dfce:	f144 0400 	adc.w	r4, r4, #0
    dfd2:	e9c7 0404 	strd	r0, r4, [r7, #16]
    dfd6:	4608      	mov	r0, r1
    dfd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dfdc:	2000      	movs	r0, #0
    dfde:	e7fb      	b.n	dfd8 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x58>

0000dfe0 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>:
    dfe0:	b530      	push	{r4, r5, lr}
    dfe2:	4613      	mov	r3, r2
    dfe4:	e006      	b.n	dff4 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x14>
    dfe6:	18cc      	adds	r4, r1, r3
    dfe8:	1ad5      	subs	r5, r2, r3
    dfea:	f814 4c01 	ldrb.w	r4, [r4, #-1]
    dfee:	1e5b      	subs	r3, r3, #1
    dff0:	5544      	strb	r4, [r0, r5]
    dff2:	b2db      	uxtb	r3, r3
    dff4:	2b00      	cmp	r3, #0
    dff6:	d1f6      	bne.n	dfe6 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x6>
    dff8:	bd30      	pop	{r4, r5, pc}

0000dffa <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>:
    dffa:	2300      	movs	r3, #0
    dffc:	6403      	str	r3, [r0, #64]	; 0x40
    dffe:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
    e002:	f240 2371 	movw	r3, #625	; 0x271
    e006:	435a      	muls	r2, r3
    e008:	eb01 1202 	add.w	r2, r1, r2, lsl #4
    e00c:	1e52      	subs	r2, r2, #1
    e00e:	fbb2 f1f1 	udiv	r1, r2, r1
    e012:	6441      	str	r1, [r0, #68]	; 0x44
    e014:	4770      	bx	lr

0000e016 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q>:
    e016:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    e01a:	4607      	mov	r7, r0
    e01c:	4690      	mov	r8, r2
    e01e:	468b      	mov	fp, r1
    e020:	2601      	movs	r6, #1
    e022:	4608      	mov	r0, r1
    e024:	f000 f9e1 	bl	e3ea <sym_IMNEYE333DZSYFXBOKOMWVRET5JB5STH5YU7A5A>
    e028:	4682      	mov	sl, r0
    e02a:	4658      	mov	r0, fp
    e02c:	f000 f9df 	bl	e3ee <sym_UA37MSV2DKCYXYIDDSBDMFEEGPUD3YMYMAH3IEI>
    e030:	4681      	mov	r9, r0
    e032:	f7ff ff85 	bl	df40 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    e036:	4604      	mov	r4, r0
    e038:	4650      	mov	r0, sl
    e03a:	f7ff ff81 	bl	df40 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    e03e:	4605      	mov	r5, r0
    e040:	ea54 0005 	orrs.w	r0, r4, r5
    e044:	d100      	bne.n	e048 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x32>
    e046:	2600      	movs	r6, #0
    e048:	f7f9 fcb2 	bl	79b0 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    e04c:	ea10 0f09 	tst.w	r0, r9
    e050:	d100      	bne.n	e054 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x3e>
    e052:	2400      	movs	r4, #0
    e054:	f7f9 fcac 	bl	79b0 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    e058:	ea10 0f0a 	tst.w	r0, sl
    e05c:	d100      	bne.n	e060 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x4a>
    e05e:	2500      	movs	r5, #0
    e060:	f897 006a 	ldrb.w	r0, [r7, #106]	; 0x6a
    e064:	42a0      	cmp	r0, r4
    e066:	d100      	bne.n	e06a <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x54>
    e068:	2400      	movs	r4, #0
    e06a:	f888 4000 	strb.w	r4, [r8]
    e06e:	f897 006b 	ldrb.w	r0, [r7, #107]	; 0x6b
    e072:	42a8      	cmp	r0, r5
    e074:	d100      	bne.n	e078 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x62>
    e076:	2500      	movs	r5, #0
    e078:	f888 5001 	strb.w	r5, [r8, #1]
    e07c:	b974      	cbnz	r4, e09c <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    e07e:	b96d      	cbnz	r5, e09c <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    e080:	4658      	mov	r0, fp
    e082:	f000 f9a0 	bl	e3c6 <sym_FVNWXAKGSIJN4YGWC4O4B4H2WPPILAIKB7LLDVI>
    e086:	f8b7 1094 	ldrh.w	r1, [r7, #148]	; 0x94
    e08a:	1a40      	subs	r0, r0, r1
    e08c:	b200      	sxth	r0, r0
    e08e:	f647 71fe 	movw	r1, #32766	; 0x7ffe
    e092:	4288      	cmp	r0, r1
    e094:	dc01      	bgt.n	e09a <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x84>
    e096:	2800      	cmp	r0, #0
    e098:	dc00      	bgt.n	e09c <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    e09a:	2600      	movs	r6, #0
    e09c:	4630      	mov	r0, r6
    e09e:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}

0000e0a2 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>:
    e0a2:	f240 41e2 	movw	r1, #1250	; 0x4e2
    e0a6:	4348      	muls	r0, r1
    e0a8:	4770      	bx	lr

0000e0aa <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>:
    e0aa:	f240 2171 	movw	r1, #625	; 0x271
    e0ae:	fb10 f001 	smulbb	r0, r0, r1
    e0b2:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e0b6:	ea01 0040 	and.w	r0, r1, r0, lsl #1
    e0ba:	4770      	bx	lr

0000e0bc <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>:
    e0bc:	b510      	push	{r4, lr}
    e0be:	2300      	movs	r3, #0
    e0c0:	461a      	mov	r2, r3
    e0c2:	e003      	b.n	e0cc <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x10>
    e0c4:	5c84      	ldrb	r4, [r0, r2]
    e0c6:	4323      	orrs	r3, r4
    e0c8:	1c52      	adds	r2, r2, #1
    e0ca:	b2d2      	uxtb	r2, r2
    e0cc:	428a      	cmp	r2, r1
    e0ce:	d3f9      	bcc.n	e0c4 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x8>
    e0d0:	b10b      	cbz	r3, e0d6 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x1a>
    e0d2:	2000      	movs	r0, #0
    e0d4:	bd10      	pop	{r4, pc}
    e0d6:	2001      	movs	r0, #1
    e0d8:	bd10      	pop	{r4, pc}
    e0da:	4401      	add	r1, r0
    e0dc:	2914      	cmp	r1, #20
    e0de:	dd01      	ble.n	e0e4 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x28>
    e0e0:	2014      	movs	r0, #20
    e0e2:	4770      	bx	lr
    e0e4:	f06f 007e 	mvn.w	r0, #126	; 0x7e
    e0e8:	4281      	cmp	r1, r0
    e0ea:	dbfa      	blt.n	e0e2 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x26>
    e0ec:	b248      	sxtb	r0, r1
    e0ee:	4770      	bx	lr

0000e0f0 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>:
    e0f0:	b570      	push	{r4, r5, r6, lr}
    e0f2:	4605      	mov	r5, r0
    e0f4:	ea81 4011 	eor.w	r0, r1, r1, lsr #16
    e0f8:	b286      	uxth	r6, r0
    e0fa:	4610      	mov	r0, r2
    e0fc:	7aec      	ldrb	r4, [r5, #11]
    e0fe:	4631      	mov	r1, r6
    e100:	f000 f863 	bl	e1ca <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x52>
    e104:	4070      	eors	r0, r6
    e106:	2125      	movs	r1, #37	; 0x25
    e108:	fbb0 f2f1 	udiv	r2, r0, r1
    e10c:	fb01 0112 	mls	r1, r1, r2, r0
    e110:	eb05 02d1 	add.w	r2, r5, r1, lsr #3
    e114:	f001 0307 	and.w	r3, r1, #7
    e118:	7852      	ldrb	r2, [r2, #1]
    e11a:	2601      	movs	r6, #1
    e11c:	409e      	lsls	r6, r3
    e11e:	4232      	tst	r2, r6
    e120:	d001      	beq.n	e126 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x36>
    e122:	4608      	mov	r0, r1
    e124:	bd70      	pop	{r4, r5, r6, pc}
    e126:	4344      	muls	r4, r0
    e128:	0c21      	lsrs	r1, r4, #16
    e12a:	4628      	mov	r0, r5
    e12c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    e130:	f7f5 b82c 	b.w	318c <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0xbc>

0000e134 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>:
    e134:	b510      	push	{r4, lr}
    e136:	4604      	mov	r4, r0
    e138:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
    e13c:	b108      	cbz	r0, e142 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0xe>
    e13e:	2825      	cmp	r0, #37	; 0x25
    e140:	d901      	bls.n	e146 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x12>
    e142:	2012      	movs	r0, #18
    e144:	bd10      	pop	{r4, pc}
    e146:	b132      	cbz	r2, e156 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x22>
    e148:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
    e14c:	b128      	cbz	r0, e15a <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x26>
    e14e:	2801      	cmp	r0, #1
    e150:	d009      	beq.n	e166 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x32>
    e152:	201f      	movs	r0, #31
    e154:	bd10      	pop	{r4, pc}
    e156:	2000      	movs	r0, #0
    e158:	bd10      	pop	{r4, pc}
    e15a:	4620      	mov	r0, r4
    e15c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e160:	4611      	mov	r1, r2
    e162:	f7f4 bfcb 	b.w	30fc <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0x2c>
    e166:	8aa2      	ldrh	r2, [r4, #20]
    e168:	6949      	ldr	r1, [r1, #20]
    e16a:	f104 0025 	add.w	r0, r4, #37	; 0x25
    e16e:	f7ff ffbf 	bl	e0f0 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>
    e172:	f884 0033 	strb.w	r0, [r4, #51]	; 0x33
    e176:	e7ee      	b.n	e156 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x22>

0000e178 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>:
    e178:	b570      	push	{r4, r5, r6, lr}
    e17a:	4604      	mov	r4, r0
    e17c:	1c40      	adds	r0, r0, #1
    e17e:	4288      	cmp	r0, r1
    e180:	d004      	beq.n	e18c <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x14>
    e182:	6808      	ldr	r0, [r1, #0]
    e184:	f8c4 0001 	str.w	r0, [r4, #1]
    e188:	7908      	ldrb	r0, [r1, #4]
    e18a:	7160      	strb	r0, [r4, #5]
    e18c:	7960      	ldrb	r0, [r4, #5]
    e18e:	f000 001f 	and.w	r0, r0, #31
    e192:	7160      	strb	r0, [r4, #5]
    e194:	2000      	movs	r0, #0
    e196:	72e0      	strb	r0, [r4, #11]
    e198:	4605      	mov	r5, r0
    e19a:	1966      	adds	r6, r4, r5
    e19c:	7870      	ldrb	r0, [r6, #1]
    e19e:	f000 fb4a 	bl	e836 <sym_KQ7WDRFWHZIBRVZJQIHMC5NBIZUJ4NGFK5AE4FQ>
    e1a2:	71b0      	strb	r0, [r6, #6]
    e1a4:	7ae1      	ldrb	r1, [r4, #11]
    e1a6:	1c6d      	adds	r5, r5, #1
    e1a8:	4408      	add	r0, r1
    e1aa:	b2ed      	uxtb	r5, r5
    e1ac:	72e0      	strb	r0, [r4, #11]
    e1ae:	2d05      	cmp	r5, #5
    e1b0:	d3f3      	bcc.n	e19a <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x22>
    e1b2:	bd70      	pop	{r4, r5, r6, pc}
    e1b4:	b2c1      	uxtb	r1, r0
    e1b6:	fa91 f1a1 	rbit	r1, r1
    e1ba:	0a00      	lsrs	r0, r0, #8
    e1bc:	0e09      	lsrs	r1, r1, #24
    e1be:	fa90 f0a0 	rbit	r0, r0
    e1c2:	0e00      	lsrs	r0, r0, #24
    e1c4:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    e1c8:	4770      	bx	lr
    e1ca:	b570      	push	{r4, r5, r6, lr}
    e1cc:	460d      	mov	r5, r1
    e1ce:	4048      	eors	r0, r1
    e1d0:	2400      	movs	r4, #0
    e1d2:	f7ff ffef 	bl	e1b4 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x3c>
    e1d6:	eb00 1000 	add.w	r0, r0, r0, lsl #4
    e1da:	1c64      	adds	r4, r4, #1
    e1dc:	4428      	add	r0, r5
    e1de:	b2e4      	uxtb	r4, r4
    e1e0:	b280      	uxth	r0, r0
    e1e2:	2c03      	cmp	r4, #3
    e1e4:	d3f5      	bcc.n	e1d2 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x5a>
    e1e6:	bd70      	pop	{r4, r5, r6, pc}

0000e1e8 <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ>:
    e1e8:	7802      	ldrb	r2, [r0, #0]
    e1ea:	f002 020f 	and.w	r2, r2, #15
    e1ee:	2a03      	cmp	r2, #3
    e1f0:	d003      	beq.n	e1fa <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ+0x12>
    e1f2:	2a05      	cmp	r2, #5
    e1f4:	d104      	bne.n	e200 <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ+0x18>
    e1f6:	f000 b92e 	b.w	e456 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x4>
    e1fa:	7840      	ldrb	r0, [r0, #1]
    e1fc:	280c      	cmp	r0, #12
    e1fe:	d001      	beq.n	e204 <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ+0x1c>
    e200:	2000      	movs	r0, #0
    e202:	4770      	bx	lr
    e204:	2001      	movs	r0, #1
    e206:	4770      	bx	lr

0000e208 <sym_252O2EYK5FIXU63T5SACWK2VO6UFAQRM77ITNFA>:
    e208:	b570      	push	{r4, r5, r6, lr}
    e20a:	4614      	mov	r4, r2
    e20c:	4605      	mov	r5, r0
    e20e:	2a1f      	cmp	r2, #31
    e210:	d903      	bls.n	e21a <sym_252O2EYK5FIXU63T5SACWK2VO6UFAQRM77ITNFA+0x12>
    e212:	21ee      	movs	r1, #238	; 0xee
    e214:	202a      	movs	r0, #42	; 0x2a
    e216:	f7f3 f8f1 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e21a:	f105 0009 	add.w	r0, r5, #9
    e21e:	f002 fe11 	bl	10e44 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e222:	1da4      	adds	r4, r4, #6
    e224:	706c      	strb	r4, [r5, #1]
    e226:	bd70      	pop	{r4, r5, r6, pc}

0000e228 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>:
    e228:	b510      	push	{r4, lr}
    e22a:	7802      	ldrb	r2, [r0, #0]
    e22c:	f001 030f 	and.w	r3, r1, #15
    e230:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
    e234:	431a      	orrs	r2, r3
    e236:	7002      	strb	r2, [r0, #0]
    e238:	2907      	cmp	r1, #7
    e23a:	d20c      	bcs.n	e256 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA+0x2e>
    e23c:	e8df f001 	tbb	[pc, r1]
    e240:	06040604 	.word	0x06040604
    e244:	00040804 	.word	0x00040804
    e248:	2106      	movs	r1, #6
    e24a:	e002      	b.n	e252 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA+0x2a>
    e24c:	210c      	movs	r1, #12
    e24e:	e000      	b.n	e252 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA+0x2a>
    e250:	2122      	movs	r1, #34	; 0x22
    e252:	7041      	strb	r1, [r0, #1]
    e254:	bd10      	pop	{r4, pc}
    e256:	21a8      	movs	r1, #168	; 0xa8
    e258:	202a      	movs	r0, #42	; 0x2a
    e25a:	f7f3 f8cf 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000e25e <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>:
    e25e:	680a      	ldr	r2, [r1, #0]
    e260:	f840 2f09 	str.w	r2, [r0, #9]!
    e264:	8889      	ldrh	r1, [r1, #4]
    e266:	8081      	strh	r1, [r0, #4]
    e268:	4770      	bx	lr

0000e26a <sym_NAGMMCXDNSRJLJ55T6DS4CG2FNZEN6Y562ZTFRY>:
    e26a:	7802      	ldrb	r2, [r0, #0]
    e26c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    e270:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
    e274:	7002      	strb	r2, [r0, #0]
    e276:	4770      	bx	lr

0000e278 <sym_UDZO6WOEWJ2CNEYVP45GSHBVFT4OP6GEANP3NQY>:
    e278:	680a      	ldr	r2, [r1, #0]
    e27a:	f840 2f03 	str.w	r2, [r0, #3]!
    e27e:	8889      	ldrh	r1, [r1, #4]
    e280:	8081      	strh	r1, [r0, #4]
    e282:	4770      	bx	lr

0000e284 <sym_YBOODJ7VBLXRRILCBQXIORIXU3GHRAYK6WULLQY>:
    e284:	7802      	ldrb	r2, [r0, #0]
    e286:	2340      	movs	r3, #64	; 0x40
    e288:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
    e28c:	ea03 1181 	and.w	r1, r3, r1, lsl #6
    e290:	430a      	orrs	r2, r1
    e292:	7002      	strb	r2, [r0, #0]
    e294:	4770      	bx	lr

0000e296 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI>:
    e296:	b570      	push	{r4, r5, r6, lr}
    e298:	4614      	mov	r4, r2
    e29a:	4605      	mov	r5, r0
    e29c:	2a1f      	cmp	r2, #31
    e29e:	d904      	bls.n	e2aa <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x14>
    e2a0:	f44f 7188 	mov.w	r1, #272	; 0x110
    e2a4:	202a      	movs	r0, #42	; 0x2a
    e2a6:	f7f3 f8a9 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e2aa:	f105 0009 	add.w	r0, r5, #9
    e2ae:	f002 fdc9 	bl	10e44 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e2b2:	1da4      	adds	r4, r4, #6
    e2b4:	706c      	strb	r4, [r5, #1]
    e2b6:	bd70      	pop	{r4, r5, r6, pc}

0000e2b8 <sym_7VZW6MQYCHJNYQ6F4AFCRRJSPXBVUQDDS4RU32Y>:
    e2b8:	6842      	ldr	r2, [r0, #4]
    e2ba:	600a      	str	r2, [r1, #0]
    e2bc:	7a00      	ldrb	r0, [r0, #8]
    e2be:	7108      	strb	r0, [r1, #4]
    e2c0:	4770      	bx	lr

0000e2c2 <sym_E5LV7NLJGDBOOHT3XI7LZP4SJ6B3AVX5ZM7II3A>:
    e2c2:	f8b0 0009 	ldrh.w	r0, [r0, #9]
    e2c6:	4770      	bx	lr

0000e2c8 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A>:
    e2c8:	b570      	push	{r4, r5, r6, lr}
    e2ca:	f8b0 2007 	ldrh.w	r2, [r0, #7]
    e2ce:	f8b0 4009 	ldrh.w	r4, [r0, #9]
    e2d2:	f830 5f05 	ldrh.w	r5, [r0, #5]!
    e2d6:	f810 3c01 	ldrb.w	r3, [r0, #-1]
    e2da:	88c0      	ldrh	r0, [r0, #6]
    e2dc:	b131      	cbz	r1, e2ec <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x24>
    e2de:	f5b2 6f50 	cmp.w	r2, #3328	; 0xd00
    e2e2:	d903      	bls.n	e2ec <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x24>
    e2e4:	f640 5107 	movw	r1, #3335	; 0xd07
    e2e8:	428a      	cmp	r2, r1
    e2ea:	d90b      	bls.n	e304 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x3c>
    e2ec:	1f91      	subs	r1, r2, #6
    e2ee:	f640 467a 	movw	r6, #3194	; 0xc7a
    e2f2:	42b1      	cmp	r1, r6
    e2f4:	d810      	bhi.n	e318 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
    e2f6:	b17b      	cbz	r3, e318 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
    e2f8:	2b08      	cmp	r3, #8
    e2fa:	d80d      	bhi.n	e318 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
    e2fc:	4293      	cmp	r3, r2
    e2fe:	d20b      	bcs.n	e318 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
    e300:	4295      	cmp	r5, r2
    e302:	d809      	bhi.n	e318 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
    e304:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
    e308:	d206      	bcs.n	e318 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
    e30a:	f640 4176 	movw	r1, #3190	; 0xc76
    e30e:	380a      	subs	r0, #10
    e310:	4288      	cmp	r0, r1
    e312:	d801      	bhi.n	e318 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
    e314:	2001      	movs	r0, #1
    e316:	bd70      	pop	{r4, r5, r6, pc}
    e318:	2000      	movs	r0, #0
    e31a:	bd70      	pop	{r4, r5, r6, pc}

0000e31c <sym_GII4UQLGDHD6D5DSTGUIOYZXEEJFVPTQQUWUNII>:
    e31c:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    e320:	4770      	bx	lr

0000e322 <sym_MD56XYITEHSLIFIRQT26SWOCASBX33AYW4XGGWY>:
    e322:	f8b0 0009 	ldrh.w	r0, [r0, #9]
    e326:	4770      	bx	lr

0000e328 <sym_EKDQHRHOWISU7QCQSGE4X3J4VBX22VVETALDGWI>:
    e328:	f8b0 000b 	ldrh.w	r0, [r0, #11]
    e32c:	4770      	bx	lr

0000e32e <sym_7YTCAQN5IYKWCY5F36IVGAEEQIOP6X7YL63LRUI>:
    e32e:	b510      	push	{r4, lr}
    e330:	29fb      	cmp	r1, #251	; 0xfb
    e332:	d904      	bls.n	e33e <sym_7YTCAQN5IYKWCY5F36IVGAEEQIOP6X7YL63LRUI+0x10>
    e334:	f240 61a9 	movw	r1, #1705	; 0x6a9
    e338:	202a      	movs	r0, #42	; 0x2a
    e33a:	f7f3 f85f 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e33e:	7041      	strb	r1, [r0, #1]
    e340:	bd10      	pop	{r4, pc}

0000e342 <sym_FIJW4TR7AWR6OLWCHL3HTVQSVWXOS6T6XISXCQQ>:
    e342:	8980      	ldrh	r0, [r0, #12]
    e344:	8008      	strh	r0, [r1, #0]
    e346:	4770      	bx	lr

0000e348 <sym_NILDTLWW7AYBRN5PYE72ILWSBBVUBN4Y5FF3XQQ>:
    e348:	f8d0 0016 	ldr.w	r0, [r0, #22]
    e34c:	6008      	str	r0, [r1, #0]
    e34e:	4770      	bx	lr

0000e350 <sym_7LJR6S4GQKSUMWIUG2FRZAKXFD3RUBQ6FOHJMZQ>:
    e350:	6842      	ldr	r2, [r0, #4]
    e352:	600a      	str	r2, [r1, #0]
    e354:	6880      	ldr	r0, [r0, #8]
    e356:	6048      	str	r0, [r1, #4]
    e358:	4770      	bx	lr

0000e35a <sym_3BQBYKVQGWCA6VF5GDIUVXGAPLPPXRSSEFO5TXA>:
    e35a:	f850 2f0e 	ldr.w	r2, [r0, #14]!
    e35e:	600a      	str	r2, [r1, #0]
    e360:	6840      	ldr	r0, [r0, #4]
    e362:	6048      	str	r0, [r1, #4]
    e364:	4770      	bx	lr

0000e366 <sym_RGBMWS6T65LAWR3HOVV5354MKQCATDBBY34XWQA>:
    e366:	6809      	ldr	r1, [r1, #0]
    e368:	60c1      	str	r1, [r0, #12]
    e36a:	4770      	bx	lr

0000e36c <sym_5WHAN4NH6PZY7VV5KTN53CABJRWXR3RJHHTA7KA>:
    e36c:	680a      	ldr	r2, [r1, #0]
    e36e:	6042      	str	r2, [r0, #4]
    e370:	6849      	ldr	r1, [r1, #4]
    e372:	6081      	str	r1, [r0, #8]
    e374:	4770      	bx	lr

0000e376 <sym_VV6G4PHP6ULWM4Y2LJJIOETDZSUFDXGJCHBQNZI>:
    e376:	7800      	ldrb	r0, [r0, #0]
    e378:	f000 0003 	and.w	r0, r0, #3
    e37c:	4770      	bx	lr

0000e37e <sym_PHCTC5YUX44NFLNJCEBJKKRAYHGUKTS4AC5GMAI>:
    e37e:	8880      	ldrh	r0, [r0, #4]
    e380:	4770      	bx	lr

0000e382 <sym_BWPZYUAKR5BUOCM2NWAMEPWQB6GIJXBPUENADMI>:
    e382:	88c0      	ldrh	r0, [r0, #6]
    e384:	4770      	bx	lr

0000e386 <sym_QDD7GI62CPYTU4DR5RMOF6JH72V5L65ZJXU3VAA>:
    e386:	8900      	ldrh	r0, [r0, #8]
    e388:	4770      	bx	lr

0000e38a <sym_M5NXXZSYW5XYDZUQUOZMKSTD6GIS5XZ7Y4SKNVI>:
    e38a:	8940      	ldrh	r0, [r0, #10]
    e38c:	4770      	bx	lr

0000e38e <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY>:
    e38e:	8901      	ldrh	r1, [r0, #8]
    e390:	291b      	cmp	r1, #27
    e392:	d30c      	bcc.n	e3ae <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY+0x20>
    e394:	8941      	ldrh	r1, [r0, #10]
    e396:	f44f 72a4 	mov.w	r2, #328	; 0x148
    e39a:	4291      	cmp	r1, r2
    e39c:	d307      	bcc.n	e3ae <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY+0x20>
    e39e:	8881      	ldrh	r1, [r0, #4]
    e3a0:	291b      	cmp	r1, #27
    e3a2:	d304      	bcc.n	e3ae <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY+0x20>
    e3a4:	88c0      	ldrh	r0, [r0, #6]
    e3a6:	4290      	cmp	r0, r2
    e3a8:	d301      	bcc.n	e3ae <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY+0x20>
    e3aa:	2001      	movs	r0, #1
    e3ac:	4770      	bx	lr
    e3ae:	2000      	movs	r0, #0
    e3b0:	4770      	bx	lr

0000e3b2 <sym_PBCQYO46QLEABI4SERHQCHCGDP6NXKCTAYVE53Y>:
    e3b2:	7901      	ldrb	r1, [r0, #4]
    e3b4:	0749      	lsls	r1, r1, #29
    e3b6:	d004      	beq.n	e3c2 <sym_PBCQYO46QLEABI4SERHQCHCGDP6NXKCTAYVE53Y+0x10>
    e3b8:	7940      	ldrb	r0, [r0, #5]
    e3ba:	0740      	lsls	r0, r0, #29
    e3bc:	d001      	beq.n	e3c2 <sym_PBCQYO46QLEABI4SERHQCHCGDP6NXKCTAYVE53Y+0x10>
    e3be:	2001      	movs	r0, #1
    e3c0:	4770      	bx	lr
    e3c2:	2000      	movs	r0, #0
    e3c4:	4770      	bx	lr

0000e3c6 <sym_FVNWXAKGSIJN4YGWC4O4B4H2WPPILAIKB7LLDVI>:
    e3c6:	88c0      	ldrh	r0, [r0, #6]
    e3c8:	4770      	bx	lr

0000e3ca <sym_A6H6572F75Y3NWHNM7XTQ5XKFPHT472D7ZS7PFQ>:
    e3ca:	7901      	ldrb	r1, [r0, #4]
    e3cc:	7940      	ldrb	r0, [r0, #5]
    e3ce:	f001 0107 	and.w	r1, r1, #7
    e3d2:	1e4a      	subs	r2, r1, #1
    e3d4:	f000 0007 	and.w	r0, r0, #7
    e3d8:	4011      	ands	r1, r2
    e3da:	1e42      	subs	r2, r0, #1
    e3dc:	4010      	ands	r0, r2
    e3de:	4301      	orrs	r1, r0
    e3e0:	d001      	beq.n	e3e6 <sym_A6H6572F75Y3NWHNM7XTQ5XKFPHT472D7ZS7PFQ+0x1c>
    e3e2:	2000      	movs	r0, #0
    e3e4:	4770      	bx	lr
    e3e6:	2001      	movs	r0, #1
    e3e8:	4770      	bx	lr

0000e3ea <sym_IMNEYE333DZSYFXBOKOMWVRET5JB5STH5YU7A5A>:
    e3ea:	7900      	ldrb	r0, [r0, #4]
    e3ec:	4770      	bx	lr

0000e3ee <sym_UA37MSV2DKCYXYIDDSBDMFEEGPUD3YMYMAH3IEI>:
    e3ee:	7940      	ldrb	r0, [r0, #5]
    e3f0:	4770      	bx	lr

0000e3f2 <sym_65MVSHFHYY3W6LGERKUEYJPJ7ENCODZZSM2L7CQ>:
    e3f2:	7900      	ldrb	r0, [r0, #4]
    e3f4:	4770      	bx	lr

0000e3f6 <sym_YMBI57OSTLFK65WQKT7WKM26EFMSOHLSMFNNR4I>:
    e3f6:	7101      	strb	r1, [r0, #4]
    e3f8:	4770      	bx	lr

0000e3fa <sym_MR2HDMT6FMX7P5HJAUSXDTOYNLKDM5AILMXKYDY>:
    e3fa:	7940      	ldrb	r0, [r0, #5]
    e3fc:	4770      	bx	lr

0000e3fe <sym_HAHVMCZ4V2U4G5KM2JOTYBKS4GFM72EJZRT7M3A>:
    e3fe:	7141      	strb	r1, [r0, #5]
    e400:	4770      	bx	lr

0000e402 <sym_EHH4TL4V6XWVDGG5OCXTIQQT5C4OFTGXZXSIJAA>:
    e402:	b510      	push	{r4, lr}
    e404:	2a1b      	cmp	r2, #27
    e406:	d904      	bls.n	e412 <sym_EHH4TL4V6XWVDGG5OCXTIQQT5C4OFTGXZXSIJAA+0x10>
    e408:	f240 417f 	movw	r1, #1151	; 0x47f
    e40c:	202a      	movs	r0, #42	; 0x2a
    e40e:	f7f2 fff5 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e412:	7042      	strb	r2, [r0, #1]
    e414:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e418:	1cc0      	adds	r0, r0, #3
    e41a:	f002 bd13 	b.w	10e44 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>

0000e41e <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>:
    e41e:	7802      	ldrb	r2, [r0, #0]
    e420:	f001 0103 	and.w	r1, r1, #3
    e424:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
    e428:	430a      	orrs	r2, r1
    e42a:	7002      	strb	r2, [r0, #0]
    e42c:	4770      	bx	lr

0000e42e <sym_XW2AJRDPRGLPOQ7S6SBIDHJSPT737QJRC7LOWOI>:
    e42e:	7101      	strb	r1, [r0, #4]
    e430:	0a09      	lsrs	r1, r1, #8
    e432:	7141      	strb	r1, [r0, #5]
    e434:	4770      	bx	lr

0000e436 <sym_LKCMUIZAJSOHIZE54V37DJ4ULJ25HGEY7F7ST5I>:
    e436:	7181      	strb	r1, [r0, #6]
    e438:	0a09      	lsrs	r1, r1, #8
    e43a:	71c1      	strb	r1, [r0, #7]
    e43c:	4770      	bx	lr

0000e43e <sym_5NOMYYLIL22YATRZCGPQVOYH6BFSDNIEMEEMIZA>:
    e43e:	7201      	strb	r1, [r0, #8]
    e440:	0a09      	lsrs	r1, r1, #8
    e442:	7241      	strb	r1, [r0, #9]
    e444:	4770      	bx	lr

0000e446 <sym_BD2MQHSWE7QNCT7DV5JGZCA5J2QIL2T6RGRVJ3Y>:
    e446:	7281      	strb	r1, [r0, #10]
    e448:	0a09      	lsrs	r1, r1, #8
    e44a:	72c1      	strb	r1, [r0, #11]
    e44c:	4770      	bx	lr

0000e44e <sym_AFBV6ZWWJ5TP5BBQPAY4D2XGGYVLQVI65FY6JPY>:
    e44e:	7900      	ldrb	r0, [r0, #4]
    e450:	4770      	bx	lr

0000e452 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI>:
    e452:	7900      	ldrb	r0, [r0, #4]
    e454:	4770      	bx	lr
    e456:	b570      	push	{r4, r5, r6, lr}
    e458:	f8d0 201f 	ldr.w	r2, [r0, #31]
    e45c:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
    e460:	f012 0fff 	tst.w	r2, #255	; 0xff
    e464:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
    e468:	d108      	bne.n	e47c <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x2a>
    e46a:	f3c2 2407 	ubfx	r4, r2, #8, #8
    e46e:	b92c      	cbnz	r4, e47c <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x2a>
    e470:	f3c2 4407 	ubfx	r4, r2, #16, #8
    e474:	b914      	cbnz	r4, e47c <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x2a>
    e476:	0e12      	lsrs	r2, r2, #24
    e478:	d100      	bne.n	e47c <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x2a>
    e47a:	b34b      	cbz	r3, e4d0 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    e47c:	7846      	ldrb	r6, [r0, #1]
    e47e:	f8b0 2019 	ldrh.w	r2, [r0, #25]
    e482:	f8b0 401b 	ldrh.w	r4, [r0, #27]
    e486:	f8b0 5017 	ldrh.w	r5, [r0, #23]
    e48a:	7d83      	ldrb	r3, [r0, #22]
    e48c:	2e22      	cmp	r6, #34	; 0x22
    e48e:	d11f      	bne.n	e4d0 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    e490:	b131      	cbz	r1, e4a0 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x4e>
    e492:	f5b2 6f50 	cmp.w	r2, #3328	; 0xd00
    e496:	d903      	bls.n	e4a0 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x4e>
    e498:	f640 5107 	movw	r1, #3335	; 0xd07
    e49c:	428a      	cmp	r2, r1
    e49e:	d90b      	bls.n	e4b8 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x66>
    e4a0:	1f91      	subs	r1, r2, #6
    e4a2:	f640 467a 	movw	r6, #3194	; 0xc7a
    e4a6:	42b1      	cmp	r1, r6
    e4a8:	d812      	bhi.n	e4d0 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    e4aa:	b18b      	cbz	r3, e4d0 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    e4ac:	2b08      	cmp	r3, #8
    e4ae:	d80f      	bhi.n	e4d0 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    e4b0:	4293      	cmp	r3, r2
    e4b2:	d20d      	bcs.n	e4d0 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    e4b4:	4295      	cmp	r5, r2
    e4b6:	d80b      	bhi.n	e4d0 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    e4b8:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
    e4bc:	d208      	bcs.n	e4d0 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    e4be:	f8b0 001d 	ldrh.w	r0, [r0, #29]
    e4c2:	f640 4176 	movw	r1, #3190	; 0xc76
    e4c6:	380a      	subs	r0, #10
    e4c8:	4288      	cmp	r0, r1
    e4ca:	d801      	bhi.n	e4d0 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    e4cc:	2001      	movs	r0, #1
    e4ce:	bd70      	pop	{r4, r5, r6, pc}
    e4d0:	2000      	movs	r0, #0
    e4d2:	bd70      	pop	{r4, r5, r6, pc}

0000e4d4 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>:
    e4d4:	6841      	ldr	r1, [r0, #4]
    e4d6:	2200      	movs	r2, #0
    e4d8:	f891 322a 	ldrb.w	r3, [r1, #554]	; 0x22a
    e4dc:	2b00      	cmp	r3, #0
    e4de:	d004      	beq.n	e4ea <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x16>
    e4e0:	f881 222a 	strb.w	r2, [r1, #554]	; 0x22a
    e4e4:	6840      	ldr	r0, [r0, #4]
    e4e6:	f000 bd70 	b.w	efca <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y>
    e4ea:	4770      	bx	lr

0000e4ec <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>:
    e4ec:	b510      	push	{r4, lr}
    e4ee:	7a01      	ldrb	r1, [r0, #8]
    e4f0:	b119      	cbz	r1, e4fa <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xe>
    e4f2:	2901      	cmp	r1, #1
    e4f4:	d006      	beq.n	e504 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x18>
    e4f6:	2000      	movs	r0, #0
    e4f8:	bd10      	pop	{r4, pc}
    e4fa:	88c2      	ldrh	r2, [r0, #6]
    e4fc:	6803      	ldr	r3, [r0, #0]
    e4fe:	8880      	ldrh	r0, [r0, #4]
    e500:	2102      	movs	r1, #2
    e502:	e003      	b.n	e50c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x20>
    e504:	88c2      	ldrh	r2, [r0, #6]
    e506:	6803      	ldr	r3, [r0, #0]
    e508:	8880      	ldrh	r0, [r0, #4]
    e50a:	2101      	movs	r1, #1
    e50c:	f7f4 fea8 	bl	3260 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x14>
    e510:	b908      	cbnz	r0, e516 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x2a>
    e512:	f7f4 fef5 	bl	3300 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q>
    e516:	2001      	movs	r0, #1
    e518:	bd10      	pop	{r4, pc}

0000e51a <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>:
    e51a:	b508      	push	{r3, lr}
    e51c:	7a03      	ldrb	r3, [r0, #8]
    e51e:	f88d 3000 	strb.w	r3, [sp]
    e522:	9b00      	ldr	r3, [sp, #0]
    e524:	9300      	str	r3, [sp, #0]
    e526:	f89d 3000 	ldrb.w	r3, [sp]
    e52a:	b123      	cbz	r3, e536 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY+0x1c>
    e52c:	f240 3117 	movw	r1, #791	; 0x317
    e530:	2010      	movs	r0, #16
    e532:	f7f2 ff63 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e536:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    e53a:	f7f5 b855 	b.w	35e8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x100>

0000e53e <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>:
    e53e:	f7f5 b881 	b.w	3644 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x15c>

0000e542 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>:
    e542:	7a03      	ldrb	r3, [r0, #8]
    e544:	b082      	sub	sp, #8
    e546:	f88d 3000 	strb.w	r3, [sp]
    e54a:	9b00      	ldr	r3, [sp, #0]
    e54c:	9300      	str	r3, [sp, #0]
    e54e:	f89d 3000 	ldrb.w	r3, [sp]
    e552:	2b00      	cmp	r3, #0
    e554:	d102      	bne.n	e55c <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY+0x1a>
    e556:	b002      	add	sp, #8
    e558:	f7f5 b846 	b.w	35e8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x100>
    e55c:	b002      	add	sp, #8
    e55e:	4770      	bx	lr
    e560:	2000      	movs	r0, #0
    e562:	7048      	strb	r0, [r1, #1]
    e564:	2003      	movs	r0, #3
    e566:	7008      	strb	r0, [r1, #0]
    e568:	2001      	movs	r0, #1
    e56a:	7108      	strb	r0, [r1, #4]
    e56c:	4770      	bx	lr

0000e56e <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>:
    e56e:	b510      	push	{r4, lr}
    e570:	888c      	ldrh	r4, [r1, #4]
    e572:	890a      	ldrh	r2, [r1, #8]
    e574:	884b      	ldrh	r3, [r1, #2]
    e576:	88c9      	ldrh	r1, [r1, #6]
    e578:	f8a0 3048 	strh.w	r3, [r0, #72]	; 0x48
    e57c:	f8a0 104c 	strh.w	r1, [r0, #76]	; 0x4c
    e580:	f8a0 404a 	strh.w	r4, [r0, #74]	; 0x4a
    e584:	f8a0 204e 	strh.w	r2, [r0, #78]	; 0x4e
    e588:	bd10      	pop	{r4, pc}

0000e58a <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>:
    e58a:	b570      	push	{r4, r5, r6, lr}
    e58c:	4615      	mov	r5, r2
    e58e:	460c      	mov	r4, r1
    e590:	f000 f91a 	bl	e7c8 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x108>
    e594:	3096      	adds	r0, #150	; 0x96
    e596:	4428      	add	r0, r5
    e598:	42a0      	cmp	r0, r4
    e59a:	d801      	bhi.n	e5a0 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI+0x16>
    e59c:	1a20      	subs	r0, r4, r0
    e59e:	bd70      	pop	{r4, r5, r6, pc}
    e5a0:	2000      	movs	r0, #0
    e5a2:	bd70      	pop	{r4, r5, r6, pc}

0000e5a4 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>:
    e5a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e5a8:	4604      	mov	r4, r0
    e5aa:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
    e5ac:	8f46      	ldrh	r6, [r0, #58]	; 0x3a
    e5ae:	f8b0 504c 	ldrh.w	r5, [r0, #76]	; 0x4c
    e5b2:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
    e5b6:	4285      	cmp	r5, r0
    e5b8:	d300      	bcc.n	e5bc <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x18>
    e5ba:	4605      	mov	r5, r0
    e5bc:	4620      	mov	r0, r4
    e5be:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    e5c2:	f000 f89c 	bl	e6fe <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x3e>
    e5c6:	4601      	mov	r1, r0
    e5c8:	86e5      	strh	r5, [r4, #54]	; 0x36
    e5ca:	8761      	strh	r1, [r4, #58]	; 0x3a
    e5cc:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
    e5ce:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    e5d2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
    e5d4:	4680      	mov	r8, r0
    e5d6:	42aa      	cmp	r2, r5
    e5d8:	d200      	bcs.n	e5dc <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x38>
    e5da:	462a      	mov	r2, r5
    e5dc:	428b      	cmp	r3, r1
    e5de:	d200      	bcs.n	e5e2 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x3e>
    e5e0:	460b      	mov	r3, r1
    e5e2:	8202      	strh	r2, [r0, #16]
    e5e4:	f8a8 3012 	strh.w	r3, [r8, #18]
    e5e8:	42bd      	cmp	r5, r7
    e5ea:	d101      	bne.n	e5f0 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x4c>
    e5ec:	42b1      	cmp	r1, r6
    e5ee:	d001      	beq.n	e5f4 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x50>
    e5f0:	2001      	movs	r0, #1
    e5f2:	e000      	b.n	e5f6 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x52>
    e5f4:	2000      	movs	r0, #0
    e5f6:	4681      	mov	r9, r0
    e5f8:	f8b4 5048 	ldrh.w	r5, [r4, #72]	; 0x48
    e5fc:	f8b4 0042 	ldrh.w	r0, [r4, #66]	; 0x42
    e600:	8ea7      	ldrh	r7, [r4, #52]	; 0x34
    e602:	8f26      	ldrh	r6, [r4, #56]	; 0x38
    e604:	4285      	cmp	r5, r0
    e606:	d300      	bcc.n	e60a <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x66>
    e608:	4605      	mov	r5, r0
    e60a:	f894 106a 	ldrb.w	r1, [r4, #106]	; 0x6a
    e60e:	4620      	mov	r0, r4
    e610:	f000 f87d 	bl	e70e <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x4e>
    e614:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
    e618:	2902      	cmp	r1, #2
    e61a:	d108      	bne.n	e62e <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x8a>
    e61c:	42af      	cmp	r7, r5
    e61e:	d200      	bcs.n	e622 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x7e>
    e620:	463d      	mov	r5, r7
    e622:	4286      	cmp	r6, r0
    e624:	d200      	bcs.n	e628 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x84>
    e626:	4630      	mov	r0, r6
    e628:	2100      	movs	r1, #0
    e62a:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
    e62e:	f8a8 5008 	strh.w	r5, [r8, #8]
    e632:	f8a8 000c 	strh.w	r0, [r8, #12]
    e636:	42bd      	cmp	r5, r7
    e638:	d101      	bne.n	e63e <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x9a>
    e63a:	42b0      	cmp	r0, r6
    e63c:	d001      	beq.n	e642 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x9e>
    e63e:	2001      	movs	r0, #1
    e640:	e000      	b.n	e644 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0xa0>
    e642:	2000      	movs	r0, #0
    e644:	ea40 0009 	orr.w	r0, r0, r9
    e648:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000e64c <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>:
    e64c:	6840      	ldr	r0, [r0, #4]
    e64e:	4770      	bx	lr

0000e650 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>:
    e650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e654:	4616      	mov	r6, r2
    e656:	460f      	mov	r7, r1
    e658:	4604      	mov	r4, r0
    e65a:	f000 f8b5 	bl	e7c8 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x108>
    e65e:	4605      	mov	r5, r0
    e660:	463a      	mov	r2, r7
    e662:	6921      	ldr	r1, [r4, #16]
    e664:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    e666:	f000 f845 	bl	e6f4 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x34>
    e66a:	19a9      	adds	r1, r5, r6
    e66c:	4281      	cmp	r1, r0
    e66e:	d300      	bcc.n	e672 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY+0x22>
    e670:	4608      	mov	r0, r1
    e672:	6320      	str	r0, [r4, #48]	; 0x30
    e674:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000e678 <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>:
    e678:	221b      	movs	r2, #27
    e67a:	8402      	strh	r2, [r0, #32]
    e67c:	8382      	strh	r2, [r0, #28]
    e67e:	82c2      	strh	r2, [r0, #22]
    e680:	8282      	strh	r2, [r0, #20]
    e682:	8142      	strh	r2, [r0, #10]
    e684:	8202      	strh	r2, [r0, #16]
    e686:	8102      	strh	r2, [r0, #8]
    e688:	8542      	strh	r2, [r0, #42]	; 0x2a
    e68a:	8582      	strh	r2, [r0, #44]	; 0x2c
    e68c:	8482      	strh	r2, [r0, #36]	; 0x24
    e68e:	2900      	cmp	r1, #0
    e690:	d10a      	bne.n	e6a8 <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ+0x30>
    e692:	f44f 71a4 	mov.w	r1, #328	; 0x148
    e696:	8441      	strh	r1, [r0, #34]	; 0x22
    e698:	83c1      	strh	r1, [r0, #30]
    e69a:	8341      	strh	r1, [r0, #26]
    e69c:	8301      	strh	r1, [r0, #24]
    e69e:	81c1      	strh	r1, [r0, #14]
    e6a0:	8241      	strh	r1, [r0, #18]
    e6a2:	8181      	strh	r1, [r0, #12]
    e6a4:	85c1      	strh	r1, [r0, #46]	; 0x2e
    e6a6:	8601      	strh	r1, [r0, #48]	; 0x30
    e6a8:	4770      	bx	lr

0000e6aa <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>:
    e6aa:	6800      	ldr	r0, [r0, #0]
    e6ac:	f101 029c 	add.w	r2, r1, #156	; 0x9c
    e6b0:	4290      	cmp	r0, r2
    e6b2:	d903      	bls.n	e6bc <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A+0x12>
    e6b4:	1a40      	subs	r0, r0, r1
    e6b6:	389c      	subs	r0, #156	; 0x9c
    e6b8:	0840      	lsrs	r0, r0, #1
    e6ba:	4770      	bx	lr
    e6bc:	2000      	movs	r0, #0
    e6be:	4770      	bx	lr

0000e6c0 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>:
    e6c0:	b510      	push	{r4, lr}
    e6c2:	9c02      	ldr	r4, [sp, #8]
    e6c4:	8281      	strh	r1, [r0, #20]
    e6c6:	82c2      	strh	r2, [r0, #22]
    e6c8:	8303      	strh	r3, [r0, #24]
    e6ca:	8344      	strh	r4, [r0, #26]
    e6cc:	bd10      	pop	{r4, pc}
    e6ce:	1d00      	adds	r0, r0, #4
    e6d0:	b510      	push	{r4, lr}
    e6d2:	b280      	uxth	r0, r0
    e6d4:	2901      	cmp	r1, #1
    e6d6:	d006      	beq.n	e6e6 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x26>
    e6d8:	2902      	cmp	r1, #2
    e6da:	d007      	beq.n	e6ec <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x2c>
    e6dc:	f240 2126 	movw	r1, #550	; 0x226
    e6e0:	2006      	movs	r0, #6
    e6e2:	f7f2 fe8b 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e6e6:	00c0      	lsls	r0, r0, #3
    e6e8:	3050      	adds	r0, #80	; 0x50
    e6ea:	e001      	b.n	e6f0 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x30>
    e6ec:	0080      	lsls	r0, r0, #2
    e6ee:	302c      	adds	r0, #44	; 0x2c
    e6f0:	b280      	uxth	r0, r0
    e6f2:	bd10      	pop	{r4, pc}
    e6f4:	4288      	cmp	r0, r1
    e6f6:	d300      	bcc.n	e6fa <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x3a>
    e6f8:	4608      	mov	r0, r1
    e6fa:	1a80      	subs	r0, r0, r2
    e6fc:	4770      	bx	lr
    e6fe:	f8b0 104e 	ldrh.w	r1, [r0, #78]	; 0x4e
    e702:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
    e706:	4281      	cmp	r1, r0
    e708:	d200      	bcs.n	e70c <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x4c>
    e70a:	4608      	mov	r0, r1
    e70c:	4770      	bx	lr
    e70e:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
    e712:	f8b0 0046 	ldrh.w	r0, [r0, #70]	; 0x46
    e716:	4281      	cmp	r1, r0
    e718:	d200      	bcs.n	e71c <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x5c>
    e71a:	4608      	mov	r0, r1
    e71c:	4770      	bx	lr
    e71e:	b538      	push	{r3, r4, r5, lr}
    e720:	2200      	movs	r2, #0
    e722:	f1a0 0318 	sub.w	r3, r0, #24
    e726:	2413      	movs	r4, #19
    e728:	7202      	strb	r2, [r0, #8]
    e72a:	704a      	strb	r2, [r1, #1]
    e72c:	700c      	strb	r4, [r1, #0]
    e72e:	f8d3 5022 	ldr.w	r5, [r3, #34]	; 0x22
    e732:	604d      	str	r5, [r1, #4]
    e734:	f8d3 5026 	ldr.w	r5, [r3, #38]	; 0x26
    e738:	608d      	str	r5, [r1, #8]
    e73a:	f8d3 502a 	ldr.w	r5, [r3, #42]	; 0x2a
    e73e:	60cd      	str	r5, [r1, #12]
    e740:	7a05      	ldrb	r5, [r0, #8]
    e742:	f88d 5000 	strb.w	r5, [sp]
    e746:	9d00      	ldr	r5, [sp, #0]
    e748:	9500      	str	r5, [sp, #0]
    e74a:	f89d 5000 	ldrb.w	r5, [sp]
    e74e:	2d00      	cmp	r5, #0
    e750:	d1ea      	bne.n	e728 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x68>
    e752:	bd38      	pop	{r3, r4, r5, pc}
    e754:	b5f0      	push	{r4, r5, r6, r7, lr}
    e756:	b087      	sub	sp, #28
    e758:	460d      	mov	r5, r1
    e75a:	4604      	mov	r4, r0
    e75c:	f7f4 fd6c 	bl	3238 <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I>
    e760:	2600      	movs	r6, #0
    e762:	b328      	cbz	r0, e7b0 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xf0>
    e764:	f5a4 70bc 	sub.w	r0, r4, #376	; 0x178
    e768:	7226      	strb	r6, [r4, #8]
    e76a:	8807      	ldrh	r7, [r0, #0]
    e76c:	a903      	add	r1, sp, #12
    e76e:	4638      	mov	r0, r7
    e770:	f001 fcf3 	bl	1015a <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>
    e774:	b108      	cbz	r0, e77a <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xba>
    e776:	21fd      	movs	r1, #253	; 0xfd
    e778:	e017      	b.n	e7aa <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xea>
    e77a:	f8ad 7000 	strh.w	r7, [sp]
    e77e:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    e782:	f8ad 0002 	strh.w	r0, [sp, #2]
    e786:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    e78a:	f8ad 0004 	strh.w	r0, [sp, #4]
    e78e:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    e792:	f8ad 0006 	strh.w	r0, [sp, #6]
    e796:	f8bd 0010 	ldrh.w	r0, [sp, #16]
    e79a:	f8ad 0008 	strh.w	r0, [sp, #8]
    e79e:	4668      	mov	r0, sp
    e7a0:	f001 fd17 	bl	101d2 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>
    e7a4:	b120      	cbz	r0, e7b0 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xf0>
    e7a6:	f44f 7183 	mov.w	r1, #262	; 0x106
    e7aa:	202c      	movs	r0, #44	; 0x2c
    e7ac:	f7f2 fe26 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e7b0:	201b      	movs	r0, #27
    e7b2:	7028      	strb	r0, [r5, #0]
    e7b4:	706e      	strb	r6, [r5, #1]
    e7b6:	f854 0f0a 	ldr.w	r0, [r4, #10]!
    e7ba:	6068      	str	r0, [r5, #4]
    e7bc:	6860      	ldr	r0, [r4, #4]
    e7be:	60a8      	str	r0, [r5, #8]
    e7c0:	8920      	ldrh	r0, [r4, #8]
    e7c2:	81a8      	strh	r0, [r5, #12]
    e7c4:	b007      	add	sp, #28
    e7c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e7c8:	2196      	movs	r1, #150	; 0x96
    e7ca:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
    e7ce:	f890 206a 	ldrb.w	r2, [r0, #106]	; 0x6a
    e7d2:	f000 b800 	b.w	e7d6 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x116>
    e7d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e7da:	460d      	mov	r5, r1
    e7dc:	4606      	mov	r6, r0
    e7de:	4698      	mov	r8, r3
    e7e0:	4617      	mov	r7, r2
    e7e2:	8e80      	ldrh	r0, [r0, #52]	; 0x34
    e7e4:	4611      	mov	r1, r2
    e7e6:	f7ff ff72 	bl	e6ce <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xe>
    e7ea:	4604      	mov	r4, r0
    e7ec:	4639      	mov	r1, r7
    e7ee:	4630      	mov	r0, r6
    e7f0:	f7ff ff8d 	bl	e70e <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x4e>
    e7f4:	42a0      	cmp	r0, r4
    e7f6:	d200      	bcs.n	e7fa <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x13a>
    e7f8:	4604      	mov	r4, r0
    e7fa:	8fb0      	ldrh	r0, [r6, #60]	; 0x3c
    e7fc:	4641      	mov	r1, r8
    e7fe:	f7ff ff66 	bl	e6ce <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xe>
    e802:	4607      	mov	r7, r0
    e804:	4641      	mov	r1, r8
    e806:	4630      	mov	r0, r6
    e808:	f7ff ff79 	bl	e6fe <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x3e>
    e80c:	42b8      	cmp	r0, r7
    e80e:	d300      	bcc.n	e812 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x152>
    e810:	4638      	mov	r0, r7
    e812:	4420      	add	r0, r4
    e814:	4428      	add	r0, r5
    e816:	1d80      	adds	r0, r0, #6
    e818:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e81c:	b510      	push	{r4, lr}
    e81e:	4604      	mov	r4, r0
    e820:	2108      	movs	r1, #8
    e822:	4620      	mov	r0, r4
    e824:	f7f2 fe98 	bl	1558 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    e828:	6820      	ldr	r0, [r4, #0]
    e82a:	2800      	cmp	r0, #0
    e82c:	d102      	bne.n	e834 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x174>
    e82e:	6860      	ldr	r0, [r4, #4]
    e830:	2800      	cmp	r0, #0
    e832:	d0f5      	beq.n	e820 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x160>
    e834:	bd10      	pop	{r4, pc}

0000e836 <sym_KQ7WDRFWHZIBRVZJQIHMC5NBIZUJ4NGFK5AE4FQ>:
    e836:	f000 0155 	and.w	r1, r0, #85	; 0x55
    e83a:	2255      	movs	r2, #85	; 0x55
    e83c:	ea02 0050 	and.w	r0, r2, r0, lsr #1
    e840:	4408      	add	r0, r1
    e842:	f000 0133 	and.w	r1, r0, #51	; 0x33
    e846:	2233      	movs	r2, #51	; 0x33
    e848:	ea02 0090 	and.w	r0, r2, r0, lsr #2
    e84c:	4408      	add	r0, r1
    e84e:	f000 010f 	and.w	r1, r0, #15
    e852:	eb01 1010 	add.w	r0, r1, r0, lsr #4
    e856:	4770      	bx	lr

0000e858 <sym_EROH2ERI6YP4PUJVAMOS4KJ2YDG74D2WAXB2TOI>:
    e858:	b510      	push	{r4, lr}
    e85a:	f1a0 0234 	sub.w	r2, r0, #52	; 0x34
    e85e:	f830 4cb4 	ldrh.w	r4, [r0, #-180]
    e862:	2000      	movs	r0, #0
    e864:	7048      	strb	r0, [r1, #1]
    e866:	230a      	movs	r3, #10
    e868:	700b      	strb	r3, [r1, #0]
    e86a:	7108      	strb	r0, [r1, #4]
    e86c:	f8a1 4005 	strh.w	r4, [r1, #5]
    e870:	f892 003d 	ldrb.w	r0, [r2, #61]	; 0x3d
    e874:	71c8      	strb	r0, [r1, #7]
    e876:	4620      	mov	r0, r4
    e878:	f7f3 f9bc 	bl	1bf4 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    e87c:	f7fe fdbd 	bl	d3fa <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    e880:	b140      	cbz	r0, e894 <sym_EROH2ERI6YP4PUJVAMOS4KJ2YDG74D2WAXB2TOI+0x3c>
    e882:	4620      	mov	r0, r4
    e884:	f7ff f9b8 	bl	dbf8 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    e888:	4620      	mov	r0, r4
    e88a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e88e:	2100      	movs	r1, #0
    e890:	f7f3 b83a 	b.w	1908 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    e894:	2160      	movs	r1, #96	; 0x60
    e896:	2063      	movs	r0, #99	; 0x63
    e898:	f7f2 fdb0 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000e89c <sym_24PTBIAZ2OKSUMWBHATZCO4EQUFF3BOLAN2QX4Y>:
    e89c:	b538      	push	{r3, r4, r5, lr}
    e89e:	2200      	movs	r2, #0
    e8a0:	704a      	strb	r2, [r1, #1]
    e8a2:	2307      	movs	r3, #7
    e8a4:	700b      	strb	r3, [r1, #0]
    e8a6:	f1a0 0474 	sub.w	r4, r0, #116	; 0x74
    e8aa:	f5a0 73df 	sub.w	r3, r0, #446	; 0x1be
    e8ae:	7202      	strb	r2, [r0, #8]
    e8b0:	84da      	strh	r2, [r3, #38]	; 0x26
    e8b2:	f8d4 507e 	ldr.w	r5, [r4, #126]	; 0x7e
    e8b6:	604d      	str	r5, [r1, #4]
    e8b8:	f8d4 5082 	ldr.w	r5, [r4, #130]	; 0x82
    e8bc:	608d      	str	r5, [r1, #8]
    e8be:	f8b4 5086 	ldrh.w	r5, [r4, #134]	; 0x86
    e8c2:	818d      	strh	r5, [r1, #12]
    e8c4:	710a      	strb	r2, [r1, #4]
    e8c6:	7a05      	ldrb	r5, [r0, #8]
    e8c8:	f88d 5000 	strb.w	r5, [sp]
    e8cc:	9d00      	ldr	r5, [sp, #0]
    e8ce:	9500      	str	r5, [sp, #0]
    e8d0:	f89d 5000 	ldrb.w	r5, [sp]
    e8d4:	2d00      	cmp	r5, #0
    e8d6:	d1ea      	bne.n	e8ae <sym_24PTBIAZ2OKSUMWBHATZCO4EQUFF3BOLAN2QX4Y+0x12>
    e8d8:	bd38      	pop	{r3, r4, r5, pc}

0000e8da <sym_2TCPCDAUQ3FXZYG56Z6ZP7VCFNUJTBV3EZJYPGY>:
    e8da:	2200      	movs	r2, #0
    e8dc:	704a      	strb	r2, [r1, #1]
    e8de:	220b      	movs	r2, #11
    e8e0:	700a      	strb	r2, [r1, #0]
    e8e2:	f100 020a 	add.w	r2, r0, #10
    e8e6:	7a83      	ldrb	r3, [r0, #10]
    e8e8:	f2a0 200a 	subw	r0, r0, #522	; 0x20a
    e8ec:	710b      	strb	r3, [r1, #4]
    e8ee:	8800      	ldrh	r0, [r0, #0]
    e8f0:	80c8      	strh	r0, [r1, #6]
    e8f2:	7910      	ldrb	r0, [r2, #4]
    e8f4:	7208      	strb	r0, [r1, #8]
    e8f6:	4770      	bx	lr

0000e8f8 <sym_S6U6ANENQP6QL5TLITNXPOYFSB26Q5AFTW32CXI>:
    e8f8:	2200      	movs	r2, #0
    e8fa:	704a      	strb	r2, [r1, #1]
    e8fc:	220c      	movs	r2, #12
    e8fe:	700a      	strb	r2, [r1, #0]
    e900:	7a82      	ldrb	r2, [r0, #10]
    e902:	f2a0 200a 	subw	r0, r0, #522	; 0x20a
    e906:	710a      	strb	r2, [r1, #4]
    e908:	8800      	ldrh	r0, [r0, #0]
    e90a:	80c8      	strh	r0, [r1, #6]
    e90c:	4770      	bx	lr

0000e90e <sym_P3OAHUDLNMEJKO66PKADYJ5KBQTQCDBZBHL5ZUY>:
    e90e:	2200      	movs	r2, #0
    e910:	704a      	strb	r2, [r1, #1]
    e912:	2208      	movs	r2, #8
    e914:	700a      	strb	r2, [r1, #0]
    e916:	f5a0 7237 	sub.w	r2, r0, #732	; 0x2dc
    e91a:	8812      	ldrh	r2, [r2, #0]
    e91c:	808a      	strh	r2, [r1, #4]
    e91e:	68c2      	ldr	r2, [r0, #12]
    e920:	f8c1 2006 	str.w	r2, [r1, #6]
    e924:	6902      	ldr	r2, [r0, #16]
    e926:	f8c1 200a 	str.w	r2, [r1, #10]
    e92a:	8a80      	ldrh	r0, [r0, #20]
    e92c:	81c8      	strh	r0, [r1, #14]
    e92e:	4770      	bx	lr

0000e930 <sym_OPCORHVHZVKAWEVWCDZOHGGLXMSL2TBGHVHNDOY>:
    e930:	b510      	push	{r4, lr}
    e932:	6844      	ldr	r4, [r0, #4]
    e934:	7803      	ldrb	r3, [r0, #0]
    e936:	2100      	movs	r1, #0
    e938:	f894 209d 	ldrb.w	r2, [r4, #157]	; 0x9d
    e93c:	3480      	adds	r4, #128	; 0x80
    e93e:	4620      	mov	r0, r4
    e940:	f7ff fa54 	bl	ddec <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    e944:	b110      	cbz	r0, e94c <sym_OPCORHVHZVKAWEVWCDZOHGGLXMSL2TBGHVHNDOY+0x1c>
    e946:	2004      	movs	r0, #4
    e948:	7760      	strb	r0, [r4, #29]
    e94a:	bd10      	pop	{r4, pc}
    e94c:	21aa      	movs	r1, #170	; 0xaa
    e94e:	201c      	movs	r0, #28
    e950:	f7f2 fd54 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000e954 <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY>:
    e954:	b510      	push	{r4, lr}
    e956:	6841      	ldr	r1, [r0, #4]
    e958:	f891 208c 	ldrb.w	r2, [r1, #140]	; 0x8c
    e95c:	07d2      	lsls	r2, r2, #31
    e95e:	d00b      	beq.n	e978 <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY+0x24>
    e960:	f811 2fda 	ldrb.w	r2, [r1, #218]!
    e964:	1e52      	subs	r2, r2, #1
    e966:	b252      	sxtb	r2, r2
    e968:	700a      	strb	r2, [r1, #0]
    e96a:	6840      	ldr	r0, [r0, #4]
    e96c:	2a00      	cmp	r2, #0
    e96e:	da05      	bge.n	e97c <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY+0x28>
    e970:	21b9      	movs	r1, #185	; 0xb9
    e972:	201c      	movs	r0, #28
    e974:	f7f2 fd42 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e978:	21b7      	movs	r1, #183	; 0xb7
    e97a:	e7fa      	b.n	e972 <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY+0x1e>
    e97c:	f850 1f8c 	ldr.w	r1, [r0, #140]!
    e980:	f021 0101 	bic.w	r1, r1, #1
    e984:	6001      	str	r1, [r0, #0]
    e986:	bd10      	pop	{r4, pc}
    e988:	2200      	movs	r2, #0
    e98a:	704a      	strb	r2, [r1, #1]
    e98c:	2206      	movs	r2, #6
    e98e:	700a      	strb	r2, [r1, #0]
    e990:	f850 2f09 	ldr.w	r2, [r0, #9]!
    e994:	604a      	str	r2, [r1, #4]
    e996:	6842      	ldr	r2, [r0, #4]
    e998:	608a      	str	r2, [r1, #8]
    e99a:	8902      	ldrh	r2, [r0, #8]
    e99c:	818a      	strh	r2, [r1, #12]
    e99e:	7a80      	ldrb	r0, [r0, #10]
    e9a0:	7388      	strb	r0, [r1, #14]
    e9a2:	4770      	bx	lr

0000e9a4 <sym_NK4HRRKGX3ST3ARVTU6HUEXLOWZFFBMCIDNT3EI>:
    e9a4:	2200      	movs	r2, #0
    e9a6:	704a      	strb	r2, [r1, #1]
    e9a8:	220e      	movs	r2, #14
    e9aa:	f5a0 70ac 	sub.w	r0, r0, #344	; 0x158
    e9ae:	700a      	strb	r2, [r1, #0]
    e9b0:	8800      	ldrh	r0, [r0, #0]
    e9b2:	8088      	strh	r0, [r1, #4]
    e9b4:	4770      	bx	lr

0000e9b6 <sym_2UKPFKMGRDZ4VV635IPSP7DNWK4DJAJ7LOHQN6A>:
    e9b6:	b538      	push	{r3, r4, r5, lr}
    e9b8:	2400      	movs	r4, #0
    e9ba:	704c      	strb	r4, [r1, #1]
    e9bc:	2501      	movs	r5, #1
    e9be:	700d      	strb	r5, [r1, #0]
    e9c0:	f1a0 025e 	sub.w	r2, r0, #94	; 0x5e
    e9c4:	f1a0 03de 	sub.w	r3, r0, #222	; 0xde
    e9c8:	710c      	strb	r4, [r1, #4]
    e9ca:	7204      	strb	r4, [r0, #8]
    e9cc:	881d      	ldrh	r5, [r3, #0]
    e9ce:	f8a1 5005 	strh.w	r5, [r1, #5]
    e9d2:	f892 5067 	ldrb.w	r5, [r2, #103]	; 0x67
    e9d6:	71cd      	strb	r5, [r1, #7]
    e9d8:	f8b2 5068 	ldrh.w	r5, [r2, #104]	; 0x68
    e9dc:	810d      	strh	r5, [r1, #8]
    e9de:	f8b2 506a 	ldrh.w	r5, [r2, #106]	; 0x6a
    e9e2:	814d      	strh	r5, [r1, #10]
    e9e4:	7a05      	ldrb	r5, [r0, #8]
    e9e6:	f88d 5000 	strb.w	r5, [sp]
    e9ea:	9d00      	ldr	r5, [sp, #0]
    e9ec:	9500      	str	r5, [sp, #0]
    e9ee:	f89d 5000 	ldrb.w	r5, [sp]
    e9f2:	2d00      	cmp	r5, #0
    e9f4:	d1e9      	bne.n	e9ca <sym_2UKPFKMGRDZ4VV635IPSP7DNWK4DJAJ7LOHQN6A+0x14>
    e9f6:	bd38      	pop	{r3, r4, r5, pc}

0000e9f8 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q>:
    e9f8:	b570      	push	{r4, r5, r6, lr}
    e9fa:	7803      	ldrb	r3, [r0, #0]
    e9fc:	6840      	ldr	r0, [r0, #4]
    e9fe:	2500      	movs	r5, #0
    ea00:	f100 0480 	add.w	r4, r0, #128	; 0x80
    ea04:	f890 10dd 	ldrb.w	r1, [r0, #221]	; 0xdd
    ea08:	f500 7098 	add.w	r0, r0, #304	; 0x130
    ea0c:	0789      	lsls	r1, r1, #30
    ea0e:	d40e      	bmi.n	ea2e <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x36>
    ea10:	7f62      	ldrb	r2, [r4, #29]
    ea12:	2100      	movs	r1, #0
    ea14:	4620      	mov	r0, r4
    ea16:	f7ff f9e9 	bl	ddec <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    ea1a:	b130      	cbz	r0, ea2a <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x32>
    ea1c:	2001      	movs	r0, #1
    ea1e:	7760      	strb	r0, [r4, #29]
    ea20:	f884 0056 	strb.w	r0, [r4, #86]	; 0x56
    ea24:	f8a4 5052 	strh.w	r5, [r4, #82]	; 0x52
    ea28:	bd70      	pop	{r4, r5, r6, pc}
    ea2a:	216e      	movs	r1, #110	; 0x6e
    ea2c:	e00b      	b.n	ea46 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x4e>
    ea2e:	7b21      	ldrb	r1, [r4, #12]
    ea30:	0789      	lsls	r1, r1, #30
    ea32:	d50f      	bpl.n	ea54 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x5c>
    ea34:	f894 105a 	ldrb.w	r1, [r4, #90]	; 0x5a
    ea38:	1e49      	subs	r1, r1, #1
    ea3a:	b249      	sxtb	r1, r1
    ea3c:	f884 105a 	strb.w	r1, [r4, #90]	; 0x5a
    ea40:	2900      	cmp	r1, #0
    ea42:	da03      	bge.n	ea4c <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x54>
    ea44:	2180      	movs	r1, #128	; 0x80
    ea46:	2040      	movs	r0, #64	; 0x40
    ea48:	f7f2 fcd8 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ea4c:	68e1      	ldr	r1, [r4, #12]
    ea4e:	f021 0102 	bic.w	r1, r1, #2
    ea52:	60e1      	str	r1, [r4, #12]
    ea54:	7485      	strb	r5, [r0, #18]
    ea56:	bd70      	pop	{r4, r5, r6, pc}
    ea58:	2200      	movs	r2, #0
    ea5a:	704a      	strb	r2, [r1, #1]
    ea5c:	2219      	movs	r2, #25
    ea5e:	700a      	strb	r2, [r1, #0]
    ea60:	f8d0 000a 	ldr.w	r0, [r0, #10]
    ea64:	6048      	str	r0, [r1, #4]
    ea66:	4770      	bx	lr
    ea68:	b510      	push	{r4, lr}
    ea6a:	4604      	mov	r4, r0
    ea6c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    ea70:	e9d4 1000 	ldrd	r1, r0, [r4]
    ea74:	4050      	eors	r0, r2
    ea76:	ea70 0101 	orns	r1, r0, r1
    ea7a:	d008      	beq.n	ea8e <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x96>
    ea7c:	f7fc fc14 	bl	b2a8 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    ea80:	e9d4 2300 	ldrd	r2, r3, [r4]
    ea84:	1a80      	subs	r0, r0, r2
    ea86:	4199      	sbcs	r1, r3
    ea88:	d301      	bcc.n	ea8e <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x96>
    ea8a:	2001      	movs	r0, #1
    ea8c:	bd10      	pop	{r4, pc}
    ea8e:	2000      	movs	r0, #0
    ea90:	bd10      	pop	{r4, pc}
    ea92:	2801      	cmp	r0, #1
    ea94:	d102      	bne.n	ea9c <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xa4>
    ea96:	7948      	ldrb	r0, [r1, #5]
    ea98:	0980      	lsrs	r0, r0, #6
    ea9a:	d001      	beq.n	eaa0 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xa8>
    ea9c:	2000      	movs	r0, #0
    ea9e:	4770      	bx	lr
    eaa0:	2001      	movs	r0, #1
    eaa2:	4770      	bx	lr
    eaa4:	2801      	cmp	r0, #1
    eaa6:	d106      	bne.n	eab6 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xbe>
    eaa8:	7948      	ldrb	r0, [r1, #5]
    eaaa:	2101      	movs	r1, #1
    eaac:	ebb1 1f90 	cmp.w	r1, r0, lsr #6
    eab0:	d101      	bne.n	eab6 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xbe>
    eab2:	2001      	movs	r0, #1
    eab4:	4770      	bx	lr
    eab6:	2000      	movs	r0, #0
    eab8:	4770      	bx	lr
    eaba:	2802      	cmp	r0, #2
    eabc:	d003      	beq.n	eac6 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xce>
    eabe:	2803      	cmp	r0, #3
    eac0:	d001      	beq.n	eac6 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xce>
    eac2:	2000      	movs	r0, #0
    eac4:	4770      	bx	lr
    eac6:	2001      	movs	r0, #1
    eac8:	4770      	bx	lr

0000eaca <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>:
    eaca:	b510      	push	{r4, lr}
    eacc:	4604      	mov	r4, r0
    eace:	7c00      	ldrb	r0, [r0, #16]
    ead0:	f7ff fff3 	bl	eaba <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xc2>
    ead4:	b148      	cbz	r0, eaea <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x20>
    ead6:	f894 0057 	ldrb.w	r0, [r4, #87]	; 0x57
    eada:	f104 0158 	add.w	r1, r4, #88	; 0x58
    eade:	f7ff f927 	bl	dd30 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    eae2:	2808      	cmp	r0, #8
    eae4:	d001      	beq.n	eaea <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x20>
    eae6:	2001      	movs	r0, #1
    eae8:	bd10      	pop	{r4, pc}
    eaea:	7c20      	ldrb	r0, [r4, #16]
    eaec:	b118      	cbz	r0, eaf6 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x2c>
    eaee:	2802      	cmp	r0, #2
    eaf0:	d001      	beq.n	eaf6 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x2c>
    eaf2:	7de0      	ldrb	r0, [r4, #23]
    eaf4:	bd10      	pop	{r4, pc}
    eaf6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    eafa:	2000      	movs	r0, #0
    eafc:	f7f3 bb48 	b.w	2190 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>

0000eb00 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ>:
    eb00:	b508      	push	{r3, lr}
    eb02:	f890 1074 	ldrb.w	r1, [r0, #116]	; 0x74
    eb06:	f88d 1000 	strb.w	r1, [sp]
    eb0a:	9900      	ldr	r1, [sp, #0]
    eb0c:	9100      	str	r1, [sp, #0]
    eb0e:	f89d 1000 	ldrb.w	r1, [sp]
    eb12:	b941      	cbnz	r1, eb26 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ+0x26>
    eb14:	f890 10ae 	ldrb.w	r1, [r0, #174]	; 0xae
    eb18:	f88d 1000 	strb.w	r1, [sp]
    eb1c:	9900      	ldr	r1, [sp, #0]
    eb1e:	9100      	str	r1, [sp, #0]
    eb20:	f89d 1000 	ldrb.w	r1, [sp]
    eb24:	b109      	cbz	r1, eb2a <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ+0x2a>
    eb26:	2001      	movs	r0, #1
    eb28:	bd08      	pop	{r3, pc}
    eb2a:	f890 009e 	ldrb.w	r0, [r0, #158]	; 0x9e
    eb2e:	f88d 0000 	strb.w	r0, [sp]
    eb32:	9800      	ldr	r0, [sp, #0]
    eb34:	9000      	str	r0, [sp, #0]
    eb36:	f89d 0000 	ldrb.w	r0, [sp]
    eb3a:	2000      	movs	r0, #0
    eb3c:	bd08      	pop	{r3, pc}

0000eb3e <sym_2ORNMU44KG57RJ5GYPW4FCTEFWDXBHWXYAE3J6I>:
    eb3e:	20ff      	movs	r0, #255	; 0xff
    eb40:	7008      	strb	r0, [r1, #0]
    eb42:	6b48      	ldr	r0, [r1, #52]	; 0x34
    eb44:	f7fe bff9 	b.w	db3a <sym_SCCFLYV5KOPRJ5S7RGDC2KDSCCHMKXYC3EQIE6A>

0000eb48 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>:
    eb48:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    eb4a:	460d      	mov	r5, r1
    eb4c:	4604      	mov	r4, r0
    eb4e:	f44f 728c 	mov.w	r2, #280	; 0x118
    eb52:	2100      	movs	r1, #0
    eb54:	f002 f9f0 	bl	10f38 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    eb58:	20ff      	movs	r0, #255	; 0xff
    eb5a:	7020      	strb	r0, [r4, #0]
    eb5c:	207f      	movs	r0, #127	; 0x7f
    eb5e:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    eb62:	2013      	movs	r0, #19
    eb64:	8060      	strh	r0, [r4, #2]
    eb66:	f242 7010 	movw	r0, #10000	; 0x2710
    eb6a:	8460      	strh	r0, [r4, #34]	; 0x22
    eb6c:	f7f3 f900 	bl	1d70 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ>
    eb70:	4601      	mov	r1, r0
    eb72:	6360      	str	r0, [r4, #52]	; 0x34
    eb74:	2200      	movs	r2, #0
    eb76:	4668      	mov	r0, sp
    eb78:	f7fe ff45 	bl	da06 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    eb7c:	2200      	movs	r2, #0
    eb7e:	2101      	movs	r1, #1
    eb80:	6b60      	ldr	r0, [r4, #52]	; 0x34
    eb82:	f7fe ffba 	bl	dafa <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    eb86:	2204      	movs	r2, #4
    eb88:	4668      	mov	r0, sp
    eb8a:	6b61      	ldr	r1, [r4, #52]	; 0x34
    eb8c:	f7fe ff3b 	bl	da06 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    eb90:	2200      	movs	r2, #0
    eb92:	4611      	mov	r1, r2
    eb94:	6b60      	ldr	r0, [r4, #52]	; 0x34
    eb96:	f7fe ffb0 	bl	dafa <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    eb9a:	73a5      	strb	r5, [r4, #14]
    eb9c:	f104 0028 	add.w	r0, r4, #40	; 0x28
    eba0:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    eba4:	f000 b96b 	b.w	ee7e <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>

0000eba8 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>:
    eba8:	7880      	ldrb	r0, [r0, #2]
    ebaa:	f3c0 0080 	ubfx	r0, r0, #2, #1
    ebae:	b108      	cbz	r0, ebb4 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY+0xc>
    ebb0:	2000      	movs	r0, #0
    ebb2:	4770      	bx	lr
    ebb4:	201f      	movs	r0, #31
    ebb6:	4770      	bx	lr

0000ebb8 <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>:
    ebb8:	f7f5 bce6 	b.w	4588 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x414>

0000ebbc <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>:
    ebbc:	6880      	ldr	r0, [r0, #8]
    ebbe:	4770      	bx	lr

0000ebc0 <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>:
    ebc0:	2001      	movs	r0, #1
    ebc2:	4770      	bx	lr

0000ebc4 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>:
    ebc4:	b510      	push	{r4, lr}
    ebc6:	4604      	mov	r4, r0
    ebc8:	3028      	adds	r0, #40	; 0x28
    ebca:	f000 f918 	bl	edfe <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    ebce:	8861      	ldrh	r1, [r4, #2]
    ebd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ebd4:	2228      	movs	r2, #40	; 0x28
    ebd6:	f7f5 bea7 	b.w	4928 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>

0000ebda <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>:
    ebda:	2200      	movs	r2, #0
    ebdc:	8602      	strh	r2, [r0, #48]	; 0x30
    ebde:	8843      	ldrh	r3, [r0, #2]
    ebe0:	2b1d      	cmp	r3, #29
    ebe2:	d001      	beq.n	ebe8 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y+0xe>
    ebe4:	7341      	strb	r1, [r0, #13]
    ebe6:	4770      	bx	lr
    ebe8:	7342      	strb	r2, [r0, #13]
    ebea:	4770      	bx	lr

0000ebec <sym_WE45Z7LOSJEAVMD3HUIMZMMRDD5BLMKOFVBGE4Y>:
    ebec:	b510      	push	{r4, lr}
    ebee:	2400      	movs	r4, #0
    ebf0:	6b40      	ldr	r0, [r0, #52]	; 0x34
    ebf2:	f7fe ff7a 	bl	daea <sym_IBQ2J6PQMWEGB2QFNQVSDUN2ZUMMRTUFKUUZT2I>
    ebf6:	4384      	bics	r4, r0
    ebf8:	f084 0001 	eor.w	r0, r4, #1
    ebfc:	bd10      	pop	{r4, pc}

0000ebfe <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>:
    ebfe:	2000      	movs	r0, #0
    ec00:	4770      	bx	lr

0000ec02 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>:
    ec02:	7880      	ldrb	r0, [r0, #2]
    ec04:	f000 0001 	and.w	r0, r0, #1
    ec08:	4770      	bx	lr

0000ec0a <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>:
    ec0a:	7880      	ldrb	r0, [r0, #2]
    ec0c:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    ec10:	4770      	bx	lr

0000ec12 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>:
    ec12:	2001      	movs	r0, #1
    ec14:	4770      	bx	lr

0000ec16 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>:
    ec16:	7880      	ldrb	r0, [r0, #2]
    ec18:	f3c0 0040 	ubfx	r0, r0, #1, #1
    ec1c:	4770      	bx	lr

0000ec1e <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>:
    ec1e:	f990 000e 	ldrsb.w	r0, [r0, #14]
    ec22:	4770      	bx	lr

0000ec24 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>:
    ec24:	7800      	ldrb	r0, [r0, #0]
    ec26:	28ff      	cmp	r0, #255	; 0xff
    ec28:	d001      	beq.n	ec2e <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ+0xa>
    ec2a:	2001      	movs	r0, #1
    ec2c:	4770      	bx	lr
    ec2e:	2000      	movs	r0, #0
    ec30:	4770      	bx	lr

0000ec32 <sym_MQQDWQQHBS7ZPZWBMOTGVNNHVXRAEPOMLYRTE3A>:
    ec32:	f800 1f20 	strb.w	r1, [r0, #32]!
    ec36:	7042      	strb	r2, [r0, #1]
    ec38:	4770      	bx	lr

0000ec3a <sym_UDZCFPCYSG5E2MUJ3CH3H5GF4YJLF3Y6KNH3ZRQ>:
    ec3a:	680a      	ldr	r2, [r1, #0]
    ec3c:	f840 2f11 	str.w	r2, [r0, #17]!
    ec40:	8889      	ldrh	r1, [r1, #4]
    ec42:	8081      	strh	r1, [r0, #4]
    ec44:	2101      	movs	r1, #1
    ec46:	7181      	strb	r1, [r0, #6]
    ec48:	4770      	bx	lr

0000ec4a <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>:
    ec4a:	7b00      	ldrb	r0, [r0, #12]
    ec4c:	4770      	bx	lr

0000ec4e <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>:
    ec4e:	2001      	movs	r0, #1
    ec50:	4770      	bx	lr

0000ec52 <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>:
    ec52:	61c1      	str	r1, [r0, #28]
    ec54:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
    ec58:	724a      	strb	r2, [r1, #9]
    ec5a:	f8d0 2051 	ldr.w	r2, [r0, #81]	; 0x51
    ec5e:	f8c1 200a 	str.w	r2, [r1, #10]
    ec62:	f8b0 0055 	ldrh.w	r0, [r0, #85]	; 0x55
    ec66:	81c8      	strh	r0, [r1, #14]
    ec68:	4770      	bx	lr

0000ec6a <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>:
    ec6a:	f880 1068 	strb.w	r1, [r0, #104]	; 0x68
    ec6e:	4770      	bx	lr

0000ec70 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>:
    ec70:	7bc0      	ldrb	r0, [r0, #15]
    ec72:	2800      	cmp	r0, #0
    ec74:	d000      	beq.n	ec78 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x8>
    ec76:	2001      	movs	r0, #1
    ec78:	4770      	bx	lr
    ec7a:	7802      	ldrb	r2, [r0, #0]
    ec7c:	2320      	movs	r3, #32
    ec7e:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    ec82:	ea03 1141 	and.w	r1, r3, r1, lsl #5
    ec86:	430a      	orrs	r2, r1
    ec88:	7002      	strb	r2, [r0, #0]
    ec8a:	4770      	bx	lr
    ec8c:	b510      	push	{r4, lr}
    ec8e:	f7ff f84f 	bl	dd30 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    ec92:	4604      	mov	r4, r0
    ec94:	f7f4 f838 	bl	2d08 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>
    ec98:	b138      	cbz	r0, ecaa <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3a>
    ec9a:	4620      	mov	r0, r4
    ec9c:	f7f3 ffdc 	bl	2c58 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    eca0:	b118      	cbz	r0, ecaa <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3a>
    eca2:	2110      	movs	r1, #16
    eca4:	f7ff fa0a 	bl	e0bc <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    eca8:	b108      	cbz	r0, ecae <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3e>
    ecaa:	2000      	movs	r0, #0
    ecac:	bd10      	pop	{r4, pc}
    ecae:	2001      	movs	r0, #1
    ecb0:	bd10      	pop	{r4, pc}
    ecb2:	2101      	movs	r1, #1
    ecb4:	f7f5 b8d8 	b.w	3e68 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x30>
    ecb8:	2101      	movs	r1, #1
    ecba:	f7f5 b8d5 	b.w	3e68 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x30>
    ecbe:	2200      	movs	r2, #0
    ecc0:	704a      	strb	r2, [r1, #1]
    ecc2:	2205      	movs	r2, #5
    ecc4:	700a      	strb	r2, [r1, #0]
    ecc6:	f8d0 000a 	ldr.w	r0, [r0, #10]
    ecca:	6048      	str	r0, [r1, #4]
    eccc:	4770      	bx	lr
    ecce:	b510      	push	{r4, lr}
    ecd0:	460c      	mov	r4, r1
    ecd2:	2100      	movs	r1, #0
    ecd4:	7061      	strb	r1, [r4, #1]
    ecd6:	2112      	movs	r1, #18
    ecd8:	7021      	strb	r1, [r4, #0]
    ecda:	f100 0109 	add.w	r1, r0, #9
    ecde:	2221      	movs	r2, #33	; 0x21
    ece0:	1d20      	adds	r0, r4, #4
    ece2:	f002 f8af 	bl	10e44 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    ece6:	2001      	movs	r0, #1
    ece8:	71e0      	strb	r0, [r4, #7]
    ecea:	7920      	ldrb	r0, [r4, #4]
    ecec:	2800      	cmp	r0, #0
    ecee:	d015      	beq.n	ed1c <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xac>
    ecf0:	f8b4 4005 	ldrh.w	r4, [r4, #5]
    ecf4:	2100      	movs	r1, #0
    ecf6:	4620      	mov	r0, r4
    ecf8:	f7fe fdd3 	bl	d8a2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    ecfc:	2800      	cmp	r0, #0
    ecfe:	d00d      	beq.n	ed1c <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xac>
    ed00:	8800      	ldrh	r0, [r0, #0]
    ed02:	f7fe ff79 	bl	dbf8 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    ed06:	2100      	movs	r1, #0
    ed08:	4620      	mov	r0, r4
    ed0a:	f7f2 fdfd 	bl	1908 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    ed0e:	2800      	cmp	r0, #0
    ed10:	d004      	beq.n	ed1c <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xac>
    ed12:	f44f 7114 	mov.w	r1, #592	; 0x250
    ed16:	202d      	movs	r0, #45	; 0x2d
    ed18:	f7f2 fb70 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ed1c:	bd10      	pop	{r4, pc}
    ed1e:	2200      	movs	r2, #0
    ed20:	704a      	strb	r2, [r1, #1]
    ed22:	221a      	movs	r2, #26
    ed24:	700a      	strb	r2, [r1, #0]
    ed26:	f850 2f09 	ldr.w	r2, [r0, #9]!
    ed2a:	604a      	str	r2, [r1, #4]
    ed2c:	6842      	ldr	r2, [r0, #4]
    ed2e:	608a      	str	r2, [r1, #8]
    ed30:	7a00      	ldrb	r0, [r0, #8]
    ed32:	7308      	strb	r0, [r1, #12]
    ed34:	4770      	bx	lr
    ed36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ed3a:	4604      	mov	r4, r0
    ed3c:	460f      	mov	r7, r1
    ed3e:	7e40      	ldrb	r0, [r0, #25]
    ed40:	f7f3 ff70 	bl	2c24 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
    ed44:	4606      	mov	r6, r0
    ed46:	7e20      	ldrb	r0, [r4, #24]
    ed48:	f104 0551 	add.w	r5, r4, #81	; 0x51
    ed4c:	b120      	cbz	r0, ed58 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xe8>
    ed4e:	b11e      	cbz	r6, ed58 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xe8>
    ed50:	7e60      	ldrb	r0, [r4, #25]
    ed52:	f7f3 ff5b 	bl	2c0c <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>
    ed56:	b1a0      	cbz	r0, ed82 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x112>
    ed58:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    ed5c:	2800      	cmp	r0, #0
    ed5e:	d024      	beq.n	edaa <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x13a>
    ed60:	7ea0      	ldrb	r0, [r4, #26]
    ed62:	2800      	cmp	r0, #0
    ed64:	d021      	beq.n	edaa <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x13a>
    ed66:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
    ed6a:	4629      	mov	r1, r5
    ed6c:	f7ff fe9a 	bl	eaa4 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xac>
    ed70:	b1a8      	cbz	r0, ed9e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x12e>
    ed72:	f7f3 ff47 	bl	2c04 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>
    ed76:	463a      	mov	r2, r7
    ed78:	4629      	mov	r1, r5
    ed7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    ed7e:	f7fe bf6f 	b.w	dc60 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    ed82:	2001      	movs	r0, #1
    ed84:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
    ed88:	463a      	mov	r2, r7
    ed8a:	4629      	mov	r1, r5
    ed8c:	4630      	mov	r0, r6
    ed8e:	f7fe ff67 	bl	dc60 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    ed92:	7e61      	ldrb	r1, [r4, #25]
    ed94:	4628      	mov	r0, r5
    ed96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    ed9a:	f7f3 bf4f 	b.w	2c3c <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>
    ed9e:	4639      	mov	r1, r7
    eda0:	4628      	mov	r0, r5
    eda2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    eda6:	f7fe bf4a 	b.w	dc3e <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>
    edaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    edae:	b510      	push	{r4, lr}
    edb0:	4604      	mov	r4, r0
    edb2:	4608      	mov	r0, r1
    edb4:	f7f9 fba0 	bl	84f8 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    edb8:	7921      	ldrb	r1, [r4, #4]
    edba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    edbe:	2025      	movs	r0, #37	; 0x25
    edc0:	f7f9 bb70 	b.w	84a4 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>
    edc4:	b570      	push	{r4, r5, r6, lr}
    edc6:	4614      	mov	r4, r2
    edc8:	461d      	mov	r5, r3
    edca:	4606      	mov	r6, r0
    edcc:	f7fc fa6c 	bl	b2a8 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    edd0:	1900      	adds	r0, r0, r4
    edd2:	4169      	adcs	r1, r5
    edd4:	e9c6 0100 	strd	r0, r1, [r6]
    edd8:	bd70      	pop	{r4, r5, r6, pc}

0000edda <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>:
    edda:	b570      	push	{r4, r5, r6, lr}
    eddc:	7001      	strb	r1, [r0, #0]
    edde:	7042      	strb	r2, [r0, #1]
    ede0:	4614      	mov	r4, r2
    ede2:	460d      	mov	r5, r1
    ede4:	7880      	ldrb	r0, [r0, #2]
    ede6:	f000 f87f 	bl	eee8 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    edea:	fb10 f005 	smulbb	r0, r0, r5
    edee:	4360      	muls	r0, r4
    edf0:	28ff      	cmp	r0, #255	; 0xff
    edf2:	d303      	bcc.n	edfc <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y+0x22>
    edf4:	215c      	movs	r1, #92	; 0x5c
    edf6:	202e      	movs	r0, #46	; 0x2e
    edf8:	f7f2 fb00 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    edfc:	bd70      	pop	{r4, r5, r6, pc}

0000edfe <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>:
    edfe:	b510      	push	{r4, lr}
    ee00:	4604      	mov	r4, r0
    ee02:	7880      	ldrb	r0, [r0, #2]
    ee04:	f000 f870 	bl	eee8 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    ee08:	7861      	ldrb	r1, [r4, #1]
    ee0a:	7822      	ldrb	r2, [r4, #0]
    ee0c:	fb11 f102 	smulbb	r1, r1, r2
    ee10:	4348      	muls	r0, r1
    ee12:	b2c0      	uxtb	r0, r0
    ee14:	bd10      	pop	{r4, pc}

0000ee16 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>:
    ee16:	b510      	push	{r4, lr}
    ee18:	4604      	mov	r4, r0
    ee1a:	f000 f84d 	bl	eeb8 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x2c>
    ee1e:	7961      	ldrb	r1, [r4, #5]
    ee20:	1c49      	adds	r1, r1, #1
    ee22:	b2c9      	uxtb	r1, r1
    ee24:	7161      	strb	r1, [r4, #5]
    ee26:	7862      	ldrb	r2, [r4, #1]
    ee28:	4291      	cmp	r1, r2
    ee2a:	d10b      	bne.n	ee44 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x2e>
    ee2c:	2200      	movs	r2, #0
    ee2e:	7162      	strb	r2, [r4, #5]
    ee30:	78e1      	ldrb	r1, [r4, #3]
    ee32:	4301      	orrs	r1, r0
    ee34:	70e1      	strb	r1, [r4, #3]
    ee36:	78a3      	ldrb	r3, [r4, #2]
    ee38:	4299      	cmp	r1, r3
    ee3a:	d103      	bne.n	ee44 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x2e>
    ee3c:	70e2      	strb	r2, [r4, #3]
    ee3e:	7921      	ldrb	r1, [r4, #4]
    ee40:	1c49      	adds	r1, r1, #1
    ee42:	7121      	strb	r1, [r4, #4]
    ee44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ee48:	f000 b825 	b.w	ee96 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0xa>

0000ee4c <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>:
    ee4c:	7081      	strb	r1, [r0, #2]
    ee4e:	4770      	bx	lr

0000ee50 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>:
    ee50:	b570      	push	{r4, r5, r6, lr}
    ee52:	4604      	mov	r4, r0
    ee54:	7880      	ldrb	r0, [r0, #2]
    ee56:	f000 f847 	bl	eee8 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    ee5a:	7861      	ldrb	r1, [r4, #1]
    ee5c:	fb11 f500 	smulbb	r5, r1, r0
    ee60:	78e0      	ldrb	r0, [r4, #3]
    ee62:	f000 f841 	bl	eee8 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    ee66:	7861      	ldrb	r1, [r4, #1]
    ee68:	7962      	ldrb	r2, [r4, #5]
    ee6a:	fb10 2001 	smlabb	r0, r0, r1, r2
    ee6e:	7821      	ldrb	r1, [r4, #0]
    ee70:	7922      	ldrb	r2, [r4, #4]
    ee72:	1a89      	subs	r1, r1, r2
    ee74:	fb11 f105 	smulbb	r1, r1, r5
    ee78:	1a08      	subs	r0, r1, r0
    ee7a:	b2c0      	uxtb	r0, r0
    ee7c:	bd70      	pop	{r4, r5, r6, pc}

0000ee7e <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>:
    ee7e:	2100      	movs	r1, #0
    ee80:	6001      	str	r1, [r0, #0]
    ee82:	8081      	strh	r1, [r0, #4]
    ee84:	2101      	movs	r1, #1
    ee86:	7041      	strb	r1, [r0, #1]
    ee88:	7001      	strb	r1, [r0, #0]
    ee8a:	4770      	bx	lr

0000ee8c <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>:
    ee8c:	2100      	movs	r1, #0
    ee8e:	70c1      	strb	r1, [r0, #3]
    ee90:	7141      	strb	r1, [r0, #5]
    ee92:	7101      	strb	r1, [r0, #4]
    ee94:	4770      	bx	lr
    ee96:	b510      	push	{r4, lr}
    ee98:	2801      	cmp	r0, #1
    ee9a:	d007      	beq.n	eeac <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x20>
    ee9c:	2802      	cmp	r0, #2
    ee9e:	d007      	beq.n	eeb0 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x24>
    eea0:	2804      	cmp	r0, #4
    eea2:	d007      	beq.n	eeb4 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x28>
    eea4:	2139      	movs	r1, #57	; 0x39
    eea6:	202e      	movs	r0, #46	; 0x2e
    eea8:	f7f2 faa8 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    eeac:	2025      	movs	r0, #37	; 0x25
    eeae:	bd10      	pop	{r4, pc}
    eeb0:	2026      	movs	r0, #38	; 0x26
    eeb2:	bd10      	pop	{r4, pc}
    eeb4:	2027      	movs	r0, #39	; 0x27
    eeb6:	bd10      	pop	{r4, pc}
    eeb8:	4601      	mov	r1, r0
    eeba:	2000      	movs	r0, #0
    eebc:	788a      	ldrb	r2, [r1, #2]
    eebe:	07d3      	lsls	r3, r2, #31
    eec0:	d002      	beq.n	eec8 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x3c>
    eec2:	78cb      	ldrb	r3, [r1, #3]
    eec4:	07db      	lsls	r3, r3, #31
    eec6:	d006      	beq.n	eed6 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4a>
    eec8:	0793      	lsls	r3, r2, #30
    eeca:	d506      	bpl.n	eeda <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4e>
    eecc:	78cb      	ldrb	r3, [r1, #3]
    eece:	079b      	lsls	r3, r3, #30
    eed0:	d403      	bmi.n	eeda <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4e>
    eed2:	2002      	movs	r0, #2
    eed4:	4770      	bx	lr
    eed6:	2001      	movs	r0, #1
    eed8:	4770      	bx	lr
    eeda:	0752      	lsls	r2, r2, #29
    eedc:	d5fc      	bpl.n	eed8 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4c>
    eede:	78c9      	ldrb	r1, [r1, #3]
    eee0:	0749      	lsls	r1, r1, #29
    eee2:	d4f9      	bmi.n	eed8 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4c>
    eee4:	2004      	movs	r0, #4
    eee6:	4770      	bx	lr
    eee8:	f3c0 0180 	ubfx	r1, r0, #2, #1
    eeec:	f3c0 0240 	ubfx	r2, r0, #1, #1
    eef0:	4411      	add	r1, r2
    eef2:	f000 0001 	and.w	r0, r0, #1
    eef6:	4408      	add	r0, r1
    eef8:	4770      	bx	lr

0000eefa <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>:
    eefa:	f240 315a 	movw	r1, #858	; 0x35a
    eefe:	4348      	muls	r0, r1
    ef00:	4770      	bx	lr

0000ef02 <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>:
    ef02:	f240 20ef 	movw	r0, #751	; 0x2ef
    ef06:	4770      	bx	lr
    ef08:	041c020e 	.word	0x041c020e
    ef0c:	0c600630 	.word	0x0c600630
    ef10:	06b4035a 	.word	0x06b4035a
    ef14:	0bf505c5 	.word	0x0bf505c5
    ef18:	01a31225 	.word	0x01a31225
    ef1c:	05bf03b1 	.word	0x05bf03b1
    ef20:	064902ef 	.word	0x064902ef
    ef24:	09a3      	.short	0x09a3

0000ef26 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>:
    ef26:	b510      	push	{r4, lr}
    ef28:	f890 1110 	ldrb.w	r1, [r0, #272]	; 0x110
    ef2c:	b109      	cbz	r1, ef32 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0xc>
    ef2e:	2000      	movs	r0, #0
    ef30:	bd10      	pop	{r4, pc}
    ef32:	f890 10d0 	ldrb.w	r1, [r0, #208]	; 0xd0
    ef36:	b131      	cbz	r1, ef46 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x20>
    ef38:	e9d0 1235 	ldrd	r1, r2, [r0, #212]	; 0xd4
    ef3c:	428a      	cmp	r2, r1
    ef3e:	d902      	bls.n	ef46 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x20>
    ef40:	f7f4 ff7a 	bl	3e38 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    ef44:	e7f3      	b.n	ef2e <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x8>
    ef46:	2001      	movs	r0, #1
    ef48:	bd10      	pop	{r4, pc}

0000ef4a <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>:
    ef4a:	b510      	push	{r4, lr}
    ef4c:	b131      	cbz	r1, ef5c <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x12>
    ef4e:	2901      	cmp	r1, #1
    ef50:	d008      	beq.n	ef64 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x1a>
    ef52:	f240 717a 	movw	r1, #1914	; 0x77a
    ef56:	2030      	movs	r0, #48	; 0x30
    ef58:	f7f2 fa50 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ef5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ef60:	f000 b9b7 	b.w	f2d2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x308>
    ef64:	2100      	movs	r1, #0
    ef66:	f880 10d0 	strb.w	r1, [r0, #208]	; 0xd0
    ef6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ef6e:	f000 b913 	b.w	f198 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1ce>

0000ef72 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>:
    ef72:	b510      	push	{r4, lr}
    ef74:	4604      	mov	r4, r0
    ef76:	f890 00e0 	ldrb.w	r0, [r0, #224]	; 0xe0
    ef7a:	2800      	cmp	r0, #0
    ef7c:	d019      	beq.n	efb2 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x40>
    ef7e:	2001      	movs	r0, #1
    ef80:	f884 0110 	strb.w	r0, [r4, #272]	; 0x110
    ef84:	4601      	mov	r1, r0
    ef86:	4620      	mov	r0, r4
    ef88:	f7ff fe6f 	bl	ec6a <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    ef8c:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
    ef90:	b170      	cbz	r0, efb0 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x3e>
    ef92:	f814 0fc8 	ldrb.w	r0, [r4, #200]!
    ef96:	f7fb fcfb 	bl	a990 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    ef9a:	7820      	ldrb	r0, [r4, #0]
    ef9c:	f7fb fe5c 	bl	ac58 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    efa0:	f814 09c8 	ldrb.w	r0, [r4], #-200
    efa4:	f7fb fe36 	bl	ac14 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    efa8:	b120      	cbz	r0, efb4 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x42>
    efaa:	2000      	movs	r0, #0
    efac:	f884 00e0 	strb.w	r0, [r4, #224]	; 0xe0
    efb0:	2000      	movs	r0, #0
    efb2:	bd10      	pop	{r4, pc}
    efb4:	f240 2105 	movw	r1, #517	; 0x205
    efb8:	2030      	movs	r0, #48	; 0x30
    efba:	f7f2 fa1f 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000efbe <sym_MHDCHYAEWBCIUYGOTWRWGZEJ6XEBEBUHOO5T6WY>:
    efbe:	f8d0 00cc 	ldr.w	r0, [r0, #204]	; 0xcc
    efc2:	4770      	bx	lr

0000efc4 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>:
    efc4:	f890 00e0 	ldrb.w	r0, [r0, #224]	; 0xe0
    efc8:	4770      	bx	lr

0000efca <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y>:
    efca:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    efcc:	4604      	mov	r4, r0
    efce:	f890 022b 	ldrb.w	r0, [r0, #555]	; 0x22b
    efd2:	2800      	cmp	r0, #0
    efd4:	d15f      	bne.n	f096 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    efd6:	f894 025c 	ldrb.w	r0, [r4, #604]	; 0x25c
    efda:	2803      	cmp	r0, #3
    efdc:	d15b      	bne.n	f096 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    efde:	f7fc f963 	bl	b2a8 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    efe2:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
    efe6:	f8d4 2294 	ldr.w	r2, [r4, #660]	; 0x294
    efea:	1ac0      	subs	r0, r0, r3
    efec:	eb61 0102 	sbc.w	r1, r1, r2
    eff0:	2300      	movs	r3, #0
    eff2:	461a      	mov	r2, r3
    eff4:	1a1b      	subs	r3, r3, r0
    eff6:	418a      	sbcs	r2, r1
    eff8:	da4d      	bge.n	f096 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    effa:	1c42      	adds	r2, r0, #1
    effc:	f171 0100 	sbcs.w	r1, r1, #0
    f000:	db02      	blt.n	f008 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x3e>
    f002:	f44f 61b8 	mov.w	r1, #1472	; 0x5c0
    f006:	e036      	b.n	f076 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xac>
    f008:	6921      	ldr	r1, [r4, #16]
    f00a:	b111      	cbz	r1, f012 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x48>
    f00c:	fbb0 f0f1 	udiv	r0, r0, r1
    f010:	e000      	b.n	f014 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4a>
    f012:	2000      	movs	r0, #0
    f014:	f8b4 1094 	ldrh.w	r1, [r4, #148]	; 0x94
    f018:	1c40      	adds	r0, r0, #1
    f01a:	4408      	add	r0, r1
    f01c:	f8a4 026c 	strh.w	r0, [r4, #620]	; 0x26c
    f020:	f8b4 026c 	ldrh.w	r0, [r4, #620]	; 0x26c
    f024:	f8b4 1224 	ldrh.w	r1, [r4, #548]	; 0x224
    f028:	1a08      	subs	r0, r1, r0
    f02a:	b200      	sxth	r0, r0
    f02c:	2800      	cmp	r0, #0
    f02e:	dd32      	ble.n	f096 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    f030:	f894 02a4 	ldrb.w	r0, [r4, #676]	; 0x2a4
    f034:	f7fb fcac 	bl	a990 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    f038:	2800      	cmp	r0, #0
    f03a:	d02c      	beq.n	f096 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    f03c:	20ff      	movs	r0, #255	; 0xff
    f03e:	f884 0271 	strb.w	r0, [r4, #625]	; 0x271
    f042:	f8b4 00ce 	ldrh.w	r0, [r4, #206]	; 0xce
    f046:	f8b4 10cc 	ldrh.w	r1, [r4, #204]	; 0xcc
    f04a:	ae01      	add	r6, sp, #4
    f04c:	1a40      	subs	r0, r0, r1
    f04e:	f8b4 1094 	ldrh.w	r1, [r4, #148]	; 0x94
    f052:	1e40      	subs	r0, r0, #1
    f054:	4408      	add	r0, r1
    f056:	b285      	uxth	r5, r0
    f058:	e017      	b.n	f08a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xc0>
    f05a:	9600      	str	r6, [sp, #0]
    f05c:	f8b4 126c 	ldrh.w	r1, [r4, #620]	; 0x26c
    f060:	2300      	movs	r3, #0
    f062:	2201      	movs	r2, #1
    f064:	4620      	mov	r0, r4
    f066:	f7f5 fef3 	bl	4e50 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1f8>
    f06a:	2800      	cmp	r0, #0
    f06c:	d013      	beq.n	f096 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    f06e:	2801      	cmp	r0, #1
    f070:	d004      	beq.n	f07c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xb2>
    f072:	f240 51f9 	movw	r1, #1529	; 0x5f9
    f076:	2030      	movs	r0, #48	; 0x30
    f078:	f7f2 f9c0 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f07c:	f8b4 026c 	ldrh.w	r0, [r4, #620]	; 0x26c
    f080:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    f084:	4408      	add	r0, r1
    f086:	f8a4 026c 	strh.w	r0, [r4, #620]	; 0x26c
    f08a:	f8b4 026c 	ldrh.w	r0, [r4, #620]	; 0x26c
    f08e:	1a28      	subs	r0, r5, r0
    f090:	b200      	sxth	r0, r0
    f092:	2800      	cmp	r0, #0
    f094:	dae1      	bge.n	f05a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x90>
    f096:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    f098:	2000      	movs	r0, #0
    f09a:	4770      	bx	lr
    f09c:	b570      	push	{r4, r5, r6, lr}
    f09e:	4604      	mov	r4, r0
    f0a0:	f000 f8f0 	bl	f284 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2ba>
    f0a4:	f8a4 00f0 	strh.w	r0, [r4, #240]	; 0xf0
    f0a8:	2000      	movs	r0, #0
    f0aa:	f884 00e8 	strb.w	r0, [r4, #232]	; 0xe8
    f0ae:	4601      	mov	r1, r0
    f0b0:	2501      	movs	r5, #1
    f0b2:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
    f0b6:	f884 50f3 	strb.w	r5, [r4, #243]	; 0xf3
    f0ba:	4606      	mov	r6, r0
    f0bc:	f7fe ff60 	bl	df80 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    f0c0:	f8b4 0100 	ldrh.w	r0, [r4, #256]	; 0x100
    f0c4:	1c40      	adds	r0, r0, #1
    f0c6:	280a      	cmp	r0, #10
    f0c8:	d201      	bcs.n	f0ce <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x104>
    f0ca:	f8a4 0100 	strh.w	r0, [r4, #256]	; 0x100
    f0ce:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
    f0d2:	b138      	cbz	r0, f0e4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x11a>
    f0d4:	f8b4 0100 	ldrh.w	r0, [r4, #256]	; 0x100
    f0d8:	1c40      	adds	r0, r0, #1
    f0da:	280a      	cmp	r0, #10
    f0dc:	d302      	bcc.n	f0e4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x11a>
    f0de:	f884 50f2 	strb.w	r5, [r4, #242]	; 0xf2
    f0e2:	e002      	b.n	f0ea <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x120>
    f0e4:	2002      	movs	r0, #2
    f0e6:	f884 00f2 	strb.w	r0, [r4, #242]	; 0xf2
    f0ea:	4620      	mov	r0, r4
    f0ec:	f000 f822 	bl	f134 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x16a>
    f0f0:	b120      	cbz	r0, f0fc <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x132>
    f0f2:	4620      	mov	r0, r4
    f0f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f0f8:	f000 b80d 	b.w	f116 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x14c>
    f0fc:	f894 00c8 	ldrb.w	r0, [r4, #200]	; 0xc8
    f100:	4631      	mov	r1, r6
    f102:	f000 f8bd 	bl	f280 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2b6>
    f106:	2800      	cmp	r0, #0
    f108:	d104      	bne.n	f114 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x14a>
    f10a:	f240 618e 	movw	r1, #1678	; 0x68e
    f10e:	2030      	movs	r0, #48	; 0x30
    f110:	f7f2 f974 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f114:	bd70      	pop	{r4, r5, r6, pc}
    f116:	b510      	push	{r4, lr}
    f118:	4604      	mov	r4, r0
    f11a:	f814 0fc8 	ldrb.w	r0, [r4, #200]!
    f11e:	f7fb fd79 	bl	ac14 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    f122:	2000      	movs	r0, #0
    f124:	7620      	strb	r0, [r4, #24]
    f126:	bd10      	pop	{r4, pc}
    f128:	b510      	push	{r4, lr}
    f12a:	f7ff fd4b 	bl	ebc4 <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>
    f12e:	f500 7088 	add.w	r0, r0, #272	; 0x110
    f132:	bd10      	pop	{r4, pc}
    f134:	b570      	push	{r4, r5, r6, lr}
    f136:	4605      	mov	r5, r0
    f138:	f890 0110 	ldrb.w	r0, [r0, #272]	; 0x110
    f13c:	b108      	cbz	r0, f142 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x178>
    f13e:	2001      	movs	r0, #1
    f140:	bd70      	pop	{r4, r5, r6, pc}
    f142:	e9d5 1042 	ldrd	r1, r0, [r5, #264]	; 0x108
    f146:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    f14a:	4050      	eors	r0, r2
    f14c:	ea70 0101 	orns	r1, r0, r1
    f150:	d012      	beq.n	f178 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1ae>
    f152:	2400      	movs	r4, #0
    f154:	4621      	mov	r1, r4
    f156:	4628      	mov	r0, r5
    f158:	f7ff ffe6 	bl	f128 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x15e>
    f15c:	e9f5 123e 	ldrd	r1, r2, [r5, #248]!	; 0xf8
    f160:	1840      	adds	r0, r0, r1
    f162:	4154      	adcs	r4, r2
    f164:	e9d5 2104 	ldrd	r2, r1, [r5, #16]
    f168:	3df8      	subs	r5, #248	; 0xf8
    f16a:	1a10      	subs	r0, r2, r0
    f16c:	41a1      	sbcs	r1, r4
    f16e:	d503      	bpl.n	f178 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1ae>
    f170:	4628      	mov	r0, r5
    f172:	f7f4 fe61 	bl	3e38 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    f176:	e7e2      	b.n	f13e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x174>
    f178:	2000      	movs	r0, #0
    f17a:	bd70      	pop	{r4, r5, r6, pc}
    f17c:	b510      	push	{r4, lr}
    f17e:	4604      	mov	r4, r0
    f180:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    f184:	f000 f9ef 	bl	f566 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x59c>
    f188:	4602      	mov	r2, r0
    f18a:	4620      	mov	r0, r4
    f18c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f190:	f240 111b 	movw	r1, #283	; 0x11b
    f194:	f7ff ba5c 	b.w	e650 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>
    f198:	b510      	push	{r4, lr}
    f19a:	f7f8 ffdf 	bl	815c <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    f19e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f1a2:	f7fb be99 	b.w	aed8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    f1a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f1aa:	4604      	mov	r4, r0
    f1ac:	f890 0272 	ldrb.w	r0, [r0, #626]	; 0x272
    f1b0:	2800      	cmp	r0, #0
    f1b2:	d051      	beq.n	f258 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x28e>
    f1b4:	f894 025c 	ldrb.w	r0, [r4, #604]	; 0x25c
    f1b8:	2803      	cmp	r0, #3
    f1ba:	d14d      	bne.n	f258 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x28e>
    f1bc:	f894 906b 	ldrb.w	r9, [r4, #107]	; 0x6b
    f1c0:	f001 fbbc 	bl	1093c <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
    f1c4:	4605      	mov	r5, r0
    f1c6:	f894 021b 	ldrb.w	r0, [r4, #539]	; 0x21b
    f1ca:	f7f5 fd63 	bl	4c94 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3c>
    f1ce:	4428      	add	r0, r5
    f1d0:	b286      	uxth	r6, r0
    f1d2:	f894 021b 	ldrb.w	r0, [r4, #539]	; 0x21b
    f1d6:	f7f5 fd5d 	bl	4c94 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3c>
    f1da:	f500 60c8 	add.w	r0, r0, #1600	; 0x640
    f1de:	fa1f f880 	uxth.w	r8, r0
    f1e2:	4648      	mov	r0, r9
    f1e4:	f7f9 f878 	bl	82d8 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    f1e8:	f8d4 12ac 	ldr.w	r1, [r4, #684]	; 0x2ac
    f1ec:	1a0d      	subs	r5, r1, r0
    f1ee:	4648      	mov	r0, r9
    f1f0:	f7f9 f89e 	bl	8330 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    f1f4:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
    f1f8:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
    f1fc:	fbb0 f0fa 	udiv	r0, r0, sl
    f200:	1a2d      	subs	r5, r5, r0
    f202:	4648      	mov	r0, r9
    f204:	f7f9 f868 	bl	82d8 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    f208:	f8d4 1230 	ldr.w	r1, [r4, #560]	; 0x230
    f20c:	1a0f      	subs	r7, r1, r0
    f20e:	4648      	mov	r0, r9
    f210:	f7f9 f88e 	bl	8330 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    f214:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    f218:	4401      	add	r1, r0
    f21a:	fbb1 f0fa 	udiv	r0, r1, sl
    f21e:	1a39      	subs	r1, r7, r0
    f220:	f1a1 0060 	sub.w	r0, r1, #96	; 0x60
    f224:	4370      	muls	r0, r6
    f226:	fbb0 f2f8 	udiv	r2, r0, r8
    f22a:	2029      	movs	r0, #41	; 0x29
    f22c:	eb00 0051 	add.w	r0, r0, r1, lsr #1
    f230:	3260      	adds	r2, #96	; 0x60
    f232:	eba0 0152 	sub.w	r1, r0, r2, lsr #1
    f236:	eb00 0052 	add.w	r0, r0, r2, lsr #1
    f23a:	42a9      	cmp	r1, r5
    f23c:	d801      	bhi.n	f242 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x278>
    f23e:	4285      	cmp	r5, r0
    f240:	d901      	bls.n	f246 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x27c>
    f242:	f7fd f865 	bl	c310 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA>
    f246:	4631      	mov	r1, r6
    f248:	6920      	ldr	r0, [r4, #16]
    f24a:	f7fd f8c9 	bl	c3e0 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    f24e:	2100      	movs	r1, #0
    f250:	f8c4 0264 	str.w	r0, [r4, #612]	; 0x264
    f254:	f884 1272 	strb.w	r1, [r4, #626]	; 0x272
    f258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f25c:	b570      	push	{r4, r5, r6, lr}
    f25e:	460c      	mov	r4, r1
    f260:	4605      	mov	r5, r0
    f262:	f7f9 f865 	bl	8330 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    f266:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    f26a:	4408      	add	r0, r1
    f26c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    f270:	fbb0 f6f1 	udiv	r6, r0, r1
    f274:	4628      	mov	r0, r5
    f276:	f7f9 f82f 	bl	82d8 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    f27a:	4430      	add	r0, r6
    f27c:	4420      	add	r0, r4
    f27e:	bd70      	pop	{r4, r5, r6, pc}
    f280:	f7fb b868 	b.w	a354 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    f284:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    f286:	4604      	mov	r4, r0
    f288:	f7ff fcc3 	bl	ec12 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    f28c:	b1f8      	cbz	r0, f2ce <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x304>
    f28e:	4620      	mov	r0, r4
    f290:	f7ff fcb7 	bl	ec02 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    f294:	b918      	cbnz	r0, f29e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2d4>
    f296:	4620      	mov	r0, r4
    f298:	f7ff fcbd 	bl	ec16 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    f29c:	b140      	cbz	r0, f2b0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2e6>
    f29e:	2455      	movs	r4, #85	; 0x55
    f2a0:	4668      	mov	r0, sp
    f2a2:	f7fd faf5 	bl	c890 <mpsl_fem_pa_is_configured>
    f2a6:	f89d 0000 	ldrb.w	r0, [sp]
    f2aa:	b118      	cbz	r0, f2b4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2ea>
    f2ac:	2501      	movs	r5, #1
    f2ae:	e002      	b.n	f2b6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2ec>
    f2b0:	2450      	movs	r4, #80	; 0x50
    f2b2:	e7f5      	b.n	f2a0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2d6>
    f2b4:	2500      	movs	r5, #0
    f2b6:	a801      	add	r0, sp, #4
    f2b8:	f7fd fad2 	bl	c860 <mpsl_fem_lna_is_configured>
    f2bc:	f89d 0004 	ldrb.w	r0, [sp, #4]
    f2c0:	b100      	cbz	r0, f2c4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2fa>
    f2c2:	2001      	movs	r0, #1
    f2c4:	4305      	orrs	r5, r0
    f2c6:	d000      	beq.n	f2ca <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x300>
    f2c8:	340a      	adds	r4, #10
    f2ca:	4620      	mov	r0, r4
    f2cc:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    f2ce:	2061      	movs	r0, #97	; 0x61
    f2d0:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    f2d2:	b570      	push	{r4, r5, r6, lr}
    f2d4:	4604      	mov	r4, r0
    f2d6:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    f2d8:	2500      	movs	r5, #0
    f2da:	b130      	cbz	r0, f2ea <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x320>
    f2dc:	f7f4 fa44 	bl	3768 <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ>
    f2e0:	8c61      	ldrh	r1, [r4, #34]	; 0x22
    f2e2:	fbb0 f2f1 	udiv	r2, r0, r1
    f2e6:	fb01 0512 	mls	r5, r1, r2, r0
    f2ea:	4620      	mov	r0, r4
    f2ec:	f7ff fc66 	bl	ebbc <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    f2f0:	e9d4 213e 	ldrd	r2, r1, [r4, #248]	; 0xf8
    f2f4:	4428      	add	r0, r5
    f2f6:	34e8      	adds	r4, #232	; 0xe8
    f2f8:	2500      	movs	r5, #0
    f2fa:	1882      	adds	r2, r0, r2
    f2fc:	eb45 0001 	adc.w	r0, r5, r1
    f300:	e9c4 2004 	strd	r2, r0, [r4, #16]
    f304:	f804 5b0b 	strb.w	r5, [r4], #11
    f308:	2001      	movs	r0, #1
    f30a:	f804 0901 	strb.w	r0, [r4], #-1
    f30e:	2002      	movs	r0, #2
    f310:	f804 09f2 	strb.w	r0, [r4], #-242
    f314:	4620      	mov	r0, r4
    f316:	f7ff ffb5 	bl	f284 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2ba>
    f31a:	f8a4 00f0 	strh.w	r0, [r4, #240]	; 0xf0
    f31e:	4620      	mov	r0, r4
    f320:	f7ff ff08 	bl	f134 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x16a>
    f324:	b930      	cbnz	r0, f334 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x36a>
    f326:	f894 00c8 	ldrb.w	r0, [r4, #200]	; 0xc8
    f32a:	f104 01e8 	add.w	r1, r4, #232	; 0xe8
    f32e:	f7ff ffa7 	bl	f280 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2b6>
    f332:	b128      	cbz	r0, f340 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x376>
    f334:	f8a4 5100 	strh.w	r5, [r4, #256]	; 0x100
    f338:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f33c:	f7ff bf2c 	b.w	f198 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1ce>
    f340:	f240 61d4 	movw	r1, #1748	; 0x6d4
    f344:	2030      	movs	r0, #48	; 0x30
    f346:	f7f2 f859 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f34a:	b510      	push	{r4, lr}
    f34c:	4604      	mov	r4, r0
    f34e:	2000      	movs	r0, #0
    f350:	f884 025c 	strb.w	r0, [r4, #604]	; 0x25c
    f354:	f894 02a4 	ldrb.w	r0, [r4, #676]	; 0x2a4
    f358:	f7fb fc5c 	bl	ac14 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    f35c:	2020      	movs	r0, #32
    f35e:	f884 02a4 	strb.w	r0, [r4, #676]	; 0x2a4
    f362:	bd10      	pop	{r4, pc}
    f364:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    f368:	4604      	mov	r4, r0
    f36a:	2500      	movs	r5, #0
    f36c:	f880 50d0 	strb.w	r5, [r0, #208]	; 0xd0
    f370:	e9d4 673e 	ldrd	r6, r7, [r4, #248]	; 0xf8
    f374:	4689      	mov	r9, r1
    f376:	f880 50e0 	strb.w	r5, [r0, #224]	; 0xe0
    f37a:	f04f 0801 	mov.w	r8, #1
    f37e:	f880 80e1 	strb.w	r8, [r0, #225]	; 0xe1
    f382:	f8d0 00cc 	ldr.w	r0, [r0, #204]	; 0xcc
    f386:	4641      	mov	r1, r8
    f388:	34c8      	adds	r4, #200	; 0xc8
    f38a:	f7f3 fdfd 	bl	2f88 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    f38e:	6860      	ldr	r0, [r4, #4]
    f390:	f8c0 6290 	str.w	r6, [r0, #656]	; 0x290
    f394:	f8c0 7294 	str.w	r7, [r0, #660]	; 0x294
    f398:	6861      	ldr	r1, [r4, #4]
    f39a:	7820      	ldrb	r0, [r4, #0]
    f39c:	f881 02a4 	strb.w	r0, [r1, #676]	; 0x2a4
    f3a0:	6861      	ldr	r1, [r4, #4]
    f3a2:	f8c1 92a8 	str.w	r9, [r1, #680]	; 0x2a8
    f3a6:	6860      	ldr	r0, [r4, #4]
    f3a8:	e9c0 67a6 	strd	r6, r7, [r0, #664]	; 0x298
    f3ac:	6864      	ldr	r4, [r4, #4]
    f3ae:	f884 525c 	strb.w	r5, [r4, #604]	; 0x25c
    f3b2:	2300      	movs	r3, #0
    f3b4:	f8a4 52a0 	strh.w	r5, [r4, #672]	; 0x2a0
    f3b8:	461a      	mov	r2, r3
    f3ba:	4619      	mov	r1, r3
    f3bc:	4620      	mov	r0, r4
    f3be:	9500      	str	r5, [sp, #0]
    f3c0:	f7f5 fd46 	bl	4e50 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1f8>
    f3c4:	b120      	cbz	r0, f3d0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x406>
    f3c6:	f240 2119 	movw	r1, #537	; 0x219
    f3ca:	2030      	movs	r0, #48	; 0x30
    f3cc:	f7f2 f816 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f3d0:	f8c4 5258 	str.w	r5, [r4, #600]	; 0x258
    f3d4:	f8c4 5250 	str.w	r5, [r4, #592]	; 0x250
    f3d8:	f884 825c 	strb.w	r8, [r4, #604]	; 0x25c
    f3dc:	f8a4 526e 	strh.w	r5, [r4, #622]	; 0x26e
    f3e0:	f8a4 526c 	strh.w	r5, [r4, #620]	; 0x26c
    f3e4:	3494      	adds	r4, #148	; 0x94
    f3e6:	f884 51dd 	strb.w	r5, [r4, #477]	; 0x1dd
    f3ea:	8820      	ldrh	r0, [r4, #0]
    f3ec:	1e40      	subs	r0, r0, #1
    f3ee:	8020      	strh	r0, [r4, #0]
    f3f0:	f8a4 520e 	strh.w	r5, [r4, #526]	; 0x20e
    f3f4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    f3f8:	f7ff bece 	b.w	f198 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1ce>
    f3fc:	b570      	push	{r4, r5, r6, lr}
    f3fe:	b140      	cbz	r0, f412 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x448>
    f400:	2909      	cmp	r1, #9
    f402:	d249      	bcs.n	f498 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4ce>
    f404:	e8df f001 	tbb	[pc, r1]
    f408:	3c3c1507 	.word	0x3c3c1507
    f40c:	402a4838 	.word	0x402a4838
    f410:	0044      	.short	0x0044
    f412:	21cb      	movs	r1, #203	; 0xcb
    f414:	e03d      	b.n	f492 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4c8>
    f416:	4604      	mov	r4, r0
    f418:	f7f4 fcde 	bl	3dd8 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>
    f41c:	b110      	cbz	r0, f424 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x45a>
    f41e:	f240 2175 	movw	r1, #629	; 0x275
    f422:	e036      	b.n	f492 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4c8>
    f424:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
    f428:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f42c:	38ff      	subs	r0, #255	; 0xff
    f42e:	f7fb be6d 	b.w	b10c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    f432:	4605      	mov	r5, r0
    f434:	f7ff fbe9 	bl	ec0a <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    f438:	b9b0      	cbnz	r0, f468 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x49e>
    f43a:	2100      	movs	r1, #0
    f43c:	4628      	mov	r0, r5
    f43e:	f7ff fe73 	bl	f128 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x15e>
    f442:	4604      	mov	r4, r0
    f444:	f8d5 00ec 	ldr.w	r0, [r5, #236]	; 0xec
    f448:	42a0      	cmp	r0, r4
    f44a:	d20b      	bcs.n	f464 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x49a>
    f44c:	1a20      	subs	r0, r4, r0
    f44e:	2103      	movs	r1, #3
    f450:	f7fa fdac 	bl	9fac <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    f454:	b130      	cbz	r0, f464 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x49a>
    f456:	4628      	mov	r0, r5
    f458:	f8c5 40ec 	str.w	r4, [r5, #236]	; 0xec
    f45c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f460:	f7ff bbaa 	b.w	ebb8 <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>
    f464:	f8c5 40ec 	str.w	r4, [r5, #236]	; 0xec
    f468:	4628      	mov	r0, r5
    f46a:	f7f4 fcd1 	bl	3e10 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>
    f46e:	2800      	cmp	r0, #0
    f470:	d014      	beq.n	f49c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4d2>
    f472:	f240 21a9 	movw	r1, #681	; 0x2a9
    f476:	e00c      	b.n	f492 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4c8>
    f478:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f47c:	f7f9 b842 	b.w	8504 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    f480:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f484:	f7ff be0a 	b.w	f09c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xd2>
    f488:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f48c:	f7ff be43 	b.w	f116 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x14c>
    f490:	21eb      	movs	r1, #235	; 0xeb
    f492:	2030      	movs	r0, #48	; 0x30
    f494:	f7f1 ffb2 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f498:	21ef      	movs	r1, #239	; 0xef
    f49a:	e7fa      	b.n	f492 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4c8>
    f49c:	bd70      	pop	{r4, r5, r6, pc}
    f49e:	b510      	push	{r4, lr}
    f4a0:	0004      	movs	r4, r0
    f4a2:	d008      	beq.n	f4b6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4ec>
    f4a4:	2909      	cmp	r1, #9
    f4a6:	d25c      	bcs.n	f562 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x598>
    f4a8:	e8df f001 	tbb	[pc, r1]
    f4ac:	40403807 	.word	0x40403807
    f4b0:	4c455b3c 	.word	0x4c455b3c
    f4b4:	0057      	.short	0x0057
    f4b6:	2197      	movs	r1, #151	; 0x97
    f4b8:	e050      	b.n	f55c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x592>
    f4ba:	2100      	movs	r1, #0
    f4bc:	f8c4 12ac 	str.w	r1, [r4, #684]	; 0x2ac
    f4c0:	f894 1270 	ldrb.w	r1, [r4, #624]	; 0x270
    f4c4:	4620      	mov	r0, r4
    f4c6:	b189      	cbz	r1, f4ec <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x522>
    f4c8:	f8b0 226e 	ldrh.w	r2, [r0, #622]	; 0x26e
    f4cc:	f8b0 1094 	ldrh.w	r1, [r0, #148]	; 0x94
    f4d0:	428a      	cmp	r2, r1
    f4d2:	d106      	bne.n	f4e2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x518>
    f4d4:	f8b0 2224 	ldrh.w	r2, [r0, #548]	; 0x224
    f4d8:	1a51      	subs	r1, r2, r1
    f4da:	f8a0 1226 	strh.w	r1, [r0, #550]	; 0x226
    f4de:	4611      	mov	r1, r2
    f4e0:	e00d      	b.n	f4fe <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x534>
    f4e2:	1a51      	subs	r1, r2, r1
    f4e4:	f8a0 1226 	strh.w	r1, [r0, #550]	; 0x226
    f4e8:	b291      	uxth	r1, r2
    f4ea:	e008      	b.n	f4fe <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x534>
    f4ec:	f8b0 126c 	ldrh.w	r1, [r0, #620]	; 0x26c
    f4f0:	f8b0 2094 	ldrh.w	r2, [r0, #148]	; 0x94
    f4f4:	1a89      	subs	r1, r1, r2
    f4f6:	f8a0 1226 	strh.w	r1, [r0, #550]	; 0x226
    f4fa:	f8b0 126c 	ldrh.w	r1, [r0, #620]	; 0x26c
    f4fe:	f8a0 1094 	strh.w	r1, [r0, #148]	; 0x94
    f502:	e9d0 12a2 	ldrd	r1, r2, [r0, #648]	; 0x288
    f506:	f8c0 1290 	str.w	r1, [r0, #656]	; 0x290
    f50a:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
    f50e:	f7f6 f873 	bl	55f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA>
    f512:	4620      	mov	r0, r4
    f514:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f518:	f7f5 bea4 	b.w	5264 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x60c>
    f51c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f520:	f000 b83c 	b.w	f59c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY>
    f524:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f528:	f7f8 bfec 	b.w	8504 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    f52c:	4620      	mov	r0, r4
    f52e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f532:	f7f5 bed1 	b.w	52d8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x680>
    f536:	2001      	movs	r0, #1
    f538:	f7fa fd28 	bl	9f8c <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>
    f53c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f540:	f7fe bbc3 	b.w	dcca <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>
    f544:	f894 025c 	ldrb.w	r0, [r4, #604]	; 0x25c
    f548:	2804      	cmp	r0, #4
    f54a:	d001      	beq.n	f550 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x586>
    f54c:	21b9      	movs	r1, #185	; 0xb9
    f54e:	e005      	b.n	f55c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x592>
    f550:	4620      	mov	r0, r4
    f552:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f556:	f7ff bef8 	b.w	f34a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x380>
    f55a:	21bf      	movs	r1, #191	; 0xbf
    f55c:	2030      	movs	r0, #48	; 0x30
    f55e:	f7f1 ff4d 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f562:	21c3      	movs	r1, #195	; 0xc3
    f564:	e7fa      	b.n	f55c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x592>
    f566:	b510      	push	{r4, lr}
    f568:	f7f8 fee2 	bl	8330 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    f56c:	f64d 7141 	movw	r1, #57153	; 0xdf41
    f570:	4408      	add	r0, r1
    f572:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    f576:	fbb0 f0f1 	udiv	r0, r0, r1
    f57a:	f200 1079 	addw	r0, r0, #377	; 0x179
    f57e:	bd10      	pop	{r4, pc}
    f580:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    f584:	f001 0307 	and.w	r3, r1, #7
    f588:	7802      	ldrb	r2, [r0, #0]
    f58a:	2101      	movs	r1, #1
    f58c:	4099      	lsls	r1, r3
    f58e:	438a      	bics	r2, r1
    f590:	7002      	strb	r2, [r0, #0]
    f592:	4770      	bx	lr

0000f594 <sym_PDDLBAI7RAK2OQ7ZHFU33L5KMJV5YKPLX5ITXAY>:
    f594:	f7f2 babc 	b.w	1b10 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>

0000f598 <sym_OTZAOT4DEZSL3R4MXRNUS2BIBKPPCOEO2SMZYAI>:
    f598:	2000      	movs	r0, #0
    f59a:	4770      	bx	lr

0000f59c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY>:
    f59c:	f7f2 bf4c 	b.w	2438 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>

0000f5a0 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>:
    f5a0:	2100      	movs	r1, #0
    f5a2:	f880 109d 	strb.w	r1, [r0, #157]	; 0x9d
    f5a6:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
    f5aa:	f880 10a1 	strb.w	r1, [r0, #161]	; 0xa1
    f5ae:	f890 122b 	ldrb.w	r1, [r0, #555]	; 0x22b
    f5b2:	b109      	cbz	r1, f5b8 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x18>
    f5b4:	2102      	movs	r1, #2
    f5b6:	e000      	b.n	f5ba <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1a>
    f5b8:	2103      	movs	r1, #3
    f5ba:	f7f5 bb13 	b.w	4be4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    f5be:	f890 00a6 	ldrb.w	r0, [r0, #166]	; 0xa6
    f5c2:	28fe      	cmp	r0, #254	; 0xfe
    f5c4:	d001      	beq.n	f5ca <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2a>
    f5c6:	2001      	movs	r0, #1
    f5c8:	4770      	bx	lr
    f5ca:	2000      	movs	r0, #0
    f5cc:	4770      	bx	lr
    f5ce:	b510      	push	{r4, lr}
    f5d0:	2801      	cmp	r0, #1
    f5d2:	d006      	beq.n	f5e2 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x42>
    f5d4:	2802      	cmp	r0, #2
    f5d6:	d004      	beq.n	f5e2 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x42>
    f5d8:	f44f 7136 	mov.w	r1, #728	; 0x2d8
    f5dc:	2006      	movs	r0, #6
    f5de:	f7f1 ff0d 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f5e2:	bd10      	pop	{r4, pc}
    f5e4:	2801      	cmp	r0, #1
    f5e6:	d002      	beq.n	f5ee <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x4e>
    f5e8:	2802      	cmp	r0, #2
    f5ea:	d105      	bne.n	f5f8 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x58>
    f5ec:	e002      	b.n	f5f4 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x54>
    f5ee:	2901      	cmp	r1, #1
    f5f0:	d004      	beq.n	f5fc <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x5c>
    f5f2:	e001      	b.n	f5f8 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x58>
    f5f4:	2902      	cmp	r1, #2
    f5f6:	d001      	beq.n	f5fc <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x5c>
    f5f8:	2000      	movs	r0, #0
    f5fa:	4770      	bx	lr
    f5fc:	2001      	movs	r0, #1
    f5fe:	4770      	bx	lr
    f600:	1a40      	subs	r0, r0, r1
    f602:	b200      	sxth	r0, r0
    f604:	f647 71fe 	movw	r1, #32766	; 0x7ffe
    f608:	4288      	cmp	r0, r1
    f60a:	dc01      	bgt.n	f610 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x70>
    f60c:	2800      	cmp	r0, #0
    f60e:	dc01      	bgt.n	f614 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x74>
    f610:	2001      	movs	r0, #1
    f612:	4770      	bx	lr
    f614:	2000      	movs	r0, #0
    f616:	4770      	bx	lr
    f618:	6842      	ldr	r2, [r0, #4]
    f61a:	2100      	movs	r1, #0
    f61c:	f882 109d 	strb.w	r1, [r2, #157]	; 0x9d
    f620:	6842      	ldr	r2, [r0, #4]
    f622:	f882 10d6 	strb.w	r1, [r2, #214]	; 0xd6
    f626:	6840      	ldr	r0, [r0, #4]
    f628:	f8a0 10d2 	strh.w	r1, [r0, #210]	; 0xd2
    f62c:	4770      	bx	lr
    f62e:	b510      	push	{r4, lr}
    f630:	4604      	mov	r4, r0
    f632:	6840      	ldr	r0, [r0, #4]
    f634:	f890 008c 	ldrb.w	r0, [r0, #140]	; 0x8c
    f638:	0740      	lsls	r0, r0, #29
    f63a:	d501      	bpl.n	f640 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0xa0>
    f63c:	2001      	movs	r0, #1
    f63e:	bd10      	pop	{r4, pc}
    f640:	f7f6 f8dc 	bl	57fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>
    f644:	6860      	ldr	r0, [r4, #4]
    f646:	f850 1f8c 	ldr.w	r1, [r0, #140]!
    f64a:	f041 0104 	orr.w	r1, r1, #4
    f64e:	6001      	str	r1, [r0, #0]
    f650:	2000      	movs	r0, #0
    f652:	bd10      	pop	{r4, pc}
    f654:	b510      	push	{r4, lr}
    f656:	4604      	mov	r4, r0
    f658:	6840      	ldr	r0, [r0, #4]
    f65a:	2301      	movs	r3, #1
    f65c:	2109      	movs	r1, #9
    f65e:	f890 209d 	ldrb.w	r2, [r0, #157]	; 0x9d
    f662:	3080      	adds	r0, #128	; 0x80
    f664:	f7fe fbc2 	bl	ddec <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f668:	2800      	cmp	r0, #0
    f66a:	d009      	beq.n	f680 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0xe0>
    f66c:	6861      	ldr	r1, [r4, #4]
    f66e:	2000      	movs	r0, #0
    f670:	f881 00ca 	strb.w	r0, [r1, #202]	; 0xca
    f674:	6861      	ldr	r1, [r4, #4]
    f676:	f881 00d6 	strb.w	r0, [r1, #214]	; 0xd6
    f67a:	6861      	ldr	r1, [r4, #4]
    f67c:	f881 009d 	strb.w	r0, [r1, #157]	; 0x9d
    f680:	bd10      	pop	{r4, pc}
    f682:	b510      	push	{r4, lr}
    f684:	4604      	mov	r4, r0
    f686:	6840      	ldr	r0, [r0, #4]
    f688:	2301      	movs	r3, #1
    f68a:	2100      	movs	r1, #0
    f68c:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    f690:	3080      	adds	r0, #128	; 0x80
    f692:	f7fe fbab 	bl	ddec <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f696:	2800      	cmp	r0, #0
    f698:	6860      	ldr	r0, [r4, #4]
    f69a:	d00b      	beq.n	f6b4 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x114>
    f69c:	f890 00a3 	ldrb.w	r0, [r0, #163]	; 0xa3
    f6a0:	2800      	cmp	r0, #0
    f6a2:	d006      	beq.n	f6b2 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x112>
    f6a4:	f7f6 f8aa 	bl	57fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>
    f6a8:	6861      	ldr	r1, [r4, #4]
    f6aa:	2011      	movs	r0, #17
    f6ac:	f881 009e 	strb.w	r0, [r1, #158]	; 0x9e
    f6b0:	2000      	movs	r0, #0
    f6b2:	bd10      	pop	{r4, pc}
    f6b4:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    f6b8:	2301      	movs	r3, #1
    f6ba:	2105      	movs	r1, #5
    f6bc:	3080      	adds	r0, #128	; 0x80
    f6be:	f7fe fb95 	bl	ddec <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f6c2:	b108      	cbz	r0, f6c8 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x128>
    f6c4:	2008      	movs	r0, #8
    f6c6:	bd10      	pop	{r4, pc}
    f6c8:	2001      	movs	r0, #1
    f6ca:	bd10      	pop	{r4, pc}
    f6cc:	6840      	ldr	r0, [r0, #4]
    f6ce:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    f6d2:	2912      	cmp	r1, #18
    f6d4:	d001      	beq.n	f6da <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x13a>
    f6d6:	2002      	movs	r0, #2
    f6d8:	4770      	bx	lr
    f6da:	2113      	movs	r1, #19
    f6dc:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
    f6e0:	2000      	movs	r0, #0
    f6e2:	4770      	bx	lr
    f6e4:	b510      	push	{r4, lr}
    f6e6:	4604      	mov	r4, r0
    f6e8:	6840      	ldr	r0, [r0, #4]
    f6ea:	f890 009e 	ldrb.w	r0, [r0, #158]	; 0x9e
    f6ee:	2818      	cmp	r0, #24
    f6f0:	d001      	beq.n	f6f6 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x156>
    f6f2:	2002      	movs	r0, #2
    f6f4:	bd10      	pop	{r4, pc}
    f6f6:	f7f6 f88d 	bl	5814 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    f6fa:	6861      	ldr	r1, [r4, #4]
    f6fc:	201c      	movs	r0, #28
    f6fe:	f881 009e 	strb.w	r0, [r1, #158]	; 0x9e
    f702:	2000      	movs	r0, #0
    f704:	bd10      	pop	{r4, pc}
    f706:	b510      	push	{r4, lr}
    f708:	6843      	ldr	r3, [r0, #4]
    f70a:	4604      	mov	r4, r0
    f70c:	f893 012c 	ldrb.w	r0, [r3, #300]	; 0x12c
    f710:	2808      	cmp	r0, #8
    f712:	d20d      	bcs.n	f730 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x190>
    f714:	f500 7210 	add.w	r2, r0, #576	; 0x240
    f718:	f1c0 0008 	rsb	r0, r0, #8
    f71c:	b2c1      	uxtb	r1, r0
    f71e:	1898      	adds	r0, r3, r2
    f720:	f7f1 ff0c 	bl	153c <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    f724:	6861      	ldr	r1, [r4, #4]
    f726:	f891 212c 	ldrb.w	r2, [r1, #300]	; 0x12c
    f72a:	4410      	add	r0, r2
    f72c:	f881 012c 	strb.w	r0, [r1, #300]	; 0x12c
    f730:	6862      	ldr	r2, [r4, #4]
    f732:	f892 112c 	ldrb.w	r1, [r2, #300]	; 0x12c
    f736:	3908      	subs	r1, #8
    f738:	2904      	cmp	r1, #4
    f73a:	d20d      	bcs.n	f758 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1b8>
    f73c:	f501 708e 	add.w	r0, r1, #284	; 0x11c
    f740:	f1c1 0104 	rsb	r1, r1, #4
    f744:	b2c9      	uxtb	r1, r1
    f746:	4410      	add	r0, r2
    f748:	f7f1 fef8 	bl	153c <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    f74c:	6861      	ldr	r1, [r4, #4]
    f74e:	f891 212c 	ldrb.w	r2, [r1, #300]	; 0x12c
    f752:	4410      	add	r0, r2
    f754:	f881 012c 	strb.w	r0, [r1, #300]	; 0x12c
    f758:	6860      	ldr	r0, [r4, #4]
    f75a:	f890 112c 	ldrb.w	r1, [r0, #300]	; 0x12c
    f75e:	290c      	cmp	r1, #12
    f760:	d30f      	bcc.n	f782 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e2>
    f762:	d005      	beq.n	f770 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1d0>
    f764:	f640 1176 	movw	r1, #2422	; 0x976
    f768:	f04f 0031 	mov.w	r0, #49	; 0x31
    f76c:	f7f1 fe46 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f770:	2100      	movs	r1, #0
    f772:	f880 112c 	strb.w	r1, [r0, #300]	; 0x12c
    f776:	2101      	movs	r1, #1
    f778:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f77c:	2004      	movs	r0, #4
    f77e:	f7f6 bdf1 	b.w	6364 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd6c>
    f782:	bd10      	pop	{r4, pc}
    f784:	6842      	ldr	r2, [r0, #4]
    f786:	2131      	movs	r1, #49	; 0x31
    f788:	f882 109d 	strb.w	r1, [r2, #157]	; 0x9d
    f78c:	6840      	ldr	r0, [r0, #4]
    f78e:	2100      	movs	r1, #0
    f790:	f880 12c4 	strb.w	r1, [r0, #708]	; 0x2c4
    f794:	4770      	bx	lr
    f796:	b510      	push	{r4, lr}
    f798:	6841      	ldr	r1, [r0, #4]
    f79a:	f891 209e 	ldrb.w	r2, [r1, #158]	; 0x9e
    f79e:	2a15      	cmp	r2, #21
    f7a0:	d004      	beq.n	f7ac <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x20c>
    f7a2:	f640 011b 	movw	r1, #2075	; 0x81b
    f7a6:	2031      	movs	r0, #49	; 0x31
    f7a8:	f7f1 fe28 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f7ac:	2201      	movs	r2, #1
    f7ae:	f881 20db 	strb.w	r2, [r1, #219]	; 0xdb
    f7b2:	6840      	ldr	r0, [r0, #4]
    f7b4:	2116      	movs	r1, #22
    f7b6:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
    f7ba:	bd10      	pop	{r4, pc}
    f7bc:	f7ff b8ca 	b.w	e954 <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY>
    f7c0:	b510      	push	{r4, lr}
    f7c2:	4604      	mov	r4, r0
    f7c4:	6840      	ldr	r0, [r0, #4]
    f7c6:	2301      	movs	r3, #1
    f7c8:	2100      	movs	r1, #0
    f7ca:	f890 209d 	ldrb.w	r2, [r0, #157]	; 0x9d
    f7ce:	3080      	adds	r0, #128	; 0x80
    f7d0:	f7fe fb0c 	bl	ddec <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f7d4:	b120      	cbz	r0, f7e0 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x240>
    f7d6:	6861      	ldr	r1, [r4, #4]
    f7d8:	201d      	movs	r0, #29
    f7da:	f881 009d 	strb.w	r0, [r1, #157]	; 0x9d
    f7de:	bd10      	pop	{r4, pc}
    f7e0:	f640 017e 	movw	r1, #2174	; 0x87e
    f7e4:	2031      	movs	r0, #49	; 0x31
    f7e6:	f7f1 fe09 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f7ea:	b510      	push	{r4, lr}
    f7ec:	6841      	ldr	r1, [r0, #4]
    f7ee:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
    f7f2:	06c2      	lsls	r2, r0, #27
    f7f4:	d402      	bmi.n	f7fc <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x25c>
    f7f6:	f640 0185 	movw	r1, #2181	; 0x885
    f7fa:	e003      	b.n	f804 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x264>
    f7fc:	0682      	lsls	r2, r0, #26
    f7fe:	d504      	bpl.n	f80a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x26a>
    f800:	f640 0186 	movw	r1, #2182	; 0x886
    f804:	2031      	movs	r0, #49	; 0x31
    f806:	f7f1 fdf9 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f80a:	f020 0010 	bic.w	r0, r0, #16
    f80e:	f8c1 008c 	str.w	r0, [r1, #140]	; 0x8c
    f812:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f816:	f7f5 bffd 	b.w	5814 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    f81a:	b510      	push	{r4, lr}
    f81c:	4604      	mov	r4, r0
    f81e:	6840      	ldr	r0, [r0, #4]
    f820:	2301      	movs	r3, #1
    f822:	2100      	movs	r1, #0
    f824:	f890 209d 	ldrb.w	r2, [r0, #157]	; 0x9d
    f828:	3080      	adds	r0, #128	; 0x80
    f82a:	f7fe fadf 	bl	ddec <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f82e:	b120      	cbz	r0, f83a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x29a>
    f830:	6861      	ldr	r1, [r4, #4]
    f832:	200f      	movs	r0, #15
    f834:	f881 009d 	strb.w	r0, [r1, #157]	; 0x9d
    f838:	bd10      	pop	{r4, pc}
    f83a:	f640 0171 	movw	r1, #2161	; 0x871
    f83e:	2031      	movs	r0, #49	; 0x31
    f840:	f7f1 fddc 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f844:	6840      	ldr	r0, [r0, #4]
    f846:	f850 1f8c 	ldr.w	r1, [r0, #140]!
    f84a:	f021 0104 	bic.w	r1, r1, #4
    f84e:	6001      	str	r1, [r0, #0]
    f850:	f7f5 bfe0 	b.w	5814 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    f854:	b510      	push	{r4, lr}
    f856:	6841      	ldr	r1, [r0, #4]
    f858:	f891 209e 	ldrb.w	r2, [r1, #158]	; 0x9e
    f85c:	2a11      	cmp	r2, #17
    f85e:	d004      	beq.n	f86a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2ca>
    f860:	f640 0113 	movw	r1, #2067	; 0x813
    f864:	2031      	movs	r0, #49	; 0x31
    f866:	f7f1 fdc9 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f86a:	2201      	movs	r2, #1
    f86c:	f881 20db 	strb.w	r2, [r1, #219]	; 0xdb
    f870:	6840      	ldr	r0, [r0, #4]
    f872:	2112      	movs	r1, #18
    f874:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
    f878:	bd10      	pop	{r4, pc}
    f87a:	b510      	push	{r4, lr}
    f87c:	4604      	mov	r4, r0
    f87e:	6840      	ldr	r0, [r0, #4]
    f880:	2301      	movs	r3, #1
    f882:	2100      	movs	r1, #0
    f884:	f890 209d 	ldrb.w	r2, [r0, #157]	; 0x9d
    f888:	3080      	adds	r0, #128	; 0x80
    f88a:	f7fe faaf 	bl	ddec <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f88e:	b120      	cbz	r0, f89a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2fa>
    f890:	6861      	ldr	r1, [r4, #4]
    f892:	2020      	movs	r0, #32
    f894:	f881 009d 	strb.w	r0, [r1, #157]	; 0x9d
    f898:	bd10      	pop	{r4, pc}
    f89a:	f44f 6109 	mov.w	r1, #2192	; 0x890
    f89e:	2031      	movs	r0, #49	; 0x31
    f8a0:	f7f1 fdac 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f8a4:	b510      	push	{r4, lr}
    f8a6:	6841      	ldr	r1, [r0, #4]
    f8a8:	f891 009e 	ldrb.w	r0, [r1, #158]	; 0x9e
    f8ac:	2822      	cmp	r0, #34	; 0x22
    f8ae:	d005      	beq.n	f8bc <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x31c>
    f8b0:	b120      	cbz	r0, f8bc <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x31c>
    f8b2:	f640 0197 	movw	r1, #2199	; 0x897
    f8b6:	2031      	movs	r0, #49	; 0x31
    f8b8:	f7f1 fda0 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f8bc:	2023      	movs	r0, #35	; 0x23
    f8be:	f881 009e 	strb.w	r0, [r1, #158]	; 0x9e
    f8c2:	bd10      	pop	{r4, pc}
    f8c4:	b510      	push	{r4, lr}
    f8c6:	6840      	ldr	r0, [r0, #4]
    f8c8:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    f8cc:	292f      	cmp	r1, #47	; 0x2f
    f8ce:	d006      	beq.n	f8de <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x33e>
    f8d0:	2916      	cmp	r1, #22
    f8d2:	d00b      	beq.n	f8ec <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x34c>
    f8d4:	f640 013d 	movw	r1, #2109	; 0x83d
    f8d8:	2031      	movs	r0, #49	; 0x31
    f8da:	f7f1 fd8f 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f8de:	2100      	movs	r1, #0
    f8e0:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
    f8e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f8e8:	f7f5 bf94 	b.w	5814 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    f8ec:	211a      	movs	r1, #26
    f8ee:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
    f8f2:	bd10      	pop	{r4, pc}
    f8f4:	b510      	push	{r4, lr}
    f8f6:	6840      	ldr	r0, [r0, #4]
    f8f8:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    f8fc:	2916      	cmp	r1, #22
    f8fe:	d004      	beq.n	f90a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x36a>
    f900:	f640 0128 	movw	r1, #2088	; 0x828
    f904:	2031      	movs	r0, #49	; 0x31
    f906:	f7f1 fd79 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f90a:	211a      	movs	r1, #26
    f90c:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
    f910:	bd10      	pop	{r4, pc}
    f912:	f7ff b80d 	b.w	e930 <sym_OPCORHVHZVKAWEVWCDZOHGGLXMSL2TBGHVHNDOY>
    f916:	b510      	push	{r4, lr}
    f918:	6840      	ldr	r0, [r0, #4]
    f91a:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    f91e:	2916      	cmp	r1, #22
    f920:	d004      	beq.n	f92c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x38c>
    f922:	f640 0122 	movw	r1, #2082	; 0x822
    f926:	2031      	movs	r0, #49	; 0x31
    f928:	f7f1 fd68 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f92c:	2118      	movs	r1, #24
    f92e:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
    f932:	bd10      	pop	{r4, pc}
    f934:	b510      	push	{r4, lr}
    f936:	4604      	mov	r4, r0
    f938:	6840      	ldr	r0, [r0, #4]
    f93a:	2301      	movs	r3, #1
    f93c:	4619      	mov	r1, r3
    f93e:	f890 209f 	ldrb.w	r2, [r0, #159]	; 0x9f
    f942:	3080      	adds	r0, #128	; 0x80
    f944:	f7fe fa52 	bl	ddec <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f948:	2800      	cmp	r0, #0
    f94a:	d103      	bne.n	f954 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x3b4>
    f94c:	6861      	ldr	r1, [r4, #4]
    f94e:	2007      	movs	r0, #7
    f950:	f881 009f 	strb.w	r0, [r1, #159]	; 0x9f
    f954:	bd10      	pop	{r4, pc}
    f956:	f7ff b84f 	b.w	e9f8 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q>
    f95a:	b570      	push	{r4, r5, r6, lr}
    f95c:	4614      	mov	r4, r2
    f95e:	460e      	mov	r6, r1
    f960:	6861      	ldr	r1, [r4, #4]
    f962:	4602      	mov	r2, r0
    f964:	2500      	movs	r5, #0
    f966:	f891 009d 	ldrb.w	r0, [r1, #157]	; 0x9d
    f96a:	2a0e      	cmp	r2, #14
    f96c:	d00a      	beq.n	f984 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x3e4>
    f96e:	2a12      	cmp	r2, #18
    f970:	d011      	beq.n	f996 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x3f6>
    f972:	2a14      	cmp	r2, #20
    f974:	d016      	beq.n	f9a4 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x404>
    f976:	2a17      	cmp	r2, #23
    f978:	d022      	beq.n	f9c0 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x420>
    f97a:	f240 4115 	movw	r1, #1045	; 0x415
    f97e:	2031      	movs	r0, #49	; 0x31
    f980:	f7f1 fd3c 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f984:	2804      	cmp	r0, #4
    f986:	d12f      	bne.n	f9e8 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x448>
    f988:	4620      	mov	r0, r4
    f98a:	f7ff fe45 	bl	f618 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x78>
    f98e:	4620      	mov	r0, r4
    f990:	f7f3 ff96 	bl	38c0 <sym_KH2TZBL3IC4Q72SOWRZYKXJYTC66QUG36J2D64Q>
    f994:	e028      	b.n	f9e8 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x448>
    f996:	280f      	cmp	r0, #15
    f998:	d126      	bne.n	f9e8 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x448>
    f99a:	4620      	mov	r0, r4
    f99c:	f7ff fe5a 	bl	f654 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0xb4>
    f9a0:	4605      	mov	r5, r0
    f9a2:	e021      	b.n	f9e8 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x448>
    f9a4:	281d      	cmp	r0, #29
    f9a6:	d11f      	bne.n	f9e8 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x448>
    f9a8:	4620      	mov	r0, r4
    f9aa:	f7ff fe35 	bl	f618 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x78>
    f9ae:	b126      	cbz	r6, f9ba <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x41a>
    f9b0:	6860      	ldr	r0, [r4, #4]
    f9b2:	2105      	movs	r1, #5
    f9b4:	30ec      	adds	r0, #236	; 0xec
    f9b6:	f7ff fde3 	bl	f580 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5b6>
    f9ba:	f7f6 f903 	bl	5bc4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5cc>
    f9be:	e013      	b.n	f9e8 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x448>
    f9c0:	f891 009e 	ldrb.w	r0, [r1, #158]	; 0x9e
    f9c4:	2823      	cmp	r0, #35	; 0x23
    f9c6:	d10f      	bne.n	f9e8 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x448>
    f9c8:	2600      	movs	r6, #0
    f9ca:	f881 609e 	strb.w	r6, [r1, #158]	; 0x9e
    f9ce:	f7f5 ff21 	bl	5814 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    f9d2:	6860      	ldr	r0, [r4, #4]
    f9d4:	f890 013c 	ldrb.w	r0, [r0, #316]	; 0x13c
    f9d8:	2801      	cmp	r0, #1
    f9da:	d102      	bne.n	f9e2 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x442>
    f9dc:	2000      	movs	r0, #0
    f9de:	f7f6 fdd3 	bl	6588 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf90>
    f9e2:	6860      	ldr	r0, [r4, #4]
    f9e4:	f880 613c 	strb.w	r6, [r0, #316]	; 0x13c
    f9e8:	4628      	mov	r0, r5
    f9ea:	bd70      	pop	{r4, r5, r6, pc}
    f9ec:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    f9f0:	f001 0107 	and.w	r1, r1, #7
    f9f4:	7800      	ldrb	r0, [r0, #0]
    f9f6:	40c8      	lsrs	r0, r1
    f9f8:	f000 0001 	and.w	r0, r0, #1
    f9fc:	4770      	bx	lr

0000f9fe <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ>:
    f9fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fa02:	6856      	ldr	r6, [r2, #4]
    fa04:	460c      	mov	r4, r1
    fa06:	f506 7598 	add.w	r5, r6, #304	; 0x130
    fa0a:	f106 0780 	add.w	r7, r6, #128	; 0x80
    fa0e:	2823      	cmp	r0, #35	; 0x23
    fa10:	d008      	beq.n	fa24 <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0x26>
    fa12:	2824      	cmp	r0, #36	; 0x24
    fa14:	d014      	beq.n	fa40 <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0x42>
    fa16:	2825      	cmp	r0, #37	; 0x25
    fa18:	d02a      	beq.n	fa70 <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0x72>
    fa1a:	f44f 718d 	mov.w	r1, #282	; 0x11a
    fa1e:	2078      	movs	r0, #120	; 0x78
    fa20:	f7f1 fcec 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fa24:	7de8      	ldrb	r0, [r5, #23]
    fa26:	f000 f8d4 	bl	fbd2 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x50>
    fa2a:	7de9      	ldrb	r1, [r5, #23]
    fa2c:	7121      	strb	r1, [r4, #4]
    fa2e:	7e29      	ldrb	r1, [r5, #24]
    fa30:	eb06 0040 	add.w	r0, r6, r0, lsl #1
    fa34:	7161      	strb	r1, [r4, #5]
    fa36:	f890 0070 	ldrb.w	r0, [r0, #112]	; 0x70
    fa3a:	71a0      	strb	r0, [r4, #6]
    fa3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fa40:	7d28      	ldrb	r0, [r5, #20]
    fa42:	f000 f8c6 	bl	fbd2 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x50>
    fa46:	eb06 0640 	add.w	r6, r6, r0, lsl #1
    fa4a:	7f78      	ldrb	r0, [r7, #29]
    fa4c:	366f      	adds	r6, #111	; 0x6f
    fa4e:	2828      	cmp	r0, #40	; 0x28
    fa50:	d00c      	beq.n	fa6c <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0x6e>
    fa52:	68b8      	ldr	r0, [r7, #8]
    fa54:	f7f3 ffa2 	bl	399c <sym_DEQHYPJXYJ4WT7NTOYVXPSGPFEINKR4XQZSCDJY>
    fa58:	7831      	ldrb	r1, [r6, #0]
    fa5a:	7121      	strb	r1, [r4, #4]
    fa5c:	7d69      	ldrb	r1, [r5, #21]
    fa5e:	7161      	strb	r1, [r4, #5]
    fa60:	7871      	ldrb	r1, [r6, #1]
    fa62:	71a1      	strb	r1, [r4, #6]
    fa64:	71e0      	strb	r0, [r4, #7]
    fa66:	2000      	movs	r0, #0
    fa68:	75a8      	strb	r0, [r5, #22]
    fa6a:	e7e7      	b.n	fa3c <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0x3e>
    fa6c:	20ff      	movs	r0, #255	; 0xff
    fa6e:	e7f3      	b.n	fa58 <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0x5a>
    fa70:	7d28      	ldrb	r0, [r5, #20]
    fa72:	f000 f8ae 	bl	fbd2 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x50>
    fa76:	eb06 0040 	add.w	r0, r6, r0, lsl #1
    fa7a:	7d29      	ldrb	r1, [r5, #20]
    fa7c:	7121      	strb	r1, [r4, #4]
    fa7e:	f810 1f6f 	ldrb.w	r1, [r0, #111]!
    fa82:	7161      	strb	r1, [r4, #5]
    fa84:	7d69      	ldrb	r1, [r5, #21]
    fa86:	71a1      	strb	r1, [r4, #6]
    fa88:	7840      	ldrb	r0, [r0, #1]
    fa8a:	71e0      	strb	r0, [r4, #7]
    fa8c:	e7d6      	b.n	fa3c <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0x3e>

0000fa8e <sym_C4WN3DS2SEB6CNTCY4ECLTD4ZD7ETWJRO5S2S2Y>:
    fa8e:	b510      	push	{r4, lr}
    fa90:	2801      	cmp	r0, #1
    fa92:	d006      	beq.n	faa2 <sym_C4WN3DS2SEB6CNTCY4ECLTD4ZD7ETWJRO5S2S2Y+0x14>
    fa94:	2802      	cmp	r0, #2
    fa96:	d006      	beq.n	faa6 <sym_C4WN3DS2SEB6CNTCY4ECLTD4ZD7ETWJRO5S2S2Y+0x18>
    fa98:	f240 2162 	movw	r1, #610	; 0x262
    fa9c:	2078      	movs	r0, #120	; 0x78
    fa9e:	f7f1 fcad 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    faa2:	2000      	movs	r0, #0
    faa4:	bd10      	pop	{r4, pc}
    faa6:	2001      	movs	r0, #1
    faa8:	bd10      	pop	{r4, pc}

0000faaa <sym_LC25II2QNYO4QUC4WQAQXNPSFLYYHVIDWHXRWAA>:
    faaa:	207f      	movs	r0, #127	; 0x7f
    faac:	f000 b8ab 	b.w	fc06 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x84>

0000fab0 <sym_6E7DB5DGCJDCKNJAQTLQVPITL6JXBGRB3SQGSDY>:
    fab0:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    fab4:	f000 b8a7 	b.w	fc06 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x84>

0000fab8 <sym_QIMK4SLEK3LSPZFVZAE765G6IOUSE5EWGSEHHUY>:
    fab8:	b510      	push	{r4, lr}
    faba:	4604      	mov	r4, r0
    fabc:	f7f7 ff72 	bl	79a4 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    fac0:	1e64      	subs	r4, r4, #1
    fac2:	b2e2      	uxtb	r2, r4
    fac4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fac8:	f000 b869 	b.w	fb9e <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x1c>

0000facc <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I>:
    facc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    fad0:	4607      	mov	r7, r0
    fad2:	461e      	mov	r6, r3
    fad4:	4690      	mov	r8, r2
    fad6:	460c      	mov	r4, r1
    fad8:	4608      	mov	r0, r1
    fada:	f7ff ffed 	bl	fab8 <sym_QIMK4SLEK3LSPZFVZAE765G6IOUSE5EWGSEHHUY>
    fade:	b1e8      	cbz	r0, fb1c <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x50>
    fae0:	687d      	ldr	r5, [r7, #4]
    fae2:	2121      	movs	r1, #33	; 0x21
    fae4:	f105 00ec 	add.w	r0, r5, #236	; 0xec
    fae8:	3580      	adds	r5, #128	; 0x80
    faea:	f7ff ff7f 	bl	f9ec <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x44c>
    faee:	b1b8      	cbz	r0, fb20 <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x54>
    faf0:	1e64      	subs	r4, r4, #1
    faf2:	6f29      	ldr	r1, [r5, #112]	; 0x70
    faf4:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
    faf6:	b2e2      	uxtb	r2, r4
    faf8:	f000 f851 	bl	fb9e <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x1c>
    fafc:	b180      	cbz	r0, fb20 <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x54>
    fafe:	6878      	ldr	r0, [r7, #4]
    fb00:	f890 1149 	ldrb.w	r1, [r0, #329]	; 0x149
    fb04:	f88d 1000 	strb.w	r1, [sp]
    fb08:	9900      	ldr	r1, [sp, #0]
    fb0a:	9100      	str	r1, [sp, #0]
    fb0c:	f89d 1000 	ldrb.w	r1, [sp]
    fb10:	f200 1047 	addw	r0, r0, #327	; 0x147
    fb14:	b131      	cbz	r1, fb24 <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x58>
    fb16:	203a      	movs	r0, #58	; 0x3a
    fb18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    fb1c:	2011      	movs	r0, #17
    fb1e:	e7fb      	b.n	fb18 <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x4c>
    fb20:	201a      	movs	r0, #26
    fb22:	e7f9      	b.n	fb18 <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x4c>
    fb24:	1c81      	adds	r1, r0, #2
    fb26:	700e      	strb	r6, [r1, #0]
    fb28:	2101      	movs	r1, #1
    fb2a:	40a1      	lsls	r1, r4
    fb2c:	7001      	strb	r1, [r0, #0]
    fb2e:	f880 8001 	strb.w	r8, [r0, #1]
    fb32:	2000      	movs	r0, #0
    fb34:	e7f0      	b.n	fb18 <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x4c>

0000fb36 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY>:
    fb36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fb3a:	460d      	mov	r5, r1
    fb3c:	4606      	mov	r6, r0
    fb3e:	f7ff ffb4 	bl	faaa <sym_LC25II2QNYO4QUC4WQAQXNPSFLYYHVIDWHXRWAA>
    fb42:	4607      	mov	r7, r0
    fb44:	f7ff ffb4 	bl	fab0 <sym_6E7DB5DGCJDCKNJAQTLQVPITL6JXBGRB3SQGSDY>
    fb48:	2400      	movs	r4, #0
    fb4a:	4285      	cmp	r5, r0
    fb4c:	d100      	bne.n	fb50 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x1a>
    fb4e:	2401      	movs	r4, #1
    fb50:	42bd      	cmp	r5, r7
    fb52:	d101      	bne.n	fb58 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x22>
    fb54:	f044 0402 	orr.w	r4, r4, #2
    fb58:	f000 f834 	bl	fbc4 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x42>
    fb5c:	2200      	movs	r2, #0
    fb5e:	4601      	mov	r1, r0
    fb60:	2301      	movs	r3, #1
    fb62:	fa03 f002 	lsl.w	r0, r3, r2
    fb66:	4208      	tst	r0, r1
    fb68:	d005      	beq.n	fb76 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x40>
    fb6a:	eb06 0042 	add.w	r0, r6, r2, lsl #1
    fb6e:	f880 5070 	strb.w	r5, [r0, #112]	; 0x70
    fb72:	f880 406f 	strb.w	r4, [r0, #111]	; 0x6f
    fb76:	1c52      	adds	r2, r2, #1
    fb78:	b2d2      	uxtb	r2, r2
    fb7a:	2a02      	cmp	r2, #2
    fb7c:	d3f1      	bcc.n	fb62 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x2c>
    fb7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000fb82 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY>:
    fb82:	b510      	push	{r4, lr}
    fb84:	4604      	mov	r4, r0
    fb86:	4608      	mov	r0, r1
    fb88:	f7ff ff81 	bl	fa8e <sym_C4WN3DS2SEB6CNTCY4ECLTD4ZD7ETWJRO5S2S2Y>
    fb8c:	2802      	cmp	r0, #2
    fb8e:	d205      	bcs.n	fb9c <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x1a>
    fb90:	eb04 0040 	add.w	r0, r4, r0, lsl #1
    fb94:	f890 0070 	ldrb.w	r0, [r0, #112]	; 0x70
    fb98:	f884 006e 	strb.w	r0, [r4, #110]	; 0x6e
    fb9c:	bd10      	pop	{r4, pc}
    fb9e:	b510      	push	{r4, lr}
    fba0:	4614      	mov	r4, r2
    fba2:	4602      	mov	r2, r0
    fba4:	2000      	movs	r0, #0
    fba6:	4603      	mov	r3, r0
    fba8:	2c02      	cmp	r4, #2
    fbaa:	d205      	bcs.n	fbb8 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x36>
    fbac:	4610      	mov	r0, r2
    fbae:	f000 f821 	bl	fbf4 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x72>
    fbb2:	2101      	movs	r1, #1
    fbb4:	40a1      	lsls	r1, r4
    fbb6:	b2cb      	uxtb	r3, r1
    fbb8:	4203      	tst	r3, r0
    fbba:	d001      	beq.n	fbc0 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x3e>
    fbbc:	2001      	movs	r0, #1
    fbbe:	bd10      	pop	{r4, pc}
    fbc0:	2000      	movs	r0, #0
    fbc2:	bd10      	pop	{r4, pc}
    fbc4:	b510      	push	{r4, lr}
    fbc6:	f7f7 feed 	bl	79a4 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    fbca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fbce:	f000 b811 	b.w	fbf4 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x72>
    fbd2:	4601      	mov	r1, r0
    fbd4:	b510      	push	{r4, lr}
    fbd6:	2000      	movs	r0, #0
    fbd8:	2301      	movs	r3, #1
    fbda:	fa03 f200 	lsl.w	r2, r3, r0
    fbde:	420a      	tst	r2, r1
    fbe0:	d107      	bne.n	fbf2 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x70>
    fbe2:	1c40      	adds	r0, r0, #1
    fbe4:	b2c0      	uxtb	r0, r0
    fbe6:	2802      	cmp	r0, #2
    fbe8:	d3f7      	bcc.n	fbda <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x58>
    fbea:	213c      	movs	r1, #60	; 0x3c
    fbec:	2078      	movs	r0, #120	; 0x78
    fbee:	f7f1 fc05 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fbf2:	bd10      	pop	{r4, pc}
    fbf4:	0a00      	lsrs	r0, r0, #8
    fbf6:	2201      	movs	r2, #1
    fbf8:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
    fbfc:	07c0      	lsls	r0, r0, #31
    fbfe:	d000      	beq.n	fc02 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x80>
    fc00:	2203      	movs	r2, #3
    fc02:	4610      	mov	r0, r2
    fc04:	4770      	bx	lr
    fc06:	b508      	push	{r3, lr}
    fc08:	2301      	movs	r3, #1
    fc0a:	f640 1288 	movw	r2, #2440	; 0x988
    fc0e:	4669      	mov	r1, sp
    fc10:	f7fc fe44 	bl	c89c <mpsl_fem_tx_power_split>
    fc14:	bd08      	pop	{r3, pc}
    fc16:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    fc1a:	f001 0107 	and.w	r1, r1, #7
    fc1e:	7800      	ldrb	r0, [r0, #0]
    fc20:	40c8      	lsrs	r0, r1
    fc22:	f000 0001 	and.w	r0, r0, #1
    fc26:	4770      	bx	lr
    fc28:	b118      	cbz	r0, fc32 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0xb0>
    fc2a:	2802      	cmp	r0, #2
    fc2c:	d001      	beq.n	fc32 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0xb0>
    fc2e:	2001      	movs	r0, #1
    fc30:	4770      	bx	lr
    fc32:	2000      	movs	r0, #0
    fc34:	4770      	bx	lr

0000fc36 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>:
    fc36:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    fc38:	7881      	ldrb	r1, [r0, #2]
    fc3a:	2500      	movs	r5, #0
    fc3c:	4604      	mov	r4, r0
    fc3e:	291a      	cmp	r1, #26
    fc40:	d024      	beq.n	fc8c <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x56>
    fc42:	dc0e      	bgt.n	fc62 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x2c>
    fc44:	2916      	cmp	r1, #22
    fc46:	d22b      	bcs.n	fca0 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    fc48:	e8df f001 	tbb	[pc, r1]
    fc4c:	2a2a2a2a 	.word	0x2a2a2a2a
    fc50:	2a2a202a 	.word	0x2a2a202a
    fc54:	2a2a2a2a 	.word	0x2a2a2a2a
    fc58:	2a2a2a2a 	.word	0x2a2a2a2a
    fc5c:	202a2a2a 	.word	0x202a2a2a
    fc60:	2020      	.short	0x2020
    fc62:	292a      	cmp	r1, #42	; 0x2a
    fc64:	d01c      	beq.n	fca0 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    fc66:	dc0b      	bgt.n	fc80 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x4a>
    fc68:	f1a1 011e 	sub.w	r1, r1, #30
    fc6c:	290c      	cmp	r1, #12
    fc6e:	d217      	bcs.n	fca0 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    fc70:	e8df f001 	tbb	[pc, r1]
    fc74:	16161616 	.word	0x16161616
    fc78:	16161616 	.word	0x16161616
    fc7c:	0c161616 	.word	0x0c161616
    fc80:	393a      	subs	r1, #58	; 0x3a
    fc82:	2902      	cmp	r1, #2
    fc84:	d20c      	bcs.n	fca0 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    fc86:	e8df f001 	tbb	[pc, r1]
    fc8a:	010b      	.short	0x010b
    fc8c:	8820      	ldrh	r0, [r4, #0]
    fc8e:	f5b0 6f70 	cmp.w	r0, #3840	; 0xf00
    fc92:	d205      	bcs.n	fca0 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    fc94:	4669      	mov	r1, sp
    fc96:	f7fe f87f 	bl	dd98 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    fc9a:	b118      	cbz	r0, fca4 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6e>
    fc9c:	2002      	movs	r0, #2
    fc9e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    fca0:	2012      	movs	r0, #18
    fca2:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    fca4:	9901      	ldr	r1, [sp, #4]
    fca6:	4668      	mov	r0, sp
    fca8:	f891 2130 	ldrb.w	r2, [r1, #304]	; 0x130
    fcac:	f88d 2008 	strb.w	r2, [sp, #8]
    fcb0:	9a02      	ldr	r2, [sp, #8]
    fcb2:	9202      	str	r2, [sp, #8]
    fcb4:	f89d 2008 	ldrb.w	r2, [sp, #8]
    fcb8:	f501 7198 	add.w	r1, r1, #304	; 0x130
    fcbc:	b10a      	cbz	r2, fcc2 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x8c>
    fcbe:	200c      	movs	r0, #12
    fcc0:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    fcc2:	78a2      	ldrb	r2, [r4, #2]
    fcc4:	704a      	strb	r2, [r1, #1]
    fcc6:	22ff      	movs	r2, #255	; 0xff
    fcc8:	700a      	strb	r2, [r1, #0]
    fcca:	f7fe fc03 	bl	e4d4 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
    fcce:	4628      	mov	r0, r5
    fcd0:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000fcd2 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>:
    fcd2:	b510      	push	{r4, lr}
    fcd4:	4604      	mov	r4, r0
    fcd6:	f7f7 fd8f 	bl	77f8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2c8>
    fcda:	b108      	cbz	r0, fce0 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0xe>
    fcdc:	200c      	movs	r0, #12
    fcde:	bd10      	pop	{r4, pc}
    fce0:	7820      	ldrb	r0, [r4, #0]
    fce2:	b118      	cbz	r0, fcec <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    fce4:	2801      	cmp	r0, #1
    fce6:	d001      	beq.n	fcec <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    fce8:	2012      	movs	r0, #18
    fcea:	bd10      	pop	{r4, pc}
    fcec:	f7ff ff9c 	bl	fc28 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0xa6>
    fcf0:	1c61      	adds	r1, r4, #1
    fcf2:	f7f3 f817 	bl	2d24 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>
    fcf6:	b108      	cbz	r0, fcfc <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x2a>
    fcf8:	2000      	movs	r0, #0
    fcfa:	bd10      	pop	{r4, pc}
    fcfc:	2007      	movs	r0, #7
    fcfe:	bd10      	pop	{r4, pc}

0000fd00 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>:
    fd00:	b510      	push	{r4, lr}
    fd02:	f7f7 fd79 	bl	77f8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2c8>
    fd06:	b108      	cbz	r0, fd0c <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI+0xc>
    fd08:	200c      	movs	r0, #12
    fd0a:	bd10      	pop	{r4, pc}
    fd0c:	f7f3 f832 	bl	2d74 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>
    fd10:	2000      	movs	r0, #0
    fd12:	bd10      	pop	{r4, pc}

0000fd14 <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>:
    fd14:	b510      	push	{r4, lr}
    fd16:	460b      	mov	r3, r1
    fd18:	2201      	movs	r2, #1
    fd1a:	f100 0110 	add.w	r1, r0, #16
    fd1e:	f7fe f81d 	bl	dd5c <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    fd22:	2000      	movs	r0, #0
    fd24:	bd10      	pop	{r4, pc}

0000fd26 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>:
    fd26:	b510      	push	{r4, lr}
    fd28:	8800      	ldrh	r0, [r0, #0]
    fd2a:	2100      	movs	r1, #0
    fd2c:	f7fd fdb9 	bl	d8a2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    fd30:	b118      	cbz	r0, fd3a <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x14>
    fd32:	f890 12b0 	ldrb.w	r1, [r0, #688]	; 0x2b0
    fd36:	b111      	cbz	r1, fd3e <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x18>
    fd38:	e007      	b.n	fd4a <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x24>
    fd3a:	2002      	movs	r0, #2
    fd3c:	bd10      	pop	{r4, pc}
    fd3e:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    fd42:	2915      	cmp	r1, #21
    fd44:	d003      	beq.n	fd4e <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
    fd46:	2916      	cmp	r1, #22
    fd48:	d001      	beq.n	fd4e <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
    fd4a:	200c      	movs	r0, #12
    fd4c:	bd10      	pop	{r4, pc}
    fd4e:	2102      	movs	r1, #2
    fd50:	f880 12b0 	strb.w	r1, [r0, #688]	; 0x2b0
    fd54:	2000      	movs	r0, #0
    fd56:	bd10      	pop	{r4, pc}

0000fd58 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI>:
    fd58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fd5a:	4605      	mov	r5, r0
    fd5c:	8800      	ldrh	r0, [r0, #0]
    fd5e:	2100      	movs	r1, #0
    fd60:	f7fd fd9f 	bl	d8a2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    fd64:	0004      	movs	r4, r0
    fd66:	d003      	beq.n	fd70 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x18>
    fd68:	f894 02b0 	ldrb.w	r0, [r4, #688]	; 0x2b0
    fd6c:	b110      	cbz	r0, fd74 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x1c>
    fd6e:	e011      	b.n	fd94 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x3c>
    fd70:	2002      	movs	r0, #2
    fd72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fd74:	f894 009e 	ldrb.w	r0, [r4, #158]	; 0x9e
    fd78:	2815      	cmp	r0, #21
    fd7a:	d001      	beq.n	fd80 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x28>
    fd7c:	2816      	cmp	r0, #22
    fd7e:	d109      	bne.n	fd94 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x3c>
    fd80:	f894 02e4 	ldrb.w	r0, [r4, #740]	; 0x2e4
    fd84:	f88d 0000 	strb.w	r0, [sp]
    fd88:	9800      	ldr	r0, [sp, #0]
    fd8a:	9000      	str	r0, [sp, #0]
    fd8c:	f89d 0000 	ldrb.w	r0, [sp]
    fd90:	2601      	movs	r6, #1
    fd92:	b108      	cbz	r0, fd98 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x40>
    fd94:	200c      	movs	r0, #12
    fd96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fd98:	2210      	movs	r2, #16
    fd9a:	1ca9      	adds	r1, r5, #2
    fd9c:	f204 20b1 	addw	r0, r4, #689	; 0x2b1
    fda0:	f001 f850 	bl	10e44 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    fda4:	f884 62b0 	strb.w	r6, [r4, #688]	; 0x2b0
    fda8:	2000      	movs	r0, #0
    fdaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000fdac <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>:
    fdac:	b510      	push	{r4, lr}
    fdae:	2108      	movs	r1, #8
    fdb0:	f7f1 fbd2 	bl	1558 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    fdb4:	2000      	movs	r0, #0
    fdb6:	bd10      	pop	{r4, pc}

0000fdb8 <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>:
    fdb8:	b510      	push	{r4, lr}
    fdba:	4604      	mov	r4, r0
    fdbc:	f7f7 fb9c 	bl	74f8 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x160>
    fdc0:	f7fe ff2d 	bl	ec1e <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
    fdc4:	f7f3 f974 	bl	30b0 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>
    fdc8:	7020      	strb	r0, [r4, #0]
    fdca:	2000      	movs	r0, #0
    fdcc:	bd10      	pop	{r4, pc}

0000fdce <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>:
    fdce:	21fb      	movs	r1, #251	; 0xfb
    fdd0:	8001      	strh	r1, [r0, #0]
    fdd2:	f640 0248 	movw	r2, #2120	; 0x848
    fdd6:	8042      	strh	r2, [r0, #2]
    fdd8:	8081      	strh	r1, [r0, #4]
    fdda:	80c2      	strh	r2, [r0, #6]
    fddc:	2000      	movs	r0, #0
    fdde:	4770      	bx	lr

0000fde0 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>:
    fde0:	b51c      	push	{r2, r3, r4, lr}
    fde2:	8800      	ldrh	r0, [r0, #0]
    fde4:	4669      	mov	r1, sp
    fde6:	f7fd ffd7 	bl	dd98 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    fdea:	2800      	cmp	r0, #0
    fdec:	d10d      	bne.n	fe0a <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x2a>
    fdee:	f89d 0000 	ldrb.w	r0, [sp]
    fdf2:	9c01      	ldr	r4, [sp, #4]
    fdf4:	2801      	cmp	r0, #1
    fdf6:	f504 7498 	add.w	r4, r4, #304	; 0x130
    fdfa:	d103      	bne.n	fe04 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x24>
    fdfc:	9801      	ldr	r0, [sp, #4]
    fdfe:	f000 fcd6 	bl	107ae <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x28e>
    fe02:	b118      	cbz	r0, fe0c <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x2c>
    fe04:	7ce0      	ldrb	r0, [r4, #19]
    fe06:	b118      	cbz	r0, fe10 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x30>
    fe08:	203a      	movs	r0, #58	; 0x3a
    fe0a:	bd1c      	pop	{r2, r3, r4, pc}
    fe0c:	2002      	movs	r0, #2
    fe0e:	bd1c      	pop	{r2, r3, r4, pc}
    fe10:	2001      	movs	r0, #1
    fe12:	74e0      	strb	r0, [r4, #19]
    fe14:	2000      	movs	r0, #0
    fe16:	bd1c      	pop	{r2, r3, r4, pc}

0000fe18 <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>:
    fe18:	b510      	push	{r4, lr}
    fe1a:	4604      	mov	r4, r0
    fe1c:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    fe20:	f000 fd01 	bl	10826 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x306>
    fe24:	f7f3 f944 	bl	30b0 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>
    fe28:	7020      	strb	r0, [r4, #0]
    fe2a:	f000 fcbd 	bl	107a8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x288>
    fe2e:	f7f3 f93f 	bl	30b0 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>
    fe32:	7060      	strb	r0, [r4, #1]
    fe34:	2000      	movs	r0, #0
    fe36:	bd10      	pop	{r4, pc}

0000fe38 <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>:
    fe38:	2108      	movs	r1, #8
    fe3a:	7001      	strb	r1, [r0, #0]
    fe3c:	2000      	movs	r0, #0
    fe3e:	4770      	bx	lr

0000fe40 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>:
    fe40:	b510      	push	{r4, lr}
    fe42:	4604      	mov	r4, r0
    fe44:	f7f7 fcd8 	bl	77f8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2c8>
    fe48:	b108      	cbz	r0, fe4e <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0xe>
    fe4a:	200c      	movs	r0, #12
    fe4c:	bd10      	pop	{r4, pc}
    fe4e:	7820      	ldrb	r0, [r4, #0]
    fe50:	b108      	cbz	r0, fe56 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x16>
    fe52:	2801      	cmp	r0, #1
    fe54:	d107      	bne.n	fe66 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    fe56:	f7ff fee7 	bl	fc28 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0xa6>
    fe5a:	1c61      	adds	r1, r4, #1
    fe5c:	f7fd ff73 	bl	dd46 <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>
    fe60:	b108      	cbz	r0, fe66 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    fe62:	2000      	movs	r0, #0
    fe64:	bd10      	pop	{r4, pc}
    fe66:	2012      	movs	r0, #18
    fe68:	bd10      	pop	{r4, pc}

0000fe6a <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>:
    fe6a:	b51c      	push	{r2, r3, r4, lr}
    fe6c:	4604      	mov	r4, r0
    fe6e:	f7f7 fb43 	bl	74f8 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x160>
    fe72:	2000      	movs	r0, #0
    fe74:	f88d 0002 	strb.w	r0, [sp, #2]
    fe78:	2103      	movs	r1, #3
    fe7a:	f88d 1001 	strb.w	r1, [sp, #1]
    fe7e:	f814 1b01 	ldrb.w	r1, [r4], #1
    fe82:	f88d 1003 	strb.w	r1, [sp, #3]
    fe86:	f88d 0000 	strb.w	r0, [sp]
    fe8a:	4668      	mov	r0, sp
    fe8c:	9401      	str	r4, [sp, #4]
    fe8e:	f000 f9a2 	bl	101d6 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>
    fe92:	bd1c      	pop	{r2, r3, r4, pc}

0000fe94 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>:
    fe94:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    fe96:	4605      	mov	r5, r0
    fe98:	f7f7 fb2e 	bl	74f8 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x160>
    fe9c:	4606      	mov	r6, r0
    fe9e:	7828      	ldrb	r0, [r5, #0]
    fea0:	2400      	movs	r4, #0
    fea2:	b160      	cbz	r0, febe <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x2a>
    fea4:	f88d 4000 	strb.w	r4, [sp]
    fea8:	2001      	movs	r0, #1
    feaa:	f10d 0101 	add.w	r1, sp, #1
    feae:	f7f2 f943 	bl	2138 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    feb2:	b120      	cbz	r0, febe <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x2a>
    feb4:	4668      	mov	r0, sp
    feb6:	f000 f897 	bl	ffe8 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>
    feba:	2800      	cmp	r0, #0
    febc:	d112      	bne.n	fee4 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>
    febe:	f88d 400c 	strb.w	r4, [sp, #12]
    fec2:	4630      	mov	r0, r6
    fec4:	f7fe fea1 	bl	ec0a <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    fec8:	b118      	cbz	r0, fed2 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x3e>
    feca:	2080      	movs	r0, #128	; 0x80
    fecc:	f8ad 000d 	strh.w	r0, [sp, #13]
    fed0:	e001      	b.n	fed6 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x42>
    fed2:	f8ad 400d 	strh.w	r4, [sp, #13]
    fed6:	f88d 400f 	strb.w	r4, [sp, #15]
    feda:	7828      	ldrb	r0, [r5, #0]
    fedc:	2801      	cmp	r0, #1
    fede:	d003      	beq.n	fee8 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x54>
    fee0:	b138      	cbz	r0, fef2 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x5e>
    fee2:	2012      	movs	r0, #18
    fee4:	b004      	add	sp, #16
    fee6:	bd70      	pop	{r4, r5, r6, pc}
    fee8:	a903      	add	r1, sp, #12
    feea:	4630      	mov	r0, r6
    feec:	f7f7 fb20 	bl	7530 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>
    fef0:	e7f8      	b.n	fee4 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>
    fef2:	4630      	mov	r0, r6
    fef4:	f000 fc71 	bl	107da <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2ba>
    fef8:	e7f4      	b.n	fee4 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>

0000fefa <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>:
    fefa:	b530      	push	{r4, r5, lr}
    fefc:	b08b      	sub	sp, #44	; 0x2c
    fefe:	4604      	mov	r4, r0
    ff00:	f7f7 fafa 	bl	74f8 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x160>
    ff04:	4602      	mov	r2, r0
    ff06:	7920      	ldrb	r0, [r4, #4]
    ff08:	2804      	cmp	r0, #4
    ff0a:	d803      	bhi.n	ff14 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x1a>
    ff0c:	8860      	ldrh	r0, [r4, #2]
    ff0e:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
    ff12:	d902      	bls.n	ff1a <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x20>
    ff14:	2012      	movs	r0, #18
    ff16:	b00b      	add	sp, #44	; 0x2c
    ff18:	bd30      	pop	{r4, r5, pc}
    ff1a:	2500      	movs	r5, #0
    ff1c:	f88d 5004 	strb.w	r5, [sp, #4]
    ff20:	7921      	ldrb	r1, [r4, #4]
    ff22:	9500      	str	r5, [sp, #0]
    ff24:	f89d 0000 	ldrb.w	r0, [sp]
    ff28:	2905      	cmp	r1, #5
    ff2a:	f040 0010 	orr.w	r0, r0, #16
    ff2e:	f88d 0000 	strb.w	r0, [sp]
    ff32:	d254      	bcs.n	ffde <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0xe4>
    ff34:	e8df f001 	tbb	[pc, r1]
    ff38:	11050803 	.word	0x11050803
    ff3c:	000b      	.short	0x000b
    ff3e:	f040 0001 	orr.w	r0, r0, #1
    ff42:	f040 0002 	orr.w	r0, r0, #2
    ff46:	e006      	b.n	ff56 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x5c>
    ff48:	f040 0009 	orr.w	r0, r0, #9
    ff4c:	e001      	b.n	ff52 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x58>
    ff4e:	f040 0001 	orr.w	r0, r0, #1
    ff52:	f040 0004 	orr.w	r0, r0, #4
    ff56:	f88d 0000 	strb.w	r0, [sp]
    ff5a:	f8bd 0000 	ldrh.w	r0, [sp]
    ff5e:	9000      	str	r0, [sp, #0]
    ff60:	f8bd 0000 	ldrh.w	r0, [sp]
    ff64:	f8ad 0005 	strh.w	r0, [sp, #5]
    ff68:	8821      	ldrh	r1, [r4, #0]
    ff6a:	f8dd 0006 	ldr.w	r0, [sp, #6]
    ff6e:	f361 201f 	bfi	r0, r1, #8, #24
    ff72:	f8cd 0006 	str.w	r0, [sp, #6]
    ff76:	8861      	ldrh	r1, [r4, #2]
    ff78:	f8dd 0009 	ldr.w	r0, [sp, #9]
    ff7c:	f361 201f 	bfi	r0, r1, #8, #24
    ff80:	f8cd 0009 	str.w	r0, [sp, #9]
    ff84:	7b60      	ldrb	r0, [r4, #13]
    ff86:	f88d 000d 	strb.w	r0, [sp, #13]
    ff8a:	7960      	ldrb	r0, [r4, #5]
    ff8c:	f88d 000e 	strb.w	r0, [sp, #14]
    ff90:	79a0      	ldrb	r0, [r4, #6]
    ff92:	f88d 000f 	strb.w	r0, [sp, #15]
    ff96:	f8d4 0007 	ldr.w	r0, [r4, #7]
    ff9a:	9004      	str	r0, [sp, #16]
    ff9c:	f8b4 000b 	ldrh.w	r0, [r4, #11]
    ffa0:	f8ad 0014 	strh.w	r0, [sp, #20]
    ffa4:	7ba0      	ldrb	r0, [r4, #14]
    ffa6:	f88d 0016 	strb.w	r0, [sp, #22]
    ffaa:	207f      	movs	r0, #127	; 0x7f
    ffac:	f88d 0017 	strb.w	r0, [sp, #23]
    ffb0:	2001      	movs	r0, #1
    ffb2:	f88d 0018 	strb.w	r0, [sp, #24]
    ffb6:	f88d 5019 	strb.w	r5, [sp, #25]
    ffba:	f88d 001a 	strb.w	r0, [sp, #26]
    ffbe:	f88d 501b 	strb.w	r5, [sp, #27]
    ffc2:	4610      	mov	r0, r2
    ffc4:	f7fe fe41 	bl	ec4a <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>
    ffc8:	f88d 001c 	strb.w	r0, [sp, #28]
    ffcc:	f88d 501d 	strb.w	r5, [sp, #29]
    ffd0:	f88d 501e 	strb.w	r5, [sp, #30]
    ffd4:	a909      	add	r1, sp, #36	; 0x24
    ffd6:	a801      	add	r0, sp, #4
    ffd8:	f7f7 f91a 	bl	7210 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>
    ffdc:	e79b      	b.n	ff16 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x1c>
    ffde:	f241 215b 	movw	r1, #4699	; 0x125b
    ffe2:	2039      	movs	r0, #57	; 0x39
    ffe4:	f7f1 fa0a 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000ffe8 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>:
    ffe8:	b570      	push	{r4, r5, r6, lr}
    ffea:	4604      	mov	r4, r0
    ffec:	7800      	ldrb	r0, [r0, #0]
    ffee:	2101      	movs	r1, #1
    fff0:	f7fd fc57 	bl	d8a2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    fff4:	0005      	movs	r5, r0
    fff6:	d007      	beq.n	10008 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x20>
    fff8:	f7fe ffe4 	bl	efc4 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    fffc:	b160      	cbz	r0, 10018 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x30>
    fffe:	4628      	mov	r0, r5
   10000:	f7fe fe09 	bl	ec16 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
   10004:	b110      	cbz	r0, 1000c <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x24>
   10006:	e005      	b.n	10014 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x2c>
   10008:	2042      	movs	r0, #66	; 0x42
   1000a:	bd70      	pop	{r4, r5, r6, pc}
   1000c:	4628      	mov	r0, r5
   1000e:	f7fe fdf8 	bl	ec02 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
   10012:	b108      	cbz	r0, 10018 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x30>
   10014:	200c      	movs	r0, #12
   10016:	bd70      	pop	{r4, r5, r6, pc}
   10018:	1c61      	adds	r1, r4, #1
   1001a:	4628      	mov	r0, r5
   1001c:	f7fe fe0d 	bl	ec3a <sym_UDZCFPCYSG5E2MUJ3CH3H5GF4YJLF3Y6KNH3ZRQ>
   10020:	2000      	movs	r0, #0
   10022:	bd70      	pop	{r4, r5, r6, pc}

00010024 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>:
   10024:	b50e      	push	{r1, r2, r3, lr}
   10026:	8882      	ldrh	r2, [r0, #4]
   10028:	f244 2390 	movw	r3, #17040	; 0x4290
   1002c:	429a      	cmp	r2, r3
   1002e:	d901      	bls.n	10034 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x10>
   10030:	2012      	movs	r0, #18
   10032:	bd0e      	pop	{r1, r2, r3, pc}
   10034:	f640 0348 	movw	r3, #2120	; 0x848
   10038:	429a      	cmp	r2, r3
   1003a:	d300      	bcc.n	1003e <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x1a>
   1003c:	461a      	mov	r2, r3
   1003e:	8803      	ldrh	r3, [r0, #0]
   10040:	f8ad 3000 	strh.w	r3, [sp]
   10044:	8843      	ldrh	r3, [r0, #2]
   10046:	f8ad 3002 	strh.w	r3, [sp, #2]
   1004a:	f8ad 2004 	strh.w	r2, [sp, #4]
   1004e:	8843      	ldrh	r3, [r0, #2]
   10050:	f8ad 3006 	strh.w	r3, [sp, #6]
   10054:	f8ad 2008 	strh.w	r2, [sp, #8]
   10058:	8800      	ldrh	r0, [r0, #0]
   1005a:	8008      	strh	r0, [r1, #0]
   1005c:	4668      	mov	r0, sp
   1005e:	f7f7 fb47 	bl	76f0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1c0>
   10062:	bd0e      	pop	{r1, r2, r3, pc}

00010064 <sym_QUXPDBBA3LF6URTUQCXVFN4UTAQY2K4DGZD5OMY>:
   10064:	b510      	push	{r4, lr}
   10066:	4604      	mov	r4, r0
   10068:	f7f7 fa46 	bl	74f8 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x160>
   1006c:	7861      	ldrb	r1, [r4, #1]
   1006e:	f3c1 0240 	ubfx	r2, r1, #1, #1
   10072:	f001 0101 	and.w	r1, r1, #1
   10076:	f7fe fddc 	bl	ec32 <sym_MQQDWQQHBS7ZPZWBMOTGVNNHVXRAEPOMLYRTE3A>
   1007a:	2000      	movs	r0, #0
   1007c:	bd10      	pop	{r4, pc}

0001007e <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>:
   1007e:	b53e      	push	{r1, r2, r3, r4, r5, lr}
   10080:	4604      	mov	r4, r0
   10082:	f10d 0007 	add.w	r0, sp, #7
   10086:	9000      	str	r0, [sp, #0]
   10088:	7922      	ldrb	r2, [r4, #4]
   1008a:	78e1      	ldrb	r1, [r4, #3]
   1008c:	78a0      	ldrb	r0, [r4, #2]
   1008e:	f10d 0306 	add.w	r3, sp, #6
   10092:	f000 fbd0 	bl	10836 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x316>
   10096:	2800      	cmp	r0, #0
   10098:	d109      	bne.n	100ae <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI+0x30>
   1009a:	8820      	ldrh	r0, [r4, #0]
   1009c:	f8ad 0004 	strh.w	r0, [sp, #4]
   100a0:	f8b4 0005 	ldrh.w	r0, [r4, #5]
   100a4:	f8ad 0008 	strh.w	r0, [sp, #8]
   100a8:	a801      	add	r0, sp, #4
   100aa:	f000 f94f 	bl	1034c <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>
   100ae:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

000100b0 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>:
   100b0:	b510      	push	{r4, lr}
   100b2:	4604      	mov	r4, r0
   100b4:	2001      	movs	r0, #1
   100b6:	f000 fa55 	bl	10564 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x44>
   100ba:	b128      	cbz	r0, 100c8 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA+0x18>
   100bc:	4621      	mov	r1, r4
   100be:	2001      	movs	r0, #1
   100c0:	f7f2 f852 	bl	2168 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
   100c4:	2000      	movs	r0, #0
   100c6:	bd10      	pop	{r4, pc}
   100c8:	200c      	movs	r0, #12
   100ca:	bd10      	pop	{r4, pc}

000100cc <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>:
   100cc:	b51c      	push	{r2, r3, r4, lr}
   100ce:	4604      	mov	r4, r0
   100d0:	f7f7 fa12 	bl	74f8 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x160>
   100d4:	2000      	movs	r0, #0
   100d6:	f88d 0000 	strb.w	r0, [sp]
   100da:	f88d 0002 	strb.w	r0, [sp, #2]
   100de:	2003      	movs	r0, #3
   100e0:	f88d 0001 	strb.w	r0, [sp, #1]
   100e4:	f814 0b01 	ldrb.w	r0, [r4], #1
   100e8:	f88d 0003 	strb.w	r0, [sp, #3]
   100ec:	4668      	mov	r0, sp
   100ee:	9401      	str	r4, [sp, #4]
   100f0:	f000 f8da 	bl	102a8 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>
   100f4:	bd1c      	pop	{r2, r3, r4, pc}

000100f6 <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>:
   100f6:	b51c      	push	{r2, r3, r4, lr}
   100f8:	8801      	ldrh	r1, [r0, #0]
   100fa:	f8ad 1000 	strh.w	r1, [sp]
   100fe:	8841      	ldrh	r1, [r0, #2]
   10100:	f8ad 1002 	strh.w	r1, [sp, #2]
   10104:	8801      	ldrh	r1, [r0, #0]
   10106:	f8ad 1004 	strh.w	r1, [sp, #4]
   1010a:	8840      	ldrh	r0, [r0, #2]
   1010c:	f8ad 0006 	strh.w	r0, [sp, #6]
   10110:	4668      	mov	r0, sp
   10112:	f7f7 fb8d 	bl	7830 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x300>
   10116:	bd1c      	pop	{r2, r3, r4, pc}

00010118 <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>:
   10118:	b510      	push	{r4, lr}
   1011a:	f7f2 f849 	bl	21b0 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>
   1011e:	2000      	movs	r0, #0
   10120:	bd10      	pop	{r4, pc}

00010122 <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY>:
   10122:	b510      	push	{r4, lr}
   10124:	460c      	mov	r4, r1
   10126:	2100      	movs	r1, #0
   10128:	f7fd fbbb 	bl	d8a2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   1012c:	b118      	cbz	r0, 10136 <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY+0x14>
   1012e:	2c02      	cmp	r4, #2
   10130:	d903      	bls.n	1013a <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY+0x18>
   10132:	2012      	movs	r0, #18
   10134:	bd10      	pop	{r4, pc}
   10136:	2002      	movs	r0, #2
   10138:	bd10      	pop	{r4, pc}
   1013a:	f014 0101 	ands.w	r1, r4, #1
   1013e:	f880 122d 	strb.w	r1, [r0, #557]	; 0x22d
   10142:	f3c4 0240 	ubfx	r2, r4, #1, #1
   10146:	f880 222c 	strb.w	r2, [r0, #556]	; 0x22c
   1014a:	d004      	beq.n	10156 <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY+0x34>
   1014c:	f890 122a 	ldrb.w	r1, [r0, #554]	; 0x22a
   10150:	b109      	cbz	r1, 10156 <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY+0x34>
   10152:	f7fe ff3a 	bl	efca <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y>
   10156:	2000      	movs	r0, #0
   10158:	bd10      	pop	{r4, pc}

0001015a <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>:
   1015a:	b51c      	push	{r2, r3, r4, lr}
   1015c:	460c      	mov	r4, r1
   1015e:	4669      	mov	r1, sp
   10160:	f7fd fe1a 	bl	dd98 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   10164:	2800      	cmp	r0, #0
   10166:	d105      	bne.n	10174 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x1a>
   10168:	2100      	movs	r1, #0
   1016a:	4622      	mov	r2, r4
   1016c:	9801      	ldr	r0, [sp, #4]
   1016e:	f000 fac5 	bl	106fc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1dc>
   10172:	2000      	movs	r0, #0
   10174:	bd1c      	pop	{r2, r3, r4, pc}

00010176 <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI>:
   10176:	b510      	push	{r4, lr}
   10178:	4604      	mov	r4, r0
   1017a:	7800      	ldrb	r0, [r0, #0]
   1017c:	28ff      	cmp	r0, #255	; 0xff
   1017e:	d009      	beq.n	10194 <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI+0x1e>
   10180:	2101      	movs	r1, #1
   10182:	f7fd fb8e 	bl	d8a2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   10186:	b118      	cbz	r0, 10190 <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI+0x1a>
   10188:	f8b4 1001 	ldrh.w	r1, [r4, #1]
   1018c:	8441      	strh	r1, [r0, #34]	; 0x22
   1018e:	e005      	b.n	1019c <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI+0x26>
   10190:	2042      	movs	r0, #66	; 0x42
   10192:	bd10      	pop	{r4, pc}
   10194:	f8b4 0001 	ldrh.w	r0, [r4, #1]
   10198:	f7f4 fcbc 	bl	4b14 <sym_YZMCMF2VDK5EZ5GH5K4G77V4XY7KHBJNPGELPVQ>
   1019c:	2000      	movs	r0, #0
   1019e:	bd10      	pop	{r4, pc}

000101a0 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>:
   101a0:	b510      	push	{r4, lr}
   101a2:	4604      	mov	r4, r0
   101a4:	f7f7 fb84 	bl	78b0 <sym_HG37ZAHWDO2P65KBJXRLV5PVSG5TCUWPMKZOZLQ>
   101a8:	b118      	cbz	r0, 101b2 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ+0x12>
   101aa:	2000      	movs	r0, #0
   101ac:	f000 f9da 	bl	10564 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x44>
   101b0:	b128      	cbz	r0, 101be <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ+0x1e>
   101b2:	4621      	mov	r1, r4
   101b4:	2000      	movs	r0, #0
   101b6:	f7f1 ffd7 	bl	2168 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
   101ba:	2000      	movs	r0, #0
   101bc:	bd10      	pop	{r4, pc}
   101be:	200c      	movs	r0, #12
   101c0:	bd10      	pop	{r4, pc}

000101c2 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>:
   101c2:	b510      	push	{r4, lr}
   101c4:	7800      	ldrb	r0, [r0, #0]
   101c6:	b100      	cbz	r0, 101ca <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ+0x8>
   101c8:	2001      	movs	r0, #1
   101ca:	f7f4 fccd 	bl	4b68 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI>
   101ce:	2000      	movs	r0, #0
   101d0:	bd10      	pop	{r4, pc}

000101d2 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>:
   101d2:	f7f7 ba8d 	b.w	76f0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1c0>

000101d6 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>:
   101d6:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
   101da:	4606      	mov	r6, r0
   101dc:	7845      	ldrb	r5, [r0, #1]
   101de:	7800      	ldrb	r0, [r0, #0]
   101e0:	2101      	movs	r1, #1
   101e2:	f7fd fb5e 	bl	d8a2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   101e6:	0004      	movs	r4, r0
   101e8:	d01e      	beq.n	10228 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x52>
   101ea:	f7fe fcdd 	bl	eba8 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>
   101ee:	78f1      	ldrb	r1, [r6, #3]
   101f0:	4281      	cmp	r1, r0
   101f2:	d800      	bhi.n	101f6 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x20>
   101f4:	4608      	mov	r0, r1
   101f6:	4607      	mov	r7, r0
   101f8:	2d04      	cmp	r5, #4
   101fa:	d018      	beq.n	1022e <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x58>
   101fc:	6b60      	ldr	r0, [r4, #52]	; 0x34
   101fe:	f7fd fc9f 	bl	db40 <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>
   10202:	4438      	add	r0, r7
   10204:	b281      	uxth	r1, r0
   10206:	4620      	mov	r0, r4
   10208:	2201      	movs	r2, #1
   1020a:	f000 f9bd 	bl	10588 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x68>
   1020e:	2800      	cmp	r0, #0
   10210:	d10b      	bne.n	1022a <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
   10212:	2d03      	cmp	r5, #3
   10214:	d000      	beq.n	10218 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x42>
   10216:	b1df      	cbz	r7, 10250 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
   10218:	4620      	mov	r0, r4
   1021a:	f7fe fcfa 	bl	ec12 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   1021e:	7871      	ldrb	r1, [r6, #1]
   10220:	2903      	cmp	r1, #3
   10222:	d010      	beq.n	10246 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x70>
   10224:	b9a0      	cbnz	r0, 10250 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
   10226:	e004      	b.n	10232 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x5c>
   10228:	2042      	movs	r0, #66	; 0x42
   1022a:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
   1022e:	b97f      	cbnz	r7, 10250 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
   10230:	e7f2      	b.n	10218 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x42>
   10232:	2904      	cmp	r1, #4
   10234:	d107      	bne.n	10246 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x70>
   10236:	4620      	mov	r0, r4
   10238:	f7fe fec4 	bl	efc4 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   1023c:	b140      	cbz	r0, 10250 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
   1023e:	6b60      	ldr	r0, [r4, #52]	; 0x34
   10240:	f7fd fc45 	bl	dace <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY>
   10244:	b120      	cbz	r0, 10250 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
   10246:	2d01      	cmp	r5, #1
   10248:	d004      	beq.n	10254 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7e>
   1024a:	2d03      	cmp	r5, #3
   1024c:	d002      	beq.n	10254 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7e>
   1024e:	e00e      	b.n	1026e <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x98>
   10250:	2012      	movs	r0, #18
   10252:	e7ea      	b.n	1022a <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
   10254:	4620      	mov	r0, r4
   10256:	f7fe fcdc 	bl	ec12 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   1025a:	b108      	cbz	r0, 10260 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x8a>
   1025c:	2200      	movs	r2, #0
   1025e:	e002      	b.n	10266 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x90>
   10260:	2d01      	cmp	r5, #1
   10262:	d013      	beq.n	1028c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xb6>
   10264:	2201      	movs	r2, #1
   10266:	4668      	mov	r0, sp
   10268:	6b61      	ldr	r1, [r4, #52]	; 0x34
   1026a:	f7fd fbcc 	bl	da06 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
   1026e:	2d04      	cmp	r5, #4
   10270:	d018      	beq.n	102a4 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xce>
   10272:	6872      	ldr	r2, [r6, #4]
   10274:	463b      	mov	r3, r7
   10276:	2101      	movs	r1, #1
   10278:	6b60      	ldr	r0, [r4, #52]	; 0x34
   1027a:	f7fd fbf8 	bl	da6e <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>
   1027e:	b138      	cbz	r0, 10290 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xba>
   10280:	7870      	ldrb	r0, [r6, #1]
   10282:	2802      	cmp	r0, #2
   10284:	d006      	beq.n	10294 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xbe>
   10286:	2803      	cmp	r0, #3
   10288:	d004      	beq.n	10294 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xbe>
   1028a:	e00b      	b.n	102a4 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xce>
   1028c:	2202      	movs	r2, #2
   1028e:	e7ea      	b.n	10266 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x90>
   10290:	2007      	movs	r0, #7
   10292:	e7ca      	b.n	1022a <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
   10294:	6b60      	ldr	r0, [r4, #52]	; 0x34
   10296:	f7fd fc53 	bl	db40 <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>
   1029a:	4602      	mov	r2, r0
   1029c:	2101      	movs	r1, #1
   1029e:	6b60      	ldr	r0, [r4, #52]	; 0x34
   102a0:	f7fd fc2b 	bl	dafa <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
   102a4:	2000      	movs	r0, #0
   102a6:	e7c0      	b.n	1022a <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>

000102a8 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>:
   102a8:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
   102ac:	4607      	mov	r7, r0
   102ae:	7845      	ldrb	r5, [r0, #1]
   102b0:	78c6      	ldrb	r6, [r0, #3]
   102b2:	7800      	ldrb	r0, [r0, #0]
   102b4:	2101      	movs	r1, #1
   102b6:	f7fd faf4 	bl	d8a2 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   102ba:	0004      	movs	r4, r0
   102bc:	d003      	beq.n	102c6 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x1e>
   102be:	f7fe fcaa 	bl	ec16 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
   102c2:	b118      	cbz	r0, 102cc <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x24>
   102c4:	e003      	b.n	102ce <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x26>
   102c6:	2042      	movs	r0, #66	; 0x42
   102c8:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
   102cc:	2600      	movs	r6, #0
   102ce:	6b60      	ldr	r0, [r4, #52]	; 0x34
   102d0:	f7fd fc3a 	bl	db48 <sym_27RZBWKBTESKUPVNN3E7RHYQU6UH4RT372SK2WA>
   102d4:	4430      	add	r0, r6
   102d6:	b281      	uxth	r1, r0
   102d8:	4688      	mov	r8, r1
   102da:	4620      	mov	r0, r4
   102dc:	2201      	movs	r2, #1
   102de:	f000 f953 	bl	10588 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x68>
   102e2:	2800      	cmp	r0, #0
   102e4:	d1f0      	bne.n	102c8 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
   102e6:	2d04      	cmp	r5, #4
   102e8:	d008      	beq.n	102fc <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x54>
   102ea:	2d03      	cmp	r5, #3
   102ec:	d00a      	beq.n	10304 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x5c>
   102ee:	b12e      	cbz	r6, 102fc <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x54>
   102f0:	4620      	mov	r0, r4
   102f2:	f7fe fe67 	bl	efc4 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   102f6:	b118      	cbz	r0, 10300 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x58>
   102f8:	200c      	movs	r0, #12
   102fa:	e7e5      	b.n	102c8 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
   102fc:	2012      	movs	r0, #18
   102fe:	e7e3      	b.n	102c8 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
   10300:	2d01      	cmp	r5, #1
   10302:	d10c      	bne.n	1031e <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x76>
   10304:	4620      	mov	r0, r4
   10306:	f7fe fc84 	bl	ec12 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   1030a:	b108      	cbz	r0, 10310 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x68>
   1030c:	2204      	movs	r2, #4
   1030e:	e002      	b.n	10316 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x6e>
   10310:	2d01      	cmp	r5, #1
   10312:	d010      	beq.n	10336 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x8e>
   10314:	2205      	movs	r2, #5
   10316:	4668      	mov	r0, sp
   10318:	6b61      	ldr	r1, [r4, #52]	; 0x34
   1031a:	f7fd fb74 	bl	da06 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
   1031e:	687a      	ldr	r2, [r7, #4]
   10320:	4633      	mov	r3, r6
   10322:	2100      	movs	r1, #0
   10324:	6b60      	ldr	r0, [r4, #52]	; 0x34
   10326:	f7fd fba2 	bl	da6e <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>
   1032a:	b130      	cbz	r0, 1033a <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x92>
   1032c:	2d02      	cmp	r5, #2
   1032e:	d006      	beq.n	1033e <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x96>
   10330:	2d03      	cmp	r5, #3
   10332:	d004      	beq.n	1033e <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x96>
   10334:	e008      	b.n	10348 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0xa0>
   10336:	2206      	movs	r2, #6
   10338:	e7ed      	b.n	10316 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x6e>
   1033a:	2007      	movs	r0, #7
   1033c:	e7c4      	b.n	102c8 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
   1033e:	4642      	mov	r2, r8
   10340:	2100      	movs	r1, #0
   10342:	6b60      	ldr	r0, [r4, #52]	; 0x34
   10344:	f7fd fbd9 	bl	dafa <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
   10348:	2000      	movs	r0, #0
   1034a:	e7bd      	b.n	102c8 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>

0001034c <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>:
   1034c:	b510      	push	{r4, lr}
   1034e:	4604      	mov	r4, r0
   10350:	8880      	ldrh	r0, [r0, #4]
   10352:	b128      	cbz	r0, 10360 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
   10354:	2801      	cmp	r0, #1
   10356:	d003      	beq.n	10360 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
   10358:	2802      	cmp	r0, #2
   1035a:	d001      	beq.n	10360 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
   1035c:	2012      	movs	r0, #18
   1035e:	bd10      	pop	{r4, pc}
   10360:	78e0      	ldrb	r0, [r4, #3]
   10362:	f000 f9a8 	bl	106b6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x196>
   10366:	b148      	cbz	r0, 1037c <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
   10368:	78a0      	ldrb	r0, [r4, #2]
   1036a:	f000 f9a4 	bl	106b6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x196>
   1036e:	b128      	cbz	r0, 1037c <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
   10370:	4620      	mov	r0, r4
   10372:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10376:	2101      	movs	r1, #1
   10378:	f000 b862 	b.w	10440 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
   1037c:	2011      	movs	r0, #17
   1037e:	bd10      	pop	{r4, pc}

00010380 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>:
   10380:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   10382:	460c      	mov	r4, r1
   10384:	4605      	mov	r5, r0
   10386:	8800      	ldrh	r0, [r0, #0]
   10388:	4669      	mov	r1, sp
   1038a:	f7fd fd05 	bl	dd98 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   1038e:	2800      	cmp	r0, #0
   10390:	d106      	bne.n	103a0 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y+0x20>
   10392:	9801      	ldr	r0, [sp, #4]
   10394:	8829      	ldrh	r1, [r5, #0]
   10396:	8021      	strh	r1, [r4, #0]
   10398:	f8b0 00c8 	ldrh.w	r0, [r0, #200]	; 0xc8
   1039c:	8060      	strh	r0, [r4, #2]
   1039e:	2000      	movs	r0, #0
   103a0:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

000103a2 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>:
   103a2:	b510      	push	{r4, lr}
   103a4:	4604      	mov	r4, r0
   103a6:	4601      	mov	r1, r0
   103a8:	2000      	movs	r0, #0
   103aa:	f7f1 fec5 	bl	2138 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
   103ae:	b910      	cbnz	r0, 103b6 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ+0x14>
   103b0:	2000      	movs	r0, #0
   103b2:	6020      	str	r0, [r4, #0]
   103b4:	80a0      	strh	r0, [r4, #4]
   103b6:	2000      	movs	r0, #0
   103b8:	bd10      	pop	{r4, pc}

000103ba <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>:
   103ba:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   103bc:	460c      	mov	r4, r1
   103be:	4605      	mov	r5, r0
   103c0:	8800      	ldrh	r0, [r0, #0]
   103c2:	4669      	mov	r1, sp
   103c4:	f7fd fce8 	bl	dd98 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   103c8:	b108      	cbz	r0, 103ce <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x14>
   103ca:	2002      	movs	r0, #2
   103cc:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   103ce:	78a8      	ldrb	r0, [r5, #2]
   103d0:	b158      	cbz	r0, 103ea <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x30>
   103d2:	f000 f9e9 	bl	107a8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x288>
   103d6:	70a0      	strb	r0, [r4, #2]
   103d8:	8828      	ldrh	r0, [r5, #0]
   103da:	8020      	strh	r0, [r4, #0]
   103dc:	f994 0002 	ldrsb.w	r0, [r4, #2]
   103e0:	f7f2 fe66 	bl	30b0 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>
   103e4:	70a0      	strb	r0, [r4, #2]
   103e6:	2000      	movs	r0, #0
   103e8:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   103ea:	9801      	ldr	r0, [sp, #4]
   103ec:	f890 006e 	ldrb.w	r0, [r0, #110]	; 0x6e
   103f0:	e7f1      	b.n	103d6 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x1c>

000103f2 <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>:
   103f2:	b510      	push	{r4, lr}
   103f4:	f7f7 fa62 	bl	78bc <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
   103f8:	2000      	movs	r0, #0
   103fa:	bd10      	pop	{r4, pc}

000103fc <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>:
   103fc:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
   10400:	4604      	mov	r4, r0
   10402:	8840      	ldrh	r0, [r0, #2]
   10404:	460d      	mov	r5, r1
   10406:	b1b8      	cbz	r0, 10438 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x3c>
   10408:	8820      	ldrh	r0, [r4, #0]
   1040a:	4669      	mov	r1, sp
   1040c:	f7fd fcc4 	bl	dd98 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   10410:	2800      	cmp	r0, #0
   10412:	d10f      	bne.n	10434 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x38>
   10414:	8820      	ldrh	r0, [r4, #0]
   10416:	8028      	strh	r0, [r5, #0]
   10418:	9e01      	ldr	r6, [sp, #4]
   1041a:	f106 0510 	add.w	r5, r6, #16
   1041e:	3680      	adds	r6, #128	; 0x80
   10420:	682f      	ldr	r7, [r5, #0]
   10422:	8862      	ldrh	r2, [r4, #2]
   10424:	4639      	mov	r1, r7
   10426:	4630      	mov	r0, r6
   10428:	f7fd fde7 	bl	dffa <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>
   1042c:	6828      	ldr	r0, [r5, #0]
   1042e:	42b8      	cmp	r0, r7
   10430:	d1f6      	bne.n	10420 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x24>
   10432:	2000      	movs	r0, #0
   10434:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
   10438:	2012      	movs	r0, #18
   1043a:	e7fb      	b.n	10434 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x38>

0001043c <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>:
   1043c:	f000 b863 	b.w	10506 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>

00010440 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>:
   10440:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10444:	b086      	sub	sp, #24
   10446:	4689      	mov	r9, r1
   10448:	4607      	mov	r7, r0
   1044a:	8800      	ldrh	r0, [r0, #0]
   1044c:	a901      	add	r1, sp, #4
   1044e:	f7fd fca3 	bl	dd98 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   10452:	2800      	cmp	r0, #0
   10454:	d136      	bne.n	104c4 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x84>
   10456:	9802      	ldr	r0, [sp, #8]
   10458:	4601      	mov	r1, r0
   1045a:	4688      	mov	r8, r1
   1045c:	f890 1194 	ldrb.w	r1, [r0, #404]	; 0x194
   10460:	f500 7498 	add.w	r4, r0, #304	; 0x130
   10464:	f88d 1000 	strb.w	r1, [sp]
   10468:	9900      	ldr	r1, [sp, #0]
   1046a:	9100      	str	r1, [sp, #0]
   1046c:	f89d 1000 	ldrb.w	r1, [sp]
   10470:	3080      	adds	r0, #128	; 0x80
   10472:	b109      	cbz	r1, 10478 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x38>
   10474:	2601      	movs	r6, #1
   10476:	e000      	b.n	1047a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x3a>
   10478:	2600      	movs	r6, #0
   1047a:	7f81      	ldrb	r1, [r0, #30]
   1047c:	2922      	cmp	r1, #34	; 0x22
   1047e:	d100      	bne.n	10482 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x42>
   10480:	b13e      	cbz	r6, 10492 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x52>
   10482:	2500      	movs	r5, #0
   10484:	306c      	adds	r0, #108	; 0x6c
   10486:	2108      	movs	r1, #8
   10488:	4682      	mov	sl, r0
   1048a:	f7ff fbc4 	bl	fc16 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x94>
   1048e:	b110      	cbz	r0, 10496 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x56>
   10490:	e007      	b.n	104a2 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x62>
   10492:	2501      	movs	r5, #1
   10494:	e7f6      	b.n	10484 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x44>
   10496:	210b      	movs	r1, #11
   10498:	4650      	mov	r0, sl
   1049a:	f7ff fbbc 	bl	fc16 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x94>
   1049e:	b900      	cbnz	r0, 104a2 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x62>
   104a0:	b17d      	cbz	r5, 104c2 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x82>
   104a2:	a804      	add	r0, sp, #16
   104a4:	9000      	str	r0, [sp, #0]
   104a6:	f89d 0004 	ldrb.w	r0, [sp, #4]
   104aa:	ab03      	add	r3, sp, #12
   104ac:	463a      	mov	r2, r7
   104ae:	4641      	mov	r1, r8
   104b0:	f000 f95a 	bl	10768 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x248>
   104b4:	0005      	movs	r5, r0
   104b6:	d105      	bne.n	104c4 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x84>
   104b8:	340c      	adds	r4, #12
   104ba:	20ff      	movs	r0, #255	; 0xff
   104bc:	7060      	strb	r0, [r4, #1]
   104be:	b936      	cbnz	r6, 104ce <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8e>
   104c0:	e003      	b.n	104ca <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8a>
   104c2:	201a      	movs	r0, #26
   104c4:	b006      	add	sp, #24
   104c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   104ca:	7820      	ldrb	r0, [r4, #0]
   104cc:	b108      	cbz	r0, 104d2 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x92>
   104ce:	253a      	movs	r5, #58	; 0x3a
   104d0:	e012      	b.n	104f8 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xb8>
   104d2:	f884 9000 	strb.w	r9, [r4]
   104d6:	f89d 000c 	ldrb.w	r0, [sp, #12]
   104da:	70a0      	strb	r0, [r4, #2]
   104dc:	f89d 1010 	ldrb.w	r1, [sp, #16]
   104e0:	70e1      	strb	r1, [r4, #3]
   104e2:	f88d 0000 	strb.w	r0, [sp]
   104e6:	f88d 1001 	strb.w	r1, [sp, #1]
   104ea:	88b8      	ldrh	r0, [r7, #4]
   104ec:	f8ad 0002 	strh.w	r0, [sp, #2]
   104f0:	4669      	mov	r1, sp
   104f2:	4640      	mov	r0, r8
   104f4:	f7fd fd20 	bl	df38 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
   104f8:	2000      	movs	r0, #0
   104fa:	7060      	strb	r0, [r4, #1]
   104fc:	4628      	mov	r0, r5
   104fe:	e7e1      	b.n	104c4 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x84>

00010500 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>:
   10500:	2008      	movs	r0, #8
   10502:	f7f7 ba43 	b.w	798c <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>

00010506 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>:
   10506:	b510      	push	{r4, lr}
   10508:	f7fd fba9 	bl	dc5e <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
   1050c:	f7f2 fbb0 	bl	2c70 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
   10510:	f7f7 fa5e 	bl	79d0 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>
   10514:	f7fe f813 	bl	e53e <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>
   10518:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1051c:	f7f6 bfcc 	b.w	74b8 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x120>

00010520 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA>:
   10520:	f7f5 b852 	b.w	55c8 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI>
   10524:	f44f 71a4 	mov.w	r1, #328	; 0x148
   10528:	4288      	cmp	r0, r1
   1052a:	d303      	bcc.n	10534 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x14>
   1052c:	f640 0148 	movw	r1, #2120	; 0x848
   10530:	4288      	cmp	r0, r1
   10532:	d300      	bcc.n	10536 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x16>
   10534:	4608      	mov	r0, r1
   10536:	b280      	uxth	r0, r0
   10538:	4770      	bx	lr
   1053a:	07c1      	lsls	r1, r0, #31
   1053c:	d001      	beq.n	10542 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x22>
   1053e:	2001      	movs	r0, #1
   10540:	4770      	bx	lr
   10542:	0780      	lsls	r0, r0, #30
   10544:	d501      	bpl.n	1054a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2a>
   10546:	2002      	movs	r0, #2
   10548:	4770      	bx	lr
   1054a:	2000      	movs	r0, #0
   1054c:	4770      	bx	lr
   1054e:	b510      	push	{r4, lr}
   10550:	2801      	cmp	r0, #1
   10552:	d006      	beq.n	10562 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x42>
   10554:	2802      	cmp	r0, #2
   10556:	d004      	beq.n	10562 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x42>
   10558:	f44f 7136 	mov.w	r1, #728	; 0x2d8
   1055c:	2006      	movs	r0, #6
   1055e:	f7f0 ff4d 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10562:	bd10      	pop	{r4, pc}
   10564:	b510      	push	{r4, lr}
   10566:	f7f6 ff25 	bl	73b4 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x1c>
   1056a:	b158      	cbz	r0, 10584 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x64>
   1056c:	f7f6 ffc4 	bl	74f8 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x160>
   10570:	4604      	mov	r4, r0
   10572:	f7fe fb50 	bl	ec16 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
   10576:	b918      	cbnz	r0, 10580 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x60>
   10578:	4620      	mov	r0, r4
   1057a:	f7fe fb42 	bl	ec02 <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
   1057e:	b108      	cbz	r0, 10584 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x64>
   10580:	2000      	movs	r0, #0
   10582:	bd10      	pop	{r4, pc}
   10584:	2001      	movs	r0, #1
   10586:	bd10      	pop	{r4, pc}
   10588:	b570      	push	{r4, r5, r6, lr}
   1058a:	460c      	mov	r4, r1
   1058c:	4605      	mov	r5, r0
   1058e:	b112      	cbz	r2, 10596 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x76>
   10590:	291f      	cmp	r1, #31
   10592:	d80c      	bhi.n	105ae <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x8e>
   10594:	e016      	b.n	105c4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xa4>
   10596:	f7f1 fc0f 	bl	1db8 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ>
   1059a:	42a0      	cmp	r0, r4
   1059c:	d201      	bcs.n	105a2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x82>
   1059e:	2007      	movs	r0, #7
   105a0:	bd70      	pop	{r4, r5, r6, pc}
   105a2:	4628      	mov	r0, r5
   105a4:	f7fe fb35 	bl	ec12 <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   105a8:	b118      	cbz	r0, 105b2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x92>
   105aa:	2c1f      	cmp	r4, #31
   105ac:	d901      	bls.n	105b2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x92>
   105ae:	2012      	movs	r0, #18
   105b0:	bd70      	pop	{r4, r5, r6, pc}
   105b2:	4628      	mov	r0, r5
   105b4:	f7fe fb36 	bl	ec24 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
   105b8:	b130      	cbz	r0, 105c8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xa8>
   105ba:	4621      	mov	r1, r4
   105bc:	4628      	mov	r0, r5
   105be:	f7fe faff 	bl	ebc0 <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>
   105c2:	b118      	cbz	r0, 105cc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xac>
   105c4:	2000      	movs	r0, #0
   105c6:	bd70      	pop	{r4, r5, r6, pc}
   105c8:	2042      	movs	r0, #66	; 0x42
   105ca:	bd70      	pop	{r4, r5, r6, pc}
   105cc:	2045      	movs	r0, #69	; 0x45
   105ce:	bd70      	pop	{r4, r5, r6, pc}
   105d0:	b510      	push	{r4, lr}
   105d2:	4604      	mov	r4, r0
   105d4:	7840      	ldrb	r0, [r0, #1]
   105d6:	06c1      	lsls	r1, r0, #27
   105d8:	d51c      	bpl.n	10614 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf4>
   105da:	07c0      	lsls	r0, r0, #31
   105dc:	d00b      	beq.n	105f6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xd6>
   105de:	f7f7 f9a9 	bl	7934 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>
   105e2:	b1b8      	cbz	r0, 10614 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf4>
   105e4:	7860      	ldrb	r0, [r4, #1]
   105e6:	06c1      	lsls	r1, r0, #27
   105e8:	d405      	bmi.n	105f6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xd6>
   105ea:	0700      	lsls	r0, r0, #28
   105ec:	d503      	bpl.n	105f6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xd6>
   105ee:	7d20      	ldrb	r0, [r4, #20]
   105f0:	2802      	cmp	r0, #2
   105f2:	d10f      	bne.n	10614 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf4>
   105f4:	e010      	b.n	10618 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf8>
   105f6:	7d20      	ldrb	r0, [r4, #20]
   105f8:	2802      	cmp	r0, #2
   105fa:	d001      	beq.n	10600 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xe0>
   105fc:	7ea0      	ldrb	r0, [r4, #26]
   105fe:	b948      	cbnz	r0, 10614 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf4>
   10600:	7860      	ldrb	r0, [r4, #1]
   10602:	0700      	lsls	r0, r0, #28
   10604:	d408      	bmi.n	10618 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf8>
   10606:	f8d4 0005 	ldr.w	r0, [r4, #5]
   1060a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   1060e:	ebb1 2f10 	cmp.w	r1, r0, lsr #8
   10612:	d201      	bcs.n	10618 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf8>
   10614:	2011      	movs	r0, #17
   10616:	bd10      	pop	{r4, pc}
   10618:	2000      	movs	r0, #0
   1061a:	bd10      	pop	{r4, pc}
   1061c:	b538      	push	{r3, r4, r5, lr}
   1061e:	4604      	mov	r4, r0
   10620:	7800      	ldrb	r0, [r0, #0]
   10622:	28ef      	cmp	r0, #239	; 0xef
   10624:	d843      	bhi.n	106ae <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   10626:	f8b4 0001 	ldrh.w	r0, [r4, #1]
   1062a:	f8ad 0000 	strh.w	r0, [sp]
   1062e:	9800      	ldr	r0, [sp, #0]
   10630:	f000 f918 	bl	10864 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x344>
   10634:	b3a0      	cbz	r0, 106a0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x180>
   10636:	7861      	ldrb	r1, [r4, #1]
   10638:	0708      	lsls	r0, r1, #28
   1063a:	d40b      	bmi.n	10654 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x134>
   1063c:	f8d4 0002 	ldr.w	r0, [r4, #2]
   10640:	f8d4 3005 	ldr.w	r3, [r4, #5]
   10644:	0a02      	lsrs	r2, r0, #8
   10646:	ebb2 2f13 	cmp.w	r2, r3, lsr #8
   1064a:	d830      	bhi.n	106ae <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   1064c:	2220      	movs	r2, #32
   1064e:	ebb2 2f10 	cmp.w	r2, r0, lsr #8
   10652:	d82c      	bhi.n	106ae <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   10654:	7a60      	ldrb	r0, [r4, #9]
   10656:	b318      	cbz	r0, 106a0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x180>
   10658:	2807      	cmp	r0, #7
   1065a:	d828      	bhi.n	106ae <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   1065c:	7aa0      	ldrb	r0, [r4, #10]
   1065e:	b128      	cbz	r0, 1066c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x14c>
   10660:	2801      	cmp	r0, #1
   10662:	d003      	beq.n	1066c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x14c>
   10664:	2802      	cmp	r0, #2
   10666:	d001      	beq.n	1066c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x14c>
   10668:	2803      	cmp	r0, #3
   1066a:	d120      	bne.n	106ae <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   1066c:	074a      	lsls	r2, r1, #29
   1066e:	d403      	bmi.n	10678 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x158>
   10670:	2802      	cmp	r0, #2
   10672:	d001      	beq.n	10678 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x158>
   10674:	2803      	cmp	r0, #3
   10676:	d105      	bne.n	10684 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x164>
   10678:	7ae0      	ldrb	r0, [r4, #11]
   1067a:	b108      	cbz	r0, 10680 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x160>
   1067c:	2801      	cmp	r0, #1
   1067e:	d116      	bne.n	106ae <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   10680:	0748      	lsls	r0, r1, #29
   10682:	d407      	bmi.n	10694 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x174>
   10684:	7ca0      	ldrb	r0, [r4, #18]
   10686:	b128      	cbz	r0, 10694 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x174>
   10688:	2801      	cmp	r0, #1
   1068a:	d003      	beq.n	10694 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x174>
   1068c:	2802      	cmp	r0, #2
   1068e:	d001      	beq.n	10694 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x174>
   10690:	2803      	cmp	r0, #3
   10692:	d10c      	bne.n	106ae <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   10694:	06c8      	lsls	r0, r1, #27
   10696:	7d20      	ldrb	r0, [r4, #20]
   10698:	d503      	bpl.n	106a2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x182>
   1069a:	2801      	cmp	r0, #1
   1069c:	d107      	bne.n	106ae <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   1069e:	e002      	b.n	106a6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x186>
   106a0:	e005      	b.n	106ae <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   106a2:	2802      	cmp	r0, #2
   106a4:	d003      	beq.n	106ae <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   106a6:	7e20      	ldrb	r0, [r4, #24]
   106a8:	b118      	cbz	r0, 106b2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x192>
   106aa:	2801      	cmp	r0, #1
   106ac:	d001      	beq.n	106b2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x192>
   106ae:	2012      	movs	r0, #18
   106b0:	bd38      	pop	{r3, r4, r5, pc}
   106b2:	2000      	movs	r0, #0
   106b4:	bd38      	pop	{r3, r4, r5, pc}
   106b6:	b510      	push	{r4, lr}
   106b8:	0004      	movs	r4, r0
   106ba:	d005      	beq.n	106c8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a8>
   106bc:	f7f7 f978 	bl	79b0 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   106c0:	4384      	bics	r4, r0
   106c2:	d001      	beq.n	106c8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a8>
   106c4:	2000      	movs	r0, #0
   106c6:	bd10      	pop	{r4, pc}
   106c8:	2001      	movs	r0, #1
   106ca:	bd10      	pop	{r4, pc}
   106cc:	28fb      	cmp	r0, #251	; 0xfb
   106ce:	d803      	bhi.n	106d8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1b8>
   106d0:	f640 0048 	movw	r0, #2120	; 0x848
   106d4:	4281      	cmp	r1, r0
   106d6:	d901      	bls.n	106dc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1bc>
   106d8:	2011      	movs	r0, #17
   106da:	4770      	bx	lr
   106dc:	2000      	movs	r0, #0
   106de:	4770      	bx	lr
   106e0:	381b      	subs	r0, #27
   106e2:	28e1      	cmp	r0, #225	; 0xe1
   106e4:	d206      	bcs.n	106f4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1d4>
   106e6:	f5b1 7fa4 	cmp.w	r1, #328	; 0x148
   106ea:	d303      	bcc.n	106f4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1d4>
   106ec:	f244 2090 	movw	r0, #17040	; 0x4290
   106f0:	4281      	cmp	r1, r0
   106f2:	d901      	bls.n	106f8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1d8>
   106f4:	2012      	movs	r0, #18
   106f6:	4770      	bx	lr
   106f8:	2000      	movs	r0, #0
   106fa:	4770      	bx	lr
   106fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10700:	4606      	mov	r6, r0
   10702:	f8b0 7052 	ldrh.w	r7, [r0, #82]	; 0x52
   10706:	f8b0 4054 	ldrh.w	r4, [r0, #84]	; 0x54
   1070a:	4615      	mov	r5, r2
   1070c:	302c      	adds	r0, #44	; 0x2c
   1070e:	f7f4 fa31 	bl	4b74 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA>
   10712:	4680      	mov	r8, r0
   10714:	2102      	movs	r1, #2
   10716:	f7fd fbdf 	bl	ded8 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
   1071a:	4287      	cmp	r7, r0
   1071c:	d200      	bcs.n	10720 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x200>
   1071e:	4638      	mov	r0, r7
   10720:	4607      	mov	r7, r0
   10722:	2102      	movs	r1, #2
   10724:	4640      	mov	r0, r8
   10726:	f7fd fbd7 	bl	ded8 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
   1072a:	4284      	cmp	r4, r0
   1072c:	d200      	bcs.n	10730 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x210>
   1072e:	4620      	mov	r0, r4
   10730:	8831      	ldrh	r1, [r6, #0]
   10732:	8029      	strh	r1, [r5, #0]
   10734:	2f1b      	cmp	r7, #27
   10736:	d913      	bls.n	10760 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x240>
   10738:	2ffb      	cmp	r7, #251	; 0xfb
   1073a:	d300      	bcc.n	1073e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x21e>
   1073c:	27fb      	movs	r7, #251	; 0xfb
   1073e:	806f      	strh	r7, [r5, #2]
   10740:	281b      	cmp	r0, #27
   10742:	d90f      	bls.n	10764 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x244>
   10744:	28fb      	cmp	r0, #251	; 0xfb
   10746:	d300      	bcc.n	1074a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x22a>
   10748:	20fb      	movs	r0, #251	; 0xfb
   1074a:	80e8      	strh	r0, [r5, #6]
   1074c:	4640      	mov	r0, r8
   1074e:	f7ff fee9 	bl	10524 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x4>
   10752:	80a8      	strh	r0, [r5, #4]
   10754:	4640      	mov	r0, r8
   10756:	f7ff fee5 	bl	10524 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x4>
   1075a:	8128      	strh	r0, [r5, #8]
   1075c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10760:	271b      	movs	r7, #27
   10762:	e7ec      	b.n	1073e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x21e>
   10764:	201b      	movs	r0, #27
   10766:	e7f0      	b.n	1074a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x22a>
   10768:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1076c:	7890      	ldrb	r0, [r2, #2]
   1076e:	9e06      	ldr	r6, [sp, #24]
   10770:	461d      	mov	r5, r3
   10772:	4614      	mov	r4, r2
   10774:	b908      	cbnz	r0, 1077a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x25a>
   10776:	f7f7 f91b 	bl	79b0 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   1077a:	78e4      	ldrb	r4, [r4, #3]
   1077c:	4607      	mov	r7, r0
   1077e:	b914      	cbnz	r4, 10786 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x266>
   10780:	f7f7 f916 	bl	79b0 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   10784:	4604      	mov	r4, r0
   10786:	b16f      	cbz	r7, 107a4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x284>
   10788:	b164      	cbz	r4, 107a4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x284>
   1078a:	4638      	mov	r0, r7
   1078c:	f7ff fed5 	bl	1053a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a>
   10790:	4620      	mov	r0, r4
   10792:	f7ff fed2 	bl	1053a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a>
   10796:	b12f      	cbz	r7, 107a4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x284>
   10798:	b124      	cbz	r4, 107a4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x284>
   1079a:	702f      	strb	r7, [r5, #0]
   1079c:	7034      	strb	r4, [r6, #0]
   1079e:	2000      	movs	r0, #0
   107a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   107a4:	2009      	movs	r0, #9
   107a6:	e7fb      	b.n	107a0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x280>
   107a8:	207f      	movs	r0, #127	; 0x7f
   107aa:	f000 b83c 	b.w	10826 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x306>
   107ae:	b508      	push	{r3, lr}
   107b0:	f890 125c 	ldrb.w	r1, [r0, #604]	; 0x25c
   107b4:	f890 00bc 	ldrb.w	r0, [r0, #188]	; 0xbc
   107b8:	f88d 0000 	strb.w	r0, [sp]
   107bc:	9800      	ldr	r0, [sp, #0]
   107be:	9000      	str	r0, [sp, #0]
   107c0:	f89d 0000 	ldrb.w	r0, [sp]
   107c4:	b100      	cbz	r0, 107c8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2a8>
   107c6:	2001      	movs	r0, #1
   107c8:	1e40      	subs	r0, r0, #1
   107ca:	4208      	tst	r0, r1
   107cc:	d003      	beq.n	107d6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2b6>
   107ce:	2904      	cmp	r1, #4
   107d0:	d001      	beq.n	107d6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2b6>
   107d2:	2001      	movs	r0, #1
   107d4:	bd08      	pop	{r3, pc}
   107d6:	2000      	movs	r0, #0
   107d8:	bd08      	pop	{r3, pc}
   107da:	b570      	push	{r4, r5, r6, lr}
   107dc:	4605      	mov	r5, r0
   107de:	f7fe fa21 	bl	ec24 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
   107e2:	b170      	cbz	r0, 10802 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2e2>
   107e4:	4628      	mov	r0, r5
   107e6:	f7fe fbed 	bl	efc4 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   107ea:	2800      	cmp	r0, #0
   107ec:	d008      	beq.n	10800 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2e0>
   107ee:	4628      	mov	r0, r5
   107f0:	f7fe fbe5 	bl	efbe <sym_MHDCHYAEWBCIUYGOTWRWGZEJ6XEBEBUHOO5T6WY>
   107f4:	4604      	mov	r4, r0
   107f6:	4628      	mov	r0, r5
   107f8:	f7fe fbbb 	bl	ef72 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>
   107fc:	b118      	cbz	r0, 10806 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2e6>
   107fe:	200c      	movs	r0, #12
   10800:	bd70      	pop	{r4, r5, r6, pc}
   10802:	2042      	movs	r0, #66	; 0x42
   10804:	bd70      	pop	{r4, r5, r6, pc}
   10806:	b164      	cbz	r4, 10822 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x302>
   10808:	8820      	ldrh	r0, [r4, #0]
   1080a:	f7fd f9f5 	bl	dbf8 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
   1080e:	8820      	ldrh	r0, [r4, #0]
   10810:	2100      	movs	r1, #0
   10812:	f7f1 f879 	bl	1908 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
   10816:	b120      	cbz	r0, 10822 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x302>
   10818:	f241 61ac 	movw	r1, #5804	; 0x16ac
   1081c:	2039      	movs	r0, #57	; 0x39
   1081e:	f7f0 fded 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10822:	2000      	movs	r0, #0
   10824:	bd70      	pop	{r4, r5, r6, pc}
   10826:	b508      	push	{r3, lr}
   10828:	f640 1288 	movw	r2, #2440	; 0x988
   1082c:	2300      	movs	r3, #0
   1082e:	4669      	mov	r1, sp
   10830:	f7fc f834 	bl	c89c <mpsl_fem_tx_power_split>
   10834:	bd08      	pop	{r3, pc}
   10836:	b530      	push	{r4, r5, lr}
   10838:	f340 0400 	sbfx	r4, r0, #0, #1
   1083c:	f340 0040 	sbfx	r0, r0, #1, #1
   10840:	1c40      	adds	r0, r0, #1
   10842:	9d03      	ldr	r5, [sp, #12]
   10844:	1c64      	adds	r4, r4, #1
   10846:	d000      	beq.n	1084a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x32a>
   10848:	b119      	cbz	r1, 10852 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x332>
   1084a:	b100      	cbz	r0, 1084e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x32e>
   1084c:	b10a      	cbz	r2, 10852 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x332>
   1084e:	b91c      	cbnz	r4, 10858 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x338>
   10850:	e001      	b.n	10856 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x336>
   10852:	2011      	movs	r0, #17
   10854:	bd30      	pop	{r4, r5, pc}
   10856:	2100      	movs	r1, #0
   10858:	7019      	strb	r1, [r3, #0]
   1085a:	b900      	cbnz	r0, 1085e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x33e>
   1085c:	2200      	movs	r2, #0
   1085e:	702a      	strb	r2, [r5, #0]
   10860:	2000      	movs	r0, #0
   10862:	bd30      	pop	{r4, r5, pc}
   10864:	b2c0      	uxtb	r0, r0
   10866:	06c1      	lsls	r1, r0, #27
   10868:	d40c      	bmi.n	10884 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x364>
   1086a:	0681      	lsls	r1, r0, #26
   1086c:	ea4f 71c0 	mov.w	r1, r0, lsl #31
   10870:	d503      	bpl.n	1087a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x35a>
   10872:	b9d1      	cbnz	r1, 108aa <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x38a>
   10874:	0781      	lsls	r1, r0, #30
   10876:	d418      	bmi.n	108aa <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x38a>
   10878:	e001      	b.n	1087e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x35e>
   1087a:	2900      	cmp	r1, #0
   1087c:	d1fa      	bne.n	10874 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x354>
   1087e:	0700      	lsls	r0, r0, #28
   10880:	d413      	bmi.n	108aa <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x38a>
   10882:	e010      	b.n	108a6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x386>
   10884:	0641      	lsls	r1, r0, #25
   10886:	d410      	bmi.n	108aa <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x38a>
   10888:	0681      	lsls	r1, r0, #26
   1088a:	d40e      	bmi.n	108aa <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x38a>
   1088c:	07c1      	lsls	r1, r0, #31
   1088e:	ea4f 7180 	mov.w	r1, r0, lsl #30
   10892:	d004      	beq.n	1089e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x37e>
   10894:	2900      	cmp	r1, #0
   10896:	db02      	blt.n	1089e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x37e>
   10898:	0740      	lsls	r0, r0, #29
   1089a:	d404      	bmi.n	108a6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x386>
   1089c:	e005      	b.n	108aa <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x38a>
   1089e:	0701      	lsls	r1, r0, #28
   108a0:	d403      	bmi.n	108aa <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x38a>
   108a2:	0740      	lsls	r0, r0, #29
   108a4:	d401      	bmi.n	108aa <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x38a>
   108a6:	2001      	movs	r0, #1
   108a8:	4770      	bx	lr
   108aa:	2000      	movs	r0, #0
   108ac:	4770      	bx	lr
   108ae:	b510      	push	{r4, lr}
   108b0:	f7f4 f944 	bl	4b3c <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>
   108b4:	b108      	cbz	r0, 108ba <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x39a>
   108b6:	21fd      	movs	r1, #253	; 0xfd
   108b8:	e004      	b.n	108c4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3a4>
   108ba:	f7f3 fa95 	bl	3de8 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>
   108be:	b120      	cbz	r0, 108ca <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3aa>
   108c0:	f44f 7181 	mov.w	r1, #258	; 0x102
   108c4:	2001      	movs	r0, #1
   108c6:	f7f0 fd99 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   108ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   108ce:	2001      	movs	r0, #1
   108d0:	f7fc bfc4 	b.w	d85c <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
   108d4:	6802      	ldr	r2, [r0, #0]
   108d6:	b912      	cbnz	r2, 108de <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3be>
   108d8:	6001      	str	r1, [r0, #0]
   108da:	4770      	bx	lr
   108dc:	4602      	mov	r2, r0
   108de:	6850      	ldr	r0, [r2, #4]
   108e0:	b108      	cbz	r0, 108e6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3c6>
   108e2:	428a      	cmp	r2, r1
   108e4:	d1fa      	bne.n	108dc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3bc>
   108e6:	428a      	cmp	r2, r1
   108e8:	d0f7      	beq.n	108da <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3ba>
   108ea:	6051      	str	r1, [r2, #4]
   108ec:	4770      	bx	lr
   108ee:	b510      	push	{r4, lr}
   108f0:	4604      	mov	r4, r0
   108f2:	e002      	b.n	108fa <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3da>
   108f4:	6820      	ldr	r0, [r4, #0]
   108f6:	4780      	blx	r0
   108f8:	6864      	ldr	r4, [r4, #4]
   108fa:	2c00      	cmp	r4, #0
   108fc:	d1fa      	bne.n	108f4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3d4>
   108fe:	bd10      	pop	{r4, pc}
   10900:	b510      	push	{r4, lr}
   10902:	2000      	movs	r0, #0
   10904:	f7fc ffaa 	bl	d85c <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
   10908:	f7f1 f960 	bl	1bcc <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>
   1090c:	f7f1 fbf6 	bl	20fc <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>
   10910:	f7f1 fd84 	bl	241c <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
   10914:	2800      	cmp	r0, #0
   10916:	d003      	beq.n	10920 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x400>
   10918:	21df      	movs	r1, #223	; 0xdf
   1091a:	2001      	movs	r0, #1
   1091c:	f7f0 fd6e 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10920:	bd10      	pop	{r4, pc}
   10922:	b510      	push	{r4, lr}
   10924:	f7ff ffc3 	bl	108ae <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x38e>
   10928:	f7fe fe36 	bl	f598 <sym_OTZAOT4DEZSL3R4MXRNUS2BIBKPPCOEO2SMZYAI>
   1092c:	2800      	cmp	r0, #0
   1092e:	d004      	beq.n	1093a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x41a>
   10930:	f240 1117 	movw	r1, #279	; 0x117
   10934:	2001      	movs	r0, #1
   10936:	f7f0 fd61 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1093a:	bd10      	pop	{r4, pc}

0001093c <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>:
   1093c:	f7fb bce2 	b.w	c304 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
   10940:	000b0001 	.word	0x000b0001
   10944:	000a0002 	.word	0x000a0002
   10948:	00090005 	.word	0x00090005
   1094c:	0008000a 	.word	0x0008000a
   10950:	00070014 	.word	0x00070014
   10954:	0006001e 	.word	0x0006001e
   10958:	00050032 	.word	0x00050032
   1095c:	0004004b 	.word	0x0004004b
   10960:	00030064 	.word	0x00030064
   10964:	00020096 	.word	0x00020096
   10968:	000100fa 	.word	0x000100fa
   1096c:	000001f4 	.word	0x000001f4

00010970 <sym_N4QRZBF2FIWL2SJPDNB5CJNAF73PGHUMQ7KGJGA>:
   10970:	b518      	push	{r3, r4, lr}
   10972:	2200      	movs	r2, #0
   10974:	704a      	strb	r2, [r1, #1]
   10976:	2314      	movs	r3, #20
   10978:	700b      	strb	r3, [r1, #0]
   1097a:	7202      	strb	r2, [r0, #8]
   1097c:	f8d0 400a 	ldr.w	r4, [r0, #10]
   10980:	604c      	str	r4, [r1, #4]
   10982:	89c3      	ldrh	r3, [r0, #14]
   10984:	810b      	strh	r3, [r1, #8]
   10986:	7a03      	ldrb	r3, [r0, #8]
   10988:	f88d 3000 	strb.w	r3, [sp]
   1098c:	9b00      	ldr	r3, [sp, #0]
   1098e:	9300      	str	r3, [sp, #0]
   10990:	f89d 3000 	ldrb.w	r3, [sp]
   10994:	2b00      	cmp	r3, #0
   10996:	d1f0      	bne.n	1097a <sym_N4QRZBF2FIWL2SJPDNB5CJNAF73PGHUMQ7KGJGA+0xa>
   10998:	bd18      	pop	{r3, r4, pc}

0001099a <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY>:
   1099a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   1099c:	460d      	mov	r5, r1
   1099e:	4604      	mov	r4, r0
   109a0:	f7f2 fc54 	bl	324c <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY>
   109a4:	2600      	movs	r6, #0
   109a6:	b1f8      	cbz	r0, 109e8 <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY+0x4e>
   109a8:	f5a4 70c6 	sub.w	r0, r4, #396	; 0x18c
   109ac:	7226      	strb	r6, [r4, #8]
   109ae:	8800      	ldrh	r0, [r0, #0]
   109b0:	f8ad 0000 	strh.w	r0, [sp]
   109b4:	a902      	add	r1, sp, #8
   109b6:	f7fd f9ef 	bl	dd98 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   109ba:	b108      	cbz	r0, 109c0 <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY+0x26>
   109bc:	2124      	movs	r1, #36	; 0x24
   109be:	e010      	b.n	109e2 <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY+0x48>
   109c0:	9803      	ldr	r0, [sp, #12]
   109c2:	f810 1f66 	ldrb.w	r1, [r0, #102]!
   109c6:	f88d 1002 	strb.w	r1, [sp, #2]
   109ca:	7841      	ldrb	r1, [r0, #1]
   109cc:	f88d 1003 	strb.w	r1, [sp, #3]
   109d0:	8840      	ldrh	r0, [r0, #2]
   109d2:	f8ad 0004 	strh.w	r0, [sp, #4]
   109d6:	2102      	movs	r1, #2
   109d8:	4668      	mov	r0, sp
   109da:	f7ff fd31 	bl	10440 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
   109de:	b118      	cbz	r0, 109e8 <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY+0x4e>
   109e0:	213a      	movs	r1, #58	; 0x3a
   109e2:	207e      	movs	r0, #126	; 0x7e
   109e4:	f7f0 fd0a 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   109e8:	201c      	movs	r0, #28
   109ea:	7028      	strb	r0, [r5, #0]
   109ec:	706e      	strb	r6, [r5, #1]
   109ee:	f8d4 000a 	ldr.w	r0, [r4, #10]
   109f2:	6068      	str	r0, [r5, #4]
   109f4:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}

000109f6 <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>:
   109f6:	b510      	push	{r4, lr}
   109f8:	f7f7 fb74 	bl	80e4 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>
   109fc:	f000 f81d 	bl	10a3a <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>
   10a00:	f7f7 f84a 	bl	7a98 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>
   10a04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10a08:	f7f7 b944 	b.w	7c94 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>

00010a0c <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>:
   10a0c:	b510      	push	{r4, lr}
   10a0e:	24c8      	movs	r4, #200	; 0xc8
   10a10:	1e64      	subs	r4, r4, #1
   10a12:	b2e4      	uxtb	r4, r4
   10a14:	f7f7 f85e 	bl	7ad4 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>
   10a18:	2802      	cmp	r0, #2
   10a1a:	d003      	beq.n	10a24 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x18>
   10a1c:	2801      	cmp	r0, #1
   10a1e:	d000      	beq.n	10a22 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x16>
   10a20:	2000      	movs	r0, #0
   10a22:	bd10      	pop	{r4, pc}
   10a24:	2c00      	cmp	r4, #0
   10a26:	d1f3      	bne.n	10a10 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x4>
   10a28:	21ca      	movs	r1, #202	; 0xca
   10a2a:	203b      	movs	r0, #59	; 0x3b
   10a2c:	f7f0 fce6 	bl	13fc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10a30:	5840      	ldr	r0, [r0, r1]
   10a32:	2800      	cmp	r0, #0
   10a34:	d000      	beq.n	10a38 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x2c>
   10a36:	2001      	movs	r0, #1
   10a38:	4770      	bx	lr

00010a3a <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>:
   10a3a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   10a3e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   10a42:	f8c1 0180 	str.w	r0, [r1, #384]	; 0x180
   10a46:	f3bf 8f4f 	dsb	sy
   10a4a:	f3bf 8f6f 	isb	sy
   10a4e:	f7f7 b9bb 	b.w	7dc8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>
   10a52:	2800      	cmp	r0, #0
   10a54:	db09      	blt.n	10a6a <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x30>
   10a56:	f000 021f 	and.w	r2, r0, #31
   10a5a:	2101      	movs	r1, #1
   10a5c:	4091      	lsls	r1, r2
   10a5e:	0940      	lsrs	r0, r0, #5
   10a60:	0080      	lsls	r0, r0, #2
   10a62:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   10a66:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   10a6a:	4770      	bx	lr
   10a6c:	2800      	cmp	r0, #0
   10a6e:	db0d      	blt.n	10a8c <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x52>
   10a70:	f000 021f 	and.w	r2, r0, #31
   10a74:	2101      	movs	r1, #1
   10a76:	4091      	lsls	r1, r2
   10a78:	0940      	lsrs	r0, r0, #5
   10a7a:	0080      	lsls	r0, r0, #2
   10a7c:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   10a80:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
   10a84:	f3bf 8f4f 	dsb	sy
   10a88:	f3bf 8f6f 	isb	sy
   10a8c:	4770      	bx	lr
   10a8e:	5840      	ldr	r0, [r0, r1]
   10a90:	2800      	cmp	r0, #0
   10a92:	d000      	beq.n	10a96 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5c>
   10a94:	2001      	movs	r0, #1
   10a96:	4770      	bx	lr
   10a98:	5840      	ldr	r0, [r0, r1]
   10a9a:	2800      	cmp	r0, #0
   10a9c:	d000      	beq.n	10aa0 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x66>
   10a9e:	2001      	movs	r0, #1
   10aa0:	4770      	bx	lr

00010aa2 <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>:
   10aa2:	b510      	push	{r4, lr}
   10aa4:	4604      	mov	r4, r0
   10aa6:	4608      	mov	r0, r1
   10aa8:	f7f7 fc42 	bl	8330 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   10aac:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   10ab0:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
   10ab4:	fbb0 f0f1 	udiv	r0, r0, r1
   10ab8:	1a20      	subs	r0, r4, r0
   10aba:	1e80      	subs	r0, r0, #2
   10abc:	bd10      	pop	{r4, pc}

00010abe <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>:
   10abe:	b510      	push	{r4, lr}
   10ac0:	4604      	mov	r4, r0
   10ac2:	4608      	mov	r0, r1
   10ac4:	f7f7 fc34 	bl	8330 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   10ac8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   10acc:	fbb0 f0f1 	udiv	r0, r0, r1
   10ad0:	1a20      	subs	r0, r4, r0
   10ad2:	bd10      	pop	{r4, pc}
   10ad4:	2804      	cmp	r0, #4
   10ad6:	d202      	bcs.n	10ade <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x20>
   10ad8:	f04f 0028 	mov.w	r0, #40	; 0x28
   10adc:	4770      	bx	lr
   10ade:	d102      	bne.n	10ae6 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x28>
   10ae0:	f04f 0010 	mov.w	r0, #16
   10ae4:	4770      	bx	lr
   10ae6:	f04f 0000 	mov.w	r0, #0
   10aea:	4770      	bx	lr
   10aec:	2100      	movs	r1, #0
   10aee:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
   10af2:	f800 1f24 	strb.w	r1, [r0, #36]!
   10af6:	7041      	strb	r1, [r0, #1]
   10af8:	4770      	bx	lr

00010afa <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>:
   10afa:	b570      	push	{r4, r5, r6, lr}
   10afc:	f7f8 f9d8 	bl	8eb0 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
   10b00:	4605      	mov	r5, r0
   10b02:	2400      	movs	r4, #0
   10b04:	e006      	b.n	10b14 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0x1a>
   10b06:	4620      	mov	r0, r4
   10b08:	f7f8 f9d8 	bl	8ebc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
   10b0c:	f7ff ffee 	bl	10aec <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x2e>
   10b10:	1c64      	adds	r4, r4, #1
   10b12:	b2e4      	uxtb	r4, r4
   10b14:	42ac      	cmp	r4, r5
   10b16:	d3f6      	bcc.n	10b06 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0xc>
   10b18:	bd70      	pop	{r4, r5, r6, pc}

00010b1a <sym_6TZLBWMEWRMPI4KKAUVLC2XHUBDGXEA4B4JJJYQ>:
   10b1a:	f7fa bdaf 	b.w	b67c <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>

00010b1e <sym_F77FUTRRLLWPYDS7BBANG2WE3C4EDMYMAPNI54A>:
   10b1e:	b510      	push	{r4, lr}
   10b20:	2000      	movs	r0, #0
   10b22:	f7fb f8e5 	bl	bcf0 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA>
   10b26:	6800      	ldr	r0, [r0, #0]
   10b28:	2800      	cmp	r0, #0
   10b2a:	bf18      	it	ne
   10b2c:	2001      	movne	r0, #1
   10b2e:	bd10      	pop	{r4, pc}

00010b30 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>:
   10b30:	b510      	push	{r4, lr}
   10b32:	f7fb f95d 	bl	bdf0 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
   10b36:	f7fa fc1b 	bl	b370 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
   10b3a:	f000 f802 	bl	10b42 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
   10b3e:	b280      	uxth	r0, r0
   10b40:	bd10      	pop	{r4, pc}

00010b42 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>:
   10b42:	0a41      	lsrs	r1, r0, #9
   10b44:	f643 5209 	movw	r2, #15625	; 0x3d09
   10b48:	4351      	muls	r1, r2
   10b4a:	f3c0 0008 	ubfx	r0, r0, #0, #9
   10b4e:	fb10 f002 	smulbb	r0, r0, r2
   10b52:	f500 7080 	add.w	r0, r0, #256	; 0x100
   10b56:	eb01 2050 	add.w	r0, r1, r0, lsr #9
   10b5a:	4770      	bx	lr
   10b5c:	2800      	cmp	r0, #0
   10b5e:	db09      	blt.n	10b74 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x32>
   10b60:	f000 021f 	and.w	r2, r0, #31
   10b64:	2101      	movs	r1, #1
   10b66:	4091      	lsls	r1, r2
   10b68:	0940      	lsrs	r0, r0, #5
   10b6a:	0080      	lsls	r0, r0, #2
   10b6c:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   10b70:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   10b74:	4770      	bx	lr
   10b76:	2800      	cmp	r0, #0
   10b78:	db0d      	blt.n	10b96 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x54>
   10b7a:	f000 021f 	and.w	r2, r0, #31
   10b7e:	2101      	movs	r1, #1
   10b80:	4091      	lsls	r1, r2
   10b82:	0940      	lsrs	r0, r0, #5
   10b84:	0080      	lsls	r0, r0, #2
   10b86:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   10b8a:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
   10b8e:	f3bf 8f4f 	dsb	sy
   10b92:	f3bf 8f6f 	isb	sy
   10b96:	4770      	bx	lr
   10b98:	5840      	ldr	r0, [r0, r1]
   10b9a:	2800      	cmp	r0, #0
   10b9c:	d000      	beq.n	10ba0 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x5e>
   10b9e:	2001      	movs	r0, #1
   10ba0:	4770      	bx	lr
   10ba2:	f8d0 240c 	ldr.w	r2, [r0, #1036]	; 0x40c
   10ba6:	f8d0 040c 	ldr.w	r0, [r0, #1036]	; 0x40c
   10baa:	f002 0201 	and.w	r2, r2, #1
   10bae:	03c0      	lsls	r0, r0, #15
   10bb0:	d503      	bpl.n	10bba <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x78>
   10bb2:	428a      	cmp	r2, r1
   10bb4:	d101      	bne.n	10bba <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x78>
   10bb6:	2001      	movs	r0, #1
   10bb8:	4770      	bx	lr
   10bba:	2000      	movs	r0, #0
   10bbc:	4770      	bx	lr

00010bbe <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>:
   10bbe:	b510      	push	{r4, lr}
   10bc0:	2101      	movs	r1, #1
   10bc2:	0788      	lsls	r0, r1, #30
   10bc4:	f7fb fc54 	bl	c470 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
   10bc8:	2800      	cmp	r0, #0
   10bca:	d000      	beq.n	10bce <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI+0x10>
   10bcc:	2001      	movs	r0, #1
   10bce:	bd10      	pop	{r4, pc}

00010bd0 <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>:
   10bd0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   10bd4:	2101      	movs	r1, #1
   10bd6:	6001      	str	r1, [r0, #0]
   10bd8:	4770      	bx	lr

00010bda <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>:
   10bda:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   10bde:	f8d1 2418 	ldr.w	r2, [r1, #1048]	; 0x418
   10be2:	f8d1 1418 	ldr.w	r1, [r1, #1048]	; 0x418
   10be6:	f002 0203 	and.w	r2, r2, #3
   10bea:	03c9      	lsls	r1, r1, #15
   10bec:	d503      	bpl.n	10bf6 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
   10bee:	4282      	cmp	r2, r0
   10bf0:	d101      	bne.n	10bf6 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
   10bf2:	2001      	movs	r0, #1
   10bf4:	4770      	bx	lr
   10bf6:	2000      	movs	r0, #0
   10bf8:	4770      	bx	lr

00010bfa <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>:
   10bfa:	b510      	push	{r4, lr}
   10bfc:	2100      	movs	r1, #0
   10bfe:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   10c02:	f7fb fc35 	bl	c470 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
   10c06:	2800      	cmp	r0, #0
   10c08:	d000      	beq.n	10c0c <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x12>
   10c0a:	2001      	movs	r0, #1
   10c0c:	bd10      	pop	{r4, pc}
   10c0e:	2800      	cmp	r0, #0
   10c10:	db09      	blt.n	10c26 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2c>
   10c12:	f000 021f 	and.w	r2, r0, #31
   10c16:	2101      	movs	r1, #1
   10c18:	4091      	lsls	r1, r2
   10c1a:	0940      	lsrs	r0, r0, #5
   10c1c:	0080      	lsls	r0, r0, #2
   10c1e:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   10c22:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   10c26:	4770      	bx	lr
   10c28:	2800      	cmp	r0, #0
   10c2a:	db0d      	blt.n	10c48 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x4e>
   10c2c:	f000 021f 	and.w	r2, r0, #31
   10c30:	2101      	movs	r1, #1
   10c32:	4091      	lsls	r1, r2
   10c34:	0940      	lsrs	r0, r0, #5
   10c36:	0080      	lsls	r0, r0, #2
   10c38:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   10c3c:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
   10c40:	f3bf 8f4f 	dsb	sy
   10c44:	f3bf 8f6f 	isb	sy
   10c48:	4770      	bx	lr
   10c4a:	1000      	.short	0x1000
   10c4c:	00fa0002 	.word	0x00fa0002
   10c50:	f18c0000 	.word	0xf18c0000
   10c54:	4134cc9e 	.word	0x4134cc9e
   10c58:	f70ea7d7 	.word	0xf70ea7d7
   10c5c:	2bbb1459 	.word	0x2bbb1459
   10c60:	bb7f67d7 	.word	0xbb7f67d7
   10c64:	ebbe      	.short	0xebbe
   10c66:	2800      	cmp	r0, #0
   10c68:	db09      	blt.n	10c7e <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x84>
   10c6a:	f000 021f 	and.w	r2, r0, #31
   10c6e:	2101      	movs	r1, #1
   10c70:	4091      	lsls	r1, r2
   10c72:	0940      	lsrs	r0, r0, #5
   10c74:	0080      	lsls	r0, r0, #2
   10c76:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   10c7a:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   10c7e:	4770      	bx	lr

00010c80 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>:
   10c80:	f3ef 8110 	mrs	r1, PRIMASK
   10c84:	b672      	cpsid	i
   10c86:	7802      	ldrb	r2, [r0, #0]
   10c88:	2a01      	cmp	r2, #1
   10c8a:	d001      	beq.n	10c90 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x10>
   10c8c:	2201      	movs	r2, #1
   10c8e:	e000      	b.n	10c92 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x12>
   10c90:	2200      	movs	r2, #0
   10c92:	2301      	movs	r3, #1
   10c94:	7003      	strb	r3, [r0, #0]
   10c96:	b901      	cbnz	r1, 10c9a <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x1a>
   10c98:	b662      	cpsie	i
   10c9a:	b10a      	cbz	r2, 10ca0 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x20>
   10c9c:	2000      	movs	r0, #0
   10c9e:	4770      	bx	lr
   10ca0:	f06f 0022 	mvn.w	r0, #34	; 0x22
   10ca4:	4770      	bx	lr

00010ca6 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>:
   10ca6:	2100      	movs	r1, #0
   10ca8:	7001      	strb	r1, [r0, #0]
   10caa:	4608      	mov	r0, r1
   10cac:	4770      	bx	lr

00010cae <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>:
   10cae:	f3ef 8110 	mrs	r1, PRIMASK
   10cb2:	b672      	cpsid	i
   10cb4:	2200      	movs	r2, #0
   10cb6:	7002      	strb	r2, [r0, #0]
   10cb8:	b901      	cbnz	r1, 10cbc <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q+0xe>
   10cba:	b662      	cpsie	i
   10cbc:	2000      	movs	r0, #0
   10cbe:	4770      	bx	lr

00010cc0 <mpsl_low_priority_process>:
   10cc0:	f7fb bd2c 	b.w	c71c <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>

00010cc4 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>:
   10cc4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10cc8:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   10ccc:	280f      	cmp	r0, #15
   10cce:	d001      	beq.n	10cd4 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA+0x10>
   10cd0:	2000      	movs	r0, #0
   10cd2:	4770      	bx	lr
   10cd4:	2001      	movs	r0, #1
   10cd6:	4770      	bx	lr

00010cd8 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>:
   10cd8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10cdc:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   10ce0:	280a      	cmp	r0, #10
   10ce2:	d001      	beq.n	10ce8 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY+0x10>
   10ce4:	2000      	movs	r0, #0
   10ce6:	4770      	bx	lr
   10ce8:	2001      	movs	r0, #1
   10cea:	4770      	bx	lr

00010cec <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>:
   10cec:	b500      	push	{lr}
   10cee:	f7ff fff3 	bl	10cd8 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
   10cf2:	b120      	cbz	r0, 10cfe <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x12>
   10cf4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10cf8:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
   10cfc:	b108      	cbz	r0, 10d02 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x16>
   10cfe:	2000      	movs	r0, #0
   10d00:	bd00      	pop	{pc}
   10d02:	2001      	movs	r0, #1
   10d04:	bd00      	pop	{pc}

00010d06 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>:
   10d06:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10d0a:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   10d0e:	280e      	cmp	r0, #14
   10d10:	d001      	beq.n	10d16 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q+0x10>
   10d12:	2000      	movs	r0, #0
   10d14:	4770      	bx	lr
   10d16:	2001      	movs	r0, #1
   10d18:	4770      	bx	lr

00010d1a <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>:
   10d1a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10d1e:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   10d22:	2810      	cmp	r0, #16
   10d24:	d001      	beq.n	10d2a <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA+0x10>
   10d26:	2000      	movs	r0, #0
   10d28:	4770      	bx	lr
   10d2a:	2001      	movs	r0, #1
   10d2c:	4770      	bx	lr

00010d2e <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>:
   10d2e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10d32:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   10d36:	2806      	cmp	r0, #6
   10d38:	d003      	beq.n	10d42 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
   10d3a:	1c40      	adds	r0, r0, #1
   10d3c:	d001      	beq.n	10d42 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
   10d3e:	2000      	movs	r0, #0
   10d40:	4770      	bx	lr
   10d42:	2001      	movs	r0, #1
   10d44:	4770      	bx	lr

00010d46 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>:
   10d46:	b500      	push	{lr}
   10d48:	f7ff fff1 	bl	10d2e <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
   10d4c:	b148      	cbz	r0, 10d62 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
   10d4e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10d52:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
   10d56:	2806      	cmp	r0, #6
   10d58:	d303      	bcc.n	10d62 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
   10d5a:	1c40      	adds	r0, r0, #1
   10d5c:	d001      	beq.n	10d62 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
   10d5e:	2001      	movs	r0, #1
   10d60:	bd00      	pop	{pc}
   10d62:	2000      	movs	r0, #0
   10d64:	bd00      	pop	{pc}

00010d66 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>:
   10d66:	b500      	push	{lr}
   10d68:	f7ff ffe1 	bl	10d2e <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
   10d6c:	b138      	cbz	r0, 10d7e <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x18>
   10d6e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10d72:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
   10d76:	2806      	cmp	r0, #6
   10d78:	d303      	bcc.n	10d82 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
   10d7a:	1c40      	adds	r0, r0, #1
   10d7c:	d001      	beq.n	10d82 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
   10d7e:	2000      	movs	r0, #0
   10d80:	bd00      	pop	{pc}
   10d82:	2001      	movs	r0, #1
   10d84:	bd00      	pop	{pc}

00010d86 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>:
   10d86:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10d8a:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   10d8e:	280d      	cmp	r0, #13
   10d90:	d001      	beq.n	10d96 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA+0x10>
   10d92:	2000      	movs	r0, #0
   10d94:	4770      	bx	lr
   10d96:	2001      	movs	r0, #1
   10d98:	4770      	bx	lr

00010d9a <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>:
   10d9a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10d9e:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   10da2:	2808      	cmp	r0, #8
   10da4:	d001      	beq.n	10daa <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ+0x10>
   10da6:	2000      	movs	r0, #0
   10da8:	4770      	bx	lr
   10daa:	2001      	movs	r0, #1
   10dac:	4770      	bx	lr

00010dae <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>:
   10dae:	f7fb bcef 	b.w	c790 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x2c>

00010db2 <sym_PHK7RXLFFTGYQNCW3IEEUVLOAYXWQJQYEN3DT7Y>:
   10db2:	f7fb bced 	b.w	c790 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x2c>

00010db6 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA>:
   10db6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10dba:	428a      	cmp	r2, r1
   10dbc:	d803      	bhi.n	10dc6 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x10>
   10dbe:	2179      	movs	r1, #121	; 0x79
   10dc0:	2096      	movs	r0, #150	; 0x96
   10dc2:	f7fb fbab 	bl	c51c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   10dc6:	fab2 f382 	clz	r3, r2
   10dca:	b13b      	cbz	r3, 10ddc <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x26>
   10dcc:	4099      	lsls	r1, r3
   10dce:	f1c3 0420 	rsb	r4, r3, #32
   10dd2:	fa20 f404 	lsr.w	r4, r0, r4
   10dd6:	4321      	orrs	r1, r4
   10dd8:	4098      	lsls	r0, r3
   10dda:	409a      	lsls	r2, r3
   10ddc:	0c14      	lsrs	r4, r2, #16
   10dde:	0c07      	lsrs	r7, r0, #16
   10de0:	b286      	uxth	r6, r0
   10de2:	fbb1 f0f4 	udiv	r0, r1, r4
   10de6:	fbb1 f3f4 	udiv	r3, r1, r4
   10dea:	fb04 1c10 	mls	ip, r4, r0, r1
   10dee:	b295      	uxth	r5, r2
   10df0:	fb03 f005 	mul.w	r0, r3, r5
   10df4:	eb07 4c0c 	add.w	ip, r7, ip, lsl #16
   10df8:	4560      	cmp	r0, ip
   10dfa:	d907      	bls.n	10e0c <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x56>
   10dfc:	eba0 000c 	sub.w	r0, r0, ip
   10e00:	4290      	cmp	r0, r2
   10e02:	d901      	bls.n	10e08 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x52>
   10e04:	2002      	movs	r0, #2
   10e06:	e000      	b.n	10e0a <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x54>
   10e08:	2001      	movs	r0, #1
   10e0a:	1a1b      	subs	r3, r3, r0
   10e0c:	0409      	lsls	r1, r1, #16
   10e0e:	0418      	lsls	r0, r3, #16
   10e10:	19c9      	adds	r1, r1, r7
   10e12:	fba3 3702 	umull	r3, r7, r3, r2
   10e16:	1acf      	subs	r7, r1, r3
   10e18:	fbb7 f1f4 	udiv	r1, r7, r4
   10e1c:	fbb7 f3f4 	udiv	r3, r7, r4
   10e20:	fb04 7413 	mls	r4, r4, r3, r7
   10e24:	fb01 f305 	mul.w	r3, r1, r5
   10e28:	eb06 4404 	add.w	r4, r6, r4, lsl #16
   10e2c:	42a3      	cmp	r3, r4
   10e2e:	d906      	bls.n	10e3e <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x88>
   10e30:	1b1b      	subs	r3, r3, r4
   10e32:	4293      	cmp	r3, r2
   10e34:	d901      	bls.n	10e3a <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x84>
   10e36:	2202      	movs	r2, #2
   10e38:	e000      	b.n	10e3c <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x86>
   10e3a:	2201      	movs	r2, #1
   10e3c:	1a89      	subs	r1, r1, r2
   10e3e:	4308      	orrs	r0, r1
   10e40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00010e44 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>:
   10e44:	b4f0      	push	{r4, r5, r6, r7}
   10e46:	ea80 0c01 	eor.w	ip, r0, r1
   10e4a:	4603      	mov	r3, r0
   10e4c:	f01c 0f03 	tst.w	ip, #3
   10e50:	d13c      	bne.n	10ecc <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
   10e52:	f013 0f03 	tst.w	r3, #3
   10e56:	d00b      	beq.n	10e70 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x2c>
   10e58:	2a00      	cmp	r2, #0
   10e5a:	bf04      	itt	eq
   10e5c:	bcf0      	popeq	{r4, r5, r6, r7}
   10e5e:	4770      	bxeq	lr
   10e60:	f811 cb01 	ldrb.w	ip, [r1], #1
   10e64:	f803 cb01 	strb.w	ip, [r3], #1
   10e68:	1e52      	subs	r2, r2, #1
   10e6a:	f013 0f03 	tst.w	r3, #3
   10e6e:	d1f3      	bne.n	10e58 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x14>
   10e70:	2a03      	cmp	r2, #3
   10e72:	d94f      	bls.n	10f14 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
   10e74:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   10e78:	d24c      	bcs.n	10f14 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
   10e7a:	f1c2 0c00 	rsb	ip, r2, #0
   10e7e:	ea4f 74ec 	mov.w	r4, ip, asr #31
   10e82:	eb0c 7c94 	add.w	ip, ip, r4, lsr #30
   10e86:	ea4f 0cac 	mov.w	ip, ip, asr #2
   10e8a:	f1cc 0c00 	rsb	ip, ip, #0
   10e8e:	f1bc 0f00 	cmp.w	ip, #0
   10e92:	dd1b      	ble.n	10ecc <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
   10e94:	1f0d      	subs	r5, r1, #4
   10e96:	1f1c      	subs	r4, r3, #4
   10e98:	f01c 0f01 	tst.w	ip, #1
   10e9c:	d003      	beq.n	10ea6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x62>
   10e9e:	f855 6f04 	ldr.w	r6, [r5, #4]!
   10ea2:	f844 6f04 	str.w	r6, [r4, #4]!
   10ea6:	ea5f 066c 	movs.w	r6, ip, asr #1
   10eaa:	d007      	beq.n	10ebc <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x78>
   10eac:	686f      	ldr	r7, [r5, #4]
   10eae:	6067      	str	r7, [r4, #4]
   10eb0:	f855 7f08 	ldr.w	r7, [r5, #8]!
   10eb4:	f844 7f08 	str.w	r7, [r4, #8]!
   10eb8:	1e76      	subs	r6, r6, #1
   10eba:	d1f7      	bne.n	10eac <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x68>
   10ebc:	eb01 018c 	add.w	r1, r1, ip, lsl #2
   10ec0:	eb03 038c 	add.w	r3, r3, ip, lsl #2
   10ec4:	f1cc 0c00 	rsb	ip, ip, #0
   10ec8:	eb02 028c 	add.w	r2, r2, ip, lsl #2
   10ecc:	2a00      	cmp	r2, #0
   10ece:	bf04      	itt	eq
   10ed0:	bcf0      	popeq	{r4, r5, r6, r7}
   10ed2:	4770      	bxeq	lr
   10ed4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   10ed8:	d226      	bcs.n	10f28 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
   10eda:	2a00      	cmp	r2, #0
   10edc:	bfdc      	itt	le
   10ede:	bcf0      	pople	{r4, r5, r6, r7}
   10ee0:	4770      	bxle	lr
   10ee2:	1e49      	subs	r1, r1, #1
   10ee4:	1e5b      	subs	r3, r3, #1
   10ee6:	f012 0f01 	tst.w	r2, #1
   10eea:	d003      	beq.n	10ef4 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb0>
   10eec:	f811 cf01 	ldrb.w	ip, [r1, #1]!
   10ef0:	f803 cf01 	strb.w	ip, [r3, #1]!
   10ef4:	1052      	asrs	r2, r2, #1
   10ef6:	bf04      	itt	eq
   10ef8:	bcf0      	popeq	{r4, r5, r6, r7}
   10efa:	4770      	bxeq	lr
   10efc:	f891 c001 	ldrb.w	ip, [r1, #1]
   10f00:	f883 c001 	strb.w	ip, [r3, #1]
   10f04:	f811 cf02 	ldrb.w	ip, [r1, #2]!
   10f08:	f803 cf02 	strb.w	ip, [r3, #2]!
   10f0c:	1e52      	subs	r2, r2, #1
   10f0e:	d1f5      	bne.n	10efc <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb8>
   10f10:	bcf0      	pop	{r4, r5, r6, r7}
   10f12:	4770      	bx	lr
   10f14:	2a04      	cmp	r2, #4
   10f16:	d3d9      	bcc.n	10ecc <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
   10f18:	f851 cb04 	ldr.w	ip, [r1], #4
   10f1c:	1f12      	subs	r2, r2, #4
   10f1e:	f843 cb04 	str.w	ip, [r3], #4
   10f22:	2a04      	cmp	r2, #4
   10f24:	d2f8      	bcs.n	10f18 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd4>
   10f26:	e7d1      	b.n	10ecc <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
   10f28:	f811 cb01 	ldrb.w	ip, [r1], #1
   10f2c:	f803 cb01 	strb.w	ip, [r3], #1
   10f30:	1e52      	subs	r2, r2, #1
   10f32:	d1f9      	bne.n	10f28 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
   10f34:	bcf0      	pop	{r4, r5, r6, r7}
   10f36:	4770      	bx	lr

00010f38 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>:
   10f38:	b470      	push	{r4, r5, r6}
   10f3a:	4603      	mov	r3, r0
   10f3c:	f001 0cff 	and.w	ip, r1, #255	; 0xff
   10f40:	f010 0f03 	tst.w	r0, #3
   10f44:	d009      	beq.n	10f5a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x22>
   10f46:	2a00      	cmp	r2, #0
   10f48:	bf04      	itt	eq
   10f4a:	bc70      	popeq	{r4, r5, r6}
   10f4c:	4770      	bxeq	lr
   10f4e:	f803 cb01 	strb.w	ip, [r3], #1
   10f52:	1e52      	subs	r2, r2, #1
   10f54:	f013 0f03 	tst.w	r3, #3
   10f58:	d1f5      	bne.n	10f46 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xe>
   10f5a:	b2c9      	uxtb	r1, r1
   10f5c:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   10f60:	ea41 4501 	orr.w	r5, r1, r1, lsl #16
   10f64:	2a03      	cmp	r2, #3
   10f66:	d939      	bls.n	10fdc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
   10f68:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   10f6c:	d236      	bcs.n	10fdc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
   10f6e:	4251      	negs	r1, r2
   10f70:	17cc      	asrs	r4, r1, #31
   10f72:	eb01 7194 	add.w	r1, r1, r4, lsr #30
   10f76:	1089      	asrs	r1, r1, #2
   10f78:	424e      	negs	r6, r1
   10f7a:	2e00      	cmp	r6, #0
   10f7c:	dd11      	ble.n	10fa2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
   10f7e:	1f19      	subs	r1, r3, #4
   10f80:	f016 0f01 	tst.w	r6, #1
   10f84:	bf18      	it	ne
   10f86:	f841 5f04 	strne.w	r5, [r1, #4]!
   10f8a:	1074      	asrs	r4, r6, #1
   10f8c:	d004      	beq.n	10f98 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x60>
   10f8e:	604d      	str	r5, [r1, #4]
   10f90:	f841 5f08 	str.w	r5, [r1, #8]!
   10f94:	1e64      	subs	r4, r4, #1
   10f96:	d1fa      	bne.n	10f8e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x56>
   10f98:	4271      	negs	r1, r6
   10f9a:	eb03 0386 	add.w	r3, r3, r6, lsl #2
   10f9e:	eb02 0281 	add.w	r2, r2, r1, lsl #2
   10fa2:	2a00      	cmp	r2, #0
   10fa4:	bf04      	itt	eq
   10fa6:	bc70      	popeq	{r4, r5, r6}
   10fa8:	4770      	bxeq	lr
   10faa:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   10fae:	d21d      	bcs.n	10fec <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
   10fb0:	2a00      	cmp	r2, #0
   10fb2:	bfdc      	itt	le
   10fb4:	bc70      	pople	{r4, r5, r6}
   10fb6:	4770      	bxle	lr
   10fb8:	1e59      	subs	r1, r3, #1
   10fba:	f012 0f01 	tst.w	r2, #1
   10fbe:	bf18      	it	ne
   10fc0:	f801 cf01 	strbne.w	ip, [r1, #1]!
   10fc4:	1052      	asrs	r2, r2, #1
   10fc6:	bf04      	itt	eq
   10fc8:	bc70      	popeq	{r4, r5, r6}
   10fca:	4770      	bxeq	lr
   10fcc:	f881 c001 	strb.w	ip, [r1, #1]
   10fd0:	f801 cf02 	strb.w	ip, [r1, #2]!
   10fd4:	1e52      	subs	r2, r2, #1
   10fd6:	d1f9      	bne.n	10fcc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x94>
   10fd8:	bc70      	pop	{r4, r5, r6}
   10fda:	4770      	bx	lr
   10fdc:	2a04      	cmp	r2, #4
   10fde:	d3e0      	bcc.n	10fa2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
   10fe0:	1f12      	subs	r2, r2, #4
   10fe2:	f843 5b04 	str.w	r5, [r3], #4
   10fe6:	2a04      	cmp	r2, #4
   10fe8:	d2fa      	bcs.n	10fe0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa8>
   10fea:	e7da      	b.n	10fa2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
   10fec:	f803 cb01 	strb.w	ip, [r3], #1
   10ff0:	1e52      	subs	r2, r2, #1
   10ff2:	d1fb      	bne.n	10fec <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
   10ff4:	bc70      	pop	{r4, r5, r6}
   10ff6:	4770      	bx	lr
   10ff8:	f04f 30ff 	mov.w	r0, #4294967295
   10ffc:	4770      	bx	lr
   10ffe:	2000      	movs	r0, #0
   11000:	4770      	bx	lr
   11002:	2000      	movs	r0, #0
   11004:	4770      	bx	lr
   11006:	f04f 30ff 	mov.w	r0, #4294967295
   1100a:	4770      	bx	lr
   1100c:	4770      	bx	lr
   1100e:	4770      	bx	lr
   11010:	2000      	movs	r0, #0
   11012:	4770      	bx	lr
   11014:	2100      	movs	r1, #0
   11016:	7001      	strb	r1, [r0, #0]
   11018:	4770      	bx	lr
   1101a:	f04f 30ff 	mov.w	r0, #4294967295
   1101e:	4770      	bx	lr
   11020:	f04f 30ff 	mov.w	r0, #4294967295
   11024:	4770      	bx	lr
   11026:	2100      	movs	r1, #0
   11028:	7001      	strb	r1, [r0, #0]
   1102a:	4770      	bx	lr
   1102c:	f04f 30ff 	mov.w	r0, #4294967295
   11030:	4770      	bx	lr
   11032:	f04f 30ff 	mov.w	r0, #4294967295
   11036:	4770      	bx	lr
   11038:	7800      	ldrb	r0, [r0, #0]
   1103a:	2800      	cmp	r0, #0
   1103c:	d001      	beq.n	11042 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x10a>
   1103e:	f06f 0015 	mvn.w	r0, #21
   11042:	4770      	bx	lr
   11044:	2000      	movs	r0, #0
   11046:	4770      	bx	lr
   11048:	2200      	movs	r2, #0
   1104a:	f000 b802 	b.w	11052 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA>

0001104e <mpsl_fem_init>:
   1104e:	f7f7 be9d 	b.w	8d8c <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>

00011052 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA>:
   11052:	b570      	push	{r4, r5, r6, lr}
   11054:	4614      	mov	r4, r2
   11056:	460d      	mov	r5, r1
   11058:	1b00      	subs	r0, r0, r4
   1105a:	f06f 017f 	mvn.w	r1, #127	; 0x7f
   1105e:	4288      	cmp	r0, r1
   11060:	da01      	bge.n	11066 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x14>
   11062:	4608      	mov	r0, r1
   11064:	e002      	b.n	1106c <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x1a>
   11066:	287f      	cmp	r0, #127	; 0x7f
   11068:	dd00      	ble.n	1106c <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x1a>
   1106a:	207f      	movs	r0, #127	; 0x7f
   1106c:	4619      	mov	r1, r3
   1106e:	b240      	sxtb	r0, r0
   11070:	f7f7 fec0 	bl	8df4 <mpsl_tx_power_radio_supported_power_adjust>
   11074:	7028      	strb	r0, [r5, #0]
   11076:	706c      	strb	r4, [r5, #1]
   11078:	2100      	movs	r1, #0
   1107a:	4420      	add	r0, r4
   1107c:	70a9      	strb	r1, [r5, #2]
   1107e:	b240      	sxtb	r0, r0
   11080:	bd70      	pop	{r4, r5, r6, pc}
   11082:	080c      	.short	0x080c
   11084:	010d1702 	.word	0x010d1702
   11088:	09090201 	.word	0x09090201
   1108c:	02060101 	.word	0x02060101
   11090:	03181809 	.word	0x03181809
   11094:	09090101 	.word	0x09090101
   11098:	03050303 	.word	0x03050303
   1109c:	02230102 	.word	0x02230102
   110a0:	10092402 	.word	0x10092402
   110a4:	05050404 	.word	0x05050404
   110a8:	0b040b0b 	.word	0x0b040b0b
   110ac:	2b          	.byte	0x2b
   110ad:	d8          	.byte	0xd8
   110ae:	f0ec      	.short	0xf0ec
   110b0:	00fcf8f4 	.word	0x00fcf8f4
   110b4:	05040302 	.word	0x05040302
   110b8:	00080706 	.word	0x00080706
	...
   110cc:	01000000 	.word	0x01000000
   110d0:	02010101 	.word	0x02010101
   110d4:	03020202 	.word	0x03020202
   110d8:	04030303 	.word	0x04030303
   110dc:	05040404 	.word	0x05040404
   110e0:	06050505 	.word	0x06050505
   110e4:	09080706 	.word	0x09080706
   110e8:	0d0c0b0a 	.word	0x0d0c0b0a
	...
   11100:	01010101 	.word	0x01010101
   11104:	02020202 	.word	0x02020202
   11108:	03030303 	.word	0x03030303
   1110c:	04040404 	.word	0x04040404
   11110:	05050505 	.word	0x05050505
   11114:	08060606 	.word	0x08060606
   11118:	00000009 	.word	0x00000009
   1111c:	00000000 	.word	0x00000000

00011120 <ExtractAlphaParameters>:
}

//------------------------------------------------------------------------------

static void ExtractAlphaParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
   11120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11124:	ed2d 8b04 	vpush	{d8-d9}
    uint8_t accRemScale;
    float alphaTemp[768];
    float temp;
    

    accRemScale = MLX90640_NIBBLE1(eeData[32]);
   11128:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
    accColumnScale = MLX90640_NIBBLE2(eeData[32]);
    accRowScale = MLX90640_NIBBLE3(eeData[32]);
    alphaScale = MLX90640_NIBBLE4(eeData[32]) + 30;
    alphaRef = eeData[33];
   1112c:	4606      	mov	r6, r0
{
   1112e:	f6ad 4dfc 	subw	sp, sp, #3324	; 0xcfc
    accColumnScale = MLX90640_NIBBLE2(eeData[32]);
   11132:	f3c3 1203 	ubfx	r2, r3, #4, #4
    accRemScale = MLX90640_NIBBLE1(eeData[32]);
   11136:	f003 050f 	and.w	r5, r3, #15
    accRowScale = MLX90640_NIBBLE3(eeData[32]);
   1113a:	f3c3 2b03 	ubfx	fp, r3, #8, #4
    alphaScale = MLX90640_NIBBLE4(eeData[32]) + 30;
   1113e:	0b1b      	lsrs	r3, r3, #12
   11140:	331e      	adds	r3, #30
   11142:	af06      	add	r7, sp, #24
    alphaRef = eeData[33];
   11144:	f836 af42 	ldrh.w	sl, [r6, #66]!
    accColumnScale = MLX90640_NIBBLE2(eeData[32]);
   11148:	9204      	str	r2, [sp, #16]
    alphaScale = MLX90640_NIBBLE4(eeData[32]) + 30;
   1114a:	9305      	str	r3, [sp, #20]
{
   1114c:	460c      	mov	r4, r1
   1114e:	f100 034e 	add.w	r3, r0, #78	; 0x4e
    alphaRef = eeData[33];
   11152:	463a      	mov	r2, r7
    
    for(int i = 0; i < 6; i++)
    {
        p = i * 4;
        accRow[p + 0] = MLX90640_NIBBLE1(eeData[34 + i]);
   11154:	f836 1f02 	ldrh.w	r1, [r6, #2]!
   11158:	f001 0c0f 	and.w	ip, r1, #15
   1115c:	f8c2 c000 	str.w	ip, [r2]
        accRow[p + 1] = MLX90640_NIBBLE2(eeData[34 + i]);
   11160:	f3c1 1c03 	ubfx	ip, r1, #4, #4
   11164:	f8c2 c004 	str.w	ip, [r2, #4]
    for(int i = 0; i < 6; i++)
   11168:	429e      	cmp	r6, r3
        accRow[p + 2] = MLX90640_NIBBLE3(eeData[34 + i]);
   1116a:	f3c1 2c03 	ubfx	ip, r1, #8, #4
        accRow[p + 3] = MLX90640_NIBBLE4(eeData[34 + i]);
   1116e:	ea4f 3111 	mov.w	r1, r1, lsr #12
        accRow[p + 2] = MLX90640_NIBBLE3(eeData[34 + i]);
   11172:	f8c2 c008 	str.w	ip, [r2, #8]
        accRow[p + 3] = MLX90640_NIBBLE4(eeData[34 + i]);
   11176:	60d1      	str	r1, [r2, #12]
    for(int i = 0; i < 6; i++)
   11178:	f102 0210 	add.w	r2, r2, #16
   1117c:	d1ea      	bne.n	11154 <ExtractAlphaParameters+0x34>
    }
    
    for(int i = 0; i < MLX90640_LINE_NUM; i++)
   1117e:	2100      	movs	r1, #0
    {
        if (accRow[i] > 7)
   11180:	f857 2b04 	ldr.w	r2, [r7], #4
   11184:	2a07      	cmp	r2, #7
        {
            accRow[i] = accRow[i] - 16;
   11186:	bfc8      	it	gt
   11188:	3a10      	subgt	r2, #16
    for(int i = 0; i < MLX90640_LINE_NUM; i++)
   1118a:	f101 0101 	add.w	r1, r1, #1
            accRow[i] = accRow[i] - 16;
   1118e:	bfc8      	it	gt
   11190:	f847 2c04 	strgt.w	r2, [r7, #-4]
    for(int i = 0; i < MLX90640_LINE_NUM; i++)
   11194:	2918      	cmp	r1, #24
   11196:	d1f3      	bne.n	11180 <ExtractAlphaParameters+0x60>
   11198:	ae1e      	add	r6, sp, #120	; 0x78
   1119a:	f100 075e 	add.w	r7, r0, #94	; 0x5e
   1119e:	4632      	mov	r2, r6
    }
    
    for(int i = 0; i < 8; i++)
    {
        p = i * 4;
        accColumn[p + 0] = MLX90640_NIBBLE1(eeData[40 + i]);
   111a0:	f833 1f02 	ldrh.w	r1, [r3, #2]!
   111a4:	f001 0c0f 	and.w	ip, r1, #15
   111a8:	f8c2 c000 	str.w	ip, [r2]
        accColumn[p + 1] = MLX90640_NIBBLE2(eeData[40 + i]);
   111ac:	f3c1 1c03 	ubfx	ip, r1, #4, #4
   111b0:	f8c2 c004 	str.w	ip, [r2, #4]
    for(int i = 0; i < 8; i++)
   111b4:	429f      	cmp	r7, r3
        accColumn[p + 2] = MLX90640_NIBBLE3(eeData[40 + i]);
   111b6:	f3c1 2c03 	ubfx	ip, r1, #8, #4
        accColumn[p + 3] = MLX90640_NIBBLE4(eeData[40 + i]);
   111ba:	ea4f 3111 	mov.w	r1, r1, lsr #12
        accColumn[p + 2] = MLX90640_NIBBLE3(eeData[40 + i]);
   111be:	f8c2 c008 	str.w	ip, [r2, #8]
        accColumn[p + 3] = MLX90640_NIBBLE4(eeData[40 + i]);
   111c2:	60d1      	str	r1, [r2, #12]
    for(int i = 0; i < 8; i++)
   111c4:	f102 0210 	add.w	r2, r2, #16
   111c8:	d1ea      	bne.n	111a0 <ExtractAlphaParameters+0x80>
    }
    
    for(int i = 0; i < MLX90640_COLUMN_NUM; i++)
   111ca:	2200      	movs	r2, #0
    {
        if (accColumn[i] > 7)
   111cc:	f856 3b04 	ldr.w	r3, [r6], #4
   111d0:	2b07      	cmp	r3, #7
        {
            accColumn[i] = accColumn[i] - 16;
   111d2:	bfc8      	it	gt
   111d4:	3b10      	subgt	r3, #16
    for(int i = 0; i < MLX90640_COLUMN_NUM; i++)
   111d6:	f102 0201 	add.w	r2, r2, #1
            accColumn[i] = accColumn[i] - 16;
   111da:	bfc8      	it	gt
   111dc:	f846 3c04 	strgt.w	r3, [r6, #-4]
    for(int i = 0; i < MLX90640_COLUMN_NUM; i++)
   111e0:	2a20      	cmp	r2, #32
   111e2:	d1f3      	bne.n	111cc <ExtractAlphaParameters+0xac>
            alphaTemp[p] = (eeData[64 + p] & 0x03F0) >> 4;
            if (alphaTemp[p] > 31)
            {
                alphaTemp[p] = alphaTemp[p] - 64;
            }
            alphaTemp[p] = alphaTemp[p]*(1 << accRemScale);
   111e4:	2301      	movs	r3, #1
   111e6:	40ab      	lsls	r3, r5
   111e8:	ee07 3a90 	vmov	s15, r3
            alphaTemp[p] = (alphaRef + (accRow[i] << accRowScale) + (accColumn[j] << accColumnScale) + alphaTemp[p]);
            alphaTemp[p] = alphaTemp[p] / POW2(alphaScale);
   111ec:	ed9f 9b6c 	vldr	d9, [pc, #432]	; 113a0 <ExtractAlphaParameters+0x280>
            alphaTemp[p] = alphaTemp[p]*(1 << accRemScale);
   111f0:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
                alphaTemp[p] = alphaTemp[p] - 64;
   111f4:	eddf 8a70 	vldr	s17, [pc, #448]	; 113b8 <ExtractAlphaParameters+0x298>
   111f8:	f100 057e 	add.w	r5, r0, #126	; 0x7e
    for(int i = 0; i < MLX90640_LINE_NUM; i++)
   111fc:	2700      	movs	r7, #0
        for(int j = 0; j < MLX90640_COLUMN_NUM; j ++)
   111fe:	ab3e      	add	r3, sp, #248	; 0xf8
   11200:	9301      	str	r3, [sp, #4]
   11202:	eb03 16c7 	add.w	r6, r3, r7, lsl #7
    for(int i = 0; i < MLX90640_COLUMN_NUM; i++)
   11206:	46a9      	mov	r9, r5
        for(int j = 0; j < MLX90640_COLUMN_NUM; j ++)
   11208:	f04f 0800 	mov.w	r8, #0
            alphaTemp[p] = (eeData[64 + p] & 0x03F0) >> 4;
   1120c:	f839 3f02 	ldrh.w	r3, [r9, #2]!
   11210:	f3c3 1305 	ubfx	r3, r3, #4, #6
   11214:	ee07 3a90 	vmov	s15, r3
   11218:	eef8 7ae7 	vcvt.f32.s32	s15, s15
            if (alphaTemp[p] > 31)
   1121c:	eeb3 7a0f 	vmov.f32	s14, #63	; 0x41f80000  31.0
   11220:	eef4 7ac7 	vcmpe.f32	s15, s14
   11224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                alphaTemp[p] = alphaTemp[p] - 64;
   11228:	bfc8      	it	gt
   1122a:	ee77 7ae8 	vsubgt.f32	s15, s15, s17
            alphaTemp[p] = (alphaRef + (accRow[i] << accRowScale) + (accColumn[j] << accColumnScale) + alphaTemp[p]);
   1122e:	ab06      	add	r3, sp, #24
                alphaTemp[p] = alphaTemp[p] - 64;
   11230:	edc6 7a00 	vstr	s15, [r6]
            alphaTemp[p] = (alphaRef + (accRow[i] << accRowScale) + (accColumn[j] << accColumnScale) + alphaTemp[p]);
   11234:	aa1e      	add	r2, sp, #120	; 0x78
   11236:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
   1123a:	f852 2028 	ldr.w	r2, [r2, r8, lsl #2]
   1123e:	9904      	ldr	r1, [sp, #16]
            alphaTemp[p] = alphaTemp[p]*(1 << accRemScale);
   11240:	ed96 7a00 	vldr	s14, [r6]
            alphaTemp[p] = (alphaRef + (accRow[i] << accRowScale) + (accColumn[j] << accColumnScale) + alphaTemp[p]);
   11244:	fa03 f30b 	lsl.w	r3, r3, fp
   11248:	408a      	lsls	r2, r1
   1124a:	4453      	add	r3, sl
   1124c:	4413      	add	r3, r2
   1124e:	ee07 3a90 	vmov	s15, r3
   11252:	eef8 7ae7 	vcvt.f32.s32	s15, s15
            alphaTemp[p] = alphaTemp[p] / POW2(alphaScale);
   11256:	ee47 7a08 	vmla.f32	s15, s14, s16
        for(int j = 0; j < MLX90640_COLUMN_NUM; j ++)
   1125a:	f108 0801 	add.w	r8, r8, #1
            alphaTemp[p] = alphaTemp[p] / POW2(alphaScale);
   1125e:	ee17 0a90 	vmov	r0, s15
   11262:	f7ef f8b1 	bl	3c8 <__aeabi_f2d>
   11266:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1126a:	9805      	ldr	r0, [sp, #20]
   1126c:	f7ef f88a 	bl	384 <__aeabi_ui2d>
   11270:	eeb0 0a49 	vmov.f32	s0, s18
   11274:	eef0 0a69 	vmov.f32	s1, s19
   11278:	ec41 0b11 	vmov	d1, r0, r1
   1127c:	f00f fece 	bl	2101c <pow>
   11280:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   11284:	ec53 2b10 	vmov	r2, r3, d0
   11288:	f7ef fa20 	bl	6cc <__aeabi_ddiv>
   1128c:	f7ef fbd6 	bl	a3c <__aeabi_d2f>
            alphaTemp[p] = alphaTemp[p] - mlx90640->tgc * (mlx90640->cpAlpha[0] + mlx90640->cpAlpha[1])/2;
   11290:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
   11294:	ed93 7a95 	vldr	s14, [r3, #596]	; 0x254
   11298:	edd3 7a94 	vldr	s15, [r3, #592]	; 0x250
   1129c:	ee77 7a87 	vadd.f32	s15, s15, s14
   112a0:	ed94 7a06 	vldr	s14, [r4, #24]
            alphaTemp[p] = alphaTemp[p] / POW2(alphaScale);
   112a4:	ee06 0a90 	vmov	s13, r0
            alphaTemp[p] = alphaTemp[p] - mlx90640->tgc * (mlx90640->cpAlpha[0] + mlx90640->cpAlpha[1])/2;
   112a8:	ee67 7a87 	vmul.f32	s15, s15, s14
            alphaTemp[p] = SCALEALPHA/alphaTemp[p];
   112ac:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   112b0:	ee47 6ac7 	vmls.f32	s13, s15, s14
   112b4:	ee16 0a90 	vmov	r0, s13
   112b8:	f7ef f886 	bl	3c8 <__aeabi_f2d>
   112bc:	4602      	mov	r2, r0
   112be:	460b      	mov	r3, r1
   112c0:	a139      	add	r1, pc, #228	; (adr r1, 113a8 <ExtractAlphaParameters+0x288>)
   112c2:	e9d1 0100 	ldrd	r0, r1, [r1]
   112c6:	f7ef fa01 	bl	6cc <__aeabi_ddiv>
   112ca:	f7ef fbb7 	bl	a3c <__aeabi_d2f>
        for(int j = 0; j < MLX90640_COLUMN_NUM; j ++)
   112ce:	f1b8 0f20 	cmp.w	r8, #32
            alphaTemp[p] = SCALEALPHA/alphaTemp[p];
   112d2:	f846 0b04 	str.w	r0, [r6], #4
        for(int j = 0; j < MLX90640_COLUMN_NUM; j ++)
   112d6:	d199      	bne.n	1120c <ExtractAlphaParameters+0xec>
    for(int i = 0; i < MLX90640_LINE_NUM; i++)
   112d8:	3701      	adds	r7, #1
   112da:	2f18      	cmp	r7, #24
   112dc:	f105 0540 	add.w	r5, r5, #64	; 0x40
   112e0:	d18d      	bne.n	111fe <ExtractAlphaParameters+0xde>
        }
    }
    
    temp = alphaTemp[0];
   112e2:	ed9d 8a3e 	vldr	s16, [sp, #248]	; 0xf8
    for(int i = 1; i < MLX90640_PIXEL_NUM; i++)
   112e6:	aa3f      	add	r2, sp, #252	; 0xfc
   112e8:	2301      	movs	r3, #1
    {
        if (alphaTemp[i] > temp)
   112ea:	ecf2 7a01 	vldmia	r2!, {s15}
        {
            temp = alphaTemp[i];
   112ee:	eef4 7a48 	vcmp.f32	s15, s16
   112f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    for(int i = 1; i < MLX90640_PIXEL_NUM; i++)
   112f6:	f103 0301 	add.w	r3, r3, #1
            temp = alphaTemp[i];
   112fa:	bfc8      	it	gt
   112fc:	eeb0 8a67 	vmovgt.f32	s16, s15
    for(int i = 1; i < MLX90640_PIXEL_NUM; i++)
   11300:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
   11304:	d1f1      	bne.n	112ea <ExtractAlphaParameters+0x1ca>
        }
    }
    
    alphaScale = 0;
    while(temp < 32767.4)
   11306:	a72a      	add	r7, pc, #168	; (adr r7, 113b0 <ExtractAlphaParameters+0x290>)
   11308:	e9d7 6700 	ldrd	r6, r7, [r7]
   1130c:	2500      	movs	r5, #0
   1130e:	ee18 0a10 	vmov	r0, s16
   11312:	f7ef f859 	bl	3c8 <__aeabi_f2d>
   11316:	4632      	mov	r2, r6
   11318:	463b      	mov	r3, r7
   1131a:	f105 0801 	add.w	r8, r5, #1
   1131e:	f7ef fb1d 	bl	95c <__aeabi_dcmplt>
   11322:	bbc8      	cbnz	r0, 11398 <ExtractAlphaParameters+0x278>
        alphaScale = alphaScale + 1;
    } 
    
    for(int i = 0; i < MLX90640_PIXEL_NUM; i++)
    {
        temp = alphaTemp[i] * POW2(alphaScale);        
   11324:	ed9f 8b1e 	vldr	d8, [pc, #120]	; 113a0 <ExtractAlphaParameters+0x280>
        mlx90640->alpha[i] = (temp + 0.5);        
   11328:	f8df 9090 	ldr.w	r9, [pc, #144]	; 113bc <ExtractAlphaParameters+0x29c>
   1132c:	b2ed      	uxtb	r5, r5
   1132e:	f104 0a48 	add.w	sl, r4, #72	; 0x48
   11332:	f504 6bc9 	add.w	fp, r4, #1608	; 0x648
   11336:	f04f 0800 	mov.w	r8, #0
        temp = alphaTemp[i] * POW2(alphaScale);        
   1133a:	9b01      	ldr	r3, [sp, #4]
   1133c:	f853 0b04 	ldr.w	r0, [r3], #4
   11340:	9301      	str	r3, [sp, #4]
   11342:	f7ef f841 	bl	3c8 <__aeabi_f2d>
   11346:	4606      	mov	r6, r0
   11348:	4628      	mov	r0, r5
   1134a:	460f      	mov	r7, r1
   1134c:	f7ef f81a 	bl	384 <__aeabi_ui2d>
   11350:	eeb0 0a48 	vmov.f32	s0, s16
   11354:	eef0 0a68 	vmov.f32	s1, s17
   11358:	ec41 0b11 	vmov	d1, r0, r1
   1135c:	f00f fe5e 	bl	2101c <pow>
   11360:	4630      	mov	r0, r6
   11362:	ec53 2b10 	vmov	r2, r3, d0
   11366:	4639      	mov	r1, r7
   11368:	f7ef f886 	bl	478 <__aeabi_dmul>
   1136c:	f7ef fb66 	bl	a3c <__aeabi_d2f>
        mlx90640->alpha[i] = (temp + 0.5);        
   11370:	f7ef f82a 	bl	3c8 <__aeabi_f2d>
   11374:	4642      	mov	r2, r8
   11376:	464b      	mov	r3, r9
   11378:	f7ee fec8 	bl	10c <__adddf3>
   1137c:	f7ef fb3e 	bl	9fc <__aeabi_d2uiz>
   11380:	f82a 0f02 	strh.w	r0, [sl, #2]!
    for(int i = 0; i < MLX90640_PIXEL_NUM; i++)
   11384:	45d3      	cmp	fp, sl
   11386:	d1d8      	bne.n	1133a <ExtractAlphaParameters+0x21a>
        
    } 
    
    mlx90640->alphaScale = alphaScale;      
   11388:	f884 564a 	strb.w	r5, [r4, #1610]	; 0x64a
   
}
   1138c:	f60d 4dfc 	addw	sp, sp, #3324	; 0xcfc
   11390:	ecbd 8b04 	vpop	{d8-d9}
   11394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = temp*2;
   11398:	ee38 8a08 	vadd.f32	s16, s16, s16
   1139c:	4645      	mov	r5, r8
   1139e:	e7b6      	b.n	1130e <ExtractAlphaParameters+0x1ee>
   113a0:	00000000 	.word	0x00000000
   113a4:	40000000 	.word	0x40000000
   113a8:	a0b5ed8d 	.word	0xa0b5ed8d
   113ac:	3eb0c6f7 	.word	0x3eb0c6f7
   113b0:	9999999a 	.word	0x9999999a
   113b4:	40dfffd9 	.word	0x40dfffd9
   113b8:	42800000 	.word	0x42800000
   113bc:	3fe00000 	.word	0x3fe00000

000113c0 <ExtractKtaPixelParameters>:
}

//------------------------------------------------------------------------------

static void ExtractKtaPixelParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
   113c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   113c4:	ed2d 8b04 	vpush	{d8-d9}
   113c8:	f6ad 4d1c 	subw	sp, sp, #3100	; 0xc1c
    uint8_t ktaScale2;
    uint8_t split;
    float ktaTemp[768];
    float temp;
    
    KtaRC[0] = (int8_t)MLX90640_MS_BYTE(eeData[54]);;
   113cc:	f10d 0814 	add.w	r8, sp, #20
   113d0:	f8b0 306c 	ldrh.w	r3, [r0, #108]	; 0x6c
    KtaRC[2] = (int8_t)MLX90640_LS_BYTE(eeData[54]);;
   113d4:	f888 3002 	strb.w	r3, [r8, #2]
    KtaRC[0] = (int8_t)MLX90640_MS_BYTE(eeData[54]);;
   113d8:	0a1a      	lsrs	r2, r3, #8
    KtaRC[1] = (int8_t)MLX90640_MS_BYTE(eeData[55]);;
   113da:	f8b0 306e 	ldrh.w	r3, [r0, #110]	; 0x6e
    KtaRC[0] = (int8_t)MLX90640_MS_BYTE(eeData[54]);;
   113de:	f888 2000 	strb.w	r2, [r8]
    KtaRC[3] = (int8_t)MLX90640_LS_BYTE(eeData[55]);;
   113e2:	f888 3003 	strb.w	r3, [r8, #3]
    KtaRC[1] = (int8_t)MLX90640_MS_BYTE(eeData[55]);;
   113e6:	0a1a      	lsrs	r2, r3, #8
      
    ktaScale1 = MLX90640_NIBBLE2(eeData[56]) + 8;
   113e8:	f8b0 3070 	ldrh.w	r3, [r0, #112]	; 0x70
    KtaRC[1] = (int8_t)MLX90640_MS_BYTE(eeData[55]);;
   113ec:	f888 2001 	strb.w	r2, [r8, #1]
    ktaScale1 = MLX90640_NIBBLE2(eeData[56]) + 8;
   113f0:	f3c3 1203 	ubfx	r2, r3, #4, #4
   113f4:	3208      	adds	r2, #8
   113f6:	9203      	str	r2, [sp, #12]
            ktaTemp[p] = (eeData[64 + p] & 0x000E) >> 1;
            if (ktaTemp[p] > 3)
            {
                ktaTemp[p] = ktaTemp[p] - 8;
            }
            ktaTemp[p] = ktaTemp[p] * (1 << ktaScale2);
   113f8:	f003 020f 	and.w	r2, r3, #15
   113fc:	2301      	movs	r3, #1
   113fe:	4093      	lsls	r3, r2
   11400:	ee07 3a90 	vmov	s15, r3
            ktaTemp[p] = KtaRC[split] + ktaTemp[p];
            ktaTemp[p] = ktaTemp[p] / POW2(ktaScale1);
   11404:	ed9f 9b76 	vldr	d9, [pc, #472]	; 115e0 <ExtractKtaPixelParameters+0x220>
   11408:	ad06      	add	r5, sp, #24
            ktaTemp[p] = ktaTemp[p] * (1 << ktaScale2);
   1140a:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
{
   1140e:	468b      	mov	fp, r1
            ktaTemp[p] = ktaTemp[p] * (1 << ktaScale2);
   11410:	46aa      	mov	sl, r5
   11412:	f04f 0900 	mov.w	r9, #0
            ktaTemp[p] = (eeData[64 + p] & 0x000E) >> 1;
   11416:	f100 0680 	add.w	r6, r0, #128	; 0x80
            if (ktaTemp[p] > 3)
   1141a:	eef0 8a08 	vmov.f32	s17, #8	; 0x40400000  3.0
{
   1141e:	4657      	mov	r7, sl
   11420:	464c      	mov	r4, r9
            split = 2*(p/32 - (p/64)*2) + p%2;
   11422:	f3c4 1340 	ubfx	r3, r4, #5, #1
   11426:	f004 0201 	and.w	r2, r4, #1
   1142a:	eb02 0243 	add.w	r2, r2, r3, lsl #1
            ktaTemp[p] = (eeData[64 + p] & 0x000E) >> 1;
   1142e:	f836 3014 	ldrh.w	r3, [r6, r4, lsl #1]
   11432:	f3c3 0342 	ubfx	r3, r3, #1, #3
   11436:	ee07 3a90 	vmov	s15, r3
   1143a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        for(int j = 0; j < MLX90640_COLUMN_NUM; j ++)
   1143e:	3401      	adds	r4, #1
            if (ktaTemp[p] > 3)
   11440:	eef4 7ae8 	vcmpe.f32	s15, s17
   11444:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                ktaTemp[p] = ktaTemp[p] - 8;
   11448:	bfc4      	itt	gt
   1144a:	eeb2 7a00 	vmovgt.f32	s14, #32	; 0x41000000  8.0
   1144e:	ee77 7ac7 	vsubgt.f32	s15, s15, s14
   11452:	edc7 7a00 	vstr	s15, [r7]
            ktaTemp[p] = KtaRC[split] + ktaTemp[p];
   11456:	f918 3002 	ldrsb.w	r3, [r8, r2]
            ktaTemp[p] = ktaTemp[p] * (1 << ktaScale2);
   1145a:	ed97 7a00 	vldr	s14, [r7]
            ktaTemp[p] = KtaRC[split] + ktaTemp[p];
   1145e:	ee07 3a90 	vmov	s15, r3
   11462:	eef8 7ae7 	vcvt.f32.s32	s15, s15
            ktaTemp[p] = ktaTemp[p] / POW2(ktaScale1);
   11466:	ee47 7a08 	vmla.f32	s15, s14, s16
   1146a:	ee17 0a90 	vmov	r0, s15
   1146e:	f7ee ffab 	bl	3c8 <__aeabi_f2d>
   11472:	e9cd 0100 	strd	r0, r1, [sp]
   11476:	9803      	ldr	r0, [sp, #12]
   11478:	f7ee ff84 	bl	384 <__aeabi_ui2d>
   1147c:	eeb0 0a49 	vmov.f32	s0, s18
   11480:	eef0 0a69 	vmov.f32	s1, s19
   11484:	ec41 0b11 	vmov	d1, r0, r1
   11488:	f00f fdc8 	bl	2101c <pow>
   1148c:	e9dd 0100 	ldrd	r0, r1, [sp]
   11490:	ec53 2b10 	vmov	r2, r3, d0
   11494:	f7ef f91a 	bl	6cc <__aeabi_ddiv>
   11498:	f7ef fad0 	bl	a3c <__aeabi_d2f>
   1149c:	f109 0320 	add.w	r3, r9, #32
        for(int j = 0; j < MLX90640_COLUMN_NUM; j ++)
   114a0:	42a3      	cmp	r3, r4
            ktaTemp[p] = ktaTemp[p] / POW2(ktaScale1);
   114a2:	f847 0b04 	str.w	r0, [r7], #4
        for(int j = 0; j < MLX90640_COLUMN_NUM; j ++)
   114a6:	d1bc      	bne.n	11422 <ExtractKtaPixelParameters+0x62>
    for(int i = 0; i < MLX90640_LINE_NUM; i++)
   114a8:	f5b4 7f40 	cmp.w	r4, #768	; 0x300
   114ac:	f10a 0a80 	add.w	sl, sl, #128	; 0x80
   114b0:	d001      	beq.n	114b6 <ExtractKtaPixelParameters+0xf6>
   114b2:	46a1      	mov	r9, r4
   114b4:	e7b3      	b.n	1141e <ExtractKtaPixelParameters+0x5e>
            
        }
    }
    
    temp = fabs(ktaTemp[0]);
   114b6:	6828      	ldr	r0, [r5, #0]
   114b8:	f7ee ff86 	bl	3c8 <__aeabi_f2d>
   114bc:	ec41 0b10 	vmov	d0, r0, r1
   114c0:	f013 fe0a 	bl	250d8 <fabs>
   114c4:	ec51 0b10 	vmov	r0, r1, d0
   114c8:	f7ef fab8 	bl	a3c <__aeabi_d2f>
   114cc:	ee08 0a10 	vmov	s16, r0
    for(int i = 1; i < MLX90640_PIXEL_NUM; i++)
   114d0:	f10d 081c 	add.w	r8, sp, #28
   114d4:	2401      	movs	r4, #1
    {
        if (fabs(ktaTemp[i]) > temp)
   114d6:	f858 0b04 	ldr.w	r0, [r8], #4
   114da:	f7ee ff75 	bl	3c8 <__aeabi_f2d>
   114de:	ec41 0b19 	vmov	d9, r0, r1
   114e2:	eeb0 0a49 	vmov.f32	s0, s18
   114e6:	eef0 0a69 	vmov.f32	s1, s19
   114ea:	f013 fdf5 	bl	250d8 <fabs>
   114ee:	ee18 0a10 	vmov	r0, s16
   114f2:	ec57 6b10 	vmov	r6, r7, d0
   114f6:	f7ee ff67 	bl	3c8 <__aeabi_f2d>
   114fa:	4602      	mov	r2, r0
   114fc:	460b      	mov	r3, r1
   114fe:	4630      	mov	r0, r6
   11500:	4639      	mov	r1, r7
   11502:	f7ef fa49 	bl	998 <__aeabi_dcmpgt>
   11506:	b158      	cbz	r0, 11520 <ExtractKtaPixelParameters+0x160>
        {
            temp = fabs(ktaTemp[i]);
   11508:	eeb0 0a49 	vmov.f32	s0, s18
   1150c:	eef0 0a69 	vmov.f32	s1, s19
   11510:	f013 fde2 	bl	250d8 <fabs>
   11514:	ec51 0b10 	vmov	r0, r1, d0
   11518:	f7ef fa90 	bl	a3c <__aeabi_d2f>
   1151c:	ee08 0a10 	vmov	s16, r0
    for(int i = 1; i < MLX90640_PIXEL_NUM; i++)
   11520:	3401      	adds	r4, #1
   11522:	f5b4 7f40 	cmp.w	r4, #768	; 0x300
   11526:	d1d6      	bne.n	114d6 <ExtractKtaPixelParameters+0x116>
        }
    }
    
    ktaScale1 = 0;
    while(temp < 63.4)
   11528:	a72f      	add	r7, pc, #188	; (adr r7, 115e8 <ExtractKtaPixelParameters+0x228>)
   1152a:	e9d7 6700 	ldrd	r6, r7, [r7]
   1152e:	2400      	movs	r4, #0
   11530:	ee18 0a10 	vmov	r0, s16
   11534:	f7ee ff48 	bl	3c8 <__aeabi_f2d>
   11538:	4632      	mov	r2, r6
   1153a:	463b      	mov	r3, r7
   1153c:	f104 0801 	add.w	r8, r4, #1
   11540:	f7ef fa0c 	bl	95c <__aeabi_dcmplt>
   11544:	2800      	cmp	r0, #0
   11546:	d13f      	bne.n	115c8 <ExtractKtaPixelParameters+0x208>
        ktaScale1 = ktaScale1 + 1;
    }    
     
    for(int i = 0; i < MLX90640_PIXEL_NUM; i++)
    {
        temp = ktaTemp[i] * POW2(ktaScale1);
   11548:	ed9f 8b25 	vldr	d8, [pc, #148]	; 115e0 <ExtractKtaPixelParameters+0x220>
        {
            mlx90640->kta[i] = (temp - 0.5);
        }
        else
        {
            mlx90640->kta[i] = (temp + 0.5);
   1154c:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 115f0 <ExtractKtaPixelParameters+0x230>
   11550:	b2e4      	uxtb	r4, r4
   11552:	f60b 4a4b 	addw	sl, fp, #3147	; 0xc4b
   11556:	f60b 764b 	addw	r6, fp, #3915	; 0xf4b
   1155a:	f04f 0800 	mov.w	r8, #0
        temp = ktaTemp[i] * POW2(ktaScale1);
   1155e:	f855 0b04 	ldr.w	r0, [r5], #4
   11562:	f7ee ff31 	bl	3c8 <__aeabi_f2d>
   11566:	e9cd 0100 	strd	r0, r1, [sp]
   1156a:	4620      	mov	r0, r4
   1156c:	f7ee ff0a 	bl	384 <__aeabi_ui2d>
   11570:	eeb0 0a48 	vmov.f32	s0, s16
   11574:	eef0 0a68 	vmov.f32	s1, s17
   11578:	ec41 0b11 	vmov	d1, r0, r1
   1157c:	f00f fd4e 	bl	2101c <pow>
   11580:	e9dd 0100 	ldrd	r0, r1, [sp]
   11584:	ec53 2b10 	vmov	r2, r3, d0
   11588:	f7ee ff76 	bl	478 <__aeabi_dmul>
   1158c:	f7ef fa56 	bl	a3c <__aeabi_d2f>
   11590:	ee07 0a90 	vmov	s15, r0
        if (temp < 0)
   11594:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   11598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1159c:	d518      	bpl.n	115d0 <ExtractKtaPixelParameters+0x210>
            mlx90640->kta[i] = (temp - 0.5);
   1159e:	f7ee ff13 	bl	3c8 <__aeabi_f2d>
   115a2:	4642      	mov	r2, r8
   115a4:	464b      	mov	r3, r9
   115a6:	f7ee fdaf 	bl	108 <__aeabi_dsub>
            mlx90640->kta[i] = (temp + 0.5);
   115aa:	f7ef f9ff 	bl	9ac <__aeabi_d2iz>
   115ae:	b240      	sxtb	r0, r0
   115b0:	f80a 0f01 	strb.w	r0, [sl, #1]!
    for(int i = 0; i < MLX90640_PIXEL_NUM; i++)
   115b4:	4556      	cmp	r6, sl
   115b6:	d1d2      	bne.n	1155e <ExtractKtaPixelParameters+0x19e>
        }        
        
    } 
    
    mlx90640->ktaScale = ktaScale1;           
   115b8:	f88b 4f4c 	strb.w	r4, [fp, #3916]	; 0xf4c
}
   115bc:	f60d 4d1c 	addw	sp, sp, #3100	; 0xc1c
   115c0:	ecbd 8b04 	vpop	{d8-d9}
   115c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = temp*2;
   115c8:	ee38 8a08 	vadd.f32	s16, s16, s16
   115cc:	4644      	mov	r4, r8
   115ce:	e7af      	b.n	11530 <ExtractKtaPixelParameters+0x170>
            mlx90640->kta[i] = (temp + 0.5);
   115d0:	f7ee fefa 	bl	3c8 <__aeabi_f2d>
   115d4:	4642      	mov	r2, r8
   115d6:	464b      	mov	r3, r9
   115d8:	f7ee fd98 	bl	10c <__adddf3>
   115dc:	e7e5      	b.n	115aa <ExtractKtaPixelParameters+0x1ea>
   115de:	bf00      	nop
   115e0:	00000000 	.word	0x00000000
   115e4:	40000000 	.word	0x40000000
   115e8:	33333333 	.word	0x33333333
   115ec:	404fb333 	.word	0x404fb333
   115f0:	3fe00000 	.word	0x3fe00000
   115f4:	00000000 	.word	0x00000000

000115f8 <ExtractKvPixelParameters>:


//------------------------------------------------------------------------------

static void ExtractKvPixelParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
   115f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   115fc:	ed2d 8b04 	vpush	{d8-d9}
    uint8_t kvScale;
    uint8_t split;
    float kvTemp[768];
    float temp;

    KvRoCo = MLX90640_NIBBLE4(eeData[52]);
   11600:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
{
   11604:	f6ad 4d14 	subw	sp, sp, #3092	; 0xc14
    KvRoCo = MLX90640_NIBBLE4(eeData[52]);
   11608:	0b1a      	lsrs	r2, r3, #12
    if (KvRoCo > 7)
   1160a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    {
        KvRoCo = KvRoCo - 16;
    }
    KvT[0] = KvRoCo;
   1160e:	ad03      	add	r5, sp, #12
        KvRoCo = KvRoCo - 16;
   11610:	bf28      	it	cs
   11612:	3a10      	subcs	r2, #16
   11614:	b252      	sxtb	r2, r2
    
    KvReCo = MLX90640_NIBBLE3(eeData[52]);
    if (KvReCo > 7)
   11616:	051e      	lsls	r6, r3, #20
    KvT[0] = KvRoCo;
   11618:	702a      	strb	r2, [r5, #0]
    KvReCo = MLX90640_NIBBLE3(eeData[52]);
   1161a:	f3c3 2203 	ubfx	r2, r3, #8, #4
    {
        KvReCo = KvReCo - 16;
   1161e:	bf48      	it	mi
   11620:	3a10      	submi	r2, #16
{
   11622:	460c      	mov	r4, r1
    }
    KvT[2] = KvReCo;
   11624:	70aa      	strb	r2, [r5, #2]
      
    KvRoCe = MLX90640_NIBBLE2(eeData[52]);
    if (KvRoCe > 7)
   11626:	0619      	lsls	r1, r3, #24
    KvRoCe = MLX90640_NIBBLE2(eeData[52]);
   11628:	f3c3 1203 	ubfx	r2, r3, #4, #4
    {
        KvRoCe = KvRoCe - 16;
   1162c:	bf48      	it	mi
   1162e:	3a10      	submi	r2, #16
    }
    KvT[1] = KvRoCe;
   11630:	706a      	strb	r2, [r5, #1]
        for(int j = 0; j < MLX90640_COLUMN_NUM; j ++)
        {
            p = 32 * i +j;
            split = 2*(p/32 - (p/64)*2) + p%2;
            kvTemp[p] = KvT[split];
            kvTemp[p] = kvTemp[p] / POW2(kvScale);
   11632:	ed9f 8b6d 	vldr	d8, [pc, #436]	; 117e8 <ExtractKvPixelParameters+0x1f0>
    KvReCe = MLX90640_NIBBLE1(eeData[52]);
   11636:	f003 020f 	and.w	r2, r3, #15
    if (KvReCe > 7)
   1163a:	071b      	lsls	r3, r3, #28
    kvScale = MLX90640_NIBBLE3(eeData[56]);
   1163c:	f8b0 3070 	ldrh.w	r3, [r0, #112]	; 0x70
        KvReCe = KvReCe - 16;
   11640:	bf48      	it	mi
   11642:	3a10      	submi	r2, #16
    KvT[3] = KvReCe;
   11644:	ae04      	add	r6, sp, #16
   11646:	70ea      	strb	r2, [r5, #3]
    kvScale = MLX90640_NIBBLE3(eeData[56]);
   11648:	f3c3 2b03 	ubfx	fp, r3, #8, #4
   1164c:	46b1      	mov	r9, r6
   1164e:	f04f 0800 	mov.w	r8, #0
{
   11652:	46ca      	mov	sl, r9
        for(int j = 0; j < MLX90640_COLUMN_NUM; j ++)
   11654:	2700      	movs	r7, #0
            p = 32 * i +j;
   11656:	eb07 0308 	add.w	r3, r7, r8
            split = 2*(p/32 - (p/64)*2) + p%2;
   1165a:	f3c3 1240 	ubfx	r2, r3, #5, #1
   1165e:	f003 0301 	and.w	r3, r3, #1
            kvTemp[p] = KvT[split];
   11662:	eb03 0342 	add.w	r3, r3, r2, lsl #1
        for(int j = 0; j < MLX90640_COLUMN_NUM; j ++)
   11666:	3701      	adds	r7, #1
            kvTemp[p] = KvT[split];
   11668:	56e8      	ldrsb	r0, [r5, r3]
            kvTemp[p] = kvTemp[p] / POW2(kvScale);
   1166a:	ee07 0a90 	vmov	s15, r0
   1166e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   11672:	ee17 0a90 	vmov	r0, s15
   11676:	f7ee fea7 	bl	3c8 <__aeabi_f2d>
   1167a:	e9cd 0100 	strd	r0, r1, [sp]
   1167e:	4658      	mov	r0, fp
   11680:	f7ee fe80 	bl	384 <__aeabi_ui2d>
   11684:	eeb0 0a48 	vmov.f32	s0, s16
   11688:	eef0 0a68 	vmov.f32	s1, s17
   1168c:	ec41 0b11 	vmov	d1, r0, r1
   11690:	f00f fcc4 	bl	2101c <pow>
   11694:	e9dd 0100 	ldrd	r0, r1, [sp]
   11698:	ec53 2b10 	vmov	r2, r3, d0
   1169c:	f7ef f816 	bl	6cc <__aeabi_ddiv>
   116a0:	f7ef f9cc 	bl	a3c <__aeabi_d2f>
        for(int j = 0; j < MLX90640_COLUMN_NUM; j ++)
   116a4:	2f20      	cmp	r7, #32
            kvTemp[p] = kvTemp[p] / POW2(kvScale);
   116a6:	f84a 0b04 	str.w	r0, [sl], #4
        for(int j = 0; j < MLX90640_COLUMN_NUM; j ++)
   116aa:	d1d4      	bne.n	11656 <ExtractKvPixelParameters+0x5e>
    for(int i = 0; i < MLX90640_LINE_NUM; i++)
   116ac:	f108 0820 	add.w	r8, r8, #32
   116b0:	f5b8 7f40 	cmp.w	r8, #768	; 0x300
   116b4:	f109 0980 	add.w	r9, r9, #128	; 0x80
   116b8:	d1cb      	bne.n	11652 <ExtractKvPixelParameters+0x5a>
        }
    }
    
    temp = fabs(kvTemp[0]);
   116ba:	6830      	ldr	r0, [r6, #0]
   116bc:	f7ee fe84 	bl	3c8 <__aeabi_f2d>
   116c0:	ec41 0b10 	vmov	d0, r0, r1
   116c4:	f013 fd08 	bl	250d8 <fabs>
   116c8:	ec51 0b10 	vmov	r0, r1, d0
   116cc:	f7ef f9b6 	bl	a3c <__aeabi_d2f>
   116d0:	ee08 0a10 	vmov	s16, r0
    for(int i = 1; i < MLX90640_PIXEL_NUM; i++)
   116d4:	af05      	add	r7, sp, #20
   116d6:	2501      	movs	r5, #1
    {
        if (fabs(kvTemp[i]) > temp)
   116d8:	f857 0b04 	ldr.w	r0, [r7], #4
   116dc:	f7ee fe74 	bl	3c8 <__aeabi_f2d>
   116e0:	ec41 0b19 	vmov	d9, r0, r1
   116e4:	eeb0 0a49 	vmov.f32	s0, s18
   116e8:	eef0 0a69 	vmov.f32	s1, s19
   116ec:	f013 fcf4 	bl	250d8 <fabs>
   116f0:	ee18 0a10 	vmov	r0, s16
   116f4:	ec59 8b10 	vmov	r8, r9, d0
   116f8:	f7ee fe66 	bl	3c8 <__aeabi_f2d>
   116fc:	4602      	mov	r2, r0
   116fe:	460b      	mov	r3, r1
   11700:	4640      	mov	r0, r8
   11702:	4649      	mov	r1, r9
   11704:	f7ef f948 	bl	998 <__aeabi_dcmpgt>
   11708:	b158      	cbz	r0, 11722 <ExtractKvPixelParameters+0x12a>
        {
            temp = fabs(kvTemp[i]);
   1170a:	eeb0 0a49 	vmov.f32	s0, s18
   1170e:	eef0 0a69 	vmov.f32	s1, s19
   11712:	f013 fce1 	bl	250d8 <fabs>
   11716:	ec51 0b10 	vmov	r0, r1, d0
   1171a:	f7ef f98f 	bl	a3c <__aeabi_d2f>
   1171e:	ee08 0a10 	vmov	s16, r0
    for(int i = 1; i < MLX90640_PIXEL_NUM; i++)
   11722:	3501      	adds	r5, #1
   11724:	f5b5 7f40 	cmp.w	r5, #768	; 0x300
   11728:	d1d6      	bne.n	116d8 <ExtractKvPixelParameters+0xe0>
        }
    }
    
    kvScale = 0;
    while(temp < 63.4)
   1172a:	f20f 09c4 	addw	r9, pc, #196	; 0xc4
   1172e:	e9d9 8900 	ldrd	r8, r9, [r9]
   11732:	2500      	movs	r5, #0
   11734:	ee18 0a10 	vmov	r0, s16
   11738:	f7ee fe46 	bl	3c8 <__aeabi_f2d>
   1173c:	4642      	mov	r2, r8
   1173e:	464b      	mov	r3, r9
   11740:	1c6f      	adds	r7, r5, #1
   11742:	f7ef f90b 	bl	95c <__aeabi_dcmplt>
   11746:	2800      	cmp	r0, #0
   11748:	d143      	bne.n	117d2 <ExtractKvPixelParameters+0x1da>
        kvScale = kvScale + 1;
    }    
     
    for(int i = 0; i < MLX90640_PIXEL_NUM; i++)
    {
        temp = kvTemp[i] * POW2(kvScale);
   1174a:	ed9f 8b27 	vldr	d8, [pc, #156]	; 117e8 <ExtractKvPixelParameters+0x1f0>
   1174e:	f504 5a92 	add.w	sl, r4, #4672	; 0x1240
        {
            mlx90640->kv[i] = (temp - 0.5);
        }
        else
        {
            mlx90640->kv[i] = (temp + 0.5);
   11752:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 117f8 <ExtractKvPixelParameters+0x200>
   11756:	b2ed      	uxtb	r5, r5
   11758:	f604 774c 	addw	r7, r4, #3916	; 0xf4c
   1175c:	f10a 0a0c 	add.w	sl, sl, #12
   11760:	f04f 0800 	mov.w	r8, #0
        temp = kvTemp[i] * POW2(kvScale);
   11764:	f856 0b04 	ldr.w	r0, [r6], #4
   11768:	f7ee fe2e 	bl	3c8 <__aeabi_f2d>
   1176c:	e9cd 0100 	strd	r0, r1, [sp]
   11770:	4628      	mov	r0, r5
   11772:	f7ee fe07 	bl	384 <__aeabi_ui2d>
   11776:	eeb0 0a48 	vmov.f32	s0, s16
   1177a:	eef0 0a68 	vmov.f32	s1, s17
   1177e:	ec41 0b11 	vmov	d1, r0, r1
   11782:	f00f fc4b 	bl	2101c <pow>
   11786:	e9dd 0100 	ldrd	r0, r1, [sp]
   1178a:	ec53 2b10 	vmov	r2, r3, d0
   1178e:	f7ee fe73 	bl	478 <__aeabi_dmul>
   11792:	f7ef f953 	bl	a3c <__aeabi_d2f>
   11796:	ee07 0a90 	vmov	s15, r0
        if (temp < 0)
   1179a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   1179e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   117a2:	d51a      	bpl.n	117da <ExtractKvPixelParameters+0x1e2>
            mlx90640->kv[i] = (temp - 0.5);
   117a4:	f7ee fe10 	bl	3c8 <__aeabi_f2d>
   117a8:	4642      	mov	r2, r8
   117aa:	464b      	mov	r3, r9
   117ac:	f7ee fcac 	bl	108 <__aeabi_dsub>
            mlx90640->kv[i] = (temp + 0.5);
   117b0:	f7ef f8fc 	bl	9ac <__aeabi_d2iz>
   117b4:	b240      	sxtb	r0, r0
   117b6:	f807 0f01 	strb.w	r0, [r7, #1]!
    for(int i = 0; i < MLX90640_PIXEL_NUM; i++)
   117ba:	45ba      	cmp	sl, r7
   117bc:	d1d2      	bne.n	11764 <ExtractKvPixelParameters+0x16c>
        }        
        
    } 
    
    mlx90640->kvScale = kvScale;        
   117be:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
   117c2:	f884 524d 	strb.w	r5, [r4, #589]	; 0x24d
}
   117c6:	f60d 4d14 	addw	sp, sp, #3092	; 0xc14
   117ca:	ecbd 8b04 	vpop	{d8-d9}
   117ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = temp*2;
   117d2:	ee38 8a08 	vadd.f32	s16, s16, s16
   117d6:	463d      	mov	r5, r7
   117d8:	e7ac      	b.n	11734 <ExtractKvPixelParameters+0x13c>
            mlx90640->kv[i] = (temp + 0.5);
   117da:	f7ee fdf5 	bl	3c8 <__aeabi_f2d>
   117de:	4642      	mov	r2, r8
   117e0:	464b      	mov	r3, r9
   117e2:	f7ee fc93 	bl	10c <__adddf3>
   117e6:	e7e3      	b.n	117b0 <ExtractKvPixelParameters+0x1b8>
   117e8:	00000000 	.word	0x00000000
   117ec:	40000000 	.word	0x40000000
   117f0:	33333333 	.word	0x33333333
   117f4:	404fb333 	.word	0x404fb333
   117f8:	3fe00000 	.word	0x3fe00000
   117fc:	00000000 	.word	0x00000000

00011800 <MLX90640_ExtractParameters>:
{
   11800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11804:	ed2d 8b06 	vpush	{d8-d10}
    kVdd = MLX90640_MS_BYTE(eeData[51]);
   11808:	f8b0 3066 	ldrh.w	r3, [r0, #102]	; 0x66
    mlx90640->kVdd = 32 * kVdd;
   1180c:	f990 2067 	ldrsb.w	r2, [r0, #103]	; 0x67
    if(KtPTAT > 511)
   11810:	ed9f aae7 	vldr	s20, [pc, #924]	; 11bb0 <MLX90640_ExtractParameters+0x3b0>
    vdd25 = ((vdd25 - 256) << 5) - 8192;
   11814:	f063 03ff 	orn	r3, r3, #255	; 0xff
   11818:	015b      	lsls	r3, r3, #5
    mlx90640->kVdd = 32 * kVdd;
   1181a:	0152      	lsls	r2, r2, #5
    vdd25 = ((vdd25 - 256) << 5) - 8192;
   1181c:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
    mlx90640->kVdd = 32 * kVdd;
   11820:	800a      	strh	r2, [r1, #0]
    mlx90640->vdd25 = vdd25; 
   11822:	804b      	strh	r3, [r1, #2]
    KvPTAT = (eeData[50] & MLX90640_MSBITS_6_MASK) >> 10;
   11824:	f8b0 3064 	ldrh.w	r3, [r0, #100]	; 0x64
    vPTAT25 = eeData[49];
   11828:	f8b0 5062 	ldrh.w	r5, [r0, #98]	; 0x62
    KvPTAT = (eeData[50] & MLX90640_MSBITS_6_MASK) >> 10;
   1182c:	0a9a      	lsrs	r2, r3, #10
   1182e:	ee07 2a90 	vmov	s15, r2
   11832:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    if(KvPTAT > 31)
   11836:	eef3 9a0f 	vmov.f32	s19, #63	; 0x41f80000  31.0
   1183a:	eef4 7ae9 	vcmpe.f32	s15, s19
   1183e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        KvPTAT = KvPTAT - 64;
   11842:	bfc4      	itt	gt
   11844:	ed9f 7ae0 	vldrgt	s14, [pc, #896]	; 11bc8 <MLX90640_ExtractParameters+0x3c8>
   11848:	ee77 7ac7 	vsubgt.f32	s15, s15, s14
    KvPTAT = KvPTAT/4096;
   1184c:	ed9f 7ad9 	vldr	s14, [pc, #868]	; 11bb4 <MLX90640_ExtractParameters+0x3b4>
    KtPTAT = eeData[50] & MLX90640_LSBITS_10_MASK;
   11850:	f3c3 0309 	ubfx	r3, r3, #0, #10
    KvPTAT = KvPTAT/4096;
   11854:	ee27 9a87 	vmul.f32	s18, s15, s14
    KtPTAT = eeData[50] & MLX90640_LSBITS_10_MASK;
   11858:	ee07 3a90 	vmov	s15, r3
   1185c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
{
   11860:	4604      	mov	r4, r0
    if(KtPTAT > 511)
   11862:	eef4 7aca 	vcmpe.f32	s15, s20
   11866:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        KtPTAT = KtPTAT - 1024;
   1186a:	bfc8      	it	gt
   1186c:	ed9f 7ad2 	vldrgt	s14, [pc, #840]	; 11bb8 <MLX90640_ExtractParameters+0x3b8>
    alphaPTAT = (eeData[16] & MLX90640_NIBBLE4_MASK) / POW2(14) + 8.0f;
   11870:	8c00      	ldrh	r0, [r0, #32]
        KtPTAT = KtPTAT - 1024;
   11872:	bfc8      	it	gt
   11874:	ee77 7ac7 	vsubgt.f32	s15, s15, s14
{
   11878:	b0bb      	sub	sp, #236	; 0xec
    KtPTAT = KtPTAT/8;
   1187a:	eef4 8a00 	vmov.f32	s17, #64	; 0x3e000000  0.125
    alphaPTAT = (eeData[16] & MLX90640_NIBBLE4_MASK) / POW2(14) + 8.0f;
   1187e:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
{
   11882:	4689      	mov	r9, r1
    KtPTAT = KtPTAT/8;
   11884:	ee27 8aa8 	vmul.f32	s16, s15, s17
    alphaPTAT = (eeData[16] & MLX90640_NIBBLE4_MASK) / POW2(14) + 8.0f;
   11888:	f7ee fd8c 	bl	3a4 <__aeabi_i2d>
   1188c:	ed9f 1bc4 	vldr	d1, [pc, #784]	; 11ba0 <MLX90640_ExtractParameters+0x3a0>
   11890:	ed9f 0bc5 	vldr	d0, [pc, #788]	; 11ba8 <MLX90640_ExtractParameters+0x3a8>
   11894:	4606      	mov	r6, r0
   11896:	460f      	mov	r7, r1
   11898:	f00f fbc0 	bl	2101c <pow>
    mlx90640->KvPTAT = KvPTAT;
   1189c:	ed89 9a01 	vstr	s18, [r9, #4]
    alphaPTAT = (eeData[16] & MLX90640_NIBBLE4_MASK) / POW2(14) + 8.0f;
   118a0:	ec53 2b10 	vmov	r2, r3, d0
    mlx90640->KtPTAT = KtPTAT;    
   118a4:	ed89 8a02 	vstr	s16, [r9, #8]
    mlx90640->vPTAT25 = vPTAT25;
   118a8:	f8a9 500c 	strh.w	r5, [r9, #12]
    alphaPTAT = (eeData[16] & MLX90640_NIBBLE4_MASK) / POW2(14) + 8.0f;
   118ac:	4630      	mov	r0, r6
   118ae:	4639      	mov	r1, r7
   118b0:	f7ee ff0c 	bl	6cc <__aeabi_ddiv>
   118b4:	4bc1      	ldr	r3, [pc, #772]	; (11bbc <MLX90640_ExtractParameters+0x3bc>)
   118b6:	2200      	movs	r2, #0
   118b8:	f7ee fc28 	bl	10c <__adddf3>
   118bc:	f7ef f8be 	bl	a3c <__aeabi_d2f>
   118c0:	f8c9 0010 	str.w	r0, [r9, #16]
    mlx90640->gainEE = (int16_t)eeData[48];;    
   118c4:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
   118c8:	f8a9 3014 	strh.w	r3, [r9, #20]
    mlx90640->tgc = (int8_t)MLX90640_LS_BYTE(eeData[60]) / 32.0f;
   118cc:	f994 3078 	ldrsb.w	r3, [r4, #120]	; 0x78
   118d0:	ee07 3a90 	vmov	s15, r3
   118d4:	eefa 7aed 	vcvt.f32.s32	s15, s15, #5
    alphaSP[1] = (eeData[57] & MLX90640_MSBITS_6_MASK) >> 10;
    if (alphaSP[1] > 31)
    {
        alphaSP[1] = alphaSP[1] - 64;
    }
    alphaSP[1] = (1 + alphaSP[1]/128) * alphaSP[0];
   118d8:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
    mlx90640->tgc = (int8_t)MLX90640_LS_BYTE(eeData[60]) / 32.0f;
   118dc:	edc9 7a06 	vstr	s15, [r9, #24]
    resolutionEE = (eeData[56] & 0x3000) >> 12;    
   118e0:	f8b4 3070 	ldrh.w	r3, [r4, #112]	; 0x70
   118e4:	f3c3 3301 	ubfx	r3, r3, #12, #2
    mlx90640->resolutionEE = resolutionEE;
   118e8:	f889 3024 	strb.w	r3, [r9, #36]	; 0x24
    mlx90640->KsTa = (int8_t)MLX90640_MS_BYTE(eeData[60]) / 8192.0f;
   118ec:	f994 3079 	ldrsb.w	r3, [r4, #121]	; 0x79
   118f0:	ee07 3a90 	vmov	s15, r3
   118f4:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
    mlx90640->ct[0] = -40;
   118f8:	f64f 73d8 	movw	r3, #65496	; 0xffd8
    mlx90640->KsTa = (int8_t)MLX90640_MS_BYTE(eeData[60]) / 8192.0f;
   118fc:	edc9 7a0a 	vstr	s15, [r9, #40]	; 0x28
    step = ((eeData[63] & 0x3000) >> 12) * 10;
   11900:	f8b4 207e 	ldrh.w	r2, [r4, #126]	; 0x7e
    mlx90640->ct[0] = -40;
   11904:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
    mlx90640->ct[2] = MLX90640_NIBBLE2(eeData[63]);
   11908:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
    step = ((eeData[63] & 0x3000) >> 12) * 10;
   1190c:	f3c2 3201 	ubfx	r2, r2, #12, #2
    mlx90640->ct[2] = MLX90640_NIBBLE2(eeData[63]);
   11910:	f3c3 1303 	ubfx	r3, r3, #4, #4
   11914:	f8a9 3044 	strh.w	r3, [r9, #68]	; 0x44
    step = ((eeData[63] & 0x3000) >> 12) * 10;
   11918:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    mlx90640->ct[3] = MLX90640_NIBBLE3(eeData[63]);
   1191c:	f8b4 107e 	ldrh.w	r1, [r4, #126]	; 0x7e
    step = ((eeData[63] & 0x3000) >> 12) * 10;
   11920:	0052      	lsls	r2, r2, #1
    mlx90640->ct[2] = mlx90640->ct[2]*step;
   11922:	fb13 f302 	smulbb	r3, r3, r2
    mlx90640->ct[3] = MLX90640_NIBBLE3(eeData[63]);
   11926:	f3c1 2103 	ubfx	r1, r1, #8, #4
    mlx90640->ct[2] = mlx90640->ct[2]*step;
   1192a:	b29b      	uxth	r3, r3
   1192c:	f8a9 3044 	strh.w	r3, [r9, #68]	; 0x44
    mlx90640->ct[3] = mlx90640->ct[2] + mlx90640->ct[3]*step;
   11930:	fb01 3302 	mla	r3, r1, r2, r3
   11934:	f8a9 3046 	strh.w	r3, [r9, #70]	; 0x46
    mlx90640->ct[4] = 400;
   11938:	f44f 73c8 	mov.w	r3, #400	; 0x190
   1193c:	f8a9 3048 	strh.w	r3, [r9, #72]	; 0x48
    KsToScale = MLX90640_NIBBLE1(eeData[63]) + 8;
   11940:	f8b4 207e 	ldrh.w	r2, [r4, #126]	; 0x7e
   11944:	f002 020f 	and.w	r2, r2, #15
   11948:	3208      	adds	r2, #8
    KsToScale = 1UL << KsToScale;
   1194a:	2301      	movs	r3, #1
   1194c:	4093      	lsls	r3, r2
    mlx90640->ksTo[0] = (int8_t)MLX90640_LS_BYTE(eeData[61]) / (float)KsToScale;
   1194e:	ee07 3a90 	vmov	s15, r3
   11952:	f994 307a 	ldrsb.w	r3, [r4, #122]	; 0x7a
   11956:	ee07 3a10 	vmov	s14, r3
   1195a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   1195e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
   11962:	eec7 6a27 	vdiv.f32	s13, s14, s15
   11966:	edc9 6a0b 	vstr	s13, [r9, #44]	; 0x2c
    mlx90640->ksTo[1] = (int8_t)MLX90640_MS_BYTE(eeData[61]) / (float)KsToScale;
   1196a:	f994 307b 	ldrsb.w	r3, [r4, #123]	; 0x7b
   1196e:	ee07 3a10 	vmov	s14, r3
   11972:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
   11976:	eec7 6a27 	vdiv.f32	s13, s14, s15
   1197a:	edc9 6a0c 	vstr	s13, [r9, #48]	; 0x30
    mlx90640->ksTo[2] = (int8_t)MLX90640_LS_BYTE(eeData[62]) / (float)KsToScale;
   1197e:	f994 307c 	ldrsb.w	r3, [r4, #124]	; 0x7c
   11982:	ee07 3a10 	vmov	s14, r3
   11986:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
   1198a:	eec7 6a27 	vdiv.f32	s13, s14, s15
   1198e:	edc9 6a0d 	vstr	s13, [r9, #52]	; 0x34
    mlx90640->ksTo[3] = (int8_t)MLX90640_MS_BYTE(eeData[62]) / (float)KsToScale;
   11992:	f994 307d 	ldrsb.w	r3, [r4, #125]	; 0x7d
   11996:	ee07 3a10 	vmov	s14, r3
   1199a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    mlx90640->ksTo[4] = -0.0002;
   1199e:	4b88      	ldr	r3, [pc, #544]	; (11bc0 <MLX90640_ExtractParameters+0x3c0>)
   119a0:	f8c9 303c 	str.w	r3, [r9, #60]	; 0x3c
    mlx90640->ksTo[3] = (int8_t)MLX90640_MS_BYTE(eeData[62]) / (float)KsToScale;
   119a4:	eec7 6a27 	vdiv.f32	s13, s14, s15
   119a8:	edc9 6a0e 	vstr	s13, [r9, #56]	; 0x38
    offsetSP[0] = (eeData[58] & MLX90640_LSBITS_10_MASK);
   119ac:	f8b4 2074 	ldrh.w	r2, [r4, #116]	; 0x74
    alphaScale = MLX90640_NIBBLE4(eeData[32]) + 27;
   119b0:	f8b4 a040 	ldrh.w	sl, [r4, #64]	; 0x40
   119b4:	f3c2 0509 	ubfx	r5, r2, #0, #10
    if (offsetSP[0] > 511)
   119b8:	0590      	lsls	r0, r2, #22
        offsetSP[0] = offsetSP[0] - 1024;
   119ba:	bf48      	it	mi
   119bc:	f5a5 6580 	submi.w	r5, r5, #1024	; 0x400
    offsetSP[1] = (eeData[58] & MLX90640_MSBITS_6_MASK) >> 10;
   119c0:	ea4f 2392 	mov.w	r3, r2, lsr #10
        offsetSP[0] = offsetSP[0] - 1024;
   119c4:	bf48      	it	mi
   119c6:	b2ad      	uxthmi	r5, r5
    if (offsetSP[1] > 31)
   119c8:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
        offsetSP[1] = offsetSP[1] - 64;
   119cc:	bf24      	itt	cs
   119ce:	3b40      	subcs	r3, #64	; 0x40
   119d0:	b29b      	uxthcs	r3, r3
   119d2:	fa0f f885 	sxth.w	r8, r5
    offsetSP[1] = offsetSP[1] + offsetSP[0]; 
   119d6:	441d      	add	r5, r3
    alphaSP[0] = (eeData[57] & MLX90640_LSBITS_10_MASK);
   119d8:	f8b4 3072 	ldrh.w	r3, [r4, #114]	; 0x72
   119dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
   119e0:	ee07 3a90 	vmov	s15, r3
   119e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    alphaScale = MLX90640_NIBBLE4(eeData[32]) + 27;
   119e8:	ea4f 3a1a 	mov.w	sl, sl, lsr #12
    if (alphaSP[0] > 511)
   119ec:	eef4 7aca 	vcmpe.f32	s15, s20
   119f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        alphaSP[0] = alphaSP[0] - 1024;
   119f4:	bfc4      	itt	gt
   119f6:	ed9f 7a70 	vldrgt	s14, [pc, #448]	; 11bb8 <MLX90640_ExtractParameters+0x3b8>
   119fa:	ee77 7ac7 	vsubgt.f32	s15, s15, s14
    alphaScale = MLX90640_NIBBLE4(eeData[32]) + 27;
   119fe:	f10a 0a1b 	add.w	sl, sl, #27
    alphaSP[0] = alphaSP[0] /  POW2(alphaScale);
   11a02:	ee17 0a90 	vmov	r0, s15
   11a06:	f7ee fcdf 	bl	3c8 <__aeabi_f2d>
   11a0a:	4606      	mov	r6, r0
   11a0c:	4650      	mov	r0, sl
   11a0e:	460f      	mov	r7, r1
   11a10:	f7ee fcb8 	bl	384 <__aeabi_ui2d>
   11a14:	ed9f 0b64 	vldr	d0, [pc, #400]	; 11ba8 <MLX90640_ExtractParameters+0x3a8>
   11a18:	ec41 0b11 	vmov	d1, r0, r1
   11a1c:	f00f fafe 	bl	2101c <pow>
   11a20:	4630      	mov	r0, r6
   11a22:	ec53 2b10 	vmov	r2, r3, d0
   11a26:	4639      	mov	r1, r7
   11a28:	f7ee fe50 	bl	6cc <__aeabi_ddiv>
   11a2c:	f7ef f806 	bl	a3c <__aeabi_d2f>
    alphaSP[1] = (eeData[57] & MLX90640_MSBITS_6_MASK) >> 10;
   11a30:	f8b4 3072 	ldrh.w	r3, [r4, #114]	; 0x72
   11a34:	0a9b      	lsrs	r3, r3, #10
   11a36:	ee07 3a90 	vmov	s15, r3
   11a3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    alphaSP[0] = alphaSP[0] /  POW2(alphaScale);
   11a3e:	ee09 0a10 	vmov	s18, r0
    if (alphaSP[1] > 31)
   11a42:	eef4 7ae9 	vcmpe.f32	s15, s19
   11a46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        alphaSP[1] = alphaSP[1] - 64;
   11a4a:	bfc8      	it	gt
   11a4c:	ed9f 7a5e 	vldrgt	s14, [pc, #376]	; 11bc8 <MLX90640_ExtractParameters+0x3c8>
    
    cpKta = (int8_t)MLX90640_LS_BYTE(eeData[59]);
   11a50:	f994 0076 	ldrsb.w	r0, [r4, #118]	; 0x76
        alphaSP[1] = alphaSP[1] - 64;
   11a54:	bfc8      	it	gt
   11a56:	ee77 7ac7 	vsubgt.f32	s15, s15, s14
    alphaSP[1] = (1 + alphaSP[1]/128) * alphaSP[0];
   11a5a:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 11bc4 <MLX90640_ExtractParameters+0x3c4>
   11a5e:	ee07 8a87 	vmla.f32	s16, s15, s14
    offsetSP[1] = offsetSP[1] + offsetSP[0]; 
   11a62:	b22d      	sxth	r5, r5
    
    ktaScale1 = MLX90640_NIBBLE2(eeData[56]) + 8;    
    mlx90640->cpKta = cpKta / POW2(ktaScale1);
   11a64:	ee07 0a90 	vmov	s15, r0
   11a68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    alphaSP[1] = (1 + alphaSP[1]/128) * alphaSP[0];
   11a6c:	ee28 8a09 	vmul.f32	s16, s16, s18
    mlx90640->cpKta = cpKta / POW2(ktaScale1);
   11a70:	ee17 0a90 	vmov	r0, s15
   11a74:	f7ee fca8 	bl	3c8 <__aeabi_f2d>
   11a78:	4606      	mov	r6, r0
    ktaScale1 = MLX90640_NIBBLE2(eeData[56]) + 8;    
   11a7a:	f8b4 0070 	ldrh.w	r0, [r4, #112]	; 0x70
   11a7e:	f3c0 1003 	ubfx	r0, r0, #4, #4
    mlx90640->cpKta = cpKta / POW2(ktaScale1);
   11a82:	3008      	adds	r0, #8
   11a84:	460f      	mov	r7, r1
   11a86:	f7ee fc7d 	bl	384 <__aeabi_ui2d>
   11a8a:	ed9f 0b47 	vldr	d0, [pc, #284]	; 11ba8 <MLX90640_ExtractParameters+0x3a8>
   11a8e:	ec41 0b11 	vmov	d1, r0, r1
   11a92:	f00f fac3 	bl	2101c <pow>
   11a96:	4630      	mov	r0, r6
   11a98:	ec53 2b10 	vmov	r2, r3, d0
   11a9c:	4639      	mov	r1, r7
   11a9e:	f7ee fe15 	bl	6cc <__aeabi_ddiv>
   11aa2:	f7ee ffcb 	bl	a3c <__aeabi_d2f>
   11aa6:	f8c9 0020 	str.w	r0, [r9, #32]
    
    cpKv = (int8_t)MLX90640_MS_BYTE(eeData[59]);
   11aaa:	f994 0077 	ldrsb.w	r0, [r4, #119]	; 0x77
    
    kvScale = MLX90640_NIBBLE3(eeData[56]);
    mlx90640->cpKv = cpKv / POW2(kvScale);
   11aae:	ee07 0a90 	vmov	s15, r0
   11ab2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   11ab6:	ee17 0a90 	vmov	r0, s15
   11aba:	f7ee fc85 	bl	3c8 <__aeabi_f2d>
   11abe:	4606      	mov	r6, r0
    kvScale = MLX90640_NIBBLE3(eeData[56]);
   11ac0:	f8b4 0070 	ldrh.w	r0, [r4, #112]	; 0x70
    mlx90640->cpKv = cpKv / POW2(kvScale);
   11ac4:	f3c0 2003 	ubfx	r0, r0, #8, #4
   11ac8:	460f      	mov	r7, r1
   11aca:	f7ee fc5b 	bl	384 <__aeabi_ui2d>
   11ace:	ed9f 0b36 	vldr	d0, [pc, #216]	; 11ba8 <MLX90640_ExtractParameters+0x3a8>
   11ad2:	ec41 0b11 	vmov	d1, r0, r1
   11ad6:	f00f faa1 	bl	2101c <pow>
   11ada:	4630      	mov	r0, r6
   11adc:	ec53 2b10 	vmov	r2, r3, d0
   11ae0:	4639      	mov	r1, r7
   11ae2:	f7ee fdf3 	bl	6cc <__aeabi_ddiv>
   11ae6:	f7ee ffa9 	bl	a3c <__aeabi_d2f>
       
    mlx90640->cpAlpha[0] = alphaSP[0];
   11aea:	f509 5380 	add.w	r3, r9, #4096	; 0x1000
    mlx90640->cpKv = cpKv / POW2(kvScale);
   11aee:	f8c9 001c 	str.w	r0, [r9, #28]
    ExtractAlphaParameters(eeData, mlx90640);
   11af2:	4649      	mov	r1, r9
    mlx90640->cpAlpha[1] = alphaSP[1];
    mlx90640->cpOffset[0] = offsetSP[0];
   11af4:	f8a3 8258 	strh.w	r8, [r3, #600]	; 0x258
    mlx90640->cpOffset[1] = offsetSP[1];  
   11af8:	f8a3 525a 	strh.w	r5, [r3, #602]	; 0x25a
    mlx90640->cpAlpha[0] = alphaSP[0];
   11afc:	ed83 9a94 	vstr	s18, [r3, #592]	; 0x250
    mlx90640->cpAlpha[1] = alphaSP[1];
   11b00:	ed83 8a95 	vstr	s16, [r3, #596]	; 0x254
    ExtractAlphaParameters(eeData, mlx90640);
   11b04:	4620      	mov	r0, r4
   11b06:	f7ff fb0b 	bl	11120 <ExtractAlphaParameters>
    occRemScale = MLX90640_NIBBLE1(eeData[16]);
   11b0a:	8c21      	ldrh	r1, [r4, #32]
    offsetRef = (int16_t)eeData[17];
   11b0c:	4620      	mov	r0, r4
    occRowScale = MLX90640_NIBBLE3(eeData[16]);
   11b0e:	f3c1 2303 	ubfx	r3, r1, #8, #4
   11b12:	9300      	str	r3, [sp, #0]
   11b14:	ad02      	add	r5, sp, #8
    offsetRef = (int16_t)eeData[17];
   11b16:	f830 3f22 	ldrh.w	r3, [r0, #34]!
   11b1a:	9301      	str	r3, [sp, #4]
    occRemScale = MLX90640_NIBBLE1(eeData[16]);
   11b1c:	f001 080f 	and.w	r8, r1, #15
    occColumnScale = MLX90640_NIBBLE2(eeData[16]);
   11b20:	f3c1 1a03 	ubfx	sl, r1, #4, #4
    for(int i = 0; i < 6; i++)
   11b24:	f104 062e 	add.w	r6, r4, #46	; 0x2e
    offsetRef = (int16_t)eeData[17];
   11b28:	462b      	mov	r3, r5
        occRow[p + 0] = MLX90640_NIBBLE1(eeData[18 + i]);
   11b2a:	f830 2f02 	ldrh.w	r2, [r0, #2]!
   11b2e:	f002 070f 	and.w	r7, r2, #15
   11b32:	601f      	str	r7, [r3, #0]
        occRow[p + 1] = MLX90640_NIBBLE2(eeData[18 + i]);
   11b34:	f3c2 1703 	ubfx	r7, r2, #4, #4
   11b38:	605f      	str	r7, [r3, #4]
    for(int i = 0; i < 6; i++)
   11b3a:	42b0      	cmp	r0, r6
        occRow[p + 2] = MLX90640_NIBBLE3(eeData[18 + i]);
   11b3c:	f3c2 2703 	ubfx	r7, r2, #8, #4
        occRow[p + 3] = MLX90640_NIBBLE4(eeData[18 + i]);
   11b40:	ea4f 3212 	mov.w	r2, r2, lsr #12
        occRow[p + 2] = MLX90640_NIBBLE3(eeData[18 + i]);
   11b44:	609f      	str	r7, [r3, #8]
        occRow[p + 3] = MLX90640_NIBBLE4(eeData[18 + i]);
   11b46:	60da      	str	r2, [r3, #12]
    for(int i = 0; i < 6; i++)
   11b48:	f103 0310 	add.w	r3, r3, #16
   11b4c:	d1ed      	bne.n	11b2a <MLX90640_ExtractParameters+0x32a>
   11b4e:	4628      	mov	r0, r5
    for(int i = 0; i < MLX90640_LINE_NUM; i++)
   11b50:	2200      	movs	r2, #0
        if (occRow[i] > 7)
   11b52:	f850 3b04 	ldr.w	r3, [r0], #4
   11b56:	2b07      	cmp	r3, #7
            occRow[i] = occRow[i] - 16;
   11b58:	bfc8      	it	gt
   11b5a:	3b10      	subgt	r3, #16
    for(int i = 0; i < MLX90640_LINE_NUM; i++)
   11b5c:	f102 0201 	add.w	r2, r2, #1
            occRow[i] = occRow[i] - 16;
   11b60:	bfc8      	it	gt
   11b62:	f840 3c04 	strgt.w	r3, [r0, #-4]
    for(int i = 0; i < MLX90640_LINE_NUM; i++)
   11b66:	2a18      	cmp	r2, #24
   11b68:	d1f3      	bne.n	11b52 <MLX90640_ExtractParameters+0x352>
   11b6a:	4630      	mov	r0, r6
   11b6c:	ab1a      	add	r3, sp, #104	; 0x68
   11b6e:	f104 063e 	add.w	r6, r4, #62	; 0x3e
        occColumn[p + 0] = MLX90640_NIBBLE1(eeData[24 + i]);
   11b72:	f830 2f02 	ldrh.w	r2, [r0, #2]!
   11b76:	f002 070f 	and.w	r7, r2, #15
   11b7a:	601f      	str	r7, [r3, #0]
        occColumn[p + 1] = MLX90640_NIBBLE2(eeData[24 + i]);
   11b7c:	f3c2 1703 	ubfx	r7, r2, #4, #4
   11b80:	605f      	str	r7, [r3, #4]
    for(int i = 0; i < 8; i++)
   11b82:	42b0      	cmp	r0, r6
        occColumn[p + 2] = MLX90640_NIBBLE3(eeData[24 + i]);
   11b84:	f3c2 2703 	ubfx	r7, r2, #8, #4
        occColumn[p + 3] = MLX90640_NIBBLE4(eeData[24 + i]);
   11b88:	ea4f 3212 	mov.w	r2, r2, lsr #12
        occColumn[p + 2] = MLX90640_NIBBLE3(eeData[24 + i]);
   11b8c:	609f      	str	r7, [r3, #8]
        occColumn[p + 3] = MLX90640_NIBBLE4(eeData[24 + i]);
   11b8e:	60da      	str	r2, [r3, #12]
    for(int i = 0; i < 8; i++)
   11b90:	f103 0310 	add.w	r3, r3, #16
   11b94:	d1ed      	bne.n	11b72 <MLX90640_ExtractParameters+0x372>
   11b96:	a81a      	add	r0, sp, #104	; 0x68
    for(int i = 0; i < MLX90640_COLUMN_NUM; i ++)
   11b98:	2200      	movs	r2, #0
   11b9a:	e01b      	b.n	11bd4 <MLX90640_ExtractParameters+0x3d4>
   11b9c:	f3af 8000 	nop.w
   11ba0:	00000000 	.word	0x00000000
   11ba4:	402c0000 	.word	0x402c0000
   11ba8:	00000000 	.word	0x00000000
   11bac:	40000000 	.word	0x40000000
   11bb0:	43ff8000 	.word	0x43ff8000
   11bb4:	39800000 	.word	0x39800000
   11bb8:	44800000 	.word	0x44800000
   11bbc:	40200000 	.word	0x40200000
   11bc0:	b951b717 	.word	0xb951b717
   11bc4:	3c000000 	.word	0x3c000000
   11bc8:	42800000 	.word	0x42800000
   11bcc:	3d800000 	.word	0x3d800000
   11bd0:	42000000 	.word	0x42000000
        if (occColumn[i] > 7)
   11bd4:	f850 3b04 	ldr.w	r3, [r0], #4
   11bd8:	2b07      	cmp	r3, #7
            occColumn[i] = occColumn[i] - 16;
   11bda:	bfc8      	it	gt
   11bdc:	3b10      	subgt	r3, #16
    for(int i = 0; i < MLX90640_COLUMN_NUM; i ++)
   11bde:	f102 0201 	add.w	r2, r2, #1
            occColumn[i] = occColumn[i] - 16;
   11be2:	bfc8      	it	gt
   11be4:	f840 3c04 	strgt.w	r3, [r0, #-4]
    for(int i = 0; i < MLX90640_COLUMN_NUM; i ++)
   11be8:	2a20      	cmp	r2, #32
   11bea:	d1f3      	bne.n	11bd4 <MLX90640_ExtractParameters+0x3d4>
   11bec:	f104 00be 	add.w	r0, r4, #190	; 0xbe
   11bf0:	f209 664a 	addw	r6, r9, #1610	; 0x64a
   11bf4:	f04f 0c00 	mov.w	ip, #0
            mlx90640->offset[p] = (offsetRef + (occRow[i] << occRowScale) + (occColumn[j] << occColumnScale) + mlx90640->offset[p]);
   11bf8:	9a00      	ldr	r2, [sp, #0]
   11bfa:	f855 3b04 	ldr.w	r3, [r5], #4
   11bfe:	4093      	lsls	r3, r2
   11c00:	9a01      	ldr	r2, [sp, #4]
   11c02:	4413      	add	r3, r2
   11c04:	b29b      	uxth	r3, r3
   11c06:	4619      	mov	r1, r3
   11c08:	f1a0 0740 	sub.w	r7, r0, #64	; 0x40
   11c0c:	f10d 0e68 	add.w	lr, sp, #104	; 0x68
   11c10:	4632      	mov	r2, r6
            mlx90640->offset[p] = (eeData[64 + p] & MLX90640_MSBITS_6_MASK) >> 10;
   11c12:	f837 bf02 	ldrh.w	fp, [r7, #2]!
   11c16:	ea4f 239b 	mov.w	r3, fp, lsr #10
            if (mlx90640->offset[p] > 31)
   11c1a:	f5bb 4f00 	cmp.w	fp, #32768	; 0x8000
                mlx90640->offset[p] = mlx90640->offset[p] - 64;
   11c1e:	bf28      	it	cs
   11c20:	3b40      	subcs	r3, #64	; 0x40
   11c22:	8053      	strh	r3, [r2, #2]
            mlx90640->offset[p] = (offsetRef + (occRow[i] << occRowScale) + (occColumn[j] << occColumnScale) + mlx90640->offset[p]);
   11c24:	f85e 3b04 	ldr.w	r3, [lr], #4
            mlx90640->offset[p] = mlx90640->offset[p]*(1 << occRemScale);
   11c28:	f932 bf02 	ldrsh.w	fp, [r2, #2]!
            mlx90640->offset[p] = (offsetRef + (occRow[i] << occRowScale) + (occColumn[j] << occColumnScale) + mlx90640->offset[p]);
   11c2c:	fa03 f30a 	lsl.w	r3, r3, sl
   11c30:	440b      	add	r3, r1
            mlx90640->offset[p] = mlx90640->offset[p]*(1 << occRemScale);
   11c32:	fa0b fb08 	lsl.w	fp, fp, r8
            mlx90640->offset[p] = (offsetRef + (occRow[i] << occRowScale) + (occColumn[j] << occColumnScale) + mlx90640->offset[p]);
   11c36:	445b      	add	r3, fp
        for(int j = 0; j < MLX90640_COLUMN_NUM; j ++)
   11c38:	42b8      	cmp	r0, r7
            mlx90640->offset[p] = (offsetRef + (occRow[i] << occRowScale) + (occColumn[j] << occColumnScale) + mlx90640->offset[p]);
   11c3a:	8013      	strh	r3, [r2, #0]
        for(int j = 0; j < MLX90640_COLUMN_NUM; j ++)
   11c3c:	d1e9      	bne.n	11c12 <MLX90640_ExtractParameters+0x412>
    for(int i = 0; i < MLX90640_LINE_NUM; i++)
   11c3e:	f10c 0c20 	add.w	ip, ip, #32
   11c42:	f5bc 7f40 	cmp.w	ip, #768	; 0x300
   11c46:	f100 0040 	add.w	r0, r0, #64	; 0x40
   11c4a:	f106 0640 	add.w	r6, r6, #64	; 0x40
   11c4e:	d1d3      	bne.n	11bf8 <MLX90640_ExtractParameters+0x3f8>
    ExtractKtaPixelParameters(eeData, mlx90640);
   11c50:	4620      	mov	r0, r4
   11c52:	4649      	mov	r1, r9
   11c54:	f7ff fbb4 	bl	113c0 <ExtractKtaPixelParameters>
    ExtractKvPixelParameters(eeData, mlx90640);
   11c58:	4649      	mov	r1, r9
   11c5a:	4620      	mov	r0, r4
   11c5c:	f7ff fccc 	bl	115f8 <ExtractKvPixelParameters>
    uint8_t calibrationModeEE;
    
    calibrationModeEE = (eeData[10] & 0x0800) >> 4;
    calibrationModeEE = calibrationModeEE ^ 0x80;

    ilChessC[0] = (eeData[53] & 0x003F);
   11c60:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
    calibrationModeEE = (eeData[10] & 0x0800) >> 4;
   11c64:	8aa2      	ldrh	r2, [r4, #20]
    ilChessC[0] = (eeData[53] & 0x003F);
   11c66:	f003 013f 	and.w	r1, r3, #63	; 0x3f
   11c6a:	ee07 1a90 	vmov	s15, r1
   11c6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    {
        ilChessC[0] = ilChessC[0] - 64;
    }
    ilChessC[0] = ilChessC[0] / 16.0f;
    
    ilChessC[1] = (eeData[53] & 0x07C0) >> 6;
   11c72:	f3c3 1184 	ubfx	r1, r3, #6, #5
    if (ilChessC[0] > 31)
   11c76:	eef4 7ae9 	vcmpe.f32	s15, s19
   11c7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        ilChessC[0] = ilChessC[0] - 64;
   11c7e:	bfc4      	itt	gt
   11c80:	ed1f 7a2f 	vldrgt	s14, [pc, #-188]	; 11bc8 <MLX90640_ExtractParameters+0x3c8>
   11c84:	ee77 7ac7 	vsubgt.f32	s15, s15, s14
    ilChessC[0] = ilChessC[0] / 16.0f;
   11c88:	ed1f 7a30 	vldr	s14, [pc, #-192]	; 11bcc <MLX90640_ExtractParameters+0x3cc>
   11c8c:	ee67 6a87 	vmul.f32	s13, s15, s14
    ilChessC[1] = (eeData[53] & 0x07C0) >> 6;
   11c90:	ee07 1a90 	vmov	s15, r1
   11c94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    if (ilChessC[1] > 15)
   11c98:	eeb2 6a0e 	vmov.f32	s12, #46	; 0x41700000  15.0
   11c9c:	eef4 7ac6 	vcmpe.f32	s15, s12
   11ca0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    {
        ilChessC[1] = ilChessC[1] - 32;
   11ca4:	bfc4      	itt	gt
   11ca6:	ed1f 7a36 	vldrgt	s14, [pc, #-216]	; 11bd0 <MLX90640_ExtractParameters+0x3d0>
   11caa:	ee77 7ac7 	vsubgt.f32	s15, s15, s14
    }
    ilChessC[1] = ilChessC[1] / 2.0f;
    
    ilChessC[2] = (eeData[53] & 0xF800) >> 11;
   11cae:	0adb      	lsrs	r3, r3, #11
    ilChessC[1] = ilChessC[1] / 2.0f;
   11cb0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   11cb4:	ee27 7a87 	vmul.f32	s14, s15, s14
    ilChessC[2] = (eeData[53] & 0xF800) >> 11;
   11cb8:	ee07 3a90 	vmov	s15, r3
   11cbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    calibrationModeEE = calibrationModeEE ^ 0x80;
   11cc0:	ea6f 1212 	mvn.w	r2, r2, lsr #4
    if (ilChessC[2] > 15)
   11cc4:	eef4 7ac6 	vcmpe.f32	s15, s12
   11cc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    {
        ilChessC[2] = ilChessC[2] - 32;
   11ccc:	bfc4      	itt	gt
   11cce:	ed1f 6a40 	vldrgt	s12, [pc, #-256]	; 11bd0 <MLX90640_ExtractParameters+0x3d0>
   11cd2:	ee77 7ac6 	vsubgt.f32	s15, s15, s12
    }
    ilChessC[2] = ilChessC[2] / 8.0f;
    
    mlx90640->calibrationModeEE = calibrationModeEE;
    mlx90640->ilChessC[0] = ilChessC[0];
   11cd6:	f509 5380 	add.w	r3, r9, #4096	; 0x1000
    calibrationModeEE = calibrationModeEE ^ 0x80;
   11cda:	f002 0280 	and.w	r2, r2, #128	; 0x80
    ilChessC[2] = ilChessC[2] / 8.0f;
   11cde:	ee67 7aa8 	vmul.f32	s15, s15, s17
    mlx90640->calibrationModeEE = calibrationModeEE;
   11ce2:	f889 2025 	strb.w	r2, [r9, #37]	; 0x25

static int ExtractDeviatingPixels(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
    uint16_t pixCnt = 0;
    uint16_t brokenPixCnt = 0;
    uint16_t outlierPixCnt = 0;
   11ce6:	2500      	movs	r5, #0
    int warn = 0;
    int i;
    
    for(pixCnt = 0; pixCnt<5; pixCnt++)
    {
        mlx90640->brokenPixels[pixCnt] = 0xFFFF;
   11ce8:	f64f 72ff 	movw	r2, #65535	; 0xffff
    mlx90640->ilChessC[0] = ilChessC[0];
   11cec:	edc3 6a97 	vstr	s13, [r3, #604]	; 0x25c
    mlx90640->ilChessC[1] = ilChessC[1];
   11cf0:	ed83 7a98 	vstr	s14, [r3, #608]	; 0x260
    mlx90640->ilChessC[2] = ilChessC[2];
   11cf4:	edc3 7a99 	vstr	s15, [r3, #612]	; 0x264
        mlx90640->brokenPixels[pixCnt] = 0xFFFF;
   11cf8:	f8a3 2268 	strh.w	r2, [r3, #616]	; 0x268
        mlx90640->outlierPixels[pixCnt] = 0xFFFF;
   11cfc:	f8a3 2272 	strh.w	r2, [r3, #626]	; 0x272
        mlx90640->brokenPixels[pixCnt] = 0xFFFF;
   11d00:	f8a3 226a 	strh.w	r2, [r3, #618]	; 0x26a
        mlx90640->outlierPixels[pixCnt] = 0xFFFF;
   11d04:	f8a3 2274 	strh.w	r2, [r3, #628]	; 0x274
        mlx90640->brokenPixels[pixCnt] = 0xFFFF;
   11d08:	f8a3 226c 	strh.w	r2, [r3, #620]	; 0x26c
        mlx90640->outlierPixels[pixCnt] = 0xFFFF;
   11d0c:	f8a3 2276 	strh.w	r2, [r3, #630]	; 0x276
        mlx90640->brokenPixels[pixCnt] = 0xFFFF;
   11d10:	f8a3 226e 	strh.w	r2, [r3, #622]	; 0x26e
        mlx90640->outlierPixels[pixCnt] = 0xFFFF;
   11d14:	f8a3 2278 	strh.w	r2, [r3, #632]	; 0x278
        mlx90640->brokenPixels[pixCnt] = 0xFFFF;
   11d18:	f8a3 2270 	strh.w	r2, [r3, #624]	; 0x270
        mlx90640->outlierPixels[pixCnt] = 0xFFFF;
   11d1c:	f8a3 227a 	strh.w	r2, [r3, #634]	; 0x27a
    for(pixCnt = 0; pixCnt<5; pixCnt++)
   11d20:	347e      	adds	r4, #126	; 0x7e
    uint16_t brokenPixCnt = 0;
   11d22:	462e      	mov	r6, r5
    }
        
    pixCnt = 0;    
   11d24:	462b      	mov	r3, r5
    while (pixCnt < MLX90640_PIXEL_NUM && brokenPixCnt < 5 && outlierPixCnt < 5)
    {
        if(eeData[pixCnt+64] == 0)
   11d26:	f834 1f02 	ldrh.w	r1, [r4, #2]!
   11d2a:	1c5a      	adds	r2, r3, #1
   11d2c:	b971      	cbnz	r1, 11d4c <MLX90640_ExtractParameters+0x54c>
        {
            mlx90640->brokenPixels[brokenPixCnt] = pixCnt;
   11d2e:	f606 1134 	addw	r1, r6, #2356	; 0x934
            brokenPixCnt = brokenPixCnt + 1;
   11d32:	3601      	adds	r6, #1
            mlx90640->brokenPixels[brokenPixCnt] = pixCnt;
   11d34:	f829 3011 	strh.w	r3, [r9, r1, lsl #1]
        {
            mlx90640->outlierPixels[outlierPixCnt] = pixCnt;
            outlierPixCnt = outlierPixCnt + 1;
        }    
        
        pixCnt = pixCnt + 1;
   11d38:	b293      	uxth	r3, r2
    while (pixCnt < MLX90640_PIXEL_NUM && brokenPixCnt < 5 && outlierPixCnt < 5)
   11d3a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
            brokenPixCnt = brokenPixCnt + 1;
   11d3e:	b2b6      	uxth	r6, r6
    while (pixCnt < MLX90640_PIXEL_NUM && brokenPixCnt < 5 && outlierPixCnt < 5)
   11d40:	d01b      	beq.n	11d7a <MLX90640_ExtractParameters+0x57a>
   11d42:	2e05      	cmp	r6, #5
   11d44:	d1ef      	bne.n	11d26 <MLX90640_ExtractParameters+0x526>
        
    } 
    
    if(brokenPixCnt > 4)  
    {
        warn = -MLX90640_BROKEN_PIXELS_NUM_ERROR;
   11d46:	f06f 0002 	mvn.w	r0, #2
   11d4a:	e011      	b.n	11d70 <MLX90640_ExtractParameters+0x570>
        else if((eeData[pixCnt+64] & 0x0001) != 0)
   11d4c:	07c9      	lsls	r1, r1, #31
            mlx90640->outlierPixels[outlierPixCnt] = pixCnt;
   11d4e:	bf41      	itttt	mi
   11d50:	f605 1138 	addwmi	r1, r5, #2360	; 0x938
   11d54:	eb09 0141 	addmi.w	r1, r9, r1, lsl #1
            outlierPixCnt = outlierPixCnt + 1;
   11d58:	3501      	addmi	r5, #1
            mlx90640->outlierPixels[outlierPixCnt] = pixCnt;
   11d5a:	804b      	strhmi	r3, [r1, #2]
        pixCnt = pixCnt + 1;
   11d5c:	b293      	uxth	r3, r2
            outlierPixCnt = outlierPixCnt + 1;
   11d5e:	bf48      	it	mi
   11d60:	b2ad      	uxthmi	r5, r5
    while (pixCnt < MLX90640_PIXEL_NUM && brokenPixCnt < 5 && outlierPixCnt < 5)
   11d62:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
   11d66:	d008      	beq.n	11d7a <MLX90640_ExtractParameters+0x57a>
   11d68:	2d05      	cmp	r5, #5
   11d6a:	d1dc      	bne.n	11d26 <MLX90640_ExtractParameters+0x526>
    }         
    else if(outlierPixCnt > 4)  
    {
        warn = -MLX90640_OUTLIER_PIXELS_NUM_ERROR;
   11d6c:	f06f 0003 	mvn.w	r0, #3
}
   11d70:	b03b      	add	sp, #236	; 0xec
   11d72:	ecbd 8b06 	vpop	{d8-d10}
   11d76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(brokenPixCnt > 4)  
   11d7a:	2e05      	cmp	r6, #5
   11d7c:	d0e3      	beq.n	11d46 <MLX90640_ExtractParameters+0x546>
    else if(outlierPixCnt > 4)  
   11d7e:	2d05      	cmp	r5, #5
   11d80:	d0f4      	beq.n	11d6c <MLX90640_ExtractParameters+0x56c>
    }
    else if((brokenPixCnt + outlierPixCnt) > 4)  
   11d82:	1973      	adds	r3, r6, r5
   11d84:	2b04      	cmp	r3, #4
   11d86:	dc4b      	bgt.n	11e20 <MLX90640_ExtractParameters+0x620>
   11d88:	f509 5793 	add.w	r7, r9, #4704	; 0x1260
   11d8c:	2400      	movs	r4, #0
   11d8e:	3708      	adds	r7, #8
    {
        warn = -MLX90640_BAD_PIXELS_NUM_ERROR;
    } 
    else
    {
        for(pixCnt=0; pixCnt<brokenPixCnt; pixCnt++)
   11d90:	b2a3      	uxth	r3, r4
   11d92:	429e      	cmp	r6, r3
   11d94:	d815      	bhi.n	11dc2 <MLX90640_ExtractParameters+0x5c2>
   11d96:	f509 5793 	add.w	r7, r9, #4704	; 0x1260
   11d9a:	2400      	movs	r4, #0
   11d9c:	3712      	adds	r7, #18
                    return warn;
                }    
            }    
        }
        
        for(pixCnt=0; pixCnt<outlierPixCnt; pixCnt++)
   11d9e:	b2a3      	uxth	r3, r4
   11da0:	429d      	cmp	r5, r3
   11da2:	d820      	bhi.n	11de6 <MLX90640_ExtractParameters+0x5e6>
   11da4:	f509 5493 	add.w	r4, r9, #4704	; 0x1260
   11da8:	f509 5993 	add.w	r9, r9, #4704	; 0x1260
   11dac:	3408      	adds	r4, #8
   11dae:	f109 0910 	add.w	r9, r9, #16
   11db2:	eb04 0646 	add.w	r6, r4, r6, lsl #1
   11db6:	eb09 0545 	add.w	r5, r9, r5, lsl #1
                    return warn;
                }    
            }    
        } 
        
        for(pixCnt=0; pixCnt<brokenPixCnt; pixCnt++)
   11dba:	42a6      	cmp	r6, r4
   11dbc:	d033      	beq.n	11e26 <MLX90640_ExtractParameters+0x626>
   11dbe:	464f      	mov	r7, r9
   11dc0:	e02a      	b.n	11e18 <MLX90640_ExtractParameters+0x618>
            for(i=pixCnt+1; i<brokenPixCnt; i++)
   11dc2:	f104 0a01 	add.w	sl, r4, #1
   11dc6:	46d0      	mov	r8, sl
   11dc8:	4546      	cmp	r6, r8
   11dca:	dc01      	bgt.n	11dd0 <MLX90640_ExtractParameters+0x5d0>
   11dcc:	4654      	mov	r4, sl
   11dce:	e7df      	b.n	11d90 <MLX90640_ExtractParameters+0x590>
                warn = CheckAdjacentPixels(mlx90640->brokenPixels[pixCnt],mlx90640->brokenPixels[i]);
   11dd0:	f837 1018 	ldrh.w	r1, [r7, r8, lsl #1]
   11dd4:	f837 0014 	ldrh.w	r0, [r7, r4, lsl #1]
   11dd8:	f00f fb48 	bl	2146c <CheckAdjacentPixels>
                if(warn != 0)
   11ddc:	2800      	cmp	r0, #0
   11dde:	d1c7      	bne.n	11d70 <MLX90640_ExtractParameters+0x570>
            for(i=pixCnt+1; i<brokenPixCnt; i++)
   11de0:	f108 0801 	add.w	r8, r8, #1
   11de4:	e7f0      	b.n	11dc8 <MLX90640_ExtractParameters+0x5c8>
            for(i=pixCnt+1; i<outlierPixCnt; i++)
   11de6:	f104 0a01 	add.w	sl, r4, #1
   11dea:	46d0      	mov	r8, sl
   11dec:	4545      	cmp	r5, r8
   11dee:	dc01      	bgt.n	11df4 <MLX90640_ExtractParameters+0x5f4>
   11df0:	4654      	mov	r4, sl
   11df2:	e7d4      	b.n	11d9e <MLX90640_ExtractParameters+0x59e>
                warn = CheckAdjacentPixels(mlx90640->outlierPixels[pixCnt],mlx90640->outlierPixels[i]);
   11df4:	f837 1018 	ldrh.w	r1, [r7, r8, lsl #1]
   11df8:	f837 0014 	ldrh.w	r0, [r7, r4, lsl #1]
   11dfc:	f00f fb36 	bl	2146c <CheckAdjacentPixels>
                if(warn != 0)
   11e00:	2800      	cmp	r0, #0
   11e02:	d1b5      	bne.n	11d70 <MLX90640_ExtractParameters+0x570>
            for(i=pixCnt+1; i<outlierPixCnt; i++)
   11e04:	f108 0801 	add.w	r8, r8, #1
   11e08:	e7f0      	b.n	11dec <MLX90640_ExtractParameters+0x5ec>
        {
            for(i=0; i<outlierPixCnt; i++)
            {
                warn = CheckAdjacentPixels(mlx90640->brokenPixels[pixCnt],mlx90640->outlierPixels[i]);
   11e0a:	f837 1f02 	ldrh.w	r1, [r7, #2]!
   11e0e:	8820      	ldrh	r0, [r4, #0]
   11e10:	f00f fb2c 	bl	2146c <CheckAdjacentPixels>
                if(warn != 0)
   11e14:	2800      	cmp	r0, #0
   11e16:	d1ab      	bne.n	11d70 <MLX90640_ExtractParameters+0x570>
            for(i=0; i<outlierPixCnt; i++)
   11e18:	42bd      	cmp	r5, r7
   11e1a:	d1f6      	bne.n	11e0a <MLX90640_ExtractParameters+0x60a>
        for(pixCnt=0; pixCnt<brokenPixCnt; pixCnt++)
   11e1c:	3402      	adds	r4, #2
   11e1e:	e7cc      	b.n	11dba <MLX90640_ExtractParameters+0x5ba>
        warn = -MLX90640_BAD_PIXELS_NUM_ERROR;
   11e20:	f06f 0004 	mvn.w	r0, #4
   11e24:	e7a4      	b.n	11d70 <MLX90640_ExtractParameters+0x570>
   11e26:	2000      	movs	r0, #0
    return error;
   11e28:	e7a2      	b.n	11d70 <MLX90640_ExtractParameters+0x570>
   11e2a:	bf00      	nop
   11e2c:	0000      	movs	r0, r0
	...

00011e30 <MLX90640_GetVdd>:
{
   11e30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11e34:	ed2d 8b02 	vpush	{d8}
   11e38:	4605      	mov	r5, r0
    resolutionRAM = (frameData[832] & ~MLX90640_CTRL_RESOLUTION_MASK) >> MLX90640_CTRL_RESOLUTION_SHIFT;   
   11e3a:	f8b0 8680 	ldrh.w	r8, [r0, #1664]	; 0x680
    resolutionCorrection = POW2(params->resolutionEE) / POW2(resolutionRAM);
   11e3e:	f891 0024 	ldrb.w	r0, [r1, #36]	; 0x24
   11e42:	ed9f 8b27 	vldr	d8, [pc, #156]	; 11ee0 <MLX90640_GetVdd+0xb0>
{
   11e46:	460c      	mov	r4, r1
    resolutionCorrection = POW2(params->resolutionEE) / POW2(resolutionRAM);
   11e48:	f7ee fa9c 	bl	384 <__aeabi_ui2d>
   11e4c:	eeb0 0a48 	vmov.f32	s0, s16
   11e50:	eef0 0a68 	vmov.f32	s1, s17
   11e54:	ec41 0b11 	vmov	d1, r0, r1
   11e58:	f00f f8e0 	bl	2101c <pow>
    resolutionRAM = (frameData[832] & ~MLX90640_CTRL_RESOLUTION_MASK) >> MLX90640_CTRL_RESOLUTION_SHIFT;   
   11e5c:	f3c8 2881 	ubfx	r8, r8, #10, #2
    resolutionCorrection = POW2(params->resolutionEE) / POW2(resolutionRAM);
   11e60:	4640      	mov	r0, r8
   11e62:	ec57 6b10 	vmov	r6, r7, d0
   11e66:	f7ee fa8d 	bl	384 <__aeabi_ui2d>
   11e6a:	eeb0 0a48 	vmov.f32	s0, s16
   11e6e:	eef0 0a68 	vmov.f32	s1, s17
   11e72:	ec41 0b11 	vmov	d1, r0, r1
   11e76:	f00f f8d1 	bl	2101c <pow>
    vdd = (resolutionCorrection * (int16_t)frameData[810] - params->vdd25) / params->kVdd + 3.3;
   11e7a:	f9b5 1654 	ldrsh.w	r1, [r5, #1620]	; 0x654
    resolutionCorrection = POW2(params->resolutionEE) / POW2(resolutionRAM);
   11e7e:	ec53 2b10 	vmov	r2, r3, d0
    vdd = (resolutionCorrection * (int16_t)frameData[810] - params->vdd25) / params->kVdd + 3.3;
   11e82:	ee08 1a10 	vmov	s16, r1
    resolutionCorrection = POW2(params->resolutionEE) / POW2(resolutionRAM);
   11e86:	4630      	mov	r0, r6
   11e88:	4639      	mov	r1, r7
   11e8a:	f7ee fc1f 	bl	6cc <__aeabi_ddiv>
   11e8e:	f7ee fdd5 	bl	a3c <__aeabi_d2f>
    vdd = (resolutionCorrection * (int16_t)frameData[810] - params->vdd25) / params->kVdd + 3.3;
   11e92:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
   11e96:	ee07 3a90 	vmov	s15, r3
    resolutionCorrection = POW2(params->resolutionEE) / POW2(resolutionRAM);
   11e9a:	ee07 0a10 	vmov	s14, r0
    vdd = (resolutionCorrection * (int16_t)frameData[810] - params->vdd25) / params->kVdd + 3.3;
   11e9e:	f9b4 3000 	ldrsh.w	r3, [r4]
   11ea2:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
   11ea6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   11eaa:	ee58 7a07 	vnmls.f32	s15, s16, s14
   11eae:	ee07 3a10 	vmov	s14, r3
   11eb2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
   11eb6:	eec7 7a87 	vdiv.f32	s15, s15, s14
   11eba:	ee17 0a90 	vmov	r0, s15
   11ebe:	f7ee fa83 	bl	3c8 <__aeabi_f2d>
   11ec2:	a309      	add	r3, pc, #36	; (adr r3, 11ee8 <MLX90640_GetVdd+0xb8>)
   11ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
   11ec8:	f7ee f920 	bl	10c <__adddf3>
   11ecc:	f7ee fdb6 	bl	a3c <__aeabi_d2f>
}
   11ed0:	ecbd 8b02 	vpop	{d8}
   11ed4:	ee00 0a10 	vmov	s0, r0
   11ed8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11edc:	f3af 8000 	nop.w
   11ee0:	00000000 	.word	0x00000000
   11ee4:	40000000 	.word	0x40000000
   11ee8:	66666666 	.word	0x66666666
   11eec:	400a6666 	.word	0x400a6666

00011ef0 <MLX90640_GetTa>:
{
   11ef0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   11ef4:	4606      	mov	r6, r0
   11ef6:	460c      	mov	r4, r1
    vdd = MLX90640_GetVdd(frameData, params);
   11ef8:	f7ff ff9a 	bl	11e30 <MLX90640_GetVdd>
    ptatArt = (ptat / (ptat * params->alphaPTAT + (int16_t)frameData[768])) * POW2(18);
   11efc:	f9b6 3640 	ldrsh.w	r3, [r6, #1600]	; 0x640
   11f00:	edd4 6a04 	vldr	s13, [r4, #16]
   11f04:	ee07 3a10 	vmov	s14, r3
   11f08:	f9b6 3600 	ldrsh.w	r3, [r6, #1536]	; 0x600
   11f0c:	ee07 3a90 	vmov	s15, r3
   11f10:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
   11f14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   11f18:	ee47 7a26 	vmla.f32	s15, s14, s13
    vdd = MLX90640_GetVdd(frameData, params);
   11f1c:	ee10 5a10 	vmov	r5, s0
    ptatArt = (ptat / (ptat * params->alphaPTAT + (int16_t)frameData[768])) * POW2(18);
   11f20:	eec7 7a27 	vdiv.f32	s15, s14, s15
   11f24:	ee17 0a90 	vmov	r0, s15
   11f28:	f7ee fa4e 	bl	3c8 <__aeabi_f2d>
   11f2c:	ed9f 1b24 	vldr	d1, [pc, #144]	; 11fc0 <MLX90640_GetTa+0xd0>
   11f30:	ed9f 0b25 	vldr	d0, [pc, #148]	; 11fc8 <MLX90640_GetTa+0xd8>
   11f34:	4606      	mov	r6, r0
   11f36:	460f      	mov	r7, r1
   11f38:	f00f f870 	bl	2101c <pow>
   11f3c:	4630      	mov	r0, r6
   11f3e:	ec53 2b10 	vmov	r2, r3, d0
   11f42:	4639      	mov	r1, r7
   11f44:	f7ee fa98 	bl	478 <__aeabi_dmul>
   11f48:	f7ee fd78 	bl	a3c <__aeabi_d2f>
    ta = (ptatArt / (1 + params->KvPTAT * (vdd - 3.3)) - params->vPTAT25);
   11f4c:	f7ee fa3c 	bl	3c8 <__aeabi_f2d>
   11f50:	4606      	mov	r6, r0
   11f52:	6860      	ldr	r0, [r4, #4]
   11f54:	460f      	mov	r7, r1
   11f56:	f7ee fa37 	bl	3c8 <__aeabi_f2d>
   11f5a:	4680      	mov	r8, r0
   11f5c:	4628      	mov	r0, r5
   11f5e:	4689      	mov	r9, r1
   11f60:	f7ee fa32 	bl	3c8 <__aeabi_f2d>
   11f64:	a31b      	add	r3, pc, #108	; (adr r3, 11fd4 <MLX90640_GetTa+0xe4>)
   11f66:	e9d3 2300 	ldrd	r2, r3, [r3]
   11f6a:	f7ee f8cd 	bl	108 <__aeabi_dsub>
   11f6e:	4602      	mov	r2, r0
   11f70:	460b      	mov	r3, r1
   11f72:	4640      	mov	r0, r8
   11f74:	4649      	mov	r1, r9
   11f76:	f7ee fa7f 	bl	478 <__aeabi_dmul>
   11f7a:	4b15      	ldr	r3, [pc, #84]	; (11fd0 <MLX90640_GetTa+0xe0>)
   11f7c:	2200      	movs	r2, #0
   11f7e:	f7ee f8c5 	bl	10c <__adddf3>
   11f82:	4602      	mov	r2, r0
   11f84:	460b      	mov	r3, r1
   11f86:	4630      	mov	r0, r6
   11f88:	4639      	mov	r1, r7
   11f8a:	f7ee fb9f 	bl	6cc <__aeabi_ddiv>
   11f8e:	4606      	mov	r6, r0
   11f90:	89a0      	ldrh	r0, [r4, #12]
   11f92:	460f      	mov	r7, r1
   11f94:	f7ee fa06 	bl	3a4 <__aeabi_i2d>
   11f98:	4602      	mov	r2, r0
   11f9a:	460b      	mov	r3, r1
   11f9c:	4630      	mov	r0, r6
   11f9e:	4639      	mov	r1, r7
   11fa0:	f7ee f8b2 	bl	108 <__aeabi_dsub>
   11fa4:	f7ee fd4a 	bl	a3c <__aeabi_d2f>
    ta = ta / params->KtPTAT + 25;
   11fa8:	edd4 7a02 	vldr	s15, [r4, #8]
    ta = (ptatArt / (1 + params->KvPTAT * (vdd - 3.3)) - params->vPTAT25);
   11fac:	ee07 0a10 	vmov	s14, r0
    ta = ta / params->KtPTAT + 25;
   11fb0:	ee87 0a27 	vdiv.f32	s0, s14, s15
}
   11fb4:	eef3 7a09 	vmov.f32	s15, #57	; 0x41c80000  25.0
   11fb8:	ee30 0a27 	vadd.f32	s0, s0, s15
   11fbc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   11fc0:	00000000 	.word	0x00000000
   11fc4:	40320000 	.word	0x40320000
   11fc8:	00000000 	.word	0x00000000
   11fcc:	40000000 	.word	0x40000000
   11fd0:	3ff00000 	.word	0x3ff00000
   11fd4:	66666666 	.word	0x66666666
   11fd8:	400a6666 	.word	0x400a6666
   11fdc:	00000000 	.word	0x00000000

00011fe0 <MLX90640_CalculateTo>:
{
   11fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11fe4:	ed2d 8b0a 	vpush	{d8-d12}
   11fe8:	b095      	sub	sp, #84	; 0x54
    subPage = frameData[833];
   11fea:	f8b0 3682 	ldrh.w	r3, [r0, #1666]	; 0x682
   11fee:	930a      	str	r3, [sp, #40]	; 0x28
{
   11ff0:	460c      	mov	r4, r1
   11ff2:	ee10 5a90 	vmov	r5, s1
   11ff6:	4681      	mov	r9, r0
   11ff8:	4690      	mov	r8, r2
   11ffa:	eeb0 aa40 	vmov.f32	s20, s0
    vdd = MLX90640_GetVdd(frameData, params);
   11ffe:	f7ff ff17 	bl	11e30 <MLX90640_GetVdd>
    ta = MLX90640_GetTa(frameData, params);
   12002:	4621      	mov	r1, r4
   12004:	4648      	mov	r0, r9
    vdd = MLX90640_GetVdd(frameData, params);
   12006:	ee10 6a10 	vmov	r6, s0
    ta = MLX90640_GetTa(frameData, params);
   1200a:	f7ff ff71 	bl	11ef0 <MLX90640_GetTa>
    ta4 = (ta + 273.15);
   1200e:	ee10 0a10 	vmov	r0, s0
    ta = MLX90640_GetTa(frameData, params);
   12012:	eef0 9a40 	vmov.f32	s19, s0
    ta4 = (ta + 273.15);
   12016:	f7ee f9d7 	bl	3c8 <__aeabi_f2d>
   1201a:	f20f 431c 	addw	r3, pc, #1052	; 0x41c
   1201e:	e9d3 2300 	ldrd	r2, r3, [r3]
   12022:	f7ee f873 	bl	10c <__adddf3>
   12026:	f7ee fd09 	bl	a3c <__aeabi_d2f>
   1202a:	ee08 0a90 	vmov	s17, r0
    tr4 = (tr + 273.15);
   1202e:	4628      	mov	r0, r5
   12030:	f7ee f9ca 	bl	3c8 <__aeabi_f2d>
   12034:	f20f 4300 	addw	r3, pc, #1024	; 0x400
   12038:	e9d3 2300 	ldrd	r2, r3, [r3]
   1203c:	f7ee f866 	bl	10c <__adddf3>
   12040:	f7ee fcfc 	bl	a3c <__aeabi_d2f>
   12044:	ee08 0a10 	vmov	s16, r0
    tr4 = tr4 * tr4;
   12048:	ee28 8a08 	vmul.f32	s16, s16, s16
    ta4 = ta4 * ta4;
   1204c:	ee68 8aa8 	vmul.f32	s17, s17, s17
    tr4 = tr4 * tr4;
   12050:	ee28 8a08 	vmul.f32	s16, s16, s16
    ktaScale = POW2(params->ktaScale);
   12054:	f894 0f4c 	ldrb.w	r0, [r4, #3916]	; 0xf4c
    taTr = tr4 - (tr4-ta4)/emissivity;
   12058:	eeb0 7a48 	vmov.f32	s14, s16
   1205c:	ee08 7ae8 	vmls.f32	s14, s17, s17
    kvScale = POW2(params->kvScale);
   12060:	f504 5580 	add.w	r5, r4, #4096	; 0x1000
    alphaCorrR[0] = 1 / (1 + params->ksTo[0] * 40);
   12064:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
    taTr = tr4 - (tr4-ta4)/emissivity;
   12068:	eec7 7a0a 	vdiv.f32	s15, s14, s20
    irDataCP[0] = irDataCP[0] - params->cpOffset[0] * (1 + params->cpKta * (ta - 25)) * (1 + params->cpKv * (vdd - 3.3));
   1206c:	eef0 ca49 	vmov.f32	s25, s18
    taTr = tr4 - (tr4-ta4)/emissivity;
   12070:	ee38 8a67 	vsub.f32	s16, s16, s15
    ktaScale = POW2(params->ktaScale);
   12074:	f7ee f986 	bl	384 <__aeabi_ui2d>
   12078:	ed9f 0be7 	vldr	d0, [pc, #924]	; 12418 <MLX90640_CalculateTo+0x438>
   1207c:	ec41 0b11 	vmov	d1, r0, r1
   12080:	f00e ffcc 	bl	2101c <pow>
   12084:	ec51 0b10 	vmov	r0, r1, d0
   12088:	f7ee fcd8 	bl	a3c <__aeabi_d2f>
   1208c:	ee0a 0a90 	vmov	s21, r0
    kvScale = POW2(params->kvScale);
   12090:	f895 024d 	ldrb.w	r0, [r5, #589]	; 0x24d
   12094:	f7ee f976 	bl	384 <__aeabi_ui2d>
   12098:	ed9f 0bdf 	vldr	d0, [pc, #892]	; 12418 <MLX90640_CalculateTo+0x438>
   1209c:	ec41 0b11 	vmov	d1, r0, r1
   120a0:	f00e ffbc 	bl	2101c <pow>
   120a4:	ec51 0b10 	vmov	r0, r1, d0
   120a8:	f7ee fcc8 	bl	a3c <__aeabi_d2f>
   120ac:	ee0b 0a10 	vmov	s22, r0
    alphaScale = POW2(params->alphaScale);
   120b0:	f894 064a 	ldrb.w	r0, [r4, #1610]	; 0x64a
   120b4:	f7ee f966 	bl	384 <__aeabi_ui2d>
   120b8:	ed9f 0bd7 	vldr	d0, [pc, #860]	; 12418 <MLX90640_CalculateTo+0x438>
   120bc:	ec41 0b11 	vmov	d1, r0, r1
   120c0:	f00e ffac 	bl	2101c <pow>
   120c4:	ec51 0b10 	vmov	r0, r1, d0
   120c8:	f7ee fcb8 	bl	a3c <__aeabi_d2f>
    alphaCorrR[0] = 1 / (1 + params->ksTo[0] * 40);
   120cc:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
   120d0:	eddf 7ad7 	vldr	s15, [pc, #860]	; 12430 <MLX90640_CalculateTo+0x450>
    alphaCorrR[2] = (1 + params->ksTo[1] * params->ct[2]);
   120d4:	f9b4 2044 	ldrsh.w	r2, [r4, #68]	; 0x44
    alphaCorrR[3] = alphaCorrR[2] * (1 + params->ksTo[2] * (params->ct[3] - params->ct[2]));
   120d8:	f9b4 3046 	ldrsh.w	r3, [r4, #70]	; 0x46
   120dc:	ed94 6a0d 	vldr	s12, [r4, #52]	; 0x34
    alphaScale = POW2(params->alphaScale);
   120e0:	900b      	str	r0, [sp, #44]	; 0x2c
    alphaCorrR[0] = 1 / (1 + params->ksTo[0] * 40);
   120e2:	eeb0 7a49 	vmov.f32	s14, s18
   120e6:	ee06 7aa7 	vmla.f32	s14, s13, s15
    alphaCorrR[3] = alphaCorrR[2] * (1 + params->ksTo[2] * (params->ct[3] - params->ct[2]));
   120ea:	1a9b      	subs	r3, r3, r2
    irDataCP[0] = irDataCP[0] - params->cpOffset[0] * (1 + params->cpKta * (ta - 25)) * (1 + params->cpKv * (vdd - 3.3));
   120ec:	4630      	mov	r0, r6
    alphaCorrR[2] = (1 + params->ksTo[1] * params->ct[2]);
   120ee:	eef0 6a49 	vmov.f32	s13, s18
    alphaCorrR[0] = 1 / (1 + params->ksTo[0] * 40);
   120f2:	eec9 7a07 	vdiv.f32	s15, s18, s14
    alphaCorrR[1] = 1 ;
   120f6:	ed8d 9a11 	vstr	s18, [sp, #68]	; 0x44
    alphaCorrR[0] = 1 / (1 + params->ksTo[0] * 40);
   120fa:	edcd 7a10 	vstr	s15, [sp, #64]	; 0x40
    alphaCorrR[2] = (1 + params->ksTo[1] * params->ct[2]);
   120fe:	ee07 2a90 	vmov	s15, r2
   12102:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   12106:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
   1210a:	ee47 6a27 	vmla.f32	s13, s14, s15
    alphaCorrR[3] = alphaCorrR[2] * (1 + params->ksTo[2] * (params->ct[3] - params->ct[2]));
   1210e:	ee07 3a90 	vmov	s15, r3
   12112:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   12116:	eeb0 7a49 	vmov.f32	s14, s18
   1211a:	ee07 7a86 	vmla.f32	s14, s15, s12
    gain = (float)params->gainEE / (int16_t)frameData[778]; 
   1211e:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
    alphaCorrR[2] = (1 + params->ksTo[1] * params->ct[2]);
   12122:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
    alphaCorrR[3] = alphaCorrR[2] * (1 + params->ksTo[2] * (params->ct[3] - params->ct[2]));
   12126:	ee67 7a26 	vmul.f32	s15, s14, s13
    gain = (float)params->gainEE / (int16_t)frameData[778]; 
   1212a:	ee07 3a10 	vmov	s14, r3
   1212e:	f9b9 3614 	ldrsh.w	r3, [r9, #1556]	; 0x614
    alphaCorrR[3] = alphaCorrR[2] * (1 + params->ksTo[2] * (params->ct[3] - params->ct[2]));
   12132:	edcd 7a13 	vstr	s15, [sp, #76]	; 0x4c
    gain = (float)params->gainEE / (int16_t)frameData[778]; 
   12136:	ee07 3a90 	vmov	s15, r3
    mode = (frameData[832] & MLX90640_CTRL_MEAS_MODE_MASK) >> 5;
   1213a:	f8b9 3680 	ldrh.w	r3, [r9, #1664]	; 0x680
    gain = (float)params->gainEE / (int16_t)frameData[778]; 
   1213e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
   12142:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    mode = (frameData[832] & MLX90640_CTRL_MEAS_MODE_MASK) >> 5;
   12146:	095b      	lsrs	r3, r3, #5
    gain = (float)params->gainEE / (int16_t)frameData[778]; 
   12148:	eec7 ba27 	vdiv.f32	s23, s14, s15
    mode = (frameData[832] & MLX90640_CTRL_MEAS_MODE_MASK) >> 5;
   1214c:	9306      	str	r3, [sp, #24]
   1214e:	f003 0380 	and.w	r3, r3, #128	; 0x80
   12152:	9307      	str	r3, [sp, #28]
    irDataCP[1] = (int16_t)frameData[808] * gain;
   12154:	f9b9 3650 	ldrsh.w	r3, [r9, #1616]	; 0x650
    irDataCP[0] = irDataCP[0] - params->cpOffset[0] * (1 + params->cpKta * (ta - 25)) * (1 + params->cpKv * (vdd - 3.3));
   12158:	eef3 7a09 	vmov.f32	s15, #57	; 0x41c80000  25.0
   1215c:	ee79 9ae7 	vsub.f32	s19, s19, s15
   12160:	edd4 7a08 	vldr	s15, [r4, #32]
    irDataCP[1] = (int16_t)frameData[808] * gain;
   12164:	ee0c 3a10 	vmov	s24, r3
    irDataCP[0] = irDataCP[0] - params->cpOffset[0] * (1 + params->cpKta * (ta - 25)) * (1 + params->cpKv * (vdd - 3.3));
   12168:	ee49 caa7 	vmla.f32	s25, s19, s15
   1216c:	f7ee f92c 	bl	3c8 <__aeabi_f2d>
   12170:	a3ab      	add	r3, pc, #684	; (adr r3, 12420 <MLX90640_CalculateTo+0x440>)
   12172:	e9d3 2300 	ldrd	r2, r3, [r3]
   12176:	f7ed ffc7 	bl	108 <__aeabi_dsub>
   1217a:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1217e:	69e0      	ldr	r0, [r4, #28]
   12180:	f7ee f922 	bl	3c8 <__aeabi_f2d>
   12184:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   12188:	f7ee f976 	bl	478 <__aeabi_dmul>
   1218c:	2200      	movs	r2, #0
   1218e:	4ba9      	ldr	r3, [pc, #676]	; (12434 <MLX90640_CalculateTo+0x454>)
   12190:	f7ed ffbc 	bl	10c <__adddf3>
    irDataCP[0] = (int16_t)frameData[776] * gain;
   12194:	f9b9 3610 	ldrsh.w	r3, [r9, #1552]	; 0x610
   12198:	ee07 3a90 	vmov	s15, r3
   1219c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    irDataCP[0] = irDataCP[0] - params->cpOffset[0] * (1 + params->cpKta * (ta - 25)) * (1 + params->cpKv * (vdd - 3.3));
   121a0:	4682      	mov	sl, r0
   121a2:	ee67 7aab 	vmul.f32	s15, s15, s23
   121a6:	468b      	mov	fp, r1
   121a8:	ee17 0a90 	vmov	r0, s15
   121ac:	f7ee f90c 	bl	3c8 <__aeabi_f2d>
   121b0:	f9b5 3258 	ldrsh.w	r3, [r5, #600]	; 0x258
   121b4:	ee07 3a90 	vmov	s15, r3
   121b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   121bc:	4606      	mov	r6, r0
   121be:	ee67 7aac 	vmul.f32	s15, s15, s25
   121c2:	460f      	mov	r7, r1
   121c4:	ee17 0a90 	vmov	r0, s15
   121c8:	f7ee f8fe 	bl	3c8 <__aeabi_f2d>
   121cc:	4652      	mov	r2, sl
   121ce:	465b      	mov	r3, fp
   121d0:	f7ee f952 	bl	478 <__aeabi_dmul>
   121d4:	4602      	mov	r2, r0
   121d6:	460b      	mov	r3, r1
   121d8:	4630      	mov	r0, r6
   121da:	4639      	mov	r1, r7
   121dc:	f7ed ff94 	bl	108 <__aeabi_dsub>
   121e0:	f7ee fc2c 	bl	a3c <__aeabi_d2f>
    irDataCP[1] = (int16_t)frameData[808] * gain;
   121e4:	eeb8 cacc 	vcvt.f32.s32	s24, s24
    if( mode ==  params->calibrationModeEE)
   121e8:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
   121ec:	9a07      	ldr	r2, [sp, #28]
    irDataCP[0] = irDataCP[0] - params->cpOffset[0] * (1 + params->cpKta * (ta - 25)) * (1 + params->cpKv * (vdd - 3.3));
   121ee:	900e      	str	r0, [sp, #56]	; 0x38
    irDataCP[1] = (int16_t)frameData[808] * gain;
   121f0:	ee2c ca2b 	vmul.f32	s24, s24, s23
    if( mode ==  params->calibrationModeEE)
   121f4:	4293      	cmp	r3, r2
   121f6:	f9b5 325a 	ldrsh.w	r3, [r5, #602]	; 0x25a
        irDataCP[1] = irDataCP[1] - params->cpOffset[1] * (1 + params->cpKta * (ta - 25)) * (1 + params->cpKv * (vdd - 3.3));
   121fa:	ee1c 0a10 	vmov	r0, s24
   121fe:	ee08 3a90 	vmov	s17, r3
    if( mode ==  params->calibrationModeEE)
   12202:	f040 81d7 	bne.w	125b4 <MLX90640_CalculateTo+0x5d4>
        irDataCP[1] = irDataCP[1] - params->cpOffset[1] * (1 + params->cpKta * (ta - 25)) * (1 + params->cpKv * (vdd - 3.3));
   12206:	f7ee f8df 	bl	3c8 <__aeabi_f2d>
   1220a:	eef8 8ae8 	vcvt.f32.s32	s17, s17
   1220e:	4606      	mov	r6, r0
   12210:	460f      	mov	r7, r1
   12212:	ee68 7aac 	vmul.f32	s15, s17, s25
{
   12216:	2500      	movs	r5, #0
        irDataCP[1] = irDataCP[1] - params->cpOffset[1] * (1 + params->cpKta * (ta - 25)) * (1 + params->cpKv * (vdd - 3.3));
   12218:	ee17 0a90 	vmov	r0, s15
   1221c:	f7ee f8d4 	bl	3c8 <__aeabi_f2d>
   12220:	4652      	mov	r2, sl
   12222:	465b      	mov	r3, fp
   12224:	f7ee f928 	bl	478 <__aeabi_dmul>
   12228:	460b      	mov	r3, r1
   1222a:	4602      	mov	r2, r0
   1222c:	4639      	mov	r1, r7
   1222e:	4630      	mov	r0, r6
   12230:	f7ed ff6a 	bl	108 <__aeabi_dsub>
   12234:	f7ee fc02 	bl	a3c <__aeabi_d2f>
   12238:	f104 034a 	add.w	r3, r4, #74	; 0x4a
   1223c:	9302      	str	r3, [sp, #8]
   1223e:	f604 434c 	addw	r3, r4, #3148	; 0xc4c
   12242:	900f      	str	r0, [sp, #60]	; 0x3c
    for( int pixelNumber = 0; pixelNumber < 768; pixelNumber++)
   12244:	f8cd 800c 	str.w	r8, [sp, #12]
   12248:	9301      	str	r3, [sp, #4]
        if(mode == 0)
   1224a:	9b06      	ldr	r3, [sp, #24]
        if(pattern == frameData[833])
   1224c:	f8b9 2682 	ldrh.w	r2, [r9, #1666]	; 0x682
        if(mode == 0)
   12250:	061b      	lsls	r3, r3, #24
   12252:	46aa      	mov	sl, r5
        ilPattern = pixelNumber / 32 - (pixelNumber / 64) * 2; 
   12254:	f3c5 1840 	ubfx	r8, r5, #5, #1
        chessPattern = ilPattern ^ (pixelNumber - (pixelNumber/2)*2); 
   12258:	bf46      	itte	mi
   1225a:	f00a 0301 	andmi.w	r3, sl, #1
   1225e:	ea88 0303 	eormi.w	r3, r8, r3
          pattern = ilPattern; 
   12262:	4643      	movpl	r3, r8
        if(pattern == frameData[833])
   12264:	4293      	cmp	r3, r2
   12266:	f105 0501 	add.w	r5, r5, #1
   1226a:	f040 8190 	bne.w	1258e <MLX90640_CalculateTo+0x5ae>
            irData = (int16_t)frameData[pixelNumber] * gain;
   1226e:	f939 301a 	ldrsh.w	r3, [r9, sl, lsl #1]
   12272:	ee07 3a90 	vmov	s15, r3
   12276:	eef8 7ae7 	vcvt.f32.s32	s15, s15
            irData = irData - params->offset[pixelNumber]*(1 + kta*(ta - 25))*(1 + kv*(vdd - 3.3));
   1227a:	ee67 7aab 	vmul.f32	s15, s15, s23
   1227e:	ee17 0a90 	vmov	r0, s15
   12282:	f7ee f8a1 	bl	3c8 <__aeabi_f2d>
            kta = params->kta[pixelNumber]/ktaScale;
   12286:	9b01      	ldr	r3, [sp, #4]
   12288:	f993 3000 	ldrsb.w	r3, [r3]
   1228c:	ee07 3a90 	vmov	s15, r3
   12290:	eef8 7ae7 	vcvt.f32.s32	s15, s15
            irData = irData - params->offset[pixelNumber]*(1 + kta*(ta - 25))*(1 + kv*(vdd - 3.3));
   12294:	9b02      	ldr	r3, [sp, #8]
            kta = params->kta[pixelNumber]/ktaScale;
   12296:	eec7 6aaa 	vdiv.f32	s13, s15, s21
            irData = irData - params->offset[pixelNumber]*(1 + kta*(ta - 25))*(1 + kv*(vdd - 3.3));
   1229a:	f9b3 3602 	ldrsh.w	r3, [r3, #1538]	; 0x602
   1229e:	e9cd 0108 	strd	r0, r1, [sp, #32]
   122a2:	eeb0 7a49 	vmov.f32	s14, s18
   122a6:	ee06 7aa9 	vmla.f32	s14, s13, s19
   122aa:	ee07 3a90 	vmov	s15, r3
   122ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   122b2:	ee67 7a27 	vmul.f32	s15, s14, s15
   122b6:	ee17 0a90 	vmov	r0, s15
   122ba:	f7ee f885 	bl	3c8 <__aeabi_f2d>
            kv = params->kv[pixelNumber]/kvScale;
   122be:	9b01      	ldr	r3, [sp, #4]
   122c0:	f993 3301 	ldrsb.w	r3, [r3, #769]	; 0x301
   122c4:	ee07 3a90 	vmov	s15, r3
   122c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
            irData = irData - params->offset[pixelNumber]*(1 + kta*(ta - 25))*(1 + kv*(vdd - 3.3));
   122cc:	4606      	mov	r6, r0
   122ce:	eec7 7a8b 	vdiv.f32	s15, s15, s22
   122d2:	460f      	mov	r7, r1
   122d4:	ee17 0a90 	vmov	r0, s15
   122d8:	f7ee f876 	bl	3c8 <__aeabi_f2d>
   122dc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   122e0:	f7ee f8ca 	bl	478 <__aeabi_dmul>
   122e4:	4b53      	ldr	r3, [pc, #332]	; (12434 <MLX90640_CalculateTo+0x454>)
   122e6:	2200      	movs	r2, #0
   122e8:	f7ed ff10 	bl	10c <__adddf3>
   122ec:	4602      	mov	r2, r0
   122ee:	460b      	mov	r3, r1
   122f0:	4630      	mov	r0, r6
   122f2:	4639      	mov	r1, r7
   122f4:	f7ee f8c0 	bl	478 <__aeabi_dmul>
   122f8:	4602      	mov	r2, r0
   122fa:	460b      	mov	r3, r1
   122fc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   12300:	f7ed ff02 	bl	108 <__aeabi_dsub>
   12304:	f7ee fb9a 	bl	a3c <__aeabi_d2f>
            if(mode !=  params->calibrationModeEE)
   12308:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
   1230c:	9a07      	ldr	r2, [sp, #28]
            irData = irData - params->offset[pixelNumber]*(1 + kta*(ta - 25))*(1 + kv*(vdd - 3.3));
   1230e:	ee07 0a90 	vmov	s15, r0
            if(mode !=  params->calibrationModeEE)
   12312:	4293      	cmp	r3, r2
            irData = irData - params->offset[pixelNumber]*(1 + kta*(ta - 25))*(1 + kv*(vdd - 3.3));
   12314:	eeb0 7a67 	vmov.f32	s14, s15
            if(mode !=  params->calibrationModeEE)
   12318:	d031      	beq.n	1237e <MLX90640_CalculateTo+0x39e>
        conversionPattern = ((pixelNumber + 2) / 4 - (pixelNumber + 3) / 4 + (pixelNumber + 1) / 4 - pixelNumber / 4) * (1 - 2 * ilPattern);
   1231a:	ea4f 0848 	mov.w	r8, r8, lsl #1
              irData = irData + params->ilChessC[2] * (2 * ilPattern - 1) - params->ilChessC[1] * conversionPattern; 
   1231e:	f108 33ff 	add.w	r3, r8, #4294967295
   12322:	ee06 3a90 	vmov	s13, r3
   12326:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
        conversionPattern = ((pixelNumber + 2) / 4 - (pixelNumber + 3) / 4 + (pixelNumber + 1) / 4 - pixelNumber / 4) * (1 - 2 * ilPattern);
   1232a:	f11a 0203 	adds.w	r2, sl, #3
              irData = irData + params->ilChessC[2] * (2 * ilPattern - 1) - params->ilChessC[1] * conversionPattern; 
   1232e:	ed93 6a99 	vldr	s12, [r3, #612]	; 0x264
        conversionPattern = ((pixelNumber + 2) / 4 - (pixelNumber + 3) / 4 + (pixelNumber + 1) / 4 - pixelNumber / 4) * (1 - 2 * ilPattern);
   12332:	f10a 0302 	add.w	r3, sl, #2
              irData = irData + params->ilChessC[2] * (2 * ilPattern - 1) - params->ilChessC[1] * conversionPattern; 
   12336:	eef8 6ae6 	vcvt.f32.s32	s13, s13
        conversionPattern = ((pixelNumber + 2) / 4 - (pixelNumber + 3) / 4 + (pixelNumber + 1) / 4 - pixelNumber / 4) * (1 - 2 * ilPattern);
   1233a:	bf48      	it	mi
   1233c:	f10a 0206 	addmi.w	r2, sl, #6
   12340:	109b      	asrs	r3, r3, #2
   12342:	f1ba 0f00 	cmp.w	sl, #0
   12346:	eba3 03a2 	sub.w	r3, r3, r2, asr #2
              irData = irData + params->ilChessC[2] * (2 * ilPattern - 1) - params->ilChessC[1] * conversionPattern; 
   1234a:	ee46 7a86 	vmla.f32	s15, s13, s12
        conversionPattern = ((pixelNumber + 2) / 4 - (pixelNumber + 3) / 4 + (pixelNumber + 1) / 4 - pixelNumber / 4) * (1 - 2 * ilPattern);
   1234e:	eb03 03a5 	add.w	r3, r3, r5, asr #2
   12352:	bfb8      	it	lt
   12354:	f10a 0a03 	addlt.w	sl, sl, #3
   12358:	eba3 03aa 	sub.w	r3, r3, sl, asr #2
   1235c:	f1c8 0801 	rsb	r8, r8, #1
   12360:	fb13 f308 	smulbb	r3, r3, r8
              irData = irData + params->ilChessC[2] * (2 * ilPattern - 1) - params->ilChessC[1] * conversionPattern; 
   12364:	b25b      	sxtb	r3, r3
   12366:	eeb0 7a67 	vmov.f32	s14, s15
   1236a:	ee07 3a90 	vmov	s15, r3
   1236e:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
   12372:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   12376:	edd3 6a98 	vldr	s13, [r3, #608]	; 0x260
   1237a:	ee07 7ae6 	vmls.f32	s14, s15, s13
            irData = irData - params->tgc * irDataCP[subPage];
   1237e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
            alphaCompensated = SCALEALPHA*alphaScale/params->alpha[pixelNumber];
   12380:	980b      	ldr	r0, [sp, #44]	; 0x2c
            irData = irData - params->tgc * irDataCP[subPage];
   12382:	edd4 6a06 	vldr	s13, [r4, #24]
   12386:	aa14      	add	r2, sp, #80	; 0x50
   12388:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   1238c:	ed53 7a06 	vldr	s15, [r3, #-24]	; 0xffffffe8
   12390:	ee06 7ae7 	vmls.f32	s14, s13, s15
            alphaCompensated = alphaCompensated*(1 + params->KsTa * (ta - 25));
   12394:	eef0 8a49 	vmov.f32	s17, s18
            irData = irData / emissivity;
   12398:	ee87 ca0a 	vdiv.f32	s24, s14, s20
            alphaCompensated = SCALEALPHA*alphaScale/params->alpha[pixelNumber];
   1239c:	f7ee f814 	bl	3c8 <__aeabi_f2d>
   123a0:	a321      	add	r3, pc, #132	; (adr r3, 12428 <MLX90640_CalculateTo+0x448>)
   123a2:	e9d3 2300 	ldrd	r2, r3, [r3]
   123a6:	f7ee f867 	bl	478 <__aeabi_dmul>
   123aa:	9b02      	ldr	r3, [sp, #8]
   123ac:	4606      	mov	r6, r0
   123ae:	8818      	ldrh	r0, [r3, #0]
   123b0:	460f      	mov	r7, r1
   123b2:	f7ed fff7 	bl	3a4 <__aeabi_i2d>
   123b6:	4602      	mov	r2, r0
   123b8:	460b      	mov	r3, r1
   123ba:	4630      	mov	r0, r6
   123bc:	4639      	mov	r1, r7
   123be:	f7ee f985 	bl	6cc <__aeabi_ddiv>
   123c2:	f7ee fb3b 	bl	a3c <__aeabi_d2f>
            alphaCompensated = alphaCompensated*(1 + params->KsTa * (ta - 25));
   123c6:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
   123ca:	ee49 8a87 	vmla.f32	s17, s19, s14
            alphaCompensated = SCALEALPHA*alphaScale/params->alpha[pixelNumber];
   123ce:	ee07 0a90 	vmov	s15, r0
            alphaCompensated = alphaCompensated*(1 + params->KsTa * (ta - 25));
   123d2:	ee68 8aa7 	vmul.f32	s17, s17, s15
            Sx = alphaCompensated * alphaCompensated * alphaCompensated * (irData + alphaCompensated * taTr);
   123d6:	eeb0 7a4c 	vmov.f32	s14, s24
   123da:	ee08 7a28 	vmla.f32	s14, s16, s17
   123de:	ee68 7aa8 	vmul.f32	s15, s17, s17
   123e2:	ee67 7aa8 	vmul.f32	s15, s15, s17
            Sx = sqrt(sqrt(Sx)) * params->ksTo[1];            
   123e6:	ee67 7a87 	vmul.f32	s15, s15, s14
   123ea:	ee17 0a90 	vmov	r0, s15
   123ee:	f7ed ffeb 	bl	3c8 <__aeabi_f2d>
   123f2:	ec41 0b10 	vmov	d0, r0, r1
   123f6:	f00e fec1 	bl	2117c <sqrt>
   123fa:	f00e febf 	bl	2117c <sqrt>
   123fe:	6b20      	ldr	r0, [r4, #48]	; 0x30
   12400:	ed8d 0b08 	vstr	d0, [sp, #32]
   12404:	f7ed ffe0 	bl	3c8 <__aeabi_f2d>
   12408:	4682      	mov	sl, r0
            To = sqrt(sqrt(irData/(alphaCompensated * (1 - params->ksTo[1] * 273.15) + Sx) + taTr)) - 273.15;                     
   1240a:	ee1c 0a10 	vmov	r0, s24
            Sx = sqrt(sqrt(Sx)) * params->ksTo[1];            
   1240e:	468b      	mov	fp, r1
            To = sqrt(sqrt(irData/(alphaCompensated * (1 - params->ksTo[1] * 273.15) + Sx) + taTr)) - 273.15;                     
   12410:	f7ed ffda 	bl	3c8 <__aeabi_f2d>
   12414:	e014      	b.n	12440 <MLX90640_CalculateTo+0x460>
   12416:	bf00      	nop
   12418:	00000000 	.word	0x00000000
   1241c:	40000000 	.word	0x40000000
   12420:	66666666 	.word	0x66666666
   12424:	400a6666 	.word	0x400a6666
   12428:	a0b5ed8d 	.word	0xa0b5ed8d
   1242c:	3eb0c6f7 	.word	0x3eb0c6f7
   12430:	42200000 	.word	0x42200000
   12434:	3ff00000 	.word	0x3ff00000
   12438:	66666666 	.word	0x66666666
   1243c:	40711266 	.word	0x40711266
   12440:	a365      	add	r3, pc, #404	; (adr r3, 125d8 <MLX90640_CalculateTo+0x5f8>)
   12442:	e9d3 2300 	ldrd	r2, r3, [r3]
   12446:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   1244a:	4650      	mov	r0, sl
   1244c:	4659      	mov	r1, fp
   1244e:	f7ee f813 	bl	478 <__aeabi_dmul>
   12452:	4602      	mov	r2, r0
   12454:	460b      	mov	r3, r1
   12456:	2000      	movs	r0, #0
   12458:	4961      	ldr	r1, [pc, #388]	; (125e0 <MLX90640_CalculateTo+0x600>)
   1245a:	f7ed fe55 	bl	108 <__aeabi_dsub>
   1245e:	4606      	mov	r6, r0
   12460:	ee18 0a90 	vmov	r0, s17
   12464:	460f      	mov	r7, r1
   12466:	f7ed ffaf 	bl	3c8 <__aeabi_f2d>
   1246a:	4602      	mov	r2, r0
   1246c:	460b      	mov	r3, r1
   1246e:	4630      	mov	r0, r6
   12470:	4639      	mov	r1, r7
   12472:	f7ee f801 	bl	478 <__aeabi_dmul>
            Sx = sqrt(sqrt(Sx)) * params->ksTo[1];            
   12476:	4652      	mov	r2, sl
   12478:	465b      	mov	r3, fp
            To = sqrt(sqrt(irData/(alphaCompensated * (1 - params->ksTo[1] * 273.15) + Sx) + taTr)) - 273.15;                     
   1247a:	4606      	mov	r6, r0
   1247c:	460f      	mov	r7, r1
            Sx = sqrt(sqrt(Sx)) * params->ksTo[1];            
   1247e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   12482:	f7ed fff9 	bl	478 <__aeabi_dmul>
   12486:	f7ee fad9 	bl	a3c <__aeabi_d2f>
            To = sqrt(sqrt(irData/(alphaCompensated * (1 - params->ksTo[1] * 273.15) + Sx) + taTr)) - 273.15;                     
   1248a:	f7ed ff9d 	bl	3c8 <__aeabi_f2d>
   1248e:	4602      	mov	r2, r0
   12490:	460b      	mov	r3, r1
   12492:	4630      	mov	r0, r6
   12494:	4639      	mov	r1, r7
   12496:	f7ed fe39 	bl	10c <__adddf3>
   1249a:	4602      	mov	r2, r0
   1249c:	460b      	mov	r3, r1
   1249e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   124a2:	f7ee f913 	bl	6cc <__aeabi_ddiv>
   124a6:	4606      	mov	r6, r0
   124a8:	ee18 0a10 	vmov	r0, s16
   124ac:	460f      	mov	r7, r1
   124ae:	f7ed ff8b 	bl	3c8 <__aeabi_f2d>
   124b2:	4602      	mov	r2, r0
   124b4:	460b      	mov	r3, r1
   124b6:	4630      	mov	r0, r6
   124b8:	4639      	mov	r1, r7
   124ba:	f7ed fe27 	bl	10c <__adddf3>
   124be:	ec41 0b10 	vmov	d0, r0, r1
   124c2:	f00e fe5b 	bl	2117c <sqrt>
   124c6:	f00e fe59 	bl	2117c <sqrt>
   124ca:	a343      	add	r3, pc, #268	; (adr r3, 125d8 <MLX90640_CalculateTo+0x5f8>)
   124cc:	e9d3 2300 	ldrd	r2, r3, [r3]
   124d0:	ec51 0b10 	vmov	r0, r1, d0
   124d4:	f7ed fe18 	bl	108 <__aeabi_dsub>
   124d8:	f7ee fab0 	bl	a3c <__aeabi_d2f>
            if(To < params->ct[1])
   124dc:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
   124e0:	ee07 3a10 	vmov	s14, r3
            To = sqrt(sqrt(irData/(alphaCompensated * (1 - params->ksTo[1] * 273.15) + Sx) + taTr)) - 273.15;                     
   124e4:	ee07 0a90 	vmov	s15, r0
            if(To < params->ct[1])
   124e8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
   124ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
   124f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   124f4:	dc69      	bgt.n	125ca <MLX90640_CalculateTo+0x5ea>
            else if(To < params->ct[2])   
   124f6:	f9b4 3044 	ldrsh.w	r3, [r4, #68]	; 0x44
   124fa:	ee07 3a10 	vmov	s14, r3
   124fe:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
   12502:	eeb4 7ae7 	vcmpe.f32	s14, s15
   12506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1250a:	dc60      	bgt.n	125ce <MLX90640_CalculateTo+0x5ee>
            else if(To < params->ct[3])
   1250c:	f9b4 3046 	ldrsh.w	r3, [r4, #70]	; 0x46
   12510:	ee07 3a10 	vmov	s14, r3
   12514:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
                range = 3;            
   12518:	eeb4 7ae7 	vcmpe.f32	s14, s15
   1251c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   12520:	bfcc      	ite	gt
   12522:	2302      	movgt	r3, #2
   12524:	2303      	movle	r3, #3
            To = sqrt(sqrt(irData / (alphaCompensated * alphaCorrR[range] * (1 + params->ksTo[range] * (To - params->ct[range]))) + taTr)) - 273.15;
   12526:	f103 0220 	add.w	r2, r3, #32
   1252a:	f934 2012 	ldrsh.w	r2, [r4, r2, lsl #1]
   1252e:	ee07 2a10 	vmov	s14, r2
   12532:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
   12536:	eb04 0283 	add.w	r2, r4, r3, lsl #2
   1253a:	edd2 6a0b 	vldr	s13, [r2, #44]	; 0x2c
   1253e:	ee77 7ac7 	vsub.f32	s15, s15, s14
   12542:	aa14      	add	r2, sp, #80	; 0x50
   12544:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   12548:	eeb0 7a49 	vmov.f32	s14, s18
   1254c:	ee07 7aa6 	vmla.f32	s14, s15, s13
   12550:	ed53 7a04 	vldr	s15, [r3, #-16]
   12554:	ee68 8aa7 	vmul.f32	s17, s17, s15
   12558:	ee67 7a28 	vmul.f32	s15, s14, s17
   1255c:	ee8c 7a27 	vdiv.f32	s14, s24, s15
   12560:	ee77 7a08 	vadd.f32	s15, s14, s16
   12564:	ee17 0a90 	vmov	r0, s15
   12568:	f7ed ff2e 	bl	3c8 <__aeabi_f2d>
   1256c:	ec41 0b10 	vmov	d0, r0, r1
   12570:	f00e fe04 	bl	2117c <sqrt>
   12574:	f00e fe02 	bl	2117c <sqrt>
   12578:	a317      	add	r3, pc, #92	; (adr r3, 125d8 <MLX90640_CalculateTo+0x5f8>)
   1257a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1257e:	ec51 0b10 	vmov	r0, r1, d0
   12582:	f7ed fdc1 	bl	108 <__aeabi_dsub>
   12586:	f7ee fa59 	bl	a3c <__aeabi_d2f>
   1258a:	9b03      	ldr	r3, [sp, #12]
   1258c:	6018      	str	r0, [r3, #0]
    for( int pixelNumber = 0; pixelNumber < 768; pixelNumber++)
   1258e:	9b03      	ldr	r3, [sp, #12]
   12590:	3304      	adds	r3, #4
   12592:	9303      	str	r3, [sp, #12]
   12594:	9b02      	ldr	r3, [sp, #8]
   12596:	3302      	adds	r3, #2
   12598:	9302      	str	r3, [sp, #8]
   1259a:	9b01      	ldr	r3, [sp, #4]
   1259c:	f5b5 7f40 	cmp.w	r5, #768	; 0x300
   125a0:	f103 0301 	add.w	r3, r3, #1
   125a4:	9301      	str	r3, [sp, #4]
   125a6:	f47f ae50 	bne.w	1224a <MLX90640_CalculateTo+0x26a>
}
   125aa:	b015      	add	sp, #84	; 0x54
   125ac:	ecbd 8b0a 	vpop	{d8-d12}
   125b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      irDataCP[1] = irDataCP[1] - (params->cpOffset[1] + params->ilChessC[0]) * (1 + params->cpKta * (ta - 25)) * (1 + params->cpKv * (vdd - 3.3));
   125b4:	f7ed ff08 	bl	3c8 <__aeabi_f2d>
   125b8:	eef8 8ae8 	vcvt.f32.s32	s17, s17
   125bc:	edd5 7a97 	vldr	s15, [r5, #604]	; 0x25c
   125c0:	4606      	mov	r6, r0
   125c2:	ee78 8aa7 	vadd.f32	s17, s17, s15
   125c6:	460f      	mov	r7, r1
   125c8:	e623      	b.n	12212 <MLX90640_CalculateTo+0x232>
                range = 0;
   125ca:	2300      	movs	r3, #0
   125cc:	e7ab      	b.n	12526 <MLX90640_CalculateTo+0x546>
                range = 1;            
   125ce:	2301      	movs	r3, #1
   125d0:	e7a9      	b.n	12526 <MLX90640_CalculateTo+0x546>
   125d2:	bf00      	nop
   125d4:	f3af 8000 	nop.w
   125d8:	66666666 	.word	0x66666666
   125dc:	40711266 	.word	0x40711266
   125e0:	3ff00000 	.word	0x3ff00000
   125e4:	00000000 	.word	0x00000000

000125e8 <temp_thread>:
	}
}


void temp_thread(void *dummy1, void *dummy2, void *dummy3)
{
   125e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   125ec:	ed2d 8b06 	vpush	{d8-d10}
   125f0:	f6ad 5d24 	subw	sp, sp, #3364	; 0xd24
   125f4:	af00      	add	r7, sp, #0
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm0 = { .val = timeout };
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
   125f6:	2100      	movs	r1, #0
   125f8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   125fc:	f00d fdee 	bl	201dc <z_impl_k_sleep>
	//k_sleep(K_MSEC(500));	// wait one refresh rate? default refresh rate?
	k_sleep(K_MSEC(1000));	//datasheet is weird so just wait 1 second to be safe

	uint16_t eeMLX90640[MLX90640_EEPROM_DUMP_NUM];

	status = MLX90640_DumpEE(MLX_ADDR, eeMLX90640);
   12600:	f107 0118 	add.w	r1, r7, #24
   12604:	2033      	movs	r0, #51	; 0x33
   12606:	f00e ff4a 	bl	2149e <MLX90640_DumpEE>
	if (status != 0) {
   1260a:	2800      	cmp	r0, #0
   1260c:	d060      	beq.n	126d0 <temp_thread+0xe8>
		LOG_ERR("Failed to load system parameters, MLX90640_DumpEE() returned %d", status);
   1260e:	466c      	mov	r4, sp
   12610:	b088      	sub	sp, #32
   12612:	466a      	mov	r2, sp
   12614:	4b9a      	ldr	r3, [pc, #616]	; (12880 <temp_thread+0x298>)
   12616:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1261a:	2303      	movs	r3, #3
   1261c:	f842 3f10 	str.w	r3, [r2, #16]!
   12620:	4898      	ldr	r0, [pc, #608]	; (12884 <temp_thread+0x29c>)
   12622:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   12626:	f00f f81c 	bl	21662 <z_log_msg_static_create.constprop.0>
   1262a:	46a5      	mov	sp, r4
	} else {
		LOG_INF("Dumped MLX EE");
	}

	status = MLX90640_ExtractParameters(eeMLX90640, &mlx90640);
   1262c:	4996      	ldr	r1, [pc, #600]	; (12888 <temp_thread+0x2a0>)
   1262e:	f107 0018 	add.w	r0, r7, #24
   12632:	f7ff f8e5 	bl	11800 <MLX90640_ExtractParameters>
	if (status != 0) {
   12636:	2800      	cmp	r0, #0
   12638:	d058      	beq.n	126ec <temp_thread+0x104>
		LOG_ERR("Parameter extraction failed, MLX90640_ExtractParameters() returned %d", status);
   1263a:	466c      	mov	r4, sp
   1263c:	b088      	sub	sp, #32
   1263e:	466a      	mov	r2, sp
   12640:	4b92      	ldr	r3, [pc, #584]	; (1288c <temp_thread+0x2a4>)
   12642:	e9c2 3005 	strd	r3, r0, [r2, #20]
   12646:	2303      	movs	r3, #3
   12648:	f842 3f10 	str.w	r3, [r2, #16]!
   1264c:	488d      	ldr	r0, [pc, #564]	; (12884 <temp_thread+0x29c>)
   1264e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   12652:	f00f f806 	bl	21662 <z_log_msg_static_create.constprop.0>
   12656:	46a5      	mov	sp, r4
	} else {
		LOG_INF("Extracted MLX parameters");
	}

	status = MLX90640_SetRefreshRate(MLX_ADDR, TEMP_FREQ);
   12658:	2104      	movs	r1, #4
   1265a:	2033      	movs	r0, #51	; 0x33
   1265c:	f00e ffe6 	bl	2162c <MLX90640_SetRefreshRate>
	if (status != 0) {
   12660:	2800      	cmp	r0, #0
   12662:	d051      	beq.n	12708 <temp_thread+0x120>
		LOG_ERR("Setting refresh rate failed, MLX90640_SetRefreshRate() returned %d", status);
   12664:	466c      	mov	r4, sp
   12666:	b088      	sub	sp, #32
   12668:	466a      	mov	r2, sp
   1266a:	4b89      	ldr	r3, [pc, #548]	; (12890 <temp_thread+0x2a8>)
   1266c:	e9c2 3005 	strd	r3, r0, [r2, #20]
   12670:	2303      	movs	r3, #3
   12672:	f842 3f10 	str.w	r3, [r2, #16]!
   12676:	4883      	ldr	r0, [pc, #524]	; (12884 <temp_thread+0x29c>)
   12678:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1267c:	f00e fff1 	bl	21662 <z_log_msg_static_create.constprop.0>
   12680:	46a5      	mov	sp, r4
	} else {
		LOG_INF("Set MLX refresh rate");
	}

	status = MLX90640_SynchFrame(MLX_ADDR);
   12682:	2033      	movs	r0, #51	; 0x33
   12684:	f00e ff12 	bl	214ac <MLX90640_SynchFrame>
	if (status != 0) {
   12688:	2800      	cmp	r0, #0
   1268a:	d04b      	beq.n	12724 <temp_thread+0x13c>
		LOG_ERR("Synchronizing MLX frame failed, MLX90640_SynchFrame() returned %d", status);
   1268c:	466c      	mov	r4, sp
   1268e:	b088      	sub	sp, #32
   12690:	466a      	mov	r2, sp
   12692:	4b80      	ldr	r3, [pc, #512]	; (12894 <temp_thread+0x2ac>)
   12694:	e9c2 3005 	strd	r3, r0, [r2, #20]
   12698:	2303      	movs	r3, #3
   1269a:	f842 3f10 	str.w	r3, [r2, #16]!
   1269e:	4879      	ldr	r0, [pc, #484]	; (12884 <temp_thread+0x29c>)
   126a0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   126a4:	f00e ffdd 	bl	21662 <z_log_msg_static_create.constprop.0>
   126a8:	46a5      	mov	sp, r4
		//LOG_INF("finished temp processing");

		for (int i = 0; i < 32; i++)
		{
			// would Zephyr CLAMP macro be faster than fmin and fmax?
			tire_temp[i] = fmax(fmin(round((mlx90640To[320+i]+mlx90640To[352+i]+mlx90640To[384+i]+mlx90640To[416+i])/2),255),0);
   126aa:	ed9f 8b71 	vldr	d8, [pc, #452]	; 12870 <temp_thread+0x288>
   126ae:	ed9f 9b72 	vldr	d9, [pc, #456]	; 12878 <temp_thread+0x290>
 *
 * @return Value of @a target.
 */
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   126b2:	4d79      	ldr	r5, [pc, #484]	; (12898 <temp_thread+0x2b0>)
   126b4:	f3bf 8f5b 	dmb	ish
   126b8:	682b      	ldr	r3, [r5, #0]
   126ba:	f3bf 8f5b 	dmb	ish
	while (atomic_test_bit(&flags, 0))	// atomic babbyyyy
   126be:	07db      	lsls	r3, r3, #31
   126c0:	d43e      	bmi.n	12740 <temp_thread+0x158>


	#ifdef BOARD_TTPMS_EXM_2_0
		// turn off MLX power MOSFET
	#endif
   126c2:	f607 5724 	addw	r7, r7, #3364	; 0xd24
   126c6:	46bd      	mov	sp, r7
   126c8:	ecbd 8b06 	vpop	{d8-d10}
   126cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		LOG_INF("Dumped MLX EE");
   126d0:	4b72      	ldr	r3, [pc, #456]	; (1289c <temp_thread+0x2b4>)
   126d2:	f8c7 36ac 	str.w	r3, [r7, #1708]	; 0x6ac
   126d6:	2302      	movs	r3, #2
   126d8:	486a      	ldr	r0, [pc, #424]	; (12884 <temp_thread+0x29c>)
   126da:	f8c7 36a8 	str.w	r3, [r7, #1704]	; 0x6a8
   126de:	f507 62d5 	add.w	r2, r7, #1704	; 0x6a8
   126e2:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
   126e6:	f00e ffbc 	bl	21662 <z_log_msg_static_create.constprop.0>
   126ea:	e79f      	b.n	1262c <temp_thread+0x44>
		LOG_INF("Extracted MLX parameters");
   126ec:	4b6c      	ldr	r3, [pc, #432]	; (128a0 <temp_thread+0x2b8>)
   126ee:	f8c7 36ac 	str.w	r3, [r7, #1708]	; 0x6ac
   126f2:	2302      	movs	r3, #2
   126f4:	4863      	ldr	r0, [pc, #396]	; (12884 <temp_thread+0x29c>)
   126f6:	f8c7 36a8 	str.w	r3, [r7, #1704]	; 0x6a8
   126fa:	f507 62d5 	add.w	r2, r7, #1704	; 0x6a8
   126fe:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
   12702:	f00e ffae 	bl	21662 <z_log_msg_static_create.constprop.0>
   12706:	e7a7      	b.n	12658 <temp_thread+0x70>
		LOG_INF("Set MLX refresh rate");
   12708:	4b66      	ldr	r3, [pc, #408]	; (128a4 <temp_thread+0x2bc>)
   1270a:	f8c7 36ac 	str.w	r3, [r7, #1708]	; 0x6ac
   1270e:	2302      	movs	r3, #2
   12710:	485c      	ldr	r0, [pc, #368]	; (12884 <temp_thread+0x29c>)
   12712:	f8c7 36a8 	str.w	r3, [r7, #1704]	; 0x6a8
   12716:	f507 62d5 	add.w	r2, r7, #1704	; 0x6a8
   1271a:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
   1271e:	f00e ffa0 	bl	21662 <z_log_msg_static_create.constprop.0>
   12722:	e7ae      	b.n	12682 <temp_thread+0x9a>
		LOG_INF("Synchronized MLX frame");
   12724:	4b60      	ldr	r3, [pc, #384]	; (128a8 <temp_thread+0x2c0>)
   12726:	f8c7 36ac 	str.w	r3, [r7, #1708]	; 0x6ac
   1272a:	2302      	movs	r3, #2
   1272c:	4855      	ldr	r0, [pc, #340]	; (12884 <temp_thread+0x29c>)
   1272e:	f8c7 36a8 	str.w	r3, [r7, #1704]	; 0x6a8
   12732:	f507 62d5 	add.w	r2, r7, #1704	; 0x6a8
   12736:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
   1273a:	f00e ff92 	bl	21662 <z_log_msg_static_create.constprop.0>
   1273e:	e7b4      	b.n	126aa <temp_thread+0xc2>
		status = MLX90640_GetFrameData(MLX_ADDR, frame);	// this function waits until data is available from MLX
   12740:	f507 61d3 	add.w	r1, r7, #1688	; 0x698
   12744:	2033      	movs	r0, #51	; 0x33
   12746:	f00e fec9 	bl	214dc <MLX90640_GetFrameData>
		if (status < 0) {
   1274a:	2800      	cmp	r0, #0
   1274c:	da0e      	bge.n	1276c <temp_thread+0x184>
			LOG_ERR("Getting MLX frame data failed, MLX90640_GetFrameData() returned %d", status);
   1274e:	466c      	mov	r4, sp
   12750:	b088      	sub	sp, #32
   12752:	466a      	mov	r2, sp
   12754:	4b55      	ldr	r3, [pc, #340]	; (128ac <temp_thread+0x2c4>)
   12756:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1275a:	2303      	movs	r3, #3
   1275c:	f842 3f10 	str.w	r3, [r2, #16]!
   12760:	4848      	ldr	r0, [pc, #288]	; (12884 <temp_thread+0x29c>)
   12762:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   12766:	f00e ff7c 	bl	21662 <z_log_msg_static_create.constprop.0>
   1276a:	46a5      	mov	sp, r4
		Vdd = MLX90640_GetVdd(frame, &mlx90640);
   1276c:	4946      	ldr	r1, [pc, #280]	; (12888 <temp_thread+0x2a0>)
   1276e:	f8df 8164 	ldr.w	r8, [pc, #356]	; 128d4 <temp_thread+0x2ec>
   12772:	4c4f      	ldr	r4, [pc, #316]	; (128b0 <temp_thread+0x2c8>)
   12774:	f507 60d3 	add.w	r0, r7, #1688	; 0x698
   12778:	f7ff fb5a 	bl	11e30 <MLX90640_GetVdd>
   1277c:	4b4d      	ldr	r3, [pc, #308]	; (128b4 <temp_thread+0x2cc>)
		Ta = MLX90640_GetTa(frame, &mlx90640);
   1277e:	4942      	ldr	r1, [pc, #264]	; (12888 <temp_thread+0x2a0>)
		Vdd = MLX90640_GetVdd(frame, &mlx90640);
   12780:	ed83 0a00 	vstr	s0, [r3]
		Ta = MLX90640_GetTa(frame, &mlx90640);
   12784:	f507 60d3 	add.w	r0, r7, #1688	; 0x698
   12788:	f7ff fbb2 	bl	11ef0 <MLX90640_GetTa>
   1278c:	4b4a      	ldr	r3, [pc, #296]	; (128b8 <temp_thread+0x2d0>)
		MLX90640_CalculateTo(frame, &mlx90640, emissivity, tr, mlx90640To);
   1278e:	4a4b      	ldr	r2, [pc, #300]	; (128bc <temp_thread+0x2d4>)
		Ta = MLX90640_GetTa(frame, &mlx90640);
   12790:	ed83 0a00 	vstr	s0, [r3]
		float tr = Ta - ta_shift; // Reflected temperature based on the sensor ambient temperature
   12794:	4b4a      	ldr	r3, [pc, #296]	; (128c0 <temp_thread+0x2d8>)
		MLX90640_CalculateTo(frame, &mlx90640, emissivity, tr, mlx90640To);
   12796:	493c      	ldr	r1, [pc, #240]	; (12888 <temp_thread+0x2a0>)
		float tr = Ta - ta_shift; // Reflected temperature based on the sensor ambient temperature
   12798:	edd3 0a00 	vldr	s1, [r3]
		MLX90640_CalculateTo(frame, &mlx90640, emissivity, tr, mlx90640To);
   1279c:	4b49      	ldr	r3, [pc, #292]	; (128c4 <temp_thread+0x2dc>)
   1279e:	ee70 0a60 	vsub.f32	s1, s0, s1
   127a2:	f507 60d3 	add.w	r0, r7, #1688	; 0x698
   127a6:	ed93 0a00 	vldr	s0, [r3]
   127aa:	f7ff fc19 	bl	11fe0 <MLX90640_CalculateTo>
		for (int i = 0; i < 32; i++)
   127ae:	2600      	movs	r6, #0
   127b0:	46c1      	mov	r9, r8
			tire_temp[i] = fmax(fmin(round((mlx90640To[320+i]+mlx90640To[352+i]+mlx90640To[384+i]+mlx90640To[416+i])/2),255),0);
   127b2:	eeb6 aa00 	vmov.f32	s20, #96	; 0x3f000000  0.5
   127b6:	ecf4 7a01 	vldmia	r4!, {s15}
   127ba:	ed94 7a1f 	vldr	s14, [r4, #124]	; 0x7c
   127be:	ee77 7a87 	vadd.f32	s15, s15, s14
   127c2:	ed94 7a3f 	vldr	s14, [r4, #252]	; 0xfc
   127c6:	ee77 7a87 	vadd.f32	s15, s15, s14
   127ca:	ed94 7a5f 	vldr	s14, [r4, #380]	; 0x17c
   127ce:	ee77 7a87 	vadd.f32	s15, s15, s14
		for (int i = 0; i < 32; i++)
   127d2:	3601      	adds	r6, #1
			tire_temp[i] = fmax(fmin(round((mlx90640To[320+i]+mlx90640To[352+i]+mlx90640To[384+i]+mlx90640To[416+i])/2),255),0);
   127d4:	ee67 7a8a 	vmul.f32	s15, s15, s20
   127d8:	ee17 0a90 	vmov	r0, s15
   127dc:	f7ed fdf4 	bl	3c8 <__aeabi_f2d>
   127e0:	ec41 0b10 	vmov	d0, r0, r1
   127e4:	f00e fbd4 	bl	20f90 <round>
   127e8:	eeb0 1a48 	vmov.f32	s2, s16
   127ec:	eef0 1a68 	vmov.f32	s3, s17
   127f0:	f012 fca4 	bl	2513c <fmin>
   127f4:	eeb0 1a49 	vmov.f32	s2, s18
   127f8:	eef0 1a69 	vmov.f32	s3, s19
   127fc:	f012 fc74 	bl	250e8 <fmax>
   12800:	ec51 0b10 	vmov	r0, r1, d0
   12804:	f7ee f8fa 	bl	9fc <__aeabi_d2uiz>
		for (int i = 0; i < 32; i++)
   12808:	2e20      	cmp	r6, #32
			tire_temp[i] = fmax(fmin(round((mlx90640To[320+i]+mlx90640To[352+i]+mlx90640To[384+i]+mlx90640To[416+i])/2),255),0);
   1280a:	f808 0b01 	strb.w	r0, [r8], #1
		for (int i = 0; i < 32; i++)
   1280e:	d1d2      	bne.n	127b6 <temp_thread+0x1ce>
		if((connection != NULL) && atomic_test_bit(&flags, 0)) {	// MLX processing above takes a while, check if we are still connected and temp is enabled
   12810:	4b2d      	ldr	r3, [pc, #180]	; (128c8 <temp_thread+0x2e0>)
   12812:	681a      	ldr	r2, [r3, #0]
   12814:	2a00      	cmp	r2, #0
   12816:	f43f af4d 	beq.w	126b4 <temp_thread+0xcc>
   1281a:	f3bf 8f5b 	dmb	ish
   1281e:	682a      	ldr	r2, [r5, #0]
   12820:	f3bf 8f5b 	dmb	ish
   12824:	07d2      	lsls	r2, r2, #31
   12826:	f57f af45 	bpl.w	126b4 <temp_thread+0xcc>
			status = bt_gatt_notify(connection, &primary_service.attrs[1], &tire_temp, sizeof(tire_temp));
   1282a:	681c      	ldr	r4, [r3, #0]
				 const struct bt_gatt_attr *attr,
				 const void *data, uint16_t len)
{
	struct bt_gatt_notify_params params;

	memset(&params, 0, sizeof(params));
   1282c:	2100      	movs	r1, #0
   1282e:	2218      	movs	r2, #24
   12830:	4638      	mov	r0, r7
   12832:	f012 fcd6 	bl	251e2 <memset>

	params.attr = attr;
   12836:	4b25      	ldr	r3, [pc, #148]	; (128cc <temp_thread+0x2e4>)
	params.data = data;
	params.len = len;
   12838:	81be      	strh	r6, [r7, #12]
#if defined(CONFIG_BT_EATT)
	params.chan_opt = BT_ATT_CHAN_OPT_NONE;
#endif /* CONFIG_BT_EATT */

	return bt_gatt_notify_cb(conn, &params);
   1283a:	4639      	mov	r1, r7
   1283c:	4620      	mov	r0, r4
	params.data = data;
   1283e:	e9c7 3901 	strd	r3, r9, [r7, #4]
	return bt_gatt_notify_cb(conn, &params);
   12842:	f009 fac5 	bl	1bdd0 <bt_gatt_notify_cb>
			if(status != 0) {
   12846:	2800      	cmp	r0, #0
   12848:	f43f af34 	beq.w	126b4 <temp_thread+0xcc>
				LOG_ERR("Failed to notify, bt_gatt_notify returned: %d", status);
   1284c:	466c      	mov	r4, sp
   1284e:	b088      	sub	sp, #32
   12850:	466a      	mov	r2, sp
   12852:	4b1f      	ldr	r3, [pc, #124]	; (128d0 <temp_thread+0x2e8>)
   12854:	e9c2 3005 	strd	r3, r0, [r2, #20]
   12858:	2303      	movs	r3, #3
   1285a:	f842 3f10 	str.w	r3, [r2, #16]!
   1285e:	4809      	ldr	r0, [pc, #36]	; (12884 <temp_thread+0x29c>)
   12860:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   12864:	f00e fefd 	bl	21662 <z_log_msg_static_create.constprop.0>
   12868:	46a5      	mov	sp, r4
			}
   1286a:	e723      	b.n	126b4 <temp_thread+0xcc>
   1286c:	f3af 8000 	nop.w
   12870:	00000000 	.word	0x00000000
   12874:	406fe000 	.word	0x406fe000
	...
   12880:	00025ddb 	.word	0x00025ddb
   12884:	00025644 	.word	0x00025644
   12888:	20003c3c 	.word	0x20003c3c
   1288c:	00025e29 	.word	0x00025e29
   12890:	00025e88 	.word	0x00025e88
   12894:	00025ee0 	.word	0x00025ee0
   12898:	20004eb8 	.word	0x20004eb8
   1289c:	00025e1b 	.word	0x00025e1b
   128a0:	00025e6f 	.word	0x00025e6f
   128a4:	00025ecb 	.word	0x00025ecb
   128a8:	00025f22 	.word	0x00025f22
   128ac:	00025f39 	.word	0x00025f39
   128b0:	2000353c 	.word	0x2000353c
   128b4:	20003038 	.word	0x20003038
   128b8:	20003034 	.word	0x20003034
   128bc:	2000303c 	.word	0x2000303c
   128c0:	20000524 	.word	0x20000524
   128c4:	20000520 	.word	0x20000520
   128c8:	20003030 	.word	0x20003030
   128cc:	0002571c 	.word	0x0002571c
   128d0:	00025f7c 	.word	0x00025f7c
   128d4:	2000536e 	.word	0x2000536e

000128d8 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
   128d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   128dc:	b09f      	sub	sp, #124	; 0x7c
   128de:	4682      	mov	sl, r0
   128e0:	9103      	str	r1, [sp, #12]
   128e2:	4616      	mov	r6, r2
   128e4:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   128e6:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   128e8:	7830      	ldrb	r0, [r6, #0]
   128ea:	b910      	cbnz	r0, 128f2 <z_cbvprintf_impl+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
   128ec:	4628      	mov	r0, r5
   128ee:	f000 bd85 	b.w	133fc <z_cbvprintf_impl+0xb24>
			OUTC(*fp++);
   128f2:	1c73      	adds	r3, r6, #1
		if (*fp != '%') {
   128f4:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
   128f6:	9306      	str	r3, [sp, #24]
		if (*fp != '%') {
   128f8:	d006      	beq.n	12908 <z_cbvprintf_impl+0x30>
			OUTC(*fp++);
   128fa:	9903      	ldr	r1, [sp, #12]
			OUTC('%');
   128fc:	47d0      	blx	sl
   128fe:	2800      	cmp	r0, #0
   12900:	f2c0 857c 	blt.w	133fc <z_cbvprintf_impl+0xb24>
   12904:	3501      	adds	r5, #1
		if (bps == NULL) {
   12906:	e21b      	b.n	12d40 <z_cbvprintf_impl+0x468>
		} state = {
   12908:	2218      	movs	r2, #24
   1290a:	2100      	movs	r1, #0
   1290c:	a810      	add	r0, sp, #64	; 0x40
   1290e:	f012 fc68 	bl	251e2 <memset>
	if (*sp == '%') {
   12912:	7873      	ldrb	r3, [r6, #1]
   12914:	2b25      	cmp	r3, #37	; 0x25
   12916:	f000 80ba 	beq.w	12a8e <z_cbvprintf_impl+0x1b6>
   1291a:	2300      	movs	r3, #0
   1291c:	1c71      	adds	r1, r6, #1
   1291e:	4698      	mov	r8, r3
   12920:	469e      	mov	lr, r3
   12922:	469c      	mov	ip, r3
   12924:	4618      	mov	r0, r3
   12926:	460f      	mov	r7, r1
		switch (*sp) {
   12928:	f811 2b01 	ldrb.w	r2, [r1], #1
   1292c:	2a2b      	cmp	r2, #43	; 0x2b
   1292e:	f000 80dd 	beq.w	12aec <z_cbvprintf_impl+0x214>
   12932:	f200 80d4 	bhi.w	12ade <z_cbvprintf_impl+0x206>
   12936:	2a20      	cmp	r2, #32
   12938:	f000 80db 	beq.w	12af2 <z_cbvprintf_impl+0x21a>
   1293c:	2a23      	cmp	r2, #35	; 0x23
   1293e:	f000 80db 	beq.w	12af8 <z_cbvprintf_impl+0x220>
   12942:	b12b      	cbz	r3, 12950 <z_cbvprintf_impl+0x78>
   12944:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   12948:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1294c:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
   12950:	f1b8 0f00 	cmp.w	r8, #0
   12954:	d005      	beq.n	12962 <z_cbvprintf_impl+0x8a>
   12956:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   1295a:	f043 0320 	orr.w	r3, r3, #32
   1295e:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
   12962:	f1be 0f00 	cmp.w	lr, #0
   12966:	d005      	beq.n	12974 <z_cbvprintf_impl+0x9c>
   12968:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   1296c:	f043 0310 	orr.w	r3, r3, #16
   12970:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
   12974:	f1bc 0f00 	cmp.w	ip, #0
   12978:	d005      	beq.n	12986 <z_cbvprintf_impl+0xae>
   1297a:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   1297e:	f043 0308 	orr.w	r3, r3, #8
   12982:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
   12986:	b128      	cbz	r0, 12994 <z_cbvprintf_impl+0xbc>
   12988:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   1298c:	f043 0304 	orr.w	r3, r3, #4
   12990:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (conv->flag_zero && conv->flag_dash) {
   12994:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   12998:	f003 0144 	and.w	r1, r3, #68	; 0x44
   1299c:	2944      	cmp	r1, #68	; 0x44
   1299e:	d103      	bne.n	129a8 <z_cbvprintf_impl+0xd0>
		conv->flag_zero = false;
   129a0:	f36f 1386 	bfc	r3, #6, #1
   129a4:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	conv->width_present = true;
   129a8:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   129ac:	970e      	str	r7, [sp, #56]	; 0x38
   129ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
	if (*sp == '*') {
   129b2:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
   129b4:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (*sp == '*') {
   129b8:	f040 80a3 	bne.w	12b02 <z_cbvprintf_impl+0x22a>
		conv->width_star = true;
   129bc:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
   129c0:	f043 0301 	orr.w	r3, r3, #1
   129c4:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
		return ++sp;
   129c8:	1c7b      	adds	r3, r7, #1
	conv->prec_present = (*sp == '.');
   129ca:	781a      	ldrb	r2, [r3, #0]
   129cc:	2a2e      	cmp	r2, #46	; 0x2e
   129ce:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
   129d2:	bf0c      	ite	eq
   129d4:	2101      	moveq	r1, #1
   129d6:	2100      	movne	r1, #0
   129d8:	f361 0241 	bfi	r2, r1, #1, #1
   129dc:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
	if (!conv->prec_present) {
   129e0:	d10c      	bne.n	129fc <z_cbvprintf_impl+0x124>
	++sp;
   129e2:	1c5a      	adds	r2, r3, #1
   129e4:	920e      	str	r2, [sp, #56]	; 0x38
	if (*sp == '*') {
   129e6:	785a      	ldrb	r2, [r3, #1]
   129e8:	2a2a      	cmp	r2, #42	; 0x2a
   129ea:	f040 809a 	bne.w	12b22 <z_cbvprintf_impl+0x24a>
		conv->prec_star = true;
   129ee:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
   129f2:	f042 0204 	orr.w	r2, r2, #4
   129f6:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
		return ++sp;
   129fa:	3302      	adds	r3, #2
	switch (*sp) {
   129fc:	781a      	ldrb	r2, [r3, #0]
   129fe:	2a6c      	cmp	r2, #108	; 0x6c
   12a00:	f000 80bb 	beq.w	12b7a <z_cbvprintf_impl+0x2a2>
   12a04:	f200 809d 	bhi.w	12b42 <z_cbvprintf_impl+0x26a>
   12a08:	2a68      	cmp	r2, #104	; 0x68
   12a0a:	f000 80a3 	beq.w	12b54 <z_cbvprintf_impl+0x27c>
   12a0e:	2a6a      	cmp	r2, #106	; 0x6a
   12a10:	f000 80bc 	beq.w	12b8c <z_cbvprintf_impl+0x2b4>
   12a14:	2a4c      	cmp	r2, #76	; 0x4c
   12a16:	f000 80c1 	beq.w	12b9c <z_cbvprintf_impl+0x2c4>
	conv->specifier = *sp++;
   12a1a:	f813 2b01 	ldrb.w	r2, [r3], #1
   12a1e:	9306      	str	r3, [sp, #24]
	switch (conv->specifier) {
   12a20:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
   12a22:	f88d 204b 	strb.w	r2, [sp, #75]	; 0x4b
	switch (conv->specifier) {
   12a26:	f200 8101 	bhi.w	12c2c <z_cbvprintf_impl+0x354>
   12a2a:	2a6d      	cmp	r2, #109	; 0x6d
   12a2c:	f200 80c3 	bhi.w	12bb6 <z_cbvprintf_impl+0x2de>
   12a30:	2a69      	cmp	r2, #105	; 0x69
   12a32:	f200 80fb 	bhi.w	12c2c <z_cbvprintf_impl+0x354>
   12a36:	2a57      	cmp	r2, #87	; 0x57
   12a38:	f200 80da 	bhi.w	12bf0 <z_cbvprintf_impl+0x318>
   12a3c:	2a41      	cmp	r2, #65	; 0x41
   12a3e:	d004      	beq.n	12a4a <z_cbvprintf_impl+0x172>
   12a40:	f1a2 0345 	sub.w	r3, r2, #69	; 0x45
   12a44:	2b02      	cmp	r3, #2
   12a46:	f200 80f1 	bhi.w	12c2c <z_cbvprintf_impl+0x354>
		conv->specifier_cat = SPECIFIER_FP;
   12a4a:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
			|| (conv->specifier == 'A');
   12a4e:	f002 02df 	and.w	r2, r2, #223	; 0xdf
		conv->specifier_cat = SPECIFIER_FP;
   12a52:	2104      	movs	r1, #4
			|| (conv->specifier == 'A');
   12a54:	f1a2 0741 	sub.w	r7, r2, #65	; 0x41
		conv->specifier_cat = SPECIFIER_FP;
   12a58:	f361 0302 	bfi	r3, r1, #0, #3
			|| (conv->specifier == 'A');
   12a5c:	427a      	negs	r2, r7
		conv->specifier_a = (conv->specifier == 'a')
   12a5e:	f89d 1049 	ldrb.w	r1, [sp, #73]	; 0x49
		conv->specifier_cat = SPECIFIER_FP;
   12a62:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
			|| (conv->specifier == 'A');
   12a66:	417a      	adcs	r2, r7
		conv->specifier_a = (conv->specifier == 'a')
   12a68:	f362 11c7 	bfi	r1, r2, #7, #1
		if (conv->specifier_a
   12a6c:	060a      	lsls	r2, r1, #24
		conv->specifier_a = (conv->specifier == 'a')
   12a6e:	f88d 1049 	strb.w	r1, [sp, #73]	; 0x49
		if (conv->specifier_a
   12a72:	b2cb      	uxtb	r3, r1
   12a74:	f100 8119 	bmi.w	12caa <z_cbvprintf_impl+0x3d2>
		if (conv->length_mod == LENGTH_L) {
   12a78:	f003 0278 	and.w	r2, r3, #120	; 0x78
   12a7c:	2a18      	cmp	r2, #24
   12a7e:	f040 8103 	bne.w	12c88 <z_cbvprintf_impl+0x3b0>
			conv->length_mod = LENGTH_NONE;
   12a82:	f36f 03c6 	bfc	r3, #3, #4
   12a86:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
	bool unsupported = false;
   12a8a:	2300      	movs	r3, #0
   12a8c:	e0f2      	b.n	12c74 <z_cbvprintf_impl+0x39c>
		conv->specifier = *sp++;
   12a8e:	1cb2      	adds	r2, r6, #2
   12a90:	9206      	str	r2, [sp, #24]
   12a92:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
		if (conv->width_star) {
   12a96:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
   12a9a:	07d9      	lsls	r1, r3, #31
   12a9c:	f140 8107 	bpl.w	12cae <z_cbvprintf_impl+0x3d6>
			width = va_arg(ap, int);
   12aa0:	f854 2b04 	ldr.w	r2, [r4], #4
   12aa4:	9204      	str	r2, [sp, #16]
			if (width < 0) {
   12aa6:	2a00      	cmp	r2, #0
   12aa8:	da08      	bge.n	12abc <z_cbvprintf_impl+0x1e4>
				conv->flag_dash = true;
   12aaa:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
   12aae:	f042 0204 	orr.w	r2, r2, #4
   12ab2:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
				width = -width;
   12ab6:	9a04      	ldr	r2, [sp, #16]
   12ab8:	4252      	negs	r2, r2
		int width = -1;
   12aba:	9204      	str	r2, [sp, #16]
		if (conv->prec_star) {
   12abc:	075a      	lsls	r2, r3, #29
   12abe:	f140 80fe 	bpl.w	12cbe <z_cbvprintf_impl+0x3e6>
			int arg = va_arg(ap, int);
   12ac2:	f854 7b04 	ldr.w	r7, [r4], #4
			if (arg < 0) {
   12ac6:	2f00      	cmp	r7, #0
   12ac8:	f280 80fd 	bge.w	12cc6 <z_cbvprintf_impl+0x3ee>
				conv->prec_present = false;
   12acc:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
   12ad0:	f36f 0341 	bfc	r3, #1, #1
   12ad4:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
		int precision = -1;
   12ad8:	f04f 37ff 	mov.w	r7, #4294967295
   12adc:	e0f3      	b.n	12cc6 <z_cbvprintf_impl+0x3ee>
		switch (*sp) {
   12ade:	2a2d      	cmp	r2, #45	; 0x2d
   12ae0:	d00d      	beq.n	12afe <z_cbvprintf_impl+0x226>
   12ae2:	2a30      	cmp	r2, #48	; 0x30
   12ae4:	f47f af2d 	bne.w	12942 <z_cbvprintf_impl+0x6a>
   12ae8:	2301      	movs	r3, #1
	} while (loop);
   12aea:	e71c      	b.n	12926 <z_cbvprintf_impl+0x4e>
		switch (*sp) {
   12aec:	f04f 0c01 	mov.w	ip, #1
   12af0:	e719      	b.n	12926 <z_cbvprintf_impl+0x4e>
   12af2:	f04f 0e01 	mov.w	lr, #1
   12af6:	e716      	b.n	12926 <z_cbvprintf_impl+0x4e>
   12af8:	f04f 0801 	mov.w	r8, #1
   12afc:	e713      	b.n	12926 <z_cbvprintf_impl+0x4e>
   12afe:	2001      	movs	r0, #1
   12b00:	e711      	b.n	12926 <z_cbvprintf_impl+0x4e>
	size_t width = extract_decimal(&sp);
   12b02:	a80e      	add	r0, sp, #56	; 0x38
   12b04:	f002 fa86 	bl	15014 <extract_decimal>
	if (sp != wp) {
   12b08:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   12b0a:	42bb      	cmp	r3, r7
   12b0c:	f43f af5d 	beq.w	129ca <z_cbvprintf_impl+0xf2>
		conv->unsupported |= ((conv->width_value < 0)
   12b10:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
		conv->width_value = width;
   12b14:	9013      	str	r0, [sp, #76]	; 0x4c
				      || (width != (size_t)conv->width_value));
   12b16:	0fc0      	lsrs	r0, r0, #31
		conv->unsupported |= ((conv->width_value < 0)
   12b18:	f360 0241 	bfi	r2, r0, #1, #1
   12b1c:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   12b20:	e753      	b.n	129ca <z_cbvprintf_impl+0xf2>
	size_t prec = extract_decimal(&sp);
   12b22:	a80e      	add	r0, sp, #56	; 0x38
   12b24:	f002 fa76 	bl	15014 <extract_decimal>
	conv->unsupported |= ((conv->prec_value < 0)
   12b28:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
	conv->prec_value = prec;
   12b2c:	9014      	str	r0, [sp, #80]	; 0x50
	conv->unsupported |= ((conv->prec_value < 0)
   12b2e:	f3c3 0240 	ubfx	r2, r3, #1, #1
   12b32:	ea42 72d0 	orr.w	r2, r2, r0, lsr #31
   12b36:	f362 0341 	bfi	r3, r2, #1, #1
   12b3a:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	return sp;
   12b3e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   12b40:	e75c      	b.n	129fc <z_cbvprintf_impl+0x124>
	switch (*sp) {
   12b42:	2a74      	cmp	r2, #116	; 0x74
   12b44:	d026      	beq.n	12b94 <z_cbvprintf_impl+0x2bc>
   12b46:	2a7a      	cmp	r2, #122	; 0x7a
   12b48:	f47f af67 	bne.w	12a1a <z_cbvprintf_impl+0x142>
		conv->length_mod = LENGTH_Z;
   12b4c:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
   12b50:	2106      	movs	r1, #6
   12b52:	e00c      	b.n	12b6e <z_cbvprintf_impl+0x296>
		if (*++sp == 'h') {
   12b54:	785a      	ldrb	r2, [r3, #1]
   12b56:	2a68      	cmp	r2, #104	; 0x68
   12b58:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
   12b5c:	d106      	bne.n	12b6c <z_cbvprintf_impl+0x294>
			conv->length_mod = LENGTH_HH;
   12b5e:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
   12b60:	f361 02c6 	bfi	r2, r1, #3, #4
   12b64:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
			++sp;
   12b68:	3302      	adds	r3, #2
   12b6a:	e756      	b.n	12a1a <z_cbvprintf_impl+0x142>
			conv->length_mod = LENGTH_H;
   12b6c:	2102      	movs	r1, #2
   12b6e:	f361 02c6 	bfi	r2, r1, #3, #4
   12b72:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
		if (*++sp == 'h') {
   12b76:	3301      	adds	r3, #1
   12b78:	e74f      	b.n	12a1a <z_cbvprintf_impl+0x142>
		if (*++sp == 'l') {
   12b7a:	785a      	ldrb	r2, [r3, #1]
   12b7c:	2a6c      	cmp	r2, #108	; 0x6c
   12b7e:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
   12b82:	d101      	bne.n	12b88 <z_cbvprintf_impl+0x2b0>
			conv->length_mod = LENGTH_LL;
   12b84:	2104      	movs	r1, #4
   12b86:	e7eb      	b.n	12b60 <z_cbvprintf_impl+0x288>
			conv->length_mod = LENGTH_L;
   12b88:	2103      	movs	r1, #3
   12b8a:	e7f0      	b.n	12b6e <z_cbvprintf_impl+0x296>
		conv->length_mod = LENGTH_J;
   12b8c:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
   12b90:	2105      	movs	r1, #5
   12b92:	e7ec      	b.n	12b6e <z_cbvprintf_impl+0x296>
		conv->length_mod = LENGTH_T;
   12b94:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
   12b98:	2107      	movs	r1, #7
   12b9a:	e7e8      	b.n	12b6e <z_cbvprintf_impl+0x296>
		conv->unsupported = true;
   12b9c:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
   12ba0:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
   12ba4:	f022 0202 	bic.w	r2, r2, #2
   12ba8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   12bac:	f042 0202 	orr.w	r2, r2, #2
   12bb0:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
		break;
   12bb4:	e7df      	b.n	12b76 <z_cbvprintf_impl+0x29e>
	switch (conv->specifier) {
   12bb6:	3a6e      	subs	r2, #110	; 0x6e
   12bb8:	b2d3      	uxtb	r3, r2
   12bba:	2201      	movs	r2, #1
   12bbc:	409a      	lsls	r2, r3
   12bbe:	f240 4382 	movw	r3, #1154	; 0x482
   12bc2:	421a      	tst	r2, r3
   12bc4:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
   12bc8:	d137      	bne.n	12c3a <z_cbvprintf_impl+0x362>
   12bca:	f012 0f24 	tst.w	r2, #36	; 0x24
   12bce:	d15f      	bne.n	12c90 <z_cbvprintf_impl+0x3b8>
   12bd0:	07d1      	lsls	r1, r2, #31
   12bd2:	d52b      	bpl.n	12c2c <z_cbvprintf_impl+0x354>
		conv->specifier_cat = SPECIFIER_PTR;
   12bd4:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
   12bd8:	f003 0378 	and.w	r3, r3, #120	; 0x78
   12bdc:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
   12be0:	2103      	movs	r1, #3
   12be2:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   12be6:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
   12be8:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
   12bec:	4143      	adcs	r3, r0
   12bee:	e041      	b.n	12c74 <z_cbvprintf_impl+0x39c>
	switch (conv->specifier) {
   12bf0:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
   12bf4:	b2c9      	uxtb	r1, r1
   12bf6:	2001      	movs	r0, #1
   12bf8:	fa00 f101 	lsl.w	r1, r0, r1
   12bfc:	f411 4f62 	tst.w	r1, #57856	; 0xe200
   12c00:	f47f af23 	bne.w	12a4a <z_cbvprintf_impl+0x172>
   12c04:	f640 0301 	movw	r3, #2049	; 0x801
   12c08:	4219      	tst	r1, r3
   12c0a:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
   12c0e:	d11a      	bne.n	12c46 <z_cbvprintf_impl+0x36e>
   12c10:	f411 3f04 	tst.w	r1, #135168	; 0x21000
   12c14:	d00a      	beq.n	12c2c <z_cbvprintf_impl+0x354>
		conv->specifier_cat = SPECIFIER_SINT;
   12c16:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
   12c1a:	f360 0202 	bfi	r2, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   12c1e:	f003 0378 	and.w	r3, r3, #120	; 0x78
   12c22:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
   12c24:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
   12c28:	f47f af2f 	bne.w	12a8a <z_cbvprintf_impl+0x1b2>
		conv->invalid = true;
   12c2c:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   12c30:	f043 0301 	orr.w	r3, r3, #1
   12c34:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
		break;
   12c38:	e727      	b.n	12a8a <z_cbvprintf_impl+0x1b2>
		conv->specifier_cat = SPECIFIER_UINT;
   12c3a:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
   12c3e:	2102      	movs	r1, #2
   12c40:	f361 0202 	bfi	r2, r1, #0, #3
   12c44:	e7eb      	b.n	12c1e <z_cbvprintf_impl+0x346>
   12c46:	f89d 104a 	ldrb.w	r1, [sp, #74]	; 0x4a
   12c4a:	2002      	movs	r0, #2
		if (conv->length_mod == LENGTH_UPPER_L) {
   12c4c:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
   12c50:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   12c54:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
   12c56:	f88d 104a 	strb.w	r1, [sp, #74]	; 0x4a
			conv->invalid = true;
   12c5a:	bf02      	ittt	eq
   12c5c:	f89d 1048 	ldrbeq.w	r1, [sp, #72]	; 0x48
   12c60:	f041 0101 	orreq.w	r1, r1, #1
   12c64:	f88d 1048 	strbeq.w	r1, [sp, #72]	; 0x48
		if (conv->specifier == 'c') {
   12c68:	2a63      	cmp	r2, #99	; 0x63
   12c6a:	f47f af0e 	bne.w	12a8a <z_cbvprintf_impl+0x1b2>
			unsupported = (conv->length_mod != LENGTH_NONE);
   12c6e:	3b00      	subs	r3, #0
   12c70:	bf18      	it	ne
   12c72:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
   12c74:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
   12c78:	f3c2 0140 	ubfx	r1, r2, #1, #1
   12c7c:	430b      	orrs	r3, r1
   12c7e:	f363 0241 	bfi	r2, r3, #1, #1
   12c82:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
	return sp;
   12c86:	e706      	b.n	12a96 <z_cbvprintf_impl+0x1be>
		} else if ((conv->length_mod != LENGTH_NONE)
   12c88:	f013 0f38 	tst.w	r3, #56	; 0x38
   12c8c:	d1ce      	bne.n	12c2c <z_cbvprintf_impl+0x354>
   12c8e:	e6fc      	b.n	12a8a <z_cbvprintf_impl+0x1b2>
		conv->specifier_cat = SPECIFIER_PTR;
   12c90:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
   12c94:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
   12c96:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
   12c9a:	f361 0202 	bfi	r2, r1, #0, #3
   12c9e:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod != LENGTH_NONE) {
   12ca2:	bf14      	ite	ne
   12ca4:	2301      	movne	r3, #1
   12ca6:	2300      	moveq	r3, #0
   12ca8:	e7e4      	b.n	12c74 <z_cbvprintf_impl+0x39c>
			unsupported = true;
   12caa:	2301      	movs	r3, #1
   12cac:	e7e2      	b.n	12c74 <z_cbvprintf_impl+0x39c>
		} else if (conv->width_present) {
   12cae:	f99d 2048 	ldrsb.w	r2, [sp, #72]	; 0x48
   12cb2:	2a00      	cmp	r2, #0
			width = conv->width_value;
   12cb4:	bfb4      	ite	lt
   12cb6:	9a13      	ldrlt	r2, [sp, #76]	; 0x4c
		int width = -1;
   12cb8:	f04f 32ff 	movge.w	r2, #4294967295
   12cbc:	e6fd      	b.n	12aba <z_cbvprintf_impl+0x1e2>
		} else if (conv->prec_present) {
   12cbe:	079f      	lsls	r7, r3, #30
   12cc0:	f57f af0a 	bpl.w	12ad8 <z_cbvprintf_impl+0x200>
			precision = conv->prec_value;
   12cc4:	9f14      	ldr	r7, [sp, #80]	; 0x50
		conv->pad0_value = 0;
   12cc6:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
   12cc8:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
		    && (conv->specifier_cat == SPECIFIER_FP)
   12ccc:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT)
   12cd0:	f003 0207 	and.w	r2, r3, #7
   12cd4:	2a04      	cmp	r2, #4
   12cd6:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
   12cda:	d107      	bne.n	12cec <z_cbvprintf_impl+0x414>
		    && !conv->prec_present) {
   12cdc:	0790      	lsls	r0, r2, #30
   12cde:	d405      	bmi.n	12cec <z_cbvprintf_impl+0x414>
			if (conv->specifier_a) {
   12ce0:	f99d 1049 	ldrsb.w	r1, [sp, #73]	; 0x49
				precision = FRACTION_HEX;
   12ce4:	2900      	cmp	r1, #0
   12ce6:	bfac      	ite	ge
   12ce8:	2706      	movge	r7, #6
   12cea:	270d      	movlt	r7, #13
		enum specifier_cat_enum specifier_cat
   12cec:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
   12cf0:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
   12cf2:	f3c2 02c3 	ubfx	r2, r2, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
   12cf6:	d133      	bne.n	12d60 <z_cbvprintf_impl+0x488>
			switch (length_mod) {
   12cf8:	1ed3      	subs	r3, r2, #3
   12cfa:	2b04      	cmp	r3, #4
   12cfc:	d804      	bhi.n	12d08 <z_cbvprintf_impl+0x430>
   12cfe:	e8df f003 	tbb	[pc, r3]
   12d02:	4621      	.short	0x4621
   12d04:	2146      	.short	0x2146
   12d06:	21          	.byte	0x21
   12d07:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
   12d08:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
   12d0a:	2a01      	cmp	r2, #1
				value->sint = va_arg(ap, int);
   12d0c:	ea4f 71e3 	mov.w	r1, r3, asr #31
   12d10:	e9cd 3110 	strd	r3, r1, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
   12d14:	d11c      	bne.n	12d50 <z_cbvprintf_impl+0x478>
				value->sint = (signed char)value->sint;
   12d16:	f99d 3040 	ldrsb.w	r3, [sp, #64]	; 0x40
   12d1a:	17d9      	asrs	r1, r3, #31
   12d1c:	e9cd 3110 	strd	r3, r1, [sp, #64]	; 0x40
				value->sint = va_arg(ap, int);
   12d20:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
   12d22:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   12d26:	9307      	str	r3, [sp, #28]
   12d28:	0799      	lsls	r1, r3, #30
   12d2a:	d050      	beq.n	12dce <z_cbvprintf_impl+0x4f6>
			OUTS(sp, fp);
   12d2c:	9b06      	ldr	r3, [sp, #24]
   12d2e:	9903      	ldr	r1, [sp, #12]
   12d30:	4632      	mov	r2, r6
   12d32:	4650      	mov	r0, sl
   12d34:	f00f f81e 	bl	21d74 <outs>
   12d38:	2800      	cmp	r0, #0
   12d3a:	f2c0 835f 	blt.w	133fc <z_cbvprintf_impl+0xb24>
   12d3e:	4405      	add	r5, r0
			continue;
   12d40:	9e06      	ldr	r6, [sp, #24]
   12d42:	e5d1      	b.n	128e8 <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   12d44:	f854 3b04 	ldr.w	r3, [r4], #4
   12d48:	17d9      	asrs	r1, r3, #31
				value->uint = (unsigned char)value->uint;
   12d4a:	e9cd 3110 	strd	r3, r1, [sp, #64]	; 0x40
   12d4e:	e7e8      	b.n	12d22 <z_cbvprintf_impl+0x44a>
			} else if (length_mod == LENGTH_H) {
   12d50:	2a02      	cmp	r2, #2
   12d52:	d1e5      	bne.n	12d20 <z_cbvprintf_impl+0x448>
				value->sint = (short)value->sint;
   12d54:	b219      	sxth	r1, r3
   12d56:	f343 33c0 	sbfx	r3, r3, #15, #1
   12d5a:	e9cd 1310 	strd	r1, r3, [sp, #64]	; 0x40
   12d5e:	e7df      	b.n	12d20 <z_cbvprintf_impl+0x448>
		} else if (specifier_cat == SPECIFIER_UINT) {
   12d60:	2b02      	cmp	r3, #2
   12d62:	d124      	bne.n	12dae <z_cbvprintf_impl+0x4d6>
			switch (length_mod) {
   12d64:	1ed3      	subs	r3, r2, #3
   12d66:	2b04      	cmp	r3, #4
   12d68:	d804      	bhi.n	12d74 <z_cbvprintf_impl+0x49c>
   12d6a:	e8df f003 	tbb	[pc, r3]
   12d6e:	1018      	.short	0x1018
   12d70:	1810      	.short	0x1810
   12d72:	18          	.byte	0x18
   12d73:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
   12d74:	2a01      	cmp	r2, #1
				value->uint = va_arg(ap, unsigned int);
   12d76:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
   12d7a:	f04f 0100 	mov.w	r1, #0
   12d7e:	d014      	beq.n	12daa <z_cbvprintf_impl+0x4d2>
			} else if (length_mod == LENGTH_H) {
   12d80:	2a02      	cmp	r2, #2
				value->uint = va_arg(ap, unsigned int);
   12d82:	e9cd 3110 	strd	r3, r1, [sp, #64]	; 0x40
			} else if (length_mod == LENGTH_H) {
   12d86:	d1cc      	bne.n	12d22 <z_cbvprintf_impl+0x44a>
				value->uint = (unsigned short)value->uint;
   12d88:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
   12d8a:	9310      	str	r3, [sp, #64]	; 0x40
   12d8c:	e7c9      	b.n	12d22 <z_cbvprintf_impl+0x44a>
					(uint_value_type)va_arg(ap,
   12d8e:	3407      	adds	r4, #7
   12d90:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
   12d94:	e8f4 0102 	ldrd	r0, r1, [r4], #8
   12d98:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
   12d9c:	e7c1      	b.n	12d22 <z_cbvprintf_impl+0x44a>
					(uint_value_type)va_arg(ap, size_t);
   12d9e:	f854 3b04 	ldr.w	r3, [r4], #4
   12da2:	9310      	str	r3, [sp, #64]	; 0x40
   12da4:	2300      	movs	r3, #0
   12da6:	9311      	str	r3, [sp, #68]	; 0x44
			} else if (length_mod == LENGTH_H) {
   12da8:	e7bb      	b.n	12d22 <z_cbvprintf_impl+0x44a>
				value->uint = (unsigned char)value->uint;
   12daa:	b2db      	uxtb	r3, r3
   12dac:	e7cd      	b.n	12d4a <z_cbvprintf_impl+0x472>
		} else if (specifier_cat == SPECIFIER_FP) {
   12dae:	2b04      	cmp	r3, #4
   12db0:	d108      	bne.n	12dc4 <z_cbvprintf_impl+0x4ec>
					(sint_value_type)va_arg(ap, long long);
   12db2:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
   12db4:	f024 0407 	bic.w	r4, r4, #7
   12db8:	e9d4 0100 	ldrd	r0, r1, [r4]
   12dbc:	3408      	adds	r4, #8
   12dbe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   12dc2:	e7ae      	b.n	12d22 <z_cbvprintf_impl+0x44a>
		} else if (specifier_cat == SPECIFIER_PTR) {
   12dc4:	2b03      	cmp	r3, #3
   12dc6:	d1ac      	bne.n	12d22 <z_cbvprintf_impl+0x44a>
			value->ptr = va_arg(ap, void *);
   12dc8:	f854 3b04 	ldr.w	r3, [r4], #4
   12dcc:	e7dd      	b.n	12d8a <z_cbvprintf_impl+0x4b2>
		switch (conv->specifier) {
   12dce:	f89d b04b 	ldrb.w	fp, [sp, #75]	; 0x4b
   12dd2:	f1bb 0f78 	cmp.w	fp, #120	; 0x78
   12dd6:	d8b3      	bhi.n	12d40 <z_cbvprintf_impl+0x468>
   12dd8:	f1bb 0f57 	cmp.w	fp, #87	; 0x57
   12ddc:	d849      	bhi.n	12e72 <z_cbvprintf_impl+0x59a>
   12dde:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
   12de2:	f000 8091 	beq.w	12f08 <z_cbvprintf_impl+0x630>
   12de6:	f1bb 0f24 	cmp.w	fp, #36	; 0x24
   12dea:	d9a9      	bls.n	12d40 <z_cbvprintf_impl+0x468>
   12dec:	f1bb 0f41 	cmp.w	fp, #65	; 0x41
   12df0:	d003      	beq.n	12dfa <z_cbvprintf_impl+0x522>
   12df2:	f1ab 0245 	sub.w	r2, fp, #69	; 0x45
   12df6:	2a02      	cmp	r2, #2
   12df8:	d8a2      	bhi.n	12d40 <z_cbvprintf_impl+0x468>
	} u = {
   12dfa:	e9dd 1210 	ldrd	r1, r2, [sp, #64]	; 0x40
	if ((u.u64 & SIGN_MASK) != 0U) {
   12dfe:	2a00      	cmp	r2, #0
   12e00:	f2c0 8136 	blt.w	13070 <z_cbvprintf_impl+0x798>
	} else if (conv->flag_plus) {
   12e04:	9b07      	ldr	r3, [sp, #28]
   12e06:	071e      	lsls	r6, r3, #28
   12e08:	f100 8135 	bmi.w	13076 <z_cbvprintf_impl+0x79e>
	} else if (conv->flag_space) {
   12e0c:	f3c3 1900 	ubfx	r9, r3, #4, #1
   12e10:	ea4f 1949 	mov.w	r9, r9, lsl #5
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
   12e14:	f3c2 500a 	ubfx	r0, r2, #20, #11
	uint64_t fract = u.u64 & BIT64_MASK(FRACTION_BITS);
   12e18:	f3c2 0213 	ubfx	r2, r2, #0, #20
	bool is_subnormal = (expo == 0) && (fract != 0);
   12e1c:	2800      	cmp	r0, #0
   12e1e:	f040 812d 	bne.w	1307c <z_cbvprintf_impl+0x7a4>
   12e22:	ea51 0602 	orrs.w	r6, r1, r2
   12e26:	bf14      	ite	ne
   12e28:	2601      	movne	r6, #1
   12e2a:	2600      	moveq	r6, #0
	fract <<= EXPONENT_BITS;
   12e2c:	02d2      	lsls	r2, r2, #11
   12e2e:	ea42 5251 	orr.w	r2, r2, r1, lsr #21
   12e32:	02c9      	lsls	r1, r1, #11
		c = 'f';
   12e34:	f1bb 0f46 	cmp.w	fp, #70	; 0x46
	if ((expo | fract) != 0) {
   12e38:	ea40 0e01 	orr.w	lr, r0, r1
   12e3c:	ea42 7ce0 	orr.w	ip, r2, r0, asr #31
		c = 'f';
   12e40:	bf08      	it	eq
   12e42:	f04f 0b66 	moveq.w	fp, #102	; 0x66
	if ((expo | fract) != 0) {
   12e46:	ea5e 0c0c 	orrs.w	ip, lr, ip
	fract &= ~SIGN_MASK;
   12e4a:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
	if ((expo | fract) != 0) {
   12e4e:	f000 819c 	beq.w	1318a <z_cbvprintf_impl+0x8b2>
		if (is_subnormal) {
   12e52:	2e00      	cmp	r6, #0
   12e54:	f040 8149 	bne.w	130ea <z_cbvprintf_impl+0x812>
		fract |= BIT_63;
   12e58:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   12e5a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
		expo -= (1023 - 1);	/* +1 since .1 vs 1. */
   12e5e:	f2a0 38fe 	subw	r8, r0, #1022	; 0x3fe
		fract |= BIT_63;
   12e62:	920d      	str	r2, [sp, #52]	; 0x34
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
   12e64:	2000      	movs	r0, #0
   12e66:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
   12e6a:	4606      	mov	r6, r0
		fract *= 5U;
   12e6c:	f04f 0c05 	mov.w	ip, #5
   12e70:	e155      	b.n	1311e <z_cbvprintf_impl+0x846>
		switch (conv->specifier) {
   12e72:	f1ab 0158 	sub.w	r1, fp, #88	; 0x58
   12e76:	2920      	cmp	r1, #32
   12e78:	f63f af62 	bhi.w	12d40 <z_cbvprintf_impl+0x468>
   12e7c:	a001      	add	r0, pc, #4	; (adr r0, 12e84 <z_cbvprintf_impl+0x5ac>)
   12e7e:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
   12e82:	bf00      	nop
   12e84:	0001300f 	.word	0x0001300f
   12e88:	00012d41 	.word	0x00012d41
   12e8c:	00012d41 	.word	0x00012d41
   12e90:	00012d41 	.word	0x00012d41
   12e94:	00012d41 	.word	0x00012d41
   12e98:	00012d41 	.word	0x00012d41
   12e9c:	00012d41 	.word	0x00012d41
   12ea0:	00012d41 	.word	0x00012d41
   12ea4:	00012d41 	.word	0x00012d41
   12ea8:	00012dfb 	.word	0x00012dfb
   12eac:	00012d41 	.word	0x00012d41
   12eb0:	00012f93 	.word	0x00012f93
   12eb4:	00012fa7 	.word	0x00012fa7
   12eb8:	00012dfb 	.word	0x00012dfb
   12ebc:	00012dfb 	.word	0x00012dfb
   12ec0:	00012dfb 	.word	0x00012dfb
   12ec4:	00012d41 	.word	0x00012d41
   12ec8:	00012fa7 	.word	0x00012fa7
   12ecc:	00012d41 	.word	0x00012d41
   12ed0:	00012d41 	.word	0x00012d41
   12ed4:	00012d41 	.word	0x00012d41
   12ed8:	00012d41 	.word	0x00012d41
   12edc:	00013049 	.word	0x00013049
   12ee0:	0001300f 	.word	0x0001300f
   12ee4:	00013015 	.word	0x00013015
   12ee8:	00012d41 	.word	0x00012d41
   12eec:	00012d41 	.word	0x00012d41
   12ef0:	00012f0f 	.word	0x00012f0f
   12ef4:	00012d41 	.word	0x00012d41
   12ef8:	0001300f 	.word	0x0001300f
   12efc:	00012d41 	.word	0x00012d41
   12f00:	00012d41 	.word	0x00012d41
   12f04:	0001300f 	.word	0x0001300f
			OUTC('%');
   12f08:	9903      	ldr	r1, [sp, #12]
   12f0a:	4658      	mov	r0, fp
   12f0c:	e4f6      	b.n	128fc <z_cbvprintf_impl+0x24>
			if (precision >= 0) {
   12f0e:	2f00      	cmp	r7, #0
			bps = (const char *)value->ptr;
   12f10:	9e10      	ldr	r6, [sp, #64]	; 0x40
			if (precision >= 0) {
   12f12:	db3a      	blt.n	12f8a <z_cbvprintf_impl+0x6b2>
				len = strnlen(bps, precision);
   12f14:	4639      	mov	r1, r7
   12f16:	4630      	mov	r0, r6
   12f18:	f012 f986 	bl	25228 <strnlen>
			bpe = bps + len;
   12f1c:	1837      	adds	r7, r6, r0
		if (bps == NULL) {
   12f1e:	2e00      	cmp	r6, #0
   12f20:	f43f af0e 	beq.w	12d40 <z_cbvprintf_impl+0x468>
		char sign = 0;
   12f24:	f04f 0900 	mov.w	r9, #0
		if (conv->altform_0c) {
   12f28:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
   12f2c:	f013 0210 	ands.w	r2, r3, #16
   12f30:	9205      	str	r2, [sp, #20]
   12f32:	f000 8258 	beq.w	133e6 <z_cbvprintf_impl+0xb0e>
			nj_len += 2U;
   12f36:	3002      	adds	r0, #2
		if (conv->pad_fp) {
   12f38:	f013 0340 	ands.w	r3, r3, #64	; 0x40
		nj_len += conv->pad0_value;
   12f3c:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
		if (conv->pad_fp) {
   12f40:	9308      	str	r3, [sp, #32]
			nj_len += conv->pad0_pre_exp;
   12f42:	bf18      	it	ne
   12f44:	9b14      	ldrne	r3, [sp, #80]	; 0x50
		nj_len += conv->pad0_value;
   12f46:	f8cd 801c 	str.w	r8, [sp, #28]
   12f4a:	4440      	add	r0, r8
			nj_len += conv->pad0_pre_exp;
   12f4c:	bf18      	it	ne
   12f4e:	18c0      	addne	r0, r0, r3
		if (width > 0) {
   12f50:	9b04      	ldr	r3, [sp, #16]
   12f52:	2b00      	cmp	r3, #0
   12f54:	f340 8262 	ble.w	1341c <z_cbvprintf_impl+0xb44>
			if (!conv->flag_dash) {
   12f58:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
			width -= (int)nj_len;
   12f5c:	1a1b      	subs	r3, r3, r0
			if (!conv->flag_dash) {
   12f5e:	0750      	lsls	r0, r2, #29
			width -= (int)nj_len;
   12f60:	9304      	str	r3, [sp, #16]
			if (!conv->flag_dash) {
   12f62:	f3c2 0b80 	ubfx	fp, r2, #2, #1
   12f66:	f100 8259 	bmi.w	1341c <z_cbvprintf_impl+0xb44>
				if (conv->flag_zero) {
   12f6a:	0651      	lsls	r1, r2, #25
   12f6c:	f140 8249 	bpl.w	13402 <z_cbvprintf_impl+0xb2a>
					if (sign != 0) {
   12f70:	f1b9 0f00 	cmp.w	r9, #0
   12f74:	d007      	beq.n	12f86 <z_cbvprintf_impl+0x6ae>
						OUTC(sign);
   12f76:	9903      	ldr	r1, [sp, #12]
   12f78:	4648      	mov	r0, r9
   12f7a:	47d0      	blx	sl
   12f7c:	2800      	cmp	r0, #0
   12f7e:	f2c0 823d 	blt.w	133fc <z_cbvprintf_impl+0xb24>
   12f82:	3501      	adds	r5, #1
						sign = 0;
   12f84:	46d9      	mov	r9, fp
					pad = '0';
   12f86:	2230      	movs	r2, #48	; 0x30
   12f88:	e23c      	b.n	13404 <z_cbvprintf_impl+0xb2c>
				len = strlen(bps);
   12f8a:	4630      	mov	r0, r6
   12f8c:	f7f9 fdf0 	bl	cb70 <strlen>
   12f90:	e7c4      	b.n	12f1c <z_cbvprintf_impl+0x644>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   12f92:	9b10      	ldr	r3, [sp, #64]	; 0x40
   12f94:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
		char sign = 0;
   12f98:	f04f 0900 	mov.w	r9, #0
			bpe = buf + 1;
   12f9c:	f10d 075d 	add.w	r7, sp, #93	; 0x5d
			bps = buf;
   12fa0:	ae17      	add	r6, sp, #92	; 0x5c
		size_t nj_len = (bpe - bps);
   12fa2:	2001      	movs	r0, #1
   12fa4:	e7c0      	b.n	12f28 <z_cbvprintf_impl+0x650>
			if (conv->flag_plus) {
   12fa6:	9b07      	ldr	r3, [sp, #28]
   12fa8:	071a      	lsls	r2, r3, #28
			} else if (conv->flag_space) {
   12faa:	bf58      	it	pl
   12fac:	f3c3 1900 	ubfxpl	r9, r3, #4, #1
			sint = value->sint;
   12fb0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
			} else if (conv->flag_space) {
   12fb4:	bf54      	ite	pl
   12fb6:	ea4f 1949 	movpl.w	r9, r9, lsl #5
				sign = '+';
   12fba:	f04f 092b 	movmi.w	r9, #43	; 0x2b
			if (sint < 0) {
   12fbe:	2b00      	cmp	r3, #0
   12fc0:	da06      	bge.n	12fd0 <z_cbvprintf_impl+0x6f8>
				value->uint = (uint_value_type)-sint;
   12fc2:	4252      	negs	r2, r2
   12fc4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   12fc8:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
				sign = '-';
   12fcc:	f04f 092d 	mov.w	r9, #45	; 0x2d
			bps = encode_uint(value->uint, conv, buf, bpe);
   12fd0:	f10d 0375 	add.w	r3, sp, #117	; 0x75
   12fd4:	9300      	str	r3, [sp, #0]
   12fd6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   12fda:	ab17      	add	r3, sp, #92	; 0x5c
   12fdc:	aa12      	add	r2, sp, #72	; 0x48
   12fde:	f002 f82f 	bl	15040 <encode_uint>
   12fe2:	4606      	mov	r6, r0
			if (precision >= 0) {
   12fe4:	2f00      	cmp	r7, #0
   12fe6:	db0c      	blt.n	13002 <z_cbvprintf_impl+0x72a>
				conv->flag_zero = false;
   12fe8:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
				size_t len = bpe - bps;
   12fec:	f10d 0375 	add.w	r3, sp, #117	; 0x75
   12ff0:	1b9b      	subs	r3, r3, r6
				conv->flag_zero = false;
   12ff2:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
   12ff6:	429f      	cmp	r7, r3
				conv->flag_zero = false;
   12ff8:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
				if (len < (size_t)precision) {
   12ffc:	d901      	bls.n	13002 <z_cbvprintf_impl+0x72a>
					conv->pad0_value = precision - (int)len;
   12ffe:	1afb      	subs	r3, r7, r3
   13000:	9313      	str	r3, [sp, #76]	; 0x4c
		if (bps == NULL) {
   13002:	2e00      	cmp	r6, #0
   13004:	f43f ae9c 	beq.w	12d40 <z_cbvprintf_impl+0x468>
   13008:	f10d 0775 	add.w	r7, sp, #117	; 0x75
   1300c:	e05b      	b.n	130c6 <z_cbvprintf_impl+0x7ee>
		switch (conv->specifier) {
   1300e:	f04f 0900 	mov.w	r9, #0
   13012:	e7dd      	b.n	12fd0 <z_cbvprintf_impl+0x6f8>
			if (value->ptr != NULL) {
   13014:	9810      	ldr	r0, [sp, #64]	; 0x40
   13016:	2800      	cmp	r0, #0
   13018:	f000 81e0 	beq.w	133dc <z_cbvprintf_impl+0xb04>
				bps = encode_uint((uintptr_t)value->ptr, conv,
   1301c:	f10d 0375 	add.w	r3, sp, #117	; 0x75
   13020:	9300      	str	r3, [sp, #0]
   13022:	aa12      	add	r2, sp, #72	; 0x48
   13024:	ab17      	add	r3, sp, #92	; 0x5c
   13026:	2100      	movs	r1, #0
   13028:	f002 f80a 	bl	15040 <encode_uint>
				conv->altform_0c = true;
   1302c:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
   13030:	f003 03ef 	and.w	r3, r3, #239	; 0xef
   13034:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
   13038:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
   1303c:	4606      	mov	r6, r0
				conv->altform_0c = true;
   1303e:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
		char sign = 0;
   13042:	f04f 0900 	mov.w	r9, #0
				goto prec_int_pad0;
   13046:	e7cd      	b.n	12fe4 <z_cbvprintf_impl+0x70c>
				store_count(conv, value->ptr, count);
   13048:	9b10      	ldr	r3, [sp, #64]	; 0x40
	switch ((enum length_mod_enum)conv->length_mod) {
   1304a:	2a07      	cmp	r2, #7
   1304c:	f63f ae78 	bhi.w	12d40 <z_cbvprintf_impl+0x468>
   13050:	e8df f002 	tbb	[pc, r2]
   13054:	0c06040c 	.word	0x0c06040c
   13058:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
   1305c:	701d      	strb	r5, [r3, #0]
		break;
   1305e:	e66f      	b.n	12d40 <z_cbvprintf_impl+0x468>
		*(short *)dp = (short)count;
   13060:	801d      	strh	r5, [r3, #0]
		break;
   13062:	e66d      	b.n	12d40 <z_cbvprintf_impl+0x468>
		*(intmax_t *)dp = (intmax_t)count;
   13064:	17ea      	asrs	r2, r5, #31
   13066:	e9c3 5200 	strd	r5, r2, [r3]
		break;
   1306a:	e669      	b.n	12d40 <z_cbvprintf_impl+0x468>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   1306c:	601d      	str	r5, [r3, #0]
		break;
   1306e:	e667      	b.n	12d40 <z_cbvprintf_impl+0x468>
		*sign = '-';
   13070:	f04f 092d 	mov.w	r9, #45	; 0x2d
   13074:	e6ce      	b.n	12e14 <z_cbvprintf_impl+0x53c>
		*sign = '+';
   13076:	f04f 092b 	mov.w	r9, #43	; 0x2b
   1307a:	e6cb      	b.n	12e14 <z_cbvprintf_impl+0x53c>
	if (expo == BIT_MASK(EXPONENT_BITS)) {
   1307c:	f240 76ff 	movw	r6, #2047	; 0x7ff
   13080:	42b0      	cmp	r0, r6
   13082:	d12f      	bne.n	130e4 <z_cbvprintf_impl+0x80c>
			if (isupper((unsigned char)c)) {
   13084:	f10b 0301 	add.w	r3, fp, #1
   13088:	489f      	ldr	r0, [pc, #636]	; (13308 <z_cbvprintf_impl+0xa30>)
   1308a:	b2db      	uxtb	r3, r3
		if (fract == 0) {
   1308c:	430a      	orrs	r2, r1
   1308e:	5cc3      	ldrb	r3, [r0, r3]
   13090:	f003 0303 	and.w	r3, r3, #3
   13094:	d11e      	bne.n	130d4 <z_cbvprintf_impl+0x7fc>
			if (isupper((unsigned char)c)) {
   13096:	2b01      	cmp	r3, #1
   13098:	bf0b      	itete	eq
   1309a:	2349      	moveq	r3, #73	; 0x49
   1309c:	2369      	movne	r3, #105	; 0x69
   1309e:	214e      	moveq	r1, #78	; 0x4e
   130a0:	216e      	movne	r1, #110	; 0x6e
   130a2:	bf0c      	ite	eq
   130a4:	2246      	moveq	r2, #70	; 0x46
   130a6:	2266      	movne	r2, #102	; 0x66
				*buf++ = 'I';
   130a8:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
		conv->flag_zero = false;
   130ac:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
				*buf++ = 'N';
   130b0:	f88d 105d 	strb.w	r1, [sp, #93]	; 0x5d
		conv->flag_zero = false;
   130b4:	f36f 1386 	bfc	r3, #6, #1
				*buf++ = 'F';
   130b8:	f88d 205e 	strb.w	r2, [sp, #94]	; 0x5e
		conv->flag_zero = false;
   130bc:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
		*bpe = buf;
   130c0:	f10d 075f 	add.w	r7, sp, #95	; 0x5f
				bps = encode_float(value->dbl, conv, precision,
   130c4:	ae17      	add	r6, sp, #92	; 0x5c
		size_t nj_len = (bpe - bps);
   130c6:	1bb8      	subs	r0, r7, r6
		if (sign != 0) {
   130c8:	f1b9 0f00 	cmp.w	r9, #0
   130cc:	f43f af2c 	beq.w	12f28 <z_cbvprintf_impl+0x650>
			nj_len += 1U;
   130d0:	3001      	adds	r0, #1
   130d2:	e729      	b.n	12f28 <z_cbvprintf_impl+0x650>
			if (isupper((unsigned char)c)) {
   130d4:	2b01      	cmp	r3, #1
   130d6:	bf15      	itete	ne
   130d8:	236e      	movne	r3, #110	; 0x6e
   130da:	234e      	moveq	r3, #78	; 0x4e
   130dc:	2161      	movne	r1, #97	; 0x61
   130de:	2141      	moveq	r1, #65	; 0x41
   130e0:	461a      	mov	r2, r3
   130e2:	e7e1      	b.n	130a8 <z_cbvprintf_impl+0x7d0>
	bool is_subnormal = (expo == 0) && (fract != 0);
   130e4:	2600      	movs	r6, #0
   130e6:	e6a1      	b.n	12e2c <z_cbvprintf_impl+0x554>
				expo--;
   130e8:	3801      	subs	r0, #1
			while (((fract <<= 1) & BIT_63) == 0) {
   130ea:	1849      	adds	r1, r1, r1
   130ec:	4152      	adcs	r2, r2
   130ee:	2a00      	cmp	r2, #0
   130f0:	dafa      	bge.n	130e8 <z_cbvprintf_impl+0x810>
   130f2:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
   130f6:	e6af      	b.n	12e58 <z_cbvprintf_impl+0x580>
			fract >>= 1;
   130f8:	0849      	lsrs	r1, r1, #1
   130fa:	ea41 71c2 	orr.w	r1, r1, r2, lsl #31
   130fe:	0852      	lsrs	r2, r2, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
   13100:	f1b2 3f33 	cmp.w	r2, #858993459	; 0x33333333
   13104:	4640      	mov	r0, r8
			expo++;
   13106:	f108 0801 	add.w	r8, r8, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
   1310a:	d2f5      	bcs.n	130f8 <z_cbvprintf_impl+0x820>
		fract *= 5U;
   1310c:	fb0c fe02 	mul.w	lr, ip, r2
   13110:	fba1 120c 	umull	r1, r2, r1, ip
		expo++;
   13114:	f100 0802 	add.w	r8, r0, #2
		fract *= 5U;
   13118:	4472      	add	r2, lr
		decexp--;
   1311a:	3e01      	subs	r6, #1
   1311c:	2001      	movs	r0, #1
	while (expo < -2) {
   1311e:	f118 0f02 	cmn.w	r8, #2
   13122:	dbe9      	blt.n	130f8 <z_cbvprintf_impl+0x820>
   13124:	b108      	cbz	r0, 1312a <z_cbvprintf_impl+0x852>
   13126:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
	while (expo > 0) {
   1312a:	f1b8 0f00 	cmp.w	r8, #0
		fract += 2;
   1312e:	e9dd 210c 	ldrd	r2, r1, [sp, #48]	; 0x30
	while (expo > 0) {
   13132:	dc2d      	bgt.n	13190 <z_cbvprintf_impl+0x8b8>
	fract >>= (4 - expo);
   13134:	f1c8 0004 	rsb	r0, r8, #4
   13138:	f1a0 0c20 	sub.w	ip, r0, #32
   1313c:	f108 081c 	add.w	r8, r8, #28
   13140:	40c2      	lsrs	r2, r0
   13142:	fa01 f808 	lsl.w	r8, r1, r8
   13146:	fa21 fc0c 	lsr.w	ip, r1, ip
   1314a:	40c1      	lsrs	r1, r0
	if ((c == 'g') || (c == 'G')) {
   1314c:	f00b 00df 	and.w	r0, fp, #223	; 0xdf
	fract >>= (4 - expo);
   13150:	ea42 0208 	orr.w	r2, r2, r8
	if ((c == 'g') || (c == 'G')) {
   13154:	2847      	cmp	r0, #71	; 0x47
	fract >>= (4 - expo);
   13156:	ea42 020c 	orr.w	r2, r2, ip
	if ((c == 'g') || (c == 'G')) {
   1315a:	d13a      	bne.n	131d2 <z_cbvprintf_impl+0x8fa>
		if (decexp < (-4 + 1) || decexp > precision) {
   1315c:	1cf0      	adds	r0, r6, #3
   1315e:	db01      	blt.n	13164 <z_cbvprintf_impl+0x88c>
   13160:	42b7      	cmp	r7, r6
   13162:	da2b      	bge.n	131bc <z_cbvprintf_impl+0x8e4>
			c += 'e' - 'g';  /* e or E */
   13164:	f1ab 0302 	sub.w	r3, fp, #2
			if (precision > 0) {
   13168:	2f00      	cmp	r7, #0
			c += 'e' - 'g';  /* e or E */
   1316a:	fa5f fb83 	uxtb.w	fp, r3
			if (precision > 0) {
   1316e:	dd7d      	ble.n	1326c <z_cbvprintf_impl+0x994>
		if (!conv->flag_hash && (precision > 0)) {
   13170:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
   13174:	0683      	lsls	r3, r0, #26
				precision--;
   13176:	f107 37ff 	add.w	r7, r7, #4294967295
		if (!conv->flag_hash && (precision > 0)) {
   1317a:	d477      	bmi.n	1326c <z_cbvprintf_impl+0x994>
   1317c:	1e3b      	subs	r3, r7, #0
   1317e:	bf18      	it	ne
   13180:	2301      	movne	r3, #1
	bool prune_zero = false;
   13182:	9305      	str	r3, [sp, #20]
		decimals = precision + 1;
   13184:	f107 0801 	add.w	r8, r7, #1
   13188:	e02d      	b.n	131e6 <z_cbvprintf_impl+0x90e>
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
   1318a:	f04f 0800 	mov.w	r8, #0
   1318e:	e669      	b.n	12e64 <z_cbvprintf_impl+0x58c>
		fract += 2;
   13190:	3202      	adds	r2, #2
   13192:	f141 0100 	adc.w	r1, r1, #0
		_ldiv5(&fract);
   13196:	a80c      	add	r0, sp, #48	; 0x30
		fract += 2;
   13198:	e9cd 210c 	strd	r2, r1, [sp, #48]	; 0x30
		_ldiv5(&fract);
   1319c:	f00e fdbb 	bl	21d16 <_ldiv5>
		expo--;
   131a0:	e9dd 210c 	ldrd	r2, r1, [sp, #48]	; 0x30
   131a4:	f108 38ff 	add.w	r8, r8, #4294967295
		decexp++;
   131a8:	3601      	adds	r6, #1
			fract <<= 1;
   131aa:	1892      	adds	r2, r2, r2
   131ac:	4149      	adcs	r1, r1
		} while (!(fract & BIT_63));
   131ae:	2900      	cmp	r1, #0
			expo--;
   131b0:	f108 38ff 	add.w	r8, r8, #4294967295
		} while (!(fract & BIT_63));
   131b4:	daf9      	bge.n	131aa <z_cbvprintf_impl+0x8d2>
   131b6:	e9cd 210c 	strd	r2, r1, [sp, #48]	; 0x30
   131ba:	e7b6      	b.n	1312a <z_cbvprintf_impl+0x852>
		if (!conv->flag_hash && (precision > 0)) {
   131bc:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   131c0:	0698      	lsls	r0, r3, #26
			precision -= decexp;
   131c2:	eba7 0706 	sub.w	r7, r7, r6
		if (!conv->flag_hash && (precision > 0)) {
   131c6:	d44f      	bmi.n	13268 <z_cbvprintf_impl+0x990>
   131c8:	1e3b      	subs	r3, r7, #0
   131ca:	bf18      	it	ne
   131cc:	2301      	movne	r3, #1
	bool prune_zero = false;
   131ce:	9305      	str	r3, [sp, #20]
   131d0:	e004      	b.n	131dc <z_cbvprintf_impl+0x904>
   131d2:	2300      	movs	r3, #0
	if (c == 'f') {
   131d4:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
	bool prune_zero = false;
   131d8:	9305      	str	r3, [sp, #20]
	if (c == 'f') {
   131da:	d1d3      	bne.n	13184 <z_cbvprintf_impl+0x8ac>
		if (decimals < 0) {
   131dc:	eb17 0806 	adds.w	r8, r7, r6
   131e0:	f04f 0b66 	mov.w	fp, #102	; 0x66
   131e4:	d444      	bmi.n	13270 <z_cbvprintf_impl+0x998>
	if (decimals > 16) {
   131e6:	f1b8 0f10 	cmp.w	r8, #16
   131ea:	bfa8      	it	ge
   131ec:	f04f 0810 	movge.w	r8, #16
	uint64_t round = BIT64(59); /* 0.5 */
   131f0:	ed9f 7b43 	vldr	d7, [pc, #268]	; 13300 <z_cbvprintf_impl+0xa28>
   131f4:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
   131f8:	2010      	movs	r0, #16
   131fa:	900b      	str	r0, [sp, #44]	; 0x2c
	*v >>= 1;
   131fc:	e9dd 030e 	ldrd	r0, r3, [sp, #56]	; 0x38
	while (decimals--) {
   13200:	f1b8 0f00 	cmp.w	r8, #0
   13204:	d137      	bne.n	13276 <z_cbvprintf_impl+0x99e>
	fract += round;
   13206:	1812      	adds	r2, r2, r0
   13208:	eb41 0103 	adc.w	r1, r1, r3
	if (fract >= BIT64(60)) {
   1320c:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   13210:	d241      	bcs.n	13296 <z_cbvprintf_impl+0x9be>
	fract += round;
   13212:	e9cd 210c 	strd	r2, r1, [sp, #48]	; 0x30
		if (conv->flag_hash || (precision > 0)) {
   13216:	9b07      	ldr	r3, [sp, #28]
	if (c == 'f') {
   13218:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
		if (conv->flag_hash || (precision > 0)) {
   1321c:	f003 0220 	and.w	r2, r3, #32
	if (c == 'f') {
   13220:	f040 80bb 	bne.w	1339a <z_cbvprintf_impl+0xac2>
		if (decexp > 0) {
   13224:	2e00      	cmp	r6, #0
   13226:	dc41      	bgt.n	132ac <z_cbvprintf_impl+0x9d4>
			*buf++ = '0';
   13228:	2130      	movs	r1, #48	; 0x30
   1322a:	f88d 105c 	strb.w	r1, [sp, #92]	; 0x5c
		if (conv->flag_hash || (precision > 0)) {
   1322e:	2a00      	cmp	r2, #0
   13230:	d16c      	bne.n	1330c <z_cbvprintf_impl+0xa34>
   13232:	2f00      	cmp	r7, #0
   13234:	f340 81b5 	ble.w	135a2 <z_cbvprintf_impl+0xcca>
			*buf++ = '.';
   13238:	222e      	movs	r2, #46	; 0x2e
   1323a:	f88d 205d 	strb.w	r2, [sp, #93]	; 0x5d
		if (decexp < 0 && precision > 0) {
   1323e:	b186      	cbz	r6, 13262 <z_cbvprintf_impl+0x98a>
			conv->pad0_value = -decexp;
   13240:	4272      	negs	r2, r6
   13242:	42ba      	cmp	r2, r7
   13244:	bfa8      	it	ge
   13246:	463a      	movge	r2, r7
			conv->pad_postdp = (conv->pad0_value > 0);
   13248:	f89d 104a 	ldrb.w	r1, [sp, #74]	; 0x4a
   1324c:	9213      	str	r2, [sp, #76]	; 0x4c
   1324e:	2a00      	cmp	r2, #0
			precision -= conv->pad0_value;
   13250:	eba7 0702 	sub.w	r7, r7, r2
			conv->pad_postdp = (conv->pad0_value > 0);
   13254:	bfd4      	ite	le
   13256:	2200      	movle	r2, #0
   13258:	2201      	movgt	r2, #1
   1325a:	f362 1145 	bfi	r1, r2, #5, #1
   1325e:	f88d 104a 	strb.w	r1, [sp, #74]	; 0x4a
			*buf++ = '.';
   13262:	f10d 085e 	add.w	r8, sp, #94	; 0x5e
   13266:	e039      	b.n	132dc <z_cbvprintf_impl+0xa04>
	bool prune_zero = false;
   13268:	2300      	movs	r3, #0
   1326a:	e7b0      	b.n	131ce <z_cbvprintf_impl+0x8f6>
   1326c:	2300      	movs	r3, #0
   1326e:	e788      	b.n	13182 <z_cbvprintf_impl+0x8aa>
			decimals = 0;
   13270:	f04f 0800 	mov.w	r8, #0
   13274:	e7bc      	b.n	131f0 <z_cbvprintf_impl+0x918>
	*v >>= 1;
   13276:	0840      	lsrs	r0, r0, #1
   13278:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
   1327c:	085b      	lsrs	r3, r3, #1
   1327e:	e9cd 030e 	strd	r0, r3, [sp, #56]	; 0x38
	_ldiv5(v);
   13282:	a80e      	add	r0, sp, #56	; 0x38
   13284:	e9cd 2108 	strd	r2, r1, [sp, #32]
   13288:	f108 38ff 	add.w	r8, r8, #4294967295
   1328c:	f00e fd43 	bl	21d16 <_ldiv5>
   13290:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
}
   13294:	e7b2      	b.n	131fc <z_cbvprintf_impl+0x924>
	*v >>= 1;
   13296:	0852      	lsrs	r2, r2, #1
   13298:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
	_ldiv5(v);
   1329c:	a80c      	add	r0, sp, #48	; 0x30
	*v >>= 1;
   1329e:	0849      	lsrs	r1, r1, #1
   132a0:	e9cd 210c 	strd	r2, r1, [sp, #48]	; 0x30
		decexp++;
   132a4:	3601      	adds	r6, #1
	_ldiv5(v);
   132a6:	f00e fd36 	bl	21d16 <_ldiv5>
		decexp++;
   132aa:	e7b4      	b.n	13216 <z_cbvprintf_impl+0x93e>
	char *buf = bps;
   132ac:	f10d 085c 	add.w	r8, sp, #92	; 0x5c
			while (decexp > 0 && digit_count > 0) {
   132b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
   132b2:	2900      	cmp	r1, #0
   132b4:	dd09      	ble.n	132ca <z_cbvprintf_impl+0x9f2>
				*buf++ = _get_digit(&fract, &digit_count);
   132b6:	a90b      	add	r1, sp, #44	; 0x2c
   132b8:	a80c      	add	r0, sp, #48	; 0x30
   132ba:	9207      	str	r2, [sp, #28]
   132bc:	f00e fd43 	bl	21d46 <_get_digit>
			while (decexp > 0 && digit_count > 0) {
   132c0:	3e01      	subs	r6, #1
				*buf++ = _get_digit(&fract, &digit_count);
   132c2:	f808 0b01 	strb.w	r0, [r8], #1
			while (decexp > 0 && digit_count > 0) {
   132c6:	9a07      	ldr	r2, [sp, #28]
   132c8:	d1f2      	bne.n	132b0 <z_cbvprintf_impl+0x9d8>
			conv->pad0_value = decexp;
   132ca:	9613      	str	r6, [sp, #76]	; 0x4c
		if (conv->flag_hash || (precision > 0)) {
   132cc:	b99a      	cbnz	r2, 132f6 <z_cbvprintf_impl+0xa1e>
   132ce:	2f00      	cmp	r7, #0
   132d0:	f340 8165 	ble.w	1359e <z_cbvprintf_impl+0xcc6>
			*buf++ = '.';
   132d4:	212e      	movs	r1, #46	; 0x2e
   132d6:	f808 1b01 	strb.w	r1, [r8], #1
   132da:	2600      	movs	r6, #0
	while (precision > 0 && digit_count > 0) {
   132dc:	2f00      	cmp	r7, #0
   132de:	dd1e      	ble.n	1331e <z_cbvprintf_impl+0xa46>
   132e0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   132e2:	2a00      	cmp	r2, #0
   132e4:	dd1b      	ble.n	1331e <z_cbvprintf_impl+0xa46>
		*buf++ = _get_digit(&fract, &digit_count);
   132e6:	a90b      	add	r1, sp, #44	; 0x2c
   132e8:	a80c      	add	r0, sp, #48	; 0x30
   132ea:	f00e fd2c 	bl	21d46 <_get_digit>
		precision--;
   132ee:	3f01      	subs	r7, #1
		*buf++ = _get_digit(&fract, &digit_count);
   132f0:	f808 0b01 	strb.w	r0, [r8], #1
		precision--;
   132f4:	e7f2      	b.n	132dc <z_cbvprintf_impl+0xa04>
			*buf++ = '.';
   132f6:	222e      	movs	r2, #46	; 0x2e
   132f8:	f808 2b01 	strb.w	r2, [r8], #1
   132fc:	e7ed      	b.n	132da <z_cbvprintf_impl+0xa02>
   132fe:	bf00      	nop
   13300:	00000000 	.word	0x00000000
   13304:	08000000 	.word	0x08000000
   13308:	00027b4c 	.word	0x00027b4c
   1330c:	222e      	movs	r2, #46	; 0x2e
   1330e:	f88d 205d 	strb.w	r2, [sp, #93]	; 0x5d
		if (decexp < 0 && precision > 0) {
   13312:	2e00      	cmp	r6, #0
   13314:	d0a5      	beq.n	13262 <z_cbvprintf_impl+0x98a>
   13316:	2f00      	cmp	r7, #0
   13318:	dc92      	bgt.n	13240 <z_cbvprintf_impl+0x968>
			*buf++ = '.';
   1331a:	f10d 085e 	add.w	r8, sp, #94	; 0x5e
	if (prune_zero) {
   1331e:	9b05      	ldr	r3, [sp, #20]
   13320:	2b00      	cmp	r3, #0
   13322:	d14e      	bne.n	133c2 <z_cbvprintf_impl+0xaea>
	conv->pad0_pre_exp = precision;
   13324:	9714      	str	r7, [sp, #80]	; 0x50
   13326:	4647      	mov	r7, r8
	if ((c == 'e') || (c == 'E')) {
   13328:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
   1332c:	2a45      	cmp	r2, #69	; 0x45
   1332e:	d123      	bne.n	13378 <z_cbvprintf_impl+0xaa0>
		if (decexp < 0) {
   13330:	2e00      	cmp	r6, #0
			decexp = -decexp;
   13332:	bfba      	itte	lt
   13334:	4276      	neglt	r6, r6
			*buf++ = '-';
   13336:	232d      	movlt	r3, #45	; 0x2d
			*buf++ = '+';
   13338:	232b      	movge	r3, #43	; 0x2b
		if (decexp >= 100) {
   1333a:	2e63      	cmp	r6, #99	; 0x63
			*buf++ = (decexp / 100) + '0';
   1333c:	bfc8      	it	gt
   1333e:	2164      	movgt	r1, #100	; 0x64
   13340:	707b      	strb	r3, [r7, #1]
			*buf++ = '-';
   13342:	bfd1      	iteee	le
   13344:	1cba      	addle	r2, r7, #2
			*buf++ = (decexp / 100) + '0';
   13346:	fbb6 f3f1 	udivgt	r3, r6, r1
   1334a:	1cfa      	addgt	r2, r7, #3
   1334c:	f103 0030 	addgt.w	r0, r3, #48	; 0x30
			decexp %= 100;
   13350:	bfc8      	it	gt
   13352:	fb01 6613 	mlsgt	r6, r1, r3, r6
		*buf++ = (decexp / 10) + '0';
   13356:	f04f 010a 	mov.w	r1, #10
			*buf++ = (decexp / 100) + '0';
   1335a:	bfc8      	it	gt
   1335c:	70b8      	strbgt	r0, [r7, #2]
		*buf++ = c;
   1335e:	f887 b000 	strb.w	fp, [r7]
		*buf++ = (decexp / 10) + '0';
   13362:	fbb6 f3f1 	udiv	r3, r6, r1
   13366:	4617      	mov	r7, r2
   13368:	f103 0030 	add.w	r0, r3, #48	; 0x30
		*buf++ = (decexp % 10) + '0';
   1336c:	fb01 6313 	mls	r3, r1, r3, r6
   13370:	3330      	adds	r3, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
   13372:	f807 0b02 	strb.w	r0, [r7], #2
		*buf++ = (decexp % 10) + '0';
   13376:	7053      	strb	r3, [r2, #1]
		|| (conv->pad0_pre_exp > 0);
   13378:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1337a:	2b00      	cmp	r3, #0
   1337c:	dc2c      	bgt.n	133d8 <z_cbvprintf_impl+0xb00>
   1337e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   13380:	2b00      	cmp	r3, #0
   13382:	bfd4      	ite	le
   13384:	2300      	movle	r3, #0
   13386:	2301      	movgt	r3, #1
	conv->pad_fp = (conv->pad0_value > 0)
   13388:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
   1338c:	f363 1286 	bfi	r2, r3, #6, #1
	*buf = 0;
   13390:	2300      	movs	r3, #0
	conv->pad_fp = (conv->pad0_value > 0)
   13392:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
	*buf = 0;
   13396:	703b      	strb	r3, [r7, #0]
	return bps;
   13398:	e694      	b.n	130c4 <z_cbvprintf_impl+0x7ec>
		*buf = _get_digit(&fract, &digit_count);
   1339a:	a90b      	add	r1, sp, #44	; 0x2c
   1339c:	a80c      	add	r0, sp, #48	; 0x30
   1339e:	9207      	str	r2, [sp, #28]
   133a0:	f00e fcd1 	bl	21d46 <_get_digit>
		if (*buf++ != '0') {
   133a4:	9a07      	ldr	r2, [sp, #28]
		*buf = _get_digit(&fract, &digit_count);
   133a6:	f88d 005c 	strb.w	r0, [sp, #92]	; 0x5c
		if (*buf++ != '0') {
   133aa:	2830      	cmp	r0, #48	; 0x30
			decexp--;
   133ac:	bf18      	it	ne
   133ae:	f106 36ff 	addne.w	r6, r6, #4294967295
		if (conv->flag_hash || (precision > 0)) {
   133b2:	b912      	cbnz	r2, 133ba <z_cbvprintf_impl+0xae2>
   133b4:	2f00      	cmp	r7, #0
   133b6:	f340 80f4 	ble.w	135a2 <z_cbvprintf_impl+0xcca>
			*buf++ = '.';
   133ba:	222e      	movs	r2, #46	; 0x2e
   133bc:	f88d 205d 	strb.w	r2, [sp, #93]	; 0x5d
   133c0:	e74f      	b.n	13262 <z_cbvprintf_impl+0x98a>
		while (*--buf == '0') {
   133c2:	4647      	mov	r7, r8
   133c4:	f108 38ff 	add.w	r8, r8, #4294967295
   133c8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
   133cc:	2a30      	cmp	r2, #48	; 0x30
   133ce:	d0f8      	beq.n	133c2 <z_cbvprintf_impl+0xaea>
   133d0:	2a2e      	cmp	r2, #46	; 0x2e
   133d2:	bf08      	it	eq
   133d4:	4647      	moveq	r7, r8
   133d6:	e7a7      	b.n	13328 <z_cbvprintf_impl+0xa50>
		|| (conv->pad0_pre_exp > 0);
   133d8:	2301      	movs	r3, #1
   133da:	e7d5      	b.n	13388 <z_cbvprintf_impl+0xab0>
			bpe = bps + 5;
   133dc:	4f72      	ldr	r7, [pc, #456]	; (135a8 <z_cbvprintf_impl+0xcd0>)
		char sign = 0;
   133de:	4681      	mov	r9, r0
			bps = "(nil)";
   133e0:	1f7e      	subs	r6, r7, #5
		size_t nj_len = (bpe - bps);
   133e2:	2005      	movs	r0, #5
   133e4:	e5a0      	b.n	12f28 <z_cbvprintf_impl+0x650>
		} else if (conv->altform_0) {
   133e6:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
   133e8:	bf48      	it	mi
   133ea:	3001      	addmi	r0, #1
   133ec:	e5a4      	b.n	12f38 <z_cbvprintf_impl+0x660>
					OUTC(pad);
   133ee:	4610      	mov	r0, r2
   133f0:	9209      	str	r2, [sp, #36]	; 0x24
   133f2:	9903      	ldr	r1, [sp, #12]
   133f4:	47d0      	blx	sl
   133f6:	2800      	cmp	r0, #0
   133f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
   133fa:	da05      	bge.n	13408 <z_cbvprintf_impl+0xb30>
#undef OUTS
#undef OUTC
}
   133fc:	b01f      	add	sp, #124	; 0x7c
   133fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
   13402:	2220      	movs	r2, #32
					pad = '0';
   13404:	f8dd b010 	ldr.w	fp, [sp, #16]
				while (width-- > 0) {
   13408:	4659      	mov	r1, fp
   1340a:	2900      	cmp	r1, #0
   1340c:	f10b 3bff 	add.w	fp, fp, #4294967295
   13410:	dced      	bgt.n	133ee <z_cbvprintf_impl+0xb16>
   13412:	9b04      	ldr	r3, [sp, #16]
   13414:	f8cd b010 	str.w	fp, [sp, #16]
   13418:	442b      	add	r3, r5
   1341a:	1a5d      	subs	r5, r3, r1
		if (sign != 0) {
   1341c:	f1b9 0f00 	cmp.w	r9, #0
   13420:	d005      	beq.n	1342e <z_cbvprintf_impl+0xb56>
			OUTC(sign);
   13422:	9903      	ldr	r1, [sp, #12]
   13424:	4648      	mov	r0, r9
   13426:	47d0      	blx	sl
   13428:	2800      	cmp	r0, #0
   1342a:	dbe7      	blt.n	133fc <z_cbvprintf_impl+0xb24>
   1342c:	3501      	adds	r5, #1
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT) && conv->pad_fp) {
   1342e:	9b08      	ldr	r3, [sp, #32]
   13430:	2b00      	cmp	r3, #0
   13432:	d079      	beq.n	13528 <z_cbvprintf_impl+0xc50>
			if (conv->specifier_a) {
   13434:	f99d 3049 	ldrsb.w	r3, [sp, #73]	; 0x49
   13438:	2b00      	cmp	r3, #0
   1343a:	db29      	blt.n	13490 <z_cbvprintf_impl+0xbb8>
				while (isdigit((unsigned char)*cp)) {
   1343c:	f8df 916c 	ldr.w	r9, [pc, #364]	; 135ac <z_cbvprintf_impl+0xcd4>
			if (conv->specifier_a) {
   13440:	4633      	mov	r3, r6
				while (isdigit((unsigned char)*cp)) {
   13442:	7818      	ldrb	r0, [r3, #0]
   13444:	f819 2000 	ldrb.w	r2, [r9, r0]
   13448:	0752      	lsls	r2, r2, #29
   1344a:	469b      	mov	fp, r3
   1344c:	f103 0301 	add.w	r3, r3, #1
   13450:	d43f      	bmi.n	134d2 <z_cbvprintf_impl+0xbfa>
				if (!conv->pad_postdp) {
   13452:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
   13456:	1bae      	subs	r6, r5, r6
   13458:	0698      	lsls	r0, r3, #26
   1345a:	445e      	add	r6, fp
   1345c:	d407      	bmi.n	1346e <z_cbvprintf_impl+0xb96>
					while (pad_len-- > 0) {
   1345e:	4642      	mov	r2, r8
   13460:	2a00      	cmp	r2, #0
   13462:	f108 38ff 	add.w	r8, r8, #4294967295
   13466:	dc3b      	bgt.n	134e0 <z_cbvprintf_impl+0xc08>
   13468:	9b07      	ldr	r3, [sp, #28]
   1346a:	4433      	add	r3, r6
   1346c:	1a9e      	subs	r6, r3, r2
				if (*cp == '.') {
   1346e:	f89b 0000 	ldrb.w	r0, [fp]
   13472:	282e      	cmp	r0, #46	; 0x2e
   13474:	d10a      	bne.n	1348c <z_cbvprintf_impl+0xbb4>
					OUTC(*cp++);
   13476:	9903      	ldr	r1, [sp, #12]
   13478:	47d0      	blx	sl
						OUTC('0');
   1347a:	2800      	cmp	r0, #0
   1347c:	dbbe      	blt.n	133fc <z_cbvprintf_impl+0xb24>
					while (pad_len-- > 0) {
   1347e:	f1b8 0f00 	cmp.w	r8, #0
						OUTC('0');
   13482:	f106 0601 	add.w	r6, r6, #1
					while (pad_len-- > 0) {
   13486:	dc31      	bgt.n	134ec <z_cbvprintf_impl+0xc14>
					OUTC(*cp++);
   13488:	f10b 0b01 	add.w	fp, fp, #1
			if (conv->specifier_a) {
   1348c:	465d      	mov	r5, fp
   1348e:	e038      	b.n	13502 <z_cbvprintf_impl+0xc2a>
   13490:	46b1      	mov	r9, r6
				while (*cp != 'p') {
   13492:	f899 0000 	ldrb.w	r0, [r9]
   13496:	2870      	cmp	r0, #112	; 0x70
   13498:	46c8      	mov	r8, r9
   1349a:	f109 0901 	add.w	r9, r9, #1
   1349e:	d113      	bne.n	134c8 <z_cbvprintf_impl+0xbf0>
   134a0:	1bae      	subs	r6, r5, r6
   134a2:	9d14      	ldr	r5, [sp, #80]	; 0x50
   134a4:	4446      	add	r6, r8
			while (pad_len-- > 0) {
   134a6:	4435      	add	r5, r6
   134a8:	1bab      	subs	r3, r5, r6
   134aa:	2b00      	cmp	r3, #0
   134ac:	dc34      	bgt.n	13518 <z_cbvprintf_impl+0xc40>
			OUTS(cp, bpe);
   134ae:	9903      	ldr	r1, [sp, #12]
   134b0:	463b      	mov	r3, r7
   134b2:	4642      	mov	r2, r8
   134b4:	4650      	mov	r0, sl
   134b6:	f00e fc5d 	bl	21d74 <outs>
   134ba:	2800      	cmp	r0, #0
   134bc:	db9e      	blt.n	133fc <z_cbvprintf_impl+0xb24>
   134be:	4430      	add	r0, r6
   134c0:	9e04      	ldr	r6, [sp, #16]
			while (pad_len-- > 0) {
   134c2:	4605      	mov	r5, r0
   134c4:	4406      	add	r6, r0
   134c6:	e065      	b.n	13594 <z_cbvprintf_impl+0xcbc>
					OUTC(*cp++);
   134c8:	9903      	ldr	r1, [sp, #12]
   134ca:	47d0      	blx	sl
   134cc:	2800      	cmp	r0, #0
   134ce:	dae0      	bge.n	13492 <z_cbvprintf_impl+0xbba>
   134d0:	e794      	b.n	133fc <z_cbvprintf_impl+0xb24>
   134d2:	9305      	str	r3, [sp, #20]
					OUTC(*cp++);
   134d4:	9903      	ldr	r1, [sp, #12]
   134d6:	47d0      	blx	sl
   134d8:	2800      	cmp	r0, #0
   134da:	9b05      	ldr	r3, [sp, #20]
   134dc:	dab1      	bge.n	13442 <z_cbvprintf_impl+0xb6a>
   134de:	e78d      	b.n	133fc <z_cbvprintf_impl+0xb24>
						OUTC('0');
   134e0:	9903      	ldr	r1, [sp, #12]
   134e2:	2030      	movs	r0, #48	; 0x30
   134e4:	47d0      	blx	sl
   134e6:	2800      	cmp	r0, #0
   134e8:	dab9      	bge.n	1345e <z_cbvprintf_impl+0xb86>
   134ea:	e787      	b.n	133fc <z_cbvprintf_impl+0xb24>
						OUTC('0');
   134ec:	9903      	ldr	r1, [sp, #12]
   134ee:	2030      	movs	r0, #48	; 0x30
   134f0:	47d0      	blx	sl
   134f2:	f108 38ff 	add.w	r8, r8, #4294967295
   134f6:	e7c0      	b.n	1347a <z_cbvprintf_impl+0xba2>
					OUTC(*cp++);
   134f8:	9903      	ldr	r1, [sp, #12]
   134fa:	47d0      	blx	sl
   134fc:	2800      	cmp	r0, #0
   134fe:	f6ff af7d 	blt.w	133fc <z_cbvprintf_impl+0xb24>
				while (isdigit((unsigned char)*cp)) {
   13502:	7828      	ldrb	r0, [r5, #0]
   13504:	f819 3000 	ldrb.w	r3, [r9, r0]
   13508:	0759      	lsls	r1, r3, #29
   1350a:	46a8      	mov	r8, r5
   1350c:	f105 0501 	add.w	r5, r5, #1
   13510:	d4f2      	bmi.n	134f8 <z_cbvprintf_impl+0xc20>
   13512:	eba6 060b 	sub.w	r6, r6, fp
   13516:	e7c4      	b.n	134a2 <z_cbvprintf_impl+0xbca>
				OUTC('0');
   13518:	9903      	ldr	r1, [sp, #12]
   1351a:	2030      	movs	r0, #48	; 0x30
   1351c:	47d0      	blx	sl
   1351e:	2800      	cmp	r0, #0
   13520:	f6ff af6c 	blt.w	133fc <z_cbvprintf_impl+0xb24>
   13524:	3601      	adds	r6, #1
   13526:	e7bf      	b.n	134a8 <z_cbvprintf_impl+0xbd0>
			if (conv->altform_0c | conv->altform_0) {
   13528:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
   1352c:	06da      	lsls	r2, r3, #27
   1352e:	d401      	bmi.n	13534 <z_cbvprintf_impl+0xc5c>
   13530:	071b      	lsls	r3, r3, #28
   13532:	d506      	bpl.n	13542 <z_cbvprintf_impl+0xc6a>
				OUTC('0');
   13534:	9903      	ldr	r1, [sp, #12]
   13536:	2030      	movs	r0, #48	; 0x30
   13538:	47d0      	blx	sl
   1353a:	2800      	cmp	r0, #0
   1353c:	f6ff af5e 	blt.w	133fc <z_cbvprintf_impl+0xb24>
   13540:	3501      	adds	r5, #1
			if (conv->altform_0c) {
   13542:	9b05      	ldr	r3, [sp, #20]
   13544:	b13b      	cbz	r3, 13556 <z_cbvprintf_impl+0xc7e>
				OUTC(conv->specifier);
   13546:	9903      	ldr	r1, [sp, #12]
   13548:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
   1354c:	47d0      	blx	sl
   1354e:	2800      	cmp	r0, #0
   13550:	f6ff af54 	blt.w	133fc <z_cbvprintf_impl+0xb24>
   13554:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
   13556:	44a8      	add	r8, r5
   13558:	e006      	b.n	13568 <z_cbvprintf_impl+0xc90>
				OUTC('0');
   1355a:	9903      	ldr	r1, [sp, #12]
   1355c:	2030      	movs	r0, #48	; 0x30
   1355e:	47d0      	blx	sl
   13560:	2800      	cmp	r0, #0
   13562:	f6ff af4b 	blt.w	133fc <z_cbvprintf_impl+0xb24>
   13566:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
   13568:	eba8 0305 	sub.w	r3, r8, r5
   1356c:	2b00      	cmp	r3, #0
   1356e:	dcf4      	bgt.n	1355a <z_cbvprintf_impl+0xc82>
			OUTS(bps, bpe);
   13570:	9903      	ldr	r1, [sp, #12]
   13572:	463b      	mov	r3, r7
   13574:	4632      	mov	r2, r6
   13576:	4650      	mov	r0, sl
   13578:	f00e fbfc 	bl	21d74 <outs>
   1357c:	2800      	cmp	r0, #0
   1357e:	f6ff af3d 	blt.w	133fc <z_cbvprintf_impl+0xb24>
   13582:	4428      	add	r0, r5
   13584:	e79c      	b.n	134c0 <z_cbvprintf_impl+0xbe8>
			OUTC(' ');
   13586:	9903      	ldr	r1, [sp, #12]
   13588:	2020      	movs	r0, #32
   1358a:	47d0      	blx	sl
   1358c:	2800      	cmp	r0, #0
   1358e:	f6ff af35 	blt.w	133fc <z_cbvprintf_impl+0xb24>
   13592:	3501      	adds	r5, #1
		while (width > 0) {
   13594:	1b73      	subs	r3, r6, r5
   13596:	2b00      	cmp	r3, #0
   13598:	dcf5      	bgt.n	13586 <z_cbvprintf_impl+0xcae>
   1359a:	f7ff bbd1 	b.w	12d40 <z_cbvprintf_impl+0x468>
			decexp = 0;
   1359e:	4616      	mov	r6, r2
   135a0:	e6bd      	b.n	1331e <z_cbvprintf_impl+0xa46>
		if (*buf++ != '0') {
   135a2:	f10d 085d 	add.w	r8, sp, #93	; 0x5d
	while (precision > 0 && digit_count > 0) {
   135a6:	e6ba      	b.n	1331e <z_cbvprintf_impl+0xa46>
   135a8:	000261d9 	.word	0x000261d9
   135ac:	00027b4d 	.word	0x00027b4d

000135b0 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   135b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   135b4:	ed2d 8b02 	vpush	{d8}
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
   135b8:	ed9f 8b49 	vldr	d8, [pc, #292]	; 136e0 <work_queue_main+0x130>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   135bc:	4e4a      	ldr	r6, [pc, #296]	; (136e8 <work_queue_main+0x138>)
{
   135be:	b084      	sub	sp, #16
   135c0:	4604      	mov	r4, r0
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
   135c2:	f04f 0340 	mov.w	r3, #64	; 0x40
   135c6:	f3ef 8711 	mrs	r7, BASEPRI
   135ca:	f383 8812 	msr	BASEPRI_MAX, r3
   135ce:	f3bf 8f6f 	isb	sy
   135d2:	f8d4 50c8 	ldr.w	r5, [r4, #200]	; 0xc8
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
   135d6:	b98d      	cbnz	r5, 135fc <work_queue_main+0x4c>
		} else if (flag_test_and_clear(&queue->flags,
   135d8:	2102      	movs	r1, #2
   135da:	f104 00e0 	add.w	r0, r4, #224	; 0xe0
   135de:	f011 f968 	bl	248b2 <flag_test_and_clear>
   135e2:	2800      	cmp	r0, #0
   135e4:	d143      	bne.n	1366e <work_queue_main+0xbe>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
   135e6:	2300      	movs	r3, #0
   135e8:	ed8d 8b00 	vstr	d8, [sp]
   135ec:	9302      	str	r3, [sp, #8]
   135ee:	f104 02d0 	add.w	r2, r4, #208	; 0xd0
   135f2:	4639      	mov	r1, r7
   135f4:	483d      	ldr	r0, [pc, #244]	; (136ec <work_queue_main+0x13c>)
   135f6:	f00c fe71 	bl	202dc <z_sched_wait>
			continue;
   135fa:	e7e2      	b.n	135c2 <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   135fc:	f8d4 20cc 	ldr.w	r2, [r4, #204]	; 0xcc
	return node->next;
   13600:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   13602:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   13606:	4295      	cmp	r5, r2
	list->tail = node;
   13608:	bf08      	it	eq
   1360a:	f8c4 30cc 	streq.w	r3, [r4, #204]	; 0xcc
	*flagp |= BIT(bit);
   1360e:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
   13612:	f043 0302 	orr.w	r3, r3, #2
   13616:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
	*flagp &= ~BIT(bit);
   1361a:	68eb      	ldr	r3, [r5, #12]
   1361c:	f023 0304 	bic.w	r3, r3, #4
   13620:	f043 0301 	orr.w	r3, r3, #1
   13624:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
   13626:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   13628:	f387 8811 	msr	BASEPRI, r7
   1362c:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
   13630:	4628      	mov	r0, r5
   13632:	4798      	blx	r3
	__asm__ volatile(
   13634:	f04f 0340 	mov.w	r3, #64	; 0x40
   13638:	f3ef 8911 	mrs	r9, BASEPRI
   1363c:	f383 8812 	msr	BASEPRI_MAX, r3
   13640:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   13644:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   13646:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   13648:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1364c:	d419      	bmi.n	13682 <work_queue_main+0xd2>
	*flagp &= ~BIT(bit);
   1364e:	60ea      	str	r2, [r5, #12]
   13650:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
   13654:	f023 0302 	bic.w	r3, r3, #2
   13658:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
	__asm__ volatile(
   1365c:	f389 8811 	msr	BASEPRI, r9
   13660:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   13664:	05db      	lsls	r3, r3, #23
   13666:	d4ac      	bmi.n	135c2 <work_queue_main+0x12>
		(void) arch_syscall_invoke0(K_SYSCALL_K_YIELD);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_yield();
   13668:	f00c fd36 	bl	200d8 <z_impl_k_yield>
}
   1366c:	e7a9      	b.n	135c2 <work_queue_main+0x12>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   1366e:	f104 05d8 	add.w	r5, r4, #216	; 0xd8
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   13672:	2200      	movs	r2, #0
   13674:	2101      	movs	r1, #1
   13676:	4628      	mov	r0, r5
   13678:	f011 fb16 	bl	24ca8 <z_sched_wake>
   1367c:	2800      	cmp	r0, #0
   1367e:	d1f8      	bne.n	13672 <work_queue_main+0xc2>
   13680:	e7b1      	b.n	135e6 <work_queue_main+0x36>
	return list->head;
   13682:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
   13684:	f023 0303 	bic.w	r3, r3, #3
   13688:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   1368a:	2800      	cmp	r0, #0
   1368c:	d0e0      	beq.n	13650 <work_queue_main+0xa0>
	return node->next;
   1368e:	2700      	movs	r7, #0
   13690:	f8d0 8000 	ldr.w	r8, [r0]
	parent->next = child;
   13694:	46ba      	mov	sl, r7
   13696:	2800      	cmp	r0, #0
   13698:	d0da      	beq.n	13650 <work_queue_main+0xa0>
		if (wc->work == work) {
   1369a:	6842      	ldr	r2, [r0, #4]
   1369c:	4295      	cmp	r5, r2
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   1369e:	4601      	mov	r1, r0
		if (wc->work == work) {
   136a0:	d10b      	bne.n	136ba <work_queue_main+0x10a>
	return node->next;
   136a2:	6801      	ldr	r1, [r0, #0]
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
   136a4:	b997      	cbnz	r7, 136cc <work_queue_main+0x11c>
   136a6:	6872      	ldr	r2, [r6, #4]
	list->head = node;
   136a8:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   136aa:	4282      	cmp	r2, r0
   136ac:	d100      	bne.n	136b0 <work_queue_main+0x100>
	list->tail = node;
   136ae:	6071      	str	r1, [r6, #4]
	parent->next = child;
   136b0:	f840 ab08 	str.w	sl, [r0], #8
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
   136b4:	f00c f948 	bl	1f948 <z_impl_k_sem_give>
}
   136b8:	4639      	mov	r1, r7
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   136ba:	f1b8 0f00 	cmp.w	r8, #0
   136be:	d00b      	beq.n	136d8 <work_queue_main+0x128>
	return node->next;
   136c0:	f8d8 2000 	ldr.w	r2, [r8]
   136c4:	4640      	mov	r0, r8
   136c6:	460f      	mov	r7, r1
   136c8:	4690      	mov	r8, r2
   136ca:	e7e4      	b.n	13696 <work_queue_main+0xe6>
	parent->next = child;
   136cc:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   136ce:	6872      	ldr	r2, [r6, #4]
   136d0:	4282      	cmp	r2, r0
	list->tail = node;
   136d2:	bf08      	it	eq
   136d4:	6077      	streq	r7, [r6, #4]
}
   136d6:	e7eb      	b.n	136b0 <work_queue_main+0x100>
   136d8:	4642      	mov	r2, r8
   136da:	e7f3      	b.n	136c4 <work_queue_main+0x114>
   136dc:	f3af 8000 	nop.w
   136e0:	ffffffff 	.word	0xffffffff
   136e4:	ffffffff 	.word	0xffffffff
   136e8:	20005344 	.word	0x20005344
   136ec:	200059fb 	.word	0x200059fb

000136f0 <__ieee754_pow>:
   136f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   136f4:	b091      	sub	sp, #68	; 0x44
   136f6:	ed8d 1b00 	vstr	d1, [sp]
   136fa:	e9dd 3800 	ldrd	r3, r8, [sp]
   136fe:	f028 4900 	bic.w	r9, r8, #2147483648	; 0x80000000
   13702:	ea59 0203 	orrs.w	r2, r9, r3
   13706:	ec57 6b10 	vmov	r6, r7, d0
   1370a:	f000 80a5 	beq.w	13858 <__ieee754_pow+0x168>
   1370e:	4a88      	ldr	r2, [pc, #544]	; (13930 <__ieee754_pow+0x240>)
   13710:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
   13714:	4294      	cmp	r4, r2
   13716:	463d      	mov	r5, r7
   13718:	46b2      	mov	sl, r6
   1371a:	9402      	str	r4, [sp, #8]
   1371c:	d819      	bhi.n	13752 <__ieee754_pow+0x62>
   1371e:	d113      	bne.n	13748 <__ieee754_pow+0x58>
   13720:	b9f6      	cbnz	r6, 13760 <__ieee754_pow+0x70>
   13722:	45a1      	cmp	r9, r4
   13724:	d81c      	bhi.n	13760 <__ieee754_pow+0x70>
   13726:	d121      	bne.n	1376c <__ieee754_pow+0x7c>
   13728:	b9d3      	cbnz	r3, 13760 <__ieee754_pow+0x70>
   1372a:	4b82      	ldr	r3, [pc, #520]	; (13934 <__ieee754_pow+0x244>)
   1372c:	429c      	cmp	r4, r3
   1372e:	f240 8096 	bls.w	1385e <__ieee754_pow+0x16e>
   13732:	f1b8 0f00 	cmp.w	r8, #0
   13736:	f280 84c6 	bge.w	140c6 <__ieee754_pow+0x9d6>
   1373a:	2000      	movs	r0, #0
   1373c:	2100      	movs	r1, #0
   1373e:	ec41 0b10 	vmov	d0, r0, r1
   13742:	b011      	add	sp, #68	; 0x44
   13744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13748:	4591      	cmp	r9, r2
   1374a:	d802      	bhi.n	13752 <__ieee754_pow+0x62>
   1374c:	d10e      	bne.n	1376c <__ieee754_pow+0x7c>
   1374e:	2b00      	cmp	r3, #0
   13750:	d07b      	beq.n	1384a <__ieee754_pow+0x15a>
   13752:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
   13756:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
   1375a:	ea54 040a 	orrs.w	r4, r4, sl
   1375e:	d07b      	beq.n	13858 <__ieee754_pow+0x168>
   13760:	4875      	ldr	r0, [pc, #468]	; (13938 <__ieee754_pow+0x248>)
   13762:	b011      	add	sp, #68	; 0x44
   13764:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13768:	f000 bcee 	b.w	14148 <nan>
   1376c:	2d00      	cmp	r5, #0
   1376e:	da08      	bge.n	13782 <__ieee754_pow+0x92>
   13770:	4a72      	ldr	r2, [pc, #456]	; (1393c <__ieee754_pow+0x24c>)
   13772:	4591      	cmp	r9, r2
   13774:	d90b      	bls.n	1378e <__ieee754_pow+0x9e>
   13776:	2b00      	cmp	r3, #0
   13778:	f000 80a2 	beq.w	138c0 <__ieee754_pow+0x1d0>
   1377c:	f04f 0b02 	mov.w	fp, #2
   13780:	e023      	b.n	137ca <__ieee754_pow+0xda>
   13782:	2b00      	cmp	r3, #0
   13784:	f000 808b 	beq.w	1389e <__ieee754_pow+0x1ae>
   13788:	f04f 0b00 	mov.w	fp, #0
   1378c:	e01d      	b.n	137ca <__ieee754_pow+0xda>
   1378e:	4a69      	ldr	r2, [pc, #420]	; (13934 <__ieee754_pow+0x244>)
   13790:	4591      	cmp	r9, r2
   13792:	d806      	bhi.n	137a2 <__ieee754_pow+0xb2>
   13794:	2b00      	cmp	r3, #0
   13796:	d1f7      	bne.n	13788 <__ieee754_pow+0x98>
   13798:	f1b8 4f80 	cmp.w	r8, #1073741824	; 0x40000000
   1379c:	d06b      	beq.n	13876 <__ieee754_pow+0x186>
   1379e:	469b      	mov	fp, r3
   137a0:	e013      	b.n	137ca <__ieee754_pow+0xda>
   137a2:	ea4f 5229 	mov.w	r2, r9, asr #20
   137a6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
   137aa:	2a14      	cmp	r2, #20
   137ac:	dd38      	ble.n	13820 <__ieee754_pow+0x130>
   137ae:	f1c2 0234 	rsb	r2, r2, #52	; 0x34
   137b2:	fa23 f102 	lsr.w	r1, r3, r2
   137b6:	fa01 f202 	lsl.w	r2, r1, r2
   137ba:	429a      	cmp	r2, r3
   137bc:	d1ea      	bne.n	13794 <__ieee754_pow+0xa4>
   137be:	f001 0101 	and.w	r1, r1, #1
   137c2:	f1c1 0b02 	rsb	fp, r1, #2
   137c6:	2b00      	cmp	r3, #0
   137c8:	d052      	beq.n	13870 <__ieee754_pow+0x180>
   137ca:	ec47 6b10 	vmov	d0, r6, r7
   137ce:	f011 fc83 	bl	250d8 <fabs>
   137d2:	ec51 0b10 	vmov	r0, r1, d0
   137d6:	f1ba 0f00 	cmp.w	sl, #0
   137da:	d17e      	bne.n	138da <__ieee754_pow+0x1ea>
   137dc:	4b58      	ldr	r3, [pc, #352]	; (13940 <__ieee754_pow+0x250>)
   137de:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
   137e2:	429a      	cmp	r2, r3
   137e4:	d001      	beq.n	137ea <__ieee754_pow+0xfa>
   137e6:	2c00      	cmp	r4, #0
   137e8:	d177      	bne.n	138da <__ieee754_pow+0x1ea>
   137ea:	f1b8 0f00 	cmp.w	r8, #0
   137ee:	da05      	bge.n	137fc <__ieee754_pow+0x10c>
   137f0:	4602      	mov	r2, r0
   137f2:	460b      	mov	r3, r1
   137f4:	2000      	movs	r0, #0
   137f6:	4952      	ldr	r1, [pc, #328]	; (13940 <__ieee754_pow+0x250>)
   137f8:	f7ec ff68 	bl	6cc <__aeabi_ddiv>
   137fc:	2d00      	cmp	r5, #0
   137fe:	da9e      	bge.n	1373e <__ieee754_pow+0x4e>
   13800:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
   13804:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
   13808:	ea54 040b 	orrs.w	r4, r4, fp
   1380c:	d15d      	bne.n	138ca <__ieee754_pow+0x1da>
   1380e:	4602      	mov	r2, r0
   13810:	460b      	mov	r3, r1
   13812:	4610      	mov	r0, r2
   13814:	4619      	mov	r1, r3
   13816:	f7ec fc77 	bl	108 <__aeabi_dsub>
   1381a:	4602      	mov	r2, r0
   1381c:	460b      	mov	r3, r1
   1381e:	e03b      	b.n	13898 <__ieee754_pow+0x1a8>
   13820:	2b00      	cmp	r3, #0
   13822:	d1b1      	bne.n	13788 <__ieee754_pow+0x98>
   13824:	f1c2 0214 	rsb	r2, r2, #20
   13828:	fa49 f102 	asr.w	r1, r9, r2
   1382c:	fa01 f202 	lsl.w	r2, r1, r2
   13830:	454a      	cmp	r2, r9
   13832:	4a43      	ldr	r2, [pc, #268]	; (13940 <__ieee754_pow+0x250>)
   13834:	d126      	bne.n	13884 <__ieee754_pow+0x194>
   13836:	4591      	cmp	r9, r2
   13838:	d026      	beq.n	13888 <__ieee754_pow+0x198>
   1383a:	f1b8 4f80 	cmp.w	r8, #1073741824	; 0x40000000
   1383e:	d01a      	beq.n	13876 <__ieee754_pow+0x186>
   13840:	f001 0101 	and.w	r1, r1, #1
   13844:	f1c1 0b02 	rsb	fp, r1, #2
   13848:	e7bf      	b.n	137ca <__ieee754_pow+0xda>
   1384a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
   1384e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   13852:	4333      	orrs	r3, r6
   13854:	f47f af69 	bne.w	1372a <__ieee754_pow+0x3a>
   13858:	4939      	ldr	r1, [pc, #228]	; (13940 <__ieee754_pow+0x250>)
   1385a:	2000      	movs	r0, #0
   1385c:	e76f      	b.n	1373e <__ieee754_pow+0x4e>
   1385e:	f1b8 0f00 	cmp.w	r8, #0
   13862:	f6bf af6a 	bge.w	1373a <__ieee754_pow+0x4a>
   13866:	e9dd 0300 	ldrd	r0, r3, [sp]
   1386a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
   1386e:	e766      	b.n	1373e <__ieee754_pow+0x4e>
   13870:	f1b8 4f80 	cmp.w	r8, #1073741824	; 0x40000000
   13874:	d1a9      	bne.n	137ca <__ieee754_pow+0xda>
   13876:	4632      	mov	r2, r6
   13878:	463b      	mov	r3, r7
   1387a:	4610      	mov	r0, r2
   1387c:	4619      	mov	r1, r3
   1387e:	f7ec fdfb 	bl	478 <__aeabi_dmul>
   13882:	e75c      	b.n	1373e <__ieee754_pow+0x4e>
   13884:	4591      	cmp	r9, r2
   13886:	d187      	bne.n	13798 <__ieee754_pow+0xa8>
   13888:	f1b8 0f00 	cmp.w	r8, #0
   1388c:	f280 841f 	bge.w	140ce <__ieee754_pow+0x9de>
   13890:	492b      	ldr	r1, [pc, #172]	; (13940 <__ieee754_pow+0x250>)
   13892:	4632      	mov	r2, r6
   13894:	463b      	mov	r3, r7
   13896:	2000      	movs	r0, #0
   13898:	f7ec ff18 	bl	6cc <__aeabi_ddiv>
   1389c:	e74f      	b.n	1373e <__ieee754_pow+0x4e>
   1389e:	4a28      	ldr	r2, [pc, #160]	; (13940 <__ieee754_pow+0x250>)
   138a0:	4591      	cmp	r9, r2
   138a2:	d0f1      	beq.n	13888 <__ieee754_pow+0x198>
   138a4:	f1b8 4f80 	cmp.w	r8, #1073741824	; 0x40000000
   138a8:	d0e5      	beq.n	13876 <__ieee754_pow+0x186>
   138aa:	4a26      	ldr	r2, [pc, #152]	; (13944 <__ieee754_pow+0x254>)
   138ac:	4590      	cmp	r8, r2
   138ae:	f47f af76 	bne.w	1379e <__ieee754_pow+0xae>
   138b2:	ec47 6b10 	vmov	d0, r6, r7
   138b6:	b011      	add	sp, #68	; 0x44
   138b8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   138bc:	f00d bc92 	b.w	211e4 <__ieee754_sqrt>
   138c0:	f1b8 4f80 	cmp.w	r8, #1073741824	; 0x40000000
   138c4:	f47f af5a 	bne.w	1377c <__ieee754_pow+0x8c>
   138c8:	e7d5      	b.n	13876 <__ieee754_pow+0x186>
   138ca:	f1bb 0f01 	cmp.w	fp, #1
   138ce:	f47f af36 	bne.w	1373e <__ieee754_pow+0x4e>
   138d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   138d6:	4619      	mov	r1, r3
   138d8:	e731      	b.n	1373e <__ieee754_pow+0x4e>
   138da:	0feb      	lsrs	r3, r5, #31
   138dc:	3b01      	subs	r3, #1
   138de:	930c      	str	r3, [sp, #48]	; 0x30
   138e0:	ea5b 0303 	orrs.w	r3, fp, r3
   138e4:	d102      	bne.n	138ec <__ieee754_pow+0x1fc>
   138e6:	4632      	mov	r2, r6
   138e8:	463b      	mov	r3, r7
   138ea:	e792      	b.n	13812 <__ieee754_pow+0x122>
   138ec:	4b16      	ldr	r3, [pc, #88]	; (13948 <__ieee754_pow+0x258>)
   138ee:	4599      	cmp	r9, r3
   138f0:	f240 80fe 	bls.w	13af0 <__ieee754_pow+0x400>
   138f4:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
   138f8:	4599      	cmp	r9, r3
   138fa:	4b0e      	ldr	r3, [pc, #56]	; (13934 <__ieee754_pow+0x244>)
   138fc:	d909      	bls.n	13912 <__ieee754_pow+0x222>
   138fe:	429c      	cmp	r4, r3
   13900:	d80c      	bhi.n	1391c <__ieee754_pow+0x22c>
   13902:	f1b8 0f00 	cmp.w	r8, #0
   13906:	f6bf af18 	bge.w	1373a <__ieee754_pow+0x4a>
   1390a:	a307      	add	r3, pc, #28	; (adr r3, 13928 <__ieee754_pow+0x238>)
   1390c:	e9d3 2300 	ldrd	r2, r3, [r3]
   13910:	e7b3      	b.n	1387a <__ieee754_pow+0x18a>
   13912:	429c      	cmp	r4, r3
   13914:	d3f5      	bcc.n	13902 <__ieee754_pow+0x212>
   13916:	4b0a      	ldr	r3, [pc, #40]	; (13940 <__ieee754_pow+0x250>)
   13918:	429c      	cmp	r4, r3
   1391a:	d917      	bls.n	1394c <__ieee754_pow+0x25c>
   1391c:	f1b8 0f00 	cmp.w	r8, #0
   13920:	dcf3      	bgt.n	1390a <__ieee754_pow+0x21a>
   13922:	e70a      	b.n	1373a <__ieee754_pow+0x4a>
   13924:	f3af 8000 	nop.w
   13928:	8800759c 	.word	0x8800759c
   1392c:	7e37e43c 	.word	0x7e37e43c
   13930:	7ff00000 	.word	0x7ff00000
   13934:	3fefffff 	.word	0x3fefffff
   13938:	000261f1 	.word	0x000261f1
   1393c:	433fffff 	.word	0x433fffff
   13940:	3ff00000 	.word	0x3ff00000
   13944:	3fe00000 	.word	0x3fe00000
   13948:	41e00000 	.word	0x41e00000
   1394c:	4b64      	ldr	r3, [pc, #400]	; (13ae0 <__ieee754_pow+0x3f0>)
   1394e:	2200      	movs	r2, #0
   13950:	f7ec fbda 	bl	108 <__aeabi_dsub>
   13954:	a356      	add	r3, pc, #344	; (adr r3, 13ab0 <__ieee754_pow+0x3c0>)
   13956:	e9d3 2300 	ldrd	r2, r3, [r3]
   1395a:	4604      	mov	r4, r0
   1395c:	460d      	mov	r5, r1
   1395e:	f7ec fd8b 	bl	478 <__aeabi_dmul>
   13962:	a355      	add	r3, pc, #340	; (adr r3, 13ab8 <__ieee754_pow+0x3c8>)
   13964:	e9d3 2300 	ldrd	r2, r3, [r3]
   13968:	4606      	mov	r6, r0
   1396a:	460f      	mov	r7, r1
   1396c:	4620      	mov	r0, r4
   1396e:	4629      	mov	r1, r5
   13970:	f7ec fd82 	bl	478 <__aeabi_dmul>
   13974:	4b5b      	ldr	r3, [pc, #364]	; (13ae4 <__ieee754_pow+0x3f4>)
   13976:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1397a:	2200      	movs	r2, #0
   1397c:	4620      	mov	r0, r4
   1397e:	4629      	mov	r1, r5
   13980:	f7ec fd7a 	bl	478 <__aeabi_dmul>
   13984:	4602      	mov	r2, r0
   13986:	460b      	mov	r3, r1
   13988:	a14d      	add	r1, pc, #308	; (adr r1, 13ac0 <__ieee754_pow+0x3d0>)
   1398a:	e9d1 0100 	ldrd	r0, r1, [r1]
   1398e:	f7ec fbbb 	bl	108 <__aeabi_dsub>
   13992:	4622      	mov	r2, r4
   13994:	462b      	mov	r3, r5
   13996:	f7ec fd6f 	bl	478 <__aeabi_dmul>
   1399a:	4602      	mov	r2, r0
   1399c:	460b      	mov	r3, r1
   1399e:	2000      	movs	r0, #0
   139a0:	4951      	ldr	r1, [pc, #324]	; (13ae8 <__ieee754_pow+0x3f8>)
   139a2:	f7ec fbb1 	bl	108 <__aeabi_dsub>
   139a6:	4622      	mov	r2, r4
   139a8:	4680      	mov	r8, r0
   139aa:	4689      	mov	r9, r1
   139ac:	462b      	mov	r3, r5
   139ae:	4620      	mov	r0, r4
   139b0:	4629      	mov	r1, r5
   139b2:	f7ec fd61 	bl	478 <__aeabi_dmul>
   139b6:	4602      	mov	r2, r0
   139b8:	460b      	mov	r3, r1
   139ba:	4640      	mov	r0, r8
   139bc:	4649      	mov	r1, r9
   139be:	f7ec fd5b 	bl	478 <__aeabi_dmul>
   139c2:	a341      	add	r3, pc, #260	; (adr r3, 13ac8 <__ieee754_pow+0x3d8>)
   139c4:	e9d3 2300 	ldrd	r2, r3, [r3]
   139c8:	f7ec fd56 	bl	478 <__aeabi_dmul>
   139cc:	4602      	mov	r2, r0
   139ce:	460b      	mov	r3, r1
   139d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   139d4:	f7ec fb98 	bl	108 <__aeabi_dsub>
   139d8:	4602      	mov	r2, r0
   139da:	460b      	mov	r3, r1
   139dc:	4680      	mov	r8, r0
   139de:	4689      	mov	r9, r1
   139e0:	4630      	mov	r0, r6
   139e2:	4639      	mov	r1, r7
   139e4:	f7ec fb92 	bl	10c <__adddf3>
   139e8:	2400      	movs	r4, #0
   139ea:	4632      	mov	r2, r6
   139ec:	463b      	mov	r3, r7
   139ee:	4620      	mov	r0, r4
   139f0:	460d      	mov	r5, r1
   139f2:	f7ec fb89 	bl	108 <__aeabi_dsub>
   139f6:	4602      	mov	r2, r0
   139f8:	460b      	mov	r3, r1
   139fa:	4640      	mov	r0, r8
   139fc:	4649      	mov	r1, r9
   139fe:	f7ec fb83 	bl	108 <__aeabi_dsub>
   13a02:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   13a04:	f10b 33ff 	add.w	r3, fp, #4294967295
   13a08:	4313      	orrs	r3, r2
   13a0a:	4606      	mov	r6, r0
   13a0c:	460f      	mov	r7, r1
   13a0e:	f000 822b 	beq.w	13e68 <__ieee754_pow+0x778>
   13a12:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 13ad0 <__ieee754_pow+0x3e0>
   13a16:	e9dd 2300 	ldrd	r2, r3, [sp]
   13a1a:	e9cd 2304 	strd	r2, r3, [sp, #16]
   13a1e:	2300      	movs	r3, #0
   13a20:	9304      	str	r3, [sp, #16]
   13a22:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
   13a26:	e9dd 0100 	ldrd	r0, r1, [sp]
   13a2a:	465b      	mov	r3, fp
   13a2c:	4652      	mov	r2, sl
   13a2e:	ed8d 7b02 	vstr	d7, [sp, #8]
   13a32:	f7ec fb69 	bl	108 <__aeabi_dsub>
   13a36:	4622      	mov	r2, r4
   13a38:	462b      	mov	r3, r5
   13a3a:	f7ec fd1d 	bl	478 <__aeabi_dmul>
   13a3e:	e9dd 2300 	ldrd	r2, r3, [sp]
   13a42:	4680      	mov	r8, r0
   13a44:	4689      	mov	r9, r1
   13a46:	4630      	mov	r0, r6
   13a48:	4639      	mov	r1, r7
   13a4a:	f7ec fd15 	bl	478 <__aeabi_dmul>
   13a4e:	4602      	mov	r2, r0
   13a50:	460b      	mov	r3, r1
   13a52:	4640      	mov	r0, r8
   13a54:	4649      	mov	r1, r9
   13a56:	f7ec fb59 	bl	10c <__adddf3>
   13a5a:	465b      	mov	r3, fp
   13a5c:	4606      	mov	r6, r0
   13a5e:	460f      	mov	r7, r1
   13a60:	4652      	mov	r2, sl
   13a62:	4620      	mov	r0, r4
   13a64:	4629      	mov	r1, r5
   13a66:	f7ec fd07 	bl	478 <__aeabi_dmul>
   13a6a:	460b      	mov	r3, r1
   13a6c:	4602      	mov	r2, r0
   13a6e:	4680      	mov	r8, r0
   13a70:	4689      	mov	r9, r1
   13a72:	4630      	mov	r0, r6
   13a74:	4639      	mov	r1, r7
   13a76:	f7ec fb49 	bl	10c <__adddf3>
   13a7a:	4b1c      	ldr	r3, [pc, #112]	; (13aec <__ieee754_pow+0x3fc>)
   13a7c:	4299      	cmp	r1, r3
   13a7e:	4604      	mov	r4, r0
   13a80:	460d      	mov	r5, r1
   13a82:	468b      	mov	fp, r1
   13a84:	f340 820e 	ble.w	13ea4 <__ieee754_pow+0x7b4>
   13a88:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
   13a8c:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
   13a90:	4303      	orrs	r3, r0
   13a92:	f000 81ec 	beq.w	13e6e <__ieee754_pow+0x77e>
   13a96:	a310      	add	r3, pc, #64	; (adr r3, 13ad8 <__ieee754_pow+0x3e8>)
   13a98:	e9d3 2300 	ldrd	r2, r3, [r3]
   13a9c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   13aa0:	f7ec fcea 	bl	478 <__aeabi_dmul>
   13aa4:	a30c      	add	r3, pc, #48	; (adr r3, 13ad8 <__ieee754_pow+0x3e8>)
   13aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
   13aaa:	e6e8      	b.n	1387e <__ieee754_pow+0x18e>
   13aac:	f3af 8000 	nop.w
   13ab0:	60000000 	.word	0x60000000
   13ab4:	3ff71547 	.word	0x3ff71547
   13ab8:	f85ddf44 	.word	0xf85ddf44
   13abc:	3e54ae0b 	.word	0x3e54ae0b
   13ac0:	55555555 	.word	0x55555555
   13ac4:	3fd55555 	.word	0x3fd55555
   13ac8:	652b82fe 	.word	0x652b82fe
   13acc:	3ff71547 	.word	0x3ff71547
   13ad0:	00000000 	.word	0x00000000
   13ad4:	3ff00000 	.word	0x3ff00000
   13ad8:	8800759c 	.word	0x8800759c
   13adc:	7e37e43c 	.word	0x7e37e43c
   13ae0:	3ff00000 	.word	0x3ff00000
   13ae4:	3fd00000 	.word	0x3fd00000
   13ae8:	3fe00000 	.word	0x3fe00000
   13aec:	408fffff 	.word	0x408fffff
   13af0:	4bd1      	ldr	r3, [pc, #836]	; (13e38 <__ieee754_pow+0x748>)
   13af2:	402b      	ands	r3, r5
   13af4:	2200      	movs	r2, #0
   13af6:	b92b      	cbnz	r3, 13b04 <__ieee754_pow+0x414>
   13af8:	4bd0      	ldr	r3, [pc, #832]	; (13e3c <__ieee754_pow+0x74c>)
   13afa:	f7ec fcbd 	bl	478 <__aeabi_dmul>
   13afe:	f06f 0234 	mvn.w	r2, #52	; 0x34
   13b02:	9102      	str	r1, [sp, #8]
   13b04:	9b02      	ldr	r3, [sp, #8]
   13b06:	151b      	asrs	r3, r3, #20
   13b08:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   13b0c:	4413      	add	r3, r2
   13b0e:	9309      	str	r3, [sp, #36]	; 0x24
   13b10:	9b02      	ldr	r3, [sp, #8]
   13b12:	f3c3 0a13 	ubfx	sl, r3, #0, #20
   13b16:	4bca      	ldr	r3, [pc, #808]	; (13e40 <__ieee754_pow+0x750>)
   13b18:	f04a 557f 	orr.w	r5, sl, #1069547520	; 0x3fc00000
   13b1c:	459a      	cmp	sl, r3
   13b1e:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
   13b22:	dd08      	ble.n	13b36 <__ieee754_pow+0x446>
   13b24:	4bc7      	ldr	r3, [pc, #796]	; (13e44 <__ieee754_pow+0x754>)
   13b26:	459a      	cmp	sl, r3
   13b28:	f340 819b 	ble.w	13e62 <__ieee754_pow+0x772>
   13b2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   13b2e:	3301      	adds	r3, #1
   13b30:	9309      	str	r3, [sp, #36]	; 0x24
   13b32:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
   13b36:	f04f 0a00 	mov.w	sl, #0
   13b3a:	ea4f 03ca 	mov.w	r3, sl, lsl #3
   13b3e:	930d      	str	r3, [sp, #52]	; 0x34
   13b40:	4bc1      	ldr	r3, [pc, #772]	; (13e48 <__ieee754_pow+0x758>)
   13b42:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
   13b46:	ed93 7b00 	vldr	d7, [r3]
   13b4a:	4629      	mov	r1, r5
   13b4c:	ec53 2b17 	vmov	r2, r3, d7
   13b50:	ed8d 7b06 	vstr	d7, [sp, #24]
   13b54:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   13b58:	f7ec fad6 	bl	108 <__aeabi_dsub>
   13b5c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   13b60:	4606      	mov	r6, r0
   13b62:	460f      	mov	r7, r1
   13b64:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   13b68:	f7ec fad0 	bl	10c <__adddf3>
   13b6c:	4602      	mov	r2, r0
   13b6e:	460b      	mov	r3, r1
   13b70:	2000      	movs	r0, #0
   13b72:	49b6      	ldr	r1, [pc, #728]	; (13e4c <__ieee754_pow+0x75c>)
   13b74:	f7ec fdaa 	bl	6cc <__aeabi_ddiv>
   13b78:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
   13b7c:	4602      	mov	r2, r0
   13b7e:	460b      	mov	r3, r1
   13b80:	4630      	mov	r0, r6
   13b82:	4639      	mov	r1, r7
   13b84:	f7ec fc78 	bl	478 <__aeabi_dmul>
   13b88:	e9cd 0104 	strd	r0, r1, [sp, #16]
   13b8c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
   13b90:	e9cd 3402 	strd	r3, r4, [sp, #8]
   13b94:	2300      	movs	r3, #0
   13b96:	9302      	str	r3, [sp, #8]
   13b98:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
   13b9c:	106d      	asrs	r5, r5, #1
   13b9e:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
   13ba2:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
   13ba6:	2200      	movs	r2, #0
   13ba8:	eb05 438a 	add.w	r3, r5, sl, lsl #18
   13bac:	4640      	mov	r0, r8
   13bae:	4649      	mov	r1, r9
   13bb0:	4614      	mov	r4, r2
   13bb2:	461d      	mov	r5, r3
   13bb4:	f7ec fc60 	bl	478 <__aeabi_dmul>
   13bb8:	4602      	mov	r2, r0
   13bba:	460b      	mov	r3, r1
   13bbc:	4630      	mov	r0, r6
   13bbe:	4639      	mov	r1, r7
   13bc0:	f7ec faa2 	bl	108 <__aeabi_dsub>
   13bc4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   13bc8:	4606      	mov	r6, r0
   13bca:	460f      	mov	r7, r1
   13bcc:	4620      	mov	r0, r4
   13bce:	4629      	mov	r1, r5
   13bd0:	f7ec fa9a 	bl	108 <__aeabi_dsub>
   13bd4:	4602      	mov	r2, r0
   13bd6:	460b      	mov	r3, r1
   13bd8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   13bdc:	f7ec fa94 	bl	108 <__aeabi_dsub>
   13be0:	4642      	mov	r2, r8
   13be2:	464b      	mov	r3, r9
   13be4:	f7ec fc48 	bl	478 <__aeabi_dmul>
   13be8:	4602      	mov	r2, r0
   13bea:	460b      	mov	r3, r1
   13bec:	4630      	mov	r0, r6
   13bee:	4639      	mov	r1, r7
   13bf0:	f7ec fa8a 	bl	108 <__aeabi_dsub>
   13bf4:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   13bf8:	f7ec fc3e 	bl	478 <__aeabi_dmul>
   13bfc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   13c00:	e9cd 0106 	strd	r0, r1, [sp, #24]
   13c04:	4610      	mov	r0, r2
   13c06:	4619      	mov	r1, r3
   13c08:	f7ec fc36 	bl	478 <__aeabi_dmul>
   13c0c:	a378      	add	r3, pc, #480	; (adr r3, 13df0 <__ieee754_pow+0x700>)
   13c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
   13c12:	4604      	mov	r4, r0
   13c14:	460d      	mov	r5, r1
   13c16:	f7ec fc2f 	bl	478 <__aeabi_dmul>
   13c1a:	a377      	add	r3, pc, #476	; (adr r3, 13df8 <__ieee754_pow+0x708>)
   13c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
   13c20:	f7ec fa74 	bl	10c <__adddf3>
   13c24:	4622      	mov	r2, r4
   13c26:	462b      	mov	r3, r5
   13c28:	f7ec fc26 	bl	478 <__aeabi_dmul>
   13c2c:	a374      	add	r3, pc, #464	; (adr r3, 13e00 <__ieee754_pow+0x710>)
   13c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
   13c32:	f7ec fa6b 	bl	10c <__adddf3>
   13c36:	4622      	mov	r2, r4
   13c38:	462b      	mov	r3, r5
   13c3a:	f7ec fc1d 	bl	478 <__aeabi_dmul>
   13c3e:	a372      	add	r3, pc, #456	; (adr r3, 13e08 <__ieee754_pow+0x718>)
   13c40:	e9d3 2300 	ldrd	r2, r3, [r3]
   13c44:	f7ec fa62 	bl	10c <__adddf3>
   13c48:	4622      	mov	r2, r4
   13c4a:	462b      	mov	r3, r5
   13c4c:	f7ec fc14 	bl	478 <__aeabi_dmul>
   13c50:	a36f      	add	r3, pc, #444	; (adr r3, 13e10 <__ieee754_pow+0x720>)
   13c52:	e9d3 2300 	ldrd	r2, r3, [r3]
   13c56:	f7ec fa59 	bl	10c <__adddf3>
   13c5a:	4622      	mov	r2, r4
   13c5c:	462b      	mov	r3, r5
   13c5e:	f7ec fc0b 	bl	478 <__aeabi_dmul>
   13c62:	a36d      	add	r3, pc, #436	; (adr r3, 13e18 <__ieee754_pow+0x728>)
   13c64:	e9d3 2300 	ldrd	r2, r3, [r3]
   13c68:	f7ec fa50 	bl	10c <__adddf3>
   13c6c:	4622      	mov	r2, r4
   13c6e:	4606      	mov	r6, r0
   13c70:	460f      	mov	r7, r1
   13c72:	462b      	mov	r3, r5
   13c74:	4620      	mov	r0, r4
   13c76:	4629      	mov	r1, r5
   13c78:	f7ec fbfe 	bl	478 <__aeabi_dmul>
   13c7c:	4602      	mov	r2, r0
   13c7e:	460b      	mov	r3, r1
   13c80:	4630      	mov	r0, r6
   13c82:	4639      	mov	r1, r7
   13c84:	f7ec fbf8 	bl	478 <__aeabi_dmul>
   13c88:	4642      	mov	r2, r8
   13c8a:	4604      	mov	r4, r0
   13c8c:	460d      	mov	r5, r1
   13c8e:	464b      	mov	r3, r9
   13c90:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   13c94:	f7ec fa3a 	bl	10c <__adddf3>
   13c98:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   13c9c:	f7ec fbec 	bl	478 <__aeabi_dmul>
   13ca0:	4622      	mov	r2, r4
   13ca2:	462b      	mov	r3, r5
   13ca4:	f7ec fa32 	bl	10c <__adddf3>
   13ca8:	4642      	mov	r2, r8
   13caa:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   13cae:	464b      	mov	r3, r9
   13cb0:	4640      	mov	r0, r8
   13cb2:	4649      	mov	r1, r9
   13cb4:	f7ec fbe0 	bl	478 <__aeabi_dmul>
   13cb8:	4b65      	ldr	r3, [pc, #404]	; (13e50 <__ieee754_pow+0x760>)
   13cba:	2200      	movs	r2, #0
   13cbc:	4606      	mov	r6, r0
   13cbe:	460f      	mov	r7, r1
   13cc0:	f7ec fa24 	bl	10c <__adddf3>
   13cc4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   13cc8:	f7ec fa20 	bl	10c <__adddf3>
   13ccc:	2400      	movs	r4, #0
   13cce:	460d      	mov	r5, r1
   13cd0:	4622      	mov	r2, r4
   13cd2:	460b      	mov	r3, r1
   13cd4:	4640      	mov	r0, r8
   13cd6:	4649      	mov	r1, r9
   13cd8:	f7ec fbce 	bl	478 <__aeabi_dmul>
   13cdc:	4b5c      	ldr	r3, [pc, #368]	; (13e50 <__ieee754_pow+0x760>)
   13cde:	4680      	mov	r8, r0
   13ce0:	4689      	mov	r9, r1
   13ce2:	2200      	movs	r2, #0
   13ce4:	4620      	mov	r0, r4
   13ce6:	4629      	mov	r1, r5
   13ce8:	f7ec fa0e 	bl	108 <__aeabi_dsub>
   13cec:	4632      	mov	r2, r6
   13cee:	463b      	mov	r3, r7
   13cf0:	f7ec fa0a 	bl	108 <__aeabi_dsub>
   13cf4:	4602      	mov	r2, r0
   13cf6:	460b      	mov	r3, r1
   13cf8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   13cfc:	f7ec fa04 	bl	108 <__aeabi_dsub>
   13d00:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   13d04:	f7ec fbb8 	bl	478 <__aeabi_dmul>
   13d08:	4622      	mov	r2, r4
   13d0a:	4606      	mov	r6, r0
   13d0c:	460f      	mov	r7, r1
   13d0e:	462b      	mov	r3, r5
   13d10:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   13d14:	f7ec fbb0 	bl	478 <__aeabi_dmul>
   13d18:	4602      	mov	r2, r0
   13d1a:	460b      	mov	r3, r1
   13d1c:	4630      	mov	r0, r6
   13d1e:	4639      	mov	r1, r7
   13d20:	f7ec f9f4 	bl	10c <__adddf3>
   13d24:	4606      	mov	r6, r0
   13d26:	460f      	mov	r7, r1
   13d28:	4602      	mov	r2, r0
   13d2a:	460b      	mov	r3, r1
   13d2c:	4640      	mov	r0, r8
   13d2e:	4649      	mov	r1, r9
   13d30:	f7ec f9ec 	bl	10c <__adddf3>
   13d34:	2400      	movs	r4, #0
   13d36:	a33a      	add	r3, pc, #232	; (adr r3, 13e20 <__ieee754_pow+0x730>)
   13d38:	e9d3 2300 	ldrd	r2, r3, [r3]
   13d3c:	4620      	mov	r0, r4
   13d3e:	460d      	mov	r5, r1
   13d40:	f7ec fb9a 	bl	478 <__aeabi_dmul>
   13d44:	4642      	mov	r2, r8
   13d46:	e9cd 0104 	strd	r0, r1, [sp, #16]
   13d4a:	464b      	mov	r3, r9
   13d4c:	4620      	mov	r0, r4
   13d4e:	4629      	mov	r1, r5
   13d50:	f7ec f9da 	bl	108 <__aeabi_dsub>
   13d54:	4602      	mov	r2, r0
   13d56:	460b      	mov	r3, r1
   13d58:	4630      	mov	r0, r6
   13d5a:	4639      	mov	r1, r7
   13d5c:	f7ec f9d4 	bl	108 <__aeabi_dsub>
   13d60:	a331      	add	r3, pc, #196	; (adr r3, 13e28 <__ieee754_pow+0x738>)
   13d62:	e9d3 2300 	ldrd	r2, r3, [r3]
   13d66:	f7ec fb87 	bl	478 <__aeabi_dmul>
   13d6a:	a331      	add	r3, pc, #196	; (adr r3, 13e30 <__ieee754_pow+0x740>)
   13d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
   13d70:	4606      	mov	r6, r0
   13d72:	460f      	mov	r7, r1
   13d74:	4620      	mov	r0, r4
   13d76:	4629      	mov	r1, r5
   13d78:	f7ec fb7e 	bl	478 <__aeabi_dmul>
   13d7c:	4602      	mov	r2, r0
   13d7e:	460b      	mov	r3, r1
   13d80:	4630      	mov	r0, r6
   13d82:	4639      	mov	r1, r7
   13d84:	f7ec f9c2 	bl	10c <__adddf3>
   13d88:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   13d8a:	4b32      	ldr	r3, [pc, #200]	; (13e54 <__ieee754_pow+0x764>)
   13d8c:	4413      	add	r3, r2
   13d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
   13d92:	f7ec f9bb 	bl	10c <__adddf3>
   13d96:	e9cd 0106 	strd	r0, r1, [sp, #24]
   13d9a:	9809      	ldr	r0, [sp, #36]	; 0x24
   13d9c:	f7ec fb02 	bl	3a4 <__aeabi_i2d>
   13da0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   13da2:	4b2d      	ldr	r3, [pc, #180]	; (13e58 <__ieee754_pow+0x768>)
   13da4:	4413      	add	r3, r2
   13da6:	e9d3 8900 	ldrd	r8, r9, [r3]
   13daa:	4606      	mov	r6, r0
   13dac:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   13db0:	460f      	mov	r7, r1
   13db2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   13db6:	f7ec f9a9 	bl	10c <__adddf3>
   13dba:	4642      	mov	r2, r8
   13dbc:	464b      	mov	r3, r9
   13dbe:	f7ec f9a5 	bl	10c <__adddf3>
   13dc2:	4632      	mov	r2, r6
   13dc4:	463b      	mov	r3, r7
   13dc6:	f7ec f9a1 	bl	10c <__adddf3>
   13dca:	2400      	movs	r4, #0
   13dcc:	4632      	mov	r2, r6
   13dce:	463b      	mov	r3, r7
   13dd0:	4620      	mov	r0, r4
   13dd2:	460d      	mov	r5, r1
   13dd4:	f7ec f998 	bl	108 <__aeabi_dsub>
   13dd8:	4642      	mov	r2, r8
   13dda:	464b      	mov	r3, r9
   13ddc:	f7ec f994 	bl	108 <__aeabi_dsub>
   13de0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   13de4:	f7ec f990 	bl	108 <__aeabi_dsub>
   13de8:	4602      	mov	r2, r0
   13dea:	460b      	mov	r3, r1
   13dec:	e036      	b.n	13e5c <__ieee754_pow+0x76c>
   13dee:	bf00      	nop
   13df0:	4a454eef 	.word	0x4a454eef
   13df4:	3fca7e28 	.word	0x3fca7e28
   13df8:	93c9db65 	.word	0x93c9db65
   13dfc:	3fcd864a 	.word	0x3fcd864a
   13e00:	a91d4101 	.word	0xa91d4101
   13e04:	3fd17460 	.word	0x3fd17460
   13e08:	518f264d 	.word	0x518f264d
   13e0c:	3fd55555 	.word	0x3fd55555
   13e10:	db6fabff 	.word	0xdb6fabff
   13e14:	3fdb6db6 	.word	0x3fdb6db6
   13e18:	33333303 	.word	0x33333303
   13e1c:	3fe33333 	.word	0x3fe33333
   13e20:	e0000000 	.word	0xe0000000
   13e24:	3feec709 	.word	0x3feec709
   13e28:	dc3a03fd 	.word	0xdc3a03fd
   13e2c:	3feec709 	.word	0x3feec709
   13e30:	145b01f5 	.word	0x145b01f5
   13e34:	be3e2fe0 	.word	0xbe3e2fe0
   13e38:	7ff00000 	.word	0x7ff00000
   13e3c:	43400000 	.word	0x43400000
   13e40:	0003988e 	.word	0x0003988e
   13e44:	000bb679 	.word	0x000bb679
   13e48:	000256d8 	.word	0x000256d8
   13e4c:	3ff00000 	.word	0x3ff00000
   13e50:	40080000 	.word	0x40080000
   13e54:	000256b8 	.word	0x000256b8
   13e58:	000256c8 	.word	0x000256c8
   13e5c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   13e60:	e5cd      	b.n	139fe <__ieee754_pow+0x30e>
   13e62:	f04f 0a01 	mov.w	sl, #1
   13e66:	e668      	b.n	13b3a <__ieee754_pow+0x44a>
   13e68:	ed9f 7b9b 	vldr	d7, [pc, #620]	; 140d8 <__ieee754_pow+0x9e8>
   13e6c:	e5d3      	b.n	13a16 <__ieee754_pow+0x326>
   13e6e:	a3b3      	add	r3, pc, #716	; (adr r3, 1413c <__ieee754_pow+0xa4c>)
   13e70:	e9d3 2300 	ldrd	r2, r3, [r3]
   13e74:	4630      	mov	r0, r6
   13e76:	4639      	mov	r1, r7
   13e78:	f7ec f948 	bl	10c <__adddf3>
   13e7c:	4642      	mov	r2, r8
   13e7e:	e9cd 0100 	strd	r0, r1, [sp]
   13e82:	464b      	mov	r3, r9
   13e84:	4620      	mov	r0, r4
   13e86:	4629      	mov	r1, r5
   13e88:	f7ec f93e 	bl	108 <__aeabi_dsub>
   13e8c:	4602      	mov	r2, r0
   13e8e:	460b      	mov	r3, r1
   13e90:	e9dd 0100 	ldrd	r0, r1, [sp]
   13e94:	f7ec fd80 	bl	998 <__aeabi_dcmpgt>
   13e98:	2800      	cmp	r0, #0
   13e9a:	f47f adfc 	bne.w	13a96 <__ieee754_pow+0x3a6>
   13e9e:	f240 4309 	movw	r3, #1033	; 0x409
   13ea2:	e023      	b.n	13eec <__ieee754_pow+0x7fc>
   13ea4:	4ca0      	ldr	r4, [pc, #640]	; (14128 <__ieee754_pow+0xa38>)
   13ea6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   13eaa:	42a3      	cmp	r3, r4
   13eac:	d919      	bls.n	13ee2 <__ieee754_pow+0x7f2>
   13eae:	4b9f      	ldr	r3, [pc, #636]	; (1412c <__ieee754_pow+0xa3c>)
   13eb0:	440b      	add	r3, r1
   13eb2:	4303      	orrs	r3, r0
   13eb4:	d00a      	beq.n	13ecc <__ieee754_pow+0x7dc>
   13eb6:	a38a      	add	r3, pc, #552	; (adr r3, 140e0 <__ieee754_pow+0x9f0>)
   13eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
   13ebc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   13ec0:	f7ec fada 	bl	478 <__aeabi_dmul>
   13ec4:	a386      	add	r3, pc, #536	; (adr r3, 140e0 <__ieee754_pow+0x9f0>)
   13ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
   13eca:	e4d8      	b.n	1387e <__ieee754_pow+0x18e>
   13ecc:	4642      	mov	r2, r8
   13ece:	464b      	mov	r3, r9
   13ed0:	f7ec f91a 	bl	108 <__aeabi_dsub>
   13ed4:	4632      	mov	r2, r6
   13ed6:	463b      	mov	r3, r7
   13ed8:	f7ec fd54 	bl	984 <__aeabi_dcmpge>
   13edc:	2800      	cmp	r0, #0
   13ede:	d0de      	beq.n	13e9e <__ieee754_pow+0x7ae>
   13ee0:	e7e9      	b.n	13eb6 <__ieee754_pow+0x7c6>
   13ee2:	4a93      	ldr	r2, [pc, #588]	; (14130 <__ieee754_pow+0xa40>)
   13ee4:	4293      	cmp	r3, r2
   13ee6:	f240 80e7 	bls.w	140b8 <__ieee754_pow+0x9c8>
   13eea:	151b      	asrs	r3, r3, #20
   13eec:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   13ef0:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
   13ef4:	fa4a fa03 	asr.w	sl, sl, r3
   13ef8:	44da      	add	sl, fp
   13efa:	f3ca 510a 	ubfx	r1, sl, #20, #11
   13efe:	488d      	ldr	r0, [pc, #564]	; (14134 <__ieee754_pow+0xa44>)
   13f00:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
   13f04:	4108      	asrs	r0, r1
   13f06:	ea00 030a 	and.w	r3, r0, sl
   13f0a:	f3ca 0a13 	ubfx	sl, sl, #0, #20
   13f0e:	f1c1 0114 	rsb	r1, r1, #20
   13f12:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
   13f16:	fa4a fa01 	asr.w	sl, sl, r1
   13f1a:	f1bb 0f00 	cmp.w	fp, #0
   13f1e:	4640      	mov	r0, r8
   13f20:	4649      	mov	r1, r9
   13f22:	f04f 0200 	mov.w	r2, #0
   13f26:	bfb8      	it	lt
   13f28:	f1ca 0a00 	rsblt	sl, sl, #0
   13f2c:	f7ec f8ec 	bl	108 <__aeabi_dsub>
   13f30:	4680      	mov	r8, r0
   13f32:	4689      	mov	r9, r1
   13f34:	4632      	mov	r2, r6
   13f36:	463b      	mov	r3, r7
   13f38:	4640      	mov	r0, r8
   13f3a:	4649      	mov	r1, r9
   13f3c:	f7ec f8e6 	bl	10c <__adddf3>
   13f40:	2400      	movs	r4, #0
   13f42:	a369      	add	r3, pc, #420	; (adr r3, 140e8 <__ieee754_pow+0x9f8>)
   13f44:	e9d3 2300 	ldrd	r2, r3, [r3]
   13f48:	4620      	mov	r0, r4
   13f4a:	460d      	mov	r5, r1
   13f4c:	f7ec fa94 	bl	478 <__aeabi_dmul>
   13f50:	4642      	mov	r2, r8
   13f52:	e9cd 0100 	strd	r0, r1, [sp]
   13f56:	464b      	mov	r3, r9
   13f58:	4620      	mov	r0, r4
   13f5a:	4629      	mov	r1, r5
   13f5c:	f7ec f8d4 	bl	108 <__aeabi_dsub>
   13f60:	4602      	mov	r2, r0
   13f62:	460b      	mov	r3, r1
   13f64:	4630      	mov	r0, r6
   13f66:	4639      	mov	r1, r7
   13f68:	f7ec f8ce 	bl	108 <__aeabi_dsub>
   13f6c:	a360      	add	r3, pc, #384	; (adr r3, 140f0 <__ieee754_pow+0xa00>)
   13f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
   13f72:	f7ec fa81 	bl	478 <__aeabi_dmul>
   13f76:	a360      	add	r3, pc, #384	; (adr r3, 140f8 <__ieee754_pow+0xa08>)
   13f78:	e9d3 2300 	ldrd	r2, r3, [r3]
   13f7c:	4680      	mov	r8, r0
   13f7e:	4689      	mov	r9, r1
   13f80:	4620      	mov	r0, r4
   13f82:	4629      	mov	r1, r5
   13f84:	f7ec fa78 	bl	478 <__aeabi_dmul>
   13f88:	4602      	mov	r2, r0
   13f8a:	460b      	mov	r3, r1
   13f8c:	4640      	mov	r0, r8
   13f8e:	4649      	mov	r1, r9
   13f90:	f7ec f8bc 	bl	10c <__adddf3>
   13f94:	4604      	mov	r4, r0
   13f96:	460d      	mov	r5, r1
   13f98:	4602      	mov	r2, r0
   13f9a:	460b      	mov	r3, r1
   13f9c:	e9dd 0100 	ldrd	r0, r1, [sp]
   13fa0:	f7ec f8b4 	bl	10c <__adddf3>
   13fa4:	e9dd 2300 	ldrd	r2, r3, [sp]
   13fa8:	4680      	mov	r8, r0
   13faa:	4689      	mov	r9, r1
   13fac:	f7ec f8ac 	bl	108 <__aeabi_dsub>
   13fb0:	4602      	mov	r2, r0
   13fb2:	460b      	mov	r3, r1
   13fb4:	4620      	mov	r0, r4
   13fb6:	4629      	mov	r1, r5
   13fb8:	f7ec f8a6 	bl	108 <__aeabi_dsub>
   13fbc:	4642      	mov	r2, r8
   13fbe:	4606      	mov	r6, r0
   13fc0:	460f      	mov	r7, r1
   13fc2:	464b      	mov	r3, r9
   13fc4:	4640      	mov	r0, r8
   13fc6:	4649      	mov	r1, r9
   13fc8:	f7ec fa56 	bl	478 <__aeabi_dmul>
   13fcc:	a34c      	add	r3, pc, #304	; (adr r3, 14100 <__ieee754_pow+0xa10>)
   13fce:	e9d3 2300 	ldrd	r2, r3, [r3]
   13fd2:	4604      	mov	r4, r0
   13fd4:	460d      	mov	r5, r1
   13fd6:	f7ec fa4f 	bl	478 <__aeabi_dmul>
   13fda:	a34b      	add	r3, pc, #300	; (adr r3, 14108 <__ieee754_pow+0xa18>)
   13fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
   13fe0:	f7ec f892 	bl	108 <__aeabi_dsub>
   13fe4:	4622      	mov	r2, r4
   13fe6:	462b      	mov	r3, r5
   13fe8:	f7ec fa46 	bl	478 <__aeabi_dmul>
   13fec:	a348      	add	r3, pc, #288	; (adr r3, 14110 <__ieee754_pow+0xa20>)
   13fee:	e9d3 2300 	ldrd	r2, r3, [r3]
   13ff2:	f7ec f88b 	bl	10c <__adddf3>
   13ff6:	4622      	mov	r2, r4
   13ff8:	462b      	mov	r3, r5
   13ffa:	f7ec fa3d 	bl	478 <__aeabi_dmul>
   13ffe:	a346      	add	r3, pc, #280	; (adr r3, 14118 <__ieee754_pow+0xa28>)
   14000:	e9d3 2300 	ldrd	r2, r3, [r3]
   14004:	f7ec f880 	bl	108 <__aeabi_dsub>
   14008:	4622      	mov	r2, r4
   1400a:	462b      	mov	r3, r5
   1400c:	f7ec fa34 	bl	478 <__aeabi_dmul>
   14010:	a343      	add	r3, pc, #268	; (adr r3, 14120 <__ieee754_pow+0xa30>)
   14012:	e9d3 2300 	ldrd	r2, r3, [r3]
   14016:	f7ec f879 	bl	10c <__adddf3>
   1401a:	4622      	mov	r2, r4
   1401c:	462b      	mov	r3, r5
   1401e:	f7ec fa2b 	bl	478 <__aeabi_dmul>
   14022:	4602      	mov	r2, r0
   14024:	460b      	mov	r3, r1
   14026:	4640      	mov	r0, r8
   14028:	4649      	mov	r1, r9
   1402a:	f7ec f86d 	bl	108 <__aeabi_dsub>
   1402e:	4604      	mov	r4, r0
   14030:	460d      	mov	r5, r1
   14032:	4602      	mov	r2, r0
   14034:	460b      	mov	r3, r1
   14036:	4640      	mov	r0, r8
   14038:	4649      	mov	r1, r9
   1403a:	f7ec fa1d 	bl	478 <__aeabi_dmul>
   1403e:	2200      	movs	r2, #0
   14040:	e9cd 0100 	strd	r0, r1, [sp]
   14044:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   14048:	4620      	mov	r0, r4
   1404a:	4629      	mov	r1, r5
   1404c:	f7ec f85c 	bl	108 <__aeabi_dsub>
   14050:	4602      	mov	r2, r0
   14052:	460b      	mov	r3, r1
   14054:	e9dd 0100 	ldrd	r0, r1, [sp]
   14058:	f7ec fb38 	bl	6cc <__aeabi_ddiv>
   1405c:	4632      	mov	r2, r6
   1405e:	4604      	mov	r4, r0
   14060:	460d      	mov	r5, r1
   14062:	463b      	mov	r3, r7
   14064:	4640      	mov	r0, r8
   14066:	4649      	mov	r1, r9
   14068:	f7ec fa06 	bl	478 <__aeabi_dmul>
   1406c:	4632      	mov	r2, r6
   1406e:	463b      	mov	r3, r7
   14070:	f7ec f84c 	bl	10c <__adddf3>
   14074:	4602      	mov	r2, r0
   14076:	460b      	mov	r3, r1
   14078:	4620      	mov	r0, r4
   1407a:	4629      	mov	r1, r5
   1407c:	f7ec f844 	bl	108 <__aeabi_dsub>
   14080:	4642      	mov	r2, r8
   14082:	464b      	mov	r3, r9
   14084:	f7ec f840 	bl	108 <__aeabi_dsub>
   14088:	460b      	mov	r3, r1
   1408a:	4602      	mov	r2, r0
   1408c:	492a      	ldr	r1, [pc, #168]	; (14138 <__ieee754_pow+0xa48>)
   1408e:	2000      	movs	r0, #0
   14090:	f7ec f83a 	bl	108 <__aeabi_dsub>
   14094:	ec41 0b10 	vmov	d0, r0, r1
   14098:	ee10 3a90 	vmov	r3, s1
   1409c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
   140a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   140a4:	da0b      	bge.n	140be <__ieee754_pow+0x9ce>
   140a6:	4650      	mov	r0, sl
   140a8:	f000 f856 	bl	14158 <scalbn>
   140ac:	ec51 0b10 	vmov	r0, r1, d0
   140b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   140b4:	f7ff bbe3 	b.w	1387e <__ieee754_pow+0x18e>
   140b8:	f8dd a010 	ldr.w	sl, [sp, #16]
   140bc:	e73a      	b.n	13f34 <__ieee754_pow+0x844>
   140be:	ec51 0b10 	vmov	r0, r1, d0
   140c2:	4619      	mov	r1, r3
   140c4:	e7f4      	b.n	140b0 <__ieee754_pow+0x9c0>
   140c6:	e9dd 0100 	ldrd	r0, r1, [sp]
   140ca:	f7ff bb38 	b.w	1373e <__ieee754_pow+0x4e>
   140ce:	4630      	mov	r0, r6
   140d0:	4639      	mov	r1, r7
   140d2:	f7ff bb34 	b.w	1373e <__ieee754_pow+0x4e>
   140d6:	bf00      	nop
   140d8:	00000000 	.word	0x00000000
   140dc:	bff00000 	.word	0xbff00000
   140e0:	c2f8f359 	.word	0xc2f8f359
   140e4:	01a56e1f 	.word	0x01a56e1f
   140e8:	00000000 	.word	0x00000000
   140ec:	3fe62e43 	.word	0x3fe62e43
   140f0:	fefa39ef 	.word	0xfefa39ef
   140f4:	3fe62e42 	.word	0x3fe62e42
   140f8:	0ca86c39 	.word	0x0ca86c39
   140fc:	be205c61 	.word	0xbe205c61
   14100:	72bea4d0 	.word	0x72bea4d0
   14104:	3e663769 	.word	0x3e663769
   14108:	c5d26bf1 	.word	0xc5d26bf1
   1410c:	3ebbbd41 	.word	0x3ebbbd41
   14110:	af25de2c 	.word	0xaf25de2c
   14114:	3f11566a 	.word	0x3f11566a
   14118:	16bebd93 	.word	0x16bebd93
   1411c:	3f66c16c 	.word	0x3f66c16c
   14120:	5555553e 	.word	0x5555553e
   14124:	3fc55555 	.word	0x3fc55555
   14128:	4090cbff 	.word	0x4090cbff
   1412c:	3f6f3400 	.word	0x3f6f3400
   14130:	3fe00000 	.word	0x3fe00000
   14134:	fff00000 	.word	0xfff00000
   14138:	3ff00000 	.word	0x3ff00000
   1413c:	652b82fe 	.word	0x652b82fe
   14140:	3c971547 	.word	0x3c971547
   14144:	00000000 	.word	0x00000000

00014148 <nan>:
   14148:	ed9f 0b01 	vldr	d0, [pc, #4]	; 14150 <nan+0x8>
   1414c:	4770      	bx	lr
   1414e:	bf00      	nop
   14150:	00000000 	.word	0x00000000
   14154:	7ff80000 	.word	0x7ff80000

00014158 <scalbn>:
   14158:	b570      	push	{r4, r5, r6, lr}
   1415a:	ec55 4b10 	vmov	r4, r5, d0
   1415e:	f3c5 520a 	ubfx	r2, r5, #20, #11
   14162:	4606      	mov	r6, r0
   14164:	462b      	mov	r3, r5
   14166:	b992      	cbnz	r2, 1418e <scalbn+0x36>
   14168:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
   1416c:	4323      	orrs	r3, r4
   1416e:	d039      	beq.n	141e4 <scalbn+0x8c>
   14170:	4b33      	ldr	r3, [pc, #204]	; (14240 <scalbn+0xe8>)
   14172:	4620      	mov	r0, r4
   14174:	4629      	mov	r1, r5
   14176:	2200      	movs	r2, #0
   14178:	f7ec f97e 	bl	478 <__aeabi_dmul>
   1417c:	4b31      	ldr	r3, [pc, #196]	; (14244 <scalbn+0xec>)
   1417e:	429e      	cmp	r6, r3
   14180:	4604      	mov	r4, r0
   14182:	460d      	mov	r5, r1
   14184:	da0f      	bge.n	141a6 <scalbn+0x4e>
   14186:	a326      	add	r3, pc, #152	; (adr r3, 14220 <scalbn+0xc8>)
   14188:	e9d3 2300 	ldrd	r2, r3, [r3]
   1418c:	e01f      	b.n	141ce <scalbn+0x76>
   1418e:	f240 71ff 	movw	r1, #2047	; 0x7ff
   14192:	428a      	cmp	r2, r1
   14194:	d10b      	bne.n	141ae <scalbn+0x56>
   14196:	4622      	mov	r2, r4
   14198:	4620      	mov	r0, r4
   1419a:	4629      	mov	r1, r5
   1419c:	f7eb ffb6 	bl	10c <__adddf3>
   141a0:	4604      	mov	r4, r0
   141a2:	460d      	mov	r5, r1
   141a4:	e01e      	b.n	141e4 <scalbn+0x8c>
   141a6:	f3c1 520a 	ubfx	r2, r1, #20, #11
   141aa:	460b      	mov	r3, r1
   141ac:	3a36      	subs	r2, #54	; 0x36
   141ae:	4432      	add	r2, r6
   141b0:	f240 71fe 	movw	r1, #2046	; 0x7fe
   141b4:	428a      	cmp	r2, r1
   141b6:	dd0d      	ble.n	141d4 <scalbn+0x7c>
   141b8:	2d00      	cmp	r5, #0
   141ba:	a11b      	add	r1, pc, #108	; (adr r1, 14228 <scalbn+0xd0>)
   141bc:	e9d1 0100 	ldrd	r0, r1, [r1]
   141c0:	da02      	bge.n	141c8 <scalbn+0x70>
   141c2:	a11b      	add	r1, pc, #108	; (adr r1, 14230 <scalbn+0xd8>)
   141c4:	e9d1 0100 	ldrd	r0, r1, [r1]
   141c8:	a317      	add	r3, pc, #92	; (adr r3, 14228 <scalbn+0xd0>)
   141ca:	e9d3 2300 	ldrd	r2, r3, [r3]
   141ce:	f7ec f953 	bl	478 <__aeabi_dmul>
   141d2:	e7e5      	b.n	141a0 <scalbn+0x48>
   141d4:	2a00      	cmp	r2, #0
   141d6:	dd08      	ble.n	141ea <scalbn+0x92>
   141d8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
   141dc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
   141e0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
   141e4:	ec45 4b10 	vmov	d0, r4, r5
   141e8:	bd70      	pop	{r4, r5, r6, pc}
   141ea:	f112 0f35 	cmn.w	r2, #53	; 0x35
   141ee:	da08      	bge.n	14202 <scalbn+0xaa>
   141f0:	2d00      	cmp	r5, #0
   141f2:	a10b      	add	r1, pc, #44	; (adr r1, 14220 <scalbn+0xc8>)
   141f4:	e9d1 0100 	ldrd	r0, r1, [r1]
   141f8:	dac5      	bge.n	14186 <scalbn+0x2e>
   141fa:	a10f      	add	r1, pc, #60	; (adr r1, 14238 <scalbn+0xe0>)
   141fc:	e9d1 0100 	ldrd	r0, r1, [r1]
   14200:	e7c1      	b.n	14186 <scalbn+0x2e>
   14202:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
   14206:	3236      	adds	r2, #54	; 0x36
   14208:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
   1420c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
   14210:	4620      	mov	r0, r4
   14212:	4b0d      	ldr	r3, [pc, #52]	; (14248 <scalbn+0xf0>)
   14214:	4629      	mov	r1, r5
   14216:	2200      	movs	r2, #0
   14218:	e7d9      	b.n	141ce <scalbn+0x76>
   1421a:	bf00      	nop
   1421c:	f3af 8000 	nop.w
   14220:	c2f8f359 	.word	0xc2f8f359
   14224:	01a56e1f 	.word	0x01a56e1f
   14228:	8800759c 	.word	0x8800759c
   1422c:	7e37e43c 	.word	0x7e37e43c
   14230:	8800759c 	.word	0x8800759c
   14234:	fe37e43c 	.word	0xfe37e43c
   14238:	c2f8f359 	.word	0xc2f8f359
   1423c:	81a56e1f 	.word	0x81a56e1f
   14240:	43500000 	.word	0x43500000
   14244:	ffff3cb0 	.word	0xffff3cb0
   14248:	3c900000 	.word	0x3c900000

0001424c <MLX90640_I2CRead>:

    return 0;
}

int MLX90640_I2CRead(uint8_t slaveAddr, uint16_t startAddress, uint16_t nMemAddressRead, uint16_t *data)
{                          
   1424c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   14250:	f5ad 6dd4 	sub.w	sp, sp, #1696	; 0x6a0
    int ack = 0;                               
    int cnt = 0;
    int i = 0;
    char cmd[2] = {0,0};
    char i2cData[1664] = {0};
   14254:	f04f 0800 	mov.w	r8, #0
{                          
   14258:	4681      	mov	r9, r0
   1425a:	460d      	mov	r5, r1
   1425c:	4614      	mov	r4, r2
    char i2cData[1664] = {0};
   1425e:	4641      	mov	r1, r8
   14260:	f240 627c 	movw	r2, #1660	; 0x67c
   14264:	a809      	add	r0, sp, #36	; 0x24
{                          
   14266:	461f      	mov	r7, r3
    uint16_t *p;

    p = data;
    cmd[0] = startAddress >> 8;
   14268:	ba6d      	rev16	r5, r5
    char i2cData[1664] = {0};
   1426a:	f8cd 8020 	str.w	r8, [sp, #32]
   1426e:	f010 ffb8 	bl	251e2 <memset>
    cmd[0] = startAddress >> 8;
   14272:	ab01      	add	r3, sp, #4
    char i2cData[1664] = {0};
   14274:	ae08      	add	r6, sp, #32
    cmd[0] = startAddress >> 8;
   14276:	f8ad 5004 	strh.w	r5, [sp, #4]
				 const void *write_buf, size_t num_write,
				 void *read_buf, size_t num_read)
{
	struct i2c_msg msg[2];

	msg[0].buf = (uint8_t *)write_buf;
   1427a:	9302      	str	r3, [sp, #8]
	msg[0].len = num_write;
   1427c:	2502      	movs	r5, #2
    cmd[1] = startAddress & 0x00FF;

    ack = i2c_write_read(i2c_dev, slaveAddr, cmd, 2, i2cData, 2*nMemAddressRead);
   1427e:	0064      	lsls	r4, r4, #1
	msg[0].flags = I2C_MSG_WRITE;

	msg[1].buf = (uint8_t *)read_buf;
	msg[1].len = num_read;
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   14280:	2307      	movs	r3, #7
	msg[0].len = num_write;
   14282:	9503      	str	r5, [sp, #12]
	msg[0].flags = I2C_MSG_WRITE;
   14284:	f88d 8010 	strb.w	r8, [sp, #16]
	msg[1].buf = (uint8_t *)read_buf;
   14288:	9605      	str	r6, [sp, #20]
	msg[1].len = num_read;
   1428a:	9406      	str	r4, [sp, #24]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   1428c:	f88d 301c 	strb.w	r3, [sp, #28]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   14290:	4813      	ldr	r0, [pc, #76]	; (142e0 <MLX90640_I2CRead+0x94>)
   14292:	6883      	ldr	r3, [r0, #8]
   14294:	462a      	mov	r2, r5
   14296:	f8d3 a008 	ldr.w	sl, [r3, #8]
   1429a:	a902      	add	r1, sp, #8
   1429c:	464b      	mov	r3, r9
   1429e:	47d0      	blx	sl

    if (ack != 0x00)
   142a0:	b970      	cbnz	r0, 142c0 <MLX90640_I2CRead+0x74>
   142a2:	4632      	mov	r2, r6
   142a4:	443c      	add	r4, r7
    {
        LOG_ERR("Error reading from MLX90640 over I2C");
        return -1;
    }

    for(cnt=0; cnt < nMemAddressRead; cnt++)    // this just turns uint8_t[2*nMemAddressRead] into uint16_t[nMemAddressRead]
   142a6:	42a7      	cmp	r7, r4
   142a8:	f102 0202 	add.w	r2, r2, #2
   142ac:	d014      	beq.n	142d8 <MLX90640_I2CRead+0x8c>
    {
        i = cnt << 1;
        *p++ = (uint16_t)i2cData[i]*256 + (uint16_t)i2cData[i+1];
   142ae:	f812 1c02 	ldrb.w	r1, [r2, #-2]
   142b2:	f812 3c01 	ldrb.w	r3, [r2, #-1]
   142b6:	eb03 2301 	add.w	r3, r3, r1, lsl #8
   142ba:	f827 3b02 	strh.w	r3, [r7], #2
    for(cnt=0; cnt < nMemAddressRead; cnt++)    // this just turns uint8_t[2*nMemAddressRead] into uint16_t[nMemAddressRead]
   142be:	e7f2      	b.n	142a6 <MLX90640_I2CRead+0x5a>
        LOG_ERR("Error reading from MLX90640 over I2C");
   142c0:	4b08      	ldr	r3, [pc, #32]	; (142e4 <MLX90640_I2CRead+0x98>)
   142c2:	e9cd 5306 	strd	r5, r3, [sp, #24]
		(void) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_Z_LOG_MSG_STATIC_CREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_static_create(source, desc, package, data);
   142c6:	4808      	ldr	r0, [pc, #32]	; (142e8 <MLX90640_I2CRead+0x9c>)
   142c8:	4643      	mov	r3, r8
   142ca:	aa06      	add	r2, sp, #24
   142cc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   142d0:	f001 f996 	bl	15600 <z_impl_z_log_msg_static_create>
        return -1;
   142d4:	f04f 30ff 	mov.w	r0, #4294967295
    }

    return 0;   
} 
   142d8:	f50d 6dd4 	add.w	sp, sp, #1696	; 0x6a0
   142dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   142e0:	00025368 	.word	0x00025368
   142e4:	00025d3c 	.word	0x00025d3c
   142e8:	00025644 	.word	0x00025644

000142ec <MLX90640_I2CWrite>:

int MLX90640_I2CWrite(uint8_t slaveAddr, uint16_t writeAddress, uint16_t data)
{
   142ec:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    int ack = 0;
    char cmd[4] = {0,0,0,0};
    static uint16_t dataCheck;

    cmd[0] = writeAddress >> 8;
   142f0:	ba4b      	rev16	r3, r1
   142f2:	f8ad 3000 	strh.w	r3, [sp]
    cmd[1] = writeAddress & 0x00FF;
    cmd[2] = data >> 8;
   142f6:	ba53      	rev16	r3, r2
   142f8:	f8ad 3002 	strh.w	r3, [sp, #2]
	msg.len = num_bytes;
   142fc:	2304      	movs	r3, #4
   142fe:	9302      	str	r3, [sp, #8]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   14300:	2302      	movs	r3, #2
{
   14302:	4606      	mov	r6, r0
   14304:	460f      	mov	r7, r1
   14306:	4615      	mov	r5, r2
	msg.buf = (uint8_t *)buf;
   14308:	f8cd d004 	str.w	sp, [sp, #4]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   1430c:	f88d 300c 	strb.w	r3, [sp, #12]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   14310:	480e      	ldr	r0, [pc, #56]	; (1434c <MLX90640_I2CWrite+0x60>)
   14312:	6883      	ldr	r3, [r0, #8]
   14314:	2201      	movs	r2, #1
   14316:	689c      	ldr	r4, [r3, #8]
   14318:	a901      	add	r1, sp, #4
   1431a:	4633      	mov	r3, r6
   1431c:	47a0      	blx	r4

    //k_sleep(K_USEC(5));

    ack = i2c_write(i2c_dev, cmd, 4, slaveAddr);

    if (ack != 0x00)
   1431e:	4604      	mov	r4, r0
   14320:	b988      	cbnz	r0, 14346 <MLX90640_I2CWrite+0x5a>
    {
        //LOG_ERR("Error writing to MLX90640 over I2C");
        return -1;
    }         

    MLX90640_I2CRead(slaveAddr, writeAddress, 1, &dataCheck);
   14322:	f8df 802c 	ldr.w	r8, [pc, #44]	; 14350 <MLX90640_I2CWrite+0x64>
   14326:	2201      	movs	r2, #1
   14328:	4643      	mov	r3, r8
   1432a:	4639      	mov	r1, r7
   1432c:	4630      	mov	r0, r6
   1432e:	f7ff ff8d 	bl	1424c <MLX90640_I2CRead>

    if (dataCheck != data)
   14332:	f8b8 3000 	ldrh.w	r3, [r8]
    {
        //LOG_ERR("Error writing to MLX90640, readback failed");
        //LOG_ERR("dataCheck: %d  data: %d", dataCheck, data);
        return -2;
   14336:	42ab      	cmp	r3, r5
   14338:	bf18      	it	ne
   1433a:	f06f 0401 	mvnne.w	r4, #1
    }    

    return 0;
   1433e:	4620      	mov	r0, r4
   14340:	b004      	add	sp, #16
   14342:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return -1;
   14346:	f04f 34ff 	mov.w	r4, #4294967295
   1434a:	e7f8      	b.n	1433e <MLX90640_I2CWrite+0x52>
   1434c:	00025368 	.word	0x00025368
   14350:	2000535c 	.word	0x2000535c

00014354 <connected>:
{
   14354:	b590      	push	{r4, r7, lr}
   14356:	b087      	sub	sp, #28
   14358:	4604      	mov	r4, r0
   1435a:	af00      	add	r7, sp, #0
	if (err) {
   1435c:	b189      	cbz	r1, 14382 <connected+0x2e>
		LOG_WRN("Connection failed (err 0x%02x)", err);
   1435e:	466c      	mov	r4, sp
   14360:	b088      	sub	sp, #32
   14362:	466a      	mov	r2, sp
   14364:	4b0e      	ldr	r3, [pc, #56]	; (143a0 <connected+0x4c>)
   14366:	480f      	ldr	r0, [pc, #60]	; (143a4 <connected+0x50>)
   14368:	e9c2 3105 	strd	r3, r1, [r2, #20]
   1436c:	2303      	movs	r3, #3
   1436e:	f842 3f10 	str.w	r3, [r2, #16]!
   14372:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   14376:	f00d f974 	bl	21662 <z_log_msg_static_create.constprop.0>
   1437a:	46a5      	mov	sp, r4
}
   1437c:	371c      	adds	r7, #28
   1437e:	46bd      	mov	sp, r7
   14380:	bd90      	pop	{r4, r7, pc}
		LOG_INF("Connected");
   14382:	4b09      	ldr	r3, [pc, #36]	; (143a8 <connected+0x54>)
   14384:	617b      	str	r3, [r7, #20]
   14386:	2302      	movs	r3, #2
   14388:	613b      	str	r3, [r7, #16]
   1438a:	4806      	ldr	r0, [pc, #24]	; (143a4 <connected+0x50>)
   1438c:	f107 0210 	add.w	r2, r7, #16
   14390:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
   14394:	f00d f965 	bl	21662 <z_log_msg_static_create.constprop.0>
		connection = conn;
   14398:	4b04      	ldr	r3, [pc, #16]	; (143ac <connected+0x58>)
   1439a:	601c      	str	r4, [r3, #0]
}
   1439c:	e7ee      	b.n	1437c <connected+0x28>
   1439e:	bf00      	nop
   143a0:	00025d61 	.word	0x00025d61
   143a4:	00025644 	.word	0x00025644
   143a8:	00025d80 	.word	0x00025d80
   143ac:	20003030 	.word	0x20003030

000143b0 <subscribe_temp>:
{
   143b0:	b500      	push	{lr}
	if (notif_enabled) {	
   143b2:	2901      	cmp	r1, #1
   143b4:	4b1d      	ldr	r3, [pc, #116]	; (1442c <subscribe_temp+0x7c>)
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   143b6:	f3bf 8f5b 	dmb	ish
{
   143ba:	b08f      	sub	sp, #60	; 0x3c
	if (notif_enabled) {	
   143bc:	d12a      	bne.n	14414 <subscribe_temp+0x64>
   143be:	e853 1f00 	ldrex	r1, [r3]
   143c2:	f041 0101 	orr.w	r1, r1, #1
   143c6:	e843 1200 	strex	r2, r1, [r3]
   143ca:	2a00      	cmp	r2, #0
   143cc:	d1f7      	bne.n	143be <subscribe_temp+0xe>
   143ce:	f3bf 8f5b 	dmb	ish
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   143d2:	2200      	movs	r2, #0
   143d4:	2300      	movs	r3, #0
   143d6:	e9cd 2306 	strd	r2, r3, [sp, #24]
   143da:	2300      	movs	r3, #0
   143dc:	2204      	movs	r2, #4
   143de:	e9cd 2303 	strd	r2, r3, [sp, #12]
   143e2:	e9cd 3301 	strd	r3, r3, [sp, #4]
   143e6:	9300      	str	r3, [sp, #0]
   143e8:	4911      	ldr	r1, [pc, #68]	; (14430 <subscribe_temp+0x80>)
   143ea:	4b12      	ldr	r3, [pc, #72]	; (14434 <subscribe_temp+0x84>)
   143ec:	4812      	ldr	r0, [pc, #72]	; (14438 <subscribe_temp+0x88>)
   143ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   143f2:	f00b f91b 	bl	1f62c <z_impl_k_thread_create>
		temp_thread_id = k_thread_create(&temp_thread_data, temp_stack_area,
   143f6:	4b11      	ldr	r3, [pc, #68]	; (1443c <subscribe_temp+0x8c>)
   143f8:	6018      	str	r0, [r3, #0]
		LOG_INF("Notifications subscribed, temp enabled");
   143fa:	4b11      	ldr	r3, [pc, #68]	; (14440 <subscribe_temp+0x90>)
		LOG_INF("Notifications unsubscribed, temp disabled");
   143fc:	930d      	str	r3, [sp, #52]	; 0x34
   143fe:	4811      	ldr	r0, [pc, #68]	; (14444 <subscribe_temp+0x94>)
   14400:	2302      	movs	r3, #2
   14402:	aa0c      	add	r2, sp, #48	; 0x30
   14404:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
   14408:	930c      	str	r3, [sp, #48]	; 0x30
   1440a:	f00d f92a 	bl	21662 <z_log_msg_static_create.constprop.0>
}
   1440e:	b00f      	add	sp, #60	; 0x3c
   14410:	f85d fb04 	ldr.w	pc, [sp], #4
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   14414:	e853 1f00 	ldrex	r1, [r3]
   14418:	f021 0101 	bic.w	r1, r1, #1
   1441c:	e843 1200 	strex	r2, r1, [r3]
   14420:	2a00      	cmp	r2, #0
   14422:	d1f7      	bne.n	14414 <subscribe_temp+0x64>
   14424:	f3bf 8f5b 	dmb	ish
		LOG_INF("Notifications unsubscribed, temp disabled");
   14428:	4b07      	ldr	r3, [pc, #28]	; (14448 <subscribe_temp+0x98>)
   1442a:	e7e7      	b.n	143fc <subscribe_temp+0x4c>
   1442c:	20004eb8 	.word	0x20004eb8
   14430:	20005a00 	.word	0x20005a00
   14434:	000125e9 	.word	0x000125e9
   14438:	200015b8 	.word	0x200015b8
   1443c:	20004ebc 	.word	0x20004ebc
   14440:	00025d8a 	.word	0x00025d8a
   14444:	00025644 	.word	0x00025644
   14448:	00025db1 	.word	0x00025db1

0001444c <disconnected>:
{
   1444c:	b580      	push	{r7, lr}
   1444e:	af00      	add	r7, sp, #0
	LOG_INF("Disconnected (reason 0x%02x)", reason);
   14450:	b088      	sub	sp, #32
   14452:	466a      	mov	r2, sp
   14454:	4b14      	ldr	r3, [pc, #80]	; (144a8 <disconnected+0x5c>)
   14456:	4815      	ldr	r0, [pc, #84]	; (144ac <disconnected+0x60>)
   14458:	e9c2 3105 	strd	r3, r1, [r2, #20]
   1445c:	2303      	movs	r3, #3
   1445e:	f842 3f10 	str.w	r3, [r2, #16]!
   14462:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
   14466:	f00d f8fc 	bl	21662 <z_log_msg_static_create.constprop.0>
   1446a:	f3bf 8f5b 	dmb	ish
   1446e:	4b10      	ldr	r3, [pc, #64]	; (144b0 <disconnected+0x64>)
   14470:	e853 2f00 	ldrex	r2, [r3]
   14474:	f022 0201 	bic.w	r2, r2, #1
   14478:	e843 2100 	strex	r1, r2, [r3]
   1447c:	2900      	cmp	r1, #0
   1447e:	d1f7      	bne.n	14470 <disconnected+0x24>
   14480:	f3bf 8f5b 	dmb	ish
   14484:	f3bf 8f5b 	dmb	ish
   14488:	e853 1f00 	ldrex	r1, [r3]
   1448c:	f021 0102 	bic.w	r1, r1, #2
   14490:	e843 1200 	strex	r2, r1, [r3]
   14494:	2a00      	cmp	r2, #0
   14496:	d1f7      	bne.n	14488 <disconnected+0x3c>
   14498:	f3bf 8f5b 	dmb	ish
	connection = NULL;
   1449c:	4b05      	ldr	r3, [pc, #20]	; (144b4 <disconnected+0x68>)
   1449e:	2200      	movs	r2, #0
   144a0:	601a      	str	r2, [r3, #0]
}
   144a2:	46bd      	mov	sp, r7
   144a4:	bd80      	pop	{r7, pc}
   144a6:	bf00      	nop
   144a8:	00025faa 	.word	0x00025faa
   144ac:	00025644 	.word	0x00025644
   144b0:	20004eb8 	.word	0x20004eb8
   144b4:	20003030 	.word	0x20003030

000144b8 <main>:
{
   144b8:	b5b0      	push	{r4, r5, r7, lr}
   144ba:	b090      	sub	sp, #64	; 0x40
	LOG_INF("Running ttpms_v2_external_front on %s", CONFIG_BOARD);
   144bc:	466c      	mov	r4, sp
{
   144be:	af02      	add	r7, sp, #8
	LOG_INF("Running ttpms_v2_external_front on %s", CONFIG_BOARD);
   144c0:	b088      	sub	sp, #32
   144c2:	aa02      	add	r2, sp, #8
   144c4:	4b55      	ldr	r3, [pc, #340]	; (1461c <main+0x164>)
   144c6:	6153      	str	r3, [r2, #20]
   144c8:	4b55      	ldr	r3, [pc, #340]	; (14620 <main+0x168>)
   144ca:	6193      	str	r3, [r2, #24]
   144cc:	f44f 7300 	mov.w	r3, #512	; 0x200
   144d0:	8393      	strh	r3, [r2, #28]
   144d2:	4b54      	ldr	r3, [pc, #336]	; (14624 <main+0x16c>)
   144d4:	f842 3f10 	str.w	r3, [r2, #16]!
   144d8:	4853      	ldr	r0, [pc, #332]	; (14628 <main+0x170>)
   144da:	f44f 51e6 	mov.w	r1, #7360	; 0x1cc0
   144de:	f00d f8c0 	bl	21662 <z_log_msg_static_create.constprop.0>
	err = bt_addr_le_from_str(TTPMS_SENSOR_BT_ID, "random", &addr);
   144e2:	4952      	ldr	r1, [pc, #328]	; (1462c <main+0x174>)
   144e4:	4852      	ldr	r0, [pc, #328]	; (14630 <main+0x178>)
   144e6:	46a5      	mov	sp, r4
   144e8:	1d3a      	adds	r2, r7, #4
   144ea:	f002 fd6b 	bl	16fc4 <bt_addr_le_from_str>
	if (err) {
   144ee:	b168      	cbz	r0, 1450c <main+0x54>
		LOG_ERR("Invalid BT address (err %d)", err);
   144f0:	b088      	sub	sp, #32
   144f2:	aa02      	add	r2, sp, #8
   144f4:	4b4f      	ldr	r3, [pc, #316]	; (14634 <main+0x17c>)
   144f6:	e9c2 3005 	strd	r3, r0, [r2, #20]
   144fa:	2303      	movs	r3, #3
   144fc:	f842 3f10 	str.w	r3, [r2, #16]!
   14500:	4849      	ldr	r0, [pc, #292]	; (14628 <main+0x170>)
   14502:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   14506:	f00d f8ac 	bl	21662 <z_log_msg_static_create.constprop.0>
   1450a:	46a5      	mov	sp, r4
	err = bt_id_create(&addr, NULL);
   1450c:	2100      	movs	r1, #0
   1450e:	1d38      	adds	r0, r7, #4
   14510:	f004 fa48 	bl	189a4 <bt_id_create>
	if (err < 0) {
   14514:	2800      	cmp	r0, #0
   14516:	da0e      	bge.n	14536 <main+0x7e>
		LOG_ERR("Creating new BT ID failed (err %d)", err);
   14518:	466c      	mov	r4, sp
   1451a:	b088      	sub	sp, #32
   1451c:	aa02      	add	r2, sp, #8
   1451e:	4b46      	ldr	r3, [pc, #280]	; (14638 <main+0x180>)
   14520:	e9c2 3005 	strd	r3, r0, [r2, #20]
   14524:	2303      	movs	r3, #3
   14526:	f842 3f10 	str.w	r3, [r2, #16]!
   1452a:	483f      	ldr	r0, [pc, #252]	; (14628 <main+0x170>)
   1452c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   14530:	f00d f897 	bl	21662 <z_log_msg_static_create.constprop.0>
   14534:	46a5      	mov	sp, r4
	err = bt_enable(NULL);
   14536:	2000      	movs	r0, #0
   14538:	f004 f916 	bl	18768 <bt_enable>
	if (err) {
   1453c:	2800      	cmp	r0, #0
   1453e:	d048      	beq.n	145d2 <main+0x11a>
		LOG_ERR("Bluetooth init failed (err %d)", err);
   14540:	466c      	mov	r4, sp
   14542:	b088      	sub	sp, #32
   14544:	aa02      	add	r2, sp, #8
   14546:	4b3d      	ldr	r3, [pc, #244]	; (1463c <main+0x184>)
   14548:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1454c:	2303      	movs	r3, #3
   1454e:	f842 3f10 	str.w	r3, [r2, #16]!
   14552:	4835      	ldr	r0, [pc, #212]	; (14628 <main+0x170>)
   14554:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   14558:	f00d f883 	bl	21662 <z_log_msg_static_create.constprop.0>
   1455c:	46a5      	mov	sp, r4
	err = bt_set_name(bt_device_name);
   1455e:	4838      	ldr	r0, [pc, #224]	; (14640 <main+0x188>)
   14560:	f004 f8e2 	bl	18728 <bt_set_name>
	if (err) {
   14564:	2800      	cmp	r0, #0
   14566:	d040      	beq.n	145ea <main+0x132>
		LOG_ERR("Failed to set BT Device name (err %d)", err);
   14568:	466c      	mov	r4, sp
   1456a:	b088      	sub	sp, #32
   1456c:	aa02      	add	r2, sp, #8
   1456e:	4b35      	ldr	r3, [pc, #212]	; (14644 <main+0x18c>)
   14570:	e9c2 3005 	strd	r3, r0, [r2, #20]
   14574:	2303      	movs	r3, #3
   14576:	f842 3f10 	str.w	r3, [r2, #16]!
   1457a:	482b      	ldr	r0, [pc, #172]	; (14628 <main+0x170>)
   1457c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   14580:	f00d f86f 	bl	21662 <z_log_msg_static_create.constprop.0>
   14584:	46a5      	mov	sp, r4
	err = bt_le_adv_start(BT_LE_ADV_CONN_NAME, ad, ARRAY_SIZE(ad), NULL, 0);
   14586:	4d30      	ldr	r5, [pc, #192]	; (14648 <main+0x190>)
   14588:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1458a:	f107 040c 	add.w	r4, r7, #12
   1458e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   14590:	682b      	ldr	r3, [r5, #0]
   14592:	6023      	str	r3, [r4, #0]
   14594:	2300      	movs	r3, #0
   14596:	492d      	ldr	r1, [pc, #180]	; (1464c <main+0x194>)
   14598:	9300      	str	r3, [sp, #0]
   1459a:	2202      	movs	r2, #2
   1459c:	f107 000c 	add.w	r0, r7, #12
   145a0:	f004 fdd8 	bl	19154 <bt_le_adv_start>
	if (err) {
   145a4:	b368      	cbz	r0, 14602 <main+0x14a>
		LOG_ERR("Advertising failed to start (err %d)", err);
   145a6:	466c      	mov	r4, sp
   145a8:	b088      	sub	sp, #32
   145aa:	aa02      	add	r2, sp, #8
   145ac:	4b28      	ldr	r3, [pc, #160]	; (14650 <main+0x198>)
   145ae:	e9c2 3005 	strd	r3, r0, [r2, #20]
   145b2:	2303      	movs	r3, #3
   145b4:	f842 3f10 	str.w	r3, [r2, #16]!
   145b8:	481b      	ldr	r0, [pc, #108]	; (14628 <main+0x170>)
   145ba:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   145be:	f00d f850 	bl	21662 <z_log_msg_static_create.constprop.0>
   145c2:	46a5      	mov	sp, r4
	return z_impl_k_sleep(timeout);
   145c4:	f04f 31ff 	mov.w	r1, #4294967295
   145c8:	f04f 30ff 	mov.w	r0, #4294967295
   145cc:	f00b fe06 	bl	201dc <z_impl_k_sleep>
	while (1) {
   145d0:	e7f8      	b.n	145c4 <main+0x10c>
		LOG_INF("Bluetooth initialized");
   145d2:	4b20      	ldr	r3, [pc, #128]	; (14654 <main+0x19c>)
   145d4:	637b      	str	r3, [r7, #52]	; 0x34
   145d6:	2302      	movs	r3, #2
   145d8:	4813      	ldr	r0, [pc, #76]	; (14628 <main+0x170>)
   145da:	633b      	str	r3, [r7, #48]	; 0x30
   145dc:	f107 0230 	add.w	r2, r7, #48	; 0x30
   145e0:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
   145e4:	f00d f83d 	bl	21662 <z_log_msg_static_create.constprop.0>
   145e8:	e7b9      	b.n	1455e <main+0xa6>
		LOG_INF("Successfully set BT device name");
   145ea:	4b1b      	ldr	r3, [pc, #108]	; (14658 <main+0x1a0>)
   145ec:	637b      	str	r3, [r7, #52]	; 0x34
   145ee:	2302      	movs	r3, #2
   145f0:	480d      	ldr	r0, [pc, #52]	; (14628 <main+0x170>)
   145f2:	633b      	str	r3, [r7, #48]	; 0x30
   145f4:	f107 0230 	add.w	r2, r7, #48	; 0x30
   145f8:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
   145fc:	f00d f831 	bl	21662 <z_log_msg_static_create.constprop.0>
   14600:	e7c1      	b.n	14586 <main+0xce>
		LOG_INF("Advertising successfully started");
   14602:	4b16      	ldr	r3, [pc, #88]	; (1465c <main+0x1a4>)
   14604:	637b      	str	r3, [r7, #52]	; 0x34
   14606:	2302      	movs	r3, #2
   14608:	4807      	ldr	r0, [pc, #28]	; (14628 <main+0x170>)
   1460a:	633b      	str	r3, [r7, #48]	; 0x30
   1460c:	f107 0230 	add.w	r2, r7, #48	; 0x30
   14610:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
   14614:	f00d f825 	bl	21662 <z_log_msg_static_create.constprop.0>
   14618:	e7d4      	b.n	145c4 <main+0x10c>
   1461a:	bf00      	nop
   1461c:	00025fc7 	.word	0x00025fc7
   14620:	00025fed 	.word	0x00025fed
   14624:	01000003 	.word	0x01000003
   14628:	00025644 	.word	0x00025644
   1462c:	00026001 	.word	0x00026001
   14630:	00026008 	.word	0x00026008
   14634:	0002601a 	.word	0x0002601a
   14638:	00026036 	.word	0x00026036
   1463c:	00026059 	.word	0x00026059
   14640:	2000075b 	.word	0x2000075b
   14644:	0002608e 	.word	0x0002608e
   14648:	00025660 	.word	0x00025660
   1464c:	000256f8 	.word	0x000256f8
   14650:	000260d4 	.word	0x000260d4
   14654:	00026078 	.word	0x00026078
   14658:	000260b4 	.word	0x000260b4
   1465c:	000260f9 	.word	0x000260f9

00014660 <cbvprintf_package>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
   14660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14664:	b091      	sub	sp, #68	; 0x44
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
	bool is_str_arg = false;
	union cbprintf_package_hdr *pkg_hdr = packaged;

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
   14666:	0784      	lsls	r4, r0, #30
{
   14668:	9300      	str	r3, [sp, #0]
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
   1466a:	f002 0304 	and.w	r3, r2, #4
   1466e:	9302      	str	r3, [sp, #8]
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
   14670:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   14674:	f103 0301 	add.w	r3, r3, #1
   14678:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
{
   1467c:	9203      	str	r2, [sp, #12]
   1467e:	4605      	mov	r5, r0
   14680:	460e      	mov	r6, r1
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
   14682:	9305      	str	r3, [sp, #20]
	if ((uintptr_t)packaged % sizeof(void *)) {
   14684:	f040 81be 	bne.w	14a04 <cbvprintf_package+0x3a4>
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * multiple of pointer size for the above to preserve alignment.
	 *
	 * Refer to union cbprintf_package_hdr for more details.
	 */
	buf += sizeof(*pkg_hdr);
   14688:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
   1468a:	b130      	cbz	r0, 1469a <cbvprintf_package+0x3a>

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
   1468c:	2907      	cmp	r1, #7
   1468e:	d809      	bhi.n	146a4 <cbvprintf_package+0x44>
		return -ENOSPC;
   14690:	f06f 001b 	mvn.w	r0, #27
	return BUF_OFFSET;

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
   14694:	b011      	add	sp, #68	; 0x44
   14696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
   1469a:	f001 0607 	and.w	r6, r1, #7
   1469e:	1d34      	adds	r4, r6, #4
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
   146a0:	f1c6 0608 	rsb	r6, r6, #8
	s = fmt--;
   146a4:	9b00      	ldr	r3, [sp, #0]
	unsigned int s_ro_cnt = 0; /* number of ro strings */
   146a6:	f04f 0900 	mov.w	r9, #0
	s = fmt--;
   146aa:	1e59      	subs	r1, r3, #1
	align = VA_STACK_ALIGN(char *);
   146ac:	f04f 0a04 	mov.w	sl, #4
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
   146b0:	f04f 33ff 	mov.w	r3, #4294967295
   146b4:	9301      	str	r3, [sp, #4]
	unsigned int s_rw_cnt = 0; /* number of rw strings */
   146b6:	f8cd 9010 	str.w	r9, [sp, #16]
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
   146ba:	464f      	mov	r7, r9
	bool parsing = false;
   146bc:	46cb      	mov	fp, r9
	size = sizeof(char *);
   146be:	4653      	mov	r3, sl
			if (buf0 != NULL) {
   146c0:	b10d      	cbz	r5, 146c6 <cbvprintf_package+0x66>
				*(const char **)buf = s;
   146c2:	9800      	ldr	r0, [sp, #0]
   146c4:	6020      	str	r0, [r4, #0]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   146c6:	9805      	ldr	r0, [sp, #20]
   146c8:	2800      	cmp	r0, #0
   146ca:	f300 80eb 	bgt.w	148a4 <cbvprintf_package+0x244>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
   146ce:	489a      	ldr	r0, [pc, #616]	; (14938 <cbvprintf_package+0x2d8>)
   146d0:	9a00      	ldr	r2, [sp, #0]
   146d2:	4282      	cmp	r2, r0
   146d4:	d303      	bcc.n	146de <cbvprintf_package+0x7e>
   146d6:	4899      	ldr	r0, [pc, #612]	; (1493c <cbvprintf_package+0x2dc>)
   146d8:	4282      	cmp	r2, r0
   146da:	f0c0 80e3 	bcc.w	148a4 <cbvprintf_package+0x244>
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
   146de:	9a03      	ldr	r2, [sp, #12]
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
   146e0:	eba4 0e05 	sub.w	lr, r4, r5
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
   146e4:	0792      	lsls	r2, r2, #30
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
   146e6:	ea4f 009e 	mov.w	r0, lr, lsr #2
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
   146ea:	f100 8106 	bmi.w	148fa <cbvprintf_package+0x29a>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
   146ee:	2f0f      	cmp	r7, #15
   146f0:	f200 80b4 	bhi.w	1485c <cbvprintf_package+0x1fc>
				if (buf0 != NULL) {
   146f4:	2d00      	cmp	r5, #0
   146f6:	f000 8108 	beq.w	1490a <cbvprintf_package+0x2aa>
					str_ptr_pos[s_idx] = s_ptr_idx;
   146fa:	f107 0240 	add.w	r2, r7, #64	; 0x40
   146fe:	eb0d 0c02 	add.w	ip, sp, r2
					str_ptr_arg[s_idx] = arg_idx;
   14702:	9a01      	ldr	r2, [sp, #4]
					str_ptr_pos[s_idx] = s_ptr_idx;
   14704:	f80c 0c20 	strb.w	r0, [ip, #-32]
					str_ptr_arg[s_idx] = arg_idx;
   14708:	f80c 2c10 	strb.w	r2, [ip, #-16]
						s_rw_cnt++;
   1470c:	9804      	ldr	r0, [sp, #16]
   1470e:	3001      	adds	r0, #1
   14710:	9004      	str	r0, [sp, #16]
   14712:	e0ea      	b.n	148ea <cbvprintf_package+0x28a>
			switch (*fmt) {
   14714:	287a      	cmp	r0, #122	; 0x7a
   14716:	d860      	bhi.n	147da <cbvprintf_package+0x17a>
   14718:	284b      	cmp	r0, #75	; 0x4b
   1471a:	d80e      	bhi.n	1473a <cbvprintf_package+0xda>
   1471c:	2847      	cmp	r0, #71	; 0x47
   1471e:	d85c      	bhi.n	147da <cbvprintf_package+0x17a>
   14720:	2829      	cmp	r0, #41	; 0x29
   14722:	d82f      	bhi.n	14784 <cbvprintf_package+0x124>
   14724:	2825      	cmp	r0, #37	; 0x25
   14726:	d055      	beq.n	147d4 <cbvprintf_package+0x174>
   14728:	d857      	bhi.n	147da <cbvprintf_package+0x17a>
   1472a:	2820      	cmp	r0, #32
   1472c:	d07d      	beq.n	1482a <cbvprintf_package+0x1ca>
   1472e:	3823      	subs	r0, #35	; 0x23
   14730:	f1d0 0b00 	rsbs	fp, r0, #0
   14734:	eb4b 0b00 	adc.w	fp, fp, r0
   14738:	e077      	b.n	1482a <cbvprintf_package+0x1ca>
   1473a:	f1a0 0c4c 	sub.w	ip, r0, #76	; 0x4c
   1473e:	f1bc 0f2e 	cmp.w	ip, #46	; 0x2e
   14742:	d84a      	bhi.n	147da <cbvprintf_package+0x17a>
   14744:	e8df f00c 	tbb	[pc, ip]
   14748:	49494971 	.word	0x49494971
   1474c:	49494949 	.word	0x49494949
   14750:	49494949 	.word	0x49494949
   14754:	4949494c 	.word	0x4949494c
   14758:	49494949 	.word	0x49494949
   1475c:	4c495a49 	.word	0x4c495a49
   14760:	5a5a5a4c 	.word	0x5a5a5a4c
   14764:	496e4c71 	.word	0x496e4c71
   14768:	4c184971 	.word	0x4c184971
   1476c:	83494918 	.word	0x83494918
   14770:	49494c80 	.word	0x49494c80
   14774:	494c      	.short	0x494c
   14776:	80          	.byte	0x80
   14777:	00          	.byte	0x00
   14778:	2000      	movs	r0, #0
   1477a:	f04f 0b00 	mov.w	fp, #0
				align = VA_STACK_ALIGN(void *);
   1477e:	f04f 0a04 	mov.w	sl, #4
   14782:	e039      	b.n	147f8 <cbvprintf_package+0x198>
			switch (*fmt) {
   14784:	f1a0 0c2a 	sub.w	ip, r0, #42	; 0x2a
   14788:	fa5f fc8c 	uxtb.w	ip, ip
   1478c:	2201      	movs	r2, #1
   1478e:	fa02 fc0c 	lsl.w	ip, r2, ip
   14792:	ea1c 0f0e 	tst.w	ip, lr
   14796:	d148      	bne.n	1482a <cbvprintf_package+0x1ca>
   14798:	f01c 5062 	ands.w	r0, ip, #947912704	; 0x38800000
   1479c:	d12e      	bne.n	147fc <cbvprintf_package+0x19c>
   1479e:	ea1c 0b02 	ands.w	fp, ip, r2
   147a2:	d042      	beq.n	1482a <cbvprintf_package+0x1ca>
		buf = (void *) ROUND_UP(buf, align);
   147a4:	3c01      	subs	r4, #1
   147a6:	4454      	add	r4, sl
   147a8:	f1ca 0c00 	rsb	ip, sl, #0
   147ac:	ea04 040c 	and.w	r4, r4, ip
		if (buf0 != NULL && BUF_OFFSET + size > len) {
   147b0:	2d00      	cmp	r5, #0
   147b2:	d061      	beq.n	14878 <cbvprintf_package+0x218>
   147b4:	eba3 0c05 	sub.w	ip, r3, r5
   147b8:	44a4      	add	ip, r4
   147ba:	4566      	cmp	r6, ip
   147bc:	f4ff af68 	bcc.w	14690 <cbvprintf_package+0x30>
		if (is_str_arg) {
   147c0:	2800      	cmp	r0, #0
   147c2:	d168      	bne.n	14896 <cbvprintf_package+0x236>
		} else if (size == sizeof(int)) {
   147c4:	2b04      	cmp	r3, #4
   147c6:	d147      	bne.n	14858 <cbvprintf_package+0x1f8>
			int v = va_arg(ap, int);
   147c8:	f858 3b04 	ldr.w	r3, [r8], #4
				*(int *)buf = v;
   147cc:	6023      	str	r3, [r4, #0]
			buf += sizeof(int);
   147ce:	3404      	adds	r4, #4
   147d0:	2304      	movs	r3, #4
   147d2:	e02a      	b.n	1482a <cbvprintf_package+0x1ca>
				arg_idx--;
   147d4:	9a01      	ldr	r2, [sp, #4]
   147d6:	3a01      	subs	r2, #1
   147d8:	9201      	str	r2, [sp, #4]
				parsing = false;
   147da:	f04f 0b00 	mov.w	fp, #0
				continue;
   147de:	e024      	b.n	1482a <cbvprintf_package+0x1ca>
				if (fmt[-1] == 'l') {
   147e0:	f811 0c01 	ldrb.w	r0, [r1, #-1]
   147e4:	286c      	cmp	r0, #108	; 0x6c
   147e6:	d134      	bne.n	14852 <cbvprintf_package+0x1f2>
					if (fmt[-2] == 'l') {
   147e8:	f811 3c02 	ldrb.w	r3, [r1, #-2]
   147ec:	2000      	movs	r0, #0
   147ee:	2b6c      	cmp	r3, #108	; 0x6c
				parsing = false;
   147f0:	4683      	mov	fp, r0
					if (fmt[-2] == 'l') {
   147f2:	d1c4      	bne.n	1477e <cbvprintf_package+0x11e>
						align = VA_STACK_ALIGN(long long);
   147f4:	f04f 0a08 	mov.w	sl, #8
				size = sizeof(void *);
   147f8:	4653      	mov	r3, sl
   147fa:	e7d3      	b.n	147a4 <cbvprintf_package+0x144>
					v.ld = va_arg(ap, long double);
   147fc:	f108 0807 	add.w	r8, r8, #7
   14800:	f028 0807 	bic.w	r8, r8, #7
				buf = (void *) ROUND_UP(buf, align);
   14804:	3407      	adds	r4, #7
					v.ld = va_arg(ap, long double);
   14806:	e8f8 ab02 	ldrd	sl, fp, [r8], #8
				buf = (void *) ROUND_UP(buf, align);
   1480a:	f024 0407 	bic.w	r4, r4, #7
				if (buf0 != NULL) {
   1480e:	b135      	cbz	r5, 1481e <cbvprintf_package+0x1be>
					if (BUF_OFFSET + size > len) {
   14810:	9806      	ldr	r0, [sp, #24]
   14812:	4420      	add	r0, r4
   14814:	42b0      	cmp	r0, r6
   14816:	f63f af3b 	bhi.w	14690 <cbvprintf_package+0x30>
						*(long double *)buf = v.ld;
   1481a:	e9c4 ab00 	strd	sl, fp, [r4]
				buf += size;
   1481e:	3408      	adds	r4, #8
				parsing = false;
   14820:	f04f 0b00 	mov.w	fp, #0
			switch (*fmt) {
   14824:	f04f 0a08 	mov.w	sl, #8
   14828:	4653      	mov	r3, sl
			if (*++fmt == '\0') {
   1482a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   1482e:	2800      	cmp	r0, #0
   14830:	d078      	beq.n	14924 <cbvprintf_package+0x2c4>
			if (!parsing) {
   14832:	f1bb 0f00 	cmp.w	fp, #0
   14836:	f47f af6d 	bne.w	14714 <cbvprintf_package+0xb4>
				if (*fmt == '%') {
   1483a:	2825      	cmp	r0, #37	; 0x25
   1483c:	d1f5      	bne.n	1482a <cbvprintf_package+0x1ca>
					arg_idx++;
   1483e:	9b01      	ldr	r3, [sp, #4]
   14840:	3301      	adds	r3, #1
   14842:	9301      	str	r3, [sp, #4]
					parsing = true;
   14844:	f04f 0b01 	mov.w	fp, #1
				align = VA_STACK_ALIGN(size_t);
   14848:	f04f 0a04 	mov.w	sl, #4
   1484c:	e7ec      	b.n	14828 <cbvprintf_package+0x1c8>
			switch (*fmt) {
   1484e:	4658      	mov	r0, fp
   14850:	e793      	b.n	1477a <cbvprintf_package+0x11a>
   14852:	2000      	movs	r0, #0
				parsing = false;
   14854:	4683      	mov	fp, r0
   14856:	e7a5      	b.n	147a4 <cbvprintf_package+0x144>
		} else if (size == sizeof(long long)) {
   14858:	2b08      	cmp	r3, #8
   1485a:	d002      	beq.n	14862 <cbvprintf_package+0x202>
					return -EINVAL;
   1485c:	f06f 0015 	mvn.w	r0, #21
   14860:	e718      	b.n	14694 <cbvprintf_package+0x34>
			long long v = va_arg(ap, long long);
   14862:	f108 0807 	add.w	r8, r8, #7
   14866:	f028 0807 	bic.w	r8, r8, #7
   1486a:	ecb8 7b02 	vldmia	r8!, {d7}
					*(long long *)buf = v;
   1486e:	ed84 7b00 	vstr	d7, [r4]
			buf += sizeof(long long);
   14872:	3408      	adds	r4, #8
   14874:	2308      	movs	r3, #8
   14876:	e7d8      	b.n	1482a <cbvprintf_package+0x1ca>
		if (is_str_arg) {
   14878:	b968      	cbnz	r0, 14896 <cbvprintf_package+0x236>
		} else if (size == sizeof(int)) {
   1487a:	2b04      	cmp	r3, #4
   1487c:	d102      	bne.n	14884 <cbvprintf_package+0x224>
			int v = va_arg(ap, int);
   1487e:	f108 0804 	add.w	r8, r8, #4
			if (buf0 != NULL) {
   14882:	e7a4      	b.n	147ce <cbvprintf_package+0x16e>
		} else if (size == sizeof(long long)) {
   14884:	2b08      	cmp	r3, #8
   14886:	d1e9      	bne.n	1485c <cbvprintf_package+0x1fc>
			long long v = va_arg(ap, long long);
   14888:	f108 0807 	add.w	r8, r8, #7
   1488c:	f028 0807 	bic.w	r8, r8, #7
   14890:	f108 0808 	add.w	r8, r8, #8
			if (buf0 != NULL) {
   14894:	e7ed      	b.n	14872 <cbvprintf_package+0x212>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   14896:	9805      	ldr	r0, [sp, #20]
   14898:	3801      	subs	r0, #1
   1489a:	9005      	str	r0, [sp, #20]
			s = va_arg(ap, char *);
   1489c:	f858 0b04 	ldr.w	r0, [r8], #4
   148a0:	9000      	str	r0, [sp, #0]
   148a2:	e70d      	b.n	146c0 <cbvprintf_package+0x60>
			if (is_ro && !do_ro) {
   148a4:	9a03      	ldr	r2, [sp, #12]
   148a6:	0790      	lsls	r0, r2, #30
   148a8:	d520      	bpl.n	148ec <cbvprintf_package+0x28c>
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
   148aa:	eba4 0e05 	sub.w	lr, r4, r5
   148ae:	ea4f 009e 	mov.w	r0, lr, lsr #2
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   148b2:	f04f 0c01 	mov.w	ip, #1
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
   148b6:	f5be 7f00 	cmp.w	lr, #512	; 0x200
   148ba:	d2cf      	bcs.n	1485c <cbvprintf_package+0x1fc>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
   148bc:	2f0f      	cmp	r7, #15
   148be:	d8cd      	bhi.n	1485c <cbvprintf_package+0x1fc>
				if (buf0 != NULL) {
   148c0:	b1f5      	cbz	r5, 14900 <cbvprintf_package+0x2a0>
					str_ptr_pos[s_idx] = s_ptr_idx;
   148c2:	f107 0240 	add.w	r2, r7, #64	; 0x40
   148c6:	eb0d 0e02 	add.w	lr, sp, r2
   148ca:	b2c0      	uxtb	r0, r0
					str_ptr_arg[s_idx] = arg_idx;
   148cc:	9a01      	ldr	r2, [sp, #4]
					str_ptr_pos[s_idx] = s_ptr_idx;
   148ce:	f80e 0c20 	strb.w	r0, [lr, #-32]
					str_ptr_arg[s_idx] = arg_idx;
   148d2:	f80e 2c10 	strb.w	r2, [lr, #-16]
					if (is_ro) {
   148d6:	f1bc 0f00 	cmp.w	ip, #0
   148da:	f43f af17 	beq.w	1470c <cbvprintf_package+0xac>
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
   148de:	f060 007f 	orn	r0, r0, #127	; 0x7f
   148e2:	f80e 0c20 	strb.w	r0, [lr, #-32]
						s_ro_cnt++;
   148e6:	f109 0901 	add.w	r9, r9, #1
				s_idx++;
   148ea:	3701      	adds	r7, #1
					if (BUF_OFFSET + size > len) {
   148ec:	f1c5 0208 	rsb	r2, r5, #8
			buf += sizeof(char *);
   148f0:	3404      	adds	r4, #4
					if (BUF_OFFSET + size > len) {
   148f2:	9206      	str	r2, [sp, #24]
			switch (*fmt) {
   148f4:	f64f 7eda 	movw	lr, #65498	; 0xffda
   148f8:	e797      	b.n	1482a <cbvprintf_package+0x1ca>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   148fa:	f04f 0c00 	mov.w	ip, #0
   148fe:	e7da      	b.n	148b6 <cbvprintf_package+0x256>
				} else if (is_ro) {
   14900:	f1bc 0f00 	cmp.w	ip, #0
   14904:	d001      	beq.n	1490a <cbvprintf_package+0x2aa>
					len += 1;
   14906:	3601      	adds	r6, #1
   14908:	e7ef      	b.n	148ea <cbvprintf_package+0x28a>
				} else if (rws_pos_en) {
   1490a:	9a02      	ldr	r2, [sp, #8]
					len += 2;
   1490c:	3602      	adds	r6, #2
				} else if (rws_pos_en) {
   1490e:	2a00      	cmp	r2, #0
   14910:	d1eb      	bne.n	148ea <cbvprintf_package+0x28a>
					len += strlen(s) + 1 + 1;
   14912:	9800      	ldr	r0, [sp, #0]
   14914:	e9cd 3106 	strd	r3, r1, [sp, #24]
   14918:	f7f8 f92a 	bl	cb70 <strlen>
   1491c:	e9dd 3106 	ldrd	r3, r1, [sp, #24]
   14920:	4406      	add	r6, r0
   14922:	e7e2      	b.n	148ea <cbvprintf_package+0x28a>
	if (BUF_OFFSET / sizeof(int) > 255) {
   14924:	1b63      	subs	r3, r4, r5
   14926:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   1492a:	d297      	bcs.n	1485c <cbvprintf_package+0x1fc>
	if (buf0 == NULL) {
   1492c:	b945      	cbnz	r5, 14940 <cbvprintf_package+0x2e0>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
   1492e:	f1a6 0408 	sub.w	r4, r6, #8
   14932:	18e0      	adds	r0, r4, r3
   14934:	e6ae      	b.n	14694 <cbvprintf_package+0x34>
   14936:	bf00      	nop
   14938:	00025248 	.word	0x00025248
   1493c:	00027c50 	.word	0x00027c50
	if (rws_pos_en) {
   14940:	9a02      	ldr	r2, [sp, #8]
	*(char **)buf0 = NULL;
   14942:	6028      	str	r0, [r5, #0]
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
   14944:	089b      	lsrs	r3, r3, #2
   14946:	702b      	strb	r3, [r5, #0]
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
   14948:	f89d 3010 	ldrb.w	r3, [sp, #16]
	if (rws_pos_en) {
   1494c:	b1c2      	cbz	r2, 14980 <cbvprintf_package+0x320>
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
   1494e:	70eb      	strb	r3, [r5, #3]
	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
   14950:	f885 9002 	strb.w	r9, [r5, #2]
	if (s_ro_cnt) {
   14954:	f1b9 0f00 	cmp.w	r9, #0
   14958:	d005      	beq.n	14966 <cbvprintf_package+0x306>
   1495a:	a808      	add	r0, sp, #32
		for (i = 0; i < s_idx; i++) {
   1495c:	2200      	movs	r2, #0
			if (BUF_OFFSET + 1 > len) {
   1495e:	f1c5 0c01 	rsb	ip, r5, #1
		for (i = 0; i < s_idx; i++) {
   14962:	4297      	cmp	r7, r2
   14964:	d10e      	bne.n	14984 <cbvprintf_package+0x324>
		if (BUF_OFFSET + 1 + size > len) {
   14966:	f1c5 0301 	rsb	r3, r5, #1
   1496a:	f10d 0820 	add.w	r8, sp, #32
			*buf++ = str_ptr_arg[i];
   1496e:	f04f 0a00 	mov.w	sl, #0
		if (BUF_OFFSET + 1 + size > len) {
   14972:	9301      	str	r3, [sp, #4]
			*buf++ = str_ptr_arg[i];
   14974:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
	for (i = 0; i < s_idx; i++) {
   14978:	4557      	cmp	r7, sl
   1497a:	d112      	bne.n	149a2 <cbvprintf_package+0x342>
	return BUF_OFFSET;
   1497c:	1b60      	subs	r0, r4, r5
   1497e:	e689      	b.n	14694 <cbvprintf_package+0x34>
		pkg_hdr->desc.str_cnt = s_rw_cnt;
   14980:	706b      	strb	r3, [r5, #1]
		pkg_hdr->desc.rw_str_cnt = 0;
   14982:	e7e5      	b.n	14950 <cbvprintf_package+0x2f0>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
   14984:	f810 3b01 	ldrb.w	r3, [r0], #1
   14988:	0619      	lsls	r1, r3, #24
   1498a:	d508      	bpl.n	1499e <cbvprintf_package+0x33e>
			if (BUF_OFFSET + 1 > len) {
   1498c:	eb04 0e0c 	add.w	lr, r4, ip
   14990:	4576      	cmp	r6, lr
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
   14992:	f003 037f 	and.w	r3, r3, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
   14996:	f4ff ae7b 	bcc.w	14690 <cbvprintf_package+0x30>
			*buf++ = pos;
   1499a:	f804 3b01 	strb.w	r3, [r4], #1
		for (i = 0; i < s_idx; i++) {
   1499e:	3201      	adds	r2, #1
   149a0:	e7df      	b.n	14962 <cbvprintf_package+0x302>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
   149a2:	f1b9 0f00 	cmp.w	r9, #0
   149a6:	d003      	beq.n	149b0 <cbvprintf_package+0x350>
   149a8:	f998 2000 	ldrsb.w	r2, [r8]
   149ac:	2a00      	cmp	r2, #0
   149ae:	db17      	blt.n	149e0 <cbvprintf_package+0x380>
		if (rws_pos_en) {
   149b0:	9b02      	ldr	r3, [sp, #8]
   149b2:	b1d3      	cbz	r3, 149ea <cbvprintf_package+0x38a>
			*buf++ = str_ptr_arg[i];
   149b4:	f81a 200b 	ldrb.w	r2, [sl, fp]
   149b8:	f804 2b01 	strb.w	r2, [r4], #1
			size = 0;
   149bc:	2200      	movs	r2, #0
		if (BUF_OFFSET + 1 + size > len) {
   149be:	9b01      	ldr	r3, [sp, #4]
   149c0:	1898      	adds	r0, r3, r2
   149c2:	4420      	add	r0, r4
   149c4:	4286      	cmp	r6, r0
   149c6:	f4ff ae63 	bcc.w	14690 <cbvprintf_package+0x30>
		*buf++ = str_ptr_pos[i];
   149ca:	f898 0000 	ldrb.w	r0, [r8]
   149ce:	f804 0b01 	strb.w	r0, [r4], #1
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   149d2:	9900      	ldr	r1, [sp, #0]
   149d4:	9203      	str	r2, [sp, #12]
   149d6:	4620      	mov	r0, r4
   149d8:	f010 fbf5 	bl	251c6 <memcpy>
		buf += size;
   149dc:	9a03      	ldr	r2, [sp, #12]
   149de:	4414      	add	r4, r2
	for (i = 0; i < s_idx; i++) {
   149e0:	f10a 0a01 	add.w	sl, sl, #1
   149e4:	f108 0801 	add.w	r8, r8, #1
   149e8:	e7c6      	b.n	14978 <cbvprintf_package+0x318>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
   149ea:	f898 2000 	ldrb.w	r2, [r8]
   149ee:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
   149f2:	9300      	str	r3, [sp, #0]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
   149f4:	9b02      	ldr	r3, [sp, #8]
   149f6:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
			size = strlen(s) + 1;
   149fa:	9800      	ldr	r0, [sp, #0]
   149fc:	f7f8 f8b8 	bl	cb70 <strlen>
   14a00:	1c42      	adds	r2, r0, #1
   14a02:	e7dc      	b.n	149be <cbvprintf_package+0x35e>
		return -EFAULT;
   14a04:	f06f 000d 	mvn.w	r0, #13
   14a08:	e644      	b.n	14694 <cbvprintf_package+0x34>
   14a0a:	bf00      	nop

00014a0c <cbprintf_package_convert>:
			     cbprintf_convert_cb cb,
			     void *ctx,
			     uint32_t flags,
			     uint16_t *strl,
			     size_t strl_len)
{
   14a0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14a10:	b095      	sub	sp, #84	; 0x54
   14a12:	af00      	add	r7, sp, #0
   14a14:	4604      	mov	r4, r0
   14a16:	61bb      	str	r3, [r7, #24]
   14a18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   14a1a:	627a      	str	r2, [r7, #36]	; 0x24
   14a1c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
   14a20:	60fb      	str	r3, [r7, #12]
	bool fmt_present = flags & CBPRINTF_PACKAGE_CONVERT_PTR_CHECK ? true : false;
	bool rw_cpy;
	bool ro_cpy;
	struct cbprintf_package_desc *in_desc = in_packaged;

	in_len = in_len != 0 ? in_len : get_package_len(in_packaged);
   14a22:	4688      	mov	r8, r1
   14a24:	b949      	cbnz	r1, 14a3a <cbprintf_package_convert+0x2e>
	buf += ros_nbr;
   14a26:	7803      	ldrb	r3, [r0, #0]
	s_nbr     = buf[1];
   14a28:	7845      	ldrb	r5, [r0, #1]
	buf += ros_nbr;
   14a2a:	7880      	ldrb	r0, [r0, #2]
   14a2c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   14a30:	4420      	add	r0, r4
	for (int i = 0; i < s_nbr; i++) {
   14a32:	4545      	cmp	r5, r8
   14a34:	d819      	bhi.n	14a6a <cbprintf_package_convert+0x5e>
	return (size_t)(uintptr_t)(buf - start);
   14a36:	eba0 0804 	sub.w	r8, r0, r4

	/* Get number of RO string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	ros_nbr = in_desc->ro_str_cnt;
   14a3a:	f894 b002 	ldrb.w	fp, [r4, #2]
		(flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) == CBPRINTF_PACKAGE_CONVERT_RO_STR;

	/* Get number of RW string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	rws_nbr = in_desc->rw_str_cnt;
   14a3e:	78e3      	ldrb	r3, [r4, #3]
   14a40:	617b      	str	r3, [r7, #20]
	ro_cpy = ros_nbr &&
   14a42:	f1bb 0f00 	cmp.w	fp, #0
   14a46:	d002      	beq.n	14a4e <cbprintf_package_convert+0x42>
   14a48:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   14a4a:	07d8      	lsls	r0, r3, #31
   14a4c:	d416      	bmi.n	14a7c <cbprintf_package_convert+0x70>
	rw_cpy = rws_nbr > 0 &&
   14a4e:	697b      	ldr	r3, [r7, #20]
   14a50:	bb53      	cbnz	r3, 14aa8 <cbprintf_package_convert+0x9c>
	/* If flags are not set or appending request without rw string indexes
	 * present is chosen, just do a simple copy (or length calculation).
	 * Assuming that it is the most common case.
	 */
	if (!rw_cpy && !ro_cpy) {
		if (cb) {
   14a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   14a54:	b11b      	cbz	r3, 14a5e <cbprintf_package_convert+0x52>
			cb(in_packaged, in_len, ctx);
   14a56:	69ba      	ldr	r2, [r7, #24]
   14a58:	4641      	mov	r1, r8
   14a5a:	4620      	mov	r0, r4
   14a5c:	4798      	blx	r3
		}

		return in_len;
   14a5e:	4645      	mov	r5, r8

	/* Empty call (can be interpreted as flushing) */
	(void)cb(NULL, 0, ctx);

	return out_len;
}
   14a60:	4628      	mov	r0, r5
   14a62:	3754      	adds	r7, #84	; 0x54
   14a64:	46bd      	mov	sp, r7
   14a66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf++;
   14a6a:	1c46      	adds	r6, r0, #1
		buf += strlen((const char *)buf) + 1;
   14a6c:	4630      	mov	r0, r6
   14a6e:	f7f8 f87f 	bl	cb70 <strlen>
   14a72:	3001      	adds	r0, #1
   14a74:	4430      	add	r0, r6
	for (int i = 0; i < s_nbr; i++) {
   14a76:	f108 0801 	add.w	r8, r8, #1
   14a7a:	e7da      	b.n	14a32 <cbprintf_package_convert+0x26>
	rw_cpy = rws_nbr > 0 &&
   14a7c:	7823      	ldrb	r3, [r4, #0]
	args_size = in_desc->len * sizeof(int);
   14a7e:	623b      	str	r3, [r7, #32]
   14a80:	009b      	lsls	r3, r3, #2
   14a82:	613b      	str	r3, [r7, #16]
	uint8_t *str_pos = &buf[args_size];
   14a84:	6a3b      	ldr	r3, [r7, #32]
   14a86:	6862      	ldr	r2, [r4, #4]
	const char *fmt = *(const char **)(buf + sizeof(void *));
   14a88:	61fa      	str	r2, [r7, #28]
	uint8_t *str_pos = &buf[args_size];
   14a8a:	eb04 0a83 	add.w	sl, r4, r3, lsl #2
	if (cb == NULL) {
   14a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   14a90:	2b00      	cmp	r3, #0
   14a92:	f040 80fe 	bne.w	14c92 <cbprintf_package_convert+0x286>
		out_len = (int)in_len;
   14a96:	4645      	mov	r5, r8
		if (ro_cpy) {
   14a98:	eb0b 090a 	add.w	r9, fp, sl
   14a9c:	46d0      	mov	r8, sl
	size_t strl_cnt = 0;
   14a9e:	2600      	movs	r6, #0
			for (int i = 0; i < ros_nbr; i++) {
   14aa0:	45c1      	cmp	r9, r8
   14aa2:	d151      	bne.n	14b48 <cbprintf_package_convert+0x13c>
   14aa4:	44da      	add	sl, fp
   14aa6:	e013      	b.n	14ad0 <cbprintf_package_convert+0xc4>
	rw_cpy = rws_nbr > 0 &&
   14aa8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   14aaa:	0799      	lsls	r1, r3, #30
   14aac:	d5d1      	bpl.n	14a52 <cbprintf_package_convert+0x46>
	args_size = in_desc->len * sizeof(int);
   14aae:	7823      	ldrb	r3, [r4, #0]
   14ab0:	623b      	str	r3, [r7, #32]
   14ab2:	469a      	mov	sl, r3
   14ab4:	009b      	lsls	r3, r3, #2
   14ab6:	613b      	str	r3, [r7, #16]
	const char *fmt = *(const char **)(buf + sizeof(void *));
   14ab8:	6863      	ldr	r3, [r4, #4]
   14aba:	61fb      	str	r3, [r7, #28]
	if (cb == NULL) {
   14abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	uint8_t *str_pos = &buf[args_size];
   14abe:	eb04 0a8a 	add.w	sl, r4, sl, lsl #2
	if (cb == NULL) {
   14ac2:	2b00      	cmp	r3, #0
   14ac4:	d17a      	bne.n	14bbc <cbprintf_package_convert+0x1b0>
		out_len = (int)in_len;
   14ac6:	4645      	mov	r5, r8
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
   14ac8:	f1bb 0f00 	cmp.w	fp, #0
   14acc:	d14f      	bne.n	14b6e <cbprintf_package_convert+0x162>
	size_t strl_cnt = 0;
   14ace:	465e      	mov	r6, fp
		for (int i = 0; i < rws_nbr; i++) {
   14ad0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   14ad2:	f013 0f05 	tst.w	r3, #5
   14ad6:	697b      	ldr	r3, [r7, #20]
   14ad8:	eb0a 0943 	add.w	r9, sl, r3, lsl #1
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
   14adc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   14ade:	f003 0302 	and.w	r3, r3, #2
   14ae2:	bf0c      	ite	eq
   14ae4:	f04f 0b02 	moveq.w	fp, #2
   14ae8:	f04f 0b01 	movne.w	fp, #1
   14aec:	627b      	str	r3, [r7, #36]	; 0x24
		for (int i = 0; i < rws_nbr; i++) {
   14aee:	45ca      	cmp	sl, r9
   14af0:	d0b6      	beq.n	14a60 <cbprintf_package_convert+0x54>
			uint8_t arg_idx = *str_pos++;
   14af2:	f81a 1b02 	ldrb.w	r1, [sl], #2
			const char *str = *(const char **)&buf32[arg_pos];
   14af6:	f81a 3c01 	ldrb.w	r3, [sl, #-1]
   14afa:	f854 8023 	ldr.w	r8, [r4, r3, lsl #2]
   14afe:	4bab      	ldr	r3, [pc, #684]	; (14dac <cbprintf_package_convert+0x3a0>)
   14b00:	4598      	cmp	r8, r3
   14b02:	d302      	bcc.n	14b0a <cbprintf_package_convert+0xfe>
   14b04:	4baa      	ldr	r3, [pc, #680]	; (14db0 <cbprintf_package_convert+0x3a4>)
   14b06:	4598      	cmp	r8, r3
   14b08:	d338      	bcc.n	14b7c <cbprintf_package_convert+0x170>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
   14b0a:	68fb      	ldr	r3, [r7, #12]
   14b0c:	2b00      	cmp	r3, #0
   14b0e:	d042      	beq.n	14b96 <cbprintf_package_convert+0x18a>
   14b10:	69f8      	ldr	r0, [r7, #28]
   14b12:	f00c fdda 	bl	216ca <is_ptr>
   14b16:	2800      	cmp	r0, #0
   14b18:	d03d      	beq.n	14b96 <cbprintf_package_convert+0x18a>
				LOG_WRN("(unsigned) char * used for %%p argument. "
   14b1a:	46e8      	mov	r8, sp
   14b1c:	b08a      	sub	sp, #40	; 0x28
   14b1e:	466a      	mov	r2, sp
   14b20:	4ba4      	ldr	r3, [pc, #656]	; (14db4 <cbprintf_package_convert+0x3a8>)
   14b22:	6153      	str	r3, [r2, #20]
   14b24:	69fb      	ldr	r3, [r7, #28]
   14b26:	e9c2 3106 	strd	r3, r1, [r2, #24]
   14b2a:	f44f 7300 	mov.w	r3, #512	; 0x200
   14b2e:	8413      	strh	r3, [r2, #32]
   14b30:	4ba1      	ldr	r3, [pc, #644]	; (14db8 <cbprintf_package_convert+0x3ac>)
   14b32:	f842 3f10 	str.w	r3, [r2, #16]!
   14b36:	48a1      	ldr	r0, [pc, #644]	; (14dbc <cbprintf_package_convert+0x3b0>)
   14b38:	2300      	movs	r3, #0
   14b3a:	f44f 5112 	mov.w	r1, #9344	; 0x2480
   14b3e:	f000 fd5f 	bl	15600 <z_impl_z_log_msg_static_create>
				out_len -= 2;
   14b42:	3d02      	subs	r5, #2
   14b44:	46c5      	mov	sp, r8
				continue;
   14b46:	e7d2      	b.n	14aee <cbprintf_package_convert+0xe2>
				const char *str = *(const char **)&buf32[*str_pos];
   14b48:	f818 3b01 	ldrb.w	r3, [r8], #1
		return 1 + strlen(str);
   14b4c:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
   14b50:	f7f8 f80e 	bl	cb70 <strlen>
				if (strl && strl_cnt < strl_len) {
   14b54:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
		return 1 + strlen(str);
   14b56:	3001      	adds	r0, #1
				if (strl && strl_cnt < strl_len) {
   14b58:	b13b      	cbz	r3, 14b6a <cbprintf_package_convert+0x15e>
   14b5a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   14b5e:	429e      	cmp	r6, r3
					strl[strl_cnt++] = (uint16_t)len;
   14b60:	bf3e      	ittt	cc
   14b62:	6ffb      	ldrcc	r3, [r7, #124]	; 0x7c
   14b64:	f823 0016 	strhcc.w	r0, [r3, r6, lsl #1]
   14b68:	3601      	addcc	r6, #1
				out_len += len;
   14b6a:	4405      	add	r5, r0
			for (int i = 0; i < ros_nbr; i++) {
   14b6c:	e798      	b.n	14aa0 <cbprintf_package_convert+0x94>
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
   14b6e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   14b70:	f013 0604 	ands.w	r6, r3, #4
	size_t strl_cnt = 0;
   14b74:	bf1c      	itt	ne
   14b76:	6a7e      	ldrne	r6, [r7, #36]	; 0x24
				str_pos += ros_nbr;
   14b78:	44da      	addne	sl, fp
   14b7a:	e7a9      	b.n	14ad0 <cbprintf_package_convert+0xc4>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
   14b7c:	68fb      	ldr	r3, [r7, #12]
   14b7e:	b123      	cbz	r3, 14b8a <cbprintf_package_convert+0x17e>
   14b80:	69f8      	ldr	r0, [r7, #28]
   14b82:	f00c fda2 	bl	216ca <is_ptr>
   14b86:	2800      	cmp	r0, #0
   14b88:	d1c7      	bne.n	14b1a <cbprintf_package_convert+0x10e>
				if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
   14b8a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   14b8c:	07da      	lsls	r2, r3, #31
   14b8e:	d405      	bmi.n	14b9c <cbprintf_package_convert+0x190>
					out_len -= drop_ro_str_pos ? 2 : 1;
   14b90:	eba5 050b 	sub.w	r5, r5, fp
   14b94:	e7ab      	b.n	14aee <cbprintf_package_convert+0xe2>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
   14b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   14b98:	2b00      	cmp	r3, #0
   14b9a:	d0a8      	beq.n	14aee <cbprintf_package_convert+0xe2>
		return 1 + strlen(str);
   14b9c:	4640      	mov	r0, r8
   14b9e:	f7f7 ffe7 	bl	cb70 <strlen>
				if (strl && strl_cnt < strl_len) {
   14ba2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   14ba4:	b143      	cbz	r3, 14bb8 <cbprintf_package_convert+0x1ac>
   14ba6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   14baa:	429e      	cmp	r6, r3
					strl[strl_cnt++] = (uint16_t)len;
   14bac:	bf3f      	itttt	cc
   14bae:	6ffa      	ldrcc	r2, [r7, #124]	; 0x7c
		return 1 + strlen(str);
   14bb0:	1c43      	addcc	r3, r0, #1
					strl[strl_cnt++] = (uint16_t)len;
   14bb2:	f822 3016 	strhcc.w	r3, [r2, r6, lsl #1]
   14bb6:	3601      	addcc	r6, #1
				out_len += (len - 1);
   14bb8:	4405      	add	r5, r0
		for (int i = 0; i < rws_nbr; i++) {
   14bba:	e798      	b.n	14aee <cbprintf_package_convert+0xe2>
	} else if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
   14bbc:	f1bb 0f00 	cmp.w	fp, #0
   14bc0:	d06d      	beq.n	14c9e <cbprintf_package_convert+0x292>
   14bc2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   14bc4:	f013 0604 	ands.w	r6, r3, #4
   14bc8:	d06c      	beq.n	14ca4 <cbprintf_package_convert+0x298>
		keep_cnt = ros_nbr;
   14bca:	46d9      	mov	r9, fp
		scpy_cnt = 0;
   14bcc:	2600      	movs	r6, #0
		dst = keep_str_pos;
   14bce:	f107 0040 	add.w	r0, r7, #64	; 0x40
   14bd2:	465a      	mov	r2, fp
   14bd4:	4651      	mov	r1, sl
   14bd6:	f010 faf6 	bl	251c6 <memcpy>
	str_pos += ros_nbr;
   14bda:	697b      	ldr	r3, [r7, #20]
   14bdc:	005b      	lsls	r3, r3, #1
   14bde:	607b      	str	r3, [r7, #4]
   14be0:	697b      	ldr	r3, [r7, #20]
   14be2:	44da      	add	sl, fp
	for (int i = 0; i < rws_nbr; i++) {
   14be4:	eb0a 0343 	add.w	r3, sl, r3, lsl #1
   14be8:	60bb      	str	r3, [r7, #8]
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
   14bea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   14bec:	f003 0302 	and.w	r3, r3, #2
   14bf0:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < rws_nbr; i++) {
   14bf2:	68bb      	ldr	r3, [r7, #8]
   14bf4:	4553      	cmp	r3, sl
   14bf6:	d157      	bne.n	14ca8 <cbprintf_package_convert+0x29c>
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
   14bf8:	6fb9      	ldr	r1, [r7, #120]	; 0x78
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
   14bfa:	7863      	ldrb	r3, [r4, #1]
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
   14bfc:	6fb8      	ldr	r0, [r7, #120]	; 0x78
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
   14bfe:	0789      	lsls	r1, r1, #30
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
   14c00:	eb06 0203 	add.w	r2, r6, r3
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
   14c04:	bf54      	ite	pl
   14c06:	ea4f 0159 	movpl.w	r1, r9, lsr #1
   14c0a:	2100      	movmi	r1, #0
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
   14c0c:	07c5      	lsls	r5, r0, #31
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
   14c0e:	b2d2      	uxtb	r2, r2
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
   14c10:	f100 809a 	bmi.w	14d48 <cbprintf_package_convert+0x33c>
   14c14:	f010 0f04 	tst.w	r0, #4
   14c18:	bf14      	ite	ne
   14c1a:	4648      	movne	r0, r9
   14c1c:	2000      	moveq	r0, #0
   14c1e:	61fb      	str	r3, [r7, #28]
	*in_desc = out_desc;
   14c20:	7062      	strb	r2, [r4, #1]
   14c22:	70a0      	strb	r0, [r4, #2]
   14c24:	70e1      	strb	r1, [r4, #3]
	rv = cb(in_packaged, args_size, ctx);
   14c26:	69ba      	ldr	r2, [r7, #24]
   14c28:	6939      	ldr	r1, [r7, #16]
   14c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   14c2c:	4620      	mov	r0, r4
   14c2e:	4798      	blx	r3
	if (rv < 0) {
   14c30:	1e05      	subs	r5, r0, #0
   14c32:	f6ff af15 	blt.w	14a60 <cbprintf_package_convert+0x54>
	*in_desc = in_desc_backup;
   14c36:	6a3b      	ldr	r3, [r7, #32]
   14c38:	7023      	strb	r3, [r4, #0]
   14c3a:	69fb      	ldr	r3, [r7, #28]
   14c3c:	7063      	strb	r3, [r4, #1]
   14c3e:	697b      	ldr	r3, [r7, #20]
   14c40:	70e3      	strb	r3, [r4, #3]
	rv = cb(keep_str_pos, keep_cnt, ctx);
   14c42:	4649      	mov	r1, r9
   14c44:	69ba      	ldr	r2, [r7, #24]
   14c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	*in_desc = in_desc_backup;
   14c48:	f884 b002 	strb.w	fp, [r4, #2]
	rv = cb(keep_str_pos, keep_cnt, ctx);
   14c4c:	f107 0040 	add.w	r0, r7, #64	; 0x40
   14c50:	4798      	blx	r3
	if (rv < 0) {
   14c52:	f1b0 0900 	subs.w	r9, r0, #0
   14c56:	f2c0 80a4 	blt.w	14da2 <cbprintf_package_convert+0x396>
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
   14c5a:	693b      	ldr	r3, [r7, #16]
	rv = cb(str_pos, strs_len, ctx);
   14c5c:	69ba      	ldr	r2, [r7, #24]
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
   14c5e:	eba8 010b 	sub.w	r1, r8, fp
   14c62:	1ac9      	subs	r1, r1, r3
	rv = cb(str_pos, strs_len, ctx);
   14c64:	687b      	ldr	r3, [r7, #4]
   14c66:	4650      	mov	r0, sl
   14c68:	1ac9      	subs	r1, r1, r3
   14c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   14c6c:	4798      	blx	r3
	if (rv < 0) {
   14c6e:	2800      	cmp	r0, #0
   14c70:	f2c0 8099 	blt.w	14da6 <cbprintf_package_convert+0x39a>
	out_len += rv;
   14c74:	44a9      	add	r9, r5
	out_len += rv;
   14c76:	eb09 0500 	add.w	r5, r9, r0
	for (int i = 0; i < scpy_cnt; i++) {
   14c7a:	f04f 0b00 	mov.w	fp, #0
		uint8_t loc = cpy_str_pos[i];
   14c7e:	f107 0a30 	add.w	sl, r7, #48	; 0x30
	for (int i = 0; i < scpy_cnt; i++) {
   14c82:	45b3      	cmp	fp, r6
   14c84:	db62      	blt.n	14d4c <cbprintf_package_convert+0x340>
	(void)cb(NULL, 0, ctx);
   14c86:	2100      	movs	r1, #0
   14c88:	69ba      	ldr	r2, [r7, #24]
   14c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   14c8c:	4608      	mov	r0, r1
   14c8e:	4798      	blx	r3
	return out_len;
   14c90:	e6e6      	b.n	14a60 <cbprintf_package_convert+0x54>
	if (cb == NULL) {
   14c92:	465e      	mov	r6, fp
   14c94:	f04f 0900 	mov.w	r9, #0
   14c98:	f107 0030 	add.w	r0, r7, #48	; 0x30
   14c9c:	e799      	b.n	14bd2 <cbprintf_package_convert+0x1c6>
		scpy_cnt = 0;
   14c9e:	465e      	mov	r6, fp
		keep_cnt = 0;
   14ca0:	46d9      	mov	r9, fp
   14ca2:	e79a      	b.n	14bda <cbprintf_package_convert+0x1ce>
   14ca4:	46b1      	mov	r9, r6
   14ca6:	e798      	b.n	14bda <cbprintf_package_convert+0x1ce>
		uint8_t arg_idx = *str_pos++;
   14ca8:	f81a 1b02 	ldrb.w	r1, [sl], #2
   14cac:	4b3f      	ldr	r3, [pc, #252]	; (14dac <cbprintf_package_convert+0x3a0>)
		uint8_t arg_pos = *str_pos++;
   14cae:	f81a 5c01 	ldrb.w	r5, [sl, #-1]
		const char *str = *(const char **)&buf32[arg_pos];
   14cb2:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
   14cb6:	4298      	cmp	r0, r3
   14cb8:	d302      	bcc.n	14cc0 <cbprintf_package_convert+0x2b4>
   14cba:	4b3d      	ldr	r3, [pc, #244]	; (14db0 <cbprintf_package_convert+0x3a4>)
   14cbc:	4298      	cmp	r0, r3
   14cbe:	d31d      	bcc.n	14cfc <cbprintf_package_convert+0x2f0>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
   14cc0:	68fb      	ldr	r3, [r7, #12]
   14cc2:	b123      	cbz	r3, 14cce <cbprintf_package_convert+0x2c2>
   14cc4:	69f8      	ldr	r0, [r7, #28]
   14cc6:	f00c fd00 	bl	216ca <is_ptr>
   14cca:	2800      	cmp	r0, #0
   14ccc:	d191      	bne.n	14bf2 <cbprintf_package_convert+0x1e6>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
   14cce:	683b      	ldr	r3, [r7, #0]
   14cd0:	b9fb      	cbnz	r3, 14d12 <cbprintf_package_convert+0x306>
				keep_str_pos[keep_cnt++] = arg_idx;
   14cd2:	f109 0328 	add.w	r3, r9, #40	; 0x28
   14cd6:	f107 0228 	add.w	r2, r7, #40	; 0x28
   14cda:	f109 0001 	add.w	r0, r9, #1
   14cde:	eb03 0c02 	add.w	ip, r3, r2
				keep_str_pos[keep_cnt++] = arg_pos;
   14ce2:	f107 0350 	add.w	r3, r7, #80	; 0x50
   14ce6:	fa53 f080 	uxtab	r0, r3, r0
   14cea:	f109 0902 	add.w	r9, r9, #2
				keep_str_pos[keep_cnt++] = arg_idx;
   14cee:	f80c 1c10 	strb.w	r1, [ip, #-16]
				keep_str_pos[keep_cnt++] = arg_pos;
   14cf2:	fa5f f989 	uxtb.w	r9, r9
   14cf6:	f800 5c10 	strb.w	r5, [r0, #-16]
	for (int i = 0; i < rws_nbr; i++) {
   14cfa:	e77a      	b.n	14bf2 <cbprintf_package_convert+0x1e6>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
   14cfc:	68fb      	ldr	r3, [r7, #12]
   14cfe:	b12b      	cbz	r3, 14d0c <cbprintf_package_convert+0x300>
   14d00:	69f8      	ldr	r0, [r7, #28]
   14d02:	f00c fce2 	bl	216ca <is_ptr>
   14d06:	2800      	cmp	r0, #0
   14d08:	f47f af73 	bne.w	14bf2 <cbprintf_package_convert+0x1e6>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
   14d0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   14d0e:	07db      	lsls	r3, r3, #31
   14d10:	d509      	bpl.n	14d26 <cbprintf_package_convert+0x31a>
				cpy_str_pos[scpy_cnt++] = arg_pos;
   14d12:	f106 0328 	add.w	r3, r6, #40	; 0x28
   14d16:	f107 0228 	add.w	r2, r7, #40	; 0x28
   14d1a:	1c71      	adds	r1, r6, #1
   14d1c:	189e      	adds	r6, r3, r2
   14d1e:	f806 5c20 	strb.w	r5, [r6, #-32]
   14d22:	b2ce      	uxtb	r6, r1
   14d24:	e765      	b.n	14bf2 <cbprintf_package_convert+0x1e6>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
   14d26:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   14d28:	0758      	lsls	r0, r3, #29
   14d2a:	f57f af62 	bpl.w	14bf2 <cbprintf_package_convert+0x1e6>
				keep_str_pos[keep_cnt++] = arg_pos;
   14d2e:	f109 0328 	add.w	r3, r9, #40	; 0x28
   14d32:	f107 0228 	add.w	r2, r7, #40	; 0x28
   14d36:	f109 0101 	add.w	r1, r9, #1
   14d3a:	eb03 0902 	add.w	r9, r3, r2
   14d3e:	f809 5c10 	strb.w	r5, [r9, #-16]
   14d42:	fa5f f981 	uxtb.w	r9, r1
   14d46:	e754      	b.n	14bf2 <cbprintf_package_convert+0x1e6>
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
   14d48:	2000      	movs	r0, #0
   14d4a:	e768      	b.n	14c1e <cbprintf_package_convert+0x212>
		uint8_t loc = cpy_str_pos[i];
   14d4c:	f81b 300a 	ldrb.w	r3, [fp, sl]
   14d50:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		const char *str = *(const char **)&buf32[loc];
   14d54:	f854 9023 	ldr.w	r9, [r4, r3, lsl #2]
		uint16_t str_len = strl ? strl[i] : 0;
   14d58:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   14d5a:	b1fb      	cbz	r3, 14d9c <cbprintf_package_convert+0x390>
   14d5c:	f833 801b 	ldrh.w	r8, [r3, fp, lsl #1]
		rv = cb(&loc, 1, ctx);
   14d60:	69ba      	ldr	r2, [r7, #24]
   14d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   14d64:	2101      	movs	r1, #1
   14d66:	f107 002f 	add.w	r0, r7, #47	; 0x2f
   14d6a:	4798      	blx	r3
		if (rv < 0) {
   14d6c:	2800      	cmp	r0, #0
   14d6e:	db1a      	blt.n	14da6 <cbprintf_package_convert+0x39a>
		out_len += rv;
   14d70:	4405      	add	r5, r0
	strl = strl > 0 ? strl : strlen(str) + 1;
   14d72:	f1b8 0f00 	cmp.w	r8, #0
   14d76:	d106      	bne.n	14d86 <cbprintf_package_convert+0x37a>
   14d78:	4648      	mov	r0, r9
   14d7a:	f7f7 fef9 	bl	cb70 <strlen>
   14d7e:	f100 0801 	add.w	r8, r0, #1
   14d82:	fa1f f888 	uxth.w	r8, r8
	return cb(str, strl, ctx);
   14d86:	69ba      	ldr	r2, [r7, #24]
   14d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   14d8a:	4641      	mov	r1, r8
   14d8c:	4648      	mov	r0, r9
   14d8e:	4798      	blx	r3
		if (rv < 0) {
   14d90:	2800      	cmp	r0, #0
   14d92:	db08      	blt.n	14da6 <cbprintf_package_convert+0x39a>
		out_len += rv;
   14d94:	4405      	add	r5, r0
	for (int i = 0; i < scpy_cnt; i++) {
   14d96:	f10b 0b01 	add.w	fp, fp, #1
   14d9a:	e772      	b.n	14c82 <cbprintf_package_convert+0x276>
		uint16_t str_len = strl ? strl[i] : 0;
   14d9c:	f8d7 807c 	ldr.w	r8, [r7, #124]	; 0x7c
   14da0:	e7de      	b.n	14d60 <cbprintf_package_convert+0x354>
   14da2:	464d      	mov	r5, r9
   14da4:	e65c      	b.n	14a60 <cbprintf_package_convert+0x54>
   14da6:	4605      	mov	r5, r0
   14da8:	e65a      	b.n	14a60 <cbprintf_package_convert+0x54>
   14daa:	bf00      	nop
   14dac:	00025248 	.word	0x00025248
   14db0:	00027c50 	.word	0x00027c50
   14db4:	00026120 	.word	0x00026120
   14db8:	01000004 	.word	0x01000004
   14dbc:	000255dc 	.word	0x000255dc

00014dc0 <__printk_hook_install>:
 * routine that outputs one ASCII character at a time.
 * @param fn putc routine to install
 */
void __printk_hook_install(int (*fn)(int c))
{
	_char_out = fn;
   14dc0:	4b01      	ldr	r3, [pc, #4]	; (14dc8 <__printk_hook_install+0x8>)
   14dc2:	6018      	str	r0, [r3, #0]
}
   14dc4:	4770      	bx	lr
   14dc6:	bf00      	nop
   14dc8:	20000528 	.word	0x20000528

00014dcc <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
   14dcc:	b530      	push	{r4, r5, lr}
   14dce:	b087      	sub	sp, #28
	struct str_context ctx = { str, size, 0 };
   14dd0:	2500      	movs	r5, #0
   14dd2:	e9cd 0103 	strd	r0, r1, [sp, #12]
{
   14dd6:	4604      	mov	r4, r0
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   14dd8:	9500      	str	r5, [sp, #0]
   14dda:	a903      	add	r1, sp, #12
   14ddc:	4805      	ldr	r0, [pc, #20]	; (14df4 <vsnprintk+0x28>)
	struct str_context ctx = { str, size, 0 };
   14dde:	9505      	str	r5, [sp, #20]
   14de0:	f7fd fd7a 	bl	128d8 <z_cbvprintf_impl>

	cbvprintf(str_out, &ctx, fmt, ap);

	if (ctx.count < ctx.max) {
   14de4:	e9dd 3004 	ldrd	r3, r0, [sp, #16]
   14de8:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
   14dea:	bfb8      	it	lt
   14dec:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
   14dee:	b007      	add	sp, #28
   14df0:	bd30      	pop	{r4, r5, pc}
   14df2:	bf00      	nop
   14df4:	00021749 	.word	0x00021749

00014df8 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   14df8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   14dfc:	8b05      	ldrh	r5, [r0, #24]
{
   14dfe:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   14e00:	0728      	lsls	r0, r5, #28
{
   14e02:	4690      	mov	r8, r2
	if (processing) {
   14e04:	d411      	bmi.n	14e2a <process_event+0x32>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
   14e06:	2902      	cmp	r1, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   14e08:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
   14e0c:	f040 80cd 	bne.w	14faa <process_event+0x1b2>
			evt = process_recheck(mgr);
   14e10:	4620      	mov	r0, r4
   14e12:	f00c fe97 	bl	21b44 <process_recheck>
		}

		if (evt == EVT_NOP) {
   14e16:	b178      	cbz	r0, 14e38 <process_event+0x40>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
   14e18:	3801      	subs	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   14e1a:	8b21      	ldrh	r1, [r4, #24]
   14e1c:	2804      	cmp	r0, #4
   14e1e:	d811      	bhi.n	14e44 <process_event+0x4c>
   14e20:	e8df f000 	tbb	[pc, r0]
   14e24:	856d10c3 	.word	0x856d10c3
   14e28:	95          	.byte	0x95
   14e29:	00          	.byte	0x00
		if (evt == EVT_COMPLETE) {
   14e2a:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   14e2c:	bf0c      	ite	eq
   14e2e:	f045 0510 	orreq.w	r5, r5, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
   14e32:	f045 0520 	orrne.w	r5, r5, #32
   14e36:	8325      	strh	r5, [r4, #24]
   14e38:	f388 8811 	msr	BASEPRI, r8
   14e3c:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
   14e40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   14e44:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   14e48:	45aa      	cmp	sl, r5
   14e4a:	f000 80a6 	beq.w	14f9a <process_event+0x1a2>
	 * a memory barrier when used like this, and we don't have a
	 * Zephyr framework for that.
	 */
	atomic_clear(&l->locked);
#endif
	arch_irq_unlock(key.key);
   14e4e:	2700      	movs	r7, #0
   14e50:	46b9      	mov	r9, r7
   14e52:	463e      	mov	r6, r7
   14e54:	68a3      	ldr	r3, [r4, #8]
   14e56:	2b00      	cmp	r3, #0
   14e58:	f000 80bd 	beq.w	14fd6 <process_event+0x1de>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   14e5c:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
   14e60:	8321      	strh	r1, [r4, #24]
   14e62:	f388 8811 	msr	BASEPRI, r8
   14e66:	f3bf 8f6f 	isb	sy
	return list->head;
   14e6a:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   14e6c:	2900      	cmp	r1, #0
   14e6e:	f000 80bb 	beq.w	14fe8 <process_event+0x1f0>
	return node->next;
   14e72:	680d      	ldr	r5, [r1, #0]
   14e74:	2900      	cmp	r1, #0
   14e76:	f000 80b7 	beq.w	14fe8 <process_event+0x1f0>
		mon->callback(mgr, mon, state, res);
   14e7a:	f8d1 8004 	ldr.w	r8, [r1, #4]
   14e7e:	4633      	mov	r3, r6
   14e80:	4652      	mov	r2, sl
   14e82:	4620      	mov	r0, r4
   14e84:	47c0      	blx	r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   14e86:	2d00      	cmp	r5, #0
   14e88:	d076      	beq.n	14f78 <process_event+0x180>
   14e8a:	682b      	ldr	r3, [r5, #0]
   14e8c:	4629      	mov	r1, r5
   14e8e:	461d      	mov	r5, r3
   14e90:	e7f0      	b.n	14e74 <process_event+0x7c>
   14e92:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   14e96:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   14e98:	2a01      	cmp	r2, #1
   14e9a:	d81b      	bhi.n	14ed4 <process_event+0xdc>
	list->head = NULL;
   14e9c:	2200      	movs	r2, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   14e9e:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
   14ea2:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
   14ea4:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   14ea6:	b289      	uxth	r1, r1
	list->tail = NULL;
   14ea8:	e9c4 2200 	strd	r2, r2, [r4]
		if (state == ONOFF_STATE_TO_ON) {
   14eac:	d109      	bne.n	14ec2 <process_event+0xca>
   14eae:	463b      	mov	r3, r7
   14eb0:	e003      	b.n	14eba <process_event+0xc2>
				mgr->refs += 1U;
   14eb2:	8b62      	ldrh	r2, [r4, #26]
   14eb4:	3201      	adds	r2, #1
   14eb6:	8362      	strh	r2, [r4, #26]
	return node->next;
   14eb8:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   14eba:	2b00      	cmp	r3, #0
   14ebc:	d1f9      	bne.n	14eb2 <process_event+0xba>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   14ebe:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
   14ec2:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   14ec4:	4620      	mov	r0, r4
   14ec6:	f00c fe3d 	bl	21b44 <process_recheck>
   14eca:	2800      	cmp	r0, #0
   14ecc:	d07b      	beq.n	14fc6 <process_event+0x1ce>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   14ece:	f041 0120 	orr.w	r1, r1, #32
   14ed2:	e077      	b.n	14fc4 <process_event+0x1cc>
	} else if (state == ONOFF_STATE_TO_OFF) {
   14ed4:	2b04      	cmp	r3, #4
   14ed6:	d10a      	bne.n	14eee <process_event+0xf6>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   14ed8:	f021 0107 	bic.w	r1, r1, #7
   14edc:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
   14ede:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   14ee0:	4620      	mov	r0, r4
   14ee2:	f00c fe2f 	bl	21b44 <process_recheck>
   14ee6:	b110      	cbz	r0, 14eee <process_event+0xf6>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   14ee8:	f041 0120 	orr.w	r1, r1, #32
   14eec:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   14eee:	8b21      	ldrh	r1, [r4, #24]
   14ef0:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   14ef4:	45aa      	cmp	sl, r5
   14ef6:	d050      	beq.n	14f9a <process_event+0x1a2>
   14ef8:	2700      	movs	r7, #0
		onoff_transition_fn transit = NULL;
   14efa:	46b9      	mov	r9, r7
   14efc:	e7aa      	b.n	14e54 <process_event+0x5c>
			transit = mgr->transitions->start;
   14efe:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   14f00:	f021 0107 	bic.w	r1, r1, #7
   14f04:	f041 0106 	orr.w	r1, r1, #6
				   && !sys_slist_is_empty(&mgr->monitors);
   14f08:	2d06      	cmp	r5, #6
			transit = mgr->transitions->start;
   14f0a:	f8d3 9000 	ldr.w	r9, [r3]
	mgr->flags = (state & ONOFF_STATE_MASK)
   14f0e:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
   14f10:	d12d      	bne.n	14f6e <process_event+0x176>
		    || (transit != NULL)) {
   14f12:	f1b9 0f00 	cmp.w	r9, #0
   14f16:	d040      	beq.n	14f9a <process_event+0x1a2>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   14f18:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
   14f1c:	8321      	strh	r1, [r4, #24]
   14f1e:	f388 8811 	msr	BASEPRI, r8
   14f22:	f3bf 8f6f 	isb	sy
				transit(mgr, transition_complete);
   14f26:	493a      	ldr	r1, [pc, #232]	; (15010 <process_event+0x218>)
   14f28:	4620      	mov	r0, r4
   14f2a:	47c8      	blx	r9
   14f2c:	e029      	b.n	14f82 <process_event+0x18a>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   14f2e:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->stop;
   14f32:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   14f34:	f041 0104 	orr.w	r1, r1, #4
   14f38:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
   14f3a:	2d04      	cmp	r5, #4
			transit = mgr->transitions->stop;
   14f3c:	f8d3 9004 	ldr.w	r9, [r3, #4]
	mgr->flags = (state & ONOFF_STATE_MASK)
   14f40:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
   14f42:	d0e6      	beq.n	14f12 <process_event+0x11a>
   14f44:	2700      	movs	r7, #0
		res = 0;
   14f46:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   14f48:	f04f 0a04 	mov.w	sl, #4
   14f4c:	e782      	b.n	14e54 <process_event+0x5c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   14f4e:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->reset;
   14f52:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   14f54:	f041 0105 	orr.w	r1, r1, #5
   14f58:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
   14f5a:	2d05      	cmp	r5, #5
			transit = mgr->transitions->reset;
   14f5c:	f8d3 9008 	ldr.w	r9, [r3, #8]
	mgr->flags = (state & ONOFF_STATE_MASK)
   14f60:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
   14f62:	d0d6      	beq.n	14f12 <process_event+0x11a>
   14f64:	2700      	movs	r7, #0
		res = 0;
   14f66:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   14f68:	f04f 0a05 	mov.w	sl, #5
   14f6c:	e772      	b.n	14e54 <process_event+0x5c>
				   && !sys_slist_is_empty(&mgr->monitors);
   14f6e:	2700      	movs	r7, #0
		res = 0;
   14f70:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   14f72:	f04f 0a06 	mov.w	sl, #6
   14f76:	e76d      	b.n	14e54 <process_event+0x5c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   14f78:	462b      	mov	r3, r5
   14f7a:	e787      	b.n	14e8c <process_event+0x94>
			if (transit != NULL) {
   14f7c:	f1b9 0f00 	cmp.w	r9, #0
   14f80:	d1d1      	bne.n	14f26 <process_event+0x12e>
	__asm__ volatile(
   14f82:	f04f 0340 	mov.w	r3, #64	; 0x40
   14f86:	f3ef 8811 	mrs	r8, BASEPRI
   14f8a:	f383 8812 	msr	BASEPRI_MAX, r3
   14f8e:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   14f92:	8b23      	ldrh	r3, [r4, #24]
   14f94:	f023 0308 	bic.w	r3, r3, #8
   14f98:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   14f9a:	8b25      	ldrh	r5, [r4, #24]
   14f9c:	06ea      	lsls	r2, r5, #27
   14f9e:	d52e      	bpl.n	14ffe <process_event+0x206>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   14fa0:	f025 0310 	bic.w	r3, r5, #16
   14fa4:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
   14fa6:	f005 0507 	and.w	r5, r5, #7
			res = mgr->last_res;
   14faa:	6966      	ldr	r6, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   14fac:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
   14fae:	2e00      	cmp	r6, #0
   14fb0:	f6bf af6f 	bge.w	14e92 <process_event+0x9a>
	list->head = NULL;
   14fb4:	2300      	movs	r3, #0
		*clients = mgr->clients;
   14fb6:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
   14fb8:	e9c4 3300 	strd	r3, r3, [r4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   14fbc:	f021 0107 	bic.w	r1, r1, #7
   14fc0:	f041 0101 	orr.w	r1, r1, #1
			mgr->flags |= ONOFF_FLAG_RECHECK;
   14fc4:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   14fc6:	8b21      	ldrh	r1, [r4, #24]
   14fc8:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   14fcc:	45aa      	cmp	sl, r5
   14fce:	f04f 0900 	mov.w	r9, #0
   14fd2:	f47f af3f 	bne.w	14e54 <process_event+0x5c>
		    || !sys_slist_is_empty(&clients)
   14fd6:	2f00      	cmp	r7, #0
   14fd8:	d09b      	beq.n	14f12 <process_event+0x11a>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   14fda:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
   14fde:	8321      	strh	r1, [r4, #24]
	__asm__ volatile(
   14fe0:	f388 8811 	msr	BASEPRI, r8
   14fe4:	f3bf 8f6f 	isb	sy
			if (!sys_slist_is_empty(&clients)) {
   14fe8:	2f00      	cmp	r7, #0
   14fea:	d0c7      	beq.n	14f7c <process_event+0x184>
	return node->next;
   14fec:	683d      	ldr	r5, [r7, #0]
		notify_one(mgr, cli, state, res);
   14fee:	4639      	mov	r1, r7
   14ff0:	4633      	mov	r3, r6
   14ff2:	4652      	mov	r2, sl
   14ff4:	4620      	mov	r0, r4
   14ff6:	f00c fdd1 	bl	21b9c <notify_one>
	list->head = node;
   14ffa:	462f      	mov	r7, r5
	while (!sys_slist_is_empty(list)) {
   14ffc:	e7f4      	b.n	14fe8 <process_event+0x1f0>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   14ffe:	06ab      	lsls	r3, r5, #26
   15000:	f57f af1a 	bpl.w	14e38 <process_event+0x40>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   15004:	f025 0320 	bic.w	r3, r5, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   15008:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
   1500a:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
   1500e:	e6ff      	b.n	14e10 <process_event+0x18>
   15010:	00021bc9 	.word	0x00021bc9

00015014 <extract_decimal>:
{
   15014:	b5f0      	push	{r4, r5, r6, r7, lr}
	while (isdigit((int)(unsigned char)*sp)) {
   15016:	4e09      	ldr	r6, [pc, #36]	; (1503c <extract_decimal+0x28>)
   15018:	6801      	ldr	r1, [r0, #0]
{
   1501a:	4602      	mov	r2, r0
		val = 10U * val + *sp++ - '0';
   1501c:	270a      	movs	r7, #10
	size_t val = 0;
   1501e:	2000      	movs	r0, #0
   15020:	460b      	mov	r3, r1
	while (isdigit((int)(unsigned char)*sp)) {
   15022:	3101      	adds	r1, #1
   15024:	781c      	ldrb	r4, [r3, #0]
   15026:	5d35      	ldrb	r5, [r6, r4]
   15028:	076d      	lsls	r5, r5, #29
   1502a:	d401      	bmi.n	15030 <extract_decimal+0x1c>
	*str = sp;
   1502c:	6013      	str	r3, [r2, #0]
}
   1502e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		val = 10U * val + *sp++ - '0';
   15030:	fb07 4300 	mla	r3, r7, r0, r4
   15034:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   15038:	e7f2      	b.n	15020 <extract_decimal+0xc>
   1503a:	bf00      	nop
   1503c:	00027b4d 	.word	0x00027b4d

00015040 <encode_uint>:
{
   15040:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15044:	4615      	mov	r5, r2
   15046:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
   15048:	78d3      	ldrb	r3, [r2, #3]
   1504a:	4a22      	ldr	r2, [pc, #136]	; (150d4 <encode_uint+0x94>)
   1504c:	f812 b003 	ldrb.w	fp, [r2, r3]
	switch (specifier) {
   15050:	2b6f      	cmp	r3, #111	; 0x6f
{
   15052:	4680      	mov	r8, r0
   15054:	460f      	mov	r7, r1
   15056:	f00b 0b03 	and.w	fp, fp, #3
	switch (specifier) {
   1505a:	d029      	beq.n	150b0 <encode_uint+0x70>
   1505c:	d824      	bhi.n	150a8 <encode_uint+0x68>
		return 10;
   1505e:	2b58      	cmp	r3, #88	; 0x58
   15060:	bf0c      	ite	eq
   15062:	2610      	moveq	r6, #16
   15064:	260a      	movne	r6, #10
	char *bp = bps + (bpe - bps);
   15066:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
   1506a:	4632      	mov	r2, r6
   1506c:	2300      	movs	r3, #0
   1506e:	4640      	mov	r0, r8
   15070:	4639      	mov	r1, r7
   15072:	f7eb fd33 	bl	adc <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   15076:	2a09      	cmp	r2, #9
   15078:	b2d4      	uxtb	r4, r2
   1507a:	d81e      	bhi.n	150ba <encode_uint+0x7a>
   1507c:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   1507e:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
   15080:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
   15082:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
   15086:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
   1508a:	d301      	bcc.n	15090 <encode_uint+0x50>
   1508c:	45d1      	cmp	r9, sl
   1508e:	d811      	bhi.n	150b4 <encode_uint+0x74>
	if (conv->flag_hash) {
   15090:	782b      	ldrb	r3, [r5, #0]
   15092:	069b      	lsls	r3, r3, #26
   15094:	d505      	bpl.n	150a2 <encode_uint+0x62>
		if (radix == 8) {
   15096:	2e08      	cmp	r6, #8
   15098:	d115      	bne.n	150c6 <encode_uint+0x86>
			conv->altform_0 = true;
   1509a:	78ab      	ldrb	r3, [r5, #2]
   1509c:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   150a0:	70ab      	strb	r3, [r5, #2]
}
   150a2:	4648      	mov	r0, r9
   150a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   150a8:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
   150ac:	2b70      	cmp	r3, #112	; 0x70
   150ae:	e7d7      	b.n	15060 <encode_uint+0x20>
	switch (specifier) {
   150b0:	2608      	movs	r6, #8
   150b2:	e7d8      	b.n	15066 <encode_uint+0x26>
		value /= radix;
   150b4:	4680      	mov	r8, r0
   150b6:	460f      	mov	r7, r1
   150b8:	e7d7      	b.n	1506a <encode_uint+0x2a>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   150ba:	f1bb 0f01 	cmp.w	fp, #1
   150be:	bf0c      	ite	eq
   150c0:	3437      	addeq	r4, #55	; 0x37
   150c2:	3457      	addne	r4, #87	; 0x57
   150c4:	e7db      	b.n	1507e <encode_uint+0x3e>
		} else if (radix == 16) {
   150c6:	2e10      	cmp	r6, #16
   150c8:	d1eb      	bne.n	150a2 <encode_uint+0x62>
			conv->altform_0c = true;
   150ca:	78ab      	ldrb	r3, [r5, #2]
   150cc:	f043 0310 	orr.w	r3, r3, #16
   150d0:	e7e6      	b.n	150a0 <encode_uint+0x60>
   150d2:	bf00      	nop
   150d4:	00027b4d 	.word	0x00027b4d

000150d8 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   150d8:	f009 b8c4 	b.w	1e264 <SystemInit>

000150dc <activate_foreach_backend>:
		z_log_runtime_filters_init();
	}
}

static uint32_t activate_foreach_backend(uint32_t mask)
{
   150dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	while (mask_cpy) {
		uint32_t i = __builtin_ctz(mask_cpy);
		const struct log_backend *backend = log_backend_get(i);

		mask_cpy &= ~BIT(i);
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
   150e0:	f8df 8058 	ldr.w	r8, [pc, #88]	; 1513c <activate_foreach_backend+0x60>
{
   150e4:	4604      	mov	r4, r0
	while (mask_cpy) {
   150e6:	4607      	mov	r7, r0
		mask_cpy &= ~BIT(i);
   150e8:	f04f 0901 	mov.w	r9, #1
	while (mask_cpy) {
   150ec:	b914      	cbnz	r4, 150f4 <activate_foreach_backend+0x18>
					   CONFIG_LOG_MAX_LEVEL);
		}
	}

	return mask;
}
   150ee:	4638      	mov	r0, r7
   150f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint32_t i = __builtin_ctz(mask_cpy);
   150f4:	fa94 f5a4 	rbit	r5, r4
   150f8:	fab5 f585 	clz	r5, r5
		mask_cpy &= ~BIT(i);
   150fc:	fa09 f305 	lsl.w	r3, r9, r5
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
   15100:	012e      	lsls	r6, r5, #4
   15102:	eb08 1505 	add.w	r5, r8, r5, lsl #4
		mask_cpy &= ~BIT(i);
   15106:	ea6f 0a03 	mvn.w	sl, r3
   1510a:	ea24 0403 	bic.w	r4, r4, r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
   1510e:	7b2b      	ldrb	r3, [r5, #12]
   15110:	2b00      	cmp	r3, #0
   15112:	d0eb      	beq.n	150ec <activate_foreach_backend+0x10>
 * @retval -EBUSY if backend is not yet ready.
 */
static inline int log_backend_is_ready(const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	if (backend->api->is_ready != NULL) {
   15114:	f858 3006 	ldr.w	r3, [r8, r6]
   15118:	691b      	ldr	r3, [r3, #16]
   1511a:	b94b      	cbnz	r3, 15130 <activate_foreach_backend+0x54>
					   backend->cb->ctx,
   1511c:	4446      	add	r6, r8
			log_backend_enable(backend,
   1511e:	2204      	movs	r2, #4
   15120:	6873      	ldr	r3, [r6, #4]
   15122:	4628      	mov	r0, r5
   15124:	6819      	ldr	r1, [r3, #0]
			mask &= ~BIT(i);
   15126:	ea07 070a 	and.w	r7, r7, sl
			log_backend_enable(backend,
   1512a:	f000 fa55 	bl	155d8 <log_backend_enable>
   1512e:	e7dd      	b.n	150ec <activate_foreach_backend+0x10>
		return backend->api->is_ready(backend);
   15130:	4628      	mov	r0, r5
   15132:	4798      	blx	r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
   15134:	2800      	cmp	r0, #0
   15136:	d1d9      	bne.n	150ec <activate_foreach_backend+0x10>
   15138:	e7f0      	b.n	1511c <activate_foreach_backend+0x40>
   1513a:	bf00      	nop
   1513c:	0002564c 	.word	0x0002564c

00015140 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
   15140:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
   15142:	4910      	ldr	r1, [pc, #64]	; (15184 <enable_logger+0x44>)
   15144:	4810      	ldr	r0, [pc, #64]	; (15188 <enable_logger+0x48>)
{
   15146:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
   15148:	2200      	movs	r2, #0
   1514a:	f00f fe3e 	bl	24dca <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1514e:	4d0f      	ldr	r5, [pc, #60]	; (1518c <enable_logger+0x4c>)
   15150:	490f      	ldr	r1, [pc, #60]	; (15190 <enable_logger+0x50>)
   15152:	2200      	movs	r2, #0
   15154:	2300      	movs	r3, #0
   15156:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1515a:	2400      	movs	r4, #0
   1515c:	230e      	movs	r3, #14
   1515e:	e9cd 3403 	strd	r3, r4, [sp, #12]
   15162:	e9cd 4401 	strd	r4, r4, [sp, #4]
   15166:	4b0b      	ldr	r3, [pc, #44]	; (15194 <enable_logger+0x54>)
   15168:	9400      	str	r4, [sp, #0]
   1516a:	f44f 7240 	mov.w	r2, #768	; 0x300
   1516e:	4628      	mov	r0, r5
   15170:	f00a fa5c 	bl	1f62c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   15174:	4908      	ldr	r1, [pc, #32]	; (15198 <enable_logger+0x58>)
   15176:	4628      	mov	r0, r5
   15178:	f00f fae2 	bl	24740 <z_impl_k_thread_name_set>
	} else {
		(void)z_log_init(false, false);
	}

	return 0;
}
   1517c:	4620      	mov	r0, r4
   1517e:	b009      	add	sp, #36	; 0x24
   15180:	bd30      	pop	{r4, r5, pc}
   15182:	bf00      	nop
   15184:	0001519d 	.word	0x0001519d
   15188:	20001b50 	.word	0x20001b50
   1518c:	20001680 	.word	0x20001680
   15190:	20007a80 	.word	0x20007a80
   15194:	00015485 	.word	0x00015485
   15198:	000261da 	.word	0x000261da

0001519c <log_process_thread_timer_expiry_fn>:
	z_impl_k_sem_give(sem);
   1519c:	4801      	ldr	r0, [pc, #4]	; (151a4 <log_process_thread_timer_expiry_fn+0x8>)
   1519e:	f00a bbd3 	b.w	1f948 <z_impl_k_sem_give>
   151a2:	bf00      	nop
   151a4:	20000844 	.word	0x20000844

000151a8 <z_log_init>:
{
   151a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   151ac:	4680      	mov	r8, r0
	if (atomic_inc(&initialized) != 0) {
   151ae:	481f      	ldr	r0, [pc, #124]	; (1522c <z_log_init+0x84>)
{
   151b0:	460f      	mov	r7, r1
	if (atomic_inc(&initialized) != 0) {
   151b2:	f00d f813 	bl	221dc <atomic_inc>
   151b6:	4606      	mov	r6, r0
   151b8:	2800      	cmp	r0, #0
   151ba:	d030      	beq.n	1521e <z_log_init+0x76>
	uint32_t mask = 0;
   151bc:	2500      	movs	r5, #0
}
   151be:	4628      	mov	r0, r5
   151c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (backend->autostart) {
   151c4:	7b23      	ldrb	r3, [r4, #12]
   151c6:	b173      	cbz	r3, 151e6 <z_log_init+0x3e>
	if (backend->api->init) {
   151c8:	6823      	ldr	r3, [r4, #0]
   151ca:	68db      	ldr	r3, [r3, #12]
   151cc:	b10b      	cbz	r3, 151d2 <z_log_init+0x2a>
		backend->api->init(backend);
   151ce:	4620      	mov	r0, r4
   151d0:	4798      	blx	r3
	if (backend->api->is_ready != NULL) {
   151d2:	6823      	ldr	r3, [r4, #0]
   151d4:	691b      	ldr	r3, [r3, #16]
   151d6:	b9d3      	cbnz	r3, 1520e <z_log_init+0x66>
				log_backend_enable(backend,
   151d8:	6863      	ldr	r3, [r4, #4]
   151da:	2204      	movs	r2, #4
   151dc:	6819      	ldr	r1, [r3, #0]
   151de:	4620      	mov	r0, r4
   151e0:	f000 f9fa 	bl	155d8 <log_backend_enable>
			i++;
   151e4:	3601      	adds	r6, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   151e6:	3410      	adds	r4, #16
   151e8:	454c      	cmp	r4, r9
   151ea:	d3eb      	bcc.n	151c4 <z_log_init+0x1c>
	if (blocking) {
   151ec:	f1b8 0f00 	cmp.w	r8, #0
   151f0:	d0e5      	beq.n	151be <z_log_init+0x16>
		while (mask) {
   151f2:	2d00      	cmp	r5, #0
   151f4:	d0e2      	beq.n	151bc <z_log_init+0x14>
			mask = activate_foreach_backend(mask);
   151f6:	4628      	mov	r0, r5
   151f8:	f7ff ff70 	bl	150dc <activate_foreach_backend>
   151fc:	4605      	mov	r5, r0
			if (IS_ENABLED(CONFIG_MULTITHREADING) && can_sleep) {
   151fe:	2f00      	cmp	r7, #0
   15200:	d0f7      	beq.n	151f2 <z_log_init+0x4a>
	return z_impl_k_sleep(timeout);
   15202:	2100      	movs	r1, #0
   15204:	f44f 70a4 	mov.w	r0, #328	; 0x148
   15208:	f00a ffe8 	bl	201dc <z_impl_k_sleep>
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
{
	return k_sleep(Z_TIMEOUT_MS(ms));
   1520c:	e7f1      	b.n	151f2 <z_log_init+0x4a>
		return backend->api->is_ready(backend);
   1520e:	4620      	mov	r0, r4
   15210:	4798      	blx	r3
			if (log_backend_is_ready(backend) == 0) {
   15212:	2800      	cmp	r0, #0
   15214:	d0e0      	beq.n	151d8 <z_log_init+0x30>
				mask |= BIT(i);
   15216:	fa0a f306 	lsl.w	r3, sl, r6
   1521a:	431d      	orrs	r5, r3
   1521c:	e7e2      	b.n	151e4 <z_log_init+0x3c>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   1521e:	4c04      	ldr	r4, [pc, #16]	; (15230 <z_log_init+0x88>)
   15220:	f8df 9010 	ldr.w	r9, [pc, #16]	; 15234 <z_log_init+0x8c>
	uint32_t mask = 0;
   15224:	4605      	mov	r5, r0
				mask |= BIT(i);
   15226:	f04f 0a01 	mov.w	sl, #1
   1522a:	e7dd      	b.n	151e8 <z_log_init+0x40>
   1522c:	20004ed0 	.word	0x20004ed0
   15230:	0002564c 	.word	0x0002564c
   15234:	0002565c 	.word	0x0002565c

00015238 <log_format_func_t_get>:
}
   15238:	4b01      	ldr	r3, [pc, #4]	; (15240 <log_format_func_t_get+0x8>)
   1523a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   1523e:	4770      	bx	lr
   15240:	0002576c 	.word	0x0002576c

00015244 <log_set_timestamp_func>:
{
   15244:	b508      	push	{r3, lr}
   15246:	4603      	mov	r3, r0
   15248:	4608      	mov	r0, r1
	if (timestamp_getter == NULL) {
   1524a:	b12b      	cbz	r3, 15258 <log_set_timestamp_func+0x14>
	timestamp_func = timestamp_getter;
   1524c:	4a04      	ldr	r2, [pc, #16]	; (15260 <log_set_timestamp_func+0x1c>)
   1524e:	6013      	str	r3, [r2, #0]
		log_output_timestamp_freq_set(freq);
   15250:	f000 fc4a 	bl	15ae8 <log_output_timestamp_freq_set>
	return 0;
   15254:	2000      	movs	r0, #0
}
   15256:	bd08      	pop	{r3, pc}
		return -EINVAL;
   15258:	f06f 0015 	mvn.w	r0, #21
   1525c:	e7fb      	b.n	15256 <log_set_timestamp_func+0x12>
   1525e:	bf00      	nop
   15260:	2000052c 	.word	0x2000052c

00015264 <z_log_notify_backend_enabled>:
{
   15264:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
   15266:	4c04      	ldr	r4, [pc, #16]	; (15278 <z_log_notify_backend_enabled+0x14>)
   15268:	7823      	ldrb	r3, [r4, #0]
   1526a:	b913      	cbnz	r3, 15272 <z_log_notify_backend_enabled+0xe>
	z_impl_k_sem_give(sem);
   1526c:	4803      	ldr	r0, [pc, #12]	; (1527c <z_log_notify_backend_enabled+0x18>)
   1526e:	f00a fb6b 	bl	1f948 <z_impl_k_sem_give>
	backend_attached = true;
   15272:	2301      	movs	r3, #1
   15274:	7023      	strb	r3, [r4, #0]
}
   15276:	bd10      	pop	{r4, pc}
   15278:	2000538e 	.word	0x2000538e
   1527c:	20000844 	.word	0x20000844

00015280 <z_log_dropped>:
{
   15280:	b510      	push	{r4, lr}
   15282:	4604      	mov	r4, r0
	atomic_inc(&dropped_cnt);
   15284:	4808      	ldr	r0, [pc, #32]	; (152a8 <z_log_dropped+0x28>)
   15286:	f00c ffa9 	bl	221dc <atomic_inc>
	if (buffered) {
   1528a:	b15c      	cbz	r4, 152a4 <z_log_dropped+0x24>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1528c:	f3bf 8f5b 	dmb	ish
   15290:	4b06      	ldr	r3, [pc, #24]	; (152ac <z_log_dropped+0x2c>)
   15292:	e853 1f00 	ldrex	r1, [r3]
   15296:	3901      	subs	r1, #1
   15298:	e843 1200 	strex	r2, r1, [r3]
   1529c:	2a00      	cmp	r2, #0
   1529e:	d1f8      	bne.n	15292 <z_log_dropped+0x12>
   152a0:	f3bf 8f5b 	dmb	ish
}
   152a4:	bd10      	pop	{r4, pc}
   152a6:	bf00      	nop
   152a8:	20004ec8 	.word	0x20004ec8
   152ac:	20004ecc 	.word	0x20004ecc

000152b0 <z_log_dropped_read_and_clear>:
}
   152b0:	2000      	movs	r0, #0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   152b2:	4b06      	ldr	r3, [pc, #24]	; (152cc <z_log_dropped_read_and_clear+0x1c>)
   152b4:	f3bf 8f5b 	dmb	ish
   152b8:	4601      	mov	r1, r0
   152ba:	e853 0f00 	ldrex	r0, [r3]
   152be:	e843 1200 	strex	r2, r1, [r3]
   152c2:	2a00      	cmp	r2, #0
   152c4:	d1f9      	bne.n	152ba <z_log_dropped_read_and_clear+0xa>
   152c6:	f3bf 8f5b 	dmb	ish
   152ca:	4770      	bx	lr
   152cc:	20004ec8 	.word	0x20004ec8

000152d0 <dropped_notify>:
{
   152d0:	b570      	push	{r4, r5, r6, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
   152d2:	f7ff ffed 	bl	152b0 <z_log_dropped_read_and_clear>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   152d6:	4c08      	ldr	r4, [pc, #32]	; (152f8 <dropped_notify+0x28>)
   152d8:	4e08      	ldr	r6, [pc, #32]	; (152fc <dropped_notify+0x2c>)
	uint32_t dropped = z_log_dropped_read_and_clear();
   152da:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   152dc:	42b4      	cmp	r4, r6
   152de:	d300      	bcc.n	152e2 <dropped_notify+0x12>
}
   152e0:	bd70      	pop	{r4, r5, r6, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
   152e2:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
   152e4:	795b      	ldrb	r3, [r3, #5]
   152e6:	b12b      	cbz	r3, 152f4 <dropped_notify+0x24>
	if (backend->api->dropped != NULL) {
   152e8:	6823      	ldr	r3, [r4, #0]
   152ea:	685b      	ldr	r3, [r3, #4]
   152ec:	b113      	cbz	r3, 152f4 <dropped_notify+0x24>
		backend->api->dropped(backend, cnt);
   152ee:	4629      	mov	r1, r5
   152f0:	4620      	mov	r0, r4
   152f2:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   152f4:	3410      	adds	r4, #16
   152f6:	e7f1      	b.n	152dc <dropped_notify+0xc>
   152f8:	0002564c 	.word	0x0002564c
   152fc:	0002565c 	.word	0x0002565c

00015300 <z_log_msg_init>:
{
   15300:	b510      	push	{r4, lr}
	mpsc_pbuf_init(&log_buffer, &mpsc_config);
   15302:	4c04      	ldr	r4, [pc, #16]	; (15314 <z_log_msg_init+0x14>)
   15304:	4904      	ldr	r1, [pc, #16]	; (15318 <z_log_msg_init+0x18>)
   15306:	4620      	mov	r0, r4
   15308:	f00c fe05 	bl	21f16 <mpsc_pbuf_init>
	curr_log_buffer = &log_buffer;
   1530c:	4b03      	ldr	r3, [pc, #12]	; (1531c <z_log_msg_init+0x1c>)
   1530e:	601c      	str	r4, [r3, #0]
}
   15310:	bd10      	pop	{r4, pc}
   15312:	bf00      	nop
   15314:	20000784 	.word	0x20000784
   15318:	00025758 	.word	0x00025758
   1531c:	20004ec0 	.word	0x20004ec0

00015320 <log_core_init>:
{
   15320:	b508      	push	{r3, lr}
	panic_mode = false;
   15322:	4a07      	ldr	r2, [pc, #28]	; (15340 <log_core_init+0x20>)
		log_set_timestamp_func(default_get_timestamp,
   15324:	4807      	ldr	r0, [pc, #28]	; (15344 <log_core_init+0x24>)
	panic_mode = false;
   15326:	2300      	movs	r3, #0
   15328:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
   1532a:	4a07      	ldr	r2, [pc, #28]	; (15348 <log_core_init+0x28>)
		log_set_timestamp_func(default_get_timestamp,
   1532c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
	dropped_cnt = 0;
   15330:	6013      	str	r3, [r2, #0]
		log_set_timestamp_func(default_get_timestamp,
   15332:	f7ff ff87 	bl	15244 <log_set_timestamp_func>
}
   15336:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		z_log_msg_init();
   1533a:	f7ff bfe1 	b.w	15300 <z_log_msg_init>
   1533e:	bf00      	nop
   15340:	2000538f 	.word	0x2000538f
   15344:	000221d9 	.word	0x000221d9
   15348:	20004ec8 	.word	0x20004ec8

0001534c <z_log_msg_alloc>:
{
   1534c:	4601      	mov	r1, r0
	return (struct log_msg *)mpsc_pbuf_alloc(buffer, wlen,
   1534e:	2200      	movs	r2, #0
   15350:	4801      	ldr	r0, [pc, #4]	; (15358 <z_log_msg_alloc+0xc>)
   15352:	2300      	movs	r3, #0
   15354:	f00c be00 	b.w	21f58 <mpsc_pbuf_alloc>
   15358:	20000784 	.word	0x20000784

0001535c <z_log_msg_local_claim>:
	return (union log_msg_generic *)mpsc_pbuf_claim(&log_buffer);
   1535c:	4801      	ldr	r0, [pc, #4]	; (15364 <z_log_msg_local_claim+0x8>)
   1535e:	f00c be99 	b.w	22094 <mpsc_pbuf_claim>
   15362:	bf00      	nop
   15364:	20000784 	.word	0x20000784

00015368 <z_log_msg_free>:
	mpsc_pbuf_free(buffer, &msg->buf);
   15368:	4b02      	ldr	r3, [pc, #8]	; (15374 <z_log_msg_free+0xc>)
{
   1536a:	4601      	mov	r1, r0
	mpsc_pbuf_free(buffer, &msg->buf);
   1536c:	6818      	ldr	r0, [r3, #0]
   1536e:	f00c bee1 	b.w	22134 <mpsc_pbuf_free>
   15372:	bf00      	nop
   15374:	20004ec0 	.word	0x20004ec0

00015378 <z_log_msg_pending>:
	return mpsc_pbuf_is_pending(buffer);
   15378:	4801      	ldr	r0, [pc, #4]	; (15380 <z_log_msg_pending+0x8>)
   1537a:	f00c bf0f 	b.w	2219c <mpsc_pbuf_is_pending>
   1537e:	bf00      	nop
   15380:	20000784 	.word	0x20000784

00015384 <z_impl_log_process>:
{
   15384:	b570      	push	{r4, r5, r6, lr}
	if (!backend_attached) {
   15386:	4b28      	ldr	r3, [pc, #160]	; (15428 <z_impl_log_process+0xa4>)
   15388:	7818      	ldrb	r0, [r3, #0]
   1538a:	2800      	cmp	r0, #0
   1538c:	d04b      	beq.n	15426 <z_impl_log_process+0xa2>
	return z_log_msg_local_claim();
   1538e:	f7ff ffe5 	bl	1535c <z_log_msg_local_claim>
	if (msg) {
   15392:	4605      	mov	r5, r0
   15394:	b190      	cbz	r0, 153bc <z_impl_log_process+0x38>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   15396:	f3bf 8f5b 	dmb	ish
   1539a:	4b24      	ldr	r3, [pc, #144]	; (1542c <z_impl_log_process+0xa8>)
   1539c:	e853 1f00 	ldrex	r1, [r3]
   153a0:	3901      	subs	r1, #1
   153a2:	e843 1200 	strex	r2, r1, [r3]
   153a6:	2a00      	cmp	r2, #0
   153a8:	d1f8      	bne.n	1539c <z_impl_log_process+0x18>
   153aa:	f3bf 8f5b 	dmb	ish
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   153ae:	4c20      	ldr	r4, [pc, #128]	; (15430 <z_impl_log_process+0xac>)
   153b0:	4e20      	ldr	r6, [pc, #128]	; (15434 <z_impl_log_process+0xb0>)
   153b2:	42b4      	cmp	r4, r6
   153b4:	d32d      	bcc.n	15412 <z_impl_log_process+0x8e>
		z_log_msg_free(msg);
   153b6:	4628      	mov	r0, r5
   153b8:	f7ff ffd6 	bl	15368 <z_log_msg_free>
	return dropped_cnt > 0;
   153bc:	4b1e      	ldr	r3, [pc, #120]	; (15438 <z_impl_log_process+0xb4>)
   153be:	4c1f      	ldr	r4, [pc, #124]	; (1543c <z_impl_log_process+0xb8>)
		if ((dropped_pend || unordered_pend) &&
   153c0:	681b      	ldr	r3, [r3, #0]
   153c2:	2b00      	cmp	r3, #0
   153c4:	dd19      	ble.n	153fa <z_impl_log_process+0x76>
	return z_impl_k_uptime_ticks();
   153c6:	f00f fcd8 	bl	24d7a <z_impl_k_uptime_ticks>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
   153ca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   153ce:	fba0 0302 	umull	r0, r3, r0, r2
   153d2:	fb02 3101 	mla	r1, r2, r1, r3
   153d6:	0bc3      	lsrs	r3, r0, #15
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
   153d8:	e9d4 2000 	ldrd	r2, r0, [r4]
   153dc:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
   153e0:	1a9b      	subs	r3, r3, r2
   153e2:	ea4f 31d1 	mov.w	r1, r1, lsr #15
		if ((dropped_pend || unordered_pend) &&
   153e6:	f240 32e9 	movw	r2, #1001	; 0x3e9
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
   153ea:	eb61 0100 	sbc.w	r1, r1, r0
		if ((dropped_pend || unordered_pend) &&
   153ee:	4293      	cmp	r3, r2
   153f0:	f171 0100 	sbcs.w	r1, r1, #0
   153f4:	d301      	bcc.n	153fa <z_impl_log_process+0x76>
				dropped_notify();
   153f6:	f7ff ff6b 	bl	152d0 <dropped_notify>
		last_failure_report += CONFIG_LOG_FAILURE_REPORT_PERIOD;
   153fa:	e9d4 3200 	ldrd	r3, r2, [r4]
   153fe:	f513 737a 	adds.w	r3, r3, #1000	; 0x3e8
   15402:	f142 0200 	adc.w	r2, r2, #0
   15406:	e9c4 3200 	strd	r3, r2, [r4]
}
   1540a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return z_log_msg_pending();
   1540e:	f7ff bfb3 	b.w	15378 <z_log_msg_pending>
	return backend->cb->active;
   15412:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend) &&
   15414:	795b      	ldrb	r3, [r3, #5]
   15416:	b123      	cbz	r3, 15422 <z_impl_log_process+0x9e>
	backend->api->process(backend, msg);
   15418:	6823      	ldr	r3, [r4, #0]
   1541a:	4629      	mov	r1, r5
   1541c:	681b      	ldr	r3, [r3, #0]
   1541e:	4620      	mov	r0, r4
   15420:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   15422:	3410      	adds	r4, #16
   15424:	e7c5      	b.n	153b2 <z_impl_log_process+0x2e>
}
   15426:	bd70      	pop	{r4, r5, r6, pc}
   15428:	2000538e 	.word	0x2000538e
   1542c:	20004ecc 	.word	0x20004ecc
   15430:	0002564c 	.word	0x0002564c
   15434:	0002565c 	.word	0x0002565c
   15438:	20004ec8 	.word	0x20004ec8
   1543c:	20001b48 	.word	0x20001b48

00015440 <z_impl_log_panic>:
{
   15440:	b570      	push	{r4, r5, r6, lr}
	if (panic_mode) {
   15442:	4d0d      	ldr	r5, [pc, #52]	; (15478 <z_impl_log_panic+0x38>)
   15444:	7829      	ldrb	r1, [r5, #0]
   15446:	b961      	cbnz	r1, 15462 <z_impl_log_panic+0x22>
	(void)z_log_init(true, false);
   15448:	2001      	movs	r0, #1
   1544a:	f7ff fead 	bl	151a8 <z_log_init>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   1544e:	4c0b      	ldr	r4, [pc, #44]	; (1547c <z_impl_log_panic+0x3c>)
   15450:	4e0b      	ldr	r6, [pc, #44]	; (15480 <z_impl_log_panic+0x40>)
   15452:	42b4      	cmp	r4, r6
   15454:	d306      	bcc.n	15464 <z_impl_log_panic+0x24>
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke0(K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process();
   15456:	f7ff ff95 	bl	15384 <z_impl_log_process>
		while (log_process() == true) {
   1545a:	2800      	cmp	r0, #0
   1545c:	d1fb      	bne.n	15456 <z_impl_log_panic+0x16>
	panic_mode = true;
   1545e:	2301      	movs	r3, #1
   15460:	702b      	strb	r3, [r5, #0]
}
   15462:	bd70      	pop	{r4, r5, r6, pc}
	return backend->cb->active;
   15464:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
   15466:	795b      	ldrb	r3, [r3, #5]
   15468:	b11b      	cbz	r3, 15472 <z_impl_log_panic+0x32>
	backend->api->panic(backend);
   1546a:	6823      	ldr	r3, [r4, #0]
   1546c:	4620      	mov	r0, r4
   1546e:	689b      	ldr	r3, [r3, #8]
   15470:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   15472:	3410      	adds	r4, #16
   15474:	e7ed      	b.n	15452 <z_impl_log_panic+0x12>
   15476:	bf00      	nop
   15478:	2000538f 	.word	0x2000538f
   1547c:	0002564c 	.word	0x0002564c
   15480:	0002565c 	.word	0x0002565c

00015484 <log_process_thread_func>:
	uint32_t activate_mask = z_log_init(false, false);
   15484:	2100      	movs	r1, #0
{
   15486:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t activate_mask = z_log_init(false, false);
   1548a:	4608      	mov	r0, r1
   1548c:	f7ff fe8c 	bl	151a8 <z_log_init>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
   15490:	4604      	mov	r4, r0
   15492:	b348      	cbz	r0, 154e8 <log_process_thread_func+0x64>
   15494:	f240 6867 	movw	r8, #1639	; 0x667
   15498:	f04f 0900 	mov.w	r9, #0
	return z_impl_z_current_get();
   1549c:	f00a feb8 	bl	20210 <z_impl_z_current_get>
	proc_tid = process_tid;
   154a0:	4b1a      	ldr	r3, [pc, #104]	; (1550c <log_process_thread_func+0x88>)
   154a2:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
   154a4:	b130      	cbz	r0, 154b4 <log_process_thread_func+0x30>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
   154a6:	4b1a      	ldr	r3, [pc, #104]	; (15510 <log_process_thread_func+0x8c>)
	    process_tid &&
   154a8:	681b      	ldr	r3, [r3, #0]
   154aa:	2b09      	cmp	r3, #9
   154ac:	dd02      	ble.n	154b4 <log_process_thread_func+0x30>
	z_impl_k_sem_give(sem);
   154ae:	4819      	ldr	r0, [pc, #100]	; (15514 <log_process_thread_func+0x90>)
   154b0:	f00a fa4a 	bl	1f948 <z_impl_k_sem_give>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   154b4:	4f18      	ldr	r7, [pc, #96]	; (15518 <log_process_thread_func+0x94>)
	return z_impl_k_sem_take(sem, timeout);
   154b6:	f8df a05c 	ldr.w	sl, [pc, #92]	; 15514 <log_process_thread_func+0x90>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
   154ba:	2500      	movs	r5, #0
		if (activate_mask) {
   154bc:	b144      	cbz	r4, 154d0 <log_process_thread_func+0x4c>
			activate_mask = activate_foreach_backend(activate_mask);
   154be:	4620      	mov	r0, r4
   154c0:	f7ff fe0c 	bl	150dc <activate_foreach_backend>
			if (!activate_mask) {
   154c4:	4604      	mov	r4, r0
   154c6:	b918      	cbnz	r0, 154d0 <log_process_thread_func+0x4c>
				timeout = K_FOREVER;
   154c8:	f04f 38ff 	mov.w	r8, #4294967295
   154cc:	f04f 39ff 	mov.w	r9, #4294967295
   154d0:	f7ff ff58 	bl	15384 <z_impl_log_process>
		if (log_process() == false) {
   154d4:	4606      	mov	r6, r0
   154d6:	b928      	cbnz	r0, 154e4 <log_process_thread_func+0x60>
			if (processed_any) {
   154d8:	b9b5      	cbnz	r5, 15508 <log_process_thread_func+0x84>
   154da:	4642      	mov	r2, r8
   154dc:	464b      	mov	r3, r9
   154de:	4650      	mov	r0, sl
   154e0:	f00a fa58 	bl	1f994 <z_impl_k_sem_take>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
   154e4:	4635      	mov	r5, r6
   154e6:	e7e9      	b.n	154bc <log_process_thread_func+0x38>
   154e8:	f04f 38ff 	mov.w	r8, #4294967295
   154ec:	f04f 39ff 	mov.w	r9, #4294967295
   154f0:	e7d4      	b.n	1549c <log_process_thread_func+0x18>
				      enum log_backend_evt event,
				      union log_backend_evt_arg *arg)
{
	__ASSERT_NO_MSG(backend != NULL);

	if (backend->api->notify) {
   154f2:	682b      	ldr	r3, [r5, #0]
   154f4:	699b      	ldr	r3, [r3, #24]
   154f6:	b11b      	cbz	r3, 15500 <log_process_thread_func+0x7c>
		backend->api->notify(backend, event, arg);
   154f8:	2200      	movs	r2, #0
   154fa:	4611      	mov	r1, r2
   154fc:	4628      	mov	r0, r5
   154fe:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   15500:	3510      	adds	r5, #16
   15502:	42bd      	cmp	r5, r7
   15504:	d3f5      	bcc.n	154f2 <log_process_thread_func+0x6e>
   15506:	e7e8      	b.n	154da <log_process_thread_func+0x56>
   15508:	4d04      	ldr	r5, [pc, #16]	; (1551c <log_process_thread_func+0x98>)
   1550a:	e7fa      	b.n	15502 <log_process_thread_func+0x7e>
   1550c:	20004ec4 	.word	0x20004ec4
   15510:	20004ecc 	.word	0x20004ecc
   15514:	20000844 	.word	0x20000844
   15518:	0002565c 	.word	0x0002565c
   1551c:	0002564c 	.word	0x0002564c

00015520 <z_log_msg_post_finalize>:
{
   15520:	b513      	push	{r0, r1, r4, lr}
	atomic_val_t cnt = atomic_inc(&buffered_cnt);
   15522:	4818      	ldr	r0, [pc, #96]	; (15584 <z_log_msg_post_finalize+0x64>)
   15524:	f00c fe5a 	bl	221dc <atomic_inc>
	if (panic_mode) {
   15528:	4b17      	ldr	r3, [pc, #92]	; (15588 <z_log_msg_post_finalize+0x68>)
   1552a:	781b      	ldrb	r3, [r3, #0]
   1552c:	b17b      	cbz	r3, 1554e <z_log_msg_post_finalize+0x2e>
	__asm__ volatile(
   1552e:	f04f 0340 	mov.w	r3, #64	; 0x40
   15532:	f3ef 8411 	mrs	r4, BASEPRI
   15536:	f383 8812 	msr	BASEPRI_MAX, r3
   1553a:	f3bf 8f6f 	isb	sy
   1553e:	f7ff ff21 	bl	15384 <z_impl_log_process>
	__asm__ volatile(
   15542:	f384 8811 	msr	BASEPRI, r4
   15546:	f3bf 8f6f 	isb	sy
}
   1554a:	b002      	add	sp, #8
   1554c:	bd10      	pop	{r4, pc}
	} else if (proc_tid != NULL) {
   1554e:	4b0f      	ldr	r3, [pc, #60]	; (1558c <z_log_msg_post_finalize+0x6c>)
   15550:	681b      	ldr	r3, [r3, #0]
   15552:	2b00      	cmp	r3, #0
   15554:	d0f9      	beq.n	1554a <z_log_msg_post_finalize+0x2a>
		if (cnt == 0) {
   15556:	b950      	cbnz	r0, 1556e <z_log_msg_post_finalize+0x4e>
	z_impl_k_timer_start(timer, duration, period);
   15558:	2200      	movs	r2, #0
   1555a:	2300      	movs	r3, #0
   1555c:	e9cd 2300 	strd	r2, r3, [sp]
   15560:	480b      	ldr	r0, [pc, #44]	; (15590 <z_log_msg_post_finalize+0x70>)
   15562:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   15566:	2300      	movs	r3, #0
   15568:	f00b f88e 	bl	20688 <z_impl_k_timer_start>
   1556c:	e7ed      	b.n	1554a <z_log_msg_post_finalize+0x2a>
		} else if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
   1556e:	280a      	cmp	r0, #10
   15570:	d1eb      	bne.n	1554a <z_log_msg_post_finalize+0x2a>
	z_impl_k_timer_stop(timer);
   15572:	4807      	ldr	r0, [pc, #28]	; (15590 <z_log_msg_post_finalize+0x70>)
   15574:	f00f fc35 	bl	24de2 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
   15578:	4806      	ldr	r0, [pc, #24]	; (15594 <z_log_msg_post_finalize+0x74>)
}
   1557a:	b002      	add	sp, #8
   1557c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   15580:	f00a b9e2 	b.w	1f948 <z_impl_k_sem_give>
   15584:	20004ecc 	.word	0x20004ecc
   15588:	2000538f 	.word	0x2000538f
   1558c:	20004ec4 	.word	0x20004ec4
   15590:	20001b50 	.word	0x20001b50
   15594:	20000844 	.word	0x20000844

00015598 <z_log_msg_commit>:
{
   15598:	b510      	push	{r4, lr}
	msg->hdr.timestamp = timestamp_func();
   1559a:	4b06      	ldr	r3, [pc, #24]	; (155b4 <z_log_msg_commit+0x1c>)
   1559c:	681b      	ldr	r3, [r3, #0]
{
   1559e:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
   155a0:	4798      	blx	r3
	mpsc_pbuf_commit(buffer, &m->buf);
   155a2:	4621      	mov	r1, r4
	msg->hdr.timestamp = timestamp_func();
   155a4:	60a0      	str	r0, [r4, #8]
	mpsc_pbuf_commit(buffer, &m->buf);
   155a6:	4804      	ldr	r0, [pc, #16]	; (155b8 <z_log_msg_commit+0x20>)
   155a8:	f00c fd54 	bl	22054 <mpsc_pbuf_commit>
}
   155ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_log_msg_post_finalize();
   155b0:	f7ff bfb6 	b.w	15520 <z_log_msg_post_finalize>
   155b4:	2000052c 	.word	0x2000052c
   155b8:	20000784 	.word	0x20000784

000155bc <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
   155bc:	4a04      	ldr	r2, [pc, #16]	; (155d0 <log_source_name_get+0x14>)
   155be:	4b05      	ldr	r3, [pc, #20]	; (155d4 <log_source_name_get+0x18>)
   155c0:	1a9b      	subs	r3, r3, r2
}

const char *log_source_name_get(uint32_t domain_id, uint32_t source_id)
{
	if (z_log_is_local_domain(domain_id)) {
		if (source_id < log_src_cnt_get(domain_id)) {
   155c2:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
			return __log_const_start[source_id].name;
   155c6:	bf34      	ite	cc
   155c8:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
		} else {
			return NULL;
   155cc:	2000      	movcs	r0, #0
		}
	}

	return link_source_name_get(domain_id, source_id);
}
   155ce:	4770      	bx	lr
   155d0:	00025574 	.word	0x00025574
   155d4:	0002564c 	.word	0x0002564c

000155d8 <log_backend_enable>:
			uint32_t level)
{
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
   155d8:	4b08      	ldr	r3, [pc, #32]	; (155fc <log_backend_enable+0x24>)
   155da:	1ac3      	subs	r3, r0, r3
{
   155dc:	b410      	push	{r4}
	id += backend - log_backend_get(0);
   155de:	111b      	asrs	r3, r3, #4
	backend->cb->id = id;
   155e0:	6844      	ldr	r4, [r0, #4]
   155e2:	3301      	adds	r3, #1

	log_backend_id_set(backend, id);
   155e4:	7123      	strb	r3, [r4, #4]
	backend->cb->level = level;
   155e6:	6843      	ldr	r3, [r0, #4]
   155e8:	719a      	strb	r2, [r3, #6]
	backend->cb->ctx = ctx;
   155ea:	6843      	ldr	r3, [r0, #4]
   155ec:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
   155ee:	6843      	ldr	r3, [r0, #4]
   155f0:	2201      	movs	r2, #1
   155f2:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
}
   155f4:	f85d 4b04 	ldr.w	r4, [sp], #4
	z_log_notify_backend_enabled();
   155f8:	f7ff be34 	b.w	15264 <z_log_notify_backend_enabled>
   155fc:	0002564c 	.word	0x0002564c

00015600 <z_impl_z_log_msg_static_create>:
}

void z_impl_z_log_msg_static_create(const void *source,
			      const struct log_msg_desc desc,
			      uint8_t *package, const void *data)
{
   15600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15604:	b08f      	sub	sp, #60	; 0x3c
 *
 * @return Length.
 */
static inline uint32_t log_msg_get_total_wlen(const struct log_msg_desc desc)
{
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
   15606:	f3c1 44cb 	ubfx	r4, r1, #19, #12
   1560a:	f3c1 2649 	ubfx	r6, r1, #9, #10
   1560e:	9005      	str	r0, [sp, #20]
   15610:	460d      	mov	r5, r1
   15612:	4690      	mov	r8, r2
   15614:	4699      	mov	r9, r3
   15616:	3417      	adds	r4, #23

	struct log_msg_desc out_desc = desc;
	int inlen = desc.package_len;
	struct log_msg *msg;

	if (inlen > 0) {
   15618:	2e00      	cmp	r6, #0
   1561a:	d03c      	beq.n	15696 <z_impl_z_log_msg_static_create+0x96>
	return cbprintf_package_convert(in_packaged, in_len,
   1561c:	f04f 0b04 	mov.w	fp, #4
   15620:	af09      	add	r7, sp, #36	; 0x24
   15622:	f04f 0a0a 	mov.w	sl, #10
	struct z_cbprintf_buf_desc buf_desc = {
   15626:	2200      	movs	r2, #0
		uint32_t flags = CBPRINTF_PACKAGE_CONVERT_RW_STR |
				 CBPRINTF_PACKAGE_CONVERT_PTR_CHECK;
		uint16_t strl[4];
		int len;

		len = cbprintf_package_copy(package, inlen,
   15628:	4631      	mov	r1, r6
	return cbprintf_package_convert(in_packaged, in_len,
   1562a:	ab0b      	add	r3, sp, #44	; 0x2c
   1562c:	f8cd b008 	str.w	fp, [sp, #8]
   15630:	9701      	str	r7, [sp, #4]
   15632:	f8cd a000 	str.w	sl, [sp]
   15636:	4640      	mov	r0, r8
	struct z_cbprintf_buf_desc buf_desc = {
   15638:	e9cd 220b 	strd	r2, r2, [sp, #44]	; 0x2c
   1563c:	920d      	str	r2, [sp, #52]	; 0x34
	return cbprintf_package_convert(in_packaged, in_len,
   1563e:	9607      	str	r6, [sp, #28]
   15640:	f7ff f9e4 	bl	14a0c <cbprintf_package_convert>
					    strl, ARRAY_SIZE(strl));

		/* Update package length with calculated value (which may be extended
		 * when strings are copied into the package.
		 */
		out_desc.package_len = len;
   15644:	f3c0 0309 	ubfx	r3, r0, #0, #10
   15648:	1918      	adds	r0, r3, r4
   1564a:	f020 0007 	bic.w	r0, r0, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
   1564e:	0880      	lsrs	r0, r0, #2
		out_desc.package_len = len;
   15650:	461e      	mov	r6, r3
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
   15652:	f363 2552 	bfi	r5, r3, #9, #10
   15656:	9306      	str	r3, [sp, #24]
   15658:	f7ff fe78 	bl	1534c <z_log_msg_alloc>
		if (msg) {
   1565c:	4604      	mov	r4, r0
   1565e:	b178      	cbz	r0, 15680 <z_impl_z_log_msg_static_create+0x80>
	struct z_cbprintf_buf_desc buf_desc = {
   15660:	9b06      	ldr	r3, [sp, #24]
   15662:	930c      	str	r3, [sp, #48]	; 0x30
			len = cbprintf_package_copy(package, inlen,
						    msg->data, out_desc.package_len,
   15664:	3010      	adds	r0, #16
   15666:	2200      	movs	r2, #0
   15668:	900b      	str	r0, [sp, #44]	; 0x2c
   1566a:	920d      	str	r2, [sp, #52]	; 0x34
	return cbprintf_package_convert(in_packaged, in_len,
   1566c:	e9cd 7b01 	strd	r7, fp, [sp, #4]
   15670:	4a0c      	ldr	r2, [pc, #48]	; (156a4 <z_impl_z_log_msg_static_create+0xa4>)
   15672:	9907      	ldr	r1, [sp, #28]
   15674:	f8cd a000 	str.w	sl, [sp]
   15678:	ab0b      	add	r3, sp, #44	; 0x2c
   1567a:	4640      	mov	r0, r8
   1567c:	f7ff f9c6 	bl	14a0c <cbprintf_package_convert>
		}
	} else {
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
	}

	z_log_msg_finalize(msg, source, out_desc, data);
   15680:	f366 2552 	bfi	r5, r6, #9, #10
   15684:	9905      	ldr	r1, [sp, #20]
   15686:	464b      	mov	r3, r9
   15688:	462a      	mov	r2, r5
   1568a:	4620      	mov	r0, r4
}
   1568c:	b00f      	add	sp, #60	; 0x3c
   1568e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_log_msg_finalize(msg, source, out_desc, data);
   15692:	f00c bdd9 	b.w	22248 <z_log_msg_finalize>
   15696:	f024 0007 	bic.w	r0, r4, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
   1569a:	0880      	lsrs	r0, r0, #2
   1569c:	f7ff fe56 	bl	1534c <z_log_msg_alloc>
   156a0:	4604      	mov	r4, r0
   156a2:	e7ed      	b.n	15680 <z_impl_z_log_msg_static_create+0x80>
   156a4:	0002221d 	.word	0x0002221d

000156a8 <z_impl_z_log_msg_runtime_vcreate>:
#endif

void z_impl_z_log_msg_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
   156a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   156ac:	b087      	sub	sp, #28
   156ae:	e9dd 6912 	ldrd	r6, r9, [sp, #72]	; 0x48
   156b2:	e9dd 5a10 	ldrd	r5, sl, [sp, #64]	; 0x40
   156b6:	4604      	mov	r4, r0
   156b8:	460f      	mov	r7, r1
   156ba:	4693      	mov	fp, r2
   156bc:	4698      	mov	r8, r3
	int plen;

	if (fmt) {
   156be:	b3b6      	cbz	r6, 1572e <z_impl_z_log_msg_runtime_vcreate+0x86>
		va_list ap2;

		va_copy(ap2, ap);
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET,
   156c0:	2110      	movs	r1, #16
   156c2:	f8cd 9000 	str.w	r9, [sp]
   156c6:	4633      	mov	r3, r6
   156c8:	4652      	mov	r2, sl
   156ca:	2000      	movs	r0, #0
		va_copy(ap2, ap);
   156cc:	f8cd 9014 	str.w	r9, [sp, #20]
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET,
   156d0:	f7fe ffc6 	bl	14660 <cbvprintf_package>
   156d4:	4601      	mov	r1, r0
	}

	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
	struct log_msg *msg;
	uint8_t *pkg;
	struct log_msg_desc desc =
   156d6:	4b17      	ldr	r3, [pc, #92]	; (15734 <z_impl_z_log_msg_runtime_vcreate+0x8c>)
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
   156d8:	9103      	str	r1, [sp, #12]
	struct log_msg_desc desc =
   156da:	f004 0407 	and.w	r4, r4, #7
   156de:	f00b 0b07 	and.w	fp, fp, #7
   156e2:	00e4      	lsls	r4, r4, #3
   156e4:	ea03 2341 	and.w	r3, r3, r1, lsl #9
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
   156e8:	f105 0017 	add.w	r0, r5, #23
	struct log_msg_desc desc =
   156ec:	ea44 148b 	orr.w	r4, r4, fp, lsl #6
   156f0:	431c      	orrs	r4, r3
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
   156f2:	4408      	add	r0, r1
	struct log_msg_desc desc =
   156f4:	4b10      	ldr	r3, [pc, #64]	; (15738 <z_impl_z_log_msg_runtime_vcreate+0x90>)
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
   156f6:	f020 0007 	bic.w	r0, r0, #7
	struct log_msg_desc desc =
   156fa:	ea03 43c5 	and.w	r3, r3, r5, lsl #19
		Z_LOG_MSG_DESC_INITIALIZER(domain_id, level, plen, dlen);

	if (IS_ENABLED(CONFIG_LOG_MODE_DEFERRED) && BACKENDS_IN_USE()) {
		msg = z_log_msg_alloc(msg_wlen);
   156fe:	0880      	lsrs	r0, r0, #2
	struct log_msg_desc desc =
   15700:	431c      	orrs	r4, r3
		msg = z_log_msg_alloc(msg_wlen);
   15702:	f7ff fe23 	bl	1534c <z_log_msg_alloc>
		if (IS_ENABLED(CONFIG_LOG_FRONTEND) && msg == NULL) {
			pkg = alloca(plen);
		} else {
			pkg = msg ? msg->data : NULL;
   15706:	4605      	mov	r5, r0
   15708:	b140      	cbz	r0, 1571c <z_impl_z_log_msg_runtime_vcreate+0x74>
	} else {
		msg = alloca(msg_wlen * sizeof(int));
		pkg = msg->data;
	}

	if (pkg && fmt) {
   1570a:	b13e      	cbz	r6, 1571c <z_impl_z_log_msg_runtime_vcreate+0x74>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
   1570c:	9903      	ldr	r1, [sp, #12]
   1570e:	f8cd 9000 	str.w	r9, [sp]
   15712:	4633      	mov	r3, r6
   15714:	4652      	mov	r2, sl
   15716:	3010      	adds	r0, #16
   15718:	f7fe ffa2 	bl	14660 <cbvprintf_package>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg_finalize(msg, source, desc, data);
   1571c:	4643      	mov	r3, r8
   1571e:	4622      	mov	r2, r4
   15720:	4639      	mov	r1, r7
   15722:	4628      	mov	r0, r5
	}
}
   15724:	b007      	add	sp, #28
   15726:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		z_log_msg_finalize(msg, source, desc, data);
   1572a:	f00c bd8d 	b.w	22248 <z_log_msg_finalize>
		plen = 0;
   1572e:	4631      	mov	r1, r6
   15730:	e7d1      	b.n	156d6 <z_impl_z_log_msg_runtime_vcreate+0x2e>
   15732:	bf00      	nop
   15734:	0007fe00 	.word	0x0007fe00
   15738:	7ff80000 	.word	0x7ff80000

0001573c <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
   1573c:	b40e      	push	{r1, r2, r3}
   1573e:	b503      	push	{r0, r1, lr}
   15740:	ab03      	add	r3, sp, #12
   15742:	4601      	mov	r1, r0
   15744:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
   15748:	4804      	ldr	r0, [pc, #16]	; (1575c <print_formatted+0x20>)
	va_start(args, fmt);
   1574a:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
   1574c:	f00c fda3 	bl	22296 <cbvprintf>
	va_end(args);

	return length;
}
   15750:	b002      	add	sp, #8
   15752:	f85d eb04 	ldr.w	lr, [sp], #4
   15756:	b003      	add	sp, #12
   15758:	4770      	bx	lr
   1575a:	bf00      	nop
   1575c:	000222bf 	.word	0x000222bf

00015760 <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   15760:	06ca      	lsls	r2, r1, #27
   15762:	d405      	bmi.n	15770 <newline_print+0x10>
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   15764:	068b      	lsls	r3, r1, #26
		print_formatted(ctx, "\n");
   15766:	bf4c      	ite	mi
   15768:	4902      	ldrmi	r1, [pc, #8]	; (15774 <newline_print+0x14>)
	} else {
		print_formatted(ctx, "\r\n");
   1576a:	4903      	ldrpl	r1, [pc, #12]	; (15778 <newline_print+0x18>)
   1576c:	f7ff bfe6 	b.w	1573c <print_formatted>
	}
}
   15770:	4770      	bx	lr
   15772:	bf00      	nop
   15774:	000261f0 	.word	0x000261f0
   15778:	000261ef 	.word	0x000261ef

0001577c <log_output_process>:
			uint8_t level,
			const uint8_t *package,
			const uint8_t *data,
			size_t data_len,
			uint32_t flags)
{
   1577c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15780:	b08b      	sub	sp, #44	; 0x2c
   15782:	469a      	mov	sl, r3
   15784:	e9dd 7315 	ldrd	r7, r3, [sp, #84]	; 0x54
   15788:	f89d b050 	ldrb.w	fp, [sp, #80]	; 0x50
   1578c:	9306      	str	r3, [sp, #24]
   1578e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   15790:	9e18      	ldr	r6, [sp, #96]	; 0x60
   15792:	9208      	str	r2, [sp, #32]
   15794:	4604      	mov	r4, r0
   15796:	460d      	mov	r5, r1
   15798:	9305      	str	r3, [sp, #20]
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;
	cbprintf_cb cb;

	if (!raw_string) {
   1579a:	f1bb 0f00 	cmp.w	fp, #0
   1579e:	f000 8085 	beq.w	158ac <log_output_process+0x130>
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
   157a2:	f006 0301 	and.w	r3, r6, #1
   157a6:	9309      	str	r3, [sp, #36]	; 0x24
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
   157a8:	f006 0308 	and.w	r3, r6, #8
   157ac:	9307      	str	r3, [sp, #28]
	const char *tag = IS_ENABLED(CONFIG_LOG) ? z_log_get_tag() : NULL;
   157ae:	f00c fd33 	bl	22218 <z_log_get_tag>
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
   157b2:	f006 0902 	and.w	r9, r6, #2
	if (tag) {
   157b6:	4602      	mov	r2, r0
   157b8:	2800      	cmp	r0, #0
   157ba:	d047      	beq.n	1584c <log_output_process+0xd0>
		length += print_formatted(output, "%s ", tag);
   157bc:	4984      	ldr	r1, [pc, #528]	; (159d0 <log_output_process+0x254>)
   157be:	4620      	mov	r0, r4
   157c0:	f7ff ffbc 	bl	1573c <print_formatted>
   157c4:	4680      	mov	r8, r0
	if (stamp) {
   157c6:	f1b9 0f00 	cmp.w	r9, #0
   157ca:	d008      	beq.n	157de <log_output_process+0x62>
	if (!format) {
   157cc:	f016 0f44 	tst.w	r6, #68	; 0x44
   157d0:	d13e      	bne.n	15850 <log_output_process+0xd4>
		length = print_formatted(output, "[%08lu] ", timestamp);
   157d2:	4980      	ldr	r1, [pc, #512]	; (159d4 <log_output_process+0x258>)
   157d4:	462a      	mov	r2, r5
   157d6:	4620      	mov	r0, r4
   157d8:	f7ff ffb0 	bl	1573c <print_formatted>
		length += timestamp_print(output, flags, timestamp);
   157dc:	4480      	add	r8, r0
	if (color) {
   157de:	9b09      	ldr	r3, [sp, #36]	; 0x24
   157e0:	b153      	cbz	r3, 157f8 <log_output_process+0x7c>
		const char *log_color = start && (colors[level] != NULL) ?
   157e2:	4b7d      	ldr	r3, [pc, #500]	; (159d8 <log_output_process+0x25c>)
		print_formatted(output, "%s", log_color);
   157e4:	497d      	ldr	r1, [pc, #500]	; (159dc <log_output_process+0x260>)
		const char *log_color = start && (colors[level] != NULL) ?
   157e6:	f853 202b 	ldr.w	r2, [r3, fp, lsl #2]
		print_formatted(output, "%s", log_color);
   157ea:	4b7d      	ldr	r3, [pc, #500]	; (159e0 <log_output_process+0x264>)
   157ec:	4620      	mov	r0, r4
   157ee:	2a00      	cmp	r2, #0
   157f0:	bf08      	it	eq
   157f2:	461a      	moveq	r2, r3
   157f4:	f7ff ffa2 	bl	1573c <print_formatted>
	if (level_on) {
   157f8:	9b07      	ldr	r3, [sp, #28]
   157fa:	2b00      	cmp	r3, #0
   157fc:	d054      	beq.n	158a8 <log_output_process+0x12c>
		total += print_formatted(output, "<%s> ", severity[level]);
   157fe:	4b79      	ldr	r3, [pc, #484]	; (159e4 <log_output_process+0x268>)
   15800:	4979      	ldr	r1, [pc, #484]	; (159e8 <log_output_process+0x26c>)
   15802:	f853 202b 	ldr.w	r2, [r3, fp, lsl #2]
   15806:	4620      	mov	r0, r4
   15808:	f7ff ff98 	bl	1573c <print_formatted>
   1580c:	4605      	mov	r5, r0
	if (domain) {
   1580e:	9b08      	ldr	r3, [sp, #32]
   15810:	b12b      	cbz	r3, 1581e <log_output_process+0xa2>
		total += print_formatted(output, "%s/", domain);
   15812:	4976      	ldr	r1, [pc, #472]	; (159ec <log_output_process+0x270>)
   15814:	461a      	mov	r2, r3
   15816:	4620      	mov	r0, r4
   15818:	f7ff ff90 	bl	1573c <print_formatted>
   1581c:	4405      	add	r5, r0
	if (source) {
   1581e:	f1ba 0f00 	cmp.w	sl, #0
   15822:	d005      	beq.n	15830 <log_output_process+0xb4>
		total += print_formatted(output,
   15824:	4972      	ldr	r1, [pc, #456]	; (159f0 <log_output_process+0x274>)
   15826:	4652      	mov	r2, sl
   15828:	4620      	mov	r0, r4
   1582a:	f7ff ff87 	bl	1573c <print_formatted>
   1582e:	4405      	add	r5, r0
	length += ids_print(output, level_on, func_on, domain, source, level);
   15830:	4445      	add	r5, r8
		 * appending <CR> to the new line character).
		 */
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
	}

	if (package) {
   15832:	2f00      	cmp	r7, #0
   15834:	d148      	bne.n	158c8 <log_output_process+0x14c>

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	if (data_len) {
   15836:	9b05      	ldr	r3, [sp, #20]
   15838:	2b00      	cmp	r3, #0
   1583a:	d14e      	bne.n	158da <log_output_process+0x15e>
	if (color) {
   1583c:	07f3      	lsls	r3, r6, #31
   1583e:	f100 80c0 	bmi.w	159c2 <log_output_process+0x246>
	newline_print(output, flags);
   15842:	4631      	mov	r1, r6
   15844:	4620      	mov	r0, r4
   15846:	f7ff ff8b 	bl	15760 <newline_print>
}
   1584a:	e0b4      	b.n	159b6 <log_output_process+0x23a>
	uint32_t length = 0U;
   1584c:	4680      	mov	r8, r0
   1584e:	e7ba      	b.n	157c6 <log_output_process+0x4a>
	} else if (freq != 0U) {
   15850:	4b68      	ldr	r3, [pc, #416]	; (159f4 <log_output_process+0x278>)
   15852:	6818      	ldr	r0, [r3, #0]
   15854:	2800      	cmp	r0, #0
   15856:	d0c1      	beq.n	157dc <log_output_process+0x60>
		timestamp /= timestamp_div;
   15858:	4b67      	ldr	r3, [pc, #412]	; (159f8 <log_output_process+0x27c>)
		ms = (remainder * 1000U) / freq;
   1585a:	f44f 797a 	mov.w	r9, #1000	; 0x3e8
		timestamp /= timestamp_div;
   1585e:	681b      	ldr	r3, [r3, #0]
   15860:	fbb5 f5f3 	udiv	r5, r5, r3
		total_seconds = timestamp / freq;
   15864:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   15868:	fbb5 f3f0 	udiv	r3, r5, r0
		remainder = timestamp % freq;
   1586c:	fb00 5513 	mls	r5, r0, r3, r5
		ms = (remainder * 1000U) / freq;
   15870:	fb09 f505 	mul.w	r5, r9, r5
		mins = seconds / 60U;
   15874:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
   15878:	fbb3 f2f1 	udiv	r2, r3, r1
   1587c:	fb01 3112 	mls	r1, r1, r2, r3
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   15880:	fbb5 fef0 	udiv	lr, r5, r0
		mins = seconds / 60U;
   15884:	fbb1 f3fc 	udiv	r3, r1, ip
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   15888:	fb00 551e 	mls	r5, r0, lr, r5
				length = print_formatted(output,
   1588c:	fb0c 1113 	mls	r1, ip, r3, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   15890:	fb09 f505 	mul.w	r5, r9, r5
				length = print_formatted(output,
   15894:	9100      	str	r1, [sp, #0]
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   15896:	fbb5 f5f0 	udiv	r5, r5, r0
				length = print_formatted(output,
   1589a:	4958      	ldr	r1, [pc, #352]	; (159fc <log_output_process+0x280>)
   1589c:	e9cd e501 	strd	lr, r5, [sp, #4]
   158a0:	4620      	mov	r0, r4
   158a2:	f7ff ff4b 	bl	1573c <print_formatted>
   158a6:	e799      	b.n	157dc <log_output_process+0x60>
	int total = 0;
   158a8:	9d07      	ldr	r5, [sp, #28]
   158aa:	e7b0      	b.n	1580e <log_output_process+0x92>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
   158ac:	f1ba 0f01 	cmp.w	sl, #1
   158b0:	d106      	bne.n	158c0 <log_output_process+0x144>
	if (package) {
   158b2:	2f00      	cmp	r7, #0
   158b4:	d165      	bne.n	15982 <log_output_process+0x206>
	if (data_len) {
   158b6:	9b05      	ldr	r3, [sp, #20]
   158b8:	2b00      	cmp	r3, #0
   158ba:	d07c      	beq.n	159b6 <log_output_process+0x23a>
		prefix_offset = 0;
   158bc:	2500      	movs	r5, #0
   158be:	e00c      	b.n	158da <log_output_process+0x15e>
	if (package) {
   158c0:	2f00      	cmp	r7, #0
   158c2:	d0f8      	beq.n	158b6 <log_output_process+0x13a>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
   158c4:	484e      	ldr	r0, [pc, #312]	; (15a00 <log_output_process+0x284>)
   158c6:	e05d      	b.n	15984 <log_output_process+0x208>
		cb = out_func;
   158c8:	484e      	ldr	r0, [pc, #312]	; (15a04 <log_output_process+0x288>)
		return cbpprintf_external(out, cbvprintf_tagged_args,
					  ctx, packaged);
	}
#endif

	return cbpprintf_external(out, cbvprintf, ctx, packaged);
   158ca:	494f      	ldr	r1, [pc, #316]	; (15a08 <log_output_process+0x28c>)
   158cc:	463b      	mov	r3, r7
   158ce:	4622      	mov	r2, r4
   158d0:	f00b feca 	bl	21668 <cbpprintf_external>
	if (data_len) {
   158d4:	9b05      	ldr	r3, [sp, #20]
   158d6:	2b00      	cmp	r3, #0
   158d8:	d069      	beq.n	159ae <log_output_process+0x232>
		print_formatted(output, " ");
   158da:	f8df 8140 	ldr.w	r8, [pc, #320]	; 15a1c <log_output_process+0x2a0>
			print_formatted(output, "%02x ", data[i]);
   158de:	f8df 9140 	ldr.w	r9, [pc, #320]	; 15a20 <log_output_process+0x2a4>
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
   158e2:	9f05      	ldr	r7, [sp, #20]
	newline_print(output, flags);
   158e4:	4631      	mov	r1, r6
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
   158e6:	2f10      	cmp	r7, #16
	newline_print(output, flags);
   158e8:	4620      	mov	r0, r4
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
   158ea:	bf28      	it	cs
   158ec:	2710      	movcs	r7, #16
	newline_print(output, flags);
   158ee:	f7ff ff37 	bl	15760 <newline_print>
	for (int i = 0; i < prefix_offset; i++) {
   158f2:	f04f 0a00 	mov.w	sl, #0
   158f6:	4555      	cmp	r5, sl
   158f8:	dc46      	bgt.n	15988 <log_output_process+0x20c>
			print_formatted(output, "%02x ", data[i]);
   158fa:	9b06      	ldr	r3, [sp, #24]
   158fc:	4649      	mov	r1, r9
   158fe:	781a      	ldrb	r2, [r3, #0]
   15900:	4620      	mov	r0, r4
   15902:	f7ff ff1b 	bl	1573c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   15906:	f04f 0a01 	mov.w	sl, #1
		if (i > 0 && !(i % 8)) {
   1590a:	f01a 0f07 	tst.w	sl, #7
   1590e:	d103      	bne.n	15918 <log_output_process+0x19c>
			print_formatted(output, " ");
   15910:	4641      	mov	r1, r8
   15912:	4620      	mov	r0, r4
   15914:	f7ff ff12 	bl	1573c <print_formatted>
		if (i < length) {
   15918:	4557      	cmp	r7, sl
   1591a:	d93c      	bls.n	15996 <log_output_process+0x21a>
			print_formatted(output, "%02x ", data[i]);
   1591c:	9b06      	ldr	r3, [sp, #24]
   1591e:	4649      	mov	r1, r9
   15920:	f813 200a 	ldrb.w	r2, [r3, sl]
   15924:	4620      	mov	r0, r4
   15926:	f7ff ff09 	bl	1573c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   1592a:	f10a 0a01 	add.w	sl, sl, #1
   1592e:	f1ba 0f10 	cmp.w	sl, #16
   15932:	d1ea      	bne.n	1590a <log_output_process+0x18e>
	print_formatted(output, "|");
   15934:	4935      	ldr	r1, [pc, #212]	; (15a0c <log_output_process+0x290>)
   15936:	4620      	mov	r0, r4
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   15938:	f04f 0a00 	mov.w	sl, #0
	print_formatted(output, "|");
   1593c:	f7ff fefe 	bl	1573c <print_formatted>
		if (i < length) {
   15940:	4652      	mov	r2, sl
			unsigned char c = (unsigned char)data[i];
   15942:	9b06      	ldr	r3, [sp, #24]
   15944:	5c9a      	ldrb	r2, [r3, r2]
			print_formatted(output, "%c",
   15946:	4b32      	ldr	r3, [pc, #200]	; (15a10 <log_output_process+0x294>)
   15948:	5c99      	ldrb	r1, [r3, r2]
   1594a:	f011 0f97 	tst.w	r1, #151	; 0x97
   1594e:	bf08      	it	eq
   15950:	222e      	moveq	r2, #46	; 0x2e
   15952:	4930      	ldr	r1, [pc, #192]	; (15a14 <log_output_process+0x298>)
   15954:	4620      	mov	r0, r4
   15956:	f7ff fef1 	bl	1573c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   1595a:	f10a 0a01 	add.w	sl, sl, #1
   1595e:	f1ba 0f10 	cmp.w	sl, #16
   15962:	d01d      	beq.n	159a0 <log_output_process+0x224>
		if (i > 0 && !(i % 8)) {
   15964:	f01a 0f07 	tst.w	sl, #7
   15968:	d103      	bne.n	15972 <log_output_process+0x1f6>
			print_formatted(output, " ");
   1596a:	4641      	mov	r1, r8
   1596c:	4620      	mov	r0, r4
   1596e:	f7ff fee5 	bl	1573c <print_formatted>
		if (i < length) {
   15972:	4557      	cmp	r7, sl
   15974:	4652      	mov	r2, sl
   15976:	d8e4      	bhi.n	15942 <log_output_process+0x1c6>
			print_formatted(output, " ");
   15978:	4641      	mov	r1, r8
   1597a:	4620      	mov	r0, r4
   1597c:	f7ff fede 	bl	1573c <print_formatted>
   15980:	e7eb      	b.n	1595a <log_output_process+0x1de>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
   15982:	4820      	ldr	r0, [pc, #128]	; (15a04 <log_output_process+0x288>)
		prefix_offset = 0;
   15984:	465d      	mov	r5, fp
   15986:	e7a0      	b.n	158ca <log_output_process+0x14e>
		print_formatted(output, " ");
   15988:	4641      	mov	r1, r8
   1598a:	4620      	mov	r0, r4
   1598c:	f7ff fed6 	bl	1573c <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
   15990:	f10a 0a01 	add.w	sl, sl, #1
   15994:	e7af      	b.n	158f6 <log_output_process+0x17a>
			print_formatted(output, "   ");
   15996:	4920      	ldr	r1, [pc, #128]	; (15a18 <log_output_process+0x29c>)
   15998:	4620      	mov	r0, r4
   1599a:	f7ff fecf 	bl	1573c <print_formatted>
   1599e:	e7c4      	b.n	1592a <log_output_process+0x1ae>
		data += length;
   159a0:	9b06      	ldr	r3, [sp, #24]
   159a2:	443b      	add	r3, r7
   159a4:	9306      	str	r3, [sp, #24]
	} while (len);
   159a6:	9b05      	ldr	r3, [sp, #20]
   159a8:	1bdb      	subs	r3, r3, r7
   159aa:	9305      	str	r3, [sp, #20]
   159ac:	d199      	bne.n	158e2 <log_output_process+0x166>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
	}

	if (!raw_string) {
   159ae:	f1bb 0f00 	cmp.w	fp, #0
   159b2:	f47f af43 	bne.w	1583c <log_output_process+0xc0>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
   159b6:	4620      	mov	r0, r4
}
   159b8:	b00b      	add	sp, #44	; 0x2c
   159ba:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	log_output_flush(output);
   159be:	f00c bc71 	b.w	222a4 <log_output_flush>
		print_formatted(output, "%s", log_color);
   159c2:	4a07      	ldr	r2, [pc, #28]	; (159e0 <log_output_process+0x264>)
   159c4:	4905      	ldr	r1, [pc, #20]	; (159dc <log_output_process+0x260>)
   159c6:	4620      	mov	r0, r4
   159c8:	f7ff feb8 	bl	1573c <print_formatted>
}
   159cc:	e739      	b.n	15842 <log_output_process+0xc6>
   159ce:	bf00      	nop
   159d0:	000261f7 	.word	0x000261f7
   159d4:	000261fb 	.word	0x000261fb
   159d8:	0002577c 	.word	0x0002577c
   159dc:	00027783 	.word	0x00027783
   159e0:	000261f2 	.word	0x000261f2
   159e4:	00025790 	.word	0x00025790
   159e8:	00026220 	.word	0x00026220
   159ec:	00026226 	.word	0x00026226
   159f0:	0002622a 	.word	0x0002622a
   159f4:	20004ed8 	.word	0x20004ed8
   159f8:	20004ed4 	.word	0x20004ed4
   159fc:	00026204 	.word	0x00026204
   15a00:	000222f5 	.word	0x000222f5
   15a04:	000222bf 	.word	0x000222bf
   15a08:	00022297 	.word	0x00022297
   15a0c:	00026239 	.word	0x00026239
   15a10:	00027b4d 	.word	0x00027b4d
   15a14:	0002623b 	.word	0x0002623b
   15a18:	00026235 	.word	0x00026235
   15a1c:	00026237 	.word	0x00026237
   15a20:	0002622f 	.word	0x0002622f

00015a24 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg, uint32_t flags)
{
   15a24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 *
 * @return Log level.
 */
static inline uint8_t log_msg_get_level(struct log_msg *msg)
{
	return msg->hdr.desc.level;
   15a28:	880f      	ldrh	r7, [r1, #0]
 *
 * @return Pointer to the source data.
 */
static inline const void *log_msg_get_source(struct log_msg *msg)
{
	return msg->hdr.source;
   15a2a:	684b      	ldr	r3, [r1, #4]
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg_get_timestamp(struct log_msg *msg)
{
	return msg->hdr.timestamp;
   15a2c:	688e      	ldr	r6, [r1, #8]
   15a2e:	b086      	sub	sp, #24
   15a30:	4605      	mov	r5, r0
   15a32:	460c      	mov	r4, r1
   15a34:	4690      	mov	r8, r2
	return msg->hdr.desc.level;
   15a36:	f3c7 1782 	ubfx	r7, r7, #6, #3
		/* Remote domain is converting source pointer to ID */
		source_id = (int16_t)(uintptr_t)log_msg_get_source(msg);
	} else {
		void *source = (void *)log_msg_get_source(msg);

		if (source != NULL) {
   15a3a:	b15b      	cbz	r3, 15a54 <log_output_msg_process+0x30>
   15a3c:	4a13      	ldr	r2, [pc, #76]	; (15a8c <log_output_msg_process+0x68>)
   15a3e:	1a9b      	subs	r3, r3, r2
			source_id = IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
   15a40:	f343 01cf 	sbfx	r1, r3, #3, #16
		} else {
			source_id = -1;
		}
	}

	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
   15a44:	2900      	cmp	r1, #0
   15a46:	db1f      	blt.n	15a88 <log_output_msg_process+0x64>
	return msg->hdr.desc.domain;
   15a48:	7820      	ldrb	r0, [r4, #0]
   15a4a:	f3c0 00c2 	ubfx	r0, r0, #3, #3
   15a4e:	f7ff fdb5 	bl	155bc <log_source_name_get>
   15a52:	4603      	mov	r3, r0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg_get_package(struct log_msg *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
   15a54:	4621      	mov	r1, r4
	*len = msg->hdr.desc.data_len;
   15a56:	8860      	ldrh	r0, [r4, #2]
	*len = msg->hdr.desc.package_len;
   15a58:	f851 2b10 	ldr.w	r2, [r1], #16
	size_t plen, dlen;
	uint8_t *package = log_msg_get_package(msg, &plen);
	uint8_t *data = log_msg_get_data(msg, &dlen);

	log_output_process(output, timestamp, NULL, sname, level,
   15a5c:	9700      	str	r7, [sp, #0]
   15a5e:	f3c2 2249 	ubfx	r2, r2, #9, #10
   15a62:	2a00      	cmp	r2, #0
	return msg->data + msg->hdr.desc.package_len;
   15a64:	eb01 0402 	add.w	r4, r1, r2
	*len = msg->hdr.desc.data_len;
   15a68:	f3c0 00cb 	ubfx	r0, r0, #3, #12
   15a6c:	bf08      	it	eq
   15a6e:	2100      	moveq	r1, #0
   15a70:	e9cd 0803 	strd	r0, r8, [sp, #12]
   15a74:	e9cd 1401 	strd	r1, r4, [sp, #4]
   15a78:	2200      	movs	r2, #0
   15a7a:	4631      	mov	r1, r6
   15a7c:	4628      	mov	r0, r5
   15a7e:	f7ff fe7d 	bl	1577c <log_output_process>
			   plen > 0 ? package : NULL, data, dlen, flags);
}
   15a82:	b006      	add	sp, #24
   15a84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
   15a88:	2300      	movs	r3, #0
   15a8a:	e7e3      	b.n	15a54 <log_output_msg_process+0x30>
   15a8c:	00025574 	.word	0x00025574

00015a90 <log_output_dropped_process>:

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
   15a90:	b573      	push	{r0, r1, r4, r5, r6, lr}
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   15a92:	f242 730f 	movw	r3, #9999	; 0x270f
   15a96:	428b      	cmp	r3, r1
   15a98:	bf28      	it	cs
   15a9a:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
   15a9c:	6805      	ldr	r5, [r0, #0]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   15a9e:	4a0f      	ldr	r2, [pc, #60]	; (15adc <log_output_dropped_process+0x4c>)
{
   15aa0:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   15aa2:	2105      	movs	r1, #5
   15aa4:	4668      	mov	r0, sp
   15aa6:	f00b fe71 	bl	2178c <snprintk>

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
   15aaa:	6863      	ldr	r3, [r4, #4]
   15aac:	490c      	ldr	r1, [pc, #48]	; (15ae0 <log_output_dropped_process+0x50>)
   15aae:	685b      	ldr	r3, [r3, #4]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   15ab0:	4606      	mov	r6, r0
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
   15ab2:	220b      	movs	r2, #11
   15ab4:	4628      	mov	r0, r5
   15ab6:	f00c fbe1 	bl	2227c <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
   15aba:	6863      	ldr	r3, [r4, #4]
   15abc:	4632      	mov	r2, r6
   15abe:	4669      	mov	r1, sp
   15ac0:	4628      	mov	r0, r5
   15ac2:	685b      	ldr	r3, [r3, #4]
   15ac4:	f00c fbda 	bl	2227c <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
   15ac8:	6863      	ldr	r3, [r4, #4]
   15aca:	4906      	ldr	r1, [pc, #24]	; (15ae4 <log_output_dropped_process+0x54>)
   15acc:	685b      	ldr	r3, [r3, #4]
   15ace:	221b      	movs	r2, #27
   15ad0:	4628      	mov	r0, r5
   15ad2:	f00c fbd3 	bl	2227c <buffer_write>
		     output->control_block->ctx);
}
   15ad6:	b002      	add	sp, #8
   15ad8:	bd70      	pop	{r4, r5, r6, pc}
   15ada:	bf00      	nop
   15adc:	00027a0c 	.word	0x00027a0c
   15ae0:	0002625a 	.word	0x0002625a
   15ae4:	0002623e 	.word	0x0002623e

00015ae8 <log_output_timestamp_freq_set>:
{
	timestamp_div = 1U;
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
   15ae8:	4a07      	ldr	r2, [pc, #28]	; (15b08 <log_output_timestamp_freq_set+0x20>)
   15aea:	2100      	movs	r1, #0
   15aec:	2301      	movs	r3, #1
   15aee:	4290      	cmp	r0, r2
   15af0:	d806      	bhi.n	15b00 <log_output_timestamp_freq_set+0x18>
   15af2:	4a06      	ldr	r2, [pc, #24]	; (15b0c <log_output_timestamp_freq_set+0x24>)
   15af4:	b901      	cbnz	r1, 15af8 <log_output_timestamp_freq_set+0x10>
	timestamp_div = 1U;
   15af6:	2301      	movs	r3, #1
   15af8:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
   15afa:	4b05      	ldr	r3, [pc, #20]	; (15b10 <log_output_timestamp_freq_set+0x28>)
   15afc:	6018      	str	r0, [r3, #0]
}
   15afe:	4770      	bx	lr
		frequency /= 2U;
   15b00:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
   15b02:	005b      	lsls	r3, r3, #1
   15b04:	2101      	movs	r1, #1
   15b06:	e7f2      	b.n	15aee <log_output_timestamp_freq_set+0x6>
   15b08:	000f4240 	.word	0x000f4240
   15b0c:	20004ed4 	.word	0x20004ed4
   15b10:	20004ed8 	.word	0x20004ed8

00015b14 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
   15b14:	4b01      	ldr	r3, [pc, #4]	; (15b1c <log_backend_rtt_init+0x8>)
   15b16:	2201      	movs	r2, #1
   15b18:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
   15b1a:	4770      	bx	lr
   15b1c:	20005390 	.word	0x20005390

00015b20 <format_set>:
	log_output_func(&log_output_rtt, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
   15b20:	4b01      	ldr	r3, [pc, #4]	; (15b28 <format_set+0x8>)
	return 0;
}
   15b22:	2000      	movs	r0, #0
	log_format_current = log_type;
   15b24:	6019      	str	r1, [r3, #0]
}
   15b26:	4770      	bx	lr
   15b28:	20004ef0 	.word	0x20004ef0

00015b2c <panic>:
	panic_mode = true;
   15b2c:	4b02      	ldr	r3, [pc, #8]	; (15b38 <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
   15b2e:	4803      	ldr	r0, [pc, #12]	; (15b3c <panic+0x10>)
   15b30:	2201      	movs	r2, #1
   15b32:	701a      	strb	r2, [r3, #0]
   15b34:	f00c bbb6 	b.w	222a4 <log_output_flush>
   15b38:	20005391 	.word	0x20005391
   15b3c:	000257c0 	.word	0x000257c0

00015b40 <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
   15b40:	4801      	ldr	r0, [pc, #4]	; (15b48 <dropped+0x8>)
   15b42:	f7ff bfa5 	b.w	15a90 <log_output_dropped_process>
   15b46:	bf00      	nop
   15b48:	000257c0 	.word	0x000257c0

00015b4c <process>:
{
   15b4c:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   15b4e:	4b06      	ldr	r3, [pc, #24]	; (15b68 <process+0x1c>)
   15b50:	6818      	ldr	r0, [r3, #0]
{
   15b52:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   15b54:	f7ff fb70 	bl	15238 <log_format_func_t_get>
	log_output_func(&log_output_rtt, &msg->log, flags);
   15b58:	4621      	mov	r1, r4
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   15b5a:	4603      	mov	r3, r0
}
   15b5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_output_func(&log_output_rtt, &msg->log, flags);
   15b60:	4802      	ldr	r0, [pc, #8]	; (15b6c <process+0x20>)
   15b62:	220f      	movs	r2, #15
   15b64:	4718      	bx	r3
   15b66:	bf00      	nop
   15b68:	20004ef0 	.word	0x20004ef0
   15b6c:	000257c0 	.word	0x000257c0

00015b70 <on_failed_write>:
	if (retry_cnt == 0) {
   15b70:	b910      	cbnz	r0, 15b78 <on_failed_write+0x8>
		host_present = false;
   15b72:	4b07      	ldr	r3, [pc, #28]	; (15b90 <on_failed_write+0x20>)
   15b74:	7018      	strb	r0, [r3, #0]
}
   15b76:	4770      	bx	lr
	return IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE) || panic_mode;
   15b78:	4b06      	ldr	r3, [pc, #24]	; (15b94 <on_failed_write+0x24>)
	} else if (is_sync_mode()) {
   15b7a:	781b      	ldrb	r3, [r3, #0]
   15b7c:	b11b      	cbz	r3, 15b86 <on_failed_write+0x16>
	z_impl_k_busy_wait(usec_to_wait);
   15b7e:	f241 3088 	movw	r0, #5000	; 0x1388
   15b82:	f00f b8fc 	b.w	24d7e <z_impl_k_busy_wait>
	return z_impl_k_sleep(timeout);
   15b86:	20a4      	movs	r0, #164	; 0xa4
   15b88:	2100      	movs	r1, #0
   15b8a:	f00a bb27 	b.w	201dc <z_impl_k_sleep>
   15b8e:	bf00      	nop
   15b90:	20005390 	.word	0x20005390
   15b94:	20005391 	.word	0x20005391

00015b98 <data_out_block_mode>:
{
   15b98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE) || panic_mode;
   15b9c:	f8df 9078 	ldr.w	r9, [pc, #120]	; 15c18 <data_out_block_mode+0x80>
   15ba0:	4f1c      	ldr	r7, [pc, #112]	; (15c14 <data_out_block_mode+0x7c>)
{
   15ba2:	4680      	mov	r8, r0
   15ba4:	460e      	mov	r6, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
   15ba6:	2404      	movs	r4, #4
		if (!is_sync_mode()) {
   15ba8:	f899 5000 	ldrb.w	r5, [r9]
   15bac:	b995      	cbnz	r5, 15bd4 <data_out_block_mode+0x3c>
			RTT_LOCK();
   15bae:	f009 fb35 	bl	1f21c <zephyr_rtt_mutex_lock>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
   15bb2:	4628      	mov	r0, r5
   15bb4:	4632      	mov	r2, r6
   15bb6:	4641      	mov	r1, r8
   15bb8:	f009 fab2 	bl	1f120 <SEGGER_RTT_WriteSkipNoLock>
   15bbc:	4605      	mov	r5, r0
			RTT_UNLOCK();
   15bbe:	f009 fb37 	bl	1f230 <zephyr_rtt_mutex_unlock>
		if (ret) {
   15bc2:	b1e5      	cbz	r5, 15bfe <data_out_block_mode+0x66>
	host_present = true;
   15bc4:	2301      	movs	r3, #1
   15bc6:	703b      	strb	r3, [r7, #0]
	if (is_panic_mode()) {
   15bc8:	f899 3000 	ldrb.w	r3, [r9]
   15bcc:	b973      	cbnz	r3, 15bec <data_out_block_mode+0x54>
}
   15bce:	4630      	mov	r0, r6
   15bd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
   15bd4:	4632      	mov	r2, r6
   15bd6:	4641      	mov	r1, r8
   15bd8:	2000      	movs	r0, #0
   15bda:	f009 faa1 	bl	1f120 <SEGGER_RTT_WriteSkipNoLock>
   15bde:	4605      	mov	r5, r0
   15be0:	e7ef      	b.n	15bc2 <data_out_block_mode+0x2a>
			on_failed_write(retry_cnt--);
   15be2:	4620      	mov	r0, r4
   15be4:	f7ff ffc4 	bl	15b70 <on_failed_write>
   15be8:	1e65      	subs	r5, r4, #1
   15bea:	462c      	mov	r4, r5
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
   15bec:	2000      	movs	r0, #0
   15bee:	f009 fb0b 	bl	1f208 <SEGGER_RTT_HasDataUp>
   15bf2:	2800      	cmp	r0, #0
   15bf4:	d0eb      	beq.n	15bce <data_out_block_mode+0x36>
   15bf6:	783b      	ldrb	r3, [r7, #0]
   15bf8:	2b00      	cmp	r3, #0
   15bfa:	d1f2      	bne.n	15be2 <data_out_block_mode+0x4a>
   15bfc:	e7e7      	b.n	15bce <data_out_block_mode+0x36>
		} else if (host_present) {
   15bfe:	783b      	ldrb	r3, [r7, #0]
   15c00:	2b00      	cmp	r3, #0
   15c02:	d0e4      	beq.n	15bce <data_out_block_mode+0x36>
			retry_cnt--;
   15c04:	3c01      	subs	r4, #1
			on_failed_write(retry_cnt);
   15c06:	4620      	mov	r0, r4
   15c08:	f7ff ffb2 	bl	15b70 <on_failed_write>
	} while ((ret == 0) && host_present);
   15c0c:	783b      	ldrb	r3, [r7, #0]
   15c0e:	2b00      	cmp	r3, #0
   15c10:	d1ca      	bne.n	15ba8 <data_out_block_mode+0x10>
   15c12:	e7dc      	b.n	15bce <data_out_block_mode+0x36>
   15c14:	20005390 	.word	0x20005390
   15c18:	20005391 	.word	0x20005391

00015c1c <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
   15c1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   15c20:	4605      	mov	r5, r0
	__asm__ volatile(
   15c22:	f04f 0340 	mov.w	r3, #64	; 0x40
   15c26:	f3ef 8611 	mrs	r6, BASEPRI
   15c2a:	f383 8812 	msr	BASEPRI_MAX, r3
   15c2e:	f3bf 8f6f 	isb	sy
	return list->head;
   15c32:	4b0e      	ldr	r3, [pc, #56]	; (15c6c <pm_state_notify+0x50>)
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
   15c34:	4f0e      	ldr	r7, [pc, #56]	; (15c70 <pm_state_notify+0x54>)
   15c36:	681c      	ldr	r4, [r3, #0]
   15c38:	f8df 8038 	ldr.w	r8, [pc, #56]	; 15c74 <pm_state_notify+0x58>
   15c3c:	f04f 090c 	mov.w	r9, #12
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   15c40:	b92c      	cbnz	r4, 15c4e <pm_state_notify+0x32>
	__asm__ volatile(
   15c42:	f386 8811 	msr	BASEPRI, r6
   15c46:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
   15c4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			callback = notifier->state_exit;
   15c4e:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
   15c52:	2d00      	cmp	r5, #0
   15c54:	bf18      	it	ne
   15c56:	4613      	movne	r3, r2
		if (callback) {
   15c58:	b12b      	cbz	r3, 15c66 <pm_state_notify+0x4a>
			callback(z_cpus_pm_state[_current_cpu->id].state);
   15c5a:	f898 2014 	ldrb.w	r2, [r8, #20]
   15c5e:	fb09 f202 	mul.w	r2, r9, r2
   15c62:	5cb8      	ldrb	r0, [r7, r2]
   15c64:	4798      	blx	r3
	return node->next;
   15c66:	6824      	ldr	r4, [r4, #0]
   15c68:	e7ea      	b.n	15c40 <pm_state_notify+0x24>
   15c6a:	bf00      	nop
   15c6c:	20004f0c 	.word	0x20004f0c
   15c70:	20004f00 	.word	0x20004f00
   15c74:	20005314 	.word	0x20005314

00015c78 <pm_system_resume>:

void pm_system_resume(void)
{
   15c78:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
   15c7a:	4b19      	ldr	r3, [pc, #100]	; (15ce0 <pm_system_resume+0x68>)
   15c7c:	7d1c      	ldrb	r4, [r3, #20]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   15c7e:	f3bf 8f5b 	dmb	ish
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   15c82:	f004 031f 	and.w	r3, r4, #31
   15c86:	2201      	movs	r2, #1
   15c88:	409a      	lsls	r2, r3
   15c8a:	4b16      	ldr	r3, [pc, #88]	; (15ce4 <pm_system_resume+0x6c>)
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   15c8c:	0961      	lsrs	r1, r4, #5
   15c8e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   15c92:	43d0      	mvns	r0, r2
   15c94:	e853 1f00 	ldrex	r1, [r3]
   15c98:	ea01 0500 	and.w	r5, r1, r0
   15c9c:	e843 5600 	strex	r6, r5, [r3]
   15ca0:	2e00      	cmp	r6, #0
   15ca2:	d1f7      	bne.n	15c94 <pm_system_resume+0x1c>
   15ca4:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
   15ca8:	420a      	tst	r2, r1
   15caa:	d013      	beq.n	15cd4 <pm_system_resume+0x5c>
	if (pm_state_exit_post_ops != NULL) {
   15cac:	4b0e      	ldr	r3, [pc, #56]	; (15ce8 <pm_system_resume+0x70>)
   15cae:	4d0f      	ldr	r5, [pc, #60]	; (15cec <pm_system_resume+0x74>)
   15cb0:	b18b      	cbz	r3, 15cd6 <pm_system_resume+0x5e>
		pm_state_exit_post_ops(info->state, info->substate_id);
   15cb2:	230c      	movs	r3, #12
   15cb4:	4363      	muls	r3, r4
   15cb6:	18ea      	adds	r2, r5, r3
   15cb8:	5ce8      	ldrb	r0, [r5, r3]
   15cba:	7851      	ldrb	r1, [r2, #1]
   15cbc:	f00c fd77 	bl	227ae <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
   15cc0:	2000      	movs	r0, #0
   15cc2:	f7ff ffab 	bl	15c1c <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
   15cc6:	230c      	movs	r3, #12
   15cc8:	435c      	muls	r4, r3
   15cca:	192a      	adds	r2, r5, r4
   15ccc:	2300      	movs	r3, #0
   15cce:	512b      	str	r3, [r5, r4]
   15cd0:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
   15cd4:	bd70      	pop	{r4, r5, r6, pc}
   15cd6:	f383 8811 	msr	BASEPRI, r3
   15cda:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   15cde:	e7ef      	b.n	15cc0 <pm_system_resume+0x48>
   15ce0:	20005314 	.word	0x20005314
   15ce4:	20004f14 	.word	0x20004f14
   15ce8:	000227af 	.word	0x000227af
   15cec:	20004f00 	.word	0x20004f00

00015cf0 <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
   15cf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t id = CURRENT_CPU;
   15cf4:	4b35      	ldr	r3, [pc, #212]	; (15dcc <pm_system_suspend+0xdc>)
{
   15cf6:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
   15cf8:	7d1d      	ldrb	r5, [r3, #20]
	__asm__ volatile(
   15cfa:	f04f 0340 	mov.w	r3, #64	; 0x40
   15cfe:	f3ef 8811 	mrs	r8, BASEPRI
   15d02:	f383 8812 	msr	BASEPRI_MAX, r3
   15d06:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
   15d0a:	240c      	movs	r4, #12
   15d0c:	4b30      	ldr	r3, [pc, #192]	; (15dd0 <pm_system_suspend+0xe0>)
   15d0e:	4e31      	ldr	r6, [pc, #196]	; (15dd4 <pm_system_suspend+0xe4>)
   15d10:	436c      	muls	r4, r5
   15d12:	191a      	adds	r2, r3, r4
   15d14:	5d19      	ldrb	r1, [r3, r4]
   15d16:	2900      	cmp	r1, #0
   15d18:	d04c      	beq.n	15db4 <pm_system_suspend+0xc4>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
   15d1a:	ca07      	ldmia	r2, {r0, r1, r2}
   15d1c:	eb06 0c04 	add.w	ip, r6, r4
   15d20:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
   15d24:	2200      	movs	r2, #0
   15d26:	551a      	strb	r2, [r3, r4]
	__asm__ volatile(
   15d28:	f388 8811 	msr	BASEPRI, r8
   15d2c:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
   15d30:	230c      	movs	r3, #12
   15d32:	436b      	muls	r3, r5
   15d34:	18f2      	adds	r2, r6, r3
   15d36:	5cf0      	ldrb	r0, [r6, r3]
   15d38:	2800      	cmp	r0, #0
   15d3a:	d039      	beq.n	15db0 <pm_system_suspend+0xc0>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
   15d3c:	1c7b      	adds	r3, r7, #1
   15d3e:	d010      	beq.n	15d62 <pm_system_suspend+0x72>
			return (uint32_t)((t * to_hz + off) / from_hz);
   15d40:	f8d2 c008 	ldr.w	ip, [r2, #8]
   15d44:	4c24      	ldr	r4, [pc, #144]	; (15dd8 <pm_system_suspend+0xe8>)
   15d46:	4a25      	ldr	r2, [pc, #148]	; (15ddc <pm_system_suspend+0xec>)
   15d48:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   15d4c:	2100      	movs	r1, #0
   15d4e:	fbec 4100 	umlal	r4, r1, ip, r0
   15d52:	2300      	movs	r3, #0
   15d54:	4620      	mov	r0, r4
   15d56:	f7ea fec1 	bl	adc <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
   15d5a:	2101      	movs	r1, #1
   15d5c:	1a38      	subs	r0, r7, r0
   15d5e:	f00e ffec 	bl	24d3a <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
   15d62:	f00a f97d 	bl	20060 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
   15d66:	2001      	movs	r0, #1
   15d68:	f7ff ff58 	bl	15c1c <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   15d6c:	f3bf 8f5b 	dmb	ish
   15d70:	4b1b      	ldr	r3, [pc, #108]	; (15de0 <pm_system_suspend+0xf0>)
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   15d72:	096a      	lsrs	r2, r5, #5
   15d74:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
   15d78:	f005 011f 	and.w	r1, r5, #31
   15d7c:	2201      	movs	r2, #1
   15d7e:	408a      	lsls	r2, r1
   15d80:	e853 0f00 	ldrex	r0, [r3]
   15d84:	4310      	orrs	r0, r2
   15d86:	e843 0100 	strex	r1, r0, [r3]
   15d8a:	2900      	cmp	r1, #0
   15d8c:	d1f8      	bne.n	15d80 <pm_system_suspend+0x90>
   15d8e:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
   15d92:	4b14      	ldr	r3, [pc, #80]	; (15de4 <pm_system_suspend+0xf4>)
   15d94:	b13b      	cbz	r3, 15da6 <pm_system_suspend+0xb6>
		pm_state_set(info->state, info->substate_id);
   15d96:	230c      	movs	r3, #12
   15d98:	fb03 f005 	mul.w	r0, r3, r5
   15d9c:	1833      	adds	r3, r6, r0
   15d9e:	5c30      	ldrb	r0, [r6, r0]
   15da0:	7859      	ldrb	r1, [r3, #1]
   15da2:	f00c fcf8 	bl	22796 <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
   15da6:	f7ff ff67 	bl	15c78 <pm_system_resume>
	k_sched_unlock();
   15daa:	f00a f96d 	bl	20088 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
   15dae:	2001      	movs	r0, #1
}
   15db0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		info = pm_policy_next_state(id, ticks);
   15db4:	4601      	mov	r1, r0
   15db6:	4628      	mov	r0, r5
   15db8:	f000 f816 	bl	15de8 <pm_policy_next_state>
		if (info != NULL) {
   15dbc:	2800      	cmp	r0, #0
   15dbe:	d0b3      	beq.n	15d28 <pm_system_suspend+0x38>
			z_cpus_pm_state[id] = *info;
   15dc0:	c807      	ldmia	r0, {r0, r1, r2}
   15dc2:	4434      	add	r4, r6
   15dc4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   15dc8:	e7ae      	b.n	15d28 <pm_system_suspend+0x38>
   15dca:	bf00      	nop
   15dcc:	20005314 	.word	0x20005314
   15dd0:	20004ef4 	.word	0x20004ef4
   15dd4:	20004f00 	.word	0x20004f00
   15dd8:	000f423f 	.word	0x000f423f
   15ddc:	000f4240 	.word	0x000f4240
   15de0:	20004f14 	.word	0x20004f14
   15de4:	00022797 	.word	0x00022797

00015de8 <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
   15de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15dec:	b085      	sub	sp, #20
   15dee:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
   15df0:	a903      	add	r1, sp, #12
   15df2:	f000 f843 	bl	15e7c <pm_state_cpu_get_all>

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   15df6:	4b1e      	ldr	r3, [pc, #120]	; (15e70 <pm_policy_next_state+0x88>)
   15df8:	9d03      	ldr	r5, [sp, #12]
   15dfa:	f8d3 a000 	ldr.w	sl, [r3]
   15dfe:	f8df 8078 	ldr.w	r8, [pc, #120]	; 15e78 <pm_policy_next_state+0x90>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   15e02:	1e43      	subs	r3, r0, #1
   15e04:	b21b      	sxth	r3, r3
   15e06:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
   15e0a:	4604      	mov	r4, r0
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   15e0c:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   15e10:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   15e14:	f04f 0b00 	mov.w	fp, #0
   15e18:	b924      	cbnz	r4, 15e24 <pm_policy_next_state+0x3c>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
   15e1a:	46a1      	mov	r9, r4
}
   15e1c:	4648      	mov	r0, r9
   15e1e:	b005      	add	sp, #20
   15e20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15e24:	6868      	ldr	r0, [r5, #4]
   15e26:	4a13      	ldr	r2, [pc, #76]	; (15e74 <pm_policy_next_state+0x8c>)
   15e28:	46c4      	mov	ip, r8
   15e2a:	4659      	mov	r1, fp
   15e2c:	fbe0 c107 	umlal	ip, r1, r0, r7
   15e30:	2300      	movs	r3, #0
   15e32:	4660      	mov	r0, ip
   15e34:	f7ea fe52 	bl	adc <__aeabi_uldivmod>
   15e38:	9001      	str	r0, [sp, #4]
   15e3a:	68a8      	ldr	r0, [r5, #8]
   15e3c:	4a0d      	ldr	r2, [pc, #52]	; (15e74 <pm_policy_next_state+0x8c>)
   15e3e:	46c4      	mov	ip, r8
   15e40:	4659      	mov	r1, fp
   15e42:	fbe0 c107 	umlal	ip, r1, r0, r7
   15e46:	2300      	movs	r3, #0
   15e48:	4660      	mov	r0, ip
   15e4a:	f7ea fe47 	bl	adc <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   15e4e:	f1ba 3fff 	cmp.w	sl, #4294967295
		const struct pm_state_info *state = &cpu_states[i];
   15e52:	46a9      	mov	r9, r5
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   15e54:	d001      	beq.n	15e5a <pm_policy_next_state+0x72>
   15e56:	4582      	cmp	sl, r0
   15e58:	d905      	bls.n	15e66 <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
   15e5a:	1c73      	adds	r3, r6, #1
   15e5c:	d0de      	beq.n	15e1c <pm_policy_next_state+0x34>
		    (ticks >= (min_residency + exit_latency))) {
   15e5e:	9b01      	ldr	r3, [sp, #4]
   15e60:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
   15e62:	42b0      	cmp	r0, r6
   15e64:	d9da      	bls.n	15e1c <pm_policy_next_state+0x34>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   15e66:	3c01      	subs	r4, #1
   15e68:	b2a4      	uxth	r4, r4
   15e6a:	3d0c      	subs	r5, #12
   15e6c:	e7d4      	b.n	15e18 <pm_policy_next_state+0x30>
   15e6e:	bf00      	nop
   15e70:	20000530 	.word	0x20000530
   15e74:	000f4240 	.word	0x000f4240
   15e78:	000f423f 	.word	0x000f423f

00015e7c <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
   15e7c:	b908      	cbnz	r0, 15e82 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
   15e7e:	4b02      	ldr	r3, [pc, #8]	; (15e88 <pm_state_cpu_get_all+0xc>)
   15e80:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
   15e82:	2000      	movs	r0, #0
   15e84:	4770      	bx	lr
   15e86:	bf00      	nop
   15e88:	000257d0 	.word	0x000257d0

00015e8c <sub_bytes>:
static inline void sub_bytes(uint8_t *s)
{
	unsigned int i;

	for (i = 0; i < (Nb * Nk); ++i) {
		s[i] = sbox[s[i]];
   15e8c:	4904      	ldr	r1, [pc, #16]	; (15ea0 <sub_bytes+0x14>)
   15e8e:	1e43      	subs	r3, r0, #1
   15e90:	300f      	adds	r0, #15
   15e92:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   15e96:	5c8a      	ldrb	r2, [r1, r2]
   15e98:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
   15e9a:	4283      	cmp	r3, r0
   15e9c:	d1f9      	bne.n	15e92 <sub_bytes+0x6>
	}
}
   15e9e:	4770      	bx	lr
   15ea0:	00026299 	.word	0x00026299

00015ea4 <tc_aes128_set_encrypt_key>:
{
   15ea4:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
   15ea6:	4e26      	ldr	r6, [pc, #152]	; (15f40 <tc_aes128_set_encrypt_key+0x9c>)
{
   15ea8:	4607      	mov	r7, r0
   15eaa:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
   15eac:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
   15eae:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
   15eb0:	ad01      	add	r5, sp, #4
   15eb2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   15eb4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   15eb6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   15eb8:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   15ebc:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if (s == (TCAesKeySched_t) 0) {
   15ec0:	4638      	mov	r0, r7
   15ec2:	2f00      	cmp	r7, #0
   15ec4:	d038      	beq.n	15f38 <tc_aes128_set_encrypt_key+0x94>
	} else if (k == (const uint8_t *) 0) {
   15ec6:	2c00      	cmp	r4, #0
   15ec8:	d038      	beq.n	15f3c <tc_aes128_set_encrypt_key+0x98>
   15eca:	1f38      	subs	r0, r7, #4
   15ecc:	4621      	mov	r1, r4
   15ece:	4602      	mov	r2, r0
   15ed0:	3410      	adds	r4, #16
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   15ed2:	784b      	ldrb	r3, [r1, #1]
   15ed4:	780d      	ldrb	r5, [r1, #0]
   15ed6:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   15ed8:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
   15edc:	78cd      	ldrb	r5, [r1, #3]
   15ede:	432b      	orrs	r3, r5
   15ee0:	788d      	ldrb	r5, [r1, #2]
	for (i = 0; i < Nk; ++i) {
   15ee2:	3104      	adds	r1, #4
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   15ee4:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
   15ee8:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   15eea:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
   15eee:	d1f0      	bne.n	15ed2 <tc_aes128_set_encrypt_key+0x2e>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   15ef0:	4c14      	ldr	r4, [pc, #80]	; (15f44 <tc_aes128_set_encrypt_key+0xa0>)
   15ef2:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
   15ef4:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
   15ef6:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
   15ef8:	d116      	bne.n	15f28 <tc_aes128_set_encrypt_key+0x84>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   15efa:	f3c3 4207 	ubfx	r2, r3, #16, #8
   15efe:	5ca5      	ldrb	r5, [r4, r2]
   15f00:	0e1a      	lsrs	r2, r3, #24
   15f02:	5ca2      	ldrb	r2, [r4, r2]
   15f04:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
   15f08:	f3c3 2507 	ubfx	r5, r3, #8, #8
   15f0c:	b2db      	uxtb	r3, r3
   15f0e:	5d65      	ldrb	r5, [r4, r5]
   15f10:	5ce3      	ldrb	r3, [r4, r3]
   15f12:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
   15f16:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
   15f1a:	f021 0303 	bic.w	r3, r1, #3
   15f1e:	3330      	adds	r3, #48	; 0x30
   15f20:	446b      	add	r3, sp
   15f22:	f853 3c2c 	ldr.w	r3, [r3, #-44]
   15f26:	4053      	eors	r3, r2
		s->words[i] = s->words[i-Nk] ^ t;
   15f28:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
   15f2c:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
   15f2e:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
   15f30:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
   15f32:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
   15f34:	d1de      	bne.n	15ef4 <tc_aes128_set_encrypt_key+0x50>
	return TC_CRYPTO_SUCCESS;
   15f36:	2001      	movs	r0, #1
}
   15f38:	b00d      	add	sp, #52	; 0x34
   15f3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   15f3c:	4620      	mov	r0, r4
   15f3e:	e7fb      	b.n	15f38 <tc_aes128_set_encrypt_key+0x94>
   15f40:	00025674 	.word	0x00025674
   15f44:	00026299 	.word	0x00026299

00015f48 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   15f48:	4901      	ldr	r1, [pc, #4]	; (15f50 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   15f4a:	2210      	movs	r2, #16
	str	r2, [r1]
   15f4c:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   15f4e:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   15f50:	e000ed10 	.word	0xe000ed10

00015f54 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   15f54:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   15f56:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   15f58:	f380 8811 	msr	BASEPRI, r0
	isb
   15f5c:	f3bf 8f6f 	isb	sy
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
   15f60:	f3bf 8f4f 	dsb	sy
   15f64:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   15f66:	b662      	cpsie	i
	isb
   15f68:	f3bf 8f6f 	isb	sy

	bx	lr
   15f6c:	4770      	bx	lr
   15f6e:	bf00      	nop

00015f70 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   15f70:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   15f72:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   15f74:	f381 8811 	msr	BASEPRI, r1

	_sleep_if_allowed wfe
   15f78:	f3bf 8f4f 	dsb	sy
   15f7c:	bf20      	wfe

	msr	BASEPRI, r0
   15f7e:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   15f82:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   15f84:	4770      	bx	lr
   15f86:	bf00      	nop

00015f88 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   15f88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15f8c:	4680      	mov	r8, r0
   15f8e:	af00      	add	r7, sp, #0

	if (esf != NULL) {
   15f90:	460c      	mov	r4, r1
   15f92:	2900      	cmp	r1, #0
   15f94:	f000 8093 	beq.w	160be <z_arm_fatal_error+0x136>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   15f98:	46e9      	mov	r9, sp
   15f9a:	b08a      	sub	sp, #40	; 0x28
   15f9c:	e9d1 1200 	ldrd	r1, r2, [r1]
   15fa0:	68a3      	ldr	r3, [r4, #8]
   15fa2:	466d      	mov	r5, sp
   15fa4:	4849      	ldr	r0, [pc, #292]	; (160cc <z_arm_fatal_error+0x144>)
   15fa6:	462e      	mov	r6, r5
   15fa8:	f04f 0a05 	mov.w	sl, #5
   15fac:	e9c5 0105 	strd	r0, r1, [r5, #20]
   15fb0:	e9c5 2307 	strd	r2, r3, [r5, #28]
   15fb4:	f846 af10 	str.w	sl, [r6, #16]!
   15fb8:	4845      	ldr	r0, [pc, #276]	; (160d0 <z_arm_fatal_error+0x148>)
   15fba:	4632      	mov	r2, r6
   15fbc:	2300      	movs	r3, #0
   15fbe:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   15fc2:	f7ff fb1d 	bl	15600 <z_impl_z_log_msg_static_create>
   15fc6:	46cd      	mov	sp, r9
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   15fc8:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
   15fcc:	6963      	ldr	r3, [r4, #20]
   15fce:	46ad      	mov	sp, r5
   15fd0:	4840      	ldr	r0, [pc, #256]	; (160d4 <z_arm_fatal_error+0x14c>)
   15fd2:	f8c5 a010 	str.w	sl, [r5, #16]
   15fd6:	e9c5 0105 	strd	r0, r1, [r5, #20]
   15fda:	e9c5 2307 	strd	r2, r3, [r5, #28]
   15fde:	483c      	ldr	r0, [pc, #240]	; (160d0 <z_arm_fatal_error+0x148>)
   15fe0:	4632      	mov	r2, r6
   15fe2:	2300      	movs	r3, #0
   15fe4:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   15fe8:	f7ff fb0a 	bl	15600 <z_impl_z_log_msg_static_create>
   15fec:	46cd      	mov	sp, r9
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   15fee:	b088      	sub	sp, #32
   15ff0:	69e3      	ldr	r3, [r4, #28]
   15ff2:	466a      	mov	r2, sp
   15ff4:	4938      	ldr	r1, [pc, #224]	; (160d8 <z_arm_fatal_error+0x150>)
   15ff6:	e9c2 1305 	strd	r1, r3, [r2, #20]
   15ffa:	2303      	movs	r3, #3
   15ffc:	f842 3f10 	str.w	r3, [r2, #16]!
   16000:	4833      	ldr	r0, [pc, #204]	; (160d0 <z_arm_fatal_error+0x148>)
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
   16002:	f8df b0e0 	ldr.w	fp, [pc, #224]	; 160e4 <z_arm_fatal_error+0x15c>
   16006:	2300      	movs	r3, #0
   16008:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1600c:	f7ff faf8 	bl	15600 <z_impl_z_log_msg_static_create>
   16010:	4626      	mov	r6, r4
   16012:	46cd      	mov	sp, r9
	for (int i = 0; i < ARRAY_SIZE(esf->fpu.s); i += 4) {
   16014:	2500      	movs	r5, #0
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
   16016:	f04f 0a0a 	mov.w	sl, #10
   1601a:	edd6 7a08 	vldr	s15, [r6, #32]
   1601e:	eebc 7ae7 	vcvt.u32.f32	s14, s15
   16022:	edd6 7a09 	vldr	s15, [r6, #36]	; 0x24
   16026:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   1602a:	46e9      	mov	r9, sp
   1602c:	ee17 1a90 	vmov	r1, s15
   16030:	edd6 7a0a 	vldr	s15, [r6, #40]	; 0x28
   16034:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   16038:	b08e      	sub	sp, #56	; 0x38
   1603a:	ee17 3a90 	vmov	r3, s15
   1603e:	edd6 7a0b 	vldr	s15, [r6, #44]	; 0x2c
   16042:	466a      	mov	r2, sp
   16044:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   16048:	1c68      	adds	r0, r5, #1
   1604a:	e9c2 0108 	strd	r0, r1, [r2, #32]
   1604e:	1ca9      	adds	r1, r5, #2
   16050:	e9c2 130a 	strd	r1, r3, [r2, #40]	; 0x28
   16054:	1ceb      	adds	r3, r5, #3
   16056:	e9c2 b505 	strd	fp, r5, [r2, #20]
   1605a:	ed82 7a07 	vstr	s14, [r2, #28]
   1605e:	6313      	str	r3, [r2, #48]	; 0x30
   16060:	edc2 7a0d 	vstr	s15, [r2, #52]	; 0x34
   16064:	f842 af10 	str.w	sl, [r2, #16]!
   16068:	4819      	ldr	r0, [pc, #100]	; (160d0 <z_arm_fatal_error+0x148>)
   1606a:	2300      	movs	r3, #0
   1606c:	f245 0140 	movw	r1, #20544	; 0x5040
	for (int i = 0; i < ARRAY_SIZE(esf->fpu.s); i += 4) {
   16070:	3504      	adds	r5, #4
   16072:	f7ff fac5 	bl	15600 <z_impl_z_log_msg_static_create>
   16076:	2d10      	cmp	r5, #16
   16078:	46cd      	mov	sp, r9
   1607a:	f106 0610 	add.w	r6, r6, #16
   1607e:	d1cc      	bne.n	1601a <z_arm_fatal_error+0x92>
	LOG_ERR("fpscr:  0x%08x", esf->fpu.fpscr);
   16080:	b088      	sub	sp, #32
   16082:	6e23      	ldr	r3, [r4, #96]	; 0x60
   16084:	466a      	mov	r2, sp
   16086:	4915      	ldr	r1, [pc, #84]	; (160dc <z_arm_fatal_error+0x154>)
   16088:	2503      	movs	r5, #3
   1608a:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1608e:	f842 5f10 	str.w	r5, [r2, #16]!
   16092:	480f      	ldr	r0, [pc, #60]	; (160d0 <z_arm_fatal_error+0x148>)
   16094:	2300      	movs	r3, #0
   16096:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1609a:	f7ff fab1 	bl	15600 <z_impl_z_log_msg_static_create>
   1609e:	46cd      	mov	sp, r9
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   160a0:	b088      	sub	sp, #32
   160a2:	69a3      	ldr	r3, [r4, #24]
   160a4:	466a      	mov	r2, sp
   160a6:	490e      	ldr	r1, [pc, #56]	; (160e0 <z_arm_fatal_error+0x158>)
   160a8:	e9c2 1305 	strd	r1, r3, [r2, #20]
   160ac:	f842 5f10 	str.w	r5, [r2, #16]!
   160b0:	4807      	ldr	r0, [pc, #28]	; (160d0 <z_arm_fatal_error+0x148>)
   160b2:	2300      	movs	r3, #0
   160b4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   160b8:	f7ff faa2 	bl	15600 <z_impl_z_log_msg_static_create>
   160bc:	46cd      	mov	sp, r9
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   160be:	4621      	mov	r1, r4
   160c0:	4640      	mov	r0, r8
   160c2:	f009 f8c1 	bl	1f248 <z_fatal_error>
}
   160c6:	46bd      	mov	sp, r7
   160c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   160cc:	00026399 	.word	0x00026399
   160d0:	0002562c 	.word	0x0002562c
   160d4:	000263c8 	.word	0x000263c8
   160d8:	000263f7 	.word	0x000263f7
   160dc:	00026449 	.word	0x00026449
   160e0:	00026458 	.word	0x00026458
   160e4:	00026406 	.word	0x00026406

000160e8 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   160e8:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   160ea:	2800      	cmp	r0, #0
   160ec:	db07      	blt.n	160fe <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   160ee:	4a04      	ldr	r2, [pc, #16]	; (16100 <arch_irq_enable+0x18>)
   160f0:	0941      	lsrs	r1, r0, #5
   160f2:	2301      	movs	r3, #1
   160f4:	f000 001f 	and.w	r0, r0, #31
   160f8:	4083      	lsls	r3, r0
   160fa:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
   160fe:	4770      	bx	lr
   16100:	e000e100 	.word	0xe000e100

00016104 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   16104:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   16106:	2800      	cmp	r0, #0
   16108:	db0c      	blt.n	16124 <arch_irq_disable+0x20>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1610a:	0943      	lsrs	r3, r0, #5
   1610c:	4906      	ldr	r1, [pc, #24]	; (16128 <arch_irq_disable+0x24>)
   1610e:	f000 001f 	and.w	r0, r0, #31
   16112:	3320      	adds	r3, #32
   16114:	2201      	movs	r2, #1
   16116:	4082      	lsls	r2, r0
   16118:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   1611c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   16120:	f3bf 8f6f 	isb	sy
}
   16124:	4770      	bx	lr
   16126:	bf00      	nop
   16128:	e000e100 	.word	0xe000e100

0001612c <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   1612c:	4b05      	ldr	r3, [pc, #20]	; (16144 <arch_irq_is_enabled+0x18>)
   1612e:	0942      	lsrs	r2, r0, #5
   16130:	f000 001f 	and.w	r0, r0, #31
   16134:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   16138:	2301      	movs	r3, #1
   1613a:	fa03 f000 	lsl.w	r0, r3, r0
}
   1613e:	4010      	ands	r0, r2
   16140:	4770      	bx	lr
   16142:	bf00      	nop
   16144:	e000e100 	.word	0xe000e100

00016148 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   16148:	b240      	sxtb	r0, r0
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
   1614a:	07d3      	lsls	r3, r2, #31
		prio += _IRQ_PRIO_OFFSET;
   1614c:	bf54      	ite	pl
   1614e:	3102      	addpl	r1, #2
			prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
   16150:	2100      	movmi	r1, #0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   16152:	2800      	cmp	r0, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   16154:	bfac      	ite	ge
   16156:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1615a:	4a07      	ldrlt	r2, [pc, #28]	; (16178 <z_arm_irq_priority_set+0x30>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1615c:	ea4f 1341 	mov.w	r3, r1, lsl #5
   16160:	bfac      	ite	ge
   16162:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   16166:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1616a:	b2db      	uxtb	r3, r3
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1616c:	bfb4      	ite	lt
   1616e:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   16170:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
}
   16174:	4770      	bx	lr
   16176:	bf00      	nop
   16178:	e000ed14 	.word	0xe000ed14

0001617c <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
   1617c:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   1617e:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   16180:	4b04      	ldr	r3, [pc, #16]	; (16194 <_arch_isr_direct_pm+0x18>)
   16182:	69da      	ldr	r2, [r3, #28]
   16184:	b11a      	cbz	r2, 1618e <_arch_isr_direct_pm+0x12>
		_kernel.idle = 0;
   16186:	2200      	movs	r2, #0
   16188:	61da      	str	r2, [r3, #28]
		z_pm_save_idle_exit();
   1618a:	f00e fae0 	bl	2474e <z_pm_save_idle_exit>
	|| defined(CONFIG_ARMV7_R) \
	|| defined(CONFIG_AARCH32_ARMV8_R) \
	|| defined(CONFIG_ARMV7_A)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   1618e:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   16190:	bd08      	pop	{r3, pc}
   16192:	bf00      	nop
   16194:	20005314 	.word	0x20005314

00016198 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   16198:	bf30      	wfi
    b z_SysNmiOnReset
   1619a:	f7ff bffd 	b.w	16198 <z_SysNmiOnReset>
   1619e:	bf00      	nop

000161a0 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   161a0:	4a14      	ldr	r2, [pc, #80]	; (161f4 <z_arm_prep_c+0x54>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
   161a2:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   161a4:	4b14      	ldr	r3, [pc, #80]	; (161f8 <z_arm_prep_c+0x58>)
   161a6:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   161aa:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   161ac:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   161b0:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   161b4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   161b8:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   161bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
   161c0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   161c4:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
   161c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR = FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk;
   161cc:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
   161d0:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  __ASM volatile ("dsb 0xF":::"memory");
   161d4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   161d8:	f3bf 8f6f 	isb	sy
     (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
#if __has_builtin(__builtin_arm_set_fpscr)
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  __builtin_arm_set_fpscr(fpscr);
   161dc:	2300      	movs	r3, #0
   161de:	eee1 3a10 	vmsr	fpscr, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   161e2:	f009 f8eb 	bl	1f3bc <z_bss_zero>
	z_data_copy();
   161e6:	f00a f88b 	bl	20300 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   161ea:	f000 fc39 	bl	16a60 <z_arm_interrupt_init>
	z_cstart();
   161ee:	f009 f929 	bl	1f444 <z_cstart>
   161f2:	bf00      	nop
   161f4:	00000000 	.word	0x00000000
   161f8:	e000ed00 	.word	0xe000ed00

000161fc <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   161fc:	4a09      	ldr	r2, [pc, #36]	; (16224 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   161fe:	490a      	ldr	r1, [pc, #40]	; (16228 <arch_swap+0x2c>)
	_current->arch.basepri = key;
   16200:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   16202:	6809      	ldr	r1, [r1, #0]
   16204:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   16206:	4909      	ldr	r1, [pc, #36]	; (1622c <arch_swap+0x30>)
	_current->arch.basepri = key;
   16208:	6798      	str	r0, [r3, #120]	; 0x78
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   1620a:	684b      	ldr	r3, [r1, #4]
   1620c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   16210:	604b      	str	r3, [r1, #4]
   16212:	2300      	movs	r3, #0
   16214:	f383 8811 	msr	BASEPRI, r3
   16218:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   1621c:	6893      	ldr	r3, [r2, #8]
}
   1621e:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
   16220:	4770      	bx	lr
   16222:	bf00      	nop
   16224:	20005314 	.word	0x20005314
   16228:	00025c0c 	.word	0x00025c0c
   1622c:	e000ed00 	.word	0xe000ed00

00016230 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   16230:	4921      	ldr	r1, [pc, #132]	; (162b8 <in_fp_endif+0x2a>)
    ldr r2, [r1, #_kernel_offset_to_current]
   16232:	688a      	ldr	r2, [r1, #8]

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
   16234:	f882 e0c1 	strb.w	lr, [r2, #193]	; 0xc1
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   16238:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   1623c:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   1623e:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   16242:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-out thread had been using the FP registers. */
    tst lr, #_EXC_RETURN_FTYPE_Msk
   16246:	f01e 0f10 	tst.w	lr, #16
    bne out_fp_endif
   1624a:	d103      	bne.n	16254 <out_fp_endif>
    /* FP context active: set FP state and store callee-saved registers.
     * Note: if Lazy FP stacking is enabled, storing the callee-saved
     * registers will automatically trigger FP state preservation in
     * the thread's stack. This will also clear the FPCCR.LSPACT flag.
     */
    add r0, r2, #_thread_offset_to_preempt_float
   1624c:	f102 0080 	add.w	r0, r2, #128	; 0x80
    vstmia r0, {s16-s31}
   16250:	ec80 8a10 	vstmia	r0, {s16-s31}

00016254 <out_fp_endif>:

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   16254:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI_MAX, r0
   16256:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   1625a:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   1625e:	4f17      	ldr	r7, [pc, #92]	; (162bc <in_fp_endif+0x2e>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   16260:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   16264:	6a0a      	ldr	r2, [r1, #32]

    str r2, [r1, #_kernel_offset_to_current]
   16266:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   16268:	603e      	str	r6, [r7, #0]

#endif

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Restore EXC_RETURN value. */
    ldrsb lr, [r2, #_thread_offset_to_mode_exc_return]
   1626a:	f992 e0c1 	ldrsb.w	lr, [r2, #193]	; 0xc1

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   1626e:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
   16270:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   16272:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   16274:	f380 8811 	msr	BASEPRI, r0

#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-in thread had been using the FP registers. */
    tst lr, #_EXC_RETURN_FTYPE_Msk
   16278:	f01e 0f10 	tst.w	lr, #16
    beq in_fp_active
   1627c:	d003      	beq.n	16286 <in_fp_active>
    /* FP context inactive for swapped-in thread:
     * - reset FPSCR to 0
     * - set EXC_RETURN.F_Type (prevents FP frame un-stacking when returning
     *   from pendSV)
     */
    movs.n r3, #0
   1627e:	2300      	movs	r3, #0
    vmsr fpscr, r3
   16280:	eee1 3a10 	vmsr	fpscr, r3
    b in_fp_endif
   16284:	e003      	b.n	1628e <in_fp_endif>

00016286 <in_fp_active>:
    /* FP context active:
     * - clear EXC_RETURN.F_Type
     * - FPSCR and caller-saved registers will be restored automatically
     * - restore callee-saved FP registers
     */
    add r0, r2, #_thread_offset_to_preempt_float
   16286:	f102 0080 	add.w	r0, r2, #128	; 0x80
    vldmia r0, {s16-s31}
   1628a:	ec90 8a10 	vldmia	r0, {s16-s31}

0001628e <in_fp_endif>:
in_fp_endif:
    /* Clear CONTROL.FPCA that may have been set by FP instructions */
    mrs r3, CONTROL
   1628e:	f3ef 8314 	mrs	r3, CONTROL
    bic r3, #_CONTROL_FPCA_Msk
   16292:	f023 0304 	bic.w	r3, r3, #4
    msr CONTROL, r3
   16296:	f383 8814 	msr	CONTROL, r3
    isb
   1629a:	f3bf 8f6f 	isb	sy
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
   1629e:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
   162a0:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
   162a2:	f000 fc79 	bl	16b98 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
   162a6:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   162aa:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   162ae:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   162b2:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   162b6:	4770      	bx	lr
    ldr r1, =_kernel
   162b8:	20005314 	.word	0x20005314
    ldr v4, =_SCS_ICSR
   162bc:	e000ed04 	.word	0xe000ed04

000162c0 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
   162c0:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   162c4:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   162c6:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   162ca:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   162ce:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   162d0:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   162d4:	2902      	cmp	r1, #2
    beq _oops
   162d6:	d0ff      	beq.n	162d8 <_oops>

000162d8 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   162d8:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
   162da:	f00c fa43 	bl	22764 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
   162de:	bd01      	pop	{r0, pc}

000162e0 <arch_new_thread>:
		thread->stack_info.start += MPU_GUARD_ALIGN_AND_SIZE;
		thread->stack_info.size -= MPU_GUARD_ALIGN_AND_SIZE;
	}
#endif /* CONFIG_USERSPACE */
#if FP_GUARD_EXTRA_SIZE > 0
	if ((thread->base.user_options & K_FP_REGS) != 0) {
   162e0:	7b01      	ldrb	r1, [r0, #12]
   162e2:	0789      	lsls	r1, r1, #30
   162e4:	d505      	bpl.n	162f2 <arch_new_thread+0x12>
		/* Larger guard needed due to lazy stacking of FP regs may
		 * overshoot the guard area without writing anything. We
		 * carve it out of the stack buffer as-needed instead of
		 * unconditionally reserving it.
		 */
		thread->stack_info.start += FP_GUARD_EXTRA_SIZE;
   162e6:	6e81      	ldr	r1, [r0, #104]	; 0x68
   162e8:	3140      	adds	r1, #64	; 0x40
   162ea:	6681      	str	r1, [r0, #104]	; 0x68
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
   162ec:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
   162ee:	3940      	subs	r1, #64	; 0x40
   162f0:	66c1      	str	r1, [r0, #108]	; 0x6c

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   162f2:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   162f6:	9b00      	ldr	r3, [sp, #0]
   162f8:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
   162fc:	490f      	ldr	r1, [pc, #60]	; (1633c <arch_new_thread+0x5c>)
	iframe->a3 = (uint32_t)p2;
   162fe:	9b01      	ldr	r3, [sp, #4]
   16300:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   16304:	9b02      	ldr	r3, [sp, #8]
   16306:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
   1630a:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   1630e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   16312:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
   16316:	f842 1c08 	str.w	r1, [r2, #-8]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   1631a:	2300      	movs	r3, #0
   1631c:	6783      	str	r3, [r0, #120]	; 0x78
	thread->arch.mode = 0;
#if defined(CONFIG_ARM_STORE_EXC_RETURN)
	thread->arch.mode_exc_return = DEFAULT_EXC_RETURN;
#endif
#if FP_GUARD_EXTRA_SIZE > 0
	if ((thread->base.user_options & K_FP_REGS) != 0) {
   1631e:	7b03      	ldrb	r3, [r0, #12]
		thread->arch.mode |= Z_ARM_MODE_MPU_GUARD_FLOAT_Msk;
   16320:	f013 0f02 	tst.w	r3, #2
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   16324:	f1a2 0220 	sub.w	r2, r2, #32
		thread->arch.mode |= Z_ARM_MODE_MPU_GUARD_FLOAT_Msk;
   16328:	f64f 5308 	movw	r3, #64776	; 0xfd08
   1632c:	bf08      	it	eq
   1632e:	f44f 437d 	moveq.w	r3, #64768	; 0xfd00
	thread->callee_saved.psp = (uint32_t)iframe;
   16332:	6502      	str	r2, [r0, #80]	; 0x50
	if ((thread->base.user_options & K_FP_REGS) != 0) {
   16334:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   16338:	4770      	bx	lr
   1633a:	bf00      	nop
   1633c:	000217a7 	.word	0x000217a7

00016340 <z_arm_mpu_stack_guard_and_fpu_adjust>:
 * policy and the stack_info values for the thread that is
 * being switched in.
 */
uint32_t z_arm_mpu_stack_guard_and_fpu_adjust(struct k_thread *thread)
{
	if (((thread->base.user_options & K_FP_REGS) != 0) ||
   16340:	7b03      	ldrb	r3, [r0, #12]
   16342:	f013 0f02 	tst.w	r3, #2
   16346:	4b19      	ldr	r3, [pc, #100]	; (163ac <z_arm_mpu_stack_guard_and_fpu_adjust+0x6c>)
   16348:	d103      	bne.n	16352 <z_arm_mpu_stack_guard_and_fpu_adjust+0x12>
   1634a:	f890 20c1 	ldrb.w	r2, [r0, #193]	; 0xc1
   1634e:	06d2      	lsls	r2, r2, #27
   16350:	d417      	bmi.n	16382 <z_arm_mpu_stack_guard_and_fpu_adjust+0x42>
		 * The thread is not pre-tagged with K_FP_REGS, but it has
		 * generated an FP context. Activate lazy stacking and
		 * program a large MPU guard to detect privilege thread
		 * stack overflows.
		 */
		FPU->FPCCR |= FPU_FPCCR_LSPEN_Msk;
   16352:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   16354:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
   16358:	635a      	str	r2, [r3, #52]	; 0x34
		if ((thread->arch.mode &
   1635a:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
   1635e:	0719      	lsls	r1, r3, #28
   16360:	d409      	bmi.n	16376 <z_arm_mpu_stack_guard_and_fpu_adjust+0x36>
			thread->arch.mode |= Z_ARM_MODE_MPU_GUARD_FLOAT_Msk;
   16362:	f043 0308 	orr.w	r3, r3, #8
   16366:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
				thread->stack_info.start +=
   1636a:	6e83      	ldr	r3, [r0, #104]	; 0x68
   1636c:	3340      	adds	r3, #64	; 0x40
   1636e:	6683      	str	r3, [r0, #104]	; 0x68
				thread->stack_info.size -=
   16370:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
   16372:	3b40      	subs	r3, #64	; 0x40
   16374:	66c3      	str	r3, [r0, #108]	; 0x6c

		z_arm_thread_stack_info_adjust(thread, true);

		/* Tag the thread with K_FP_REGS */
		thread->base.user_options |= K_FP_REGS;
   16376:	7b03      	ldrb	r3, [r0, #12]
   16378:	f043 0302 	orr.w	r3, r3, #2
   1637c:	7303      	strb	r3, [r0, #12]

		return MPU_GUARD_ALIGN_AND_SIZE_FLOAT;
   1637e:	2080      	movs	r0, #128	; 0x80
   16380:	4770      	bx	lr
	/* Thread is not pre-tagged with K_FP_REGS, and it has
	 * not been using the FPU. Since there is no active FPU
	 * context, de-activate lazy stacking and program the
	 * default MPU guard size.
	 */
	FPU->FPCCR &= (~FPU_FPCCR_LSPEN_Msk);
   16382:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   16384:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
   16388:	635a      	str	r2, [r3, #52]	; 0x34
		if ((thread->arch.mode &
   1638a:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
   1638e:	071a      	lsls	r2, r3, #28
   16390:	d401      	bmi.n	16396 <z_arm_mpu_stack_guard_and_fpu_adjust+0x56>

	z_arm_thread_stack_info_adjust(thread, false);

	return MPU_GUARD_ALIGN_AND_SIZE;
   16392:	2040      	movs	r0, #64	; 0x40
}
   16394:	4770      	bx	lr
			thread->arch.mode &= ~Z_ARM_MODE_MPU_GUARD_FLOAT_Msk;
   16396:	f023 0308 	bic.w	r3, r3, #8
   1639a:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
				thread->stack_info.start -=
   1639e:	6e83      	ldr	r3, [r0, #104]	; 0x68
   163a0:	3b40      	subs	r3, #64	; 0x40
   163a2:	6683      	str	r3, [r0, #104]	; 0x68
				thread->stack_info.size +=
   163a4:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
   163a6:	3340      	adds	r3, #64	; 0x40
   163a8:	66c3      	str	r3, [r0, #108]	; 0x6c
   163aa:	e7f2      	b.n	16392 <z_arm_mpu_stack_guard_and_fpu_adjust+0x52>
   163ac:	e000ef00 	.word	0xe000ef00

000163b0 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
   163b0:	4a0c      	ldr	r2, [pc, #48]	; (163e4 <z_check_thread_stack_fail+0x34>)
{
   163b2:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
   163b4:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
   163b6:	b1a0      	cbz	r0, 163e2 <z_check_thread_stack_fail+0x32>
#endif

#if (defined(CONFIG_FPU) && defined(CONFIG_FPU_SHARING)) && \
	defined(CONFIG_MPU_STACK_GUARD)
	uint32_t guard_len =
		((_current->arch.mode & Z_ARM_MODE_MPU_GUARD_FLOAT_Msk) != 0) ?
   163b8:	f8d0 20c0 	ldr.w	r2, [r0, #192]	; 0xc0
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   163bc:	6e80      	ldr	r0, [r0, #104]	; 0x68
		MPU_GUARD_ALIGN_AND_SIZE_FLOAT : MPU_GUARD_ALIGN_AND_SIZE;
   163be:	f012 0f08 	tst.w	r2, #8
   163c2:	bf0c      	ite	eq
   163c4:	2240      	moveq	r2, #64	; 0x40
   163c6:	2280      	movne	r2, #128	; 0x80
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   163c8:	f113 0f16 	cmn.w	r3, #22
   163cc:	d004      	beq.n	163d8 <z_check_thread_stack_fail+0x28>
   163ce:	1a82      	subs	r2, r0, r2
   163d0:	429a      	cmp	r2, r3
   163d2:	d805      	bhi.n	163e0 <z_check_thread_stack_fail+0x30>
   163d4:	4283      	cmp	r3, r0
   163d6:	d203      	bcs.n	163e0 <z_check_thread_stack_fail+0x30>
		return 0;
   163d8:	4281      	cmp	r1, r0
   163da:	bf28      	it	cs
   163dc:	2000      	movcs	r0, #0
   163de:	4770      	bx	lr
   163e0:	2000      	movs	r0, #0
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
}
   163e2:	4770      	bx	lr
   163e4:	20005314 	.word	0x20005314

000163e8 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
   163e8:	b508      	push	{r3, lr}
   163ea:	4614      	mov	r4, r2
   163ec:	460d      	mov	r5, r1
   163ee:	2200      	movs	r2, #0
   163f0:	eee1 2a10 	vmsr	fpscr, r2
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   163f4:	f3ef 8214 	mrs	r2, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
   163f8:	f022 0204 	bic.w	r2, r2, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
   163fc:	f382 8814 	msr	CONTROL, r2
  __ASM volatile ("isb 0xF":::"memory");
   16400:	f3bf 8f6f 	isb	sy
   16404:	f3bf 8f6f 	isb	sy
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   16408:	4a08      	ldr	r2, [pc, #32]	; (1642c <arch_switch_to_main_thread+0x44>)
   1640a:	6090      	str	r0, [r2, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
   1640c:	f000 fbc4 	bl	16b98 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   16410:	4620      	mov	r0, r4
   16412:	f385 8809 	msr	PSP, r5
   16416:	2100      	movs	r1, #0
   16418:	b663      	cpsie	if
   1641a:	f381 8811 	msr	BASEPRI, r1
   1641e:	f3bf 8f6f 	isb	sy
   16422:	2200      	movs	r2, #0
   16424:	2300      	movs	r3, #0
   16426:	f00b f9be 	bl	217a6 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   1642a:	bf00      	nop
   1642c:	20005314 	.word	0x20005314

00016430 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   16430:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   16432:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   16434:	4a0b      	ldr	r2, [pc, #44]	; (16464 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   16436:	69d0      	ldr	r0, [r2, #28]
	cmp r0, #0
   16438:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   1643a:	bf1e      	ittt	ne
	movne	r1, #0
   1643c:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   1643e:	61d1      	strne	r1, [r2, #28]
		blne	z_pm_save_idle_exit
   16440:	f00e f985 	blne	2474e <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   16444:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   16446:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   1644a:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   1644e:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   16452:	4905      	ldr	r1, [pc, #20]	; (16468 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   16454:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   16456:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   16458:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   1645a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   1645e:	4903      	ldr	r1, [pc, #12]	; (1646c <_isr_wrapper+0x3c>)
	bx r1
   16460:	4708      	bx	r1
   16462:	0000      	.short	0x0000
	ldr r2, =_kernel
   16464:	20005314 	.word	0x20005314
	ldr r1, =_sw_isr_table
   16468:	00025380 	.word	0x00025380
	ldr r1, =z_arm_int_exit
   1646c:	00016471 	.word	0x00016471

00016470 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   16470:	4b04      	ldr	r3, [pc, #16]	; (16484 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   16472:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   16474:	6a18      	ldr	r0, [r3, #32]
	cmp r0, r1
   16476:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   16478:	d003      	beq.n	16482 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   1647a:	4903      	ldr	r1, [pc, #12]	; (16488 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   1647c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   16480:	600a      	str	r2, [r1, #0]

00016482 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   16482:	4770      	bx	lr
	ldr r3, =_kernel
   16484:	20005314 	.word	0x20005314
	ldr r1, =_SCS_ICSR
   16488:	e000ed04 	.word	0xe000ed04

0001648c <bus_fault.constprop.0>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   1648c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16490:	b086      	sub	sp, #24
   16492:	4606      	mov	r6, r0
   16494:	af00      	add	r7, sp, #0
   16496:	460d      	mov	r5, r1
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");
   16498:	4b3e      	ldr	r3, [pc, #248]	; (16594 <bus_fault.constprop.0+0x108>)
   1649a:	617b      	str	r3, [r7, #20]
   1649c:	2402      	movs	r4, #2
   1649e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   164a2:	483d      	ldr	r0, [pc, #244]	; (16598 <bus_fault.constprop.0+0x10c>)
   164a4:	613c      	str	r4, [r7, #16]
   164a6:	f107 0210 	add.w	r2, r7, #16
   164aa:	f00c f96a 	bl	22782 <z_log_msg_static_create.constprop.0>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   164ae:	4b3b      	ldr	r3, [pc, #236]	; (1659c <bus_fault.constprop.0+0x110>)
   164b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   164b2:	04d9      	lsls	r1, r3, #19
   164b4:	d509      	bpl.n	164ca <bus_fault.constprop.0+0x3e>
		PR_FAULT_INFO("  Stacking error");
   164b6:	4b3a      	ldr	r3, [pc, #232]	; (165a0 <bus_fault.constprop.0+0x114>)
   164b8:	4837      	ldr	r0, [pc, #220]	; (16598 <bus_fault.constprop.0+0x10c>)
   164ba:	e9c7 4304 	strd	r4, r3, [r7, #16]
   164be:	f107 0210 	add.w	r2, r7, #16
   164c2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   164c6:	f00c f95c 	bl	22782 <z_log_msg_static_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   164ca:	4b34      	ldr	r3, [pc, #208]	; (1659c <bus_fault.constprop.0+0x110>)
   164cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   164ce:	051a      	lsls	r2, r3, #20
   164d0:	d50a      	bpl.n	164e8 <bus_fault.constprop.0+0x5c>
		PR_FAULT_INFO("  Unstacking error");
   164d2:	4b34      	ldr	r3, [pc, #208]	; (165a4 <bus_fault.constprop.0+0x118>)
   164d4:	617b      	str	r3, [r7, #20]
   164d6:	2302      	movs	r3, #2
   164d8:	482f      	ldr	r0, [pc, #188]	; (16598 <bus_fault.constprop.0+0x10c>)
   164da:	613b      	str	r3, [r7, #16]
   164dc:	f107 0210 	add.w	r2, r7, #16
   164e0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   164e4:	f00c f94d 	bl	22782 <z_log_msg_static_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   164e8:	4c2c      	ldr	r4, [pc, #176]	; (1659c <bus_fault.constprop.0+0x110>)
   164ea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   164ec:	059b      	lsls	r3, r3, #22
   164ee:	d522      	bpl.n	16536 <bus_fault.constprop.0+0xaa>
		PR_FAULT_INFO("  Precise data bus error");
   164f0:	46e8      	mov	r8, sp
   164f2:	4b2d      	ldr	r3, [pc, #180]	; (165a8 <bus_fault.constprop.0+0x11c>)
   164f4:	617b      	str	r3, [r7, #20]
   164f6:	2302      	movs	r3, #2
   164f8:	4827      	ldr	r0, [pc, #156]	; (16598 <bus_fault.constprop.0+0x10c>)
   164fa:	613b      	str	r3, [r7, #16]
   164fc:	f107 0210 	add.w	r2, r7, #16
   16500:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   16504:	f00c f93d 	bl	22782 <z_log_msg_static_create.constprop.0>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
   16508:	6ba3      	ldr	r3, [r4, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   1650a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   1650c:	0410      	lsls	r0, r2, #16
   1650e:	d512      	bpl.n	16536 <bus_fault.constprop.0+0xaa>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   16510:	b088      	sub	sp, #32
   16512:	466a      	mov	r2, sp
   16514:	4925      	ldr	r1, [pc, #148]	; (165ac <bus_fault.constprop.0+0x120>)
   16516:	4820      	ldr	r0, [pc, #128]	; (16598 <bus_fault.constprop.0+0x10c>)
   16518:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1651c:	2303      	movs	r3, #3
   1651e:	f842 3f10 	str.w	r3, [r2, #16]!
   16522:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   16526:	f00c f92c 	bl	22782 <z_log_msg_static_create.constprop.0>
   1652a:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
   1652c:	b11e      	cbz	r6, 16536 <bus_fault.constprop.0+0xaa>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   1652e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   16530:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   16534:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   16536:	4b19      	ldr	r3, [pc, #100]	; (1659c <bus_fault.constprop.0+0x110>)
   16538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1653a:	0559      	lsls	r1, r3, #21
   1653c:	d50a      	bpl.n	16554 <bus_fault.constprop.0+0xc8>
		PR_FAULT_INFO("  Imprecise data bus error");
   1653e:	4b1c      	ldr	r3, [pc, #112]	; (165b0 <bus_fault.constprop.0+0x124>)
   16540:	617b      	str	r3, [r7, #20]
   16542:	2302      	movs	r3, #2
   16544:	4814      	ldr	r0, [pc, #80]	; (16598 <bus_fault.constprop.0+0x10c>)
   16546:	613b      	str	r3, [r7, #16]
   16548:	f107 0210 	add.w	r2, r7, #16
   1654c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   16550:	f00c f917 	bl	22782 <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   16554:	4b11      	ldr	r3, [pc, #68]	; (1659c <bus_fault.constprop.0+0x110>)
   16556:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   16558:	05d2      	lsls	r2, r2, #23
   1655a:	d515      	bpl.n	16588 <bus_fault.constprop.0+0xfc>
		PR_FAULT_INFO("  Instruction bus error");
   1655c:	4b15      	ldr	r3, [pc, #84]	; (165b4 <bus_fault.constprop.0+0x128>)
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   1655e:	617b      	str	r3, [r7, #20]
   16560:	2302      	movs	r3, #2
   16562:	480d      	ldr	r0, [pc, #52]	; (16598 <bus_fault.constprop.0+0x10c>)
   16564:	613b      	str	r3, [r7, #16]
   16566:	f107 0210 	add.w	r2, r7, #16
   1656a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1656e:	f00c f908 	bl	22782 <z_log_msg_static_create.constprop.0>
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   16572:	4a0a      	ldr	r2, [pc, #40]	; (1659c <bus_fault.constprop.0+0x110>)
   16574:	6a93      	ldr	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
   16576:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   16578:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00

	return reason;
}
   1657c:	3718      	adds	r7, #24
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   1657e:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   16580:	7028      	strb	r0, [r5, #0]
}
   16582:	46bd      	mov	sp, r7
   16584:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   16588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1658a:	049b      	lsls	r3, r3, #18
   1658c:	d5f1      	bpl.n	16572 <bus_fault.constprop.0+0xe6>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   1658e:	4b0a      	ldr	r3, [pc, #40]	; (165b8 <bus_fault.constprop.0+0x12c>)
   16590:	e7e5      	b.n	1655e <bus_fault.constprop.0+0xd2>
   16592:	bf00      	nop
   16594:	00026486 	.word	0x00026486
   16598:	0002562c 	.word	0x0002562c
   1659c:	e000ed00 	.word	0xe000ed00
   165a0:	0002649c 	.word	0x0002649c
   165a4:	000264ad 	.word	0x000264ad
   165a8:	000264c0 	.word	0x000264c0
   165ac:	000264d9 	.word	0x000264d9
   165b0:	000264ee 	.word	0x000264ee
   165b4:	00026509 	.word	0x00026509
   165b8:	00026521 	.word	0x00026521

000165bc <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
   165bc:	b510      	push	{r4, lr}
   165be:	b086      	sub	sp, #24
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
   165c0:	4b33      	ldr	r3, [pc, #204]	; (16690 <usage_fault.constprop.0+0xd4>)
   165c2:	4834      	ldr	r0, [pc, #208]	; (16694 <usage_fault.constprop.0+0xd8>)
   165c4:	9305      	str	r3, [sp, #20]
   165c6:	2402      	movs	r4, #2
   165c8:	aa04      	add	r2, sp, #16
   165ca:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   165ce:	9404      	str	r4, [sp, #16]
   165d0:	f00c f8d7 	bl	22782 <z_log_msg_static_create.constprop.0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   165d4:	4b30      	ldr	r3, [pc, #192]	; (16698 <usage_fault.constprop.0+0xdc>)
   165d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   165d8:	019b      	lsls	r3, r3, #6
   165da:	d508      	bpl.n	165ee <usage_fault.constprop.0+0x32>
		PR_FAULT_INFO("  Division by zero");
   165dc:	4b2f      	ldr	r3, [pc, #188]	; (1669c <usage_fault.constprop.0+0xe0>)
   165de:	482d      	ldr	r0, [pc, #180]	; (16694 <usage_fault.constprop.0+0xd8>)
   165e0:	aa04      	add	r2, sp, #16
   165e2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   165e6:	e9cd 4304 	strd	r4, r3, [sp, #16]
   165ea:	f00c f8ca 	bl	22782 <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   165ee:	4b2a      	ldr	r3, [pc, #168]	; (16698 <usage_fault.constprop.0+0xdc>)
   165f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   165f2:	01dc      	lsls	r4, r3, #7
   165f4:	d509      	bpl.n	1660a <usage_fault.constprop.0+0x4e>
		PR_FAULT_INFO("  Unaligned memory access");
   165f6:	4b2a      	ldr	r3, [pc, #168]	; (166a0 <usage_fault.constprop.0+0xe4>)
   165f8:	9305      	str	r3, [sp, #20]
   165fa:	4826      	ldr	r0, [pc, #152]	; (16694 <usage_fault.constprop.0+0xd8>)
   165fc:	2302      	movs	r3, #2
   165fe:	aa04      	add	r2, sp, #16
   16600:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   16604:	9304      	str	r3, [sp, #16]
   16606:	f00c f8bc 	bl	22782 <z_log_msg_static_create.constprop.0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   1660a:	4b23      	ldr	r3, [pc, #140]	; (16698 <usage_fault.constprop.0+0xdc>)
   1660c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1660e:	0318      	lsls	r0, r3, #12
   16610:	d509      	bpl.n	16626 <usage_fault.constprop.0+0x6a>
		PR_FAULT_INFO("  No coprocessor instructions");
   16612:	4b24      	ldr	r3, [pc, #144]	; (166a4 <usage_fault.constprop.0+0xe8>)
   16614:	9305      	str	r3, [sp, #20]
   16616:	481f      	ldr	r0, [pc, #124]	; (16694 <usage_fault.constprop.0+0xd8>)
   16618:	2302      	movs	r3, #2
   1661a:	aa04      	add	r2, sp, #16
   1661c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   16620:	9304      	str	r3, [sp, #16]
   16622:	f00c f8ae 	bl	22782 <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   16626:	4b1c      	ldr	r3, [pc, #112]	; (16698 <usage_fault.constprop.0+0xdc>)
   16628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1662a:	0359      	lsls	r1, r3, #13
   1662c:	d509      	bpl.n	16642 <usage_fault.constprop.0+0x86>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   1662e:	4b1e      	ldr	r3, [pc, #120]	; (166a8 <usage_fault.constprop.0+0xec>)
   16630:	9305      	str	r3, [sp, #20]
   16632:	4818      	ldr	r0, [pc, #96]	; (16694 <usage_fault.constprop.0+0xd8>)
   16634:	2302      	movs	r3, #2
   16636:	aa04      	add	r2, sp, #16
   16638:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1663c:	9304      	str	r3, [sp, #16]
   1663e:	f00c f8a0 	bl	22782 <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   16642:	4b15      	ldr	r3, [pc, #84]	; (16698 <usage_fault.constprop.0+0xdc>)
   16644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   16646:	039a      	lsls	r2, r3, #14
   16648:	d509      	bpl.n	1665e <usage_fault.constprop.0+0xa2>
		PR_FAULT_INFO("  Illegal use of the EPSR");
   1664a:	4b18      	ldr	r3, [pc, #96]	; (166ac <usage_fault.constprop.0+0xf0>)
   1664c:	9305      	str	r3, [sp, #20]
   1664e:	4811      	ldr	r0, [pc, #68]	; (16694 <usage_fault.constprop.0+0xd8>)
   16650:	2302      	movs	r3, #2
   16652:	aa04      	add	r2, sp, #16
   16654:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   16658:	9304      	str	r3, [sp, #16]
   1665a:	f00c f892 	bl	22782 <z_log_msg_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   1665e:	4b0e      	ldr	r3, [pc, #56]	; (16698 <usage_fault.constprop.0+0xdc>)
   16660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   16662:	03db      	lsls	r3, r3, #15
   16664:	d509      	bpl.n	1667a <usage_fault.constprop.0+0xbe>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   16666:	4b12      	ldr	r3, [pc, #72]	; (166b0 <usage_fault.constprop.0+0xf4>)
   16668:	9305      	str	r3, [sp, #20]
   1666a:	480a      	ldr	r0, [pc, #40]	; (16694 <usage_fault.constprop.0+0xd8>)
   1666c:	2302      	movs	r3, #2
   1666e:	aa04      	add	r2, sp, #16
   16670:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   16674:	9304      	str	r3, [sp, #16]
   16676:	f00c f884 	bl	22782 <z_log_msg_static_create.constprop.0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   1667a:	4a07      	ldr	r2, [pc, #28]	; (16698 <usage_fault.constprop.0+0xdc>)
   1667c:	6a93      	ldr	r3, [r2, #40]	; 0x28
   1667e:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   16682:	ea6f 4313 	mvn.w	r3, r3, lsr #16

	return reason;
}
   16686:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   16688:	6293      	str	r3, [r2, #40]	; 0x28
}
   1668a:	b006      	add	sp, #24
   1668c:	bd10      	pop	{r4, pc}
   1668e:	bf00      	nop
   16690:	00026550 	.word	0x00026550
   16694:	0002562c 	.word	0x0002562c
   16698:	e000ed00 	.word	0xe000ed00
   1669c:	00026568 	.word	0x00026568
   166a0:	0002657b 	.word	0x0002657b
   166a4:	00026595 	.word	0x00026595
   166a8:	000265b3 	.word	0x000265b3
   166ac:	000265d8 	.word	0x000265d8
   166b0:	000265f2 	.word	0x000265f2

000166b4 <mem_manage_fault>:
{
   166b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   166b8:	b086      	sub	sp, #24
   166ba:	4680      	mov	r8, r0
   166bc:	af00      	add	r7, sp, #0
   166be:	460c      	mov	r4, r1
   166c0:	4615      	mov	r5, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
   166c2:	4b4f      	ldr	r3, [pc, #316]	; (16800 <mem_manage_fault+0x14c>)
   166c4:	617b      	str	r3, [r7, #20]
   166c6:	2602      	movs	r6, #2
   166c8:	484e      	ldr	r0, [pc, #312]	; (16804 <mem_manage_fault+0x150>)
   166ca:	613e      	str	r6, [r7, #16]
   166cc:	f107 0210 	add.w	r2, r7, #16
   166d0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   166d4:	f00c f855 	bl	22782 <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   166d8:	4b4b      	ldr	r3, [pc, #300]	; (16808 <mem_manage_fault+0x154>)
   166da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   166dc:	06db      	lsls	r3, r3, #27
   166de:	d509      	bpl.n	166f4 <mem_manage_fault+0x40>
		PR_FAULT_INFO("  Stacking error (context area might be"
   166e0:	4b4a      	ldr	r3, [pc, #296]	; (1680c <mem_manage_fault+0x158>)
   166e2:	4848      	ldr	r0, [pc, #288]	; (16804 <mem_manage_fault+0x150>)
   166e4:	e9c7 6304 	strd	r6, r3, [r7, #16]
   166e8:	f107 0210 	add.w	r2, r7, #16
   166ec:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   166f0:	f00c f847 	bl	22782 <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   166f4:	4b44      	ldr	r3, [pc, #272]	; (16808 <mem_manage_fault+0x154>)
   166f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   166f8:	0718      	lsls	r0, r3, #28
   166fa:	d50a      	bpl.n	16712 <mem_manage_fault+0x5e>
		PR_FAULT_INFO("  Unstacking error");
   166fc:	4b44      	ldr	r3, [pc, #272]	; (16810 <mem_manage_fault+0x15c>)
   166fe:	617b      	str	r3, [r7, #20]
   16700:	2302      	movs	r3, #2
   16702:	4840      	ldr	r0, [pc, #256]	; (16804 <mem_manage_fault+0x150>)
   16704:	613b      	str	r3, [r7, #16]
   16706:	f107 0210 	add.w	r2, r7, #16
   1670a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1670e:	f00c f838 	bl	22782 <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   16712:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 16808 <mem_manage_fault+0x154>
   16716:	f8da 3028 	ldr.w	r3, [sl, #40]	; 0x28
   1671a:	0799      	lsls	r1, r3, #30
   1671c:	d439      	bmi.n	16792 <mem_manage_fault+0xde>
	uint32_t mmfar = -EINVAL;
   1671e:	f06f 0615 	mvn.w	r6, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   16722:	4b39      	ldr	r3, [pc, #228]	; (16808 <mem_manage_fault+0x154>)
   16724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   16726:	07db      	lsls	r3, r3, #31
   16728:	d50a      	bpl.n	16740 <mem_manage_fault+0x8c>
		PR_FAULT_INFO("  Instruction Access Violation");
   1672a:	4b3a      	ldr	r3, [pc, #232]	; (16814 <mem_manage_fault+0x160>)
   1672c:	617b      	str	r3, [r7, #20]
   1672e:	2302      	movs	r3, #2
   16730:	4834      	ldr	r0, [pc, #208]	; (16804 <mem_manage_fault+0x150>)
   16732:	613b      	str	r3, [r7, #16]
   16734:	f107 0210 	add.w	r2, r7, #16
   16738:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1673c:	f00c f821 	bl	22782 <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   16740:	4b31      	ldr	r3, [pc, #196]	; (16808 <mem_manage_fault+0x154>)
   16742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   16744:	069c      	lsls	r4, r3, #26
   16746:	d50a      	bpl.n	1675e <mem_manage_fault+0xaa>
		PR_FAULT_INFO(
   16748:	4b33      	ldr	r3, [pc, #204]	; (16818 <mem_manage_fault+0x164>)
   1674a:	617b      	str	r3, [r7, #20]
   1674c:	2302      	movs	r3, #2
   1674e:	482d      	ldr	r0, [pc, #180]	; (16804 <mem_manage_fault+0x150>)
   16750:	613b      	str	r3, [r7, #16]
   16752:	f107 0210 	add.w	r2, r7, #16
   16756:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1675a:	f00c f812 	bl	22782 <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   1675e:	4c2a      	ldr	r4, [pc, #168]	; (16808 <mem_manage_fault+0x154>)
   16760:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   16762:	06d8      	lsls	r0, r3, #27
   16764:	d43e      	bmi.n	167e4 <mem_manage_fault+0x130>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   16766:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   16768:	0799      	lsls	r1, r3, #30
   1676a:	d43b      	bmi.n	167e4 <mem_manage_fault+0x130>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   1676c:	2000      	movs	r0, #0
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   1676e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   16770:	4a25      	ldr	r2, [pc, #148]	; (16808 <mem_manage_fault+0x154>)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   16772:	069b      	lsls	r3, r3, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
   16774:	bf42      	ittt	mi
   16776:	6a63      	ldrmi	r3, [r4, #36]	; 0x24
   16778:	f423 5300 	bicmi.w	r3, r3, #8192	; 0x2000
   1677c:	6263      	strmi	r3, [r4, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   1677e:	6a93      	ldr	r3, [r2, #40]	; 0x28
   16780:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
   16784:	6293      	str	r3, [r2, #40]	; 0x28
}
   16786:	3718      	adds	r7, #24
	*recoverable = memory_fault_recoverable(esf, true);
   16788:	2300      	movs	r3, #0
   1678a:	702b      	strb	r3, [r5, #0]
}
   1678c:	46bd      	mov	sp, r7
   1678e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		PR_FAULT_INFO("  Data Access Violation");
   16792:	46e9      	mov	r9, sp
   16794:	4b21      	ldr	r3, [pc, #132]	; (1681c <mem_manage_fault+0x168>)
   16796:	617b      	str	r3, [r7, #20]
   16798:	2302      	movs	r3, #2
   1679a:	613b      	str	r3, [r7, #16]
   1679c:	f107 0210 	add.w	r2, r7, #16
   167a0:	4818      	ldr	r0, [pc, #96]	; (16804 <mem_manage_fault+0x150>)
   167a2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   167a6:	f00b ffec 	bl	22782 <z_log_msg_static_create.constprop.0>
		uint32_t temp = SCB->MMFAR;
   167aa:	f8da 6034 	ldr.w	r6, [sl, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   167ae:	f8da 3028 	ldr.w	r3, [sl, #40]	; 0x28
   167b2:	061a      	lsls	r2, r3, #24
   167b4:	d5b3      	bpl.n	1671e <mem_manage_fault+0x6a>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   167b6:	b088      	sub	sp, #32
   167b8:	466a      	mov	r2, sp
   167ba:	4b19      	ldr	r3, [pc, #100]	; (16820 <mem_manage_fault+0x16c>)
   167bc:	4811      	ldr	r0, [pc, #68]	; (16804 <mem_manage_fault+0x150>)
   167be:	e9c2 3605 	strd	r3, r6, [r2, #20]
   167c2:	2303      	movs	r3, #3
   167c4:	f842 3f10 	str.w	r3, [r2, #16]!
   167c8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   167cc:	f00b ffd9 	bl	22782 <z_log_msg_static_create.constprop.0>
   167d0:	46cd      	mov	sp, r9
			if (from_hard_fault != 0) {
   167d2:	2c00      	cmp	r4, #0
   167d4:	d0a5      	beq.n	16722 <mem_manage_fault+0x6e>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   167d6:	f8da 3028 	ldr.w	r3, [sl, #40]	; 0x28
   167da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   167de:	f8ca 3028 	str.w	r3, [sl, #40]	; 0x28
   167e2:	e79e      	b.n	16722 <mem_manage_fault+0x6e>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
   167e4:	6863      	ldr	r3, [r4, #4]
   167e6:	051a      	lsls	r2, r3, #20
   167e8:	d5c0      	bpl.n	1676c <mem_manage_fault+0xb8>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
   167ea:	4641      	mov	r1, r8
   167ec:	4630      	mov	r0, r6
   167ee:	f7ff fddf 	bl	163b0 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
   167f2:	2800      	cmp	r0, #0
   167f4:	d0ba      	beq.n	1676c <mem_manage_fault+0xb8>
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
   167f6:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
   167fa:	2002      	movs	r0, #2
   167fc:	e7b7      	b.n	1676e <mem_manage_fault+0xba>
   167fe:	bf00      	nop
   16800:	0002661d 	.word	0x0002661d
   16804:	0002562c 	.word	0x0002562c
   16808:	e000ed00 	.word	0xe000ed00
   1680c:	00026633 	.word	0x00026633
   16810:	000264ad 	.word	0x000264ad
   16814:	00026694 	.word	0x00026694
   16818:	00026521 	.word	0x00026521
   1681c:	00026666 	.word	0x00026666
   16820:	0002667e 	.word	0x0002667e

00016824 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   16824:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   16828:	4b77      	ldr	r3, [pc, #476]	; (16a08 <z_arm_fault+0x1e4>)
{
   1682a:	b09d      	sub	sp, #116	; 0x74
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   1682c:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
   16830:	af00      	add	r7, sp, #0
   16832:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   16834:	f3c8 0408 	ubfx	r4, r8, #0, #9
   16838:	2600      	movs	r6, #0
   1683a:	f386 8811 	msr	BASEPRI, r6
   1683e:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   16842:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   16846:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   1684a:	d10e      	bne.n	1686a <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
   1684c:	f002 030c 	and.w	r3, r2, #12
   16850:	2b08      	cmp	r3, #8
   16852:	d119      	bne.n	16888 <z_arm_fault+0x64>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
   16854:	4b6d      	ldr	r3, [pc, #436]	; (16a0c <z_arm_fault+0x1e8>)
   16856:	61fb      	str	r3, [r7, #28]
   16858:	2302      	movs	r3, #2
   1685a:	486d      	ldr	r0, [pc, #436]	; (16a10 <z_arm_fault+0x1ec>)
   1685c:	61bb      	str	r3, [r7, #24]
   1685e:	f107 0218 	add.w	r2, r7, #24
   16862:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   16866:	f00b ff8c 	bl	22782 <z_log_msg_static_create.constprop.0>
	*nested_exc = false;
   1686a:	2600      	movs	r6, #0
		return NULL;
   1686c:	4635      	mov	r5, r6
	*recoverable = false;
   1686e:	2300      	movs	r3, #0
   16870:	71fb      	strb	r3, [r7, #7]
	switch (fault) {
   16872:	1ee3      	subs	r3, r4, #3
   16874:	2b09      	cmp	r3, #9
   16876:	f200 80a6 	bhi.w	169c6 <z_arm_fault+0x1a2>
   1687a:	e8df f003 	tbb	[pc, r3]
   1687e:	990a      	.short	0x990a
   16880:	a4a4959c 	.word	0xa4a4959c
   16884:	9fa4a4a4 	.word	0x9fa4a4a4
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   16888:	0710      	lsls	r0, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
   1688a:	bf4c      	ite	mi
   1688c:	460d      	movmi	r5, r1
			*nested_exc = true;
   1688e:	2601      	movpl	r6, #1
   16890:	e7ed      	b.n	1686e <z_arm_fault+0x4a>
	PR_FAULT_INFO("***** HARD FAULT *****");
   16892:	46e9      	mov	r9, sp
   16894:	4b5f      	ldr	r3, [pc, #380]	; (16a14 <z_arm_fault+0x1f0>)
   16896:	61fb      	str	r3, [r7, #28]
   16898:	f04f 0802 	mov.w	r8, #2
   1689c:	f107 0218 	add.w	r2, r7, #24
   168a0:	485b      	ldr	r0, [pc, #364]	; (16a10 <z_arm_fault+0x1ec>)
   168a2:	f8c7 8018 	str.w	r8, [r7, #24]
   168a6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   168aa:	f00b ff6a 	bl	22782 <z_log_msg_static_create.constprop.0>
	*recoverable = false;
   168ae:	2300      	movs	r3, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   168b0:	4c55      	ldr	r4, [pc, #340]	; (16a08 <z_arm_fault+0x1e4>)
	*recoverable = false;
   168b2:	71fb      	strb	r3, [r7, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   168b4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   168b6:	079a      	lsls	r2, r3, #30
   168b8:	d50b      	bpl.n	168d2 <z_arm_fault+0xae>
		PR_EXC("  Bus fault on vector table read");
   168ba:	4b57      	ldr	r3, [pc, #348]	; (16a18 <z_arm_fault+0x1f4>)
		PR_EXC("  Debug event");
   168bc:	e9c7 8306 	strd	r8, r3, [r7, #24]
	PR_FAULT_INFO(
   168c0:	4853      	ldr	r0, [pc, #332]	; (16a10 <z_arm_fault+0x1ec>)
   168c2:	f107 0218 	add.w	r2, r7, #24
   168c6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   168ca:	f00b ff5a 	bl	22782 <z_log_msg_static_create.constprop.0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   168ce:	2400      	movs	r4, #0
   168d0:	e041      	b.n	16956 <z_arm_fault+0x132>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
   168d2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   168d4:	2b00      	cmp	r3, #0
   168d6:	da01      	bge.n	168dc <z_arm_fault+0xb8>
		PR_EXC("  Debug event");
   168d8:	4b50      	ldr	r3, [pc, #320]	; (16a1c <z_arm_fault+0x1f8>)
   168da:	e7ef      	b.n	168bc <z_arm_fault+0x98>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   168dc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   168de:	005b      	lsls	r3, r3, #1
   168e0:	d5f5      	bpl.n	168ce <z_arm_fault+0xaa>
		PR_EXC("  Fault escalation (see below)");
   168e2:	4b4f      	ldr	r3, [pc, #316]	; (16a20 <z_arm_fault+0x1fc>)
   168e4:	484a      	ldr	r0, [pc, #296]	; (16a10 <z_arm_fault+0x1ec>)
   168e6:	e9c7 8306 	strd	r8, r3, [r7, #24]
   168ea:	f107 0218 	add.w	r2, r7, #24
   168ee:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   168f2:	f00b ff46 	bl	22782 <z_log_msg_static_create.constprop.0>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
   168f6:	6963      	ldr	r3, [r4, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
   168f8:	69aa      	ldr	r2, [r5, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
   168fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   168fe:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
   16900:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   16904:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
   16908:	6963      	ldr	r3, [r4, #20]
	uint16_t fault_insn = *(ret_addr - 1);
   1690a:	f832 2c02 	ldrh.w	r2, [r2, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
   1690e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   16912:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
   16914:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   16918:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
   1691c:	f64d 7302 	movw	r3, #57090	; 0xdf02
   16920:	429a      	cmp	r2, r3
   16922:	d008      	beq.n	16936 <z_arm_fault+0x112>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
   16924:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   16926:	b2db      	uxtb	r3, r3
   16928:	b38b      	cbz	r3, 1698e <z_arm_fault+0x16a>
			reason = mem_manage_fault(esf, 1, recoverable);
   1692a:	1dfa      	adds	r2, r7, #7
   1692c:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
   1692e:	4628      	mov	r0, r5
   16930:	f7ff fec0 	bl	166b4 <mem_manage_fault>
   16934:	e03a      	b.n	169ac <z_arm_fault+0x188>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
   16936:	b088      	sub	sp, #32
   16938:	682b      	ldr	r3, [r5, #0]
   1693a:	466a      	mov	r2, sp
   1693c:	4939      	ldr	r1, [pc, #228]	; (16a24 <z_arm_fault+0x200>)
   1693e:	4834      	ldr	r0, [pc, #208]	; (16a10 <z_arm_fault+0x1ec>)
   16940:	e9c2 1305 	strd	r1, r3, [r2, #20]
   16944:	2303      	movs	r3, #3
   16946:	f842 3f10 	str.w	r3, [r2, #16]!
   1694a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1694e:	f00b ff18 	bl	22782 <z_log_msg_static_create.constprop.0>
			reason = esf->basic.r0;
   16952:	682c      	ldr	r4, [r5, #0]
   16954:	46cd      	mov	sp, r9
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   16956:	79fb      	ldrb	r3, [r7, #7]
   16958:	b9ab      	cbnz	r3, 16986 <z_arm_fault+0x162>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   1695a:	2268      	movs	r2, #104	; 0x68
   1695c:	4629      	mov	r1, r5
   1695e:	f107 0008 	add.w	r0, r7, #8
   16962:	f00e fc30 	bl	251c6 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   16966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   16968:	2e00      	cmp	r6, #0
   1696a:	d047      	beq.n	169fc <z_arm_fault+0x1d8>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   1696c:	f3c3 0208 	ubfx	r2, r3, #0, #9
   16970:	b922      	cbnz	r2, 1697c <z_arm_fault+0x158>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   16972:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   16976:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   1697a:	627b      	str	r3, [r7, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   1697c:	f107 0108 	add.w	r1, r7, #8
   16980:	4620      	mov	r0, r4
   16982:	f7ff fb01 	bl	15f88 <z_arm_fatal_error>
}
   16986:	3774      	adds	r7, #116	; 0x74
   16988:	46bd      	mov	sp, r7
   1698a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
   1698e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   16990:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
   16994:	d004      	beq.n	169a0 <z_arm_fault+0x17c>
			reason = bus_fault(esf, 1, recoverable);
   16996:	1df9      	adds	r1, r7, #7
   16998:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
   1699a:	f7ff fd77 	bl	1648c <bus_fault.constprop.0>
   1699e:	e005      	b.n	169ac <z_arm_fault+0x188>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
   169a0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   169a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   169a6:	d392      	bcc.n	168ce <z_arm_fault+0xaa>
			reason = usage_fault(esf);
   169a8:	f7ff fe08 	bl	165bc <usage_fault.constprop.0>
   169ac:	4604      	mov	r4, r0
   169ae:	e7d2      	b.n	16956 <z_arm_fault+0x132>
		reason = mem_manage_fault(esf, 0, recoverable);
   169b0:	1dfa      	adds	r2, r7, #7
   169b2:	2100      	movs	r1, #0
   169b4:	e7bb      	b.n	1692e <z_arm_fault+0x10a>
		reason = bus_fault(esf, 0, recoverable);
   169b6:	1df9      	adds	r1, r7, #7
   169b8:	2000      	movs	r0, #0
   169ba:	e7ee      	b.n	1699a <z_arm_fault+0x176>
	PR_FAULT_INFO(
   169bc:	4b1a      	ldr	r3, [pc, #104]	; (16a28 <z_arm_fault+0x204>)
   169be:	61fb      	str	r3, [r7, #28]
   169c0:	2302      	movs	r3, #2
   169c2:	61bb      	str	r3, [r7, #24]
   169c4:	e77c      	b.n	168c0 <z_arm_fault+0x9c>
	PR_FAULT_INFO("***** %s %d) *****",
   169c6:	4a19      	ldr	r2, [pc, #100]	; (16a2c <z_arm_fault+0x208>)
   169c8:	4b19      	ldr	r3, [pc, #100]	; (16a30 <z_arm_fault+0x20c>)
   169ca:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
   169ce:	46e8      	mov	r8, sp
   169d0:	b08a      	sub	sp, #40	; 0x28
   169d2:	bf18      	it	ne
   169d4:	4613      	movne	r3, r2
   169d6:	466a      	mov	r2, sp
   169d8:	4916      	ldr	r1, [pc, #88]	; (16a34 <z_arm_fault+0x210>)
   169da:	480d      	ldr	r0, [pc, #52]	; (16a10 <z_arm_fault+0x1ec>)
   169dc:	e9c2 1305 	strd	r1, r3, [r2, #20]
   169e0:	f44f 7300 	mov.w	r3, #512	; 0x200
   169e4:	8413      	strh	r3, [r2, #32]
   169e6:	3c10      	subs	r4, #16
   169e8:	4b13      	ldr	r3, [pc, #76]	; (16a38 <z_arm_fault+0x214>)
   169ea:	61d4      	str	r4, [r2, #28]
   169ec:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   169f0:	f842 3f10 	str.w	r3, [r2, #16]!
   169f4:	f00b fec5 	bl	22782 <z_log_msg_static_create.constprop.0>
   169f8:	46c5      	mov	sp, r8
}
   169fa:	e768      	b.n	168ce <z_arm_fault+0xaa>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   169fc:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   16a00:	f023 0301 	bic.w	r3, r3, #1
   16a04:	e7b9      	b.n	1697a <z_arm_fault+0x156>
   16a06:	bf00      	nop
   16a08:	e000ed00 	.word	0xe000ed00
   16a0c:	000266e1 	.word	0x000266e1
   16a10:	0002562c 	.word	0x0002562c
   16a14:	0002670c 	.word	0x0002670c
   16a18:	00026723 	.word	0x00026723
   16a1c:	00026744 	.word	0x00026744
   16a20:	00026752 	.word	0x00026752
   16a24:	00026771 	.word	0x00026771
   16a28:	0002678d 	.word	0x0002678d
   16a2c:	000266c8 	.word	0x000266c8
   16a30:	000266b3 	.word	0x000266b3
   16a34:	000267b1 	.word	0x000267b1
   16a38:	01000004 	.word	0x01000004

00016a3c <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   16a3c:	4a02      	ldr	r2, [pc, #8]	; (16a48 <z_arm_fault_init+0xc>)
   16a3e:	6953      	ldr	r3, [r2, #20]
   16a40:	f043 0310 	orr.w	r3, r3, #16
   16a44:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
   16a46:	4770      	bx	lr
   16a48:	e000ed00 	.word	0xe000ed00

00016a4c <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   16a4c:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   16a50:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   16a54:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   16a56:	4672      	mov	r2, lr
	bl z_arm_fault
   16a58:	f7ff fee4 	bl	16824 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   16a5c:	bd01      	pop	{r0, pc}
   16a5e:	bf00      	nop

00016a60 <z_arm_interrupt_init>:
   16a60:	4804      	ldr	r0, [pc, #16]	; (16a74 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   16a62:	2300      	movs	r3, #0
   16a64:	2140      	movs	r1, #64	; 0x40
   16a66:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   16a68:	3301      	adds	r3, #1
   16a6a:	2b30      	cmp	r3, #48	; 0x30
   16a6c:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   16a70:	d1f9      	bne.n	16a66 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   16a72:	4770      	bx	lr
   16a74:	e000e100 	.word	0xe000e100

00016a78 <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
   16a78:	2000      	movs	r0, #0
    msr CONTROL, r0
   16a7a:	f380 8814 	msr	CONTROL, r0
    isb
   16a7e:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
   16a82:	f7fe fb29 	bl	150d8 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
   16a86:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
   16a88:	490d      	ldr	r1, [pc, #52]	; (16ac0 <__start+0x48>)
    str r0, [r1]
   16a8a:	6008      	str	r0, [r1, #0]
    dsb
   16a8c:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   16a90:	480c      	ldr	r0, [pc, #48]	; (16ac4 <__start+0x4c>)
    msr msp, r0
   16a92:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
   16a96:	f000 f82b 	bl	16af0 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   16a9a:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI, r0
   16a9c:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   16aa0:	4809      	ldr	r0, [pc, #36]	; (16ac8 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   16aa2:	f44f 6104 	mov.w	r1, #2112	; 0x840
    adds r0, r0, r1
   16aa6:	1840      	adds	r0, r0, r1
    msr PSP, r0
   16aa8:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   16aac:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   16ab0:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   16ab2:	4308      	orrs	r0, r1
    msr CONTROL, r0
   16ab4:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   16ab8:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   16abc:	f7ff fb70 	bl	161a0 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
   16ac0:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   16ac4:	2000a500 	.word	0x2000a500
    ldr r0, =z_interrupt_stacks
   16ac8:	20009700 	.word	0x20009700

00016acc <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
   16acc:	4907      	ldr	r1, [pc, #28]	; (16aec <z_arm_clear_arm_mpu_config+0x20>)
   16ace:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

	for (i = 0; i < num_regions; i++) {
   16ad2:	2300      	movs	r3, #0
	int num_regions =
   16ad4:	f3c2 2207 	ubfx	r2, r2, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
   16ad8:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
   16ada:	4293      	cmp	r3, r2
   16adc:	db00      	blt.n	16ae0 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
   16ade:	4770      	bx	lr
  MPU->RNR = rnr;
   16ae0:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  MPU->RASR = 0U;
   16ae4:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
   16ae8:	3301      	adds	r3, #1
   16aea:	e7f6      	b.n	16ada <z_arm_clear_arm_mpu_config+0xe>
   16aec:	e000ed00 	.word	0xe000ed00

00016af0 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
   16af0:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   16af2:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
   16af4:	2300      	movs	r3, #0
   16af6:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
   16afa:	f7ff ffe7 	bl	16acc <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
   16afe:	4b14      	ldr	r3, [pc, #80]	; (16b50 <z_arm_init_arch_hw_at_boot+0x60>)
   16b00:	f04f 32ff 	mov.w	r2, #4294967295
   16b04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   16b08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
   16b0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
   16b10:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
   16b14:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
   16b18:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
   16b1c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
   16b20:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
   16b24:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   16b28:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   16b2c:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
   16b30:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
   16b34:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
   16b38:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
   16b3c:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
   16b40:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
   16b44:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   16b46:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   16b4a:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
   16b4e:	bd08      	pop	{r3, pc}
   16b50:	e000e100 	.word	0xe000e100

00016b54 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
   16b54:	4b08      	ldr	r3, [pc, #32]	; (16b78 <z_impl_k_thread_abort+0x24>)
   16b56:	689b      	ldr	r3, [r3, #8]
   16b58:	4283      	cmp	r3, r0
   16b5a:	d10b      	bne.n	16b74 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   16b5c:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   16b60:	b143      	cbz	r3, 16b74 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   16b62:	4b06      	ldr	r3, [pc, #24]	; (16b7c <z_impl_k_thread_abort+0x28>)
   16b64:	685a      	ldr	r2, [r3, #4]
   16b66:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   16b6a:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
   16b6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   16b6e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   16b72:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
   16b74:	f009 bb52 	b.w	2021c <z_thread_abort>
   16b78:	20005314 	.word	0x20005314
   16b7c:	e000ed00 	.word	0xe000ed00

00016b80 <z_arm_configure_static_mpu_regions>:
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   16b80:	4b02      	ldr	r3, [pc, #8]	; (16b8c <z_arm_configure_static_mpu_regions+0xc>)
   16b82:	4a03      	ldr	r2, [pc, #12]	; (16b90 <z_arm_configure_static_mpu_regions+0x10>)
   16b84:	4803      	ldr	r0, [pc, #12]	; (16b94 <z_arm_configure_static_mpu_regions+0x14>)
   16b86:	2101      	movs	r1, #1
   16b88:	f000 b898 	b.w	16cbc <arm_core_mpu_configure_static_mpu_regions>
   16b8c:	20020000 	.word	0x20020000
   16b90:	20000000 	.word	0x20000000
   16b94:	000257d0 	.word	0x000257d0

00016b98 <z_arm_configure_dynamic_mpu_regions>:
 *
 * This function is not inherently thread-safe, but the memory domain
 * spinlock needs to be held anyway.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
   16b98:	b510      	push	{r4, lr}
   16b9a:	4604      	mov	r4, r0
	/* Privileged stack guard */
	uintptr_t guard_start;
	size_t guard_size = MPU_GUARD_ALIGN_AND_SIZE;

#if defined(CONFIG_FPU) && defined(CONFIG_FPU_SHARING)
	guard_size = z_arm_mpu_stack_guard_and_fpu_adjust(thread);
   16b9c:	f7ff fbd0 	bl	16340 <z_arm_mpu_stack_guard_and_fpu_adjust>
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
   16ba0:	6ea2      	ldr	r2, [r4, #104]	; 0x68
	guard_size = z_arm_mpu_stack_guard_and_fpu_adjust(thread);
   16ba2:	4603      	mov	r3, r0
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
   16ba4:	4805      	ldr	r0, [pc, #20]	; (16bbc <z_arm_configure_dynamic_mpu_regions+0x24>)
		guard_start = thread->stack_info.start - guard_size;
   16ba6:	1ad2      	subs	r2, r2, r3
	dynamic_regions[region_num].size = guard_size;
   16ba8:	e9c0 2300 	strd	r2, r3, [r0]
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
   16bac:	4b04      	ldr	r3, [pc, #16]	; (16bc0 <z_arm_configure_dynamic_mpu_regions+0x28>)
   16bae:	6083      	str	r3, [r0, #8]
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
						   region_num);
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_enable();
#endif
}
   16bb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
   16bb4:	2101      	movs	r1, #1
   16bb6:	f000 b88b 	b.w	16cd0 <arm_core_mpu_configure_dynamic_mpu_regions>
   16bba:	bf00      	nop
   16bbc:	20004f18 	.word	0x20004f18
   16bc0:	150b0000 	.word	0x150b0000

00016bc4 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
   16bc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
   16bc8:	f8df e0c0 	ldr.w	lr, [pc, #192]	; 16c8c <mpu_configure_regions+0xc8>
   16bcc:	469c      	mov	ip, r3
   16bce:	af00      	add	r7, sp, #0
	int i;
	int reg_index = start_reg_index;
   16bd0:	4615      	mov	r5, r2

	for (i = 0; i < regions_num; i++) {
   16bd2:	2300      	movs	r3, #0
   16bd4:	428b      	cmp	r3, r1
   16bd6:	da1a      	bge.n	16c0e <mpu_configure_regions+0x4a>
		if (regions[i].size == 0U) {
   16bd8:	6844      	ldr	r4, [r0, #4]
   16bda:	2c00      	cmp	r4, #0
   16bdc:	d04d      	beq.n	16c7a <mpu_configure_regions+0xb6>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
   16bde:	f1bc 0f00 	cmp.w	ip, #0
   16be2:	d01d      	beq.n	16c20 <mpu_configure_regions+0x5c>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
   16be4:	1e66      	subs	r6, r4, #1
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
   16be6:	4234      	tst	r4, r6
   16be8:	d015      	beq.n	16c16 <mpu_configure_regions+0x52>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
   16bea:	466c      	mov	r4, sp
   16bec:	b088      	sub	sp, #32
   16bee:	466a      	mov	r2, sp
   16bf0:	4923      	ldr	r1, [pc, #140]	; (16c80 <mpu_configure_regions+0xbc>)
   16bf2:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   16bf6:	2303      	movs	r3, #3
   16bf8:	f842 3f10 	str.w	r3, [r2, #16]!
   16bfc:	4821      	ldr	r0, [pc, #132]	; (16c84 <mpu_configure_regions+0xc0>)
   16bfe:	2300      	movs	r3, #0
   16c00:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   16c04:	f7fe fcfc 	bl	15600 <z_impl_z_log_msg_static_create>
			return -EINVAL;
   16c08:	f06f 0515 	mvn.w	r5, #21
   16c0c:	46a5      	mov	sp, r4
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
   16c0e:	4628      	mov	r0, r5
   16c10:	46bd      	mov	sp, r7
   16c12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		&&
   16c16:	2c1f      	cmp	r4, #31
   16c18:	d9e7      	bls.n	16bea <mpu_configure_regions+0x26>
		((part->start & (part->size - 1U)) == 0U);
   16c1a:	6802      	ldr	r2, [r0, #0]
		&&
   16c1c:	4216      	tst	r6, r2
   16c1e:	d1e4      	bne.n	16bea <mpu_configure_regions+0x26>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
   16c20:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
   16c22:	6802      	ldr	r2, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   16c24:	6886      	ldr	r6, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
   16c26:	fa5f f885 	uxtb.w	r8, r5
	if (size <= 32U) {
   16c2a:	d914      	bls.n	16c56 <mpu_configure_regions+0x92>
	if (size > (1UL << 31)) {
   16c2c:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
   16c30:	d813      	bhi.n	16c5a <mpu_configure_regions+0x96>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
   16c32:	3c01      	subs	r4, #1
   16c34:	fab4 f484 	clz	r4, r4
   16c38:	f1c4 041f 	rsb	r4, r4, #31
   16c3c:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
   16c3e:	f1b8 0f07 	cmp.w	r8, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   16c42:	ea46 0604 	orr.w	r6, r6, r4
   16c46:	d90a      	bls.n	16c5e <mpu_configure_regions+0x9a>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   16c48:	466c      	mov	r4, sp
   16c4a:	b088      	sub	sp, #32
   16c4c:	466a      	mov	r2, sp
   16c4e:	4b0e      	ldr	r3, [pc, #56]	; (16c88 <mpu_configure_regions+0xc4>)
   16c50:	e9c2 3505 	strd	r3, r5, [r2, #20]
   16c54:	e7cf      	b.n	16bf6 <mpu_configure_regions+0x32>
		return REGION_32B;
   16c56:	2408      	movs	r4, #8
   16c58:	e7f1      	b.n	16c3e <mpu_configure_regions+0x7a>
		return REGION_4G;
   16c5a:	243e      	movs	r4, #62	; 0x3e
   16c5c:	e7ef      	b.n	16c3e <mpu_configure_regions+0x7a>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   16c5e:	f022 021f 	bic.w	r2, r2, #31
				| MPU_RBAR_VALID_Msk | index;
   16c62:	432a      	orrs	r2, r5
   16c64:	f042 0210 	orr.w	r2, r2, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   16c68:	f046 0601 	orr.w	r6, r6, #1
   16c6c:	f8ce 5098 	str.w	r5, [lr, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   16c70:	f8ce 209c 	str.w	r2, [lr, #156]	; 0x9c
		reg_index++;
   16c74:	3501      	adds	r5, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   16c76:	f8ce 60a0 	str.w	r6, [lr, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
   16c7a:	3301      	adds	r3, #1
   16c7c:	300c      	adds	r0, #12
   16c7e:	e7a9      	b.n	16bd4 <mpu_configure_regions+0x10>
   16c80:	000267c8 	.word	0x000267c8
   16c84:	0002561c 	.word	0x0002561c
   16c88:	000267eb 	.word	0x000267eb
   16c8c:	e000ed00 	.word	0xe000ed00

00016c90 <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   16c90:	4b04      	ldr	r3, [pc, #16]	; (16ca4 <arm_core_mpu_enable+0x14>)
   16c92:	2205      	movs	r2, #5
   16c94:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
   16c98:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   16c9c:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   16ca0:	4770      	bx	lr
   16ca2:	bf00      	nop
   16ca4:	e000ed00 	.word	0xe000ed00

00016ca8 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   16ca8:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   16cac:	4b02      	ldr	r3, [pc, #8]	; (16cb8 <arm_core_mpu_disable+0x10>)
   16cae:	2200      	movs	r2, #0
   16cb0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
   16cb4:	4770      	bx	lr
   16cb6:	bf00      	nop
   16cb8:	e000ed00 	.word	0xe000ed00

00016cbc <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
   16cbc:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   16cbe:	4c03      	ldr	r4, [pc, #12]	; (16ccc <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
   16cc0:	2301      	movs	r3, #1
   16cc2:	7822      	ldrb	r2, [r4, #0]
   16cc4:	f7ff ff7e 	bl	16bc4 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   16cc8:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
   16cca:	bd10      	pop	{r4, pc}
   16ccc:	200053a2 	.word	0x200053a2

00016cd0 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	*dynamic_regions, uint8_t regions_num)
{
   16cd0:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
   16cd2:	4a09      	ldr	r2, [pc, #36]	; (16cf8 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
   16cd4:	2300      	movs	r3, #0
   16cd6:	7812      	ldrb	r2, [r2, #0]
   16cd8:	f7ff ff74 	bl	16bc4 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
   16cdc:	f110 0f16 	cmn.w	r0, #22
   16ce0:	d003      	beq.n	16cea <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
  MPU->RNR = rnr;
   16ce2:	4b06      	ldr	r3, [pc, #24]	; (16cfc <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)
  MPU->RASR = 0U;
   16ce4:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   16ce6:	2807      	cmp	r0, #7
   16ce8:	dd00      	ble.n	16cec <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
   16cea:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
   16cec:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
  MPU->RASR = 0U;
   16cf0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
   16cf4:	3001      	adds	r0, #1
   16cf6:	e7f6      	b.n	16ce6 <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
   16cf8:	200053a2 	.word	0x200053a2
   16cfc:	e000ed00 	.word	0xe000ed00

00016d00 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   16d00:	4914      	ldr	r1, [pc, #80]	; (16d54 <z_arm_mpu_init+0x54>)
   16d02:	6808      	ldr	r0, [r1, #0]
   16d04:	2808      	cmp	r0, #8
{
   16d06:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
   16d08:	d821      	bhi.n	16d4e <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
   16d0a:	f7ff ffcd 	bl	16ca8 <arm_core_mpu_disable>
   16d0e:	4c12      	ldr	r4, [pc, #72]	; (16d58 <z_arm_mpu_init+0x58>)
   16d10:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   16d12:	2200      	movs	r2, #0
   16d14:	4290      	cmp	r0, r2
   16d16:	f101 010c 	add.w	r1, r1, #12
   16d1a:	d105      	bne.n	16d28 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   16d1c:	4b0f      	ldr	r3, [pc, #60]	; (16d5c <z_arm_mpu_init+0x5c>)
   16d1e:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
   16d20:	f7ff ffb6 	bl	16c90 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
   16d24:	2000      	movs	r0, #0
}
   16d26:	bd10      	pop	{r4, pc}
   16d28:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   16d2c:	f851 3c0c 	ldr.w	r3, [r1, #-12]
   16d30:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
   16d34:	4313      	orrs	r3, r2
   16d36:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   16d3a:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   16d3e:	f851 3c04 	ldr.w	r3, [r1, #-4]
   16d42:	f043 0301 	orr.w	r3, r3, #1
   16d46:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   16d4a:	3201      	adds	r2, #1
   16d4c:	e7e2      	b.n	16d14 <z_arm_mpu_init+0x14>
		return -1;
   16d4e:	f04f 30ff 	mov.w	r0, #4294967295
   16d52:	e7e8      	b.n	16d26 <z_arm_mpu_init+0x26>
   16d54:	000257dc 	.word	0x000257dc
   16d58:	e000ed00 	.word	0xe000ed00
   16d5c:	200053a2 	.word	0x200053a2

00016d60 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   16d60:	4b01      	ldr	r3, [pc, #4]	; (16d68 <__stdout_hook_install+0x8>)
   16d62:	6018      	str	r0, [r3, #0]
}
   16d64:	4770      	bx	lr
   16d66:	bf00      	nop
   16d68:	20000534 	.word	0x20000534

00016d6c <nordicsemi_nrf52_init>:
	__asm__ volatile(
   16d6c:	f04f 0340 	mov.w	r3, #64	; 0x40
   16d70:	f3ef 8211 	mrs	r2, BASEPRI
   16d74:	f383 8812 	msr	BASEPRI_MAX, r3
   16d78:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   16d7c:	4906      	ldr	r1, [pc, #24]	; (16d98 <nordicsemi_nrf52_init+0x2c>)
   16d7e:	2301      	movs	r3, #1
   16d80:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
   16d84:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   16d88:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
   16d8c:	f382 8811 	msr	BASEPRI, r2
   16d90:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   16d94:	2000      	movs	r0, #0
   16d96:	4770      	bx	lr
   16d98:	4001e000 	.word	0x4001e000

00016d9c <sys_arch_reboot>:
    *p_gpregret = val;
   16d9c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   16da0:	b2c0      	uxtb	r0, r0
   16da2:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
   16da6:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   16daa:	4905      	ldr	r1, [pc, #20]	; (16dc0 <sys_arch_reboot+0x24>)
   16dac:	4b05      	ldr	r3, [pc, #20]	; (16dc4 <sys_arch_reboot+0x28>)
   16dae:	68ca      	ldr	r2, [r1, #12]
   16db0:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   16db4:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   16db6:	60cb      	str	r3, [r1, #12]
   16db8:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   16dbc:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   16dbe:	e7fd      	b.n	16dbc <sys_arch_reboot+0x20>
   16dc0:	e000ed00 	.word	0xe000ed00
   16dc4:	05fa0004 	.word	0x05fa0004

00016dc8 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   16dc8:	b120      	cbz	r0, 16dd4 <arch_busy_wait+0xc>
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   16dca:	4b03      	ldr	r3, [pc, #12]	; (16dd8 <arch_busy_wait+0x10>)
   16dcc:	0180      	lsls	r0, r0, #6
   16dce:	f043 0301 	orr.w	r3, r3, #1
   16dd2:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   16dd4:	4770      	bx	lr
   16dd6:	bf00      	nop
   16dd8:	000256b0 	.word	0x000256b0

00016ddc <bt_hex>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
   16ddc:	4b0e      	ldr	r3, [pc, #56]	; (16e18 <bt_hex+0x3c>)
   16dde:	2940      	cmp	r1, #64	; 0x40
{
   16de0:	b570      	push	{r4, r5, r6, lr}
	len = MIN(len, (sizeof(str) - 1) / 2);
   16de2:	bf28      	it	cs
   16de4:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
		str[i * 2] = hex[b[i] >> 4];
   16de6:	4c0d      	ldr	r4, [pc, #52]	; (16e1c <bt_hex+0x40>)
   16de8:	1846      	adds	r6, r0, r1
   16dea:	461d      	mov	r5, r3
	for (i = 0; i < len; i++) {
   16dec:	42b0      	cmp	r0, r6
   16dee:	f103 0302 	add.w	r3, r3, #2
   16df2:	d104      	bne.n	16dfe <bt_hex+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
   16df4:	2300      	movs	r3, #0
   16df6:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
   16dfa:	4807      	ldr	r0, [pc, #28]	; (16e18 <bt_hex+0x3c>)
   16dfc:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2] = hex[b[i] >> 4];
   16dfe:	7802      	ldrb	r2, [r0, #0]
   16e00:	0912      	lsrs	r2, r2, #4
   16e02:	5ca2      	ldrb	r2, [r4, r2]
   16e04:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
   16e08:	f810 2b01 	ldrb.w	r2, [r0], #1
   16e0c:	f002 020f 	and.w	r2, r2, #15
   16e10:	5ca2      	ldrb	r2, [r4, r2]
   16e12:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (i = 0; i < len; i++) {
   16e16:	e7e9      	b.n	16dec <bt_hex+0x10>
   16e18:	200053c1 	.word	0x200053c1
   16e1c:	0002687c 	.word	0x0002687c

00016e20 <bt_addr_le_str>:

	return str;
}

const char *bt_addr_le_str(const bt_addr_le_t *addr)
{
   16e20:	b530      	push	{r4, r5, lr}
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
	char type[10];

	switch (addr->type) {
   16e22:	7803      	ldrb	r3, [r0, #0]
   16e24:	b08b      	sub	sp, #44	; 0x2c
   16e26:	4604      	mov	r4, r0
   16e28:	ad07      	add	r5, sp, #28
   16e2a:	2b03      	cmp	r3, #3
   16e2c:	d821      	bhi.n	16e72 <bt_addr_le_str+0x52>
   16e2e:	e8df f003 	tbb	[pc, r3]
   16e32:	1a02      	.short	0x1a02
   16e34:	1e1c      	.short	0x1e1c
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
   16e36:	4912      	ldr	r1, [pc, #72]	; (16e80 <bt_addr_le_str+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
   16e38:	4628      	mov	r0, r5
   16e3a:	f00e f9da 	bl	251f2 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   16e3e:	9505      	str	r5, [sp, #20]
   16e40:	7863      	ldrb	r3, [r4, #1]
   16e42:	9304      	str	r3, [sp, #16]
   16e44:	78a3      	ldrb	r3, [r4, #2]
   16e46:	9303      	str	r3, [sp, #12]
   16e48:	78e3      	ldrb	r3, [r4, #3]
   16e4a:	9302      	str	r3, [sp, #8]
   16e4c:	7923      	ldrb	r3, [r4, #4]
   16e4e:	9301      	str	r3, [sp, #4]
   16e50:	7963      	ldrb	r3, [r4, #5]
   16e52:	9300      	str	r3, [sp, #0]
   16e54:	79a3      	ldrb	r3, [r4, #6]
   16e56:	4a0b      	ldr	r2, [pc, #44]	; (16e84 <bt_addr_le_str+0x64>)
   16e58:	480b      	ldr	r0, [pc, #44]	; (16e88 <bt_addr_le_str+0x68>)
   16e5a:	211e      	movs	r1, #30
   16e5c:	f00a fc96 	bl	2178c <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
   16e60:	4809      	ldr	r0, [pc, #36]	; (16e88 <bt_addr_le_str+0x68>)
   16e62:	b00b      	add	sp, #44	; 0x2c
   16e64:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
   16e66:	4909      	ldr	r1, [pc, #36]	; (16e8c <bt_addr_le_str+0x6c>)
   16e68:	e7e6      	b.n	16e38 <bt_addr_le_str+0x18>
		strcpy(type, "public-id");
   16e6a:	4909      	ldr	r1, [pc, #36]	; (16e90 <bt_addr_le_str+0x70>)
   16e6c:	e7e4      	b.n	16e38 <bt_addr_le_str+0x18>
		strcpy(type, "random-id");
   16e6e:	4909      	ldr	r1, [pc, #36]	; (16e94 <bt_addr_le_str+0x74>)
   16e70:	e7e2      	b.n	16e38 <bt_addr_le_str+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   16e72:	4a09      	ldr	r2, [pc, #36]	; (16e98 <bt_addr_le_str+0x78>)
   16e74:	210a      	movs	r1, #10
   16e76:	4628      	mov	r0, r5
   16e78:	f00a fc88 	bl	2178c <snprintk>
		break;
   16e7c:	e7df      	b.n	16e3e <bt_addr_le_str+0x1e>
   16e7e:	bf00      	nop
   16e80:	0002683e 	.word	0x0002683e
   16e84:	00026859 	.word	0x00026859
   16e88:	200053a3 	.word	0x200053a3
   16e8c:	00026001 	.word	0x00026001
   16e90:	00026845 	.word	0x00026845
   16e94:	0002684f 	.word	0x0002684f
   16e98:	000274db 	.word	0x000274db

00016e9c <long_wq_init>:
{
	return k_work_submit_to_queue(&bt_long_wq, work);
}

static int long_wq_init(const struct device *d)
{
   16e9c:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(d);

	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};

	k_work_queue_init(&bt_long_wq);
   16e9e:	4d0a      	ldr	r5, [pc, #40]	; (16ec8 <long_wq_init+0x2c>)
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   16ea0:	4b0a      	ldr	r3, [pc, #40]	; (16ecc <long_wq_init+0x30>)
{
   16ea2:	b085      	sub	sp, #20
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   16ea4:	2400      	movs	r4, #0
	k_work_queue_init(&bt_long_wq);
   16ea6:	4628      	mov	r0, r5
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   16ea8:	9302      	str	r3, [sp, #8]
   16eaa:	9403      	str	r4, [sp, #12]
	k_work_queue_init(&bt_long_wq);
   16eac:	f00d fdb1 	bl	24a12 <k_work_queue_init>

	k_work_queue_start(&bt_long_wq, bt_lw_stack_area,
   16eb0:	ab02      	add	r3, sp, #8
   16eb2:	9300      	str	r3, [sp, #0]
   16eb4:	4628      	mov	r0, r5
   16eb6:	4906      	ldr	r1, [pc, #24]	; (16ed0 <long_wq_init+0x34>)
   16eb8:	230a      	movs	r3, #10
   16eba:	f44f 62a3 	mov.w	r2, #1304	; 0x518
   16ebe:	f008 fe29 	bl	1fb14 <k_work_queue_start>
			   K_THREAD_STACK_SIZEOF(bt_lw_stack_area),
			   CONFIG_BT_LONG_WQ_PRIO, &cfg);

	return 0;
}
   16ec2:	4620      	mov	r0, r4
   16ec4:	b005      	add	sp, #20
   16ec6:	bd30      	pop	{r4, r5, pc}
   16ec8:	20001b88 	.word	0x20001b88
   16ecc:	0002688d 	.word	0x0002688d
   16ed0:	20007e00 	.word	0x20007e00

00016ed4 <bt_long_wq_schedule>:
{
   16ed4:	4601      	mov	r1, r0
	return k_work_schedule_for_queue(&bt_long_wq, dwork, timeout);
   16ed6:	4801      	ldr	r0, [pc, #4]	; (16edc <bt_long_wq_schedule+0x8>)
   16ed8:	f008 be54 	b.w	1fb84 <k_work_schedule_for_queue>
   16edc:	20001b88 	.word	0x20001b88

00016ee0 <uuid_to_uuid128>:
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
	switch (src->type) {
   16ee0:	7803      	ldrb	r3, [r0, #0]
   16ee2:	2b01      	cmp	r3, #1
{
   16ee4:	b530      	push	{r4, r5, lr}
	switch (src->type) {
   16ee6:	d013      	beq.n	16f10 <uuid_to_uuid128+0x30>
   16ee8:	2b02      	cmp	r3, #2
   16eea:	d027      	beq.n	16f3c <uuid_to_uuid128+0x5c>
   16eec:	b97b      	cbnz	r3, 16f0e <uuid_to_uuid128+0x2e>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
   16eee:	4b19      	ldr	r3, [pc, #100]	; (16f54 <uuid_to_uuid128+0x74>)
   16ef0:	460a      	mov	r2, r1
   16ef2:	f103 0410 	add.w	r4, r3, #16
   16ef6:	f853 5b04 	ldr.w	r5, [r3], #4
   16efa:	f842 5b04 	str.w	r5, [r2], #4
   16efe:	42a3      	cmp	r3, r4
   16f00:	d1f9      	bne.n	16ef6 <uuid_to_uuid128+0x16>
   16f02:	781b      	ldrb	r3, [r3, #0]
   16f04:	7013      	strb	r3, [r2, #0]
		sys_put_le16(BT_UUID_16(src)->val,
   16f06:	8843      	ldrh	r3, [r0, #2]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
   16f08:	734b      	strb	r3, [r1, #13]
	dst[1] = val >> 8;
   16f0a:	0a1b      	lsrs	r3, r3, #8
   16f0c:	738b      	strb	r3, [r1, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
   16f0e:	bd30      	pop	{r4, r5, pc}
		*dst = uuid128_base;
   16f10:	4b10      	ldr	r3, [pc, #64]	; (16f54 <uuid_to_uuid128+0x74>)
   16f12:	460a      	mov	r2, r1
   16f14:	f103 0410 	add.w	r4, r3, #16
   16f18:	f853 5b04 	ldr.w	r5, [r3], #4
   16f1c:	f842 5b04 	str.w	r5, [r2], #4
   16f20:	42a3      	cmp	r3, r4
   16f22:	d1f9      	bne.n	16f18 <uuid_to_uuid128+0x38>
   16f24:	781b      	ldrb	r3, [r3, #0]
   16f26:	7013      	strb	r3, [r2, #0]
		sys_put_le32(BT_UUID_32(src)->val,
   16f28:	6843      	ldr	r3, [r0, #4]
	dst[0] = val;
   16f2a:	734b      	strb	r3, [r1, #13]
	dst[1] = val >> 8;
   16f2c:	f3c3 2207 	ubfx	r2, r3, #8, #8
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(uint32_t val, uint8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
   16f30:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
   16f32:	73cb      	strb	r3, [r1, #15]
	dst[1] = val >> 8;
   16f34:	0a1b      	lsrs	r3, r3, #8
   16f36:	738a      	strb	r2, [r1, #14]
   16f38:	740b      	strb	r3, [r1, #16]
}
   16f3a:	e7e8      	b.n	16f0e <uuid_to_uuid128+0x2e>
   16f3c:	f100 0310 	add.w	r3, r0, #16
   16f40:	f850 2b04 	ldr.w	r2, [r0], #4
   16f44:	f841 2b04 	str.w	r2, [r1], #4
   16f48:	4298      	cmp	r0, r3
   16f4a:	d1f9      	bne.n	16f40 <uuid_to_uuid128+0x60>
   16f4c:	7803      	ldrb	r3, [r0, #0]
   16f4e:	700b      	strb	r3, [r1, #0]
   16f50:	e7dd      	b.n	16f0e <uuid_to_uuid128+0x2e>
   16f52:	bf00      	nop
   16f54:	00026896 	.word	0x00026896

00016f58 <bt_addr_from_str>:

	return 0;
}

int bt_addr_from_str(const char *str, bt_addr_t *addr)
{
   16f58:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   16f5c:	4604      	mov	r4, r0
   16f5e:	460e      	mov	r6, r1
	int i, j;
	uint8_t tmp;

	if (strlen(str) != 17U) {
   16f60:	f7f5 fe06 	bl	cb70 <strlen>
   16f64:	2811      	cmp	r0, #17
   16f66:	d004      	beq.n	16f72 <bt_addr_from_str+0x1a>
		return -EINVAL;
   16f68:	f06f 0015 	mvn.w	r0, #21

		addr->val[i] |= tmp;
	}

	return 0;
}
   16f6c:	b002      	add	sp, #8
   16f6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16f72:	f8df 804c 	ldr.w	r8, [pc, #76]	; 16fc0 <bt_addr_from_str+0x68>
   16f76:	1e67      	subs	r7, r4, #1
	for (i = 5, j = 1; *str != '\0'; str++, j++) {
   16f78:	2505      	movs	r5, #5
   16f7a:	f1c4 0402 	rsb	r4, r4, #2
   16f7e:	19e3      	adds	r3, r4, r7
   16f80:	f817 0f01 	ldrb.w	r0, [r7, #1]!
   16f84:	2800      	cmp	r0, #0
   16f86:	d0f1      	beq.n	16f6c <bt_addr_from_str+0x14>
		if (!(j % 3) && (*str != ':')) {
   16f88:	fb08 f303 	mul.w	r3, r8, r3
   16f8c:	f1b3 3f55 	cmp.w	r3, #1431655765	; 0x55555555
   16f90:	d803      	bhi.n	16f9a <bt_addr_from_str+0x42>
   16f92:	283a      	cmp	r0, #58	; 0x3a
   16f94:	d1e8      	bne.n	16f68 <bt_addr_from_str+0x10>
			i--;
   16f96:	3d01      	subs	r5, #1
			continue;
   16f98:	e7f1      	b.n	16f7e <bt_addr_from_str+0x26>
		} else if (*str == ':') {
   16f9a:	283a      	cmp	r0, #58	; 0x3a
   16f9c:	d0fb      	beq.n	16f96 <bt_addr_from_str+0x3e>
		addr->val[i] = addr->val[i] << 4;
   16f9e:	5d73      	ldrb	r3, [r6, r5]
   16fa0:	011b      	lsls	r3, r3, #4
   16fa2:	5573      	strb	r3, [r6, r5]
		if (char2hex(*str, &tmp) < 0) {
   16fa4:	f10d 0107 	add.w	r1, sp, #7
   16fa8:	7838      	ldrb	r0, [r7, #0]
   16faa:	f00a fbb3 	bl	21714 <char2hex>
   16fae:	2800      	cmp	r0, #0
   16fb0:	dbda      	blt.n	16f68 <bt_addr_from_str+0x10>
		addr->val[i] |= tmp;
   16fb2:	5d73      	ldrb	r3, [r6, r5]
   16fb4:	f89d 2007 	ldrb.w	r2, [sp, #7]
   16fb8:	4313      	orrs	r3, r2
   16fba:	5573      	strb	r3, [r6, r5]
	for (i = 5, j = 1; *str != '\0'; str++, j++) {
   16fbc:	e7df      	b.n	16f7e <bt_addr_from_str+0x26>
   16fbe:	bf00      	nop
   16fc0:	aaaaaaab 	.word	0xaaaaaaab

00016fc4 <bt_addr_le_from_str>:

int bt_addr_le_from_str(const char *str, const char *type, bt_addr_le_t *addr)
{
   16fc4:	b538      	push	{r3, r4, r5, lr}
   16fc6:	460c      	mov	r4, r1
	int err;

	err = bt_addr_from_str(str, &addr->a);
   16fc8:	1c51      	adds	r1, r2, #1
{
   16fca:	4615      	mov	r5, r2
	err = bt_addr_from_str(str, &addr->a);
   16fcc:	f7ff ffc4 	bl	16f58 <bt_addr_from_str>
	if (err < 0) {
   16fd0:	2800      	cmp	r0, #0
   16fd2:	db07      	blt.n	16fe4 <bt_addr_le_from_str+0x20>
		return err;
	}

	if (!strcmp(type, "public") || !strcmp(type, "(public)")) {
   16fd4:	491c      	ldr	r1, [pc, #112]	; (17048 <bt_addr_le_from_str+0x84>)
   16fd6:	4620      	mov	r0, r4
   16fd8:	f7f5 fdc0 	bl	cb5c <strcmp>
   16fdc:	b918      	cbnz	r0, 16fe6 <bt_addr_le_from_str+0x22>
		addr->type = BT_ADDR_LE_PUBLIC;
   16fde:	2300      	movs	r3, #0
   16fe0:	702b      	strb	r3, [r5, #0]
		addr->type = BT_ADDR_LE_RANDOM_ID;
	} else {
		return -EINVAL;
	}

	return 0;
   16fe2:	2000      	movs	r0, #0
}
   16fe4:	bd38      	pop	{r3, r4, r5, pc}
	if (!strcmp(type, "public") || !strcmp(type, "(public)")) {
   16fe6:	4919      	ldr	r1, [pc, #100]	; (1704c <bt_addr_le_from_str+0x88>)
   16fe8:	4620      	mov	r0, r4
   16fea:	f7f5 fdb7 	bl	cb5c <strcmp>
   16fee:	2800      	cmp	r0, #0
   16ff0:	d0f5      	beq.n	16fde <bt_addr_le_from_str+0x1a>
	} else if (!strcmp(type, "random") || !strcmp(type, "(random)")) {
   16ff2:	4917      	ldr	r1, [pc, #92]	; (17050 <bt_addr_le_from_str+0x8c>)
   16ff4:	4620      	mov	r0, r4
   16ff6:	f7f5 fdb1 	bl	cb5c <strcmp>
   16ffa:	b908      	cbnz	r0, 17000 <bt_addr_le_from_str+0x3c>
		addr->type = BT_ADDR_LE_RANDOM;
   16ffc:	2301      	movs	r3, #1
   16ffe:	e7ef      	b.n	16fe0 <bt_addr_le_from_str+0x1c>
	} else if (!strcmp(type, "random") || !strcmp(type, "(random)")) {
   17000:	4914      	ldr	r1, [pc, #80]	; (17054 <bt_addr_le_from_str+0x90>)
   17002:	4620      	mov	r0, r4
   17004:	f7f5 fdaa 	bl	cb5c <strcmp>
   17008:	2800      	cmp	r0, #0
   1700a:	d0f7      	beq.n	16ffc <bt_addr_le_from_str+0x38>
	} else if (!strcmp(type, "public-id") || !strcmp(type, "(public-id)")) {
   1700c:	4912      	ldr	r1, [pc, #72]	; (17058 <bt_addr_le_from_str+0x94>)
   1700e:	4620      	mov	r0, r4
   17010:	f7f5 fda4 	bl	cb5c <strcmp>
   17014:	b908      	cbnz	r0, 1701a <bt_addr_le_from_str+0x56>
		addr->type = BT_ADDR_LE_PUBLIC_ID;
   17016:	2302      	movs	r3, #2
   17018:	e7e2      	b.n	16fe0 <bt_addr_le_from_str+0x1c>
	} else if (!strcmp(type, "public-id") || !strcmp(type, "(public-id)")) {
   1701a:	4910      	ldr	r1, [pc, #64]	; (1705c <bt_addr_le_from_str+0x98>)
   1701c:	4620      	mov	r0, r4
   1701e:	f7f5 fd9d 	bl	cb5c <strcmp>
   17022:	2800      	cmp	r0, #0
   17024:	d0f7      	beq.n	17016 <bt_addr_le_from_str+0x52>
	} else if (!strcmp(type, "random-id") || !strcmp(type, "(random-id)")) {
   17026:	490e      	ldr	r1, [pc, #56]	; (17060 <bt_addr_le_from_str+0x9c>)
   17028:	4620      	mov	r0, r4
   1702a:	f7f5 fd97 	bl	cb5c <strcmp>
   1702e:	b908      	cbnz	r0, 17034 <bt_addr_le_from_str+0x70>
		addr->type = BT_ADDR_LE_RANDOM_ID;
   17030:	2303      	movs	r3, #3
   17032:	e7d5      	b.n	16fe0 <bt_addr_le_from_str+0x1c>
	} else if (!strcmp(type, "random-id") || !strcmp(type, "(random-id)")) {
   17034:	490b      	ldr	r1, [pc, #44]	; (17064 <bt_addr_le_from_str+0xa0>)
   17036:	4620      	mov	r0, r4
   17038:	f7f5 fd90 	bl	cb5c <strcmp>
   1703c:	2800      	cmp	r0, #0
   1703e:	d0f7      	beq.n	17030 <bt_addr_le_from_str+0x6c>
		return -EINVAL;
   17040:	f06f 0015 	mvn.w	r0, #21
   17044:	e7ce      	b.n	16fe4 <bt_addr_le_from_str+0x20>
   17046:	bf00      	nop
   17048:	0002683e 	.word	0x0002683e
   1704c:	000268a7 	.word	0x000268a7
   17050:	00026001 	.word	0x00026001
   17054:	000268b0 	.word	0x000268b0
   17058:	00026845 	.word	0x00026845
   1705c:	000268b9 	.word	0x000268b9
   17060:	0002684f 	.word	0x0002684f
   17064:	000268c5 	.word	0x000268c5

00017068 <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE, 8,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
   17068:	b538      	push	{r3, r4, r5, lr}
   1706a:	4605      	mov	r5, r0
 * @copydetails net_buf_alloc_fixed
 */
static inline struct net_buf * __must_check net_buf_alloc(struct net_buf_pool *pool,
							  k_timeout_t timeout)
{
	return net_buf_alloc_fixed(pool, timeout);
   1706c:	4805      	ldr	r0, [pc, #20]	; (17084 <bt_buf_get_rx+0x1c>)
   1706e:	f00c fee5 	bl	23e3c <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
   17072:	4604      	mov	r4, r0
   17074:	b120      	cbz	r0, 17080 <bt_buf_get_rx+0x18>
 * @param buf Buffer to initialize.
 * @param reserve How much headroom to reserve.
 */
static inline void net_buf_reserve(struct net_buf *buf, size_t reserve)
{
	net_buf_simple_reserve(&buf->b, reserve);
   17076:	2100      	movs	r1, #0
   17078:	300c      	adds	r0, #12
   1707a:	f00c fee6 	bl	23e4a <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   1707e:	7625      	strb	r5, [r4, #24]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
   17080:	4620      	mov	r0, r4
   17082:	bd38      	pop	{r3, r4, r5, pc}
   17084:	2000093c 	.word	0x2000093c

00017088 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
   17088:	b510      	push	{r4, lr}
   1708a:	460b      	mov	r3, r1
	struct net_buf *buf;

	if (bt_dev.sent_cmd) {
   1708c:	490a      	ldr	r1, [pc, #40]	; (170b8 <bt_buf_get_cmd_complete+0x30>)
{
   1708e:	4602      	mov	r2, r0
	if (bt_dev.sent_cmd) {
   17090:	f8d1 0130 	ldr.w	r0, [r1, #304]	; 0x130
   17094:	b920      	cbnz	r0, 170a0 <bt_buf_get_cmd_complete+0x18>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
   17096:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
   1709a:	2001      	movs	r0, #1
   1709c:	f7ff bfe4 	b.w	17068 <bt_buf_get_rx>
		buf = net_buf_ref(bt_dev.sent_cmd);
   170a0:	f00c ff06 	bl	23eb0 <net_buf_ref>
   170a4:	2301      	movs	r3, #1
		buf->len = 0U;
   170a6:	2100      	movs	r1, #0
   170a8:	7603      	strb	r3, [r0, #24]
   170aa:	8201      	strh	r1, [r0, #16]
		buf = net_buf_ref(bt_dev.sent_cmd);
   170ac:	4604      	mov	r4, r0
   170ae:	300c      	adds	r0, #12
   170b0:	f00c fecb 	bl	23e4a <net_buf_simple_reserve>
}
   170b4:	4620      	mov	r0, r4
   170b6:	bd10      	pop	{r4, pc}
   170b8:	20000388 	.word	0x20000388

000170bc <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
   170bc:	b570      	push	{r4, r5, r6, lr}
   170be:	4604      	mov	r4, r0
	switch (evt) {
   170c0:	2c0f      	cmp	r4, #15
{
   170c2:	460d      	mov	r5, r1
   170c4:	4610      	mov	r0, r2
   170c6:	4619      	mov	r1, r3
	switch (evt) {
   170c8:	d805      	bhi.n	170d6 <bt_buf_get_evt+0x1a>
   170ca:	2c0d      	cmp	r4, #13
   170cc:	d90d      	bls.n	170ea <bt_buf_get_evt+0x2e>
			return buf;
		}

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
   170ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
   170d2:	f7ff bfd9 	b.w	17088 <bt_buf_get_cmd_complete>
	switch (evt) {
   170d6:	2c13      	cmp	r4, #19
   170d8:	d107      	bne.n	170ea <bt_buf_get_evt+0x2e>
	return net_buf_alloc_fixed(pool, timeout);
   170da:	480c      	ldr	r0, [pc, #48]	; (1710c <bt_buf_get_evt+0x50>)
   170dc:	f00c feae 	bl	23e3c <net_buf_alloc_fixed>
			if (buf) {
   170e0:	4604      	mov	r4, r0
   170e2:	b938      	cbnz	r0, 170f4 <bt_buf_get_evt+0x38>
{
   170e4:	2400      	movs	r4, #0
}
   170e6:	4620      	mov	r0, r4
   170e8:	bd70      	pop	{r4, r5, r6, pc}
   170ea:	4602      	mov	r2, r0
   170ec:	460b      	mov	r3, r1
		if (discardable) {
   170ee:	b145      	cbz	r5, 17102 <bt_buf_get_evt+0x46>
   170f0:	4807      	ldr	r0, [pc, #28]	; (17110 <bt_buf_get_evt+0x54>)
   170f2:	e7f3      	b.n	170dc <bt_buf_get_evt+0x20>
	net_buf_simple_reserve(&buf->b, reserve);
   170f4:	2100      	movs	r1, #0
   170f6:	300c      	adds	r0, #12
   170f8:	f00c fea7 	bl	23e4a <net_buf_simple_reserve>
   170fc:	2301      	movs	r3, #1
   170fe:	7623      	strb	r3, [r4, #24]
}
   17100:	e7f1      	b.n	170e6 <bt_buf_get_evt+0x2a>
}
   17102:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   17106:	2001      	movs	r0, #1
   17108:	f7ff bfae 	b.w	17068 <bt_buf_get_rx>
   1710c:	20000968 	.word	0x20000968
   17110:	200008b8 	.word	0x200008b8

00017114 <hci_disconn_complete_prio>:

	return false;
}

static void hci_disconn_complete_prio(struct net_buf *buf)
{
   17114:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   17116:	68c3      	ldr	r3, [r0, #12]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   17118:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	struct bt_conn *conn;

	LOG_DBG("status 0x%02x handle %u reason 0x%02x", evt->status, handle, evt->reason);

	if (evt->status) {
   1711c:	781b      	ldrb	r3, [r3, #0]
   1711e:	b963      	cbnz	r3, 1713a <hci_disconn_complete_prio+0x26>
		return;
	}

	conn = bt_conn_lookup_handle(handle);
   17120:	4620      	mov	r0, r4
   17122:	f002 fb8d 	bl	19840 <bt_conn_lookup_handle>
	if (!conn) {
   17126:	4605      	mov	r5, r0
   17128:	b940      	cbnz	r0, 1713c <hci_disconn_complete_prio+0x28>
		if (!disconnected_handles[i]) {
   1712a:	4b08      	ldr	r3, [pc, #32]	; (1714c <hci_disconn_complete_prio+0x38>)
   1712c:	881a      	ldrh	r2, [r3, #0]
   1712e:	b922      	cbnz	r2, 1713a <hci_disconn_complete_prio+0x26>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
   17130:	ea6f 5004 	mvn.w	r0, r4, lsl #20
   17134:	ea6f 5010 	mvn.w	r0, r0, lsr #20
   17138:	8018      	strh	r0, [r3, #0]
		return;
	}

	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
	bt_conn_unref(conn);
}
   1713a:	bd38      	pop	{r3, r4, r5, pc}
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   1713c:	2101      	movs	r1, #1
   1713e:	f002 fb87 	bl	19850 <bt_conn_set_state>
	bt_conn_unref(conn);
   17142:	4628      	mov	r0, r5
}
   17144:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   17148:	f00b bdf5 	b.w	22d36 <bt_conn_unref>
   1714c:	2000535e 	.word	0x2000535e

00017150 <find_pending_connect.part.0>:
	cp->phy_opts = phy_opts;

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
}

static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   17150:	b510      	push	{r4, lr}

		return conn;
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   17152:	4c08      	ldr	r4, [pc, #32]	; (17174 <find_pending_connect.part.0+0x24>)
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   17154:	4601      	mov	r1, r0
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   17156:	2205      	movs	r2, #5
   17158:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
   1715c:	f002 fd7c 	bl	19c58 <bt_conn_lookup_state_le>
					       BT_CONN_CONNECTING_DIR_ADV);
		if (!conn) {
   17160:	b938      	cbnz	r0, 17172 <find_pending_connect.part.0+0x22>
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   17162:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
   17166:	4904      	ldr	r1, [pc, #16]	; (17178 <find_pending_connect.part.0+0x28>)

		return conn;
	}

	return NULL;
}
   17168:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   1716c:	2204      	movs	r2, #4
   1716e:	f002 bd73 	b.w	19c58 <bt_conn_lookup_state_le>
}
   17172:	bd10      	pop	{r4, pc}
   17174:	20000388 	.word	0x20000388
   17178:	00026824 	.word	0x00026824

0001717c <hci_data_buf_overflow>:
{
   1717c:	b580      	push	{r7, lr}
	LOG_WRN("Data buffer overflow (link type 0x%02x)", evt->link_type);
   1717e:	68c3      	ldr	r3, [r0, #12]
{
   17180:	af00      	add	r7, sp, #0
	LOG_WRN("Data buffer overflow (link type 0x%02x)", evt->link_type);
   17182:	b088      	sub	sp, #32
   17184:	781b      	ldrb	r3, [r3, #0]
   17186:	466a      	mov	r2, sp
   17188:	4906      	ldr	r1, [pc, #24]	; (171a4 <hci_data_buf_overflow+0x28>)
   1718a:	4807      	ldr	r0, [pc, #28]	; (171a8 <hci_data_buf_overflow+0x2c>)
   1718c:	e9c2 1305 	strd	r1, r3, [r2, #20]
   17190:	2303      	movs	r3, #3
   17192:	f842 3f10 	str.w	r3, [r2, #16]!
   17196:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1719a:	f00b fb98 	bl	228ce <z_log_msg_static_create.constprop.0>
}
   1719e:	46bd      	mov	sp, r7
   171a0:	bd80      	pop	{r7, pc}
   171a2:	bf00      	nop
   171a4:	000268d1 	.word	0x000268d1
   171a8:	000255a4 	.word	0x000255a4

000171ac <le_conn_param_neg_reply.part.0>:
	}

	return true;
}

static void le_conn_param_neg_reply(uint16_t handle, uint8_t reason)
   171ac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct net_buf *buf;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
				sizeof(*cp));
	if (!buf) {
		LOG_ERR("Unable to allocate buffer");
   171ae:	4b06      	ldr	r3, [pc, #24]	; (171c8 <le_conn_param_neg_reply.part.0+0x1c>)
   171b0:	9305      	str	r3, [sp, #20]
   171b2:	4806      	ldr	r0, [pc, #24]	; (171cc <le_conn_param_neg_reply.part.0+0x20>)
   171b4:	2302      	movs	r3, #2
   171b6:	aa04      	add	r2, sp, #16
   171b8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   171bc:	9304      	str	r3, [sp, #16]
   171be:	f00b fb86 	bl	228ce <z_log_msg_static_create.constprop.0>
	cp = net_buf_add(buf, sizeof(*cp));
	cp->handle = sys_cpu_to_le16(handle);
	cp->reason = sys_cpu_to_le16(reason);

	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
}
   171c2:	b007      	add	sp, #28
   171c4:	f85d fb04 	ldr.w	pc, [sp], #4
   171c8:	000268f9 	.word	0x000268f9
   171cc:	000255a4 	.word	0x000255a4

000171d0 <rx_queue_put>:
	}
}

#if !defined(CONFIG_BT_RECV_BLOCKING)
static void rx_queue_put(struct net_buf *buf)
{
   171d0:	b598      	push	{r3, r4, r7, lr}
   171d2:	4601      	mov	r1, r0
   171d4:	af00      	add	r7, sp, #0
	net_buf_slist_put(&bt_dev.rx_queue, buf);
   171d6:	480d      	ldr	r0, [pc, #52]	; (1720c <rx_queue_put+0x3c>)
   171d8:	f00c fe3b 	bl	23e52 <net_buf_slist_put>

#if defined(CONFIG_BT_RECV_WORKQ_SYS)
	const int err = k_work_submit(&rx_work);
#elif defined(CONFIG_BT_RECV_WORKQ_BT)
	const int err = k_work_submit_to_queue(&bt_workq, &rx_work);
   171dc:	490c      	ldr	r1, [pc, #48]	; (17210 <rx_queue_put+0x40>)
   171de:	480d      	ldr	r0, [pc, #52]	; (17214 <rx_queue_put+0x44>)
   171e0:	f00d fc06 	bl	249f0 <k_work_submit_to_queue>
#endif /* CONFIG_BT_RECV_WORKQ_SYS */
	if (err < 0) {
   171e4:	2800      	cmp	r0, #0
   171e6:	da0e      	bge.n	17206 <rx_queue_put+0x36>
		LOG_ERR("Could not submit rx_work: %d", err);
   171e8:	466c      	mov	r4, sp
   171ea:	b088      	sub	sp, #32
   171ec:	466a      	mov	r2, sp
   171ee:	4b0a      	ldr	r3, [pc, #40]	; (17218 <rx_queue_put+0x48>)
   171f0:	e9c2 3005 	strd	r3, r0, [r2, #20]
   171f4:	2303      	movs	r3, #3
   171f6:	f842 3f10 	str.w	r3, [r2, #16]!
   171fa:	4808      	ldr	r0, [pc, #32]	; (1721c <rx_queue_put+0x4c>)
   171fc:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   17200:	f00b fb65 	bl	228ce <z_log_msg_static_create.constprop.0>
   17204:	46a5      	mov	sp, r4
	}
}
   17206:	46bd      	mov	sp, r7
   17208:	bd98      	pop	{r3, r4, r7, pc}
   1720a:	bf00      	nop
   1720c:	200004bc 	.word	0x200004bc
   17210:	20000574 	.word	0x20000574
   17214:	20001d38 	.word	0x20001d38
   17218:	00026913 	.word	0x00026913
   1721c:	000255a4 	.word	0x000255a4

00017220 <handle_event.part.0>:
static void handle_event(uint8_t event, struct net_buf *buf, const struct event_handler *handlers,
   17220:	b5b0      	push	{r4, r5, r7, lr}
   17222:	460b      	mov	r3, r1
		LOG_WRN("Unhandled event 0x%02x len %u: %s", event, buf->len,
   17224:	8a0d      	ldrh	r5, [r1, #16]
static void handle_event(uint8_t event, struct net_buf *buf, const struct event_handler *handlers,
   17226:	af00      	add	r7, sp, #0
   17228:	4604      	mov	r4, r0
		LOG_WRN("Unhandled event 0x%02x len %u: %s", event, buf->len,
   1722a:	4629      	mov	r1, r5
   1722c:	68d8      	ldr	r0, [r3, #12]
   1722e:	f7ff fdd5 	bl	16ddc <bt_hex>
   17232:	b08a      	sub	sp, #40	; 0x28
   17234:	466a      	mov	r2, sp
   17236:	4b09      	ldr	r3, [pc, #36]	; (1725c <handle_event.part.0+0x3c>)
   17238:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1723c:	f240 4302 	movw	r3, #1026	; 0x402
   17240:	8493      	strh	r3, [r2, #36]	; 0x24
   17242:	4b07      	ldr	r3, [pc, #28]	; (17260 <handle_event.part.0+0x40>)
   17244:	e9c2 5007 	strd	r5, r0, [r2, #28]
   17248:	f44f 5132 	mov.w	r1, #11392	; 0x2c80
   1724c:	f842 3f10 	str.w	r3, [r2, #16]!
   17250:	4804      	ldr	r0, [pc, #16]	; (17264 <handle_event.part.0+0x44>)
   17252:	f00b fb3c 	bl	228ce <z_log_msg_static_create.constprop.0>
}
   17256:	46bd      	mov	sp, r7
   17258:	bdb0      	pop	{r4, r5, r7, pc}
   1725a:	bf00      	nop
   1725c:	00026930 	.word	0x00026930
   17260:	01000005 	.word	0x01000005
   17264:	000255a4 	.word	0x000255a4

00017268 <hci_hardware_error>:
{
   17268:	b580      	push	{r7, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
   1726a:	2101      	movs	r1, #1
   1726c:	af00      	add	r7, sp, #0
   1726e:	300c      	adds	r0, #12
   17270:	f00c fe6b 	bl	23f4a <net_buf_simple_pull_mem>
	LOG_ERR("Hardware error, hardware code: %d", evt->hardware_code);
   17274:	b088      	sub	sp, #32
   17276:	7803      	ldrb	r3, [r0, #0]
   17278:	466a      	mov	r2, sp
   1727a:	4906      	ldr	r1, [pc, #24]	; (17294 <hci_hardware_error+0x2c>)
   1727c:	4806      	ldr	r0, [pc, #24]	; (17298 <hci_hardware_error+0x30>)
   1727e:	e9c2 1305 	strd	r1, r3, [r2, #20]
   17282:	2303      	movs	r3, #3
   17284:	f842 3f10 	str.w	r3, [r2, #16]!
   17288:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1728c:	f00b fb1f 	bl	228ce <z_log_msg_static_create.constprop.0>
}
   17290:	46bd      	mov	sp, r7
   17292:	bd80      	pop	{r7, pc}
   17294:	00026952 	.word	0x00026952
   17298:	000255a4 	.word	0x000255a4

0001729c <le_data_len_change>:
{
   1729c:	b5b0      	push	{r4, r5, r7, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1729e:	68c3      	ldr	r3, [r0, #12]
   172a0:	881c      	ldrh	r4, [r3, #0]
{
   172a2:	af00      	add	r7, sp, #0
	conn = bt_conn_lookup_handle(handle);
   172a4:	4620      	mov	r0, r4
   172a6:	f002 facb 	bl	19840 <bt_conn_lookup_handle>
	if (!conn) {
   172aa:	b980      	cbnz	r0, 172ce <le_data_len_change+0x32>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   172ac:	466d      	mov	r5, sp
   172ae:	b088      	sub	sp, #32
   172b0:	466a      	mov	r2, sp
   172b2:	4b08      	ldr	r3, [pc, #32]	; (172d4 <le_data_len_change+0x38>)
   172b4:	4808      	ldr	r0, [pc, #32]	; (172d8 <le_data_len_change+0x3c>)
   172b6:	e9c2 3405 	strd	r3, r4, [r2, #20]
   172ba:	2303      	movs	r3, #3
   172bc:	f842 3f10 	str.w	r3, [r2, #16]!
   172c0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   172c4:	f00b fb03 	bl	228ce <z_log_msg_static_create.constprop.0>
   172c8:	46ad      	mov	sp, r5
}
   172ca:	46bd      	mov	sp, r7
   172cc:	bdb0      	pop	{r4, r5, r7, pc}
	bt_conn_unref(conn);
   172ce:	f00b fd32 	bl	22d36 <bt_conn_unref>
   172d2:	e7fa      	b.n	172ca <le_data_len_change+0x2e>
   172d4:	00026974 	.word	0x00026974
   172d8:	000255a4 	.word	0x000255a4

000172dc <le_phy_update_complete>:
{
   172dc:	b5b0      	push	{r4, r5, r7, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   172de:	68c3      	ldr	r3, [r0, #12]
   172e0:	f8b3 4001 	ldrh.w	r4, [r3, #1]
{
   172e4:	af00      	add	r7, sp, #0
	conn = bt_conn_lookup_handle(handle);
   172e6:	4620      	mov	r0, r4
   172e8:	f002 faaa 	bl	19840 <bt_conn_lookup_handle>
	if (!conn) {
   172ec:	b980      	cbnz	r0, 17310 <le_phy_update_complete+0x34>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   172ee:	466d      	mov	r5, sp
   172f0:	b088      	sub	sp, #32
   172f2:	466a      	mov	r2, sp
   172f4:	4b08      	ldr	r3, [pc, #32]	; (17318 <le_phy_update_complete+0x3c>)
   172f6:	4809      	ldr	r0, [pc, #36]	; (1731c <le_phy_update_complete+0x40>)
   172f8:	e9c2 3405 	strd	r3, r4, [r2, #20]
   172fc:	2303      	movs	r3, #3
   172fe:	f842 3f10 	str.w	r3, [r2, #16]!
   17302:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   17306:	f00b fae2 	bl	228ce <z_log_msg_static_create.constprop.0>
   1730a:	46ad      	mov	sp, r5
}
   1730c:	46bd      	mov	sp, r7
   1730e:	bdb0      	pop	{r4, r5, r7, pc}
	bt_conn_unref(conn);
   17310:	f00b fd11 	bl	22d36 <bt_conn_unref>
   17314:	e7fa      	b.n	1730c <le_phy_update_complete+0x30>
   17316:	bf00      	nop
   17318:	00026974 	.word	0x00026974
   1731c:	000255a4 	.word	0x000255a4

00017320 <hci_disconn_complete>:
{
   17320:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   17324:	68c5      	ldr	r5, [r0, #12]
	if (evt->status) {
   17326:	782e      	ldrb	r6, [r5, #0]
{
   17328:	af00      	add	r7, sp, #0
	if (evt->status) {
   1732a:	b9ae      	cbnz	r6, 17358 <hci_disconn_complete+0x38>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1732c:	f8b5 8001 	ldrh.w	r8, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   17330:	4640      	mov	r0, r8
   17332:	f002 fa85 	bl	19840 <bt_conn_lookup_handle>
	if (!conn) {
   17336:	4604      	mov	r4, r0
   17338:	b988      	cbnz	r0, 1735e <hci_disconn_complete+0x3e>
		LOG_ERR("Unable to look up conn with handle %u", handle);
   1733a:	466c      	mov	r4, sp
   1733c:	b088      	sub	sp, #32
   1733e:	466a      	mov	r2, sp
   17340:	4b0b      	ldr	r3, [pc, #44]	; (17370 <hci_disconn_complete+0x50>)
   17342:	480c      	ldr	r0, [pc, #48]	; (17374 <hci_disconn_complete+0x54>)
   17344:	e9c2 3805 	strd	r3, r8, [r2, #20]
   17348:	2303      	movs	r3, #3
   1734a:	f842 3f10 	str.w	r3, [r2, #16]!
   1734e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   17352:	f00b fabc 	bl	228ce <z_log_msg_static_create.constprop.0>
   17356:	46a5      	mov	sp, r4
}
   17358:	46bd      	mov	sp, r7
   1735a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn->err = evt->reason;
   1735e:	78eb      	ldrb	r3, [r5, #3]
   17360:	7243      	strb	r3, [r0, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   17362:	4631      	mov	r1, r6
   17364:	f002 fa74 	bl	19850 <bt_conn_set_state>
		bt_conn_unref(conn);
   17368:	4620      	mov	r0, r4
	bt_conn_unref(conn);
   1736a:	f00b fce4 	bl	22d36 <bt_conn_unref>
   1736e:	e7f3      	b.n	17358 <hci_disconn_complete+0x38>
   17370:	00026998 	.word	0x00026998
   17374:	000255a4 	.word	0x000255a4

00017378 <handle_event>:
{
   17378:	b5b0      	push	{r4, r5, r7, lr}
   1737a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1737e:	af00      	add	r7, sp, #0
   17380:	4604      	mov	r4, r0
	for (i = 0; i < num_handlers; i++) {
   17382:	4293      	cmp	r3, r2
   17384:	d103      	bne.n	1738e <handle_event+0x16>
	if (err == -EOPNOTSUPP) {
   17386:	4620      	mov	r0, r4
   17388:	f7ff ff4a 	bl	17220 <handle_event.part.0>
}
   1738c:	e018      	b.n	173c0 <handle_event+0x48>
		if (handler->event != event) {
   1738e:	4610      	mov	r0, r2
   17390:	f810 5b08 	ldrb.w	r5, [r0], #8
   17394:	42a5      	cmp	r5, r4
   17396:	d119      	bne.n	173cc <handle_event+0x54>
		if (buf->len < handler->min_len) {
   17398:	8a0b      	ldrh	r3, [r1, #16]
   1739a:	7850      	ldrb	r0, [r2, #1]
   1739c:	4298      	cmp	r0, r3
   1739e:	d911      	bls.n	173c4 <handle_event+0x4c>
			LOG_ERR("Too small (%u bytes) event 0x%02x", buf->len, event);
   173a0:	466d      	mov	r5, sp
   173a2:	b088      	sub	sp, #32
   173a4:	466a      	mov	r2, sp
   173a6:	490a      	ldr	r1, [pc, #40]	; (173d0 <handle_event+0x58>)
   173a8:	61d4      	str	r4, [r2, #28]
   173aa:	e9c2 1305 	strd	r1, r3, [r2, #20]
   173ae:	2304      	movs	r3, #4
   173b0:	f842 3f10 	str.w	r3, [r2, #16]!
   173b4:	4807      	ldr	r0, [pc, #28]	; (173d4 <handle_event+0x5c>)
   173b6:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   173ba:	f00b fa88 	bl	228ce <z_log_msg_static_create.constprop.0>
   173be:	46ad      	mov	sp, r5
}
   173c0:	46bd      	mov	sp, r7
   173c2:	bdb0      	pop	{r4, r5, r7, pc}
		handler->handler(buf);
   173c4:	6853      	ldr	r3, [r2, #4]
   173c6:	4608      	mov	r0, r1
   173c8:	4798      	blx	r3
	if (err == -EOPNOTSUPP) {
   173ca:	e7f9      	b.n	173c0 <handle_event+0x48>
   173cc:	4602      	mov	r2, r0
   173ce:	e7d8      	b.n	17382 <handle_event+0xa>
   173d0:	000269be 	.word	0x000269be
   173d4:	000255a4 	.word	0x000255a4

000173d8 <rx_work_handler>:
	}
}

#if !defined(CONFIG_BT_RECV_BLOCKING)
static void rx_work_handler(struct k_work *work)
{
   173d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int err;

	struct net_buf *buf;

	LOG_DBG("Getting net_buf from queue");
	buf = net_buf_slist_get(&bt_dev.rx_queue);
   173da:	4855      	ldr	r0, [pc, #340]	; (17530 <rx_work_handler+0x158>)
{
   173dc:	af00      	add	r7, sp, #0
	buf = net_buf_slist_get(&bt_dev.rx_queue);
   173de:	f00c fd4e 	bl	23e7e <net_buf_slist_get>
	if (!buf) {
   173e2:	4604      	mov	r4, r0
   173e4:	2800      	cmp	r0, #0
   173e6:	d06a      	beq.n	174be <rx_work_handler+0xe6>
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   173e8:	7e03      	ldrb	r3, [r0, #24]
		return;
	}

	LOG_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf), buf->len);

	switch (bt_buf_get_type(buf)) {
   173ea:	2b01      	cmp	r3, #1
   173ec:	d069      	beq.n	174c2 <rx_work_handler+0xea>
   173ee:	2b03      	cmp	r3, #3
   173f0:	f040 8099 	bne.w	17526 <rx_work_handler+0x14e>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   173f4:	8a03      	ldrh	r3, [r0, #16]
   173f6:	2b03      	cmp	r3, #3
   173f8:	d80c      	bhi.n	17414 <rx_work_handler+0x3c>
   173fa:	4a4e      	ldr	r2, [pc, #312]	; (17534 <rx_work_handler+0x15c>)
   173fc:	494e      	ldr	r1, [pc, #312]	; (17538 <rx_work_handler+0x160>)
   173fe:	484f      	ldr	r0, [pc, #316]	; (1753c <rx_work_handler+0x164>)
   17400:	f240 13ed 	movw	r3, #493	; 0x1ed
   17404:	f00a fccd 	bl	21da2 <assert_print>
   17408:	4040      	eors	r0, r0
   1740a:	f380 8811 	msr	BASEPRI, r0
   1740e:	f04f 0003 	mov.w	r0, #3
   17412:	df02      	svc	2
   17414:	2104      	movs	r1, #4
   17416:	f104 000c 	add.w	r0, r4, #12
   1741a:	f00c fd96 	bl	23f4a <net_buf_simple_pull_mem>
	if (buf->len != len) {
   1741e:	8a21      	ldrh	r1, [r4, #16]
	len = sys_le16_to_cpu(hdr->len);
   17420:	8843      	ldrh	r3, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
   17422:	8806      	ldrh	r6, [r0, #0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   17424:	22ff      	movs	r2, #255	; 0xff
	acl(buf)->handle = bt_acl_handle(handle);
   17426:	f3c6 000b 	ubfx	r0, r6, #0, #12
	if (buf->len != len) {
   1742a:	428b      	cmp	r3, r1
	acl(buf)->handle = bt_acl_handle(handle);
   1742c:	8360      	strh	r0, [r4, #26]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   1742e:	7662      	strb	r2, [r4, #25]
	if (buf->len != len) {
   17430:	d010      	beq.n	17454 <rx_work_handler+0x7c>
		LOG_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
   17432:	466d      	mov	r5, sp
   17434:	b088      	sub	sp, #32
   17436:	466a      	mov	r2, sp
   17438:	4841      	ldr	r0, [pc, #260]	; (17540 <rx_work_handler+0x168>)
   1743a:	61d3      	str	r3, [r2, #28]
   1743c:	2304      	movs	r3, #4
   1743e:	e9c2 0105 	strd	r0, r1, [r2, #20]
   17442:	f842 3f10 	str.w	r3, [r2, #16]!
   17446:	f44f 5101 	mov.w	r1, #8256	; 0x2040
#endif /* CONFIG_BT_ISO */
	case BT_BUF_EVT:
		hci_event(buf);
		break;
	default:
		LOG_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   1744a:	483e      	ldr	r0, [pc, #248]	; (17544 <rx_work_handler+0x16c>)
   1744c:	f00b fa3f 	bl	228ce <z_log_msg_static_create.constprop.0>
   17450:	46ad      	mov	sp, r5
   17452:	e064      	b.n	1751e <rx_work_handler+0x146>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
   17454:	f002 f9f4 	bl	19840 <bt_conn_lookup_handle>
	if (!conn) {
   17458:	4605      	mov	r5, r0
   1745a:	b960      	cbnz	r0, 17476 <rx_work_handler+0x9e>
		LOG_ERR("Unable to find conn for handle %u", acl(buf)->handle);
   1745c:	466d      	mov	r5, sp
   1745e:	b088      	sub	sp, #32
   17460:	8b63      	ldrh	r3, [r4, #26]
   17462:	466a      	mov	r2, sp
   17464:	4938      	ldr	r1, [pc, #224]	; (17548 <rx_work_handler+0x170>)
	switch (bt_buf_get_type(buf)) {
   17466:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   1746a:	2303      	movs	r3, #3
   1746c:	f842 3f10 	str.w	r3, [r2, #16]!
   17470:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   17474:	e7e9      	b.n	1744a <rx_work_handler+0x72>
	acl(buf)->index = bt_conn_index(conn);
   17476:	f002 fae1 	bl	19a3c <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
   1747a:	0b32      	lsrs	r2, r6, #12
	acl(buf)->index = bt_conn_index(conn);
   1747c:	7660      	strb	r0, [r4, #25]
	bt_conn_recv(conn, buf, flags);
   1747e:	4621      	mov	r1, r4
   17480:	4628      	mov	r0, r5
   17482:	f002 f897 	bl	195b4 <bt_conn_recv>
	bt_conn_unref(conn);
   17486:	4628      	mov	r0, r5
   17488:	f00b fc55 	bl	22d36 <bt_conn_unref>
	return list->head;
   1748c:	4b2f      	ldr	r3, [pc, #188]	; (1754c <rx_work_handler+0x174>)
	/* Schedule the work handler to be executed again if there are
	 * additional items in the queue. This allows for other users of the
	 * work queue to get a chance at running, which wouldn't be possible if
	 * we used a while() loop with a k_yield() statement.
	 */
	if (!sys_slist_is_empty(&bt_dev.rx_queue)) {
   1748e:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
   17492:	b1a3      	cbz	r3, 174be <rx_work_handler+0xe6>

#if defined(CONFIG_BT_RECV_WORKQ_SYS)
		err = k_work_submit(&rx_work);
#elif defined(CONFIG_BT_RECV_WORKQ_BT)
		err = k_work_submit_to_queue(&bt_workq, &rx_work);
   17494:	492e      	ldr	r1, [pc, #184]	; (17550 <rx_work_handler+0x178>)
   17496:	482f      	ldr	r0, [pc, #188]	; (17554 <rx_work_handler+0x17c>)
   17498:	f00d faaa 	bl	249f0 <k_work_submit_to_queue>
#endif
		if (err < 0) {
   1749c:	2800      	cmp	r0, #0
   1749e:	da0e      	bge.n	174be <rx_work_handler+0xe6>
			LOG_ERR("Could not submit rx_work: %d", err);
   174a0:	466c      	mov	r4, sp
   174a2:	b088      	sub	sp, #32
   174a4:	466a      	mov	r2, sp
   174a6:	4b2c      	ldr	r3, [pc, #176]	; (17558 <rx_work_handler+0x180>)
   174a8:	e9c2 3005 	strd	r3, r0, [r2, #20]
   174ac:	2303      	movs	r3, #3
   174ae:	f842 3f10 	str.w	r3, [r2, #16]!
   174b2:	4824      	ldr	r0, [pc, #144]	; (17544 <rx_work_handler+0x16c>)
   174b4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   174b8:	f00b fa09 	bl	228ce <z_log_msg_static_create.constprop.0>
   174bc:	46a5      	mov	sp, r4
		}
	}
}
   174be:	46bd      	mov	sp, r7
   174c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
   174c2:	8a03      	ldrh	r3, [r0, #16]
   174c4:	2b01      	cmp	r3, #1
   174c6:	d80c      	bhi.n	174e2 <rx_work_handler+0x10a>
   174c8:	4a1a      	ldr	r2, [pc, #104]	; (17534 <rx_work_handler+0x15c>)
   174ca:	491b      	ldr	r1, [pc, #108]	; (17538 <rx_work_handler+0x160>)
   174cc:	481b      	ldr	r0, [pc, #108]	; (1753c <rx_work_handler+0x164>)
   174ce:	f640 136d 	movw	r3, #2413	; 0x96d
   174d2:	f00a fc66 	bl	21da2 <assert_print>
   174d6:	4040      	eors	r0, r0
   174d8:	f380 8811 	msr	BASEPRI, r0
   174dc:	f04f 0003 	mov.w	r0, #3
   174e0:	df02      	svc	2
   174e2:	2102      	movs	r1, #2
   174e4:	f104 000c 	add.w	r0, r4, #12
   174e8:	f00c fd2f 	bl	23f4a <net_buf_simple_pull_mem>
   174ec:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   174ee:	7800      	ldrb	r0, [r0, #0]
   174f0:	f00b f9bf 	bl	22872 <bt_hci_evt_get_flags>
   174f4:	0783      	lsls	r3, r0, #30
   174f6:	d40c      	bmi.n	17512 <rx_work_handler+0x13a>
   174f8:	4a0e      	ldr	r2, [pc, #56]	; (17534 <rx_work_handler+0x15c>)
   174fa:	4918      	ldr	r1, [pc, #96]	; (1755c <rx_work_handler+0x184>)
   174fc:	480f      	ldr	r0, [pc, #60]	; (1753c <rx_work_handler+0x164>)
   174fe:	f640 1371 	movw	r3, #2417	; 0x971
   17502:	f00a fc4e 	bl	21da2 <assert_print>
   17506:	4040      	eors	r0, r0
   17508:	f380 8811 	msr	BASEPRI, r0
   1750c:	f04f 0003 	mov.w	r0, #3
   17510:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   17512:	4a13      	ldr	r2, [pc, #76]	; (17560 <rx_work_handler+0x188>)
   17514:	7828      	ldrb	r0, [r5, #0]
   17516:	2304      	movs	r3, #4
   17518:	4621      	mov	r1, r4
   1751a:	f7ff ff2d 	bl	17378 <handle_event>
		net_buf_unref(buf);
   1751e:	4620      	mov	r0, r4
   17520:	f004 fe88 	bl	1c234 <net_buf_unref>
		break;
   17524:	e7b2      	b.n	1748c <rx_work_handler+0xb4>
		LOG_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   17526:	466d      	mov	r5, sp
   17528:	b088      	sub	sp, #32
   1752a:	466a      	mov	r2, sp
   1752c:	490d      	ldr	r1, [pc, #52]	; (17564 <rx_work_handler+0x18c>)
   1752e:	e79a      	b.n	17466 <rx_work_handler+0x8e>
   17530:	200004bc 	.word	0x200004bc
   17534:	000269e0 	.word	0x000269e0
   17538:	00026a14 	.word	0x00026a14
   1753c:	00026a2d 	.word	0x00026a2d
   17540:	00026a4a 	.word	0x00026a4a
   17544:	000255a4 	.word	0x000255a4
   17548:	00026a6e 	.word	0x00026a6e
   1754c:	20000388 	.word	0x20000388
   17550:	20000574 	.word	0x20000574
   17554:	20001d38 	.word	0x20001d38
   17558:	00026913 	.word	0x00026913
   1755c:	00026a90 	.word	0x00026a90
   17560:	00025854 	.word	0x00025854
   17564:	00026abe 	.word	0x00026abe

00017568 <hci_le_meta_event>:
{
   17568:	b510      	push	{r4, lr}
   1756a:	2101      	movs	r1, #1
   1756c:	4604      	mov	r4, r0
   1756e:	300c      	adds	r0, #12
   17570:	f00c fceb 	bl	23f4a <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   17574:	4621      	mov	r1, r4
   17576:	4a03      	ldr	r2, [pc, #12]	; (17584 <hci_le_meta_event+0x1c>)
   17578:	7800      	ldrb	r0, [r0, #0]
}
   1757a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   1757e:	2307      	movs	r3, #7
   17580:	f7ff befa 	b.w	17378 <handle_event>
   17584:	00025874 	.word	0x00025874

00017588 <le_remote_feat_complete>:
{
   17588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
   1758a:	68c5      	ldr	r5, [r0, #12]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1758c:	f8b5 6001 	ldrh.w	r6, [r5, #1]
{
   17590:	af00      	add	r7, sp, #0
	conn = bt_conn_lookup_handle(handle);
   17592:	4630      	mov	r0, r6
   17594:	f002 f954 	bl	19840 <bt_conn_lookup_handle>
	if (!conn) {
   17598:	4604      	mov	r4, r0
   1759a:	b980      	cbnz	r0, 175be <le_remote_feat_complete+0x36>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   1759c:	466c      	mov	r4, sp
   1759e:	b088      	sub	sp, #32
   175a0:	466a      	mov	r2, sp
   175a2:	4b10      	ldr	r3, [pc, #64]	; (175e4 <le_remote_feat_complete+0x5c>)
   175a4:	4810      	ldr	r0, [pc, #64]	; (175e8 <le_remote_feat_complete+0x60>)
   175a6:	e9c2 3605 	strd	r3, r6, [r2, #20]
   175aa:	2303      	movs	r3, #3
   175ac:	f842 3f10 	str.w	r3, [r2, #16]!
   175b0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   175b4:	f00b f98b 	bl	228ce <z_log_msg_static_create.constprop.0>
   175b8:	46a5      	mov	sp, r4
}
   175ba:	46bd      	mov	sp, r7
   175bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!evt->status) {
   175be:	782b      	ldrb	r3, [r5, #0]
   175c0:	b93b      	cbnz	r3, 175d2 <le_remote_feat_complete+0x4a>
   175c2:	f8d5 3003 	ldr.w	r3, [r5, #3]
   175c6:	f8c0 30ad 	str.w	r3, [r0, #173]	; 0xad
   175ca:	f8d5 3007 	ldr.w	r3, [r5, #7]
   175ce:	f8c0 30b1 	str.w	r3, [r0, #177]	; 0xb1
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   175d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   175d6:	1d20      	adds	r0, r4, #4
   175d8:	f00b f95e 	bl	22898 <atomic_or>
	bt_conn_unref(conn);
   175dc:	4620      	mov	r0, r4
   175de:	f00b fbaa 	bl	22d36 <bt_conn_unref>
   175e2:	e7ea      	b.n	175ba <le_remote_feat_complete+0x32>
   175e4:	00026974 	.word	0x00026974
   175e8:	000255a4 	.word	0x000255a4

000175ec <hci_cmd_done>:
{
   175ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   175f0:	4606      	mov	r6, r0
   175f2:	af00      	add	r7, sp, #0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   175f4:	7a90      	ldrb	r0, [r2, #10]
   175f6:	4d43      	ldr	r5, [pc, #268]	; (17704 <hci_cmd_done+0x118>)
{
   175f8:	4688      	mov	r8, r1
   175fa:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   175fc:	f004 fd58 	bl	1c0b0 <net_buf_pool_get>
   17600:	4285      	cmp	r5, r0
   17602:	d018      	beq.n	17636 <hci_cmd_done+0x4a>
		LOG_WRN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p", opcode,
   17604:	7aa4      	ldrb	r4, [r4, #10]
   17606:	4620      	mov	r0, r4
   17608:	f004 fd52 	bl	1c0b0 <net_buf_pool_get>
   1760c:	46e8      	mov	r8, sp
   1760e:	b08a      	sub	sp, #40	; 0x28
   17610:	466a      	mov	r2, sp
   17612:	4b3d      	ldr	r3, [pc, #244]	; (17708 <hci_cmd_done+0x11c>)
   17614:	6255      	str	r5, [r2, #36]	; 0x24
   17616:	e9c2 3605 	strd	r3, r6, [r2, #20]
   1761a:	2306      	movs	r3, #6
   1761c:	e9c2 4007 	strd	r4, r0, [r2, #28]
   17620:	f44f 5142 	mov.w	r1, #12416	; 0x3080
   17624:	f842 3f10 	str.w	r3, [r2, #16]!
   17628:	4838      	ldr	r0, [pc, #224]	; (1770c <hci_cmd_done+0x120>)
   1762a:	f00b f950 	bl	228ce <z_log_msg_static_create.constprop.0>
   1762e:	46c5      	mov	sp, r8
}
   17630:	46bd      	mov	sp, r7
   17632:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (cmd(buf)->opcode != opcode) {
   17636:	4620      	mov	r0, r4
   17638:	f004 fd42 	bl	1c0c0 <net_buf_id>
   1763c:	4d34      	ldr	r5, [pc, #208]	; (17710 <hci_cmd_done+0x124>)
   1763e:	f04f 090c 	mov.w	r9, #12
   17642:	fb09 5000 	mla	r0, r9, r0, r5
   17646:	8843      	ldrh	r3, [r0, #2]
   17648:	42b3      	cmp	r3, r6
   1764a:	d016      	beq.n	1767a <hci_cmd_done+0x8e>
		LOG_WRN("OpCode 0x%04x completed instead of expected 0x%04x", opcode,
   1764c:	4620      	mov	r0, r4
   1764e:	f004 fd37 	bl	1c0c0 <net_buf_id>
   17652:	fb09 5000 	mla	r0, r9, r0, r5
   17656:	466c      	mov	r4, sp
   17658:	b088      	sub	sp, #32
   1765a:	8843      	ldrh	r3, [r0, #2]
   1765c:	466a      	mov	r2, sp
   1765e:	492d      	ldr	r1, [pc, #180]	; (17714 <hci_cmd_done+0x128>)
   17660:	61d3      	str	r3, [r2, #28]
   17662:	2304      	movs	r3, #4
   17664:	e9c2 1605 	strd	r1, r6, [r2, #20]
   17668:	4828      	ldr	r0, [pc, #160]	; (1770c <hci_cmd_done+0x120>)
   1766a:	f842 3f10 	str.w	r3, [r2, #16]!
   1766e:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   17672:	f00b f92c 	bl	228ce <z_log_msg_static_create.constprop.0>
   17676:	46a5      	mov	sp, r4
		return;
   17678:	e7da      	b.n	17630 <hci_cmd_done+0x44>
	if (bt_dev.sent_cmd) {
   1767a:	4e27      	ldr	r6, [pc, #156]	; (17718 <hci_cmd_done+0x12c>)
   1767c:	f8d6 0130 	ldr.w	r0, [r6, #304]	; 0x130
   17680:	b120      	cbz	r0, 1768c <hci_cmd_done+0xa0>
		net_buf_unref(bt_dev.sent_cmd);
   17682:	f004 fdd7 	bl	1c234 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   17686:	2300      	movs	r3, #0
   17688:	f8c6 3130 	str.w	r3, [r6, #304]	; 0x130
	if (cmd(buf)->state && !status) {
   1768c:	4620      	mov	r0, r4
   1768e:	f004 fd17 	bl	1c0c0 <net_buf_id>
   17692:	260c      	movs	r6, #12
   17694:	fb06 5000 	mla	r0, r6, r0, r5
   17698:	6843      	ldr	r3, [r0, #4]
   1769a:	b1ab      	cbz	r3, 176c8 <hci_cmd_done+0xdc>
   1769c:	f1b8 0f00 	cmp.w	r8, #0
   176a0:	d112      	bne.n	176c8 <hci_cmd_done+0xdc>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
   176a2:	4620      	mov	r0, r4
   176a4:	f004 fd0c 	bl	1c0c0 <net_buf_id>
   176a8:	fb06 5000 	mla	r0, r6, r0, r5
 * @param bit Bit number (starting from 0).
 * @param val true for 1, false for 0.
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   176ac:	2101      	movs	r1, #1
   176ae:	6842      	ldr	r2, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
   176b0:	e9d2 0300 	ldrd	r0, r3, [r2]

	if (val) {
   176b4:	7a12      	ldrb	r2, [r2, #8]
	atomic_val_t mask = ATOMIC_MASK(bit);
   176b6:	f003 061f 	and.w	r6, r3, #31
   176ba:	40b1      	lsls	r1, r6
	if (val) {
   176bc:	095b      	lsrs	r3, r3, #5
   176be:	b1da      	cbz	r2, 176f8 <hci_cmd_done+0x10c>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   176c0:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   176c4:	f00b f8e8 	bl	22898 <atomic_or>
	if (cmd(buf)->sync) {
   176c8:	4620      	mov	r0, r4
   176ca:	f004 fcf9 	bl	1c0c0 <net_buf_id>
   176ce:	260c      	movs	r6, #12
   176d0:	fb06 5000 	mla	r0, r6, r0, r5
   176d4:	6883      	ldr	r3, [r0, #8]
   176d6:	2b00      	cmp	r3, #0
   176d8:	d0aa      	beq.n	17630 <hci_cmd_done+0x44>
		cmd(buf)->status = status;
   176da:	4620      	mov	r0, r4
   176dc:	f004 fcf0 	bl	1c0c0 <net_buf_id>
   176e0:	4370      	muls	r0, r6
   176e2:	f805 8000 	strb.w	r8, [r5, r0]
		k_sem_give(cmd(buf)->sync);
   176e6:	4620      	mov	r0, r4
   176e8:	f004 fcea 	bl	1c0c0 <net_buf_id>
   176ec:	fb06 5500 	mla	r5, r6, r0, r5
   176f0:	68a8      	ldr	r0, [r5, #8]
	z_impl_k_sem_give(sem);
   176f2:	f008 f929 	bl	1f948 <z_impl_k_sem_give>
}
   176f6:	e79b      	b.n	17630 <hci_cmd_done+0x44>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   176f8:	43c9      	mvns	r1, r1
   176fa:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   176fe:	f00b f8e9 	bl	228d4 <atomic_and.isra.0>
   17702:	e7e1      	b.n	176c8 <hci_cmd_done+0xdc>
   17704:	20000910 	.word	0x20000910
   17708:	00026ad2 	.word	0x00026ad2
   1770c:	000255a4 	.word	0x000255a4
   17710:	20004f24 	.word	0x20004f24
   17714:	00026b07 	.word	0x00026b07
   17718:	20000388 	.word	0x20000388

0001771c <hci_cmd_status>:
{
   1771c:	b538      	push	{r3, r4, r5, lr}
   1771e:	2104      	movs	r1, #4
   17720:	4604      	mov	r4, r0
   17722:	300c      	adds	r0, #12
   17724:	f00c fc11 	bl	23f4a <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   17728:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
   1772a:	7801      	ldrb	r1, [r0, #0]
   1772c:	8840      	ldrh	r0, [r0, #2]
   1772e:	4622      	mov	r2, r4
   17730:	f7ff ff5c 	bl	175ec <hci_cmd_done>
	if (ncmd) {
   17734:	b125      	cbz	r5, 17740 <hci_cmd_status+0x24>
	z_impl_k_sem_give(sem);
   17736:	4803      	ldr	r0, [pc, #12]	; (17744 <hci_cmd_status+0x28>)
}
   17738:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1773c:	f008 b904 	b.w	1f948 <z_impl_k_sem_give>
   17740:	bd38      	pop	{r3, r4, r5, pc}
   17742:	bf00      	nop
   17744:	200004a0 	.word	0x200004a0

00017748 <hci_cmd_complete>:
{
   17748:	b538      	push	{r3, r4, r5, lr}
   1774a:	2103      	movs	r1, #3
   1774c:	4604      	mov	r4, r0
   1774e:	300c      	adds	r0, #12
   17750:	f00c fbfb 	bl	23f4a <net_buf_simple_pull_mem>
	status = buf->data[0];
   17754:	68e3      	ldr	r3, [r4, #12]
	ncmd = evt->ncmd;
   17756:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
   17758:	7819      	ldrb	r1, [r3, #0]
   1775a:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   1775e:	4622      	mov	r2, r4
   17760:	f7ff ff44 	bl	175ec <hci_cmd_done>
	if (ncmd) {
   17764:	b125      	cbz	r5, 17770 <hci_cmd_complete+0x28>
   17766:	4803      	ldr	r0, [pc, #12]	; (17774 <hci_cmd_complete+0x2c>)
}
   17768:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1776c:	f008 b8ec 	b.w	1f948 <z_impl_k_sem_give>
   17770:	bd38      	pop	{r3, r4, r5, pc}
   17772:	bf00      	nop
   17774:	200004a0 	.word	0x200004a0

00017778 <hci_num_completed_packets>:
{
   17778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1777c:	b087      	sub	sp, #28
	for (i = 0; i < evt->num_handles; i++) {
   1777e:	2500      	movs	r5, #0
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
   17780:	f8d0 800c 	ldr.w	r8, [r0, #12]
				LOG_ERR("packets count mismatch");
   17784:	f8df a104 	ldr.w	sl, [pc, #260]	; 1788c <hci_num_completed_packets+0x114>
{
   17788:	af00      	add	r7, sp, #0
			tx->pending_no_cb = 0U;
   1778a:	46a9      	mov	r9, r5
	for (i = 0; i < evt->num_handles; i++) {
   1778c:	f898 3000 	ldrb.w	r3, [r8]
   17790:	429d      	cmp	r5, r3
   17792:	db03      	blt.n	1779c <hci_num_completed_packets+0x24>
}
   17794:	371c      	adds	r7, #28
   17796:	46bd      	mov	sp, r7
   17798:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
   1779c:	eb08 0385 	add.w	r3, r8, r5, lsl #2
   177a0:	f8b3 b001 	ldrh.w	fp, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
   177a4:	f8b3 6003 	ldrh.w	r6, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
   177a8:	4658      	mov	r0, fp
   177aa:	f002 f849 	bl	19840 <bt_conn_lookup_handle>
		if (!conn) {
   177ae:	4604      	mov	r4, r0
   177b0:	b1d8      	cbz	r0, 177ea <hci_num_completed_packets+0x72>
			k_work_submit(&conn->tx_complete_work);
   177b2:	f100 0b28 	add.w	fp, r0, #40	; 0x28
		while (count--) {
   177b6:	2e00      	cmp	r6, #0
   177b8:	d039      	beq.n	1782e <hci_num_completed_packets+0xb6>
	__asm__ volatile(
   177ba:	f04f 0340 	mov.w	r3, #64	; 0x40
   177be:	f3ef 8211 	mrs	r2, BASEPRI
   177c2:	f383 8812 	msr	BASEPRI_MAX, r3
   177c6:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
   177ca:	69e3      	ldr	r3, [r4, #28]
   177cc:	b1f3      	cbz	r3, 1780c <hci_num_completed_packets+0x94>
				conn->pending_no_cb--;
   177ce:	3b01      	subs	r3, #1
   177d0:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   177d2:	f382 8811 	msr	BASEPRI, r2
   177d6:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
   177da:	4620      	mov	r0, r4
   177dc:	f001 feb4 	bl	19548 <bt_conn_get_pkts>
   177e0:	3e01      	subs	r6, #1
   177e2:	f008 f8b1 	bl	1f948 <z_impl_k_sem_give>
   177e6:	b2b6      	uxth	r6, r6
   177e8:	e7e5      	b.n	177b6 <hci_num_completed_packets+0x3e>
			LOG_ERR("No connection for handle %u", handle);
   177ea:	466c      	mov	r4, sp
   177ec:	b088      	sub	sp, #32
   177ee:	466a      	mov	r2, sp
   177f0:	4b24      	ldr	r3, [pc, #144]	; (17884 <hci_num_completed_packets+0x10c>)
   177f2:	4825      	ldr	r0, [pc, #148]	; (17888 <hci_num_completed_packets+0x110>)
   177f4:	e9c2 3b05 	strd	r3, fp, [r2, #20]
   177f8:	2303      	movs	r3, #3
   177fa:	f842 3f10 	str.w	r3, [r2, #16]!
   177fe:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   17802:	f00b f864 	bl	228ce <z_log_msg_static_create.constprop.0>
   17806:	46a5      	mov	sp, r4
	for (i = 0; i < evt->num_handles; i++) {
   17808:	3501      	adds	r5, #1
   1780a:	e7bf      	b.n	1778c <hci_num_completed_packets+0x14>
   1780c:	6963      	ldr	r3, [r4, #20]
Z_GENLIST_GET(slist, snode)
   1780e:	b993      	cbnz	r3, 17836 <hci_num_completed_packets+0xbe>
   17810:	f382 8811 	msr	BASEPRI, r2
   17814:	f3bf 8f6f 	isb	sy
				LOG_ERR("packets count mismatch");
   17818:	2302      	movs	r3, #2
   1781a:	481b      	ldr	r0, [pc, #108]	; (17888 <hci_num_completed_packets+0x110>)
   1781c:	f8c7 a014 	str.w	sl, [r7, #20]
   17820:	613b      	str	r3, [r7, #16]
   17822:	f107 0210 	add.w	r2, r7, #16
   17826:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1782a:	f00b f850 	bl	228ce <z_log_msg_static_create.constprop.0>
		bt_conn_unref(conn);
   1782e:	4620      	mov	r0, r4
   17830:	f00b fa81 	bl	22d36 <bt_conn_unref>
   17834:	e7e8      	b.n	17808 <hci_num_completed_packets+0x90>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   17836:	69a1      	ldr	r1, [r4, #24]
	return node->next;
   17838:	6818      	ldr	r0, [r3, #0]
	list->head = node;
   1783a:	6160      	str	r0, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1783c:	428b      	cmp	r3, r1
	list->tail = node;
   1783e:	bf08      	it	eq
   17840:	61a0      	streq	r0, [r4, #24]
   17842:	f382 8811 	msr	BASEPRI, r2
   17846:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1784a:	f04f 0240 	mov.w	r2, #64	; 0x40
   1784e:	f3ef 8111 	mrs	r1, BASEPRI
   17852:	f382 8812 	msr	BASEPRI_MAX, r2
   17856:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
   1785a:	68da      	ldr	r2, [r3, #12]
   1785c:	61e2      	str	r2, [r4, #28]
			tx->pending_no_cb = 0U;
   1785e:	f8c3 900c 	str.w	r9, [r3, #12]
	parent->next = child;
   17862:	f8c3 9000 	str.w	r9, [r3]
	return list->tail;
   17866:	6a62      	ldr	r2, [r4, #36]	; 0x24
Z_GENLIST_APPEND(slist, snode)
   17868:	b94a      	cbnz	r2, 1787e <hci_num_completed_packets+0x106>
	list->head = node;
   1786a:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
   1786e:	f381 8811 	msr	BASEPRI, r1
   17872:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
   17876:	4658      	mov	r0, fp
   17878:	f008 f946 	bl	1fb08 <k_work_submit>
   1787c:	e7ad      	b.n	177da <hci_num_completed_packets+0x62>
	parent->next = child;
   1787e:	6013      	str	r3, [r2, #0]
	list->tail = node;
   17880:	6263      	str	r3, [r4, #36]	; 0x24
}
   17882:	e7f4      	b.n	1786e <hci_num_completed_packets+0xf6>
   17884:	00026b3a 	.word	0x00026b3a
   17888:	000255a4 	.word	0x000255a4
   1788c:	00026b56 	.word	0x00026b56

00017890 <le_conn_update_complete>:
{
   17890:	b5f0      	push	{r4, r5, r6, r7, lr}
   17892:	b083      	sub	sp, #12
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
   17894:	68c5      	ldr	r5, [r0, #12]
	handle = sys_le16_to_cpu(evt->handle);
   17896:	f8b5 6001 	ldrh.w	r6, [r5, #1]
{
   1789a:	af00      	add	r7, sp, #0
	conn = bt_conn_lookup_handle(handle);
   1789c:	4630      	mov	r0, r6
   1789e:	f001 ffcf 	bl	19840 <bt_conn_lookup_handle>
	if (!conn) {
   178a2:	4604      	mov	r4, r0
   178a4:	b988      	cbnz	r0, 178ca <le_conn_update_complete+0x3a>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   178a6:	466c      	mov	r4, sp
   178a8:	b088      	sub	sp, #32
   178aa:	466a      	mov	r2, sp
   178ac:	4b2d      	ldr	r3, [pc, #180]	; (17964 <le_conn_update_complete+0xd4>)
   178ae:	482e      	ldr	r0, [pc, #184]	; (17968 <le_conn_update_complete+0xd8>)
   178b0:	e9c2 3605 	strd	r3, r6, [r2, #20]
   178b4:	2303      	movs	r3, #3
   178b6:	f842 3f10 	str.w	r3, [r2, #16]!
   178ba:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   178be:	f00b f806 	bl	228ce <z_log_msg_static_create.constprop.0>
   178c2:	46a5      	mov	sp, r4
}
   178c4:	370c      	adds	r7, #12
   178c6:	46bd      	mov	sp, r7
   178c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   178ca:	782b      	ldrb	r3, [r5, #0]
   178cc:	2b1a      	cmp	r3, #26
	    !atomic_test_and_set_bit(conn->flags,
   178ce:	f100 0604 	add.w	r6, r0, #4
	if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   178d2:	d117      	bne.n	17904 <le_conn_update_complete+0x74>
   178d4:	78c3      	ldrb	r3, [r0, #3]
   178d6:	2b01      	cmp	r3, #1
   178d8:	d128      	bne.n	1792c <le_conn_update_complete+0x9c>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   178da:	f44f 6180 	mov.w	r1, #1024	; 0x400
   178de:	4630      	mov	r0, r6
   178e0:	f00a ffda 	bl	22898 <atomic_or>
	    conn->role == BT_HCI_ROLE_PERIPHERAL &&
   178e4:	0542      	lsls	r2, r0, #21
   178e6:	d40d      	bmi.n	17904 <le_conn_update_complete+0x74>
		param.interval_min = conn->le.interval_min;
   178e8:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   178ec:	603b      	str	r3, [r7, #0]
		param.latency = conn->le.pending_latency;
   178ee:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   178f2:	607b      	str	r3, [r7, #4]
		bt_l2cap_update_conn_param(conn, &param);
   178f4:	4639      	mov	r1, r7
   178f6:	4620      	mov	r0, r4
   178f8:	f002 fcac 	bl	1a254 <bt_l2cap_update_conn_param>
	bt_conn_unref(conn);
   178fc:	4620      	mov	r0, r4
   178fe:	f00b fa1a 	bl	22d36 <bt_conn_unref>
   17902:	e7df      	b.n	178c4 <le_conn_update_complete+0x34>
		if (!evt->status) {
   17904:	782b      	ldrb	r3, [r5, #0]
   17906:	b98b      	cbnz	r3, 1792c <le_conn_update_complete+0x9c>
			conn->le.interval = sys_le16_to_cpu(evt->interval);
   17908:	f8b5 3003 	ldrh.w	r3, [r5, #3]
   1790c:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
			conn->le.latency = sys_le16_to_cpu(evt->latency);
   17910:	f8b5 3005 	ldrh.w	r3, [r5, #5]
   17914:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
			conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   17918:	f8b5 3007 	ldrh.w	r3, [r5, #7]
   1791c:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   17920:	f46f 7180 	mvn.w	r1, #256	; 0x100
   17924:	4630      	mov	r0, r6
   17926:	f00a ffd5 	bl	228d4 <atomic_and.isra.0>
}
   1792a:	e017      	b.n	1795c <le_conn_update_complete+0xcc>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1792c:	f3bf 8f5b 	dmb	ish
   17930:	6863      	ldr	r3, [r4, #4]
   17932:	f3bf 8f5b 	dmb	ish
		} else if (atomic_test_bit(conn->flags,
   17936:	05db      	lsls	r3, r3, #23
   17938:	d5f2      	bpl.n	17920 <le_conn_update_complete+0x90>
					   BT_CONN_PERIPHERAL_PARAM_AUTO_UPDATE) &&
   1793a:	782b      	ldrb	r3, [r5, #0]
   1793c:	2b20      	cmp	r3, #32
   1793e:	d1ef      	bne.n	17920 <le_conn_update_complete+0x90>
			   conn->le.conn_param_retry_countdown) {
   17940:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
			   evt->status == BT_HCI_ERR_UNSUPP_LL_PARAM_VAL &&
   17944:	2b00      	cmp	r3, #0
   17946:	d0eb      	beq.n	17920 <le_conn_update_complete+0x90>
			conn->le.conn_param_retry_countdown--;
   17948:	3b01      	subs	r3, #1
   1794a:	f884 30ac 	strb.w	r3, [r4, #172]	; 0xac
			k_work_schedule(&conn->deferred_work,
   1794e:	f44f 3220 	mov.w	r2, #163840	; 0x28000
   17952:	2300      	movs	r3, #0
   17954:	f104 0058 	add.w	r0, r4, #88	; 0x58
   17958:	f008 f93e 	bl	1fbd8 <k_work_schedule>
		notify_le_param_updated(conn);
   1795c:	4620      	mov	r0, r4
   1795e:	f002 f88f 	bl	19a80 <notify_le_param_updated>
   17962:	e7cb      	b.n	178fc <le_conn_update_complete+0x6c>
   17964:	00026974 	.word	0x00026974
   17968:	000255a4 	.word	0x000255a4

0001796c <bt_hci_cmd_state_set_init>:
{
   1796c:	b510      	push	{r4, lr}
	state->bit = bit;
   1796e:	e9c1 2300 	strd	r2, r3, [r1]
	state->val = val;
   17972:	f89d 3008 	ldrb.w	r3, [sp, #8]
   17976:	720b      	strb	r3, [r1, #8]
{
   17978:	460c      	mov	r4, r1
	cmd(buf)->state = state;
   1797a:	f004 fba1 	bl	1c0c0 <net_buf_id>
   1797e:	4b03      	ldr	r3, [pc, #12]	; (1798c <bt_hci_cmd_state_set_init+0x20>)
   17980:	220c      	movs	r2, #12
   17982:	fb02 3300 	mla	r3, r2, r0, r3
   17986:	605c      	str	r4, [r3, #4]
}
   17988:	bd10      	pop	{r4, pc}
   1798a:	bf00      	nop
   1798c:	20004f24 	.word	0x20004f24

00017990 <bt_hci_cmd_create>:
{
   17990:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return net_buf_alloc_fixed(pool, timeout);
   17994:	f04f 32ff 	mov.w	r2, #4294967295
   17998:	f04f 33ff 	mov.w	r3, #4294967295
   1799c:	4606      	mov	r6, r0
   1799e:	4817      	ldr	r0, [pc, #92]	; (179fc <bt_hci_cmd_create+0x6c>)
	cmd(buf)->opcode = opcode;
   179a0:	4d17      	ldr	r5, [pc, #92]	; (17a00 <bt_hci_cmd_create+0x70>)
{
   179a2:	460f      	mov	r7, r1
   179a4:	f00c fa4a 	bl	23e3c <net_buf_alloc_fixed>
   179a8:	4604      	mov	r4, r0
	net_buf_simple_reserve(&buf->b, reserve);
   179aa:	f100 0a0c 	add.w	sl, r0, #12
   179ae:	2100      	movs	r1, #0
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   179b0:	f04f 0800 	mov.w	r8, #0
   179b4:	4650      	mov	r0, sl
   179b6:	f00c fa48 	bl	23e4a <net_buf_simple_reserve>
   179ba:	f884 8018 	strb.w	r8, [r4, #24]
	cmd(buf)->opcode = opcode;
   179be:	4620      	mov	r0, r4
   179c0:	f004 fb7e 	bl	1c0c0 <net_buf_id>
   179c4:	f04f 090c 	mov.w	r9, #12
   179c8:	fb09 5000 	mla	r0, r9, r0, r5
   179cc:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
   179ce:	4620      	mov	r0, r4
   179d0:	f004 fb76 	bl	1c0c0 <net_buf_id>
   179d4:	fb09 5000 	mla	r0, r9, r0, r5
   179d8:	f8c0 8008 	str.w	r8, [r0, #8]
	cmd(buf)->state = NULL;
   179dc:	4620      	mov	r0, r4
   179de:	f004 fb6f 	bl	1c0c0 <net_buf_id>
   179e2:	fb09 5500 	mla	r5, r9, r0, r5
	return net_buf_simple_add(&buf->b, len);
   179e6:	2103      	movs	r1, #3
   179e8:	f8c5 8004 	str.w	r8, [r5, #4]
   179ec:	4650      	mov	r0, sl
   179ee:	f00c fa85 	bl	23efc <net_buf_simple_add>
	hdr->opcode = sys_cpu_to_le16(opcode);
   179f2:	8006      	strh	r6, [r0, #0]
	hdr->param_len = param_len;
   179f4:	7087      	strb	r7, [r0, #2]
}
   179f6:	4620      	mov	r0, r4
   179f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   179fc:	20000910 	.word	0x20000910
   17a00:	20004f24 	.word	0x20004f24

00017a04 <bt_hci_cmd_send_sync>:
{
   17a04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   17a08:	b087      	sub	sp, #28
   17a0a:	4680      	mov	r8, r0
   17a0c:	af00      	add	r7, sp, #0
   17a0e:	4615      	mov	r5, r2
	if (!buf) {
   17a10:	460c      	mov	r4, r1
   17a12:	b921      	cbnz	r1, 17a1e <bt_hci_cmd_send_sync+0x1a>
		buf = bt_hci_cmd_create(opcode, 0);
   17a14:	f7ff ffbc 	bl	17990 <bt_hci_cmd_create>
		if (!buf) {
   17a18:	4604      	mov	r4, r0
   17a1a:	2800      	cmp	r0, #0
   17a1c:	d05a      	beq.n	17ad4 <bt_hci_cmd_send_sync+0xd0>
	return z_impl_k_sem_init(sem, initial_count, limit);
   17a1e:	2201      	movs	r2, #1
   17a20:	2100      	movs	r1, #0
   17a22:	4638      	mov	r0, r7
   17a24:	f00c ff35 	bl	24892 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
   17a28:	4620      	mov	r0, r4
   17a2a:	f004 fb49 	bl	1c0c0 <net_buf_id>
   17a2e:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 17af8 <bt_hci_cmd_send_sync+0xf4>
   17a32:	230c      	movs	r3, #12
   17a34:	fb03 9000 	mla	r0, r3, r0, r9
   17a38:	6087      	str	r7, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
   17a3a:	4620      	mov	r0, r4
   17a3c:	f00c fa38 	bl	23eb0 <net_buf_ref>
   17a40:	4601      	mov	r1, r0
   17a42:	4826      	ldr	r0, [pc, #152]	; (17adc <bt_hci_cmd_send_sync+0xd8>)
   17a44:	f00c fa32 	bl	23eac <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
   17a48:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   17a4c:	2300      	movs	r3, #0
   17a4e:	4638      	mov	r0, r7
   17a50:	f007 ffa0 	bl	1f994 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
   17a54:	4606      	mov	r6, r0
   17a56:	b180      	cbz	r0, 17a7a <bt_hci_cmd_send_sync+0x76>
   17a58:	4a21      	ldr	r2, [pc, #132]	; (17ae0 <bt_hci_cmd_send_sync+0xdc>)
   17a5a:	4922      	ldr	r1, [pc, #136]	; (17ae4 <bt_hci_cmd_send_sync+0xe0>)
   17a5c:	4822      	ldr	r0, [pc, #136]	; (17ae8 <bt_hci_cmd_send_sync+0xe4>)
   17a5e:	f240 1349 	movw	r3, #329	; 0x149
   17a62:	f00a f99e 	bl	21da2 <assert_print>
   17a66:	4821      	ldr	r0, [pc, #132]	; (17aec <bt_hci_cmd_send_sync+0xe8>)
   17a68:	4631      	mov	r1, r6
   17a6a:	f00a f99a 	bl	21da2 <assert_print>
   17a6e:	4040      	eors	r0, r0
   17a70:	f380 8811 	msr	BASEPRI, r0
   17a74:	f04f 0003 	mov.w	r0, #3
   17a78:	df02      	svc	2
	status = cmd(buf)->status;
   17a7a:	4620      	mov	r0, r4
   17a7c:	f004 fb20 	bl	1c0c0 <net_buf_id>
   17a80:	230c      	movs	r3, #12
   17a82:	4358      	muls	r0, r3
   17a84:	f819 6000 	ldrb.w	r6, [r9, r0]
	if (status) {
   17a88:	b1e6      	cbz	r6, 17ac4 <bt_hci_cmd_send_sync+0xc0>
		LOG_WRN("opcode 0x%04x status 0x%02x", opcode, status);
   17a8a:	466d      	mov	r5, sp
   17a8c:	b088      	sub	sp, #32
   17a8e:	466a      	mov	r2, sp
   17a90:	4b17      	ldr	r3, [pc, #92]	; (17af0 <bt_hci_cmd_send_sync+0xec>)
   17a92:	61d6      	str	r6, [r2, #28]
   17a94:	e9c2 3805 	strd	r3, r8, [r2, #20]
   17a98:	2304      	movs	r3, #4
   17a9a:	f842 3f10 	str.w	r3, [r2, #16]!
   17a9e:	4815      	ldr	r0, [pc, #84]	; (17af4 <bt_hci_cmd_send_sync+0xf0>)
   17aa0:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   17aa4:	f00a ff13 	bl	228ce <z_log_msg_static_create.constprop.0>
		net_buf_unref(buf);
   17aa8:	4620      	mov	r0, r4
   17aaa:	46ad      	mov	sp, r5
   17aac:	f004 fbc2 	bl	1c234 <net_buf_unref>
			return -ECONNREFUSED;
   17ab0:	2e09      	cmp	r6, #9
   17ab2:	bf14      	ite	ne
   17ab4:	f06f 0004 	mvnne.w	r0, #4
   17ab8:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
}
   17abc:	371c      	adds	r7, #28
   17abe:	46bd      	mov	sp, r7
   17ac0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (rsp) {
   17ac4:	b115      	cbz	r5, 17acc <bt_hci_cmd_send_sync+0xc8>
		*rsp = buf;
   17ac6:	602c      	str	r4, [r5, #0]
	return 0;
   17ac8:	2000      	movs	r0, #0
   17aca:	e7f7      	b.n	17abc <bt_hci_cmd_send_sync+0xb8>
		net_buf_unref(buf);
   17acc:	4620      	mov	r0, r4
   17ace:	f004 fbb1 	bl	1c234 <net_buf_unref>
   17ad2:	e7f9      	b.n	17ac8 <bt_hci_cmd_send_sync+0xc4>
			return -ENOBUFS;
   17ad4:	f06f 0068 	mvn.w	r0, #104	; 0x68
   17ad8:	e7f0      	b.n	17abc <bt_hci_cmd_send_sync+0xb8>
   17ada:	bf00      	nop
   17adc:	200004c4 	.word	0x200004c4
   17ae0:	000269e0 	.word	0x000269e0
   17ae4:	00026b6d 	.word	0x00026b6d
   17ae8:	00026a2d 	.word	0x00026a2d
   17aec:	00026b76 	.word	0x00026b76
   17af0:	00026b96 	.word	0x00026b96
   17af4:	000255a4 	.word	0x000255a4
   17af8:	20004f24 	.word	0x20004f24

00017afc <hci_le_read_max_data_len>:
{
   17afc:	b570      	push	{r4, r5, r6, lr}
   17afe:	b088      	sub	sp, #32
   17b00:	4606      	mov	r6, r0
   17b02:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
   17b04:	aa01      	add	r2, sp, #4
   17b06:	2100      	movs	r1, #0
   17b08:	f242 002f 	movw	r0, #8239	; 0x202f
   17b0c:	f7ff ff7a 	bl	17a04 <bt_hci_cmd_send_sync>
	if (err) {
   17b10:	4604      	mov	r4, r0
   17b12:	b160      	cbz	r0, 17b2e <hci_le_read_max_data_len+0x32>
		LOG_ERR("Failed to read DLE max data len");
   17b14:	4b0b      	ldr	r3, [pc, #44]	; (17b44 <hci_le_read_max_data_len+0x48>)
   17b16:	9307      	str	r3, [sp, #28]
   17b18:	480b      	ldr	r0, [pc, #44]	; (17b48 <hci_le_read_max_data_len+0x4c>)
   17b1a:	2302      	movs	r3, #2
   17b1c:	aa06      	add	r2, sp, #24
   17b1e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   17b22:	9306      	str	r3, [sp, #24]
   17b24:	f00a fed3 	bl	228ce <z_log_msg_static_create.constprop.0>
}
   17b28:	4620      	mov	r0, r4
   17b2a:	b008      	add	sp, #32
   17b2c:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
   17b2e:	9801      	ldr	r0, [sp, #4]
   17b30:	68c3      	ldr	r3, [r0, #12]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
   17b32:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   17b36:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
   17b38:	f8b3 3003 	ldrh.w	r3, [r3, #3]
   17b3c:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
   17b3e:	f004 fb79 	bl	1c234 <net_buf_unref>
	return 0;
   17b42:	e7f1      	b.n	17b28 <hci_le_read_max_data_len+0x2c>
   17b44:	00026bb2 	.word	0x00026bb2
   17b48:	000255a4 	.word	0x000255a4

00017b4c <bt_hci_le_rand>:
{
   17b4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   17b4e:	4b14      	ldr	r3, [pc, #80]	; (17ba0 <bt_hci_le_rand+0x54>)
   17b50:	f993 3093 	ldrsb.w	r3, [r3, #147]	; 0x93
   17b54:	2b00      	cmp	r3, #0
{
   17b56:	4605      	mov	r5, r0
   17b58:	460c      	mov	r4, r1
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   17b5a:	da1d      	bge.n	17b98 <bt_hci_le_rand+0x4c>
	while (len > 0) {
   17b5c:	b914      	cbnz	r4, 17b64 <bt_hci_le_rand+0x18>
	return 0;
   17b5e:	4620      	mov	r0, r4
}
   17b60:	b003      	add	sp, #12
   17b62:	bdf0      	pop	{r4, r5, r6, r7, pc}
		count = MIN(len, sizeof(rp->rand));
   17b64:	2c08      	cmp	r4, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   17b66:	aa01      	add	r2, sp, #4
   17b68:	f04f 0100 	mov.w	r1, #0
   17b6c:	f242 0018 	movw	r0, #8216	; 0x2018
		count = MIN(len, sizeof(rp->rand));
   17b70:	4626      	mov	r6, r4
   17b72:	bf28      	it	cs
   17b74:	2608      	movcs	r6, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   17b76:	f7ff ff45 	bl	17a04 <bt_hci_cmd_send_sync>
		if (err) {
   17b7a:	2800      	cmp	r0, #0
   17b7c:	d1f0      	bne.n	17b60 <bt_hci_le_rand+0x14>
		rp = (void *)rsp->data;
   17b7e:	9f01      	ldr	r7, [sp, #4]
   17b80:	68f9      	ldr	r1, [r7, #12]
   17b82:	4632      	mov	r2, r6
   17b84:	3101      	adds	r1, #1
   17b86:	4628      	mov	r0, r5
   17b88:	f00d fb1d 	bl	251c6 <memcpy>
		net_buf_unref(rsp);
   17b8c:	4638      	mov	r0, r7
   17b8e:	f004 fb51 	bl	1c234 <net_buf_unref>
		buffer = (uint8_t *)buffer + count;
   17b92:	4435      	add	r5, r6
		len -= count;
   17b94:	1ba4      	subs	r4, r4, r6
   17b96:	e7e1      	b.n	17b5c <bt_hci_le_rand+0x10>
		return -ENOTSUP;
   17b98:	f06f 0085 	mvn.w	r0, #133	; 0x85
   17b9c:	e7e0      	b.n	17b60 <bt_hci_le_rand+0x14>
   17b9e:	bf00      	nop
   17ba0:	20000388 	.word	0x20000388

00017ba4 <bt_hci_le_enh_conn_complete>:
{
   17ba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17ba8:	b08d      	sub	sp, #52	; 0x34
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   17baa:	f8b0 9001 	ldrh.w	r9, [r0, #1]
		if (disconnected_handles[i] == handle) {
   17bae:	4aad      	ldr	r2, [pc, #692]	; (17e64 <bt_hci_le_enh_conn_complete+0x2c0>)
	if (evt->status) {
   17bb0:	7804      	ldrb	r4, [r0, #0]
		if (disconnected_handles[i] == handle) {
   17bb2:	8811      	ldrh	r1, [r2, #0]
	handle |= ~BT_ACL_HANDLE_MASK;
   17bb4:	ea6f 5309 	mvn.w	r3, r9, lsl #20
   17bb8:	ea6f 5313 	mvn.w	r3, r3, lsr #20
		if (disconnected_handles[i] == handle) {
   17bbc:	b29b      	uxth	r3, r3
   17bbe:	4299      	cmp	r1, r3
   17bc0:	f04f 0600 	mov.w	r6, #0
			disconnected_handles[i] = 0;
   17bc4:	bf08      	it	eq
   17bc6:	8016      	strheq	r6, [r2, #0]
{
   17bc8:	af02      	add	r7, sp, #8
   17bca:	4605      	mov	r5, r0
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   17bcc:	fa1f f889 	uxth.w	r8, r9
			return true;
   17bd0:	bf08      	it	eq
   17bd2:	2601      	moveq	r6, #1
	if (evt->status) {
   17bd4:	b3a4      	cbz	r4, 17c40 <bt_hci_le_enh_conn_complete+0x9c>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   17bd6:	2c3c      	cmp	r4, #60	; 0x3c
   17bd8:	d122      	bne.n	17c20 <bt_hci_le_enh_conn_complete+0x7c>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   17bda:	f001 f981 	bl	18ee0 <bt_le_adv_lookup_legacy>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   17bde:	f06f 0180 	mvn.w	r1, #128	; 0x80
   17be2:	3010      	adds	r0, #16
   17be4:	f00a fe76 	bl	228d4 <atomic_and.isra.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
   17be8:	2000      	movs	r0, #0
   17bea:	f7ff fab1 	bl	17150 <find_pending_connect.part.0>
		if (!conn) {
   17bee:	4605      	mov	r5, r0
   17bf0:	b970      	cbnz	r0, 17c10 <bt_hci_le_enh_conn_complete+0x6c>
			LOG_ERR("No pending peripheral connection");
   17bf2:	4b9d      	ldr	r3, [pc, #628]	; (17e68 <bt_hci_le_enh_conn_complete+0x2c4>)
   17bf4:	627b      	str	r3, [r7, #36]	; 0x24
   17bf6:	2302      	movs	r3, #2
   17bf8:	489c      	ldr	r0, [pc, #624]	; (17e6c <bt_hci_le_enh_conn_complete+0x2c8>)
   17bfa:	623b      	str	r3, [r7, #32]
   17bfc:	f107 0220 	add.w	r2, r7, #32
   17c00:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   17c04:	f00a fe63 	bl	228ce <z_log_msg_static_create.constprop.0>
}
   17c08:	372c      	adds	r7, #44	; 0x2c
   17c0a:	46bd      	mov	sp, r7
   17c0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
   17c10:	7244      	strb	r4, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   17c12:	2100      	movs	r1, #0
   17c14:	f001 fe1c 	bl	19850 <bt_conn_set_state>
		bt_conn_unref(conn);
   17c18:	4628      	mov	r0, r5
	bt_conn_unref(conn);
   17c1a:	f00b f88c 	bl	22d36 <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   17c1e:	e7f3      	b.n	17c08 <bt_hci_le_enh_conn_complete+0x64>
		LOG_WRN("Unexpected status 0x%02x", evt->status);
   17c20:	466d      	mov	r5, sp
   17c22:	b088      	sub	sp, #32
   17c24:	aa02      	add	r2, sp, #8
   17c26:	4b92      	ldr	r3, [pc, #584]	; (17e70 <bt_hci_le_enh_conn_complete+0x2cc>)
   17c28:	4890      	ldr	r0, [pc, #576]	; (17e6c <bt_hci_le_enh_conn_complete+0x2c8>)
   17c2a:	e9c2 3405 	strd	r3, r4, [r2, #20]
   17c2e:	2303      	movs	r3, #3
   17c30:	f842 3f10 	str.w	r3, [r2, #16]!
   17c34:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   17c38:	f00a fe49 	bl	228ce <z_log_msg_static_create.constprop.0>
   17c3c:	46ad      	mov	sp, r5
		return;
   17c3e:	e7e3      	b.n	17c08 <bt_hci_le_enh_conn_complete+0x64>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   17c40:	7903      	ldrb	r3, [r0, #4]
   17c42:	3b02      	subs	r3, #2
   17c44:	2b01      	cmp	r3, #1
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   17c46:	f100 0a04 	add.w	sl, r0, #4
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   17c4a:	d82c      	bhi.n	17ca6 <bt_hci_le_enh_conn_complete+0x102>
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   17c4c:	4651      	mov	r1, sl
   17c4e:	f107 0010 	add.w	r0, r7, #16
   17c52:	f00a fe35 	bl	228c0 <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   17c56:	7c3b      	ldrb	r3, [r7, #16]
   17c58:	3b02      	subs	r3, #2
   17c5a:	743b      	strb	r3, [r7, #16]
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
   17c5c:	f105 0111 	add.w	r1, r5, #17
   17c60:	f107 0009 	add.w	r0, r7, #9
   17c64:	f00a fe27 	bl	228b6 <bt_addr_copy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
   17c68:	2301      	movs	r3, #1
   17c6a:	723b      	strb	r3, [r7, #8]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
   17c6c:	78eb      	ldrb	r3, [r5, #3]
   17c6e:	2b01      	cmp	r3, #1
   17c70:	d02e      	beq.n	17cd0 <bt_hci_le_enh_conn_complete+0x12c>
		LOG_ERR("No pending conn for peer %s", bt_addr_le_str(&evt->peer_addr));
   17c72:	4650      	mov	r0, sl
   17c74:	f7ff f8d4 	bl	16e20 <bt_addr_le_str>
   17c78:	466c      	mov	r4, sp
   17c7a:	b088      	sub	sp, #32
   17c7c:	aa02      	add	r2, sp, #8
   17c7e:	4b7d      	ldr	r3, [pc, #500]	; (17e74 <bt_hci_le_enh_conn_complete+0x2d0>)
   17c80:	e9c2 3005 	strd	r3, r0, [r2, #20]
   17c84:	f44f 7300 	mov.w	r3, #512	; 0x200
   17c88:	8393      	strh	r3, [r2, #28]
   17c8a:	4b7b      	ldr	r3, [pc, #492]	; (17e78 <bt_hci_le_enh_conn_complete+0x2d4>)
   17c8c:	f842 3f10 	str.w	r3, [r2, #16]!
   17c90:	4876      	ldr	r0, [pc, #472]	; (17e6c <bt_hci_le_enh_conn_complete+0x2c8>)
   17c92:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   17c96:	f00a fe1a 	bl	228ce <z_log_msg_static_create.constprop.0>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
   17c9a:	211f      	movs	r1, #31
   17c9c:	46a5      	mov	sp, r4
   17c9e:	4640      	mov	r0, r8
   17ca0:	f00a fe24 	bl	228ec <bt_hci_disconnect>
		return;
   17ca4:	e7b0      	b.n	17c08 <bt_hci_le_enh_conn_complete+0x64>
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
   17ca6:	78c3      	ldrb	r3, [r0, #3]
   17ca8:	2b01      	cmp	r3, #1
   17caa:	bf04      	itt	eq
   17cac:	4b73      	ldreq	r3, [pc, #460]	; (17e7c <bt_hci_le_enh_conn_complete+0x2d8>)
   17cae:	f893 4067 	ldrbeq.w	r4, [r3, #103]	; 0x67
		bt_addr_le_copy(&id_addr,
   17cb2:	4651      	mov	r1, sl
   17cb4:	4620      	mov	r0, r4
   17cb6:	f00a fed5 	bl	22a64 <bt_lookup_id_addr>
   17cba:	4601      	mov	r1, r0
   17cbc:	f107 0010 	add.w	r0, r7, #16
   17cc0:	f00a fdfe 	bl	228c0 <bt_addr_le_copy>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
   17cc4:	4651      	mov	r1, sl
   17cc6:	f107 0008 	add.w	r0, r7, #8
   17cca:	f00a fdf9 	bl	228c0 <bt_addr_le_copy>
   17cce:	e7cd      	b.n	17c6c <bt_hci_le_enh_conn_complete+0xc8>
   17cd0:	f107 0010 	add.w	r0, r7, #16
   17cd4:	f7ff fa3c 	bl	17150 <find_pending_connect.part.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   17cd8:	78eb      	ldrb	r3, [r5, #3]
   17cda:	2b01      	cmp	r3, #1
   17cdc:	4604      	mov	r4, r0
   17cde:	d10a      	bne.n	17cf6 <bt_hci_le_enh_conn_complete+0x152>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   17ce0:	f001 f8fe 	bl	18ee0 <bt_le_adv_lookup_legacy>
   17ce4:	f06f 0180 	mvn.w	r1, #128	; 0x80
   17ce8:	4683      	mov	fp, r0
   17cea:	3010      	adds	r0, #16
   17cec:	f00a fdf2 	bl	228d4 <atomic_and.isra.0>
		(void)bt_le_lim_adv_cancel_timeout(adv);
   17cf0:	4658      	mov	r0, fp
   17cf2:	f00a ffcf 	bl	22c94 <bt_le_lim_adv_cancel_timeout>
	if (!conn) {
   17cf6:	2c00      	cmp	r4, #0
   17cf8:	d0bb      	beq.n	17c72 <bt_hci_le_enh_conn_complete+0xce>
	conn->handle = handle;
   17cfa:	4620      	mov	r0, r4
	bt_addr_le_copy(&conn->le.dst, &id_addr);
   17cfc:	f107 0110 	add.w	r1, r7, #16
	conn->handle = handle;
   17d00:	f820 9b88 	strh.w	r9, [r0], #136
	bt_addr_le_copy(&conn->le.dst, &id_addr);
   17d04:	f00a fddc 	bl	228c0 <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
   17d08:	f8b5 3017 	ldrh.w	r3, [r5, #23]
   17d0c:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
   17d10:	f8b5 3019 	ldrh.w	r3, [r5, #25]
   17d14:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   17d18:	f8b5 301b 	ldrh.w	r3, [r5, #27]
   17d1c:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	conn->role = evt->role;
   17d20:	78eb      	ldrb	r3, [r5, #3]
   17d22:	70e3      	strb	r3, [r4, #3]
	conn->err = 0U;
   17d24:	2200      	movs	r2, #0
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   17d26:	2b01      	cmp	r3, #1
	conn->err = 0U;
   17d28:	7262      	strb	r2, [r4, #9]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   17d2a:	d116      	bne.n	17d5a <bt_hci_le_enh_conn_complete+0x1b6>
		bt_addr_le_copy(&conn->le.init_addr, &peer_addr);
   17d2c:	f107 0108 	add.w	r1, r7, #8
   17d30:	f104 008f 	add.w	r0, r4, #143	; 0x8f
   17d34:	f00a fdc4 	bl	228c0 <bt_addr_le_copy>
			struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   17d38:	f001 f8d2 	bl	18ee0 <bt_le_adv_lookup_legacy>
						&bt_dev.id_addr[conn->id]);
   17d3c:	7a21      	ldrb	r1, [r4, #8]
   17d3e:	4a4f      	ldr	r2, [pc, #316]	; (17e7c <bt_hci_le_enh_conn_complete+0x2d8>)
   17d40:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
				bt_addr_le_copy(&conn->le.resp_addr,
   17d44:	4411      	add	r1, r2
   17d46:	f104 0096 	add.w	r0, r4, #150	; 0x96
   17d4a:	f00a fdb9 	bl	228c0 <bt_addr_le_copy>
		if (BT_LE_STATES_PER_CONN_ADV(bt_dev.le.states)) {
   17d4e:	f8d2 30dc 	ldr.w	r3, [r2, #220]	; 0xdc
   17d52:	065d      	lsls	r5, r3, #25
   17d54:	d501      	bpl.n	17d5a <bt_hci_le_enh_conn_complete+0x1b6>
			bt_le_adv_resume();
   17d56:	f001 fa89 	bl	1926c <bt_le_adv_resume>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
   17d5a:	2107      	movs	r1, #7
   17d5c:	4620      	mov	r0, r4
   17d5e:	f001 fd77 	bl	19850 <bt_conn_set_state>
	if (is_disconnected) {
   17d62:	b11e      	cbz	r6, 17d6c <bt_hci_le_enh_conn_complete+0x1c8>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   17d64:	2101      	movs	r1, #1
   17d66:	4620      	mov	r0, r4
   17d68:	f001 fd72 	bl	19850 <bt_conn_set_state>
	bt_conn_connected(conn);
   17d6c:	4620      	mov	r0, r4
   17d6e:	f00b f820 	bl	22db2 <bt_conn_connected>
	if (conn->state != BT_CONN_CONNECTED) {
   17d72:	7aa3      	ldrb	r3, [r4, #10]
   17d74:	2b07      	cmp	r3, #7
   17d76:	d170      	bne.n	17e5a <bt_hci_le_enh_conn_complete+0x2b6>
   17d78:	f3bf 8f5b 	dmb	ish
   17d7c:	6863      	ldr	r3, [r4, #4]
   17d7e:	4d3f      	ldr	r5, [pc, #252]	; (17e7c <bt_hci_le_enh_conn_complete+0x2d8>)
   17d80:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   17d84:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   17d88:	d129      	bne.n	17dde <bt_hci_le_enh_conn_complete+0x23a>
   17d8a:	78e3      	ldrb	r3, [r4, #3]
   17d8c:	b11b      	cbz	r3, 17d96 <bt_hci_le_enh_conn_complete+0x1f2>
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
   17d8e:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   17d92:	0718      	lsls	r0, r3, #28
   17d94:	d523      	bpl.n	17dde <bt_hci_le_enh_conn_complete+0x23a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
   17d96:	2102      	movs	r1, #2
   17d98:	f242 0016 	movw	r0, #8214	; 0x2016
   17d9c:	f7ff fdf8 	bl	17990 <bt_hci_cmd_create>
	if (!buf) {
   17da0:	4606      	mov	r6, r0
   17da2:	2800      	cmp	r0, #0
   17da4:	d05b      	beq.n	17e5e <bt_hci_le_enh_conn_complete+0x2ba>
   17da6:	2102      	movs	r1, #2
   17da8:	300c      	adds	r0, #12
   17daa:	f00c f8a7 	bl	23efc <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   17dae:	8823      	ldrh	r3, [r4, #0]
   17db0:	8003      	strh	r3, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf, NULL);
   17db2:	2200      	movs	r2, #0
   17db4:	4631      	mov	r1, r6
   17db6:	f242 0016 	movw	r0, #8214	; 0x2016
   17dba:	f7ff fe23 	bl	17a04 <bt_hci_cmd_send_sync>
		if (err) {
   17dbe:	b170      	cbz	r0, 17dde <bt_hci_le_enh_conn_complete+0x23a>
			LOG_ERR("Failed read remote features (%d)", err);
   17dc0:	466e      	mov	r6, sp
   17dc2:	b088      	sub	sp, #32
   17dc4:	aa02      	add	r2, sp, #8
   17dc6:	4b2e      	ldr	r3, [pc, #184]	; (17e80 <bt_hci_le_enh_conn_complete+0x2dc>)
   17dc8:	e9c2 3005 	strd	r3, r0, [r2, #20]
   17dcc:	2303      	movs	r3, #3
   17dce:	f842 3f10 	str.w	r3, [r2, #16]!
   17dd2:	4826      	ldr	r0, [pc, #152]	; (17e6c <bt_hci_le_enh_conn_complete+0x2c8>)
   17dd4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   17dd8:	f00a fd79 	bl	228ce <z_log_msg_static_create.constprop.0>
   17ddc:	46b5      	mov	sp, r6
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   17dde:	f895 30d1 	ldrb.w	r3, [r5, #209]	; 0xd1
   17de2:	07d9      	lsls	r1, r3, #31
   17de4:	d516      	bpl.n	17e14 <bt_hci_le_enh_conn_complete+0x270>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
   17de6:	2100      	movs	r1, #0
   17de8:	2302      	movs	r3, #2
   17dea:	9100      	str	r1, [sp, #0]
   17dec:	461a      	mov	r2, r3
   17dee:	4620      	mov	r0, r4
   17df0:	f00a fdb5 	bl	2295e <bt_le_set_phy>
		if (err) {
   17df4:	b170      	cbz	r0, 17e14 <bt_hci_le_enh_conn_complete+0x270>
			LOG_ERR("Failed LE Set PHY (%d)", err);
   17df6:	466e      	mov	r6, sp
   17df8:	b088      	sub	sp, #32
   17dfa:	aa02      	add	r2, sp, #8
   17dfc:	4b21      	ldr	r3, [pc, #132]	; (17e84 <bt_hci_le_enh_conn_complete+0x2e0>)
   17dfe:	e9c2 3005 	strd	r3, r0, [r2, #20]
   17e02:	2303      	movs	r3, #3
   17e04:	f842 3f10 	str.w	r3, [r2, #16]!
   17e08:	4818      	ldr	r0, [pc, #96]	; (17e6c <bt_hci_le_enh_conn_complete+0x2c8>)
   17e0a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   17e0e:	f00a fd5e 	bl	228ce <z_log_msg_static_create.constprop.0>
   17e12:	46b5      	mov	sp, r6
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
   17e14:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   17e18:	069a      	lsls	r2, r3, #26
   17e1a:	d51e      	bpl.n	17e5a <bt_hci_le_enh_conn_complete+0x2b6>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
   17e1c:	f8d5 3154 	ldr.w	r3, [r5, #340]	; 0x154
   17e20:	689b      	ldr	r3, [r3, #8]
   17e22:	079b      	lsls	r3, r3, #30
   17e24:	d519      	bpl.n	17e5a <bt_hci_le_enh_conn_complete+0x2b6>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   17e26:	1db9      	adds	r1, r7, #6
   17e28:	1d38      	adds	r0, r7, #4
   17e2a:	f7ff fe67 	bl	17afc <hci_le_read_max_data_len>
			if (!err) {
   17e2e:	b9a0      	cbnz	r0, 17e5a <bt_hci_le_enh_conn_complete+0x2b6>
				err = bt_le_set_data_len(conn,
   17e30:	88fa      	ldrh	r2, [r7, #6]
   17e32:	88b9      	ldrh	r1, [r7, #4]
   17e34:	4620      	mov	r0, r4
   17e36:	f00a fd74 	bl	22922 <bt_le_set_data_len>
				if (err) {
   17e3a:	b170      	cbz	r0, 17e5a <bt_hci_le_enh_conn_complete+0x2b6>
					LOG_ERR("Failed to set data len (%d)", err);
   17e3c:	466d      	mov	r5, sp
   17e3e:	b088      	sub	sp, #32
   17e40:	aa02      	add	r2, sp, #8
   17e42:	4b11      	ldr	r3, [pc, #68]	; (17e88 <bt_hci_le_enh_conn_complete+0x2e4>)
   17e44:	e9c2 3005 	strd	r3, r0, [r2, #20]
   17e48:	2303      	movs	r3, #3
   17e4a:	f842 3f10 	str.w	r3, [r2, #16]!
   17e4e:	4807      	ldr	r0, [pc, #28]	; (17e6c <bt_hci_le_enh_conn_complete+0x2c8>)
   17e50:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   17e54:	f00a fd3b 	bl	228ce <z_log_msg_static_create.constprop.0>
   17e58:	46ad      	mov	sp, r5
	bt_conn_unref(conn);
   17e5a:	4620      	mov	r0, r4
   17e5c:	e6dd      	b.n	17c1a <bt_hci_le_enh_conn_complete+0x76>
		return -ENOBUFS;
   17e5e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   17e62:	e7ad      	b.n	17dc0 <bt_hci_le_enh_conn_complete+0x21c>
   17e64:	2000535e 	.word	0x2000535e
   17e68:	00026bd2 	.word	0x00026bd2
   17e6c:	000255a4 	.word	0x000255a4
   17e70:	00026bf3 	.word	0x00026bf3
   17e74:	00026c0c 	.word	0x00026c0c
   17e78:	01000003 	.word	0x01000003
   17e7c:	20000388 	.word	0x20000388
   17e80:	00026c28 	.word	0x00026c28
   17e84:	00026c49 	.word	0x00026c49
   17e88:	00026c60 	.word	0x00026c60

00017e8c <le_legacy_conn_complete>:
{
   17e8c:	b500      	push	{lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   17e8e:	68c1      	ldr	r1, [r0, #12]
{
   17e90:	b089      	sub	sp, #36	; 0x24
	enh.status         = evt->status;
   17e92:	780b      	ldrb	r3, [r1, #0]
   17e94:	f88d 3000 	strb.w	r3, [sp]
	enh.handle         = evt->handle;
   17e98:	f8b1 3001 	ldrh.w	r3, [r1, #1]
   17e9c:	f8ad 3001 	strh.w	r3, [sp, #1]
	enh.role           = evt->role;
   17ea0:	78cb      	ldrb	r3, [r1, #3]
   17ea2:	f88d 3003 	strb.w	r3, [sp, #3]
	enh.interval       = evt->interval;
   17ea6:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   17eaa:	f8ad 3017 	strh.w	r3, [sp, #23]
	enh.latency        = evt->latency;
   17eae:	f8b1 300d 	ldrh.w	r3, [r1, #13]
   17eb2:	f8ad 3019 	strh.w	r3, [sp, #25]
	enh.supv_timeout   = evt->supv_timeout;
   17eb6:	f8b1 300f 	ldrh.w	r3, [r1, #15]
   17eba:	f8ad 301b 	strh.w	r3, [sp, #27]
	enh.clock_accuracy = evt->clock_accuracy;
   17ebe:	7c4b      	ldrb	r3, [r1, #17]
   17ec0:	f88d 301d 	strb.w	r3, [sp, #29]
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   17ec4:	a801      	add	r0, sp, #4
   17ec6:	3104      	adds	r1, #4
   17ec8:	f00a fcfa 	bl	228c0 <bt_addr_le_copy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   17ecc:	4907      	ldr	r1, [pc, #28]	; (17eec <le_legacy_conn_complete+0x60>)
   17ece:	f10d 000b 	add.w	r0, sp, #11
   17ed2:	f00a fcf0 	bl	228b6 <bt_addr_copy>
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   17ed6:	f10d 0011 	add.w	r0, sp, #17
   17eda:	f00a fcec 	bl	228b6 <bt_addr_copy>
	bt_hci_le_enh_conn_complete(evt);
   17ede:	4668      	mov	r0, sp
   17ee0:	f7ff fe60 	bl	17ba4 <bt_hci_le_enh_conn_complete>
}
   17ee4:	b009      	add	sp, #36	; 0x24
   17ee6:	f85d fb04 	ldr.w	pc, [sp], #4
   17eea:	bf00      	nop
   17eec:	00026838 	.word	0x00026838

00017ef0 <bt_send>:
	return bt_dev.drv->send(buf);
   17ef0:	4b02      	ldr	r3, [pc, #8]	; (17efc <bt_send+0xc>)
   17ef2:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
   17ef6:	695b      	ldr	r3, [r3, #20]
   17ef8:	4718      	bx	r3
   17efa:	bf00      	nop
   17efc:	20000388 	.word	0x20000388

00017f00 <bt_hci_cmd_send>:
{
   17f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17f02:	4605      	mov	r5, r0
   17f04:	af00      	add	r7, sp, #0
	if (!buf) {
   17f06:	460c      	mov	r4, r1
   17f08:	b919      	cbnz	r1, 17f12 <bt_hci_cmd_send+0x12>
		buf = bt_hci_cmd_create(opcode, 0);
   17f0a:	f7ff fd41 	bl	17990 <bt_hci_cmd_create>
		if (!buf) {
   17f0e:	4604      	mov	r4, r0
   17f10:	b318      	cbz	r0, 17f5a <bt_hci_cmd_send+0x5a>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
   17f12:	f640 4335 	movw	r3, #3125	; 0xc35
   17f16:	429d      	cmp	r5, r3
   17f18:	d119      	bne.n	17f4e <bt_hci_cmd_send+0x4e>
		err = bt_send(buf);
   17f1a:	4620      	mov	r0, r4
   17f1c:	f7ff ffe8 	bl	17ef0 <bt_send>
		if (err) {
   17f20:	4605      	mov	r5, r0
   17f22:	b188      	cbz	r0, 17f48 <bt_hci_cmd_send+0x48>
			LOG_ERR("Unable to send to driver (err %d)", err);
   17f24:	466e      	mov	r6, sp
   17f26:	b088      	sub	sp, #32
   17f28:	466a      	mov	r2, sp
   17f2a:	4b0d      	ldr	r3, [pc, #52]	; (17f60 <bt_hci_cmd_send+0x60>)
   17f2c:	e9c2 3005 	strd	r3, r0, [r2, #20]
   17f30:	2303      	movs	r3, #3
   17f32:	480c      	ldr	r0, [pc, #48]	; (17f64 <bt_hci_cmd_send+0x64>)
   17f34:	f842 3f10 	str.w	r3, [r2, #16]!
   17f38:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   17f3c:	f00a fcc7 	bl	228ce <z_log_msg_static_create.constprop.0>
			net_buf_unref(buf);
   17f40:	4620      	mov	r0, r4
   17f42:	46b5      	mov	sp, r6
   17f44:	f004 f976 	bl	1c234 <net_buf_unref>
}
   17f48:	4628      	mov	r0, r5
   17f4a:	46bd      	mov	sp, r7
   17f4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
   17f4e:	4806      	ldr	r0, [pc, #24]	; (17f68 <bt_hci_cmd_send+0x68>)
   17f50:	4621      	mov	r1, r4
   17f52:	f00b ffab 	bl	23eac <net_buf_put>
	return 0;
   17f56:	2500      	movs	r5, #0
   17f58:	e7f6      	b.n	17f48 <bt_hci_cmd_send+0x48>
			return -ENOBUFS;
   17f5a:	f06f 0568 	mvn.w	r5, #104	; 0x68
   17f5e:	e7f3      	b.n	17f48 <bt_hci_cmd_send+0x48>
   17f60:	00026c7c 	.word	0x00026c7c
   17f64:	000255a4 	.word	0x000255a4
   17f68:	200004c4 	.word	0x200004c4

00017f6c <le_conn_param_req>:
{
   17f6c:	b5f0      	push	{r4, r5, r6, r7, lr}
   17f6e:	b083      	sub	sp, #12
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
   17f70:	68c3      	ldr	r3, [r0, #12]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   17f72:	78d9      	ldrb	r1, [r3, #3]
   17f74:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
   17f76:	881e      	ldrh	r6, [r3, #0]
{
   17f78:	af00      	add	r7, sp, #0
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   17f7a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   17f7e:	803a      	strh	r2, [r7, #0]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   17f80:	7959      	ldrb	r1, [r3, #5]
   17f82:	791a      	ldrb	r2, [r3, #4]
   17f84:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   17f88:	807a      	strh	r2, [r7, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
   17f8a:	799a      	ldrb	r2, [r3, #6]
   17f8c:	79d9      	ldrb	r1, [r3, #7]
   17f8e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   17f92:	80ba      	strh	r2, [r7, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
   17f94:	7a1a      	ldrb	r2, [r3, #8]
   17f96:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
   17f98:	b2b4      	uxth	r4, r6
	param.timeout = sys_le16_to_cpu(evt->timeout);
   17f9a:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
   17f9e:	4620      	mov	r0, r4
	param.timeout = sys_le16_to_cpu(evt->timeout);
   17fa0:	80fb      	strh	r3, [r7, #6]
	conn = bt_conn_lookup_handle(handle);
   17fa2:	f001 fc4d 	bl	19840 <bt_conn_lookup_handle>
	if (!conn) {
   17fa6:	4605      	mov	r5, r0
   17fa8:	b9a8      	cbnz	r0, 17fd6 <le_conn_param_req+0x6a>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   17faa:	466d      	mov	r5, sp
   17fac:	b088      	sub	sp, #32
   17fae:	466a      	mov	r2, sp
   17fb0:	4b1e      	ldr	r3, [pc, #120]	; (1802c <le_conn_param_req+0xc0>)
   17fb2:	481f      	ldr	r0, [pc, #124]	; (18030 <le_conn_param_req+0xc4>)
   17fb4:	e9c2 3405 	strd	r3, r4, [r2, #20]
   17fb8:	2303      	movs	r3, #3
   17fba:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   17fbe:	f842 3f10 	str.w	r3, [r2, #16]!
   17fc2:	f00a fc84 	bl	228ce <z_log_msg_static_create.constprop.0>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
   17fc6:	2102      	movs	r1, #2
   17fc8:	46ad      	mov	sp, r5
   17fca:	4620      	mov	r0, r4
   17fcc:	f00a fd13 	bl	229f6 <le_conn_param_neg_reply>
}
   17fd0:	370c      	adds	r7, #12
   17fd2:	46bd      	mov	sp, r7
   17fd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
   17fd6:	4639      	mov	r1, r7
   17fd8:	f001 fd9e 	bl	19b18 <le_param_req>
   17fdc:	b938      	cbnz	r0, 17fee <le_conn_param_req+0x82>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
   17fde:	211e      	movs	r1, #30
   17fe0:	4620      	mov	r0, r4
   17fe2:	f00a fd08 	bl	229f6 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
   17fe6:	4628      	mov	r0, r5
   17fe8:	f00a fea5 	bl	22d36 <bt_conn_unref>
   17fec:	e7f0      	b.n	17fd0 <le_conn_param_req+0x64>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   17fee:	210e      	movs	r1, #14
   17ff0:	f242 0020 	movw	r0, #8224	; 0x2020
   17ff4:	f7ff fccc 	bl	17990 <bt_hci_cmd_create>
	if (!buf) {
   17ff8:	4604      	mov	r4, r0
   17ffa:	2800      	cmp	r0, #0
   17ffc:	d0f3      	beq.n	17fe6 <le_conn_param_req+0x7a>
   17ffe:	210e      	movs	r1, #14
   18000:	300c      	adds	r0, #12
   18002:	f00b ff7b 	bl	23efc <net_buf_simple_add>
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
   18006:	2300      	movs	r3, #0
	cp->handle = sys_cpu_to_le16(handle);
   18008:	8006      	strh	r6, [r0, #0]
   1800a:	f8c0 300a 	str.w	r3, [r0, #10]
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   1800e:	883b      	ldrh	r3, [r7, #0]
   18010:	8043      	strh	r3, [r0, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   18012:	887b      	ldrh	r3, [r7, #2]
   18014:	8083      	strh	r3, [r0, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   18016:	88bb      	ldrh	r3, [r7, #4]
   18018:	80c3      	strh	r3, [r0, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   1801a:	88fb      	ldrh	r3, [r7, #6]
   1801c:	8103      	strh	r3, [r0, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   1801e:	4621      	mov	r1, r4
   18020:	f242 0020 	movw	r0, #8224	; 0x2020
   18024:	f7ff ff6c 	bl	17f00 <bt_hci_cmd_send>
   18028:	e7dd      	b.n	17fe6 <le_conn_param_req+0x7a>
   1802a:	bf00      	nop
   1802c:	00026974 	.word	0x00026974
   18030:	000255a4 	.word	0x000255a4

00018034 <hci_tx_thread>:
{
   18034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
   18038:	f8df 8158 	ldr.w	r8, [pc, #344]	; 18194 <hci_tx_thread+0x160>
		BT_ASSERT(err == 0);
   1803c:	f8df 9180 	ldr.w	r9, [pc, #384]	; 181c0 <hci_tx_thread+0x18c>
{
   18040:	b087      	sub	sp, #28
   18042:	af00      	add	r7, sp, #0
		events[0].state = K_POLL_STATE_NOT_READY;
   18044:	f8d8 300c 	ldr.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   18048:	4851      	ldr	r0, [pc, #324]	; (18190 <hci_tx_thread+0x15c>)
		events[0].state = K_POLL_STATE_NOT_READY;
   1804a:	f36f 3394 	bfc	r3, #14, #7
   1804e:	f8c8 300c 	str.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   18052:	f001 fbb3 	bl	197bc <bt_conn_prepare_events>
   18056:	1c45      	adds	r5, r0, #1
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm2 = { .val = timeout };
		return (int) arch_syscall_invoke4(parm0.x, parm1.x, parm2.split.lo, parm2.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
   18058:	484e      	ldr	r0, [pc, #312]	; (18194 <hci_tx_thread+0x160>)
   1805a:	f04f 32ff 	mov.w	r2, #4294967295
   1805e:	f04f 33ff 	mov.w	r3, #4294967295
   18062:	4629      	mov	r1, r5
   18064:	f008 fb5c 	bl	20720 <z_impl_k_poll>
		BT_ASSERT(err == 0);
   18068:	b160      	cbz	r0, 18084 <hci_tx_thread+0x50>
   1806a:	494b      	ldr	r1, [pc, #300]	; (18198 <hci_tx_thread+0x164>)
   1806c:	484b      	ldr	r0, [pc, #300]	; (1819c <hci_tx_thread+0x168>)
   1806e:	f640 13e6 	movw	r3, #2534	; 0x9e6
   18072:	464a      	mov	r2, r9
   18074:	f009 fe95 	bl	21da2 <assert_print>
   18078:	4040      	eors	r0, r0
   1807a:	f380 8811 	msr	BASEPRI, r0
   1807e:	f04f 0003 	mov.w	r0, #3
   18082:	df02      	svc	2
{
   18084:	4e43      	ldr	r6, [pc, #268]	; (18194 <hci_tx_thread+0x160>)
			LOG_WRN("Unexpected k_poll event state %u", ev->state);
   18086:	f04f 0a03 	mov.w	sl, #3
	for (; count; ev++, count--) {
   1808a:	b915      	cbnz	r5, 18092 <hci_tx_thread+0x5e>
	z_impl_k_yield();
   1808c:	f008 f824 	bl	200d8 <z_impl_k_yield>
	while (1) {
   18090:	e7d8      	b.n	18044 <hci_tx_thread+0x10>
		switch (ev->state) {
   18092:	68f3      	ldr	r3, [r6, #12]
   18094:	f3c3 3386 	ubfx	r3, r3, #14, #7
   18098:	2b01      	cmp	r3, #1
   1809a:	d960      	bls.n	1815e <hci_tx_thread+0x12a>
   1809c:	2b04      	cmp	r3, #4
   1809e:	d168      	bne.n	18172 <hci_tx_thread+0x13e>
			if (ev->tag == BT_EVENT_CMD_TX) {
   180a0:	7b33      	ldrb	r3, [r6, #12]
   180a2:	2b00      	cmp	r3, #0
   180a4:	d15e      	bne.n	18164 <hci_tx_thread+0x130>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   180a6:	483e      	ldr	r0, [pc, #248]	; (181a0 <hci_tx_thread+0x16c>)
   180a8:	2200      	movs	r2, #0
   180aa:	2300      	movs	r3, #0
   180ac:	f00b fecb 	bl	23e46 <net_buf_get>
	BT_ASSERT(buf);
   180b0:	4604      	mov	r4, r0
   180b2:	b960      	cbnz	r0, 180ce <hci_tx_thread+0x9a>
   180b4:	493b      	ldr	r1, [pc, #236]	; (181a4 <hci_tx_thread+0x170>)
   180b6:	4839      	ldr	r0, [pc, #228]	; (1819c <hci_tx_thread+0x168>)
   180b8:	f44f 6318 	mov.w	r3, #2432	; 0x980
   180bc:	464a      	mov	r2, r9
   180be:	f009 fe70 	bl	21da2 <assert_print>
   180c2:	4040      	eors	r0, r0
   180c4:	f380 8811 	msr	BASEPRI, r0
   180c8:	f04f 0003 	mov.w	r0, #3
   180cc:	df02      	svc	2
	if (bt_dev.sent_cmd) {
   180ce:	f8df b0f4 	ldr.w	fp, [pc, #244]	; 181c4 <hci_tx_thread+0x190>
	return z_impl_k_sem_take(sem, timeout);
   180d2:	4835      	ldr	r0, [pc, #212]	; (181a8 <hci_tx_thread+0x174>)
   180d4:	f04f 33ff 	mov.w	r3, #4294967295
   180d8:	f04f 32ff 	mov.w	r2, #4294967295
   180dc:	f007 fc5a 	bl	1f994 <z_impl_k_sem_take>
   180e0:	f8db 3130 	ldr.w	r3, [fp, #304]	; 0x130
   180e4:	b18b      	cbz	r3, 1810a <hci_tx_thread+0xd6>
		LOG_ERR("Uncleared pending sent_cmd");
   180e6:	4b31      	ldr	r3, [pc, #196]	; (181ac <hci_tx_thread+0x178>)
   180e8:	617b      	str	r3, [r7, #20]
   180ea:	2302      	movs	r3, #2
   180ec:	613b      	str	r3, [r7, #16]
   180ee:	4830      	ldr	r0, [pc, #192]	; (181b0 <hci_tx_thread+0x17c>)
   180f0:	f107 0210 	add.w	r2, r7, #16
   180f4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   180f8:	f00a fbe9 	bl	228ce <z_log_msg_static_create.constprop.0>
		net_buf_unref(bt_dev.sent_cmd);
   180fc:	f8db 0130 	ldr.w	r0, [fp, #304]	; 0x130
   18100:	f004 f898 	bl	1c234 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   18104:	2300      	movs	r3, #0
   18106:	f8cb 3130 	str.w	r3, [fp, #304]	; 0x130
	bt_dev.sent_cmd = net_buf_ref(buf);
   1810a:	4620      	mov	r0, r4
   1810c:	f00b fed0 	bl	23eb0 <net_buf_ref>
   18110:	f8cb 0130 	str.w	r0, [fp, #304]	; 0x130
	err = bt_send(buf);
   18114:	4620      	mov	r0, r4
   18116:	f7ff feeb 	bl	17ef0 <bt_send>
	if (err) {
   1811a:	b300      	cbz	r0, 1815e <hci_tx_thread+0x12a>
		LOG_ERR("Unable to send to driver (err %d)", err);
   1811c:	46eb      	mov	fp, sp
   1811e:	b088      	sub	sp, #32
   18120:	466a      	mov	r2, sp
   18122:	4b24      	ldr	r3, [pc, #144]	; (181b4 <hci_tx_thread+0x180>)
   18124:	e9c2 3005 	strd	r3, r0, [r2, #20]
   18128:	2303      	movs	r3, #3
   1812a:	f842 3f10 	str.w	r3, [r2, #16]!
   1812e:	4820      	ldr	r0, [pc, #128]	; (181b0 <hci_tx_thread+0x17c>)
   18130:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   18134:	f00a fbcb 	bl	228ce <z_log_msg_static_create.constprop.0>
   18138:	46dd      	mov	sp, fp
	z_impl_k_sem_give(sem);
   1813a:	481b      	ldr	r0, [pc, #108]	; (181a8 <hci_tx_thread+0x174>)
   1813c:	f007 fc04 	bl	1f948 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
   18140:	4620      	mov	r0, r4
   18142:	f003 ffbd 	bl	1c0c0 <net_buf_id>
   18146:	4b1c      	ldr	r3, [pc, #112]	; (181b8 <hci_tx_thread+0x184>)
   18148:	220c      	movs	r2, #12
   1814a:	fb02 3000 	mla	r0, r2, r0, r3
   1814e:	211f      	movs	r1, #31
   18150:	8840      	ldrh	r0, [r0, #2]
   18152:	4622      	mov	r2, r4
   18154:	f7ff fa4a 	bl	175ec <hci_cmd_done>
		net_buf_unref(buf);
   18158:	4620      	mov	r0, r4
   1815a:	f004 f86b 	bl	1c234 <net_buf_unref>
	for (; count; ev++, count--) {
   1815e:	3614      	adds	r6, #20
   18160:	3d01      	subs	r5, #1
   18162:	e792      	b.n	1808a <hci_tx_thread+0x56>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
   18164:	2b01      	cmp	r3, #1
   18166:	d1fa      	bne.n	1815e <hci_tx_thread+0x12a>
					conn = CONTAINER_OF(ev->fifo,
   18168:	6930      	ldr	r0, [r6, #16]
					bt_conn_process_tx(conn);
   1816a:	3838      	subs	r0, #56	; 0x38
   1816c:	f001 fea2 	bl	19eb4 <bt_conn_process_tx>
   18170:	e7f5      	b.n	1815e <hci_tx_thread+0x12a>
			LOG_WRN("Unexpected k_poll event state %u", ev->state);
   18172:	466c      	mov	r4, sp
   18174:	b088      	sub	sp, #32
   18176:	466a      	mov	r2, sp
   18178:	4910      	ldr	r1, [pc, #64]	; (181bc <hci_tx_thread+0x188>)
   1817a:	480d      	ldr	r0, [pc, #52]	; (181b0 <hci_tx_thread+0x17c>)
		switch (ev->state) {
   1817c:	e9c2 1305 	strd	r1, r3, [r2, #20]
			LOG_WRN("Unexpected k_poll event state %u", ev->state);
   18180:	f842 af10 	str.w	sl, [r2, #16]!
   18184:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   18188:	f00a fba1 	bl	228ce <z_log_msg_static_create.constprop.0>
   1818c:	46a5      	mov	sp, r4
   1818e:	e7e6      	b.n	1815e <hci_tx_thread+0x12a>
   18190:	2000054c 	.word	0x2000054c
   18194:	20000538 	.word	0x20000538
   18198:	00026b6d 	.word	0x00026b6d
   1819c:	00026a2d 	.word	0x00026a2d
   181a0:	200004c4 	.word	0x200004c4
   181a4:	00027719 	.word	0x00027719
   181a8:	200004a0 	.word	0x200004a0
   181ac:	00026c9e 	.word	0x00026c9e
   181b0:	000255a4 	.word	0x000255a4
   181b4:	00026c7c 	.word	0x00026c7c
   181b8:	20004f24 	.word	0x20004f24
   181bc:	00026cb9 	.word	0x00026cb9
   181c0:	000269e0 	.word	0x000269e0
   181c4:	20000388 	.word	0x20000388

000181c8 <hci_event_prio>:
{
   181c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   181cc:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
   181ce:	f100 060c 	add.w	r6, r0, #12
	state->offset = net_buf_simple_headroom(buf);
   181d2:	4630      	mov	r0, r6
   181d4:	f00b fec9 	bl	23f6a <net_buf_simple_headroom>
	state->len = buf->len;
   181d8:	f8b4 8010 	ldrh.w	r8, [r4, #16]
	BT_ASSERT(buf->len >= sizeof(*hdr));
   181dc:	f1b8 0f01 	cmp.w	r8, #1
	state->offset = net_buf_simple_headroom(buf);
   181e0:	4605      	mov	r5, r0
   181e2:	d80c      	bhi.n	181fe <hci_event_prio+0x36>
   181e4:	4a1c      	ldr	r2, [pc, #112]	; (18258 <hci_event_prio+0x90>)
   181e6:	491d      	ldr	r1, [pc, #116]	; (1825c <hci_event_prio+0x94>)
   181e8:	481d      	ldr	r0, [pc, #116]	; (18260 <hci_event_prio+0x98>)
   181ea:	f640 537b 	movw	r3, #3451	; 0xd7b
   181ee:	f009 fdd8 	bl	21da2 <assert_print>
   181f2:	4040      	eors	r0, r0
   181f4:	f380 8811 	msr	BASEPRI, r0
   181f8:	f04f 0003 	mov.w	r0, #3
   181fc:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
   181fe:	4630      	mov	r0, r6
   18200:	2102      	movs	r1, #2
   18202:	f00b fea2 	bl	23f4a <net_buf_simple_pull_mem>
   18206:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   18208:	7800      	ldrb	r0, [r0, #0]
   1820a:	f00a fb32 	bl	22872 <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   1820e:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   18210:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   18212:	d40c      	bmi.n	1822e <hci_event_prio+0x66>
   18214:	4a10      	ldr	r2, [pc, #64]	; (18258 <hci_event_prio+0x90>)
   18216:	4913      	ldr	r1, [pc, #76]	; (18264 <hci_event_prio+0x9c>)
   18218:	4811      	ldr	r0, [pc, #68]	; (18260 <hci_event_prio+0x98>)
   1821a:	f640 537f 	movw	r3, #3455	; 0xd7f
   1821e:	f009 fdc0 	bl	21da2 <assert_print>
   18222:	4040      	eors	r0, r0
   18224:	f380 8811 	msr	BASEPRI, r0
   18228:	f04f 0003 	mov.w	r0, #3
   1822c:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
   1822e:	2305      	movs	r3, #5
   18230:	4a0d      	ldr	r2, [pc, #52]	; (18268 <hci_event_prio+0xa0>)
   18232:	7838      	ldrb	r0, [r7, #0]
   18234:	4621      	mov	r1, r4
   18236:	f7ff f89f 	bl	17378 <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   1823a:	07b3      	lsls	r3, r6, #30
   1823c:	d507      	bpl.n	1824e <hci_event_prio+0x86>
	buf->data = buf->__buf + state->offset;
   1823e:	6963      	ldr	r3, [r4, #20]
	buf->len = state->len;
   18240:	f8a4 8010 	strh.w	r8, [r4, #16]
	buf->data = buf->__buf + state->offset;
   18244:	fa13 f585 	uxtah	r5, r3, r5
   18248:	60e5      	str	r5, [r4, #12]
}
   1824a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
   1824e:	4620      	mov	r0, r4
}
   18250:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
   18254:	f003 bfee 	b.w	1c234 <net_buf_unref>
   18258:	000269e0 	.word	0x000269e0
   1825c:	00026a14 	.word	0x00026a14
   18260:	00026a2d 	.word	0x00026a2d
   18264:	00026cda 	.word	0x00026cda
   18268:	0002582c 	.word	0x0002582c

0001826c <bt_recv>:
{
   1826c:	b5b0      	push	{r4, r5, r7, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   1826e:	7e03      	ldrb	r3, [r0, #24]
	switch (bt_buf_get_type(buf)) {
   18270:	2b01      	cmp	r3, #1
{
   18272:	af00      	add	r7, sp, #0
   18274:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
   18276:	d006      	beq.n	18286 <bt_recv+0x1a>
   18278:	2b03      	cmp	r3, #3
   1827a:	d112      	bne.n	182a2 <bt_recv+0x36>
			rx_queue_put(buf);
   1827c:	f7fe ffa8 	bl	171d0 <rx_queue_put>
		return 0;
   18280:	2000      	movs	r0, #0
}
   18282:	46bd      	mov	sp, r7
   18284:	bdb0      	pop	{r4, r5, r7, pc}
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   18286:	68c3      	ldr	r3, [r0, #12]
   18288:	7818      	ldrb	r0, [r3, #0]
   1828a:	f00a faf2 	bl	22872 <bt_hci_evt_get_flags>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   1828e:	07c2      	lsls	r2, r0, #31
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   18290:	4605      	mov	r5, r0
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   18292:	d502      	bpl.n	1829a <bt_recv+0x2e>
			hci_event_prio(buf);
   18294:	4620      	mov	r0, r4
   18296:	f7ff ff97 	bl	181c8 <hci_event_prio>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   1829a:	07ab      	lsls	r3, r5, #30
   1829c:	d5f0      	bpl.n	18280 <bt_recv+0x14>
			rx_queue_put(buf);
   1829e:	4620      	mov	r0, r4
   182a0:	e7ec      	b.n	1827c <bt_recv+0x10>
		LOG_ERR("Invalid buf type %u", bt_buf_get_type(buf));
   182a2:	466d      	mov	r5, sp
   182a4:	b088      	sub	sp, #32
   182a6:	466a      	mov	r2, sp
   182a8:	4908      	ldr	r1, [pc, #32]	; (182cc <bt_recv+0x60>)
   182aa:	4809      	ldr	r0, [pc, #36]	; (182d0 <bt_recv+0x64>)
	switch (bt_buf_get_type(buf)) {
   182ac:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Invalid buf type %u", bt_buf_get_type(buf));
   182b0:	2303      	movs	r3, #3
   182b2:	f842 3f10 	str.w	r3, [r2, #16]!
   182b6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   182ba:	f00a fb08 	bl	228ce <z_log_msg_static_create.constprop.0>
		net_buf_unref(buf);
   182be:	4620      	mov	r0, r4
   182c0:	46ad      	mov	sp, r5
   182c2:	f003 ffb7 	bl	1c234 <net_buf_unref>
		return -EINVAL;
   182c6:	f06f 0015 	mvn.w	r0, #21
   182ca:	e7da      	b.n	18282 <bt_recv+0x16>
   182cc:	00026cf3 	.word	0x00026cf3
   182d0:	000255a4 	.word	0x000255a4

000182d4 <bt_hci_driver_register>:
	if (bt_dev.drv) {
   182d4:	4a08      	ldr	r2, [pc, #32]	; (182f8 <bt_hci_driver_register+0x24>)
{
   182d6:	4603      	mov	r3, r0
	if (bt_dev.drv) {
   182d8:	f8d2 0154 	ldr.w	r0, [r2, #340]	; 0x154
   182dc:	b930      	cbnz	r0, 182ec <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
   182de:	68d9      	ldr	r1, [r3, #12]
   182e0:	b139      	cbz	r1, 182f2 <bt_hci_driver_register+0x1e>
   182e2:	6959      	ldr	r1, [r3, #20]
   182e4:	b129      	cbz	r1, 182f2 <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
   182e6:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
	return 0;
   182ea:	4770      	bx	lr
		return -EALREADY;
   182ec:	f06f 0077 	mvn.w	r0, #119	; 0x77
   182f0:	4770      	bx	lr
		return -EINVAL;
   182f2:	f06f 0015 	mvn.w	r0, #21
}
   182f6:	4770      	bx	lr
   182f8:	20000388 	.word	0x20000388

000182fc <bt_finalize_init>:
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   182fc:	4801      	ldr	r0, [pc, #4]	; (18304 <bt_finalize_init+0x8>)
   182fe:	2104      	movs	r1, #4
   18300:	f00a baca 	b.w	22898 <atomic_or>
   18304:	20000454 	.word	0x20000454

00018308 <bt_init>:
{
   18308:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   1830a:	4dbe      	ldr	r5, [pc, #760]	; (18604 <bt_init+0x2fc>)
   1830c:	f8d5 3154 	ldr.w	r3, [r5, #340]	; 0x154
   18310:	6899      	ldr	r1, [r3, #8]
   18312:	f011 0101 	ands.w	r1, r1, #1
{
   18316:	b089      	sub	sp, #36	; 0x24
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   18318:	d121      	bne.n	1835e <bt_init+0x56>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
   1831a:	aa02      	add	r2, sp, #8
   1831c:	f640 4003 	movw	r0, #3075	; 0xc03
   18320:	f7ff fb70 	bl	17a04 <bt_hci_cmd_send_sync>
		if (err) {
   18324:	4604      	mov	r4, r0
   18326:	2800      	cmp	r0, #0
   18328:	d172      	bne.n	18410 <bt_init+0x108>
		hci_reset_complete(rsp);
   1832a:	9802      	ldr	r0, [sp, #8]
	uint8_t status = buf->data[0];
   1832c:	68c3      	ldr	r3, [r0, #12]
	if (status) {
   1832e:	781b      	ldrb	r3, [r3, #0]
   18330:	b99b      	cbnz	r3, 1835a <bt_init+0x52>
   18332:	f3bf 8f5b 	dmb	ish
   18336:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
   1833a:	f3bf 8f5b 	dmb	ish
   1833e:	f105 02cc 	add.w	r2, r5, #204	; 0xcc
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   18342:	f003 0309 	and.w	r3, r3, #9
   18346:	f3bf 8f5b 	dmb	ish
   1834a:	e852 1f00 	ldrex	r1, [r2]
   1834e:	e842 3400 	strex	r4, r3, [r2]
   18352:	2c00      	cmp	r4, #0
   18354:	d1f9      	bne.n	1834a <bt_init+0x42>
   18356:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
   1835a:	f003 ff6b 	bl	1c234 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
   1835e:	aa02      	add	r2, sp, #8
   18360:	2100      	movs	r1, #0
   18362:	f241 0003 	movw	r0, #4099	; 0x1003
   18366:	f7ff fb4d 	bl	17a04 <bt_hci_cmd_send_sync>
	if (err) {
   1836a:	4604      	mov	r4, r0
   1836c:	2800      	cmp	r0, #0
   1836e:	d14f      	bne.n	18410 <bt_init+0x108>
	read_local_features_complete(rsp);
   18370:	9b02      	ldr	r3, [sp, #8]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
   18372:	4ea5      	ldr	r6, [pc, #660]	; (18608 <bt_init+0x300>)
	struct bt_hci_rp_read_local_features *rp = (void *)buf->data;
   18374:	68da      	ldr	r2, [r3, #12]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
   18376:	f8d2 0001 	ldr.w	r0, [r2, #1]
   1837a:	f8d2 1005 	ldr.w	r1, [r2, #5]
   1837e:	c603      	stmia	r6!, {r0, r1}
	net_buf_unref(rsp);
   18380:	4618      	mov	r0, r3
   18382:	f003 ff57 	bl	1c234 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
   18386:	4621      	mov	r1, r4
   18388:	aa02      	add	r2, sp, #8
   1838a:	f241 0001 	movw	r0, #4097	; 0x1001
   1838e:	f7ff fb39 	bl	17a04 <bt_hci_cmd_send_sync>
	if (err) {
   18392:	4604      	mov	r4, r0
   18394:	2800      	cmp	r0, #0
   18396:	d13b      	bne.n	18410 <bt_init+0x108>
	read_local_ver_complete(rsp);
   18398:	9802      	ldr	r0, [sp, #8]
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
   1839a:	68c3      	ldr	r3, [r0, #12]
	bt_dev.hci_version = rp->hci_version;
   1839c:	785a      	ldrb	r2, [r3, #1]
   1839e:	f885 2068 	strb.w	r2, [r5, #104]	; 0x68
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
   183a2:	885a      	ldrh	r2, [r3, #2]
   183a4:	f8a5 206a 	strh.w	r2, [r5, #106]	; 0x6a
	bt_dev.lmp_version = rp->lmp_version;
   183a8:	791a      	ldrb	r2, [r3, #4]
   183aa:	f885 2069 	strb.w	r2, [r5, #105]	; 0x69
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
   183ae:	f8b3 2007 	ldrh.w	r2, [r3, #7]
   183b2:	f8a5 206c 	strh.w	r2, [r5, #108]	; 0x6c
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
   183b6:	f8b3 3005 	ldrh.w	r3, [r3, #5]
   183ba:	f8a5 306e 	strh.w	r3, [r5, #110]	; 0x6e
	net_buf_unref(rsp);
   183be:	f003 ff39 	bl	1c234 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
   183c2:	4621      	mov	r1, r4
   183c4:	aa02      	add	r2, sp, #8
   183c6:	f241 0002 	movw	r0, #4098	; 0x1002
   183ca:	f7ff fb1b 	bl	17a04 <bt_hci_cmd_send_sync>
	if (err) {
   183ce:	4604      	mov	r4, r0
   183d0:	b9f0      	cbnz	r0, 18410 <bt_init+0x108>
	read_supported_commands_complete(rsp);
   183d2:	9f02      	ldr	r7, [sp, #8]
	struct bt_hci_rp_read_supported_commands *rp = (void *)buf->data;
   183d4:	68fa      	ldr	r2, [r7, #12]
	memcpy(bt_dev.supported_commands, rp->commands,
   183d6:	1c53      	adds	r3, r2, #1
   183d8:	3241      	adds	r2, #65	; 0x41
   183da:	6818      	ldr	r0, [r3, #0]
   183dc:	6859      	ldr	r1, [r3, #4]
   183de:	4634      	mov	r4, r6
   183e0:	c403      	stmia	r4!, {r0, r1}
   183e2:	3308      	adds	r3, #8
   183e4:	4293      	cmp	r3, r2
   183e6:	4626      	mov	r6, r4
   183e8:	d1f7      	bne.n	183da <bt_init+0xd2>
	net_buf_unref(rsp);
   183ea:	4638      	mov	r0, r7
   183ec:	f003 ff22 	bl	1c234 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
   183f0:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
   183f4:	065e      	lsls	r6, r3, #25
   183f6:	d40e      	bmi.n	18416 <bt_init+0x10e>
		LOG_ERR("Non-LE capable controller detected!");
   183f8:	4b84      	ldr	r3, [pc, #528]	; (1860c <bt_init+0x304>)
   183fa:	9307      	str	r3, [sp, #28]
   183fc:	4884      	ldr	r0, [pc, #528]	; (18610 <bt_init+0x308>)
   183fe:	2302      	movs	r3, #2
   18400:	aa06      	add	r2, sp, #24
   18402:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -ENODEV;
   18406:	f06f 0412 	mvn.w	r4, #18
		LOG_ERR("Non-LE capable controller detected!");
   1840a:	9306      	str	r3, [sp, #24]
   1840c:	f00a fa5f 	bl	228ce <z_log_msg_static_create.constprop.0>
}
   18410:	4620      	mov	r0, r4
   18412:	b009      	add	sp, #36	; 0x24
   18414:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
   18416:	aa02      	add	r2, sp, #8
   18418:	2100      	movs	r1, #0
   1841a:	f242 0003 	movw	r0, #8195	; 0x2003
   1841e:	f7ff faf1 	bl	17a04 <bt_hci_cmd_send_sync>
	if (err) {
   18422:	4604      	mov	r4, r0
   18424:	2800      	cmp	r0, #0
   18426:	d1f3      	bne.n	18410 <bt_init+0x108>
	read_le_features_complete(rsp);
   18428:	9b02      	ldr	r3, [sp, #8]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
   1842a:	4e7a      	ldr	r6, [pc, #488]	; (18614 <bt_init+0x30c>)
	struct bt_hci_rp_le_read_local_features *rp = (void *)buf->data;
   1842c:	68da      	ldr	r2, [r3, #12]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
   1842e:	f8d2 0001 	ldr.w	r0, [r2, #1]
   18432:	f8d2 1005 	ldr.w	r1, [r2, #5]
   18436:	c603      	stmia	r6!, {r0, r1}
	net_buf_unref(rsp);
   18438:	4618      	mov	r0, r3
   1843a:	f003 fefb 	bl	1c234 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
   1843e:	4621      	mov	r1, r4
   18440:	aa02      	add	r2, sp, #8
   18442:	f242 0002 	movw	r0, #8194	; 0x2002
   18446:	f7ff fadd 	bl	17a04 <bt_hci_cmd_send_sync>
		if (err) {
   1844a:	4604      	mov	r4, r0
   1844c:	2800      	cmp	r0, #0
   1844e:	d1df      	bne.n	18410 <bt_init+0x108>
		le_read_buffer_size_complete(rsp);
   18450:	9c02      	ldr	r4, [sp, #8]
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
   18452:	68e3      	ldr	r3, [r4, #12]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
   18454:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   18458:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
   1845c:	b291      	uxth	r1, r2
	if (!bt_dev.le.acl_mtu) {
   1845e:	b129      	cbz	r1, 1846c <bt_init+0x164>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
   18460:	78da      	ldrb	r2, [r3, #3]
	return z_impl_k_sem_init(sem, initial_count, limit);
   18462:	4611      	mov	r1, r2
   18464:	f106 0028 	add.w	r0, r6, #40	; 0x28
   18468:	f00c fa13 	bl	24892 <z_impl_k_sem_init>
		net_buf_unref(rsp);
   1846c:	4620      	mov	r0, r4
   1846e:	f003 fee1 	bl	1c234 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   18472:	f895 6074 	ldrb.w	r6, [r5, #116]	; 0x74
   18476:	f016 0620 	ands.w	r6, r6, #32
   1847a:	d118      	bne.n	184ae <bt_init+0x1a6>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
   1847c:	2102      	movs	r1, #2
   1847e:	f640 406d 	movw	r0, #3181	; 0xc6d
   18482:	f7ff fa85 	bl	17990 <bt_hci_cmd_create>
		if (!buf) {
   18486:	4604      	mov	r4, r0
   18488:	2800      	cmp	r0, #0
   1848a:	f000 80a9 	beq.w	185e0 <bt_init+0x2d8>
	return net_buf_simple_add(&buf->b, len);
   1848e:	2102      	movs	r1, #2
   18490:	300c      	adds	r0, #12
   18492:	f00b fd33 	bl	23efc <net_buf_simple_add>
		cp_le->le = 0x01;
   18496:	2301      	movs	r3, #1
   18498:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
   1849a:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
   1849c:	4621      	mov	r1, r4
   1849e:	4632      	mov	r2, r6
   184a0:	f640 406d 	movw	r0, #3181	; 0xc6d
   184a4:	f7ff faae 	bl	17a04 <bt_hci_cmd_send_sync>
		if (err) {
   184a8:	4604      	mov	r4, r0
   184aa:	2800      	cmp	r0, #0
   184ac:	d1b0      	bne.n	18410 <bt_init+0x108>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
   184ae:	f895 3094 	ldrb.w	r3, [r5, #148]	; 0x94
   184b2:	071c      	lsls	r4, r3, #28
   184b4:	d512      	bpl.n	184dc <bt_init+0x1d4>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
   184b6:	aa02      	add	r2, sp, #8
   184b8:	2100      	movs	r1, #0
   184ba:	f242 001c 	movw	r0, #8220	; 0x201c
   184be:	f7ff faa1 	bl	17a04 <bt_hci_cmd_send_sync>
		if (err) {
   184c2:	4604      	mov	r4, r0
   184c4:	2800      	cmp	r0, #0
   184c6:	d1a3      	bne.n	18410 <bt_init+0x108>
		le_read_supp_states_complete(rsp);
   184c8:	9802      	ldr	r0, [sp, #8]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   184ca:	68c3      	ldr	r3, [r0, #12]
   184cc:	f8d3 2001 	ldr.w	r2, [r3, #1]
   184d0:	f8d3 3005 	ldr.w	r3, [r3, #5]
	bt_dev.le.states = sys_get_le64(rp->le_states);
   184d4:	e9c5 2336 	strd	r2, r3, [r5, #216]	; 0xd8
		net_buf_unref(rsp);
   184d8:	f003 feac 	bl	1c234 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
   184dc:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   184e0:	0698      	lsls	r0, r3, #26
   184e2:	d523      	bpl.n	1852c <bt_init+0x224>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   184e4:	a901      	add	r1, sp, #4
   184e6:	f10d 0002 	add.w	r0, sp, #2
   184ea:	f7ff fb07 	bl	17afc <hci_le_read_max_data_len>
		if (err) {
   184ee:	4604      	mov	r4, r0
   184f0:	2800      	cmp	r0, #0
   184f2:	d18d      	bne.n	18410 <bt_init+0x108>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   184f4:	2104      	movs	r1, #4
   184f6:	f242 0024 	movw	r0, #8228	; 0x2024
   184fa:	f7ff fa49 	bl	17990 <bt_hci_cmd_create>
		if (!buf) {
   184fe:	4606      	mov	r6, r0
   18500:	2800      	cmp	r0, #0
   18502:	d06d      	beq.n	185e0 <bt_init+0x2d8>
   18504:	2104      	movs	r1, #4
   18506:	300c      	adds	r0, #12
   18508:	f00b fcf8 	bl	23efc <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
   1850c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   18510:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
   18512:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   18516:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   18518:	4622      	mov	r2, r4
   1851a:	4631      	mov	r1, r6
   1851c:	f242 0024 	movw	r0, #8228	; 0x2024
   18520:	f7ff fa70 	bl	17a04 <bt_hci_cmd_send_sync>
		if (err) {
   18524:	4604      	mov	r4, r0
   18526:	2800      	cmp	r0, #0
   18528:	f47f af72 	bne.w	18410 <bt_init+0x108>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
   1852c:	2108      	movs	r1, #8
   1852e:	f242 0001 	movw	r0, #8193	; 0x2001
   18532:	f7ff fa2d 	bl	17990 <bt_hci_cmd_create>
	if (!buf) {
   18536:	4604      	mov	r4, r0
   18538:	2800      	cmp	r0, #0
   1853a:	d051      	beq.n	185e0 <bt_init+0x2d8>
   1853c:	2108      	movs	r1, #8
   1853e:	300c      	adds	r0, #12
   18540:	f00b fcdc 	bl	23efc <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
   18544:	f895 20d0 	ldrb.w	r2, [r5, #208]	; 0xd0
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
   18548:	f012 0f02 	tst.w	r2, #2
   1854c:	bf14      	ite	ne
   1854e:	232f      	movne	r3, #47	; 0x2f
   18550:	230f      	moveq	r3, #15
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
   18552:	0691      	lsls	r1, r2, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   18554:	f895 20d1 	ldrb.w	r2, [r5, #209]	; 0xd1
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
   18558:	bf48      	it	mi
   1855a:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   1855e:	f012 0f09 	tst.w	r2, #9
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
   18562:	bf18      	it	ne
   18564:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
	dst[0] = val;
   18568:	2200      	movs	r2, #0
   1856a:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   1856c:	f3c3 2307 	ubfx	r3, r3, #8, #8
   18570:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
   18572:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
   18574:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
   18576:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
   18578:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
   1857a:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
   1857c:	71c2      	strb	r2, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
   1857e:	4621      	mov	r1, r4
   18580:	f242 0001 	movw	r0, #8193	; 0x2001
   18584:	f7ff fa3e 	bl	17a04 <bt_hci_cmd_send_sync>
	if (err) {
   18588:	4604      	mov	r4, r0
   1858a:	2800      	cmp	r0, #0
   1858c:	f47f af40 	bne.w	18410 <bt_init+0x108>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   18590:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
	if (bt_dev.le.acl_mtu) {
   18594:	f8b5 10fc 	ldrh.w	r1, [r5, #252]	; 0xfc
	if (BT_FEAT_BREDR(bt_dev.features)) {
   18598:	069a      	lsls	r2, r3, #26
   1859a:	d424      	bmi.n	185e6 <bt_init+0x2de>
	if (bt_dev.le.acl_mtu) {
   1859c:	b9c9      	cbnz	r1, 185d2 <bt_init+0x2ca>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
   1859e:	aa02      	add	r2, sp, #8
   185a0:	f241 0005 	movw	r0, #4101	; 0x1005
   185a4:	f7ff fa2e 	bl	17a04 <bt_hci_cmd_send_sync>
	if (err) {
   185a8:	4604      	mov	r4, r0
   185aa:	2800      	cmp	r0, #0
   185ac:	f47f af30 	bne.w	18410 <bt_init+0x108>
	if (bt_dev.le.acl_mtu) {
   185b0:	f8b5 30fc 	ldrh.w	r3, [r5, #252]	; 0xfc
	read_buffer_size_complete(rsp);
   185b4:	9c02      	ldr	r4, [sp, #8]
	if (bt_dev.le.acl_mtu) {
   185b6:	b94b      	cbnz	r3, 185cc <bt_init+0x2c4>
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
   185b8:	68e3      	ldr	r3, [r4, #12]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
   185ba:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   185be:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
   185c2:	889a      	ldrh	r2, [r3, #4]
   185c4:	4814      	ldr	r0, [pc, #80]	; (18618 <bt_init+0x310>)
   185c6:	4611      	mov	r1, r2
   185c8:	f00c f963 	bl	24892 <z_impl_k_sem_init>
	net_buf_unref(rsp);
   185cc:	4620      	mov	r0, r4
   185ce:	f003 fe31 	bl	1c234 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
   185d2:	2108      	movs	r1, #8
   185d4:	f640 4001 	movw	r0, #3073	; 0xc01
   185d8:	f7ff f9da 	bl	17990 <bt_hci_cmd_create>
	if (!buf) {
   185dc:	4604      	mov	r4, r0
   185de:	b9f8      	cbnz	r0, 18620 <bt_init+0x318>
		return -ENOBUFS;
   185e0:	f06f 0468 	mvn.w	r4, #104	; 0x68
   185e4:	e714      	b.n	18410 <bt_init+0x108>
	else if (!bt_dev.le.acl_mtu) {
   185e6:	2900      	cmp	r1, #0
   185e8:	d1f3      	bne.n	185d2 <bt_init+0x2ca>
		LOG_ERR("ACL BR/EDR buffers not initialized");
   185ea:	4b0c      	ldr	r3, [pc, #48]	; (1861c <bt_init+0x314>)
   185ec:	9307      	str	r3, [sp, #28]
   185ee:	4808      	ldr	r0, [pc, #32]	; (18610 <bt_init+0x308>)
   185f0:	2302      	movs	r3, #2
   185f2:	aa06      	add	r2, sp, #24
   185f4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   185f8:	9306      	str	r3, [sp, #24]
		return -EIO;
   185fa:	f06f 0404 	mvn.w	r4, #4
		LOG_ERR("ACL BR/EDR buffers not initialized");
   185fe:	f00a f966 	bl	228ce <z_log_msg_static_create.constprop.0>
	if (err) {
   18602:	e705      	b.n	18410 <bt_init+0x108>
   18604:	20000388 	.word	0x20000388
   18608:	200003f8 	.word	0x200003f8
   1860c:	00026d07 	.word	0x00026d07
   18610:	000255a4 	.word	0x000255a4
   18614:	20000458 	.word	0x20000458
   18618:	20000488 	.word	0x20000488
   1861c:	00026d2b 	.word	0x00026d2b
   18620:	2108      	movs	r1, #8
   18622:	300c      	adds	r0, #12
   18624:	f00b fc6a 	bl	23efc <net_buf_simple_add>
	dst[0] = val;
   18628:	2310      	movs	r3, #16
   1862a:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   1862c:	2388      	movs	r3, #136	; 0x88
	dst[0] = val;
   1862e:	2200      	movs	r2, #0
	dst[1] = val >> 8;
   18630:	7043      	strb	r3, [r0, #1]
   18632:	2602      	movs	r6, #2
   18634:	2320      	movs	r3, #32
	dst[0] = val;
   18636:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
   18638:	70c6      	strb	r6, [r0, #3]
	dst[0] = val;
   1863a:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
   1863c:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
   1863e:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
   18640:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
   18642:	4621      	mov	r1, r4
   18644:	f640 4001 	movw	r0, #3073	; 0xc01
   18648:	f7ff f9dc 	bl	17a04 <bt_hci_cmd_send_sync>
	if (err) {
   1864c:	4604      	mov	r4, r0
   1864e:	2800      	cmp	r0, #0
   18650:	f47f aede 	bne.w	18410 <bt_init+0x108>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
   18654:	4601      	mov	r1, r0
   18656:	aa01      	add	r2, sp, #4
   18658:	f64f 4001 	movw	r0, #64513	; 0xfc01
   1865c:	f7ff f9d2 	bl	17a04 <bt_hci_cmd_send_sync>
	if (err) {
   18660:	4604      	mov	r4, r0
   18662:	b1b8      	cbz	r0, 18694 <bt_init+0x38c>
		LOG_WRN("Vendor HCI extensions not available");
   18664:	4b20      	ldr	r3, [pc, #128]	; (186e8 <bt_init+0x3e0>)
			LOG_WRN("Failed to read supported vendor features");
   18666:	4821      	ldr	r0, [pc, #132]	; (186ec <bt_init+0x3e4>)
   18668:	aa06      	add	r2, sp, #24
   1866a:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1866e:	e9cd 6306 	strd	r6, r3, [sp, #24]
   18672:	f00a f92c 	bl	228ce <z_log_msg_static_create.constprop.0>
	err = bt_id_init();
   18676:	f000 fb1b 	bl	18cb0 <bt_id_init>
	if (err) {
   1867a:	4604      	mov	r4, r0
   1867c:	2800      	cmp	r0, #0
   1867e:	f47f aec7 	bne.w	18410 <bt_init+0x108>
		err = bt_conn_init();
   18682:	f001 fc87 	bl	19f94 <bt_conn_init>
		if (err) {
   18686:	4604      	mov	r4, r0
   18688:	2800      	cmp	r0, #0
   1868a:	f47f aec1 	bne.w	18410 <bt_init+0x108>
	bt_finalize_init();
   1868e:	f7ff fe35 	bl	182fc <bt_finalize_init>
	return 0;
   18692:	e6bd      	b.n	18410 <bt_init+0x108>
	net_buf_unref(rsp);
   18694:	9801      	ldr	r0, [sp, #4]
   18696:	f003 fdcd 	bl	1c234 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
   1869a:	4621      	mov	r1, r4
   1869c:	aa01      	add	r2, sp, #4
   1869e:	f64f 4002 	movw	r0, #64514	; 0xfc02
   186a2:	f7ff f9af 	bl	17a04 <bt_hci_cmd_send_sync>
	if (err) {
   186a6:	4604      	mov	r4, r0
   186a8:	b108      	cbz	r0, 186ae <bt_init+0x3a6>
		LOG_WRN("Failed to read supported vendor commands");
   186aa:	4b11      	ldr	r3, [pc, #68]	; (186f0 <bt_init+0x3e8>)
   186ac:	e7db      	b.n	18666 <bt_init+0x35e>
	rp.cmds = (void *)rsp->data;
   186ae:	9801      	ldr	r0, [sp, #4]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
   186b0:	68c3      	ldr	r3, [r0, #12]
   186b2:	f8b3 3001 	ldrh.w	r3, [r3, #1]
   186b6:	f8a5 30b9 	strh.w	r3, [r5, #185]	; 0xb9
	net_buf_unref(rsp);
   186ba:	f003 fdbb 	bl	1c234 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
   186be:	f895 30b9 	ldrb.w	r3, [r5, #185]	; 0xb9
   186c2:	075b      	lsls	r3, r3, #29
   186c4:	d5d7      	bpl.n	18676 <bt_init+0x36e>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
   186c6:	aa01      	add	r2, sp, #4
   186c8:	4621      	mov	r1, r4
   186ca:	f64f 4003 	movw	r0, #64515	; 0xfc03
   186ce:	f7ff f999 	bl	17a04 <bt_hci_cmd_send_sync>
		if (err) {
   186d2:	b108      	cbz	r0, 186d8 <bt_init+0x3d0>
			LOG_WRN("Failed to read supported vendor features");
   186d4:	4b07      	ldr	r3, [pc, #28]	; (186f4 <bt_init+0x3ec>)
   186d6:	e7c6      	b.n	18666 <bt_init+0x35e>
		rp.feat = (void *)rsp->data;
   186d8:	9801      	ldr	r0, [sp, #4]
		memcpy(bt_dev.vs_features, rp.feat->features,
   186da:	68c3      	ldr	r3, [r0, #12]
   186dc:	785b      	ldrb	r3, [r3, #1]
   186de:	f885 30b8 	strb.w	r3, [r5, #184]	; 0xb8
		net_buf_unref(rsp);
   186e2:	f003 fda7 	bl	1c234 <net_buf_unref>
   186e6:	e7c6      	b.n	18676 <bt_init+0x36e>
   186e8:	00026d4e 	.word	0x00026d4e
   186ec:	000255a4 	.word	0x000255a4
   186f0:	00026d72 	.word	0x00026d72
   186f4:	00026d9b 	.word	0x00026d9b

000186f8 <init_work>:
{
   186f8:	b510      	push	{r4, lr}
	err = bt_init();
   186fa:	f7ff fe05 	bl	18308 <bt_init>
	if (ready_cb) {
   186fe:	4b03      	ldr	r3, [pc, #12]	; (1870c <init_work+0x14>)
   18700:	681b      	ldr	r3, [r3, #0]
   18702:	b113      	cbz	r3, 1870a <init_work+0x12>
}
   18704:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
   18708:	4718      	bx	r3
}
   1870a:	bd10      	pop	{r4, pc}
   1870c:	20004f3c 	.word	0x20004f3c

00018710 <bt_is_ready>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   18710:	4b04      	ldr	r3, [pc, #16]	; (18724 <bt_is_ready+0x14>)
   18712:	f3bf 8f5b 	dmb	ish
   18716:	6818      	ldr	r0, [r3, #0]
   18718:	f3bf 8f5b 	dmb	ish
}

bool bt_is_ready(void)
{
	return atomic_test_bit(bt_dev.flags, BT_DEV_READY);
}
   1871c:	f3c0 0080 	ubfx	r0, r0, #2, #1
   18720:	4770      	bx	lr
   18722:	bf00      	nop
   18724:	20000454 	.word	0x20000454

00018728 <bt_set_name>:
#else
BUILD_ASSERT(DEVICE_NAME_LEN < 248);
#endif

int bt_set_name(const char *name)
{
   18728:	b538      	push	{r3, r4, r5, lr}
   1872a:	4605      	mov	r5, r0
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	size_t len = strlen(name);
   1872c:	f7f4 fa20 	bl	cb70 <strlen>
	int err;

	if (len > CONFIG_BT_DEVICE_NAME_MAX) {
   18730:	281c      	cmp	r0, #28
	size_t len = strlen(name);
   18732:	4604      	mov	r4, r0
	if (len > CONFIG_BT_DEVICE_NAME_MAX) {
   18734:	d810      	bhi.n	18758 <bt_set_name+0x30>
		return -ENOMEM;
	}

	if (!strcmp(bt_dev.name, name)) {
   18736:	480a      	ldr	r0, [pc, #40]	; (18760 <bt_set_name+0x38>)
   18738:	4629      	mov	r1, r5
   1873a:	f7f4 fa0f 	bl	cb5c <strcmp>
   1873e:	b148      	cbz	r0, 18754 <bt_set_name+0x2c>
		return 0;
	}

	strncpy(bt_dev.name, name, len);
   18740:	4622      	mov	r2, r4
   18742:	4807      	ldr	r0, [pc, #28]	; (18760 <bt_set_name+0x38>)
   18744:	4629      	mov	r1, r5
   18746:	f00c fd5c 	bl	25202 <strncpy>
	bt_dev.name[len] = '\0';
   1874a:	4b06      	ldr	r3, [pc, #24]	; (18764 <bt_set_name+0x3c>)
   1874c:	4423      	add	r3, r4
   1874e:	2200      	movs	r2, #0
   18750:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
		return 0;
   18754:	2000      	movs	r0, #0

	return 0;
#else
	return -ENOMEM;
#endif
}
   18756:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOMEM;
   18758:	f06f 000b 	mvn.w	r0, #11
   1875c:	e7fb      	b.n	18756 <bt_set_name+0x2e>
   1875e:	bf00      	nop
   18760:	200004e0 	.word	0x200004e0
   18764:	20000388 	.word	0x20000388

00018768 <bt_enable>:
{
   18768:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!bt_dev.drv) {
   1876a:	4e44      	ldr	r6, [pc, #272]	; (1887c <bt_enable+0x114>)
{
   1876c:	b08f      	sub	sp, #60	; 0x3c
	if (!bt_dev.drv) {
   1876e:	f8d6 3154 	ldr.w	r3, [r6, #340]	; 0x154
{
   18772:	af08      	add	r7, sp, #32
   18774:	4605      	mov	r5, r0
	if (!bt_dev.drv) {
   18776:	b983      	cbnz	r3, 1879a <bt_enable+0x32>
		LOG_ERR("No HCI driver registered");
   18778:	4b41      	ldr	r3, [pc, #260]	; (18880 <bt_enable+0x118>)
   1877a:	617b      	str	r3, [r7, #20]
   1877c:	2302      	movs	r3, #2
   1877e:	4841      	ldr	r0, [pc, #260]	; (18884 <bt_enable+0x11c>)
   18780:	613b      	str	r3, [r7, #16]
   18782:	f107 0210 	add.w	r2, r7, #16
   18786:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -ENODEV;
   1878a:	f06f 0412 	mvn.w	r4, #18
		LOG_ERR("No HCI driver registered");
   1878e:	f00a f89e 	bl	228ce <z_log_msg_static_create.constprop.0>
}
   18792:	4620      	mov	r0, r4
   18794:	371c      	adds	r7, #28
   18796:	46bd      	mov	sp, r7
   18798:	bdf0      	pop	{r4, r5, r6, r7, pc}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1879a:	f06f 0102 	mvn.w	r1, #2
   1879e:	f106 00cc 	add.w	r0, r6, #204	; 0xcc
   187a2:	f00a f897 	bl	228d4 <atomic_and.isra.0>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   187a6:	2101      	movs	r1, #1
   187a8:	f00a f876 	bl	22898 <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   187ac:	07c3      	lsls	r3, r0, #31
   187ae:	d462      	bmi.n	18876 <bt_enable+0x10e>
		err = bt_set_name(CONFIG_BT_DEVICE_NAME);
   187b0:	4835      	ldr	r0, [pc, #212]	; (18888 <bt_enable+0x120>)
   187b2:	f7ff ffb9 	bl	18728 <bt_set_name>
		if (err) {
   187b6:	b170      	cbz	r0, 187d6 <bt_enable+0x6e>
			LOG_WRN("Failed to set device name (%d)", err);
   187b8:	466c      	mov	r4, sp
   187ba:	4622      	mov	r2, r4
   187bc:	b088      	sub	sp, #32
   187be:	4b33      	ldr	r3, [pc, #204]	; (1888c <bt_enable+0x124>)
   187c0:	e9c4 3005 	strd	r3, r0, [r4, #20]
   187c4:	2303      	movs	r3, #3
   187c6:	f842 3f10 	str.w	r3, [r2, #16]!
   187ca:	482e      	ldr	r0, [pc, #184]	; (18884 <bt_enable+0x11c>)
   187cc:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   187d0:	f00a f87d 	bl	228ce <z_log_msg_static_create.constprop.0>
   187d4:	46a5      	mov	sp, r4
	ready_cb = cb;
   187d6:	4b2e      	ldr	r3, [pc, #184]	; (18890 <bt_enable+0x128>)
   187d8:	601d      	str	r5, [r3, #0]
   187da:	2201      	movs	r2, #1
   187dc:	4611      	mov	r1, r2
   187de:	482d      	ldr	r0, [pc, #180]	; (18894 <bt_enable+0x12c>)
   187e0:	f00c f857 	bl	24892 <z_impl_k_sem_init>
	z_impl_k_queue_init(queue);
   187e4:	482c      	ldr	r0, [pc, #176]	; (18898 <bt_enable+0x130>)
   187e6:	f00c f833 	bl	24850 <z_impl_k_queue_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   187ea:	2200      	movs	r2, #0
   187ec:	2300      	movs	r3, #0
   187ee:	e9cd 2306 	strd	r2, r3, [sp, #24]
   187f2:	2400      	movs	r4, #0
   187f4:	f06f 0308 	mvn.w	r3, #8
   187f8:	e9cd 3403 	strd	r3, r4, [sp, #12]
   187fc:	e9cd 4401 	strd	r4, r4, [sp, #4]
   18800:	4b26      	ldr	r3, [pc, #152]	; (1889c <bt_enable+0x134>)
   18802:	4927      	ldr	r1, [pc, #156]	; (188a0 <bt_enable+0x138>)
   18804:	9400      	str	r4, [sp, #0]
   18806:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   1880a:	4826      	ldr	r0, [pc, #152]	; (188a4 <bt_enable+0x13c>)
   1880c:	f006 ff0e 	bl	1f62c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   18810:	4925      	ldr	r1, [pc, #148]	; (188a8 <bt_enable+0x140>)
   18812:	4824      	ldr	r0, [pc, #144]	; (188a4 <bt_enable+0x13c>)
   18814:	f00b ff94 	bl	24740 <z_impl_k_thread_name_set>
	k_work_queue_init(&bt_workq);
   18818:	4824      	ldr	r0, [pc, #144]	; (188ac <bt_enable+0x144>)
   1881a:	f00c f8fa 	bl	24a12 <k_work_queue_init>
	k_work_queue_start(&bt_workq, rx_thread_stack,
   1881e:	4924      	ldr	r1, [pc, #144]	; (188b0 <bt_enable+0x148>)
   18820:	4822      	ldr	r0, [pc, #136]	; (188ac <bt_enable+0x144>)
   18822:	9400      	str	r4, [sp, #0]
   18824:	f06f 0307 	mvn.w	r3, #7
   18828:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1882c:	f007 f972 	bl	1fb14 <k_work_queue_start>
   18830:	4920      	ldr	r1, [pc, #128]	; (188b4 <bt_enable+0x14c>)
   18832:	481e      	ldr	r0, [pc, #120]	; (188ac <bt_enable+0x144>)
   18834:	f00b ff84 	bl	24740 <z_impl_k_thread_name_set>
	err = bt_dev.drv->open();
   18838:	f8d6 3154 	ldr.w	r3, [r6, #340]	; 0x154
   1883c:	68db      	ldr	r3, [r3, #12]
   1883e:	4798      	blx	r3
	if (err) {
   18840:	4604      	mov	r4, r0
   18842:	b178      	cbz	r0, 18864 <bt_enable+0xfc>
		LOG_ERR("HCI driver open failed (%d)", err);
   18844:	466d      	mov	r5, sp
   18846:	462a      	mov	r2, r5
   18848:	b088      	sub	sp, #32
   1884a:	4b1b      	ldr	r3, [pc, #108]	; (188b8 <bt_enable+0x150>)
   1884c:	e9c5 3005 	strd	r3, r0, [r5, #20]
   18850:	2303      	movs	r3, #3
   18852:	f842 3f10 	str.w	r3, [r2, #16]!
   18856:	480b      	ldr	r0, [pc, #44]	; (18884 <bt_enable+0x11c>)
   18858:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1885c:	f00a f837 	bl	228ce <z_log_msg_static_create.constprop.0>
   18860:	46ad      	mov	sp, r5
		return err;
   18862:	e796      	b.n	18792 <bt_enable+0x2a>
	if (!cb) {
   18864:	b91d      	cbnz	r5, 1886e <bt_enable+0x106>
		return bt_init();
   18866:	f7ff fd4f 	bl	18308 <bt_init>
   1886a:	4604      	mov	r4, r0
   1886c:	e791      	b.n	18792 <bt_enable+0x2a>
	k_work_submit(&bt_dev.init);
   1886e:	4813      	ldr	r0, [pc, #76]	; (188bc <bt_enable+0x154>)
   18870:	f007 f94a 	bl	1fb08 <k_work_submit>
	return 0;
   18874:	e78d      	b.n	18792 <bt_enable+0x2a>
		return -EALREADY;
   18876:	f06f 0477 	mvn.w	r4, #119	; 0x77
   1887a:	e78a      	b.n	18792 <bt_enable+0x2a>
   1887c:	20000388 	.word	0x20000388
   18880:	00026dc4 	.word	0x00026dc4
   18884:	000255a4 	.word	0x000255a4
   18888:	00026dfa 	.word	0x00026dfa
   1888c:	00026e10 	.word	0x00026e10
   18890:	20004f3c 	.word	0x20004f3c
   18894:	200004a0 	.word	0x200004a0
   18898:	200004c4 	.word	0x200004c4
   1889c:	00018035 	.word	0x00018035
   188a0:	20008380 	.word	0x20008380
   188a4:	20001c70 	.word	0x20001c70
   188a8:	00026e2f 	.word	0x00026e2f
   188ac:	20001d38 	.word	0x20001d38
   188b0:	20008a00 	.word	0x20008a00
   188b4:	00026e35 	.word	0x00026e35
   188b8:	00026e3b 	.word	0x00026e3b
   188bc:	20000444 	.word	0x20000444

000188c0 <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
   188c0:	4800      	ldr	r0, [pc, #0]	; (188c4 <bt_get_name+0x4>)
   188c2:	4770      	bx	lr
   188c4:	200004e0 	.word	0x200004e0

000188c8 <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
   188c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
   188ca:	4f0a      	ldr	r7, [pc, #40]	; (188f4 <id_find+0x2c>)
{
   188cc:	4606      	mov	r6, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
   188ce:	2500      	movs	r5, #0
   188d0:	79fb      	ldrb	r3, [r7, #7]
   188d2:	b2ec      	uxtb	r4, r5
   188d4:	42a3      	cmp	r3, r4
   188d6:	d802      	bhi.n	188de <id_find+0x16>
		if (bt_addr_le_eq(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
   188d8:	f06f 0001 	mvn.w	r0, #1
   188dc:	e009      	b.n	188f2 <id_find+0x2a>
		if (bt_addr_le_eq(addr, &bt_dev.id_addr[id])) {
   188de:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
   188e2:	4439      	add	r1, r7
   188e4:	4630      	mov	r0, r6
   188e6:	f00a f8a6 	bl	22a36 <bt_addr_le_eq>
   188ea:	3501      	adds	r5, #1
   188ec:	2800      	cmp	r0, #0
   188ee:	d0ef      	beq.n	188d0 <id_find+0x8>
   188f0:	4620      	mov	r0, r4
}
   188f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   188f4:	20000388 	.word	0x20000388

000188f8 <id_create.constprop.0>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
   188f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   188fa:	4604      	mov	r4, r0
{
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   188fc:	460d      	mov	r5, r1
   188fe:	b171      	cbz	r1, 1891e <id_create.constprop.0+0x26>
   18900:	4912      	ldr	r1, [pc, #72]	; (1894c <id_create.constprop.0+0x54>)
   18902:	4628      	mov	r0, r5
   18904:	f00a f897 	bl	22a36 <bt_addr_le_eq>
   18908:	b948      	cbnz	r0, 1891e <id_create.constprop.0+0x26>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
   1890a:	4811      	ldr	r0, [pc, #68]	; (18950 <id_create.constprop.0+0x58>)
   1890c:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   18910:	4629      	mov	r1, r5
   18912:	4420      	add	r0, r4
		} while (id_find(&new_addr) >= 0);

		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);

		if (addr) {
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   18914:	f00a f89c 	bl	22a50 <bt_addr_le_copy>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
	}

	return 0;
   18918:	2000      	movs	r0, #0
}
   1891a:	b003      	add	sp, #12
   1891c:	bd30      	pop	{r4, r5, pc}
			err = bt_addr_le_create_static(&new_addr);
   1891e:	4668      	mov	r0, sp
   18920:	f009 ff99 	bl	22856 <bt_addr_le_create_static>
			if (err) {
   18924:	2800      	cmp	r0, #0
   18926:	d1f8      	bne.n	1891a <id_create.constprop.0+0x22>
		} while (id_find(&new_addr) >= 0);
   18928:	4668      	mov	r0, sp
   1892a:	f7ff ffcd 	bl	188c8 <id_find>
   1892e:	2800      	cmp	r0, #0
   18930:	daf5      	bge.n	1891e <id_create.constprop.0+0x26>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
   18932:	4b07      	ldr	r3, [pc, #28]	; (18950 <id_create.constprop.0+0x58>)
   18934:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
   18938:	4418      	add	r0, r3
   1893a:	4669      	mov	r1, sp
   1893c:	f00a f888 	bl	22a50 <bt_addr_le_copy>
		if (addr) {
   18940:	2d00      	cmp	r5, #0
   18942:	d0e9      	beq.n	18918 <id_create.constprop.0+0x20>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   18944:	4601      	mov	r1, r0
   18946:	4628      	mov	r0, r5
   18948:	e7e4      	b.n	18914 <id_create.constprop.0+0x1c>
   1894a:	bf00      	nop
   1894c:	0002682b 	.word	0x0002682b
   18950:	20000388 	.word	0x20000388

00018954 <set_random_address>:
{
   18954:	b538      	push	{r3, r4, r5, lr}
	return memcmp(a, b, sizeof(*a));
   18956:	4912      	ldr	r1, [pc, #72]	; (189a0 <set_random_address+0x4c>)
   18958:	2206      	movs	r2, #6
   1895a:	4605      	mov	r5, r0
   1895c:	f00c fc23 	bl	251a6 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
   18960:	b1c8      	cbz	r0, 18996 <set_random_address+0x42>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
   18962:	2106      	movs	r1, #6
   18964:	f242 0005 	movw	r0, #8197	; 0x2005
   18968:	f7ff f812 	bl	17990 <bt_hci_cmd_create>
	if (!buf) {
   1896c:	4604      	mov	r4, r0
   1896e:	b1a0      	cbz	r0, 1899a <set_random_address+0x46>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   18970:	2206      	movs	r2, #6
   18972:	4629      	mov	r1, r5
   18974:	300c      	adds	r0, #12
   18976:	f00b fac7 	bl	23f08 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
   1897a:	2200      	movs	r2, #0
   1897c:	4621      	mov	r1, r4
   1897e:	f242 0005 	movw	r0, #8197	; 0x2005
   18982:	f7ff f83f 	bl	17a04 <bt_hci_cmd_send_sync>
	if (err) {
   18986:	b938      	cbnz	r0, 18998 <set_random_address+0x44>
	bt_addr_copy(&bt_dev.random_addr.a, addr);
   18988:	4805      	ldr	r0, [pc, #20]	; (189a0 <set_random_address+0x4c>)
   1898a:	4629      	mov	r1, r5
   1898c:	f00a f85b 	bl	22a46 <bt_addr_copy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
   18990:	2301      	movs	r3, #1
   18992:	f800 3c01 	strb.w	r3, [r0, #-1]
		return 0;
   18996:	2000      	movs	r0, #0
}
   18998:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   1899a:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1899e:	e7fb      	b.n	18998 <set_random_address+0x44>
   189a0:	200003e9 	.word	0x200003e9

000189a4 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
   189a4:	b570      	push	{r4, r5, r6, lr}
   189a6:	460d      	mov	r5, r1
   189a8:	b086      	sub	sp, #24
	int new_id, err;

	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   189aa:	4604      	mov	r4, r0
   189ac:	b920      	cbnz	r0, 189b8 <bt_id_create+0x14>
		if (id_find(addr) >= 0) {
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
   189ae:	b31d      	cbz	r5, 189f8 <bt_id_create+0x54>
			return -EINVAL;
   189b0:	f06f 0015 	mvn.w	r0, #21
	} else {
		bt_dev.id_count++;
	}

	return new_id;
}
   189b4:	b006      	add	sp, #24
   189b6:	bd70      	pop	{r4, r5, r6, pc}
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   189b8:	4921      	ldr	r1, [pc, #132]	; (18a40 <bt_id_create+0x9c>)
   189ba:	f00a f83c 	bl	22a36 <bt_addr_le_eq>
   189be:	2800      	cmp	r0, #0
   189c0:	d1f5      	bne.n	189ae <bt_id_create+0xa>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   189c2:	7823      	ldrb	r3, [r4, #0]
   189c4:	2b01      	cmp	r3, #1
   189c6:	d104      	bne.n	189d2 <bt_id_create+0x2e>
   189c8:	79a3      	ldrb	r3, [r4, #6]
   189ca:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   189ce:	2bc0      	cmp	r3, #192	; 0xc0
   189d0:	d00a      	beq.n	189e8 <bt_id_create+0x44>
			LOG_ERR("Only static random identity address supported");
   189d2:	4b1c      	ldr	r3, [pc, #112]	; (18a44 <bt_id_create+0xa0>)
   189d4:	9305      	str	r3, [sp, #20]
   189d6:	481c      	ldr	r0, [pc, #112]	; (18a48 <bt_id_create+0xa4>)
   189d8:	2302      	movs	r3, #2
   189da:	aa04      	add	r2, sp, #16
   189dc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   189e0:	9304      	str	r3, [sp, #16]
   189e2:	f00a f83c 	bl	22a5e <z_log_msg_static_create.constprop.0>
			return -EINVAL;
   189e6:	e7e3      	b.n	189b0 <bt_id_create+0xc>
		if (id_find(addr) >= 0) {
   189e8:	4620      	mov	r0, r4
   189ea:	f7ff ff6d 	bl	188c8 <id_find>
   189ee:	2800      	cmp	r0, #0
   189f0:	dbdd      	blt.n	189ae <bt_id_create+0xa>
			return -EALREADY;
   189f2:	f06f 0077 	mvn.w	r0, #119	; 0x77
   189f6:	e7dd      	b.n	189b4 <bt_id_create+0x10>
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   189f8:	4d14      	ldr	r5, [pc, #80]	; (18a4c <bt_id_create+0xa8>)
   189fa:	79eb      	ldrb	r3, [r5, #7]
   189fc:	2b01      	cmp	r3, #1
   189fe:	d01c      	beq.n	18a3a <bt_id_create+0x96>
   18a00:	f3bf 8f5b 	dmb	ish
   18a04:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
   18a08:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   18a0c:	07db      	lsls	r3, r3, #31
   18a0e:	d50b      	bpl.n	18a28 <bt_id_create+0x84>
	new_id = bt_dev.id_count;
   18a10:	79ee      	ldrb	r6, [r5, #7]
	err = id_create(new_id, addr, irk);
   18a12:	4621      	mov	r1, r4
   18a14:	4630      	mov	r0, r6
   18a16:	f7ff ff6f 	bl	188f8 <id_create.constprop.0>
	if (err) {
   18a1a:	2800      	cmp	r0, #0
   18a1c:	d1ca      	bne.n	189b4 <bt_id_create+0x10>
		bt_dev.id_count++;
   18a1e:	79eb      	ldrb	r3, [r5, #7]
   18a20:	3301      	adds	r3, #1
	new_id = bt_dev.id_count;
   18a22:	4630      	mov	r0, r6
		bt_dev.id_count++;
   18a24:	71eb      	strb	r3, [r5, #7]
	return new_id;
   18a26:	e7c5      	b.n	189b4 <bt_id_create+0x10>
		if (!(addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY))) {
   18a28:	2c00      	cmp	r4, #0
   18a2a:	d0c1      	beq.n	189b0 <bt_id_create+0xc>
   18a2c:	4904      	ldr	r1, [pc, #16]	; (18a40 <bt_id_create+0x9c>)
   18a2e:	4620      	mov	r0, r4
   18a30:	f00a f801 	bl	22a36 <bt_addr_le_eq>
   18a34:	2800      	cmp	r0, #0
   18a36:	d0eb      	beq.n	18a10 <bt_id_create+0x6c>
   18a38:	e7ba      	b.n	189b0 <bt_id_create+0xc>
		return -ENOMEM;
   18a3a:	f06f 000b 	mvn.w	r0, #11
   18a3e:	e7b9      	b.n	189b4 <bt_id_create+0x10>
   18a40:	0002682b 	.word	0x0002682b
   18a44:	00026e63 	.word	0x00026e63
   18a48:	000255ac 	.word	0x000255ac
   18a4c:	20000388 	.word	0x20000388

00018a50 <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
   18a50:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	CHECKIF(addr == NULL) {
   18a52:	4604      	mov	r4, r0
{
   18a54:	b088      	sub	sp, #32
	CHECKIF(addr == NULL) {
   18a56:	b960      	cbnz	r0, 18a72 <bt_id_read_public_addr+0x22>
		LOG_WRN("Invalid input parameters");
   18a58:	4b1a      	ldr	r3, [pc, #104]	; (18ac4 <bt_id_read_public_addr+0x74>)
	}

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
	if (err) {
		LOG_WRN("Failed to read public address");
   18a5a:	9307      	str	r3, [sp, #28]
   18a5c:	481a      	ldr	r0, [pc, #104]	; (18ac8 <bt_id_read_public_addr+0x78>)
   18a5e:	2302      	movs	r3, #2
   18a60:	aa06      	add	r2, sp, #24
   18a62:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   18a66:	9306      	str	r3, [sp, #24]
   18a68:	f009 fff9 	bl	22a5e <z_log_msg_static_create.constprop.0>
		return 0U;
   18a6c:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
   18a6e:	b008      	add	sp, #32
   18a70:	bd70      	pop	{r4, r5, r6, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   18a72:	aa01      	add	r2, sp, #4
   18a74:	2100      	movs	r1, #0
   18a76:	f241 0009 	movw	r0, #4105	; 0x1009
   18a7a:	f7fe ffc3 	bl	17a04 <bt_hci_cmd_send_sync>
	if (err) {
   18a7e:	4606      	mov	r6, r0
   18a80:	b108      	cbz	r0, 18a86 <bt_id_read_public_addr+0x36>
		LOG_WRN("Failed to read public address");
   18a82:	4b12      	ldr	r3, [pc, #72]	; (18acc <bt_id_read_public_addr+0x7c>)
   18a84:	e7e9      	b.n	18a5a <bt_id_read_public_addr+0xa>
	rp = (void *)rsp->data;
   18a86:	9b01      	ldr	r3, [sp, #4]
   18a88:	4911      	ldr	r1, [pc, #68]	; (18ad0 <bt_id_read_public_addr+0x80>)
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   18a8a:	68dd      	ldr	r5, [r3, #12]
   18a8c:	3501      	adds	r5, #1
   18a8e:	2206      	movs	r2, #6
   18a90:	4628      	mov	r0, r5
   18a92:	f00c fb88 	bl	251a6 <memcmp>
   18a96:	b918      	cbnz	r0, 18aa0 <bt_id_read_public_addr+0x50>
		net_buf_unref(rsp);
   18a98:	9801      	ldr	r0, [sp, #4]
   18a9a:	f003 fbcb 	bl	1c234 <net_buf_unref>
		return 0U;
   18a9e:	e7e5      	b.n	18a6c <bt_id_read_public_addr+0x1c>
   18aa0:	490c      	ldr	r1, [pc, #48]	; (18ad4 <bt_id_read_public_addr+0x84>)
   18aa2:	2206      	movs	r2, #6
   18aa4:	4628      	mov	r0, r5
   18aa6:	f00c fb7e 	bl	251a6 <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   18aaa:	2800      	cmp	r0, #0
   18aac:	d0f4      	beq.n	18a98 <bt_id_read_public_addr+0x48>
	bt_addr_copy(&addr->a, &rp->bdaddr);
   18aae:	4629      	mov	r1, r5
   18ab0:	1c60      	adds	r0, r4, #1
   18ab2:	f009 ffc8 	bl	22a46 <bt_addr_copy>
	net_buf_unref(rsp);
   18ab6:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
   18ab8:	7026      	strb	r6, [r4, #0]
	net_buf_unref(rsp);
   18aba:	f003 fbbb 	bl	1c234 <net_buf_unref>
	return 1U;
   18abe:	2001      	movs	r0, #1
   18ac0:	e7d5      	b.n	18a6e <bt_id_read_public_addr+0x1e>
   18ac2:	bf00      	nop
   18ac4:	00026e91 	.word	0x00026e91
   18ac8:	000255ac 	.word	0x000255ac
   18acc:	00026eaa 	.word	0x00026eaa
   18ad0:	00026838 	.word	0x00026838
   18ad4:	00026832 	.word	0x00026832

00018ad8 <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
   18ad8:	b507      	push	{r0, r1, r2, lr}
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
   18ada:	4668      	mov	r0, sp
   18adc:	f7ff ffb8 	bl	18a50 <bt_id_read_public_addr>
   18ae0:	4b04      	ldr	r3, [pc, #16]	; (18af4 <bt_setup_public_id_addr+0x1c>)
   18ae2:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
   18ae4:	b118      	cbz	r0, 18aee <bt_setup_public_id_addr+0x16>
		if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
			atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
		}
	}

	return id_create(BT_ID_DEFAULT, &addr, irk);
   18ae6:	4669      	mov	r1, sp
   18ae8:	2000      	movs	r0, #0
   18aea:	f7ff ff05 	bl	188f8 <id_create.constprop.0>
}
   18aee:	b003      	add	sp, #12
   18af0:	f85d fb04 	ldr.w	pc, [sp], #4
   18af4:	20000388 	.word	0x20000388

00018af8 <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
   18af8:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   18afa:	4b24      	ldr	r3, [pc, #144]	; (18b8c <bt_read_static_addr+0x94>)
   18afc:	f893 30ba 	ldrb.w	r3, [r3, #186]	; 0xba
   18b00:	07db      	lsls	r3, r3, #31
{
   18b02:	b089      	sub	sp, #36	; 0x24
   18b04:	4605      	mov	r5, r0
   18b06:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   18b08:	d40d      	bmi.n	18b26 <bt_read_static_addr+0x2e>
		LOG_WRN("Read Static Addresses command not available");
   18b0a:	4b21      	ldr	r3, [pc, #132]	; (18b90 <bt_read_static_addr+0x98>)
		return 0;
	}

	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
	if (err) {
		LOG_WRN("Failed to read static addresses");
   18b0c:	9307      	str	r3, [sp, #28]
   18b0e:	4821      	ldr	r0, [pc, #132]	; (18b94 <bt_read_static_addr+0x9c>)
   18b10:	2302      	movs	r3, #2
   18b12:	aa06      	add	r2, sp, #24
   18b14:	f44f 5184 	mov.w	r1, #4224	; 0x1080
		return 0;
   18b18:	2400      	movs	r4, #0
		LOG_WRN("Failed to read static addresses");
   18b1a:	9306      	str	r3, [sp, #24]
   18b1c:	f009 ff9f 	bl	22a5e <z_log_msg_static_create.constprop.0>
	if (!cnt) {
		LOG_WRN("No static addresses stored in controller");
	}

	return cnt;
}
   18b20:	4620      	mov	r0, r4
   18b22:	b009      	add	sp, #36	; 0x24
   18b24:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   18b26:	aa01      	add	r2, sp, #4
   18b28:	2100      	movs	r1, #0
   18b2a:	f64f 4009 	movw	r0, #64521	; 0xfc09
   18b2e:	f7fe ff69 	bl	17a04 <bt_hci_cmd_send_sync>
	if (err) {
   18b32:	4603      	mov	r3, r0
   18b34:	b108      	cbz	r0, 18b3a <bt_read_static_addr+0x42>
		LOG_WRN("Failed to read static addresses");
   18b36:	4b18      	ldr	r3, [pc, #96]	; (18b98 <bt_read_static_addr+0xa0>)
   18b38:	e7e8      	b.n	18b0c <bt_read_static_addr+0x14>
	rp = (void *)rsp->data;
   18b3a:	9801      	ldr	r0, [sp, #4]
   18b3c:	68c2      	ldr	r2, [r0, #12]
	cnt = MIN(rp->num_addrs, size);
   18b3e:	7854      	ldrb	r4, [r2, #1]
   18b40:	42b4      	cmp	r4, r6
   18b42:	bf28      	it	cs
   18b44:	4634      	movcs	r4, r6
	for (i = 0; i < cnt; i++) {
   18b46:	3202      	adds	r2, #2
		memcpy(&addrs[i], &rp->a[i], sizeof(struct bt_hci_vs_static_addr));
   18b48:	2716      	movs	r7, #22
	for (i = 0; i < cnt; i++) {
   18b4a:	429c      	cmp	r4, r3
   18b4c:	dc0e      	bgt.n	18b6c <bt_read_static_addr+0x74>
	net_buf_unref(rsp);
   18b4e:	f003 fb71 	bl	1c234 <net_buf_unref>
	if (!cnt) {
   18b52:	2c00      	cmp	r4, #0
   18b54:	d1e4      	bne.n	18b20 <bt_read_static_addr+0x28>
		LOG_WRN("No static addresses stored in controller");
   18b56:	4b11      	ldr	r3, [pc, #68]	; (18b9c <bt_read_static_addr+0xa4>)
   18b58:	9307      	str	r3, [sp, #28]
   18b5a:	480e      	ldr	r0, [pc, #56]	; (18b94 <bt_read_static_addr+0x9c>)
   18b5c:	2302      	movs	r3, #2
   18b5e:	aa06      	add	r2, sp, #24
   18b60:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   18b64:	9306      	str	r3, [sp, #24]
   18b66:	f009 ff7a 	bl	22a5e <z_log_msg_static_create.constprop.0>
   18b6a:	e7d9      	b.n	18b20 <bt_read_static_addr+0x28>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   18b6c:	4611      	mov	r1, r2
   18b6e:	fb07 5603 	mla	r6, r7, r3, r5
   18b72:	f102 0c14 	add.w	ip, r2, #20
   18b76:	f851 eb04 	ldr.w	lr, [r1], #4
   18b7a:	f846 eb04 	str.w	lr, [r6], #4
   18b7e:	4561      	cmp	r1, ip
   18b80:	d1f9      	bne.n	18b76 <bt_read_static_addr+0x7e>
   18b82:	8809      	ldrh	r1, [r1, #0]
   18b84:	8031      	strh	r1, [r6, #0]
	for (i = 0; i < cnt; i++) {
   18b86:	3301      	adds	r3, #1
   18b88:	3216      	adds	r2, #22
   18b8a:	e7de      	b.n	18b4a <bt_read_static_addr+0x52>
   18b8c:	20000388 	.word	0x20000388
   18b90:	00026ec8 	.word	0x00026ec8
   18b94:	000255ac 	.word	0x000255ac
   18b98:	00026ef4 	.word	0x00026ef4
   18b9c:	00026f14 	.word	0x00026f14

00018ba0 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
   18ba0:	b570      	push	{r4, r5, r6, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
   18ba2:	4d15      	ldr	r5, [pc, #84]	; (18bf8 <bt_setup_random_id_addr+0x58>)
   18ba4:	79ec      	ldrb	r4, [r5, #7]
{
   18ba6:	b088      	sub	sp, #32
	if (!bt_dev.id_count) {
   18ba8:	b92c      	cbnz	r4, 18bb6 <bt_setup_random_id_addr+0x16>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   18baa:	2101      	movs	r1, #1
   18bac:	a802      	add	r0, sp, #8
   18bae:	f7ff ffa3 	bl	18af8 <bt_read_static_addr>
   18bb2:	71e8      	strb	r0, [r5, #7]

		if (bt_dev.id_count) {
   18bb4:	b9c0      	cbnz	r0, 18be8 <bt_setup_random_id_addr+0x48>

	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
   18bb6:	2100      	movs	r1, #0
   18bb8:	4608      	mov	r0, r1
}
   18bba:	b008      	add	sp, #32
   18bbc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_id_create(NULL, NULL);
   18bc0:	f7ff bef0 	b.w	189a4 <bt_id_create>
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
   18bc4:	ab02      	add	r3, sp, #8
   18bc6:	fb06 3102 	mla	r1, r6, r2, r3
   18bca:	f10d 0001 	add.w	r0, sp, #1
   18bce:	f009 ff3a 	bl	22a46 <bt_addr_copy>
				addr.type = BT_ADDR_LE_RANDOM;
   18bd2:	2301      	movs	r3, #1
				err = id_create(i, &addr, irk);
   18bd4:	4669      	mov	r1, sp
   18bd6:	4610      	mov	r0, r2
				addr.type = BT_ADDR_LE_RANDOM;
   18bd8:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
   18bdc:	f7ff fe8c 	bl	188f8 <id_create.constprop.0>
				if (err) {
   18be0:	3401      	adds	r4, #1
   18be2:	b110      	cbz	r0, 18bea <bt_setup_random_id_addr+0x4a>
}
   18be4:	b008      	add	sp, #32
   18be6:	bd70      	pop	{r4, r5, r6, pc}
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
   18be8:	2616      	movs	r6, #22
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   18bea:	79eb      	ldrb	r3, [r5, #7]
   18bec:	b2e2      	uxtb	r2, r4
   18bee:	4293      	cmp	r3, r2
   18bf0:	d8e8      	bhi.n	18bc4 <bt_setup_random_id_addr+0x24>
			return 0;
   18bf2:	2000      	movs	r0, #0
   18bf4:	e7f6      	b.n	18be4 <bt_setup_random_id_addr+0x44>
   18bf6:	bf00      	nop
   18bf8:	20000388 	.word	0x20000388

00018bfc <bt_id_set_adv_own_addr>:
}
#endif /* defined(CONFIG_BT_OBSERVER) */

int bt_id_set_adv_own_addr(struct bt_le_ext_adv *adv, uint32_t options,
			   bool dir_adv, uint8_t *own_addr_type)
{
   18bfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18c00:	4690      	mov	r8, r2
   18c02:	460e      	mov	r6, r1
   18c04:	461d      	mov	r5, r3
	const bt_addr_le_t *id_addr;
	int err = 0;

	CHECKIF(adv == NULL || own_addr_type == NULL) {
   18c06:	4602      	mov	r2, r0
   18c08:	2800      	cmp	r0, #0
   18c0a:	d04b      	beq.n	18ca4 <bt_id_set_adv_own_addr+0xa8>
   18c0c:	2b00      	cmp	r3, #0
   18c0e:	d049      	beq.n	18ca4 <bt_id_set_adv_own_addr+0xa8>
	}

	/* Set which local identity address we're advertising with */
	id_addr = &bt_dev.id_addr[adv->id];

	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   18c10:	07cf      	lsls	r7, r1, #31
	id_addr = &bt_dev.id_addr[adv->id];
   18c12:	7804      	ldrb	r4, [r0, #0]
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   18c14:	d531      	bpl.n	18c7a <bt_id_set_adv_own_addr+0x7e>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   18c16:	4f25      	ldr	r7, [pc, #148]	; (18cac <bt_id_set_adv_own_addr+0xb0>)
   18c18:	f1b8 0f00 	cmp.w	r8, #0
   18c1c:	d013      	beq.n	18c46 <bt_id_set_adv_own_addr+0x4a>
   18c1e:	0688      	lsls	r0, r1, #26
   18c20:	d40a      	bmi.n	18c38 <bt_id_set_adv_own_addr+0x3c>
			 * If Static Random address is used as Identity
			 * address we need to restore it before advertising
			 * is enabled. Otherwise NRPA used for active scan
			 * could be used for advertising.
			 */
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   18c22:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   18c26:	5cfb      	ldrb	r3, [r7, r3]
   18c28:	2b01      	cmp	r3, #1
   18c2a:	d015      	beq.n	18c58 <bt_id_set_adv_own_addr+0x5c>
				if (err) {
					return err;
				}
			}

			*own_addr_type = id_addr->type;
   18c2c:	702b      	strb	r3, [r5, #0]

			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   18c2e:	06b2      	lsls	r2, r6, #26
   18c30:	d50f      	bpl.n	18c52 <bt_id_set_adv_own_addr+0x56>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
   18c32:	f043 0302 	orr.w	r3, r3, #2
   18c36:	e00b      	b.n	18c50 <bt_id_set_adv_own_addr+0x54>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   18c38:	f897 30d0 	ldrb.w	r3, [r7, #208]	; 0xd0
   18c3c:	0659      	lsls	r1, r3, #25
   18c3e:	d4f0      	bmi.n	18c22 <bt_id_set_adv_own_addr+0x26>
			return -ENOTSUP;
   18c40:	f06f 0085 	mvn.w	r0, #133	; 0x85
   18c44:	e006      	b.n	18c54 <bt_id_set_adv_own_addr+0x58>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   18c46:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   18c4a:	5cfb      	ldrb	r3, [r7, r3]
   18c4c:	2b01      	cmp	r3, #1
   18c4e:	d003      	beq.n	18c58 <bt_id_set_adv_own_addr+0x5c>
			*own_addr_type = id_addr->type;
   18c50:	702b      	strb	r3, [r5, #0]
		if (err) {
			return err;
		}
	}

	return 0;
   18c52:	2000      	movs	r0, #0
}
   18c54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   18c58:	2107      	movs	r1, #7
   18c5a:	fb01 7104 	mla	r1, r1, r4, r7
   18c5e:	3101      	adds	r1, #1
   18c60:	4610      	mov	r0, r2
   18c62:	f009 ff04 	bl	22a6e <bt_id_set_adv_random_addr>
				if (err) {
   18c66:	2800      	cmp	r0, #0
   18c68:	d1f4      	bne.n	18c54 <bt_id_set_adv_own_addr+0x58>
			*own_addr_type = id_addr->type;
   18c6a:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   18c6e:	5d3b      	ldrb	r3, [r7, r4]
   18c70:	702b      	strb	r3, [r5, #0]
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   18c72:	f1b8 0f00 	cmp.w	r8, #0
   18c76:	d0ec      	beq.n	18c52 <bt_id_set_adv_own_addr+0x56>
   18c78:	e7d9      	b.n	18c2e <bt_id_set_adv_own_addr+0x32>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
   18c7a:	074b      	lsls	r3, r1, #29
   18c7c:	d50e      	bpl.n	18c9c <bt_id_set_adv_own_addr+0xa0>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   18c7e:	4e0b      	ldr	r6, [pc, #44]	; (18cac <bt_id_set_adv_own_addr+0xb0>)
   18c80:	ebc4 07c4 	rsb	r7, r4, r4, lsl #3
   18c84:	5df3      	ldrb	r3, [r6, r7]
   18c86:	2b01      	cmp	r3, #1
   18c88:	d1e2      	bne.n	18c50 <bt_id_set_adv_own_addr+0x54>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   18c8a:	2107      	movs	r1, #7
   18c8c:	fb11 3104 	smlabb	r1, r1, r4, r3
   18c90:	4431      	add	r1, r6
   18c92:	f009 feec 	bl	22a6e <bt_id_set_adv_random_addr>
			*own_addr_type = id_addr->type;
   18c96:	5df3      	ldrb	r3, [r6, r7]
   18c98:	702b      	strb	r3, [r5, #0]
		if (err) {
   18c9a:	e7db      	b.n	18c54 <bt_id_set_adv_own_addr+0x58>
			err = bt_id_set_adv_private_addr(adv);
   18c9c:	f009 feef 	bl	22a7e <bt_id_set_adv_private_addr>
			*own_addr_type = BT_ADDR_LE_RANDOM;
   18ca0:	2301      	movs	r3, #1
   18ca2:	e7f9      	b.n	18c98 <bt_id_set_adv_own_addr+0x9c>
		return -EINVAL;
   18ca4:	f06f 0015 	mvn.w	r0, #21
   18ca8:	e7d4      	b.n	18c54 <bt_id_set_adv_own_addr+0x58>
   18caa:	bf00      	nop
   18cac:	20000388 	.word	0x20000388

00018cb0 <bt_id_init>:
}
#endif /* !defined(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY) */
#endif /* defined(CONFIG_BT_SMP) */

int bt_id_init(void)
{
   18cb0:	b530      	push	{r4, r5, lr}
	int err;

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   18cb2:	4d13      	ldr	r5, [pc, #76]	; (18d00 <bt_id_init+0x50>)
   18cb4:	79eb      	ldrb	r3, [r5, #7]
{
   18cb6:	b087      	sub	sp, #28
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   18cb8:	b11b      	cbz	r3, 18cc2 <bt_id_init+0x12>

#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
   18cba:	2400      	movs	r4, #0
}
   18cbc:	4620      	mov	r0, r4
   18cbe:	b007      	add	sp, #28
   18cc0:	bd30      	pop	{r4, r5, pc}
		err = bt_setup_public_id_addr();
   18cc2:	f7ff ff09 	bl	18ad8 <bt_setup_public_id_addr>
		if (err) {
   18cc6:	4604      	mov	r4, r0
   18cc8:	b150      	cbz	r0, 18ce0 <bt_id_init+0x30>
			LOG_ERR("Unable to set identity address");
   18cca:	4b0e      	ldr	r3, [pc, #56]	; (18d04 <bt_id_init+0x54>)
			LOG_ERR("Unable to set random address");
   18ccc:	9305      	str	r3, [sp, #20]
   18cce:	480e      	ldr	r0, [pc, #56]	; (18d08 <bt_id_init+0x58>)
   18cd0:	2302      	movs	r3, #2
   18cd2:	aa04      	add	r2, sp, #16
   18cd4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   18cd8:	9304      	str	r3, [sp, #16]
   18cda:	f009 fec0 	bl	22a5e <z_log_msg_static_create.constprop.0>
			return err;
   18cde:	e7ed      	b.n	18cbc <bt_id_init+0xc>
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   18ce0:	79eb      	ldrb	r3, [r5, #7]
   18ce2:	2b00      	cmp	r3, #0
   18ce4:	d1e9      	bne.n	18cba <bt_id_init+0xa>
		err = bt_setup_random_id_addr();
   18ce6:	f7ff ff5b 	bl	18ba0 <bt_setup_random_id_addr>
		if (err) {
   18cea:	4604      	mov	r4, r0
   18cec:	2800      	cmp	r0, #0
   18cee:	d1ec      	bne.n	18cca <bt_id_init+0x1a>
		err = set_random_address(&bt_dev.id_addr[0].a);
   18cf0:	1c68      	adds	r0, r5, #1
   18cf2:	f7ff fe2f 	bl	18954 <set_random_address>
		if (err) {
   18cf6:	4604      	mov	r4, r0
   18cf8:	2800      	cmp	r0, #0
   18cfa:	d0df      	beq.n	18cbc <bt_id_init+0xc>
			LOG_ERR("Unable to set random address");
   18cfc:	4b03      	ldr	r3, [pc, #12]	; (18d0c <bt_id_init+0x5c>)
   18cfe:	e7e5      	b.n	18ccc <bt_id_init+0x1c>
   18d00:	20000388 	.word	0x20000388
   18d04:	00026f3d 	.word	0x00026f3d
   18d08:	000255ac 	.word	0x000255ac
   18d0c:	00026f5c 	.word	0x00026f5c

00018d10 <hci_set_ad>:
	*data_len = set_data_len;
	return 0;
}

static int hci_set_ad(uint16_t hci_op, const struct bt_ad *ad, size_t ad_len)
{
   18d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18d14:	b089      	sub	sp, #36	; 0x24
   18d16:	460c      	mov	r4, r1
	struct bt_hci_cp_le_set_adv_data *set_data;
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   18d18:	2120      	movs	r1, #32
{
   18d1a:	9000      	str	r0, [sp, #0]
   18d1c:	4692      	mov	sl, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   18d1e:	f7fe fe37 	bl	17990 <bt_hci_cmd_create>
	if (!buf) {
   18d22:	4605      	mov	r5, r0
   18d24:	2800      	cmp	r0, #0
   18d26:	d05b      	beq.n	18de0 <hci_set_ad+0xd0>
	return net_buf_simple_add(&buf->b, len);
   18d28:	2120      	movs	r1, #32
   18d2a:	300c      	adds	r0, #12
   18d2c:	f00b f8e6 	bl	23efc <net_buf_simple_add>
__ssp_bos_icheck3(memset, void *, int)
   18d30:	2220      	movs	r2, #32
   18d32:	2100      	movs	r1, #0
   18d34:	4681      	mov	r9, r0
   18d36:	f00c fa54 	bl	251e2 <memset>
	}

	set_data = net_buf_add(buf, sizeof(*set_data));
	(void)memset(set_data, 0, sizeof(*set_data));

	err = set_data_add_complete(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
   18d3a:	f109 0b01 	add.w	fp, r9, #1
	for (size_t i = 0; i < ad_len; i++) {
   18d3e:	eb04 0aca 	add.w	sl, r4, sl, lsl #3
	uint8_t set_data_len = 0;
   18d42:	2600      	movs	r6, #0
		for (size_t j = 0; j < ad[i].len; j++) {
   18d44:	f8d4 8000 	ldr.w	r8, [r4]
   18d48:	2300      	movs	r3, #0
   18d4a:	6862      	ldr	r2, [r4, #4]
   18d4c:	4293      	cmp	r3, r2
   18d4e:	d30c      	bcc.n	18d6a <hci_set_ad+0x5a>
	for (size_t i = 0; i < ad_len; i++) {
   18d50:	3408      	adds	r4, #8
   18d52:	45a2      	cmp	sl, r4
   18d54:	d1f6      	bne.n	18d44 <hci_set_ad+0x34>
	if (err) {
		net_buf_unref(buf);
		return err;
	}

	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   18d56:	9800      	ldr	r0, [sp, #0]
	*data_len = set_data_len;
   18d58:	f889 6000 	strb.w	r6, [r9]
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   18d5c:	2200      	movs	r2, #0
   18d5e:	4629      	mov	r1, r5
}
   18d60:	b009      	add	sp, #36	; 0x24
   18d62:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   18d66:	f7fe be4d 	b.w	17a04 <bt_hci_cmd_send_sync>
			size_t len = data[j].data_len;
   18d6a:	f898 2001 	ldrb.w	r2, [r8, #1]
			uint8_t type = data[j].type;
   18d6e:	f898 c000 	ldrb.w	ip, [r8]
			if ((set_data_len + len + 2) > set_data_len_max) {
   18d72:	1cb0      	adds	r0, r6, #2
   18d74:	1811      	adds	r1, r2, r0
   18d76:	291f      	cmp	r1, #31
   18d78:	d91b      	bls.n	18db2 <hci_set_ad+0xa2>
				if (!(type == BT_DATA_NAME_COMPLETE &&
   18d7a:	f1bc 0f09 	cmp.w	ip, #9
				ssize_t shortened_len = set_data_len_max -
   18d7e:	f1c0 021f 	rsb	r2, r0, #31
				if (!(type == BT_DATA_NAME_COMPLETE &&
   18d82:	d101      	bne.n	18d88 <hci_set_ad+0x78>
   18d84:	2a00      	cmp	r2, #0
   18d86:	dc12      	bgt.n	18dae <hci_set_ad+0x9e>
					LOG_ERR("Too big advertising data");
   18d88:	4b17      	ldr	r3, [pc, #92]	; (18de8 <hci_set_ad+0xd8>)
   18d8a:	9307      	str	r3, [sp, #28]
   18d8c:	2302      	movs	r3, #2
   18d8e:	9306      	str	r3, [sp, #24]
   18d90:	4816      	ldr	r0, [pc, #88]	; (18dec <hci_set_ad+0xdc>)
   18d92:	2300      	movs	r3, #0
   18d94:	aa06      	add	r2, sp, #24
   18d96:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   18d9a:	f7fc fc31 	bl	15600 <z_impl_z_log_msg_static_create>
		net_buf_unref(buf);
   18d9e:	4628      	mov	r0, r5
   18da0:	f003 fa48 	bl	1c234 <net_buf_unref>
					return -EINVAL;
   18da4:	f06f 0015 	mvn.w	r0, #21
}
   18da8:	b009      	add	sp, #36	; 0x24
   18daa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				type = BT_DATA_NAME_SHORTENED;
   18dae:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
   18db2:	b2d7      	uxtb	r7, r2
   18db4:	1c79      	adds	r1, r7, #1
   18db6:	f80b 1006 	strb.w	r1, [fp, r6]
   18dba:	1c71      	adds	r1, r6, #1
			set_data[set_data_len++] = type;
   18dbc:	b2c9      	uxtb	r1, r1
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   18dbe:	fa5b f080 	uxtab	r0, fp, r0
   18dc2:	f80b c001 	strb.w	ip, [fp, r1]
   18dc6:	f8d8 1004 	ldr.w	r1, [r8, #4]
   18dca:	9301      	str	r3, [sp, #4]
			set_data_len += len;
   18dcc:	3702      	adds	r7, #2
   18dce:	f00c f9fa 	bl	251c6 <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
   18dd2:	9b01      	ldr	r3, [sp, #4]
			set_data_len += len;
   18dd4:	4437      	add	r7, r6
   18dd6:	b2fe      	uxtb	r6, r7
		for (size_t j = 0; j < ad[i].len; j++) {
   18dd8:	3301      	adds	r3, #1
   18dda:	f108 0808 	add.w	r8, r8, #8
   18dde:	e7b4      	b.n	18d4a <hci_set_ad+0x3a>
		return -ENOBUFS;
   18de0:	f06f 0068 	mvn.w	r0, #104	; 0x68
   18de4:	e7e0      	b.n	18da8 <hci_set_ad+0x98>
   18de6:	bf00      	nop
   18de8:	00026f7f 	.word	0x00026f7f
   18dec:	00025584 	.word	0x00025584

00018df0 <le_adv_start_add_conn>:
	return channel_map;
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
   18df0:	b570      	push	{r4, r5, r6, lr}
	struct bt_conn *conn;

	bt_dev.adv_conn_id = adv->id;
   18df2:	4605      	mov	r5, r0
   18df4:	4b16      	ldr	r3, [pc, #88]	; (18e50 <le_adv_start_add_conn+0x60>)
   18df6:	f815 2b09 	ldrb.w	r2, [r5], #9
   18dfa:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
{
   18dfe:	4604      	mov	r4, r0
   18e00:	460e      	mov	r6, r1
	return memcmp(a, b, sizeof(*a));
   18e02:	2207      	movs	r2, #7
   18e04:	4913      	ldr	r1, [pc, #76]	; (18e54 <le_adv_start_add_conn+0x64>)
   18e06:	4628      	mov	r0, r5
   18e08:	f00c f9cd 	bl	251a6 <memcmp>
   18e0c:	4603      	mov	r3, r0
   18e0e:	7820      	ldrb	r0, [r4, #0]

	if (bt_addr_le_eq(&adv->target_addr, BT_ADDR_LE_ANY)) {
   18e10:	b96b      	cbnz	r3, 18e2e <le_adv_start_add_conn+0x3e>
		/* Undirected advertising */
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
   18e12:	4911      	ldr	r1, [pc, #68]	; (18e58 <le_adv_start_add_conn+0x68>)
   18e14:	f000 feba 	bl	19b8c <bt_conn_add_le>
		if (!conn) {
   18e18:	4604      	mov	r4, r0
   18e1a:	b910      	cbnz	r0, 18e22 <le_adv_start_add_conn+0x32>
			return -ENOMEM;
   18e1c:	f06f 000b 	mvn.w	r0, #11
	}

	bt_conn_set_state(conn, BT_CONN_CONNECTING_DIR_ADV);
	*out_conn = conn;
	return 0;
}
   18e20:	bd70      	pop	{r4, r5, r6, pc}
		bt_conn_set_state(conn, BT_CONN_CONNECTING_ADV);
   18e22:	2104      	movs	r1, #4
   18e24:	f000 fd14 	bl	19850 <bt_conn_set_state>
		*out_conn = conn;
   18e28:	6034      	str	r4, [r6, #0]
		return 0;
   18e2a:	2000      	movs	r0, #0
   18e2c:	e7f8      	b.n	18e20 <le_adv_start_add_conn+0x30>
	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
   18e2e:	4629      	mov	r1, r5
   18e30:	f000 fee2 	bl	19bf8 <bt_conn_exists_le>
   18e34:	b940      	cbnz	r0, 18e48 <le_adv_start_add_conn+0x58>
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
   18e36:	7820      	ldrb	r0, [r4, #0]
   18e38:	4629      	mov	r1, r5
   18e3a:	f000 fea7 	bl	19b8c <bt_conn_add_le>
	if (!conn) {
   18e3e:	4604      	mov	r4, r0
   18e40:	2800      	cmp	r0, #0
   18e42:	d0eb      	beq.n	18e1c <le_adv_start_add_conn+0x2c>
	bt_conn_set_state(conn, BT_CONN_CONNECTING_DIR_ADV);
   18e44:	2105      	movs	r1, #5
   18e46:	e7ed      	b.n	18e24 <le_adv_start_add_conn+0x34>
		return -EINVAL;
   18e48:	f06f 0015 	mvn.w	r0, #21
   18e4c:	e7e8      	b.n	18e20 <le_adv_start_add_conn+0x30>
   18e4e:	bf00      	nop
   18e50:	20000388 	.word	0x20000388
   18e54:	0002682b 	.word	0x0002682b
   18e58:	00026824 	.word	0x00026824

00018e5c <valid_adv_param>:
{
   18e5c:	b538      	push	{r3, r4, r5, lr}
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   18e5e:	6843      	ldr	r3, [r0, #4]
{
   18e60:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   18e62:	0558      	lsls	r0, r3, #21
   18e64:	d501      	bpl.n	18e6a <valid_adv_param+0xe>
		return false;
   18e66:	2000      	movs	r0, #0
}
   18e68:	bd38      	pop	{r3, r4, r5, pc}
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   18e6a:	6922      	ldr	r2, [r4, #16]
   18e6c:	b10a      	cbz	r2, 18e72 <valid_adv_param+0x16>
   18e6e:	07d9      	lsls	r1, r3, #31
   18e70:	d5f9      	bpl.n	18e66 <valid_adv_param+0xa>
	if (param->id >= bt_dev.id_count ||
   18e72:	4d19      	ldr	r5, [pc, #100]	; (18ed8 <valid_adv_param+0x7c>)
   18e74:	7820      	ldrb	r0, [r4, #0]
   18e76:	79eb      	ldrb	r3, [r5, #7]
   18e78:	4283      	cmp	r3, r0
   18e7a:	d9f4      	bls.n	18e66 <valid_adv_param+0xa>
	    bt_addr_le_eq(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
   18e7c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   18e80:	4916      	ldr	r1, [pc, #88]	; (18edc <valid_adv_param+0x80>)
   18e82:	2207      	movs	r2, #7
   18e84:	4428      	add	r0, r5
   18e86:	f00c f98e 	bl	251a6 <memcmp>
	if (param->id >= bt_dev.id_count ||
   18e8a:	2800      	cmp	r0, #0
   18e8c:	d0eb      	beq.n	18e66 <valid_adv_param+0xa>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   18e8e:	6860      	ldr	r0, [r4, #4]
   18e90:	07c2      	lsls	r2, r0, #31
   18e92:	d406      	bmi.n	18ea2 <valid_adv_param+0x46>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
   18e94:	f895 3068 	ldrb.w	r3, [r5, #104]	; 0x68
   18e98:	2b08      	cmp	r3, #8
   18e9a:	d802      	bhi.n	18ea2 <valid_adv_param+0x46>
   18e9c:	68a3      	ldr	r3, [r4, #8]
   18e9e:	2b9f      	cmp	r3, #159	; 0x9f
   18ea0:	d9e1      	bls.n	18e66 <valid_adv_param+0xa>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
   18ea2:	f010 0f30 	tst.w	r0, #48	; 0x30
   18ea6:	d002      	beq.n	18eae <valid_adv_param+0x52>
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
   18ea8:	6923      	ldr	r3, [r4, #16]
   18eaa:	2b00      	cmp	r3, #0
   18eac:	d0db      	beq.n	18e66 <valid_adv_param+0xa>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
   18eae:	06c3      	lsls	r3, r0, #27
   18eb0:	d401      	bmi.n	18eb6 <valid_adv_param+0x5a>
   18eb2:	6923      	ldr	r3, [r4, #16]
   18eb4:	b943      	cbnz	r3, 18ec8 <valid_adv_param+0x6c>
		if (param->interval_min > param->interval_max ||
   18eb6:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   18eba:	429a      	cmp	r2, r3
   18ebc:	d8d3      	bhi.n	18e66 <valid_adv_param+0xa>
   18ebe:	2a1f      	cmp	r2, #31
   18ec0:	d9d1      	bls.n	18e66 <valid_adv_param+0xa>
		    param->interval_min < 0x0020 ||
   18ec2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   18ec6:	d8ce      	bhi.n	18e66 <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
   18ec8:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
   18ecc:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
   18ed0:	bf18      	it	ne
   18ed2:	2001      	movne	r0, #1
   18ed4:	e7c8      	b.n	18e68 <valid_adv_param+0xc>
   18ed6:	bf00      	nop
   18ed8:	20000388 	.word	0x20000388
   18edc:	0002682b 	.word	0x0002682b

00018ee0 <bt_le_adv_lookup_legacy>:
}
   18ee0:	4800      	ldr	r0, [pc, #0]	; (18ee4 <bt_le_adv_lookup_legacy+0x4>)
   18ee2:	4770      	bx	lr
   18ee4:	200003a0 	.word	0x200003a0

00018ee8 <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
   18ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18eec:	b093      	sub	sp, #76	; 0x4c
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable = false;
   18eee:	f8d1 a010 	ldr.w	sl, [r1, #16]
{
   18ef2:	9305      	str	r3, [sp, #20]
	struct bt_conn *conn = NULL;
   18ef4:	2300      	movs	r3, #0
	bool dir_adv = (param->peer != NULL), scannable = false;
   18ef6:	ebba 0403 	subs.w	r4, sl, r3
{
   18efa:	4606      	mov	r6, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   18efc:	4890      	ldr	r0, [pc, #576]	; (19140 <bt_le_adv_start_legacy+0x258>)
	struct bt_conn *conn = NULL;
   18efe:	9307      	str	r3, [sp, #28]
	bool dir_adv = (param->peer != NULL), scannable = false;
   18f00:	bf18      	it	ne
   18f02:	2401      	movne	r4, #1
   18f04:	f009 fde5 	bl	22ad2 <atomic_get>
	enum adv_name_type name_type;

	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   18f08:	0747      	lsls	r7, r0, #29
{
   18f0a:	460d      	mov	r5, r1
   18f0c:	4693      	mov	fp, r2
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   18f0e:	f140 810d 	bpl.w	1912c <bt_le_adv_start_legacy+0x244>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
   18f12:	4608      	mov	r0, r1
   18f14:	f7ff ffa2 	bl	18e5c <valid_adv_param>
   18f18:	b928      	cbnz	r0, 18f26 <bt_le_adv_start_legacy+0x3e>
		return -EINVAL;
   18f1a:	f06f 0415 	mvn.w	r4, #21

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
   18f1e:	4620      	mov	r0, r4
   18f20:	b013      	add	sp, #76	; 0x4c
   18f22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!bt_id_adv_random_addr_check(param)) {
   18f26:	4628      	mov	r0, r5
   18f28:	f009 fdc0 	bl	22aac <bt_id_adv_random_addr_check>
   18f2c:	4681      	mov	r9, r0
   18f2e:	2800      	cmp	r0, #0
   18f30:	d0f3      	beq.n	18f1a <bt_le_adv_start_legacy+0x32>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   18f32:	f106 0810 	add.w	r8, r6, #16
   18f36:	4640      	mov	r0, r8
   18f38:	f009 fdcb 	bl	22ad2 <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   18f3c:	f3c0 13c0 	ubfx	r3, r0, #7, #1
   18f40:	0600      	lsls	r0, r0, #24
   18f42:	f100 80f6 	bmi.w	19132 <bt_le_adv_start_legacy+0x24a>
	(void)memset(&set_param, 0, sizeof(set_param));
   18f46:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
   18f4a:	f8cd 302b 	str.w	r3, [sp, #43]	; 0x2b
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
   18f4e:	68ab      	ldr	r3, [r5, #8]
   18f50:	f8ad 3020 	strh.w	r3, [sp, #32]
	set_param.channel_map  = get_adv_channel_map(param->options);
   18f54:	6868      	ldr	r0, [r5, #4]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
   18f56:	68eb      	ldr	r3, [r5, #12]
   18f58:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
	set_param.channel_map  = get_adv_channel_map(param->options);
   18f5c:	f009 fdaa 	bl	22ab4 <get_adv_channel_map>
	if (adv->id != param->id) {
   18f60:	7832      	ldrb	r2, [r6, #0]
   18f62:	782b      	ldrb	r3, [r5, #0]
	set_param.channel_map  = get_adv_channel_map(param->options);
   18f64:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
	if (adv->id != param->id) {
   18f68:	429a      	cmp	r2, r3
   18f6a:	d004      	beq.n	18f76 <bt_le_adv_start_legacy+0x8e>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   18f6c:	4874      	ldr	r0, [pc, #464]	; (19140 <bt_le_adv_start_legacy+0x258>)
   18f6e:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
   18f72:	f009 fdb4 	bl	22ade <atomic_and>
	bt_dev.adv_conn_id = adv->id;
   18f76:	4a73      	ldr	r2, [pc, #460]	; (19144 <bt_le_adv_start_legacy+0x25c>)
	adv->id = param->id;
   18f78:	782b      	ldrb	r3, [r5, #0]
   18f7a:	7033      	strb	r3, [r6, #0]
	bt_dev.adv_conn_id = adv->id;
   18f7c:	f882 3067 	strb.w	r3, [r2, #103]	; 0x67
	err = bt_id_set_adv_own_addr(adv, param->options, dir_adv,
   18f80:	6869      	ldr	r1, [r5, #4]
   18f82:	4622      	mov	r2, r4
   18f84:	f10d 0325 	add.w	r3, sp, #37	; 0x25
   18f88:	4630      	mov	r0, r6
   18f8a:	f7ff fe37 	bl	18bfc <bt_id_set_adv_own_addr>
	if (err) {
   18f8e:	4604      	mov	r4, r0
   18f90:	2800      	cmp	r0, #0
   18f92:	d1c4      	bne.n	18f1e <bt_le_adv_start_legacy+0x36>
		bt_addr_le_copy(&adv->target_addr, param->peer);
   18f94:	f106 0009 	add.w	r0, r6, #9
	if (dir_adv) {
   18f98:	f1ba 0f00 	cmp.w	sl, #0
   18f9c:	d013      	beq.n	18fc6 <bt_le_adv_start_legacy+0xde>
		bt_addr_le_copy(&adv->target_addr, param->peer);
   18f9e:	6929      	ldr	r1, [r5, #16]
   18fa0:	f009 fdac 	bl	22afc <bt_addr_le_copy>
	name_type = get_adv_name_type_param(param);
   18fa4:	4628      	mov	r0, r5
   18fa6:	f009 fe40 	bl	22c2a <get_adv_name_type_param>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   18faa:	686b      	ldr	r3, [r5, #4]
   18fac:	07d9      	lsls	r1, r3, #31
	name_type = get_adv_name_type_param(param);
   18fae:	4607      	mov	r7, r0
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   18fb0:	d416      	bmi.n	18fe0 <bt_le_adv_start_legacy+0xf8>
	} else if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || sd ||
   18fb2:	059b      	lsls	r3, r3, #22
   18fb4:	d403      	bmi.n	18fbe <bt_le_adv_start_legacy+0xd6>
   18fb6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   18fb8:	b90b      	cbnz	r3, 18fbe <bt_le_adv_start_legacy+0xd6>
   18fba:	2f02      	cmp	r7, #2
   18fbc:	d159      	bne.n	19072 <bt_le_adv_start_legacy+0x18a>
		set_param.type = BT_HCI_ADV_SCAN_IND;
   18fbe:	2302      	movs	r3, #2
   18fc0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   18fc4:	e019      	b.n	18ffa <bt_le_adv_start_legacy+0x112>
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
   18fc6:	4960      	ldr	r1, [pc, #384]	; (19148 <bt_le_adv_start_legacy+0x260>)
   18fc8:	f009 fd98 	bl	22afc <bt_addr_le_copy>
	name_type = get_adv_name_type_param(param);
   18fcc:	4628      	mov	r0, r5
   18fce:	f009 fe2c 	bl	22c2a <get_adv_name_type_param>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   18fd2:	686b      	ldr	r3, [r5, #4]
   18fd4:	07da      	lsls	r2, r3, #31
	name_type = get_adv_name_type_param(param);
   18fd6:	4607      	mov	r7, r0
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   18fd8:	d5eb      	bpl.n	18fb2 <bt_le_adv_start_legacy+0xca>
			set_param.type = BT_HCI_ADV_IND;
   18fda:	f88d a024 	strb.w	sl, [sp, #36]	; 0x24
   18fde:	e00c      	b.n	18ffa <bt_le_adv_start_legacy+0x112>
				set_param.type = BT_HCI_ADV_DIRECT_IND_LOW_DUTY;
   18fe0:	f013 0f10 	tst.w	r3, #16
   18fe4:	bf0c      	ite	eq
   18fe6:	2301      	moveq	r3, #1
   18fe8:	2304      	movne	r3, #4
			bt_addr_le_copy(&set_param.direct_addr, param->peer);
   18fea:	6929      	ldr	r1, [r5, #16]
   18fec:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   18ff0:	f10d 0026 	add.w	r0, sp, #38	; 0x26
   18ff4:	f009 fd82 	bl	22afc <bt_addr_le_copy>
	bool dir_adv = (param->peer != NULL), scannable = false;
   18ff8:	46a1      	mov	r9, r4
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
   18ffa:	210f      	movs	r1, #15
   18ffc:	f242 0006 	movw	r0, #8198	; 0x2006
   19000:	f7fe fcc6 	bl	17990 <bt_hci_cmd_create>
	if (!buf) {
   19004:	4604      	mov	r4, r0
   19006:	2800      	cmp	r0, #0
   19008:	f000 8096 	beq.w	19138 <bt_le_adv_start_legacy+0x250>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1900c:	220f      	movs	r2, #15
   1900e:	a908      	add	r1, sp, #32
   19010:	300c      	adds	r0, #12
   19012:	f00a ff79 	bl	23f08 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
   19016:	4621      	mov	r1, r4
   19018:	2200      	movs	r2, #0
   1901a:	f242 0006 	movw	r0, #8198	; 0x2006
   1901e:	f7fe fcf1 	bl	17a04 <bt_hci_cmd_send_sync>
	if (err) {
   19022:	4604      	mov	r4, r0
   19024:	2800      	cmp	r0, #0
   19026:	f47f af7a 	bne.w	18f1e <bt_le_adv_start_legacy+0x36>
	if (!dir_adv) {
   1902a:	f1ba 0f00 	cmp.w	sl, #0
   1902e:	d026      	beq.n	1907e <bt_le_adv_start_legacy+0x196>
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   19030:	686b      	ldr	r3, [r5, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   19032:	07dc      	lsls	r4, r3, #31
   19034:	d431      	bmi.n	1909a <bt_le_adv_start_legacy+0x1b2>
	return bt_le_adv_set_enable_legacy(adv, enable);
   19036:	2101      	movs	r1, #1
   19038:	4630      	mov	r0, r6
   1903a:	f009 fe06 	bl	22c4a <bt_le_adv_set_enable_legacy>
	if (err) {
   1903e:	4604      	mov	r4, r0
   19040:	2800      	cmp	r0, #0
   19042:	d06b      	beq.n	1911c <bt_le_adv_start_legacy+0x234>
		LOG_ERR("Failed to start advertiser");
   19044:	4b41      	ldr	r3, [pc, #260]	; (1914c <bt_le_adv_start_legacy+0x264>)
   19046:	9311      	str	r3, [sp, #68]	; 0x44
   19048:	2302      	movs	r3, #2
   1904a:	9310      	str	r3, [sp, #64]	; 0x40
   1904c:	4840      	ldr	r0, [pc, #256]	; (19150 <bt_le_adv_start_legacy+0x268>)
   1904e:	2300      	movs	r3, #0
   19050:	aa10      	add	r2, sp, #64	; 0x40
   19052:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   19056:	f7fc fad3 	bl	15600 <z_impl_z_log_msg_static_create>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   1905a:	9d07      	ldr	r5, [sp, #28]
   1905c:	2d00      	cmp	r5, #0
   1905e:	f43f af5e 	beq.w	18f1e <bt_le_adv_start_legacy+0x36>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   19062:	4628      	mov	r0, r5
   19064:	2100      	movs	r1, #0
   19066:	f000 fbf3 	bl	19850 <bt_conn_set_state>
			bt_conn_unref(conn);
   1906a:	4628      	mov	r0, r5
   1906c:	f009 fe63 	bl	22d36 <bt_conn_unref>
   19070:	e755      	b.n	18f1e <bt_le_adv_start_legacy+0x36>
		set_param.type = BT_HCI_ADV_NONCONN_IND;
   19072:	2303      	movs	r3, #3
	bool dir_adv = (param->peer != NULL), scannable = false;
   19074:	f8dd 9070 	ldr.w	r9, [sp, #112]	; 0x70
		set_param.type = BT_HCI_ADV_NONCONN_IND;
   19078:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   1907c:	e7bd      	b.n	18ffa <bt_le_adv_start_legacy+0x112>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
   1907e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   19080:	9300      	str	r3, [sp, #0]
   19082:	e9cd 9701 	strd	r9, r7, [sp, #4]
   19086:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   19088:	9a05      	ldr	r2, [sp, #20]
   1908a:	4659      	mov	r1, fp
   1908c:	4630      	mov	r0, r6
   1908e:	f009 fd55 	bl	22b3c <le_adv_update.constprop.0>
		if (err) {
   19092:	4604      	mov	r4, r0
   19094:	2800      	cmp	r0, #0
   19096:	d0cb      	beq.n	19030 <bt_le_adv_start_legacy+0x148>
   19098:	e741      	b.n	18f1e <bt_le_adv_start_legacy+0x36>
		err = le_adv_start_add_conn(adv, &conn);
   1909a:	a907      	add	r1, sp, #28
   1909c:	4630      	mov	r0, r6
   1909e:	f7ff fea7 	bl	18df0 <le_adv_start_add_conn>
		if (err) {
   190a2:	4604      	mov	r4, r0
   190a4:	2800      	cmp	r0, #0
   190a6:	d0c6      	beq.n	19036 <bt_le_adv_start_legacy+0x14e>
			if (err == -ENOMEM && !dir_adv &&
   190a8:	f110 0f0c 	cmn.w	r0, #12
   190ac:	f47f af37 	bne.w	18f1e <bt_le_adv_start_legacy+0x36>
   190b0:	f1ba 0f00 	cmp.w	sl, #0
   190b4:	f47f af33 	bne.w	18f1e <bt_le_adv_start_legacy+0x36>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
   190b8:	686b      	ldr	r3, [r5, #4]
			if (err == -ENOMEM && !dir_adv &&
   190ba:	0798      	lsls	r0, r3, #30
   190bc:	f53f af2f 	bmi.w	18f1e <bt_le_adv_start_legacy+0x36>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   190c0:	686c      	ldr	r4, [r5, #4]
   190c2:	f084 0402 	eor.w	r4, r4, #2
   190c6:	f3c4 0440 	ubfx	r4, r4, #1, #1
   190ca:	f004 0201 	and.w	r2, r4, #1
   190ce:	210e      	movs	r1, #14
   190d0:	4640      	mov	r0, r8
   190d2:	f009 fd1a 	bl	22b0a <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_AD,
   190d6:	1e7b      	subs	r3, r7, #1
   190d8:	425a      	negs	r2, r3
   190da:	415a      	adcs	r2, r3
   190dc:	2108      	movs	r1, #8
   190de:	4640      	mov	r0, r8
   190e0:	f009 fd13 	bl	22b0a <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_SD,
   190e4:	1eb9      	subs	r1, r7, #2
   190e6:	424a      	negs	r2, r1
   190e8:	414a      	adcs	r2, r1
   190ea:	4640      	mov	r0, r8
   190ec:	2109      	movs	r1, #9
   190ee:	f009 fd0c 	bl	22b0a <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
   190f2:	686a      	ldr	r2, [r5, #4]
   190f4:	210a      	movs	r1, #10
   190f6:	f002 0201 	and.w	r2, r2, #1
   190fa:	4640      	mov	r0, r8
   190fc:	f009 fd05 	bl	22b0a <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
   19100:	464a      	mov	r2, r9
   19102:	210b      	movs	r1, #11
   19104:	4640      	mov	r0, r8
   19106:	f009 fd00 	bl	22b0a <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
   1910a:	686a      	ldr	r2, [r5, #4]
   1910c:	210d      	movs	r1, #13
   1910e:	f3c2 0280 	ubfx	r2, r2, #2, #1
   19112:	4640      	mov	r0, r8
   19114:	f009 fcf9 	bl	22b0a <atomic_set_bit_to>
	return 0;
   19118:	2400      	movs	r4, #0
   1911a:	e700      	b.n	18f1e <bt_le_adv_start_legacy+0x36>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   1911c:	9807      	ldr	r0, [sp, #28]
   1911e:	b108      	cbz	r0, 19124 <bt_le_adv_start_legacy+0x23c>
		bt_conn_unref(conn);
   19120:	f009 fe09 	bl	22d36 <bt_conn_unref>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   19124:	f1ba 0f00 	cmp.w	sl, #0
   19128:	d1cf      	bne.n	190ca <bt_le_adv_start_legacy+0x1e2>
   1912a:	e7c9      	b.n	190c0 <bt_le_adv_start_legacy+0x1d8>
		return -EAGAIN;
   1912c:	f06f 040a 	mvn.w	r4, #10
   19130:	e6f5      	b.n	18f1e <bt_le_adv_start_legacy+0x36>
		return -EALREADY;
   19132:	f06f 0477 	mvn.w	r4, #119	; 0x77
   19136:	e6f2      	b.n	18f1e <bt_le_adv_start_legacy+0x36>
		return -ENOBUFS;
   19138:	f06f 0468 	mvn.w	r4, #104	; 0x68
   1913c:	e6ef      	b.n	18f1e <bt_le_adv_start_legacy+0x36>
   1913e:	bf00      	nop
   19140:	20000454 	.word	0x20000454
   19144:	20000388 	.word	0x20000388
   19148:	0002682b 	.word	0x0002682b
   1914c:	00026f98 	.word	0x00026f98
   19150:	00025584 	.word	0x00025584

00019154 <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
   19154:	b573      	push	{r0, r1, r4, r5, r6, lr}
   19156:	4615      	mov	r5, r2

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_DEV_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   19158:	9a06      	ldr	r2, [sp, #24]
{
   1915a:	460c      	mov	r4, r1
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   1915c:	e9cd 3200 	strd	r3, r2, [sp]
   19160:	462b      	mov	r3, r5
   19162:	460a      	mov	r2, r1
   19164:	4601      	mov	r1, r0
   19166:	4811      	ldr	r0, [pc, #68]	; (191ac <bt_le_adv_start+0x58>)
   19168:	f7ff febe 	bl	18ee8 <bt_le_adv_start_legacy>
   1916c:	4621      	mov	r1, r4
   1916e:	4606      	mov	r6, r0
	for (i = 0; i < ad_len; i++) {
   19170:	2300      	movs	r3, #0
		if (ad[i].type == BT_DATA_FLAGS &&
   19172:	f240 1001 	movw	r0, #257	; 0x101
	for (i = 0; i < ad_len; i++) {
   19176:	429d      	cmp	r5, r3
   19178:	d102      	bne.n	19180 <bt_le_adv_start+0x2c>
		k_work_reschedule(&adv->lim_adv_timeout_work,
				  K_SECONDS(CONFIG_BT_LIM_ADV_TIMEOUT));
	}

	return err;
}
   1917a:	4630      	mov	r0, r6
   1917c:	b002      	add	sp, #8
   1917e:	bd70      	pop	{r4, r5, r6, pc}
		if (ad[i].type == BT_DATA_FLAGS &&
   19180:	880a      	ldrh	r2, [r1, #0]
   19182:	4282      	cmp	r2, r0
   19184:	d104      	bne.n	19190 <bt_le_adv_start+0x3c>
		    ad[i].data != NULL) {
   19186:	684a      	ldr	r2, [r1, #4]
		    ad[i].data_len == sizeof(uint8_t) &&
   19188:	b112      	cbz	r2, 19190 <bt_le_adv_start+0x3c>
			if (ad[i].data[0] & BT_LE_AD_LIMITED) {
   1918a:	7812      	ldrb	r2, [r2, #0]
   1918c:	07d2      	lsls	r2, r2, #31
   1918e:	d402      	bmi.n	19196 <bt_le_adv_start+0x42>
	for (i = 0; i < ad_len; i++) {
   19190:	3301      	adds	r3, #1
   19192:	3108      	adds	r1, #8
   19194:	e7ef      	b.n	19176 <bt_le_adv_start+0x22>
		k_work_init_delayable(&adv->lim_adv_timeout_work, adv_timeout);
   19196:	4906      	ldr	r1, [pc, #24]	; (191b0 <bt_le_adv_start+0x5c>)
   19198:	4806      	ldr	r0, [pc, #24]	; (191b4 <bt_le_adv_start+0x60>)
   1919a:	f00b fc40 	bl	24a1e <k_work_init_delayable>
		k_work_reschedule(&adv->lim_adv_timeout_work,
   1919e:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   191a2:	2300      	movs	r3, #0
   191a4:	4803      	ldr	r0, [pc, #12]	; (191b4 <bt_le_adv_start+0x60>)
   191a6:	f006 fd4b 	bl	1fc40 <k_work_reschedule>
   191aa:	e7e6      	b.n	1917a <bt_le_adv_start+0x26>
   191ac:	200003a0 	.word	0x200003a0
   191b0:	0001923d 	.word	0x0001923d
   191b4:	200003b8 	.word	0x200003b8

000191b8 <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
   191b8:	b510      	push	{r4, lr}
	if (!adv) {
		LOG_ERR("No valid legacy adv");
		return 0;
	}

	(void)bt_le_lim_adv_cancel_timeout(adv);
   191ba:	481a      	ldr	r0, [pc, #104]	; (19224 <bt_le_adv_stop+0x6c>)
   191bc:	f009 fd6a 	bl	22c94 <bt_le_lim_adv_cancel_timeout>
   191c0:	4819      	ldr	r0, [pc, #100]	; (19228 <bt_le_adv_stop+0x70>)
   191c2:	f46f 4180 	mvn.w	r1, #16384	; 0x4000
   191c6:	f009 fc8a 	bl	22ade <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   191ca:	4817      	ldr	r0, [pc, #92]	; (19228 <bt_le_adv_stop+0x70>)
   191cc:	f009 fc81 	bl	22ad2 <atomic_get>
   191d0:	4603      	mov	r3, r0
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   191d2:	061a      	lsls	r2, r3, #24
   191d4:	f3c0 10c0 	ubfx	r0, r0, #7, #1
   191d8:	d523      	bpl.n	19222 <bt_le_adv_stop+0x6a>
   191da:	4813      	ldr	r0, [pc, #76]	; (19228 <bt_le_adv_stop+0x70>)
   191dc:	f009 fc79 	bl	22ad2 <atomic_get>
		 */
		bt_le_adv_delete_legacy();
		return 0;
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   191e0:	0543      	lsls	r3, r0, #21
   191e2:	d514      	bpl.n	1920e <bt_le_adv_stop+0x56>
   191e4:	4911      	ldr	r1, [pc, #68]	; (1922c <bt_le_adv_stop+0x74>)
   191e6:	4812      	ldr	r0, [pc, #72]	; (19230 <bt_le_adv_stop+0x78>)
   191e8:	2207      	movs	r2, #7
   191ea:	f00b ffdc 	bl	251a6 <memcmp>
   191ee:	4b11      	ldr	r3, [pc, #68]	; (19234 <bt_le_adv_stop+0x7c>)
	if (bt_addr_le_eq(&adv->target_addr, BT_ADDR_LE_ANY)) {
   191f0:	b998      	cbnz	r0, 1921a <bt_le_adv_stop+0x62>
		conn = bt_conn_lookup_state_le(adv->id, BT_ADDR_LE_NONE,
   191f2:	4911      	ldr	r1, [pc, #68]	; (19238 <bt_le_adv_stop+0x80>)
   191f4:	2204      	movs	r2, #4
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   191f6:	7e18      	ldrb	r0, [r3, #24]
   191f8:	f000 fd2e 	bl	19c58 <bt_conn_lookup_state_le>
   191fc:	4604      	mov	r4, r0
	if (conn) {
   191fe:	b130      	cbz	r0, 1920e <bt_le_adv_stop+0x56>
		conn->err = status;
   19200:	2100      	movs	r1, #0
   19202:	7241      	strb	r1, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   19204:	f000 fb24 	bl	19850 <bt_conn_set_state>
		bt_conn_unref(conn);
   19208:	4620      	mov	r0, r4
   1920a:	f009 fd94 	bl	22d36 <bt_conn_unref>
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
   1920e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		err = bt_le_adv_set_enable_legacy(adv, false);
   19212:	4804      	ldr	r0, [pc, #16]	; (19224 <bt_le_adv_stop+0x6c>)
   19214:	2100      	movs	r1, #0
   19216:	f009 bd18 	b.w	22c4a <bt_le_adv_set_enable_legacy>
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   1921a:	2205      	movs	r2, #5
   1921c:	f103 0121 	add.w	r1, r3, #33	; 0x21
   19220:	e7e9      	b.n	191f6 <bt_le_adv_stop+0x3e>
}
   19222:	bd10      	pop	{r4, pc}
   19224:	200003a0 	.word	0x200003a0
   19228:	200003b0 	.word	0x200003b0
   1922c:	0002682b 	.word	0x0002682b
   19230:	200003a9 	.word	0x200003a9
   19234:	20000388 	.word	0x20000388
   19238:	00026824 	.word	0x00026824

0001923c <adv_timeout>:
}
#endif /* defined(CONFIG_BT_EXT_ADV) */


static void adv_timeout(struct k_work *work)
{
   1923c:	b580      	push	{r7, lr}
   1923e:	af00      	add	r7, sp, #0
		err = bt_le_adv_stop();
	} else {
		err = bt_le_ext_adv_stop(adv);
	}
#else
	err = bt_le_adv_stop();
   19240:	f7ff ffba 	bl	191b8 <bt_le_adv_stop>
#endif
	LOG_WRN("Failed to stop advertising: %d", err);
   19244:	b088      	sub	sp, #32
   19246:	466a      	mov	r2, sp
   19248:	4b06      	ldr	r3, [pc, #24]	; (19264 <adv_timeout+0x28>)
   1924a:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1924e:	2303      	movs	r3, #3
   19250:	f842 3f10 	str.w	r3, [r2, #16]!
   19254:	4804      	ldr	r0, [pc, #16]	; (19268 <adv_timeout+0x2c>)
   19256:	2300      	movs	r3, #0
   19258:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1925c:	f7fc f9d0 	bl	15600 <z_impl_z_log_msg_static_create>
}
   19260:	46bd      	mov	sp, r7
   19262:	bd80      	pop	{r7, pc}
   19264:	00026fb3 	.word	0x00026fb3
   19268:	00025584 	.word	0x00025584

0001926c <bt_le_adv_resume>:
{
   1926c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1926e:	4c20      	ldr	r4, [pc, #128]	; (192f0 <bt_le_adv_resume+0x84>)
   19270:	4620      	mov	r0, r4
   19272:	f009 fc2e 	bl	22ad2 <atomic_get>
	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
   19276:	0440      	lsls	r0, r0, #17
   19278:	d538      	bpl.n	192ec <bt_le_adv_resume+0x80>
   1927a:	4620      	mov	r0, r4
   1927c:	f009 fc29 	bl	22ad2 <atomic_get>
   19280:	0601      	lsls	r1, r0, #24
   19282:	d433      	bmi.n	192ec <bt_le_adv_resume+0x80>
   19284:	4620      	mov	r0, r4
   19286:	f009 fc24 	bl	22ad2 <atomic_get>
	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
   1928a:	0542      	lsls	r2, r0, #21
   1928c:	d52e      	bpl.n	192ec <bt_le_adv_resume+0x80>
	err = le_adv_start_add_conn(adv, &conn);
   1928e:	a901      	add	r1, sp, #4
   19290:	f1a4 0010 	sub.w	r0, r4, #16
   19294:	f7ff fdac 	bl	18df0 <le_adv_start_add_conn>
	if (err) {
   19298:	4605      	mov	r5, r0
   1929a:	bb38      	cbnz	r0, 192ec <bt_le_adv_resume+0x80>
	return bt_le_adv_set_enable_legacy(adv, enable);
   1929c:	2101      	movs	r1, #1
   1929e:	f1a4 0010 	sub.w	r0, r4, #16
   192a2:	f009 fcd2 	bl	22c4a <bt_le_adv_set_enable_legacy>
	bt_conn_unref(conn);
   192a6:	9e01      	ldr	r6, [sp, #4]
	if (err) {
   192a8:	b928      	cbnz	r0, 192b6 <bt_le_adv_resume+0x4a>
	bt_conn_unref(conn);
   192aa:	4630      	mov	r0, r6
}
   192ac:	b002      	add	sp, #8
   192ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   192b2:	f009 bd40 	b.w	22d36 <bt_conn_unref>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   192b6:	4629      	mov	r1, r5
   192b8:	4630      	mov	r0, r6
   192ba:	f000 fac9 	bl	19850 <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   192be:	f46f 4180 	mvn.w	r1, #16384	; 0x4000
   192c2:	4620      	mov	r0, r4
   192c4:	f009 fc0b 	bl	22ade <atomic_and>
   192c8:	4605      	mov	r5, r0
	bt_conn_unref(conn);
   192ca:	4630      	mov	r0, r6
   192cc:	f009 fd33 	bl	22d36 <bt_conn_unref>
	if (persist_paused) {
   192d0:	046b      	lsls	r3, r5, #17
   192d2:	d50b      	bpl.n	192ec <bt_le_adv_resume+0x80>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   192d4:	f3bf 8f5b 	dmb	ish
   192d8:	e854 3f00 	ldrex	r3, [r4]
   192dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   192e0:	e844 3200 	strex	r2, r3, [r4]
   192e4:	2a00      	cmp	r2, #0
   192e6:	d1f7      	bne.n	192d8 <bt_le_adv_resume+0x6c>
   192e8:	f3bf 8f5b 	dmb	ish
}
   192ec:	b002      	add	sp, #8
   192ee:	bd70      	pop	{r4, r5, r6, pc}
   192f0:	200003b0 	.word	0x200003b0

000192f4 <notify_connected>:
		return -ENOTCONN;
	}
}

static void notify_connected(struct bt_conn *conn)
{
   192f4:	b570      	push	{r4, r5, r6, lr}
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
   192f6:	4b0b      	ldr	r3, [pc, #44]	; (19324 <notify_connected+0x30>)
   192f8:	681d      	ldr	r5, [r3, #0]
{
   192fa:	4604      	mov	r4, r0
	for (cb = callback_list; cb; cb = cb->_next) {
   192fc:	b925      	cbnz	r5, 19308 <notify_connected+0x14>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   192fe:	4d0a      	ldr	r5, [pc, #40]	; (19328 <notify_connected+0x34>)
   19300:	4e0a      	ldr	r6, [pc, #40]	; (1932c <notify_connected+0x38>)
   19302:	42b5      	cmp	r5, r6
   19304:	d307      	bcc.n	19316 <notify_connected+0x22>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}
}
   19306:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->connected) {
   19308:	682b      	ldr	r3, [r5, #0]
   1930a:	b113      	cbz	r3, 19312 <notify_connected+0x1e>
			cb->connected(conn, conn->err);
   1930c:	7a61      	ldrb	r1, [r4, #9]
   1930e:	4620      	mov	r0, r4
   19310:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   19312:	692d      	ldr	r5, [r5, #16]
   19314:	e7f2      	b.n	192fc <notify_connected+0x8>
		if (cb->connected) {
   19316:	682b      	ldr	r3, [r5, #0]
   19318:	b113      	cbz	r3, 19320 <notify_connected+0x2c>
			cb->connected(conn, conn->err);
   1931a:	7a61      	ldrb	r1, [r4, #9]
   1931c:	4620      	mov	r0, r4
   1931e:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   19320:	3514      	adds	r5, #20
   19322:	e7ee      	b.n	19302 <notify_connected+0xe>
   19324:	20004f70 	.word	0x20004f70
   19328:	00025548 	.word	0x00025548
   1932c:	0002555c 	.word	0x0002555c

00019330 <bt_conn_create_pdu_timeout.part.0>:
struct net_buf *bt_conn_create_pdu_timeout(struct net_buf_pool *pool,
   19330:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		LOG_WRN("Unable to allocate buffer within timeout");
   19332:	4b07      	ldr	r3, [pc, #28]	; (19350 <bt_conn_create_pdu_timeout.part.0+0x20>)
   19334:	9305      	str	r3, [sp, #20]
   19336:	4807      	ldr	r0, [pc, #28]	; (19354 <bt_conn_create_pdu_timeout.part.0+0x24>)
   19338:	2302      	movs	r3, #2
   1933a:	aa04      	add	r2, sp, #16
   1933c:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   19340:	9304      	str	r3, [sp, #16]
   19342:	f009 fcaa 	bl	22c9a <z_log_msg_static_create.constprop.0>
}
   19346:	2000      	movs	r0, #0
   19348:	b007      	add	sp, #28
   1934a:	f85d fb04 	ldr.w	pc, [sp], #4
   1934e:	bf00      	nop
   19350:	00026fd9 	.word	0x00026fd9
   19354:	00025594 	.word	0x00025594

00019358 <tx_notify>:
{
   19358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	k_fifo_put(&free_tx, tx);
   1935c:	4f15      	ldr	r7, [pc, #84]	; (193b4 <tx_notify+0x5c>)
{
   1935e:	4604      	mov	r4, r0
	tx->cb = NULL;
   19360:	f04f 0800 	mov.w	r8, #0
	__asm__ volatile(
   19364:	f04f 0240 	mov.w	r2, #64	; 0x40
   19368:	f3ef 8311 	mrs	r3, BASEPRI
   1936c:	f382 8812 	msr	BASEPRI_MAX, r2
   19370:	f3bf 8f6f 	isb	sy
	return list->head;
   19374:	6a21      	ldr	r1, [r4, #32]
		if (!sys_slist_is_empty(&conn->tx_complete)) {
   19376:	b929      	cbnz	r1, 19384 <tx_notify+0x2c>
	__asm__ volatile(
   19378:	f383 8811 	msr	BASEPRI, r3
   1937c:	f3bf 8f6f 	isb	sy
}
   19380:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   19384:	6a60      	ldr	r0, [r4, #36]	; 0x24
	return node->next;
   19386:	680a      	ldr	r2, [r1, #0]
	list->head = node;
   19388:	6222      	str	r2, [r4, #32]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1938a:	4281      	cmp	r1, r0
	list->tail = node;
   1938c:	bf08      	it	eq
   1938e:	6262      	streq	r2, [r4, #36]	; 0x24
   19390:	f383 8811 	msr	BASEPRI, r3
   19394:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   19398:	e9d1 5601 	ldrd	r5, r6, [r1, #4]
	tx->pending_no_cb = 0U;
   1939c:	f8c1 800c 	str.w	r8, [r1, #12]
	tx->user_data = NULL;
   193a0:	e9c1 8801 	strd	r8, r8, [r1, #4]
	k_fifo_put(&free_tx, tx);
   193a4:	4638      	mov	r0, r7
   193a6:	f00b fa5f 	bl	24868 <k_queue_append>
		cb(conn, user_data, 0);
   193aa:	2200      	movs	r2, #0
   193ac:	4631      	mov	r1, r6
   193ae:	4620      	mov	r0, r4
   193b0:	47a8      	blx	r5
	while (1) {
   193b2:	e7d7      	b.n	19364 <tx_notify+0xc>
   193b4:	20000874 	.word	0x20000874

000193b8 <conn_tx_destroy>:
{
   193b8:	b570      	push	{r4, r5, r6, lr}
	void *user_data = tx->user_data;
   193ba:	e9d1 5601 	ldrd	r5, r6, [r1, #4]
	tx->cb = NULL;
   193be:	2200      	movs	r2, #0
	tx->user_data = NULL;
   193c0:	e9c1 2201 	strd	r2, r2, [r1, #4]
{
   193c4:	4604      	mov	r4, r0
	tx->pending_no_cb = 0U;
   193c6:	60ca      	str	r2, [r1, #12]
	k_fifo_put(&free_tx, tx);
   193c8:	4805      	ldr	r0, [pc, #20]	; (193e0 <conn_tx_destroy+0x28>)
   193ca:	f00b fa4d 	bl	24868 <k_queue_append>
	cb(conn, user_data, -ESHUTDOWN);
   193ce:	4631      	mov	r1, r6
   193d0:	4620      	mov	r0, r4
   193d2:	462b      	mov	r3, r5
   193d4:	f06f 026d 	mvn.w	r2, #109	; 0x6d
}
   193d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	cb(conn, user_data, -ESHUTDOWN);
   193dc:	4718      	bx	r3
   193de:	bf00      	nop
   193e0:	20000874 	.word	0x20000874

000193e4 <send_frag>:
{
   193e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   193e8:	4604      	mov	r4, r0
	struct bt_conn_tx *tx = tx_data(buf)->tx;
   193ea:	698d      	ldr	r5, [r1, #24]
{
   193ec:	af00      	add	r7, sp, #0
   193ee:	460e      	mov	r6, r1
   193f0:	4692      	mov	sl, r2
   193f2:	4699      	mov	r9, r3
	return z_impl_k_sem_take(sem, timeout);
   193f4:	f04f 33ff 	mov.w	r3, #4294967295
   193f8:	4850      	ldr	r0, [pc, #320]	; (1953c <send_frag+0x158>)
   193fa:	f04f 32ff 	mov.w	r2, #4294967295
   193fe:	f006 fac9 	bl	1f994 <z_impl_k_sem_take>
	if (conn->state != BT_CONN_CONNECTED) {
   19402:	7aa3      	ldrb	r3, [r4, #10]
   19404:	2b07      	cmp	r3, #7
   19406:	f040 808c 	bne.w	19522 <send_frag+0x13e>
	__asm__ volatile(
   1940a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1940e:	f3ef 8211 	mrs	r2, BASEPRI
   19412:	f383 8812 	msr	BASEPRI_MAX, r3
   19416:	f3bf 8f6f 	isb	sy
	if (tx) {
   1941a:	2d00      	cmp	r5, #0
   1941c:	d058      	beq.n	194d0 <send_frag+0xec>
	parent->next = child;
   1941e:	2300      	movs	r3, #0
   19420:	602b      	str	r3, [r5, #0]
	return list->tail;
   19422:	69a3      	ldr	r3, [r4, #24]
Z_GENLIST_APPEND(slist, snode)
   19424:	2b00      	cmp	r3, #0
   19426:	d150      	bne.n	194ca <send_frag+0xe6>
	list->head = node;
   19428:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
   1942c:	f382 8811 	msr	BASEPRI, r2
   19430:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
   19434:	2104      	movs	r1, #4
   19436:	f106 000c 	add.w	r0, r6, #12
   1943a:	f00a fd76 	bl	23f2a <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   1943e:	8823      	ldrh	r3, [r4, #0]
   19440:	f00a 0afd 	and.w	sl, sl, #253	; 0xfd
   19444:	ea43 3a0a 	orr.w	sl, r3, sl, lsl #12
   19448:	f8a0 a000 	strh.w	sl, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1944c:	8a33      	ldrh	r3, [r6, #16]
   1944e:	3b04      	subs	r3, #4
   19450:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   19452:	2302      	movs	r3, #2
   19454:	7633      	strb	r3, [r6, #24]
	return bt_send(buf);
   19456:	4630      	mov	r0, r6
   19458:	f7fe fd4a 	bl	17ef0 <bt_send>
	if (err) {
   1945c:	2800      	cmp	r0, #0
   1945e:	d06a      	beq.n	19536 <send_frag+0x152>
		LOG_ERR("Unable to send to driver (err %d)", err);
   19460:	46ea      	mov	sl, sp
   19462:	b088      	sub	sp, #32
   19464:	466a      	mov	r2, sp
   19466:	4b36      	ldr	r3, [pc, #216]	; (19540 <send_frag+0x15c>)
   19468:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1946c:	2303      	movs	r3, #3
   1946e:	f842 3f10 	str.w	r3, [r2, #16]!
   19472:	4834      	ldr	r0, [pc, #208]	; (19544 <send_frag+0x160>)
   19474:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   19478:	f009 fc0f 	bl	22c9a <z_log_msg_static_create.constprop.0>
   1947c:	46d5      	mov	sp, sl
	__asm__ volatile(
   1947e:	f04f 0340 	mov.w	r3, #64	; 0x40
   19482:	f3ef 8111 	mrs	r1, BASEPRI
   19486:	f383 8812 	msr	BASEPRI_MAX, r3
   1948a:	f3bf 8f6f 	isb	sy
		if (tx) {
   1948e:	2d00      	cmp	r5, #0
   19490:	d034      	beq.n	194fc <send_frag+0x118>
	return list->head;
   19492:	6963      	ldr	r3, [r4, #20]
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   19494:	2200      	movs	r2, #0
   19496:	b153      	cbz	r3, 194ae <send_frag+0xca>
   19498:	429d      	cmp	r5, r3
   1949a:	d12c      	bne.n	194f6 <send_frag+0x112>
	return node->next;
   1949c:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_REMOVE(slist, snode)
   1949e:	bb22      	cbnz	r2, 194ea <send_frag+0x106>
   194a0:	69a2      	ldr	r2, [r4, #24]
	list->head = node;
   194a2:	6163      	str	r3, [r4, #20]
Z_GENLIST_REMOVE(slist, snode)
   194a4:	4295      	cmp	r5, r2
   194a6:	d100      	bne.n	194aa <send_frag+0xc6>
	list->tail = node;
   194a8:	61a3      	str	r3, [r4, #24]
	parent->next = child;
   194aa:	2300      	movs	r3, #0
   194ac:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
   194ae:	f381 8811 	msr	BASEPRI, r1
   194b2:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   194b6:	4821      	ldr	r0, [pc, #132]	; (1953c <send_frag+0x158>)
   194b8:	f006 fa46 	bl	1f948 <z_impl_k_sem_give>
		tx_data(buf)->tx = NULL;
   194bc:	2300      	movs	r3, #0
   194be:	61b3      	str	r3, [r6, #24]
		conn_tx_destroy(conn, tx);
   194c0:	4629      	mov	r1, r5
   194c2:	4620      	mov	r0, r4
   194c4:	f7ff ff78 	bl	193b8 <conn_tx_destroy>
   194c8:	e024      	b.n	19514 <send_frag+0x130>
   194ca:	601d      	str	r5, [r3, #0]
	list->tail = node;
   194cc:	61a5      	str	r5, [r4, #24]
}
   194ce:	e7ad      	b.n	1942c <send_frag+0x48>
	return list->tail;
   194d0:	69a3      	ldr	r3, [r4, #24]
		if (tail_tx) {
   194d2:	b133      	cbz	r3, 194e2 <send_frag+0xfe>
			pending_no_cb = &tail_tx->pending_no_cb;
   194d4:	f103 080c 	add.w	r8, r3, #12
   194d8:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
   194da:	3301      	adds	r3, #1
   194dc:	f8c8 3000 	str.w	r3, [r8]
   194e0:	e7a4      	b.n	1942c <send_frag+0x48>
			pending_no_cb = &conn->pending_no_cb;
   194e2:	69e3      	ldr	r3, [r4, #28]
   194e4:	f104 081c 	add.w	r8, r4, #28
   194e8:	e7f7      	b.n	194da <send_frag+0xf6>
	parent->next = child;
   194ea:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   194ec:	69a3      	ldr	r3, [r4, #24]
   194ee:	429d      	cmp	r5, r3
	list->tail = node;
   194f0:	bf08      	it	eq
   194f2:	61a2      	streq	r2, [r4, #24]
}
   194f4:	e7d9      	b.n	194aa <send_frag+0xc6>
	return node->next;
   194f6:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   194f8:	681b      	ldr	r3, [r3, #0]
   194fa:	e7cc      	b.n	19496 <send_frag+0xb2>
			(*pending_no_cb)--;
   194fc:	f8d8 3000 	ldr.w	r3, [r8]
   19500:	3b01      	subs	r3, #1
   19502:	f8c8 3000 	str.w	r3, [r8]
   19506:	f381 8811 	msr	BASEPRI, r1
   1950a:	f3bf 8f6f 	isb	sy
   1950e:	480b      	ldr	r0, [pc, #44]	; (1953c <send_frag+0x158>)
   19510:	f006 fa1a 	bl	1f948 <z_impl_k_sem_give>
	if (always_consume) {
   19514:	f1b9 0f00 	cmp.w	r9, #0
   19518:	d109      	bne.n	1952e <send_frag+0x14a>
	return false;
   1951a:	2000      	movs	r0, #0
}
   1951c:	46bd      	mov	sp, r7
   1951e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   19522:	4806      	ldr	r0, [pc, #24]	; (1953c <send_frag+0x158>)
   19524:	f006 fa10 	bl	1f948 <z_impl_k_sem_give>
	if (tx) {
   19528:	2d00      	cmp	r5, #0
   1952a:	d1c7      	bne.n	194bc <send_frag+0xd8>
   1952c:	e7f2      	b.n	19514 <send_frag+0x130>
		net_buf_unref(buf);
   1952e:	4630      	mov	r0, r6
   19530:	f002 fe80 	bl	1c234 <net_buf_unref>
   19534:	e7f1      	b.n	1951a <send_frag+0x136>
	return true;
   19536:	2001      	movs	r0, #1
   19538:	e7f0      	b.n	1951c <send_frag+0x138>
   1953a:	bf00      	nop
   1953c:	20000488 	.word	0x20000488
   19540:	00026c7c 	.word	0x00026c7c
   19544:	00025594 	.word	0x00025594

00019548 <bt_conn_get_pkts>:
}
   19548:	4800      	ldr	r0, [pc, #0]	; (1954c <bt_conn_get_pkts+0x4>)
   1954a:	4770      	bx	lr
   1954c:	20000488 	.word	0x20000488

00019550 <bt_conn_new>:
{
   19550:	b538      	push	{r3, r4, r5, lr}
	for (i = 0; i < size; i++) {
   19552:	2200      	movs	r2, #0
   19554:	4604      	mov	r4, r0
   19556:	428a      	cmp	r2, r1
   19558:	d102      	bne.n	19560 <bt_conn_new+0x10>
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   1955a:	2400      	movs	r4, #0
}
   1955c:	4620      	mov	r0, r4
   1955e:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   19560:	f104 03bc 	add.w	r3, r4, #188	; 0xbc
   19564:	2001      	movs	r0, #1
   19566:	f3bf 8f5b 	dmb	ish
   1956a:	e853 5f00 	ldrex	r5, [r3]
   1956e:	2d00      	cmp	r5, #0
   19570:	d104      	bne.n	1957c <bt_conn_new+0x2c>
   19572:	e843 0c00 	strex	ip, r0, [r3]
   19576:	f1bc 0f00 	cmp.w	ip, #0
   1957a:	d1f6      	bne.n	1956a <bt_conn_new+0x1a>
   1957c:	f3bf 8f5b 	dmb	ish
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   19580:	d002      	beq.n	19588 <bt_conn_new+0x38>
   19582:	34c0      	adds	r4, #192	; 0xc0
	for (i = 0; i < size; i++) {
   19584:	4402      	add	r2, r0
   19586:	e7e6      	b.n	19556 <bt_conn_new+0x6>
	if (!conn) {
   19588:	2c00      	cmp	r4, #0
   1958a:	d0e6      	beq.n	1955a <bt_conn_new+0xa>
__ssp_bos_icheck3(memset, void *, int)
   1958c:	22bc      	movs	r2, #188	; 0xbc
   1958e:	2100      	movs	r1, #0
   19590:	4620      	mov	r0, r4
   19592:	f00b fe26 	bl	251e2 <memset>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
   19596:	f104 0058 	add.w	r0, r4, #88	; 0x58
   1959a:	4904      	ldr	r1, [pc, #16]	; (195ac <bt_conn_new+0x5c>)
   1959c:	f00b fa3f 	bl	24a1e <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
   195a0:	4903      	ldr	r1, [pc, #12]	; (195b0 <bt_conn_new+0x60>)
   195a2:	f104 0028 	add.w	r0, r4, #40	; 0x28
   195a6:	f00b f9f6 	bl	24996 <k_work_init>
	return conn;
   195aa:	e7d7      	b.n	1955c <bt_conn_new+0xc>
   195ac:	00019d09 	.word	0x00019d09
   195b0:	00022ca1 	.word	0x00022ca1

000195b4 <bt_conn_recv>:
{
   195b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   195b8:	b086      	sub	sp, #24
   195ba:	4616      	mov	r6, r2
   195bc:	af00      	add	r7, sp, #0
   195be:	4604      	mov	r4, r0
   195c0:	460d      	mov	r5, r1
	tx_notify(conn);
   195c2:	f7ff fec9 	bl	19358 <tx_notify>
	switch (flags) {
   195c6:	2e01      	cmp	r6, #1
   195c8:	d030      	beq.n	1962c <bt_conn_recv+0x78>
   195ca:	2e02      	cmp	r6, #2
   195cc:	d16a      	bne.n	196a4 <bt_conn_recv+0xf0>
		if (conn->rx) {
   195ce:	6923      	ldr	r3, [r4, #16]
   195d0:	b163      	cbz	r3, 195ec <bt_conn_recv+0x38>
			LOG_ERR("Unexpected first L2CAP frame");
   195d2:	4b40      	ldr	r3, [pc, #256]	; (196d4 <bt_conn_recv+0x120>)
   195d4:	4840      	ldr	r0, [pc, #256]	; (196d8 <bt_conn_recv+0x124>)
   195d6:	e9c7 6304 	strd	r6, r3, [r7, #16]
   195da:	f107 0210 	add.w	r2, r7, #16
   195de:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   195e2:	f009 fb5a 	bl	22c9a <z_log_msg_static_create.constprop.0>
			bt_conn_reset_rx_state(conn);
   195e6:	4620      	mov	r0, r4
   195e8:	f009 fb5d 	bl	22ca6 <bt_conn_reset_rx_state>
		conn->rx = buf;
   195ec:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   195ee:	6921      	ldr	r1, [r4, #16]
   195f0:	8a08      	ldrh	r0, [r1, #16]
   195f2:	2801      	cmp	r0, #1
   195f4:	d930      	bls.n	19658 <bt_conn_recv+0xa4>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   195f6:	68cb      	ldr	r3, [r1, #12]
   195f8:	881b      	ldrh	r3, [r3, #0]
   195fa:	3304      	adds	r3, #4
   195fc:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
   195fe:	4298      	cmp	r0, r3
   19600:	d32a      	bcc.n	19658 <bt_conn_recv+0xa4>
	if (conn->rx->len > acl_total_len) {
   19602:	d95f      	bls.n	196c4 <bt_conn_recv+0x110>
		LOG_ERR("ACL len mismatch (%u > %u)", conn->rx->len, acl_total_len);
   19604:	466d      	mov	r5, sp
   19606:	b088      	sub	sp, #32
   19608:	466a      	mov	r2, sp
   1960a:	4934      	ldr	r1, [pc, #208]	; (196dc <bt_conn_recv+0x128>)
   1960c:	61d3      	str	r3, [r2, #28]
   1960e:	2304      	movs	r3, #4
   19610:	e9c2 1005 	strd	r1, r0, [r2, #20]
   19614:	f842 3f10 	str.w	r3, [r2, #16]!
   19618:	482f      	ldr	r0, [pc, #188]	; (196d8 <bt_conn_recv+0x124>)
   1961a:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1961e:	f009 fb3c 	bl	22c9a <z_log_msg_static_create.constprop.0>
		bt_conn_reset_rx_state(conn);
   19622:	4620      	mov	r0, r4
   19624:	46ad      	mov	sp, r5
   19626:	f009 fb3e 	bl	22ca6 <bt_conn_reset_rx_state>
		return;
   1962a:	e015      	b.n	19658 <bt_conn_recv+0xa4>
		if (!conn->rx) {
   1962c:	6920      	ldr	r0, [r4, #16]
   1962e:	b970      	cbnz	r0, 1964e <bt_conn_recv+0x9a>
			LOG_ERR("Unexpected L2CAP continuation");
   19630:	4b2b      	ldr	r3, [pc, #172]	; (196e0 <bt_conn_recv+0x12c>)
   19632:	617b      	str	r3, [r7, #20]
   19634:	2302      	movs	r3, #2
   19636:	4828      	ldr	r0, [pc, #160]	; (196d8 <bt_conn_recv+0x124>)
   19638:	613b      	str	r3, [r7, #16]
   1963a:	f107 0210 	add.w	r2, r7, #16
   1963e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   19642:	f009 fb2a 	bl	22c9a <z_log_msg_static_create.constprop.0>
		bt_conn_reset_rx_state(conn);
   19646:	4620      	mov	r0, r4
   19648:	f009 fb2d 	bl	22ca6 <bt_conn_reset_rx_state>
   1964c:	e001      	b.n	19652 <bt_conn_recv+0x9e>
		if (!buf->len) {
   1964e:	8a2e      	ldrh	r6, [r5, #16]
   19650:	b936      	cbnz	r6, 19660 <bt_conn_recv+0xac>
		net_buf_unref(buf);
   19652:	4628      	mov	r0, r5
   19654:	f002 fdee 	bl	1c234 <net_buf_unref>
}
   19658:	3718      	adds	r7, #24
   1965a:	46bd      	mov	sp, r7
   1965c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
   19660:	300c      	adds	r0, #12
   19662:	f00a fc86 	bl	23f72 <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   19666:	4286      	cmp	r6, r0
   19668:	d912      	bls.n	19690 <bt_conn_recv+0xdc>
			LOG_ERR("Not enough buffer space for L2CAP data");
   1966a:	4b1e      	ldr	r3, [pc, #120]	; (196e4 <bt_conn_recv+0x130>)
   1966c:	617b      	str	r3, [r7, #20]
   1966e:	2302      	movs	r3, #2
   19670:	613b      	str	r3, [r7, #16]
   19672:	4819      	ldr	r0, [pc, #100]	; (196d8 <bt_conn_recv+0x124>)
   19674:	f107 0210 	add.w	r2, r7, #16
   19678:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1967c:	f009 fb0d 	bl	22c9a <z_log_msg_static_create.constprop.0>
			bt_l2cap_recv(conn, conn->rx, false);
   19680:	2200      	movs	r2, #0
   19682:	6921      	ldr	r1, [r4, #16]
   19684:	4620      	mov	r0, r4
   19686:	f000 fda7 	bl	1a1d8 <bt_l2cap_recv>
			conn->rx = NULL;
   1968a:	2300      	movs	r3, #0
   1968c:	6123      	str	r3, [r4, #16]
			net_buf_unref(buf);
   1968e:	e7e0      	b.n	19652 <bt_conn_recv+0x9e>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   19690:	6920      	ldr	r0, [r4, #16]
   19692:	8a2a      	ldrh	r2, [r5, #16]
   19694:	68e9      	ldr	r1, [r5, #12]
   19696:	300c      	adds	r0, #12
   19698:	f00a fc36 	bl	23f08 <net_buf_simple_add_mem>
		net_buf_unref(buf);
   1969c:	4628      	mov	r0, r5
   1969e:	f002 fdc9 	bl	1c234 <net_buf_unref>
		break;
   196a2:	e7a4      	b.n	195ee <bt_conn_recv+0x3a>
		LOG_ERR("Unexpected ACL flags (0x%02x)", flags);
   196a4:	46e8      	mov	r8, sp
   196a6:	b088      	sub	sp, #32
   196a8:	466a      	mov	r2, sp
   196aa:	4b0f      	ldr	r3, [pc, #60]	; (196e8 <bt_conn_recv+0x134>)
   196ac:	480a      	ldr	r0, [pc, #40]	; (196d8 <bt_conn_recv+0x124>)
	switch (flags) {
   196ae:	e9c2 3605 	strd	r3, r6, [r2, #20]
		LOG_ERR("Unexpected ACL flags (0x%02x)", flags);
   196b2:	2303      	movs	r3, #3
   196b4:	f842 3f10 	str.w	r3, [r2, #16]!
   196b8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   196bc:	f009 faed 	bl	22c9a <z_log_msg_static_create.constprop.0>
   196c0:	46c5      	mov	sp, r8
   196c2:	e7c0      	b.n	19646 <bt_conn_recv+0x92>
	conn->rx = NULL;
   196c4:	2300      	movs	r3, #0
   196c6:	6123      	str	r3, [r4, #16]
	bt_l2cap_recv(conn, buf, true);
   196c8:	2201      	movs	r2, #1
   196ca:	4620      	mov	r0, r4
   196cc:	f000 fd84 	bl	1a1d8 <bt_l2cap_recv>
		__ASSERT(false, "Invalid connection type %u", conn->type);
   196d0:	e7c2      	b.n	19658 <bt_conn_recv+0xa4>
   196d2:	bf00      	nop
   196d4:	00027002 	.word	0x00027002
   196d8:	00025594 	.word	0x00025594
   196dc:	00027082 	.word	0x00027082
   196e0:	0002701f 	.word	0x0002701f
   196e4:	0002703d 	.word	0x0002703d
   196e8:	00027064 	.word	0x00027064

000196ec <bt_conn_send_cb>:
{
   196ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   196f0:	4698      	mov	r8, r3
	if (conn->state != BT_CONN_CONNECTED) {
   196f2:	7a83      	ldrb	r3, [r0, #10]
   196f4:	2b07      	cmp	r3, #7
{
   196f6:	b086      	sub	sp, #24
   196f8:	4605      	mov	r5, r0
   196fa:	460f      	mov	r7, r1
   196fc:	4616      	mov	r6, r2
	if (conn->state != BT_CONN_CONNECTED) {
   196fe:	d00c      	beq.n	1971a <bt_conn_send_cb+0x2e>
		LOG_ERR("not connected!");
   19700:	4b28      	ldr	r3, [pc, #160]	; (197a4 <bt_conn_send_cb+0xb8>)
   19702:	9305      	str	r3, [sp, #20]
   19704:	4828      	ldr	r0, [pc, #160]	; (197a8 <bt_conn_send_cb+0xbc>)
   19706:	2302      	movs	r3, #2
   19708:	aa04      	add	r2, sp, #16
   1970a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1970e:	9304      	str	r3, [sp, #16]
   19710:	f009 fac3 	bl	22c9a <z_log_msg_static_create.constprop.0>
		return -ENOTCONN;
   19714:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   19718:	e01d      	b.n	19756 <bt_conn_send_cb+0x6a>
	if (cb) {
   1971a:	2a00      	cmp	r2, #0
   1971c:	d040      	beq.n	197a0 <bt_conn_send_cb+0xb4>
	return z_impl_z_current_get();
   1971e:	f006 fd77 	bl	20210 <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   19722:	4b22      	ldr	r3, [pc, #136]	; (197ac <bt_conn_send_cb+0xc0>)
   19724:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
   19726:	4822      	ldr	r0, [pc, #136]	; (197b0 <bt_conn_send_cb+0xc4>)
   19728:	bf07      	ittee	eq
   1972a:	2200      	moveq	r2, #0
   1972c:	2300      	moveq	r3, #0
   1972e:	f04f 32ff 	movne.w	r2, #4294967295
   19732:	f04f 33ff 	movne.w	r3, #4294967295
   19736:	f006 f8d3 	bl	1f8e0 <z_impl_k_queue_get>
   1973a:	4604      	mov	r4, r0
		if (!tx) {
   1973c:	b970      	cbnz	r0, 1975c <bt_conn_send_cb+0x70>
			LOG_ERR("Unable to allocate TX context");
   1973e:	4b1d      	ldr	r3, [pc, #116]	; (197b4 <bt_conn_send_cb+0xc8>)
   19740:	4819      	ldr	r0, [pc, #100]	; (197a8 <bt_conn_send_cb+0xbc>)
   19742:	9305      	str	r3, [sp, #20]
   19744:	aa04      	add	r2, sp, #16
   19746:	2302      	movs	r3, #2
   19748:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1974c:	9304      	str	r3, [sp, #16]
   1974e:	f009 faa4 	bl	22c9a <z_log_msg_static_create.constprop.0>
			return -ENOBUFS;
   19752:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   19756:	b006      	add	sp, #24
   19758:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->state != BT_CONN_CONNECTED) {
   1975c:	7aab      	ldrb	r3, [r5, #10]
   1975e:	2b07      	cmp	r3, #7
   19760:	d012      	beq.n	19788 <bt_conn_send_cb+0x9c>
			LOG_WRN("Disconnected while allocating context");
   19762:	4b15      	ldr	r3, [pc, #84]	; (197b8 <bt_conn_send_cb+0xcc>)
   19764:	9305      	str	r3, [sp, #20]
   19766:	4810      	ldr	r0, [pc, #64]	; (197a8 <bt_conn_send_cb+0xbc>)
   19768:	2302      	movs	r3, #2
   1976a:	aa04      	add	r2, sp, #16
   1976c:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   19770:	9304      	str	r3, [sp, #16]
   19772:	f009 fa92 	bl	22c9a <z_log_msg_static_create.constprop.0>
	tx->cb = NULL;
   19776:	2300      	movs	r3, #0
	tx->user_data = NULL;
   19778:	e9c4 3301 	strd	r3, r3, [r4, #4]
	k_fifo_put(&free_tx, tx);
   1977c:	480c      	ldr	r0, [pc, #48]	; (197b0 <bt_conn_send_cb+0xc4>)
	tx->pending_no_cb = 0U;
   1977e:	60e3      	str	r3, [r4, #12]
	k_fifo_put(&free_tx, tx);
   19780:	4621      	mov	r1, r4
   19782:	f00b f871 	bl	24868 <k_queue_append>
}
   19786:	e7c5      	b.n	19714 <bt_conn_send_cb+0x28>
		tx->user_data = user_data;
   19788:	e9c0 6801 	strd	r6, r8, [r0, #4]
		tx->pending_no_cb = 0U;
   1978c:	2300      	movs	r3, #0
   1978e:	60c3      	str	r3, [r0, #12]
	net_buf_put(&conn->tx_queue, buf);
   19790:	f105 0038 	add.w	r0, r5, #56	; 0x38
		tx_data(buf)->tx = tx;
   19794:	61bc      	str	r4, [r7, #24]
	net_buf_put(&conn->tx_queue, buf);
   19796:	4639      	mov	r1, r7
   19798:	f00a fb88 	bl	23eac <net_buf_put>
	return 0;
   1979c:	2000      	movs	r0, #0
   1979e:	e7da      	b.n	19756 <bt_conn_send_cb+0x6a>
   197a0:	4614      	mov	r4, r2
   197a2:	e7f5      	b.n	19790 <bt_conn_send_cb+0xa4>
   197a4:	0002709d 	.word	0x0002709d
   197a8:	00025594 	.word	0x00025594
   197ac:	20002f40 	.word	0x20002f40
   197b0:	20000874 	.word	0x20000874
   197b4:	000270ac 	.word	0x000270ac
   197b8:	000270ca 	.word	0x000270ca

000197bc <bt_conn_prepare_events>:
{
   197bc:	b570      	push	{r4, r5, r6, lr}
   197be:	4604      	mov	r4, r0
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_POLL_SIGNAL_INIT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_poll_signal_init(sig);
   197c0:	481c      	ldr	r0, [pc, #112]	; (19834 <bt_conn_prepare_events+0x78>)
   197c2:	f00b fc79 	bl	250b8 <z_impl_k_poll_signal_init>
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   197c6:	4b1b      	ldr	r3, [pc, #108]	; (19834 <bt_conn_prepare_events+0x78>)
   197c8:	2200      	movs	r2, #0
   197ca:	4620      	mov	r0, r4
   197cc:	2101      	movs	r1, #1
   197ce:	f00b fc56 	bl	2507e <k_poll_event_init>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   197d2:	f3bf 8f5b 	dmb	ish
   197d6:	4a18      	ldr	r2, [pc, #96]	; (19838 <bt_conn_prepare_events+0x7c>)
   197d8:	6813      	ldr	r3, [r2, #0]
   197da:	f3bf 8f5b 	dmb	ish
		if (!conn_prepare_events(conn, &events[ev_count])) {
   197de:	f104 0014 	add.w	r0, r4, #20
	if (!atomic_get(&conn->ref)) {
   197e2:	b90b      	cbnz	r3, 197e8 <bt_conn_prepare_events+0x2c>
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   197e4:	2001      	movs	r0, #1
}
   197e6:	bd70      	pop	{r4, r5, r6, pc}
	if (conn->state == BT_CONN_DISCONNECTED &&
   197e8:	f1a2 03bc 	sub.w	r3, r2, #188	; 0xbc
   197ec:	f812 2cb2 	ldrb.w	r2, [r2, #-178]
   197f0:	b992      	cbnz	r2, 19818 <bt_conn_prepare_events+0x5c>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   197f2:	f3bf 8f5b 	dmb	ish
   197f6:	1d1a      	adds	r2, r3, #4
   197f8:	e852 1f00 	ldrex	r1, [r2]
   197fc:	f021 0540 	bic.w	r5, r1, #64	; 0x40
   19800:	e842 5600 	strex	r6, r5, [r2]
   19804:	2e00      	cmp	r6, #0
   19806:	d1f7      	bne.n	197f8 <bt_conn_prepare_events+0x3c>
   19808:	f3bf 8f5b 	dmb	ish
   1980c:	064a      	lsls	r2, r1, #25
   1980e:	d503      	bpl.n	19818 <bt_conn_prepare_events+0x5c>
		conn_cleanup(conn);
   19810:	4618      	mov	r0, r3
   19812:	f009 fa51 	bl	22cb8 <conn_cleanup>
		return -ENOTCONN;
   19816:	e7e5      	b.n	197e4 <bt_conn_prepare_events+0x28>
	if (conn->state != BT_CONN_CONNECTED) {
   19818:	7a9b      	ldrb	r3, [r3, #10]
   1981a:	2b07      	cmp	r3, #7
   1981c:	d1e2      	bne.n	197e4 <bt_conn_prepare_events+0x28>
	k_poll_event_init(&events[0],
   1981e:	4b07      	ldr	r3, [pc, #28]	; (1983c <bt_conn_prepare_events+0x80>)
   19820:	2200      	movs	r2, #0
   19822:	2104      	movs	r1, #4
   19824:	f00b fc2b 	bl	2507e <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   19828:	2301      	movs	r3, #1
   1982a:	f884 3020 	strb.w	r3, [r4, #32]
			ev_count++;
   1982e:	2002      	movs	r0, #2
	return ev_count;
   19830:	e7d9      	b.n	197e6 <bt_conn_prepare_events+0x2a>
   19832:	bf00      	nop
   19834:	20000584 	.word	0x20000584
   19838:	20001edc 	.word	0x20001edc
   1983c:	20001e58 	.word	0x20001e58

00019840 <bt_conn_lookup_handle>:
{
   19840:	4602      	mov	r2, r0
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   19842:	2101      	movs	r1, #1
   19844:	4801      	ldr	r0, [pc, #4]	; (1984c <bt_conn_lookup_handle+0xc>)
   19846:	f009 ba92 	b.w	22d6e <conn_lookup_handle>
   1984a:	bf00      	nop
   1984c:	20001e20 	.word	0x20001e20

00019850 <bt_conn_set_state>:
{
   19850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->state == state) {
   19852:	7a86      	ldrb	r6, [r0, #10]
   19854:	428e      	cmp	r6, r1
{
   19856:	af00      	add	r7, sp, #0
   19858:	4604      	mov	r4, r0
   1985a:	460d      	mov	r5, r1
	if (conn->state == state) {
   1985c:	d118      	bne.n	19890 <bt_conn_set_state+0x40>
	switch (state) {
   1985e:	2e08      	cmp	r6, #8
   19860:	bf96      	itet	ls
   19862:	4b6d      	ldrls	r3, [pc, #436]	; (19a18 <bt_conn_set_state+0x1c8>)
	if (conn->state == state) {
   19864:	4b6d      	ldrhi	r3, [pc, #436]	; (19a1c <bt_conn_set_state+0x1cc>)
   19866:	f853 3026 	ldrls.w	r3, [r3, r6, lsl #2]
		LOG_WRN("no transition %s", state2str(state));
   1986a:	466c      	mov	r4, sp
   1986c:	b088      	sub	sp, #32
   1986e:	466a      	mov	r2, sp
   19870:	496b      	ldr	r1, [pc, #428]	; (19a20 <bt_conn_set_state+0x1d0>)
   19872:	e9c2 1305 	strd	r1, r3, [r2, #20]
   19876:	f44f 7300 	mov.w	r3, #512	; 0x200
   1987a:	8393      	strh	r3, [r2, #28]
   1987c:	4b69      	ldr	r3, [pc, #420]	; (19a24 <bt_conn_set_state+0x1d4>)
   1987e:	f842 3f10 	str.w	r3, [r2, #16]!
   19882:	f44f 51e4 	mov.w	r1, #7296	; 0x1c80
		LOG_WRN("no valid (%u) state was set", state);
   19886:	4868      	ldr	r0, [pc, #416]	; (19a28 <bt_conn_set_state+0x1d8>)
   19888:	f009 fa07 	bl	22c9a <z_log_msg_static_create.constprop.0>
   1988c:	46a5      	mov	sp, r4
   1988e:	e043      	b.n	19918 <bt_conn_set_state+0xc8>
	conn->state = state;
   19890:	7281      	strb	r1, [r0, #10]
	switch (old_state) {
   19892:	b926      	cbnz	r6, 1989e <bt_conn_set_state+0x4e>
		if (conn->type != BT_CONN_TYPE_ISO) {
   19894:	7883      	ldrb	r3, [r0, #2]
   19896:	2b08      	cmp	r3, #8
   19898:	d001      	beq.n	1989e <bt_conn_set_state+0x4e>
			bt_conn_ref(conn);
   1989a:	f009 fa30 	bl	22cfe <bt_conn_ref>
	switch (conn->state) {
   1989e:	7aa3      	ldrb	r3, [r4, #10]
   198a0:	2b08      	cmp	r3, #8
   198a2:	f200 80b3 	bhi.w	19a0c <bt_conn_set_state+0x1bc>
   198a6:	e8df f003 	tbb	[pc, r3]
   198aa:	0539      	.short	0x0539
   198ac:	37373737 	.word	0x37373737
   198b0:	1c37      	.short	0x1c37
   198b2:	37          	.byte	0x37
   198b3:	00          	.byte	0x00
	z_impl_k_sem_give(sem);
   198b4:	4d5d      	ldr	r5, [pc, #372]	; (19a2c <bt_conn_set_state+0x1dc>)
		tx->pending_no_cb = 0U;
   198b6:	2600      	movs	r6, #0
	__asm__ volatile(
   198b8:	f04f 0240 	mov.w	r2, #64	; 0x40
   198bc:	f3ef 8311 	mrs	r3, BASEPRI
   198c0:	f382 8812 	msr	BASEPRI_MAX, r2
   198c4:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   198c8:	69e2      	ldr	r2, [r4, #28]
   198ca:	2a00      	cmp	r2, #0
   198cc:	d07a      	beq.n	199c4 <bt_conn_set_state+0x174>
			conn->pending_no_cb--;
   198ce:	3a01      	subs	r2, #1
   198d0:	61e2      	str	r2, [r4, #28]
	__asm__ volatile(
   198d2:	f383 8811 	msr	BASEPRI, r3
   198d6:	f3bf 8f6f 	isb	sy
   198da:	4628      	mov	r0, r5
   198dc:	f006 f834 	bl	1f948 <z_impl_k_sem_give>
}
   198e0:	e7ea      	b.n	198b8 <bt_conn_set_state+0x68>
		if (conn->type == BT_CONN_TYPE_SCO) {
   198e2:	78a3      	ldrb	r3, [r4, #2]
   198e4:	2b04      	cmp	r3, #4
   198e6:	d017      	beq.n	19918 <bt_conn_set_state+0xc8>
	z_impl_k_queue_init(queue);
   198e8:	f104 0038 	add.w	r0, r4, #56	; 0x38
   198ec:	f00a ffb0 	bl	24850 <z_impl_k_queue_init>
		union { uintptr_t x; int val; } parm1 = { .val = result };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   198f0:	484f      	ldr	r0, [pc, #316]	; (19a30 <bt_conn_set_state+0x1e0>)
   198f2:	2100      	movs	r1, #0
   198f4:	f006 ff70 	bl	207d8 <z_impl_k_poll_signal_raise>
	list->head = NULL;
   198f8:	2300      	movs	r3, #0
	list->tail = NULL;
   198fa:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   198fe:	78e3      	ldrb	r3, [r4, #3]
   19900:	2b01      	cmp	r3, #1
   19902:	d109      	bne.n	19918 <bt_conn_set_state+0xc8>
			conn->le.conn_param_retry_countdown =
   19904:	2303      	movs	r3, #3
   19906:	f884 30ac 	strb.w	r3, [r4, #172]	; 0xac
			k_work_schedule(&conn->deferred_work,
   1990a:	f44f 3220 	mov.w	r2, #163840	; 0x28000
   1990e:	2300      	movs	r3, #0
   19910:	f104 0058 	add.w	r0, r4, #88	; 0x58
   19914:	f006 f960 	bl	1fbd8 <k_work_schedule>
}
   19918:	46bd      	mov	sp, r7
   1991a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (conn->type == BT_CONN_TYPE_SCO) {
   1991c:	78a3      	ldrb	r3, [r4, #2]
   1991e:	2b04      	cmp	r3, #4
   19920:	d103      	bne.n	1992a <bt_conn_set_state+0xda>
			bt_conn_unref(conn);
   19922:	4620      	mov	r0, r4
   19924:	f009 fa07 	bl	22d36 <bt_conn_unref>
			break;
   19928:	e7f6      	b.n	19918 <bt_conn_set_state+0xc8>
		switch (old_state) {
   1992a:	2e08      	cmp	r6, #8
   1992c:	d8f4      	bhi.n	19918 <bt_conn_set_state+0xc8>
   1992e:	a301      	add	r3, pc, #4	; (adr r3, 19934 <bt_conn_set_state+0xe4>)
   19930:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   19934:	000199ad 	.word	0x000199ad
   19938:	00019959 	.word	0x00019959
   1993c:	0001999f 	.word	0x0001999f
   19940:	00019923 	.word	0x00019923
   19944:	00019923 	.word	0x00019923
   19948:	0001999f 	.word	0x0001999f
   1994c:	0001999f 	.word	0x0001999f
   19950:	00019919 	.word	0x00019919
   19954:	000199ad 	.word	0x000199ad
			tx_notify(conn);
   19958:	4620      	mov	r0, r4
   1995a:	f7ff fcfd 	bl	19358 <tx_notify>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   1995e:	78a3      	ldrb	r3, [r4, #2]
   19960:	2b01      	cmp	r3, #1
   19962:	d10a      	bne.n	1997a <bt_conn_set_state+0x12a>
			    (k_work_delayable_busy_get(&conn->deferred_work) &
   19964:	f104 0558 	add.w	r5, r4, #88	; 0x58
   19968:	4628      	mov	r0, r5
   1996a:	f00b f864 	bl	24a36 <k_work_delayable_busy_get>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   1996e:	f010 0f0c 	tst.w	r0, #12
   19972:	d002      	beq.n	1997a <bt_conn_set_state+0x12a>
				k_work_cancel_delayable(&conn->deferred_work);
   19974:	4628      	mov	r0, r5
   19976:	f00b f860 	bl	24a3a <k_work_cancel_delayable>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1997a:	f3bf 8f5b 	dmb	ish
   1997e:	3404      	adds	r4, #4
   19980:	e854 3f00 	ldrex	r3, [r4]
   19984:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   19988:	e844 3200 	strex	r2, r3, [r4]
   1998c:	2a00      	cmp	r2, #0
   1998e:	d1f7      	bne.n	19980 <bt_conn_set_state+0x130>
   19990:	f3bf 8f5b 	dmb	ish
   19994:	2100      	movs	r1, #0
   19996:	4826      	ldr	r0, [pc, #152]	; (19a30 <bt_conn_set_state+0x1e0>)
   19998:	f006 ff1e 	bl	207d8 <z_impl_k_poll_signal_raise>
   1999c:	e7bc      	b.n	19918 <bt_conn_set_state+0xc8>
			if (conn->err) {
   1999e:	7a63      	ldrb	r3, [r4, #9]
   199a0:	2b00      	cmp	r3, #0
   199a2:	d0be      	beq.n	19922 <bt_conn_set_state+0xd2>
				notify_connected(conn);
   199a4:	4620      	mov	r0, r4
   199a6:	f7ff fca5 	bl	192f4 <notify_connected>
   199aa:	e7ba      	b.n	19922 <bt_conn_set_state+0xd2>
			LOG_WRN("Invalid (%u) old state", state);
   199ac:	466c      	mov	r4, sp
   199ae:	b088      	sub	sp, #32
   199b0:	466a      	mov	r2, sp
   199b2:	4b20      	ldr	r3, [pc, #128]	; (19a34 <bt_conn_set_state+0x1e4>)
		LOG_WRN("no valid (%u) state was set", state);
   199b4:	e9c2 3505 	strd	r3, r5, [r2, #20]
   199b8:	2303      	movs	r3, #3
   199ba:	f842 3f10 	str.w	r3, [r2, #16]!
   199be:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   199c2:	e760      	b.n	19886 <bt_conn_set_state+0x36>
	return list->head;
   199c4:	6961      	ldr	r1, [r4, #20]
Z_GENLIST_GET(slist, snode)
   199c6:	b921      	cbnz	r1, 199d2 <bt_conn_set_state+0x182>
   199c8:	f383 8811 	msr	BASEPRI, r3
   199cc:	f3bf 8f6f 	isb	sy
		if (!node) {
   199d0:	e7a2      	b.n	19918 <bt_conn_set_state+0xc8>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   199d2:	69a0      	ldr	r0, [r4, #24]
	return node->next;
   199d4:	680a      	ldr	r2, [r1, #0]
	list->head = node;
   199d6:	6162      	str	r2, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   199d8:	4281      	cmp	r1, r0
	list->tail = node;
   199da:	bf08      	it	eq
   199dc:	61a2      	streq	r2, [r4, #24]
   199de:	f383 8811 	msr	BASEPRI, r3
   199e2:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   199e6:	f04f 0240 	mov.w	r2, #64	; 0x40
   199ea:	f3ef 8311 	mrs	r3, BASEPRI
   199ee:	f382 8812 	msr	BASEPRI_MAX, r2
   199f2:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   199f6:	68ca      	ldr	r2, [r1, #12]
   199f8:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   199fa:	60ce      	str	r6, [r1, #12]
	__asm__ volatile(
   199fc:	f383 8811 	msr	BASEPRI, r3
   19a00:	f3bf 8f6f 	isb	sy
		conn_tx_destroy(conn, tx);
   19a04:	4620      	mov	r0, r4
   19a06:	f7ff fcd7 	bl	193b8 <conn_tx_destroy>
   19a0a:	e766      	b.n	198da <bt_conn_set_state+0x8a>
		LOG_WRN("no valid (%u) state was set", state);
   19a0c:	466c      	mov	r4, sp
   19a0e:	b088      	sub	sp, #32
   19a10:	466a      	mov	r2, sp
   19a12:	4b09      	ldr	r3, [pc, #36]	; (19a38 <bt_conn_set_state+0x1e8>)
   19a14:	e7ce      	b.n	199b4 <bt_conn_set_state+0x164>
   19a16:	bf00      	nop
   19a18:	000258bc 	.word	0x000258bc
   19a1c:	000270f0 	.word	0x000270f0
   19a20:	000270fa 	.word	0x000270fa
   19a24:	01000003 	.word	0x01000003
   19a28:	00025594 	.word	0x00025594
   19a2c:	20000488 	.word	0x20000488
   19a30:	20000584 	.word	0x20000584
   19a34:	0002710b 	.word	0x0002710b
   19a38:	00027122 	.word	0x00027122

00019a3c <bt_conn_index>:
		index = conn - acl_conns;
   19a3c:	4b03      	ldr	r3, [pc, #12]	; (19a4c <bt_conn_index+0x10>)
   19a3e:	1ac0      	subs	r0, r0, r3
   19a40:	4b03      	ldr	r3, [pc, #12]	; (19a50 <bt_conn_index+0x14>)
   19a42:	1180      	asrs	r0, r0, #6
   19a44:	4358      	muls	r0, r3
}
   19a46:	b2c0      	uxtb	r0, r0
   19a48:	4770      	bx	lr
   19a4a:	bf00      	nop
   19a4c:	20001e20 	.word	0x20001e20
   19a50:	aaaaaaab 	.word	0xaaaaaaab

00019a54 <bt_conn_create_pdu_timeout>:
{
   19a54:	b538      	push	{r3, r4, r5, lr}
   19a56:	460d      	mov	r5, r1
	return net_buf_alloc_fixed(pool, timeout);
   19a58:	4908      	ldr	r1, [pc, #32]	; (19a7c <bt_conn_create_pdu_timeout+0x28>)
   19a5a:	2800      	cmp	r0, #0
   19a5c:	bf08      	it	eq
   19a5e:	4608      	moveq	r0, r1
   19a60:	f00a f9ec 	bl	23e3c <net_buf_alloc_fixed>
	if (!buf) {
   19a64:	4604      	mov	r4, r0
   19a66:	b918      	cbnz	r0, 19a70 <bt_conn_create_pdu_timeout+0x1c>
}
   19a68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   19a6c:	f7ff bc60 	b.w	19330 <bt_conn_create_pdu_timeout.part.0>
	net_buf_simple_reserve(&buf->b, reserve);
   19a70:	1d29      	adds	r1, r5, #4
   19a72:	300c      	adds	r0, #12
   19a74:	f00a f9e9 	bl	23e4a <net_buf_simple_reserve>
   19a78:	4620      	mov	r0, r4
   19a7a:	bd38      	pop	{r3, r4, r5, pc}
   19a7c:	2000088c 	.word	0x2000088c

00019a80 <notify_le_param_updated>:
	}
}
#endif /* defined(CONFIG_BT_REMOTE_INFO) */

void notify_le_param_updated(struct bt_conn *conn)
{
   19a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   19a82:	f3bf 8f5b 	dmb	ish
   19a86:	6842      	ldr	r2, [r0, #4]
   19a88:	f3bf 8f5b 	dmb	ish
	struct bt_conn_cb *cb;

	/* If new connection parameters meet requirement of pending
	 * parameters don't send peripheral conn param request anymore on timeout
	 */
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   19a8c:	0592      	lsls	r2, r2, #22
{
   19a8e:	4604      	mov	r4, r0
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   19a90:	f100 0304 	add.w	r3, r0, #4
   19a94:	d519      	bpl.n	19aca <notify_le_param_updated+0x4a>
	    conn->le.interval >= conn->le.interval_min &&
   19a96:	f8b0 209e 	ldrh.w	r2, [r0, #158]	; 0x9e
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   19a9a:	f8b0 10a0 	ldrh.w	r1, [r0, #160]	; 0xa0
   19a9e:	4291      	cmp	r1, r2
   19aa0:	d813      	bhi.n	19aca <notify_le_param_updated+0x4a>
	    conn->le.interval >= conn->le.interval_min &&
   19aa2:	f8b0 10a2 	ldrh.w	r1, [r0, #162]	; 0xa2
   19aa6:	4291      	cmp	r1, r2
   19aa8:	d30f      	bcc.n	19aca <notify_le_param_updated+0x4a>
	    conn->le.interval <= conn->le.interval_max &&
	    conn->le.latency == conn->le.pending_latency &&
   19aaa:	e9d0 1229 	ldrd	r1, r2, [r0, #164]	; 0xa4
   19aae:	4291      	cmp	r1, r2
   19ab0:	d10b      	bne.n	19aca <notify_le_param_updated+0x4a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   19ab2:	f3bf 8f5b 	dmb	ish
   19ab6:	e853 1f00 	ldrex	r1, [r3]
   19aba:	f421 7100 	bic.w	r1, r1, #512	; 0x200
   19abe:	e843 1200 	strex	r2, r1, [r3]
   19ac2:	2a00      	cmp	r2, #0
   19ac4:	d1f7      	bne.n	19ab6 <notify_le_param_updated+0x36>
   19ac6:	f3bf 8f5b 	dmb	ish
	    conn->le.timeout == conn->le.pending_timeout) {
		atomic_clear_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   19aca:	4b10      	ldr	r3, [pc, #64]	; (19b0c <notify_le_param_updated+0x8c>)
   19acc:	681d      	ldr	r5, [r3, #0]
   19ace:	b925      	cbnz	r5, 19ada <notify_le_param_updated+0x5a>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   19ad0:	4d0f      	ldr	r5, [pc, #60]	; (19b10 <notify_le_param_updated+0x90>)
   19ad2:	4f10      	ldr	r7, [pc, #64]	; (19b14 <notify_le_param_updated+0x94>)
   19ad4:	42bd      	cmp	r5, r7
   19ad6:	d30c      	bcc.n	19af2 <notify_le_param_updated+0x72>
			cb->le_param_updated(conn, conn->le.interval,
					     conn->le.latency,
					     conn->le.timeout);
		}
	}
}
   19ad8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->le_param_updated) {
   19ada:	68ee      	ldr	r6, [r5, #12]
   19adc:	b13e      	cbz	r6, 19aee <notify_le_param_updated+0x6e>
			cb->le_param_updated(conn, conn->le.interval,
   19ade:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   19ae2:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   19ae6:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   19aea:	4620      	mov	r0, r4
   19aec:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
   19aee:	692d      	ldr	r5, [r5, #16]
   19af0:	e7ed      	b.n	19ace <notify_le_param_updated+0x4e>
		if (cb->le_param_updated) {
   19af2:	68ee      	ldr	r6, [r5, #12]
   19af4:	b13e      	cbz	r6, 19b06 <notify_le_param_updated+0x86>
			cb->le_param_updated(conn, conn->le.interval,
   19af6:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   19afa:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   19afe:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   19b02:	4620      	mov	r0, r4
   19b04:	47b0      	blx	r6
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   19b06:	3514      	adds	r5, #20
   19b08:	e7e4      	b.n	19ad4 <notify_le_param_updated+0x54>
   19b0a:	bf00      	nop
   19b0c:	20004f70 	.word	0x20004f70
   19b10:	00025548 	.word	0x00025548
   19b14:	0002555c 	.word	0x0002555c

00019b18 <le_param_req>:
	}
}
#endif

bool le_param_req(struct bt_conn *conn, struct bt_le_conn_param *param)
{
   19b18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19b1c:	4607      	mov	r7, r0
	struct bt_conn_cb *cb;

	if (!bt_le_conn_params_valid(param)) {
   19b1e:	4608      	mov	r0, r1
{
   19b20:	460c      	mov	r4, r1
	if (!bt_le_conn_params_valid(param)) {
   19b22:	f008 ff47 	bl	229b4 <bt_le_conn_params_valid>
   19b26:	4605      	mov	r5, r0
   19b28:	b918      	cbnz	r0, 19b32 <le_param_req+0x1a>
		return false;
   19b2a:	2500      	movs	r5, #0
		}
	}

	/* Default to accepting if there's no app callback */
	return true;
}
   19b2c:	4628      	mov	r0, r5
   19b2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
   19b32:	4b13      	ldr	r3, [pc, #76]	; (19b80 <le_param_req+0x68>)
   19b34:	681e      	ldr	r6, [r3, #0]
   19b36:	b946      	cbnz	r6, 19b4a <le_param_req+0x32>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   19b38:	4e12      	ldr	r6, [pc, #72]	; (19b84 <le_param_req+0x6c>)
   19b3a:	f8df 804c 	ldr.w	r8, [pc, #76]	; 19b88 <le_param_req+0x70>
   19b3e:	4546      	cmp	r6, r8
   19b40:	d2f4      	bcs.n	19b2c <le_param_req+0x14>
		if (!cb->le_param_req) {
   19b42:	68b3      	ldr	r3, [r6, #8]
   19b44:	b983      	cbnz	r3, 19b68 <le_param_req+0x50>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   19b46:	3614      	adds	r6, #20
   19b48:	e7f9      	b.n	19b3e <le_param_req+0x26>
		if (!cb->le_param_req) {
   19b4a:	68b3      	ldr	r3, [r6, #8]
   19b4c:	b90b      	cbnz	r3, 19b52 <le_param_req+0x3a>
	for (cb = callback_list; cb; cb = cb->_next) {
   19b4e:	6936      	ldr	r6, [r6, #16]
   19b50:	e7f1      	b.n	19b36 <le_param_req+0x1e>
		if (!cb->le_param_req(conn, param)) {
   19b52:	4621      	mov	r1, r4
   19b54:	4638      	mov	r0, r7
   19b56:	4798      	blx	r3
   19b58:	2800      	cmp	r0, #0
   19b5a:	d0e6      	beq.n	19b2a <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   19b5c:	4620      	mov	r0, r4
   19b5e:	f008 ff29 	bl	229b4 <bt_le_conn_params_valid>
   19b62:	2800      	cmp	r0, #0
   19b64:	d1f3      	bne.n	19b4e <le_param_req+0x36>
   19b66:	e7e0      	b.n	19b2a <le_param_req+0x12>
		if (!cb->le_param_req(conn, param)) {
   19b68:	4621      	mov	r1, r4
   19b6a:	4638      	mov	r0, r7
   19b6c:	4798      	blx	r3
   19b6e:	2800      	cmp	r0, #0
   19b70:	d0db      	beq.n	19b2a <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   19b72:	4620      	mov	r0, r4
   19b74:	f008 ff1e 	bl	229b4 <bt_le_conn_params_valid>
   19b78:	2800      	cmp	r0, #0
   19b7a:	d1e4      	bne.n	19b46 <le_param_req+0x2e>
   19b7c:	e7d5      	b.n	19b2a <le_param_req+0x12>
   19b7e:	bf00      	nop
   19b80:	20004f70 	.word	0x20004f70
   19b84:	00025548 	.word	0x00025548
   19b88:	0002555c 	.word	0x0002555c

00019b8c <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
   19b8c:	b538      	push	{r3, r4, r5, lr}
   19b8e:	4605      	mov	r5, r0
   19b90:	460c      	mov	r4, r1
	return bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
   19b92:	480a      	ldr	r0, [pc, #40]	; (19bbc <bt_conn_add_le+0x30>)
   19b94:	2101      	movs	r1, #1
   19b96:	f7ff fcdb 	bl	19550 <bt_conn_new>
	struct bt_conn *conn = acl_conn_new();

	if (!conn) {
   19b9a:	b170      	cbz	r0, 19bba <bt_conn_add_le+0x2e>
		return NULL;
	}

	conn->id = id;
   19b9c:	7205      	strb	r5, [r0, #8]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   19b9e:	6823      	ldr	r3, [r4, #0]
   19ba0:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
   19ba4:	88a3      	ldrh	r3, [r4, #4]
   19ba6:	f8a0 308c 	strh.w	r3, [r0, #140]	; 0x8c
   19baa:	79a3      	ldrb	r3, [r4, #6]
   19bac:	f880 308e 	strb.w	r3, [r0, #142]	; 0x8e
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
	conn->required_sec_level = BT_SECURITY_L1;
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
   19bb0:	2301      	movs	r3, #1
   19bb2:	7083      	strb	r3, [r0, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
   19bb4:	4b02      	ldr	r3, [pc, #8]	; (19bc0 <bt_conn_add_le+0x34>)
   19bb6:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
   19bba:	bd38      	pop	{r3, r4, r5, pc}
   19bbc:	20001e20 	.word	0x20001e20
   19bc0:	00280018 	.word	0x00280018

00019bc4 <bt_conn_lookup_addr_le>:

	return bt_addr_le_eq(peer, &conn->le.init_addr);
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
   19bc4:	b570      	push	{r4, r5, r6, lr}
   19bc6:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   19bc8:	480a      	ldr	r0, [pc, #40]	; (19bf4 <bt_conn_lookup_addr_le+0x30>)
{
   19bca:	460e      	mov	r6, r1
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   19bcc:	f009 f897 	bl	22cfe <bt_conn_ref>
   19bd0:	4604      	mov	r4, r0

		if (!conn) {
   19bd2:	b120      	cbz	r0, 19bde <bt_conn_lookup_addr_le+0x1a>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   19bd4:	7883      	ldrb	r3, [r0, #2]
   19bd6:	2b01      	cmp	r3, #1
   19bd8:	d004      	beq.n	19be4 <bt_conn_lookup_addr_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
			bt_conn_unref(conn);
   19bda:	f009 f8ac 	bl	22d36 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   19bde:	2400      	movs	r4, #0
}
   19be0:	4620      	mov	r0, r4
   19be2:	bd70      	pop	{r4, r5, r6, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
   19be4:	4632      	mov	r2, r6
   19be6:	4629      	mov	r1, r5
   19be8:	f009 f8ee 	bl	22dc8 <bt_conn_is_peer_addr_le>
   19bec:	2800      	cmp	r0, #0
   19bee:	d1f7      	bne.n	19be0 <bt_conn_lookup_addr_le+0x1c>
			bt_conn_unref(conn);
   19bf0:	4620      	mov	r0, r4
   19bf2:	e7f2      	b.n	19bda <bt_conn_lookup_addr_le+0x16>
   19bf4:	20001e20 	.word	0x20001e20

00019bf8 <bt_conn_exists_le>:
{
   19bf8:	b5b0      	push	{r4, r5, r7, lr}
   19bfa:	af00      	add	r7, sp, #0
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   19bfc:	f7ff ffe2 	bl	19bc4 <bt_conn_lookup_addr_le>
	if (conn) {
   19c00:	4604      	mov	r4, r0
   19c02:	b1e0      	cbz	r0, 19c3e <bt_conn_exists_le+0x46>
		LOG_WRN("Found valid connection in %s state", state2str(conn->state));
   19c04:	7a83      	ldrb	r3, [r0, #10]
	switch (state) {
   19c06:	2b08      	cmp	r3, #8
   19c08:	bf96      	itet	ls
   19c0a:	4a0e      	ldrls	r2, [pc, #56]	; (19c44 <bt_conn_exists_le+0x4c>)
		LOG_WRN("Found valid connection in %s state", state2str(conn->state));
   19c0c:	4b0e      	ldrhi	r3, [pc, #56]	; (19c48 <bt_conn_exists_le+0x50>)
   19c0e:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
   19c12:	466d      	mov	r5, sp
   19c14:	b088      	sub	sp, #32
   19c16:	466a      	mov	r2, sp
   19c18:	490c      	ldr	r1, [pc, #48]	; (19c4c <bt_conn_exists_le+0x54>)
   19c1a:	480d      	ldr	r0, [pc, #52]	; (19c50 <bt_conn_exists_le+0x58>)
   19c1c:	e9c2 1305 	strd	r1, r3, [r2, #20]
   19c20:	f44f 7300 	mov.w	r3, #512	; 0x200
   19c24:	8393      	strh	r3, [r2, #28]
   19c26:	4b0b      	ldr	r3, [pc, #44]	; (19c54 <bt_conn_exists_le+0x5c>)
   19c28:	f842 3f10 	str.w	r3, [r2, #16]!
   19c2c:	f44f 51e4 	mov.w	r1, #7296	; 0x1c80
   19c30:	f009 f833 	bl	22c9a <z_log_msg_static_create.constprop.0>
		bt_conn_unref(conn);
   19c34:	4620      	mov	r0, r4
   19c36:	46ad      	mov	sp, r5
   19c38:	f009 f87d 	bl	22d36 <bt_conn_unref>
		return true;
   19c3c:	2001      	movs	r0, #1
}
   19c3e:	46bd      	mov	sp, r7
   19c40:	bdb0      	pop	{r4, r5, r7, pc}
   19c42:	bf00      	nop
   19c44:	000258bc 	.word	0x000258bc
   19c48:	000270f0 	.word	0x000270f0
   19c4c:	0002713e 	.word	0x0002713e
   19c50:	00025594 	.word	0x00025594
   19c54:	01000003 	.word	0x01000003

00019c58 <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
   19c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19c5a:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   19c5c:	480e      	ldr	r0, [pc, #56]	; (19c98 <bt_conn_lookup_state_le+0x40>)
{
   19c5e:	460e      	mov	r6, r1
   19c60:	4617      	mov	r7, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   19c62:	f009 f84c 	bl	22cfe <bt_conn_ref>

		if (!conn) {
   19c66:	4604      	mov	r4, r0
   19c68:	b120      	cbz	r0, 19c74 <bt_conn_lookup_state_le+0x1c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   19c6a:	7883      	ldrb	r3, [r0, #2]
   19c6c:	2b01      	cmp	r3, #1
   19c6e:	d003      	beq.n	19c78 <bt_conn_lookup_state_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!(conn->state == state && conn->id == id)) {
			bt_conn_unref(conn);
   19c70:	f009 f861 	bl	22d36 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   19c74:	2400      	movs	r4, #0
   19c76:	e00d      	b.n	19c94 <bt_conn_lookup_state_le+0x3c>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
   19c78:	b136      	cbz	r6, 19c88 <bt_conn_lookup_state_le+0x30>
   19c7a:	4632      	mov	r2, r6
   19c7c:	4629      	mov	r1, r5
   19c7e:	f009 f8a3 	bl	22dc8 <bt_conn_is_peer_addr_le>
   19c82:	b908      	cbnz	r0, 19c88 <bt_conn_lookup_state_le+0x30>
			bt_conn_unref(conn);
   19c84:	4620      	mov	r0, r4
   19c86:	e7f3      	b.n	19c70 <bt_conn_lookup_state_le+0x18>
		if (!(conn->state == state && conn->id == id)) {
   19c88:	7aa3      	ldrb	r3, [r4, #10]
   19c8a:	42bb      	cmp	r3, r7
   19c8c:	d1fa      	bne.n	19c84 <bt_conn_lookup_state_le+0x2c>
   19c8e:	7a23      	ldrb	r3, [r4, #8]
   19c90:	42ab      	cmp	r3, r5
   19c92:	d1f7      	bne.n	19c84 <bt_conn_lookup_state_le+0x2c>
}
   19c94:	4620      	mov	r0, r4
   19c96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19c98:	20001e20 	.word	0x20001e20

00019c9c <send_conn_le_param_update>:
{
   19c9c:	b538      	push	{r3, r4, r5, lr}
   19c9e:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
   19ca0:	4608      	mov	r0, r1
{
   19ca2:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   19ca4:	f008 fe86 	bl	229b4 <bt_le_conn_params_valid>
   19ca8:	b348      	cbz	r0, 19cfe <send_conn_le_param_update+0x62>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   19caa:	4b16      	ldr	r3, [pc, #88]	; (19d04 <send_conn_le_param_update+0x68>)
   19cac:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
   19cb0:	0799      	lsls	r1, r3, #30
   19cb2:	d407      	bmi.n	19cc4 <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_L2CAP)) ||
   19cb4:	78e3      	ldrb	r3, [r4, #3]
   19cb6:	b183      	cbz	r3, 19cda <send_conn_le_param_update+0x3e>
	return bt_l2cap_update_conn_param(conn, param);
   19cb8:	4629      	mov	r1, r5
   19cba:	4620      	mov	r0, r4
}
   19cbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
   19cc0:	f000 bac8 	b.w	1a254 <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   19cc4:	f894 30ad 	ldrb.w	r3, [r4, #173]	; 0xad
   19cc8:	079a      	lsls	r2, r3, #30
   19cca:	d5f3      	bpl.n	19cb4 <send_conn_le_param_update+0x18>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   19ccc:	f3bf 8f5b 	dmb	ish
   19cd0:	6863      	ldr	r3, [r4, #4]
   19cd2:	f3bf 8f5b 	dmb	ish
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   19cd6:	055b      	lsls	r3, r3, #21
   19cd8:	d4ec      	bmi.n	19cb4 <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
   19cda:	4629      	mov	r1, r5
   19cdc:	4620      	mov	r0, r4
   19cde:	f009 f893 	bl	22e08 <bt_conn_le_conn_update>
		if (rc == 0) {
   19ce2:	b958      	cbnz	r0, 19cfc <send_conn_le_param_update+0x60>
			conn->le.interval_min = param->interval_min;
   19ce4:	882b      	ldrh	r3, [r5, #0]
   19ce6:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
			conn->le.interval_max = param->interval_max;
   19cea:	886b      	ldrh	r3, [r5, #2]
   19cec:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
			conn->le.pending_latency = param->latency;
   19cf0:	88ab      	ldrh	r3, [r5, #4]
   19cf2:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.pending_timeout = param->timeout;
   19cf6:	88eb      	ldrh	r3, [r5, #6]
   19cf8:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
}
   19cfc:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   19cfe:	f06f 0015 	mvn.w	r0, #21
   19d02:	e7fb      	b.n	19cfc <send_conn_le_param_update+0x60>
   19d04:	20000388 	.word	0x20000388

00019d08 <deferred_work>:
{
   19d08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19d0c:	b082      	sub	sp, #8
	if (conn->state == BT_CONN_DISCONNECTED) {
   19d0e:	f810 3c4e 	ldrb.w	r3, [r0, #-78]
{
   19d12:	af00      	add	r7, sp, #0
   19d14:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(dwork, struct bt_conn, deferred_work);
   19d16:	f1a0 0658 	sub.w	r6, r0, #88	; 0x58
	if (conn->state == BT_CONN_DISCONNECTED) {
   19d1a:	bb0b      	cbnz	r3, 19d60 <deferred_work+0x58>
		bt_l2cap_disconnected(conn);
   19d1c:	4630      	mov	r0, r6
   19d1e:	f009 f8d0 	bl	22ec2 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
   19d22:	4b40      	ldr	r3, [pc, #256]	; (19e24 <deferred_work+0x11c>)
   19d24:	681d      	ldr	r5, [r3, #0]
   19d26:	b95d      	cbnz	r5, 19d40 <deferred_work+0x38>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   19d28:	4d3f      	ldr	r5, [pc, #252]	; (19e28 <deferred_work+0x120>)
   19d2a:	f8df 810c 	ldr.w	r8, [pc, #268]	; 19e38 <deferred_work+0x130>
   19d2e:	4545      	cmp	r5, r8
   19d30:	d30e      	bcc.n	19d50 <deferred_work+0x48>
		bt_conn_unref(conn);
   19d32:	4630      	mov	r0, r6
   19d34:	f008 ffff 	bl	22d36 <bt_conn_unref>
}
   19d38:	3708      	adds	r7, #8
   19d3a:	46bd      	mov	sp, r7
   19d3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (cb->disconnected) {
   19d40:	686b      	ldr	r3, [r5, #4]
   19d42:	b11b      	cbz	r3, 19d4c <deferred_work+0x44>
			cb->disconnected(conn, conn->err);
   19d44:	f814 1c4f 	ldrb.w	r1, [r4, #-79]
   19d48:	4630      	mov	r0, r6
   19d4a:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   19d4c:	692d      	ldr	r5, [r5, #16]
   19d4e:	e7ea      	b.n	19d26 <deferred_work+0x1e>
		if (cb->disconnected) {
   19d50:	686b      	ldr	r3, [r5, #4]
   19d52:	b11b      	cbz	r3, 19d5c <deferred_work+0x54>
			cb->disconnected(conn, conn->err);
   19d54:	f814 1c4f 	ldrb.w	r1, [r4, #-79]
   19d58:	4630      	mov	r0, r6
   19d5a:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   19d5c:	3514      	adds	r5, #20
   19d5e:	e7e6      	b.n	19d2e <deferred_work+0x26>
	if (conn->type != BT_CONN_TYPE_LE) {
   19d60:	f810 3c56 	ldrb.w	r3, [r0, #-86]
   19d64:	2b01      	cmp	r3, #1
   19d66:	d1e7      	bne.n	19d38 <deferred_work+0x30>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   19d68:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(conn->flags,
   19d6c:	f1a0 0554 	sub.w	r5, r0, #84	; 0x54
   19d70:	e855 3f00 	ldrex	r3, [r5]
   19d74:	f423 7200 	bic.w	r2, r3, #512	; 0x200
   19d78:	e845 2100 	strex	r1, r2, [r5]
   19d7c:	2900      	cmp	r1, #0
   19d7e:	d1f7      	bne.n	19d70 <deferred_work+0x68>
   19d80:	f3bf 8f5b 	dmb	ish
   19d84:	0599      	lsls	r1, r3, #22
   19d86:	d531      	bpl.n	19dec <deferred_work+0xe4>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   19d88:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   19d8a:	603b      	str	r3, [r7, #0]
   19d8c:	6d23      	ldr	r3, [r4, #80]	; 0x50
   19d8e:	607b      	str	r3, [r7, #4]
		err = send_conn_le_param_update(conn, param);
   19d90:	4639      	mov	r1, r7
   19d92:	4630      	mov	r0, r6
   19d94:	f7ff ff82 	bl	19c9c <send_conn_le_param_update>
		if (!err) {
   19d98:	b9c0      	cbnz	r0, 19dcc <deferred_work+0xc4>
   19d9a:	f3bf 8f5b 	dmb	ish
   19d9e:	e855 3f00 	ldrex	r3, [r5]
   19da2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   19da6:	e845 3200 	strex	r2, r3, [r5]
   19daa:	2a00      	cmp	r2, #0
   19dac:	d1f7      	bne.n	19d9e <deferred_work+0x96>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   19dae:	f3bf 8f5b 	dmb	ish
   19db2:	f3bf 8f5b 	dmb	ish
   19db6:	e855 3f00 	ldrex	r3, [r5]
   19dba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   19dbe:	e845 3200 	strex	r2, r3, [r5]
   19dc2:	2a00      	cmp	r2, #0
   19dc4:	d1f7      	bne.n	19db6 <deferred_work+0xae>
   19dc6:	f3bf 8f5b 	dmb	ish
   19dca:	e7b5      	b.n	19d38 <deferred_work+0x30>
			LOG_WRN("Send LE param update failed (err %d)", err);
   19dcc:	466c      	mov	r4, sp
   19dce:	b088      	sub	sp, #32
   19dd0:	466a      	mov	r2, sp
   19dd2:	4b16      	ldr	r3, [pc, #88]	; (19e2c <deferred_work+0x124>)
			LOG_WRN("Send auto LE param update failed (err %d)",
   19dd4:	e9c2 3005 	strd	r3, r0, [r2, #20]
   19dd8:	2303      	movs	r3, #3
   19dda:	f842 3f10 	str.w	r3, [r2, #16]!
   19dde:	4814      	ldr	r0, [pc, #80]	; (19e30 <deferred_work+0x128>)
   19de0:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   19de4:	f008 ff59 	bl	22c9a <z_log_msg_static_create.constprop.0>
   19de8:	46a5      	mov	sp, r4
   19dea:	e7e2      	b.n	19db2 <deferred_work+0xaa>
		param = BT_LE_CONN_PARAM(
   19dec:	f04f 1206 	mov.w	r2, #393222	; 0x60006
   19df0:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
   19df4:	e9c7 2300 	strd	r2, r3, [r7]
		err = send_conn_le_param_update(conn, param);
   19df8:	4639      	mov	r1, r7
   19dfa:	4630      	mov	r0, r6
   19dfc:	f7ff ff4e 	bl	19c9c <send_conn_le_param_update>
		if (!err) {
   19e00:	b950      	cbnz	r0, 19e18 <deferred_work+0x110>
   19e02:	f3bf 8f5b 	dmb	ish
   19e06:	e855 3f00 	ldrex	r3, [r5]
   19e0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   19e0e:	e845 3200 	strex	r2, r3, [r5]
   19e12:	2a00      	cmp	r2, #0
   19e14:	d0cb      	beq.n	19dae <deferred_work+0xa6>
   19e16:	e7f6      	b.n	19e06 <deferred_work+0xfe>
			LOG_WRN("Send auto LE param update failed (err %d)",
   19e18:	466c      	mov	r4, sp
   19e1a:	b088      	sub	sp, #32
   19e1c:	466a      	mov	r2, sp
   19e1e:	4b05      	ldr	r3, [pc, #20]	; (19e34 <deferred_work+0x12c>)
   19e20:	e7d8      	b.n	19dd4 <deferred_work+0xcc>
   19e22:	bf00      	nop
   19e24:	20004f70 	.word	0x20004f70
   19e28:	00025548 	.word	0x00025548
   19e2c:	00027161 	.word	0x00027161
   19e30:	00025594 	.word	0x00025594
   19e34:	00027186 	.word	0x00027186
   19e38:	0002555c 	.word	0x0002555c

00019e3c <bt_conn_create_frag_timeout>:
						  k_timeout_t timeout,
						  const char *func, int line)
#else
struct net_buf *bt_conn_create_frag_timeout(size_t reserve, k_timeout_t timeout)
#endif
{
   19e3c:	4601      	mov	r1, r0

#if defined(CONFIG_NET_BUF_LOG)
	return bt_conn_create_pdu_timeout_debug(pool, reserve, timeout,
						func, line);
#else
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
   19e3e:	4801      	ldr	r0, [pc, #4]	; (19e44 <bt_conn_create_frag_timeout+0x8>)
   19e40:	f7ff be08 	b.w	19a54 <bt_conn_create_pdu_timeout>
   19e44:	200008e4 	.word	0x200008e4

00019e48 <create_frag>:
{
   19e48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19e4c:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
   19e4e:	f04f 33ff 	mov.w	r3, #4294967295
   19e52:	f04f 32ff 	mov.w	r2, #4294967295
   19e56:	2000      	movs	r0, #0
{
   19e58:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
   19e5a:	f7ff ffef 	bl	19e3c <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
   19e5e:	7ab3      	ldrb	r3, [r6, #10]
   19e60:	2b07      	cmp	r3, #7
		frag = bt_conn_create_frag(0);
   19e62:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
   19e64:	f04f 0600 	mov.w	r6, #0
   19e68:	d005      	beq.n	19e76 <create_frag+0x2e>
		net_buf_unref(frag);
   19e6a:	f002 f9e3 	bl	1c234 <net_buf_unref>
		return NULL;
   19e6e:	4635      	mov	r5, r6
}
   19e70:	4628      	mov	r0, r5
   19e72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
   19e76:	6186      	str	r6, [r0, #24]
	return net_buf_simple_tailroom(&buf->b);
   19e78:	f100 070c 	add.w	r7, r0, #12
	return bt_dev.le.acl_mtu;
   19e7c:	4e0c      	ldr	r6, [pc, #48]	; (19eb0 <create_frag+0x68>)
   19e7e:	4638      	mov	r0, r7
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   19e80:	f8b6 80fc 	ldrh.w	r8, [r6, #252]	; 0xfc
   19e84:	f00a f875 	bl	23f72 <net_buf_simple_tailroom>
   19e88:	4580      	cmp	r8, r0
   19e8a:	d20c      	bcs.n	19ea6 <create_frag+0x5e>
	return bt_dev.le.acl_mtu;
   19e8c:	f8b6 60fc 	ldrh.w	r6, [r6, #252]	; 0xfc
	return net_buf_simple_add_mem(&buf->b, mem, len);
   19e90:	f854 1f0c 	ldr.w	r1, [r4, #12]!
   19e94:	4632      	mov	r2, r6
   19e96:	4638      	mov	r0, r7
   19e98:	f00a f836 	bl	23f08 <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
   19e9c:	4631      	mov	r1, r6
   19e9e:	4620      	mov	r0, r4
   19ea0:	f00a f84b 	bl	23f3a <net_buf_simple_pull>
   19ea4:	e7e4      	b.n	19e70 <create_frag+0x28>
	return net_buf_simple_tailroom(&buf->b);
   19ea6:	4638      	mov	r0, r7
   19ea8:	f00a f863 	bl	23f72 <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   19eac:	b286      	uxth	r6, r0
   19eae:	e7ef      	b.n	19e90 <create_frag+0x48>
   19eb0:	20000388 	.word	0x20000388

00019eb4 <bt_conn_process_tx>:
{
   19eb4:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
   19eb6:	7a83      	ldrb	r3, [r0, #10]
{
   19eb8:	4604      	mov	r4, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
   19eba:	b993      	cbnz	r3, 19ee2 <bt_conn_process_tx+0x2e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   19ebc:	f3bf 8f5b 	dmb	ish
   19ec0:	1d03      	adds	r3, r0, #4
   19ec2:	e853 2f00 	ldrex	r2, [r3]
   19ec6:	f022 0140 	bic.w	r1, r2, #64	; 0x40
   19eca:	e843 1500 	strex	r5, r1, [r3]
   19ece:	2d00      	cmp	r5, #0
   19ed0:	d1f7      	bne.n	19ec2 <bt_conn_process_tx+0xe>
   19ed2:	f3bf 8f5b 	dmb	ish
   19ed6:	0653      	lsls	r3, r2, #25
   19ed8:	d503      	bpl.n	19ee2 <bt_conn_process_tx+0x2e>
}
   19eda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		conn_cleanup(conn);
   19ede:	f008 beeb 	b.w	22cb8 <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
   19ee2:	2200      	movs	r2, #0
   19ee4:	2300      	movs	r3, #0
   19ee6:	f104 0038 	add.w	r0, r4, #56	; 0x38
   19eea:	f009 ffac 	bl	23e46 <net_buf_get>
	BT_ASSERT(buf);
   19eee:	4605      	mov	r5, r0
   19ef0:	b960      	cbnz	r0, 19f0c <bt_conn_process_tx+0x58>
   19ef2:	4a24      	ldr	r2, [pc, #144]	; (19f84 <bt_conn_process_tx+0xd0>)
   19ef4:	4924      	ldr	r1, [pc, #144]	; (19f88 <bt_conn_process_tx+0xd4>)
   19ef6:	4825      	ldr	r0, [pc, #148]	; (19f8c <bt_conn_process_tx+0xd8>)
   19ef8:	f240 331a 	movw	r3, #794	; 0x31a
   19efc:	f007 ff51 	bl	21da2 <assert_print>
   19f00:	4040      	eors	r0, r0
   19f02:	f380 8811 	msr	BASEPRI, r0
   19f06:	f04f 0003 	mov.w	r0, #3
   19f0a:	df02      	svc	2
	return bt_dev.le.acl_mtu;
   19f0c:	4e20      	ldr	r6, [pc, #128]	; (19f90 <bt_conn_process_tx+0xdc>)
	if (buf->len <= conn_mtu(conn)) {
   19f0e:	8a2a      	ldrh	r2, [r5, #16]
   19f10:	f8b6 30fc 	ldrh.w	r3, [r6, #252]	; 0xfc
   19f14:	429a      	cmp	r2, r3
   19f16:	d807      	bhi.n	19f28 <bt_conn_process_tx+0x74>
		return send_frag(conn, buf, FRAG_SINGLE, false);
   19f18:	2300      	movs	r3, #0
   19f1a:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
   19f1c:	4629      	mov	r1, r5
   19f1e:	4620      	mov	r0, r4
   19f20:	f7ff fa60 	bl	193e4 <send_frag>
	if (!send_buf(conn, buf)) {
   19f24:	b968      	cbnz	r0, 19f42 <bt_conn_process_tx+0x8e>
   19f26:	e005      	b.n	19f34 <bt_conn_process_tx+0x80>
	frag = create_frag(conn, buf);
   19f28:	4629      	mov	r1, r5
   19f2a:	4620      	mov	r0, r4
   19f2c:	f7ff ff8c 	bl	19e48 <create_frag>
	if (!frag) {
   19f30:	4601      	mov	r1, r0
   19f32:	b938      	cbnz	r0, 19f44 <bt_conn_process_tx+0x90>
		struct bt_conn_tx *tx = tx_data(buf)->tx;
   19f34:	69ae      	ldr	r6, [r5, #24]
		tx_data(buf)->tx = NULL;
   19f36:	2300      	movs	r3, #0
   19f38:	61ab      	str	r3, [r5, #24]
		net_buf_unref(buf);
   19f3a:	4628      	mov	r0, r5
   19f3c:	f002 f97a 	bl	1c234 <net_buf_unref>
		if (tx) {
   19f40:	b9ce      	cbnz	r6, 19f76 <bt_conn_process_tx+0xc2>
}
   19f42:	bd70      	pop	{r4, r5, r6, pc}
	if (!send_frag(conn, frag, FRAG_START, true)) {
   19f44:	2301      	movs	r3, #1
   19f46:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   19f48:	4620      	mov	r0, r4
   19f4a:	f7ff fa4b 	bl	193e4 <send_frag>
   19f4e:	2800      	cmp	r0, #0
   19f50:	d0f0      	beq.n	19f34 <bt_conn_process_tx+0x80>
	while (buf->len > conn_mtu(conn)) {
   19f52:	8a2a      	ldrh	r2, [r5, #16]
   19f54:	f8b6 30fc 	ldrh.w	r3, [r6, #252]	; 0xfc
   19f58:	429a      	cmp	r2, r3
   19f5a:	d802      	bhi.n	19f62 <bt_conn_process_tx+0xae>
	return send_frag(conn, buf, FRAG_END, false);
   19f5c:	2300      	movs	r3, #0
   19f5e:	2203      	movs	r2, #3
   19f60:	e7dc      	b.n	19f1c <bt_conn_process_tx+0x68>
		frag = create_frag(conn, buf);
   19f62:	4629      	mov	r1, r5
   19f64:	4620      	mov	r0, r4
   19f66:	f7ff ff6f 	bl	19e48 <create_frag>
		if (!frag) {
   19f6a:	4601      	mov	r1, r0
   19f6c:	2800      	cmp	r0, #0
   19f6e:	d0e1      	beq.n	19f34 <bt_conn_process_tx+0x80>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   19f70:	2301      	movs	r3, #1
   19f72:	461a      	mov	r2, r3
   19f74:	e7e8      	b.n	19f48 <bt_conn_process_tx+0x94>
			conn_tx_destroy(conn, tx);
   19f76:	4631      	mov	r1, r6
   19f78:	4620      	mov	r0, r4
}
   19f7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			conn_tx_destroy(conn, tx);
   19f7e:	f7ff ba1b 	b.w	193b8 <conn_tx_destroy>
   19f82:	bf00      	nop
   19f84:	000271b0 	.word	0x000271b0
   19f88:	00027719 	.word	0x00027719
   19f8c:	00026a2d 	.word	0x00026a2d
   19f90:	20000388 	.word	0x20000388

00019f94 <bt_conn_init>:

	return bt_conn_ref(&acl_conns[index]);
}

int bt_conn_init(void)
{
   19f94:	b510      	push	{r4, lr}
	z_impl_k_queue_init(queue);
   19f96:	480c      	ldr	r0, [pc, #48]	; (19fc8 <bt_conn_init+0x34>)
   19f98:	f00a fc5a 	bl	24850 <z_impl_k_queue_init>
	int err, i;

	k_fifo_init(&free_tx);
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
   19f9c:	490b      	ldr	r1, [pc, #44]	; (19fcc <bt_conn_init+0x38>)
   19f9e:	480a      	ldr	r0, [pc, #40]	; (19fc8 <bt_conn_init+0x34>)
   19fa0:	f00a fc62 	bl	24868 <k_queue_append>
   19fa4:	490a      	ldr	r1, [pc, #40]	; (19fd0 <bt_conn_init+0x3c>)
   19fa6:	4808      	ldr	r0, [pc, #32]	; (19fc8 <bt_conn_init+0x34>)
   19fa8:	f00a fc5e 	bl	24868 <k_queue_append>
   19fac:	4909      	ldr	r1, [pc, #36]	; (19fd4 <bt_conn_init+0x40>)
   19fae:	4806      	ldr	r0, [pc, #24]	; (19fc8 <bt_conn_init+0x34>)
   19fb0:	f00a fc5a 	bl	24868 <k_queue_append>
	}

	bt_att_init();
   19fb4:	f001 f8a8 	bl	1b108 <bt_att_init>

	err = bt_smp_init();
   19fb8:	f009 ff3d 	bl	23e36 <bt_smp_init>
	if (err) {
   19fbc:	4604      	mov	r4, r0
   19fbe:	b908      	cbnz	r0, 19fc4 <bt_conn_init+0x30>
		return err;
	}

	bt_l2cap_init();
   19fc0:	f008 ffbd 	bl	22f3e <bt_l2cap_init>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
   19fc4:	4620      	mov	r0, r4
   19fc6:	bd10      	pop	{r4, pc}
   19fc8:	20000874 	.word	0x20000874
   19fcc:	20004f40 	.word	0x20004f40
   19fd0:	20004f50 	.word	0x20004f50
   19fd4:	20004f60 	.word	0x20004f60

00019fd8 <l2cap_create_le_sig_pdu.part.0>:
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
		bt_l2cap_chan_del(chan);
	}
}

static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   19fd8:	b580      	push	{r7, lr}
   19fda:	af00      	add	r7, sp, #0
	buf = bt_l2cap_create_pdu_timeout(pool, 0, L2CAP_RTX_TIMEOUT);
	if (!buf) {
		/* If it was not possible to allocate a buffer within the
		 * timeout return NULL.
		 */
		LOG_ERR("Unable to allocate buffer for op 0x%02x", code);
   19fdc:	b088      	sub	sp, #32
   19fde:	466a      	mov	r2, sp
   19fe0:	4b06      	ldr	r3, [pc, #24]	; (19ffc <l2cap_create_le_sig_pdu.part.0+0x24>)
   19fe2:	e9c2 3005 	strd	r3, r0, [r2, #20]
   19fe6:	2303      	movs	r3, #3
   19fe8:	f842 3f10 	str.w	r3, [r2, #16]!
   19fec:	4804      	ldr	r0, [pc, #16]	; (1a000 <l2cap_create_le_sig_pdu.part.0+0x28>)
   19fee:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   19ff2:	f008 ff32 	bl	22e5a <z_log_msg_static_create.constprop.0>
	hdr->code = code;
	hdr->ident = ident;
	hdr->len = sys_cpu_to_le16(len);

	return buf;
}
   19ff6:	2000      	movs	r0, #0
   19ff8:	46bd      	mov	sp, r7
   19ffa:	bd80      	pop	{r7, pc}
   19ffc:	00027259 	.word	0x00027259
   1a000:	000255b4 	.word	0x000255b4

0001a004 <l2cap_accept.part.0>:
	 */
	(void)k_work_cancel_delayable(&le_chan->rtx_work);
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}

static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
   1a004:	b580      	push	{r7, lr}
   1a006:	af00      	add	r7, sp, #0
		*chan = &l2cap->chan.chan;

		return 0;
	}

	LOG_ERR("No available L2CAP context for conn %p", conn);
   1a008:	b088      	sub	sp, #32
   1a00a:	466a      	mov	r2, sp
   1a00c:	4b07      	ldr	r3, [pc, #28]	; (1a02c <l2cap_accept.part.0+0x28>)
   1a00e:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1a012:	2303      	movs	r3, #3
   1a014:	f842 3f10 	str.w	r3, [r2, #16]!
   1a018:	4805      	ldr	r0, [pc, #20]	; (1a030 <l2cap_accept.part.0+0x2c>)
   1a01a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1a01e:	f008 ff1c 	bl	22e5a <z_log_msg_static_create.constprop.0>

	return -ENOMEM;
}
   1a022:	f06f 000b 	mvn.w	r0, #11
   1a026:	46bd      	mov	sp, r7
   1a028:	bd80      	pop	{r7, pc}
   1a02a:	bf00      	nop
   1a02c:	00027281 	.word	0x00027281
   1a030:	000255b4 	.word	0x000255b4

0001a034 <l2cap_accept>:
		if (l2cap->chan.chan.conn) {
   1a034:	4b04      	ldr	r3, [pc, #16]	; (1a048 <l2cap_accept+0x14>)
   1a036:	681a      	ldr	r2, [r3, #0]
   1a038:	b10a      	cbz	r2, 1a03e <l2cap_accept+0xa>
	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
   1a03a:	f7ff bfe3 	b.w	1a004 <l2cap_accept.part.0>
		l2cap->chan.chan.ops = &ops;
   1a03e:	4803      	ldr	r0, [pc, #12]	; (1a04c <l2cap_accept+0x18>)
   1a040:	6058      	str	r0, [r3, #4]
		*chan = &l2cap->chan.chan;
   1a042:	600b      	str	r3, [r1, #0]
}
   1a044:	4610      	mov	r0, r2
   1a046:	4770      	bx	lr
   1a048:	20004f74 	.word	0x20004f74
   1a04c:	00025900 	.word	0x00025900

0001a050 <bt_l2cap_connected>:
{
   1a050:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   1a052:	4d24      	ldr	r5, [pc, #144]	; (1a0e4 <bt_l2cap_connected+0x94>)
   1a054:	4f24      	ldr	r7, [pc, #144]	; (1a0e8 <bt_l2cap_connected+0x98>)
{
   1a056:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1a058:	2600      	movs	r6, #0
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   1a05a:	42bd      	cmp	r5, r7
   1a05c:	d301      	bcc.n	1a062 <bt_l2cap_connected+0x12>
}
   1a05e:	b003      	add	sp, #12
   1a060:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (fchan->accept(conn, &chan) < 0) {
   1a062:	686b      	ldr	r3, [r5, #4]
   1a064:	a901      	add	r1, sp, #4
   1a066:	4620      	mov	r0, r4
   1a068:	4798      	blx	r3
   1a06a:	2800      	cmp	r0, #0
   1a06c:	db34      	blt.n	1a0d8 <bt_l2cap_connected+0x88>
		le_chan = BT_L2CAP_LE_CHAN(chan);
   1a06e:	9b01      	ldr	r3, [sp, #4]
		le_chan->rx.cid = fchan->cid;
   1a070:	882a      	ldrh	r2, [r5, #0]
   1a072:	829a      	strh	r2, [r3, #20]
		le_chan->tx.cid = fchan->cid;
   1a074:	849a      	strh	r2, [r3, #36]	; 0x24
   1a076:	f103 0210 	add.w	r2, r3, #16
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   1a07a:	68a8      	ldr	r0, [r5, #8]
   1a07c:	f3bf 8f5b 	dmb	ish
   1a080:	e852 1f00 	ldrex	r1, [r2]
   1a084:	e842 6c00 	strex	ip, r6, [r2]
   1a088:	f1bc 0f00 	cmp.w	ip, #0
   1a08c:	d1f8      	bne.n	1a080 <bt_l2cap_connected+0x30>
   1a08e:	f3bf 8f5b 	dmb	ish
	parent->next = child;
   1a092:	609e      	str	r6, [r3, #8]
	return list->tail;
   1a094:	6d61      	ldr	r1, [r4, #84]	; 0x54
	sys_slist_append(&conn->channels, &chan->node);
   1a096:	f103 0208 	add.w	r2, r3, #8
Z_GENLIST_APPEND(slist, snode)
   1a09a:	b9f9      	cbnz	r1, 1a0dc <bt_l2cap_connected+0x8c>
	list->head = node;
   1a09c:	e9c4 2214 	strd	r2, r2, [r4, #80]	; 0x50
	chan->conn = conn;
   1a0a0:	601c      	str	r4, [r3, #0]
	chan->destroy = destroy;
   1a0a2:	60d8      	str	r0, [r3, #12]
		if (chan->ops->connected) {
   1a0a4:	9801      	ldr	r0, [sp, #4]
   1a0a6:	6843      	ldr	r3, [r0, #4]
   1a0a8:	681b      	ldr	r3, [r3, #0]
   1a0aa:	b103      	cbz	r3, 1a0ae <bt_l2cap_connected+0x5e>
			chan->ops->connected(chan);
   1a0ac:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1a0ae:	9b01      	ldr	r3, [sp, #4]
   1a0b0:	f3bf 8f5b 	dmb	ish
   1a0b4:	3310      	adds	r3, #16
   1a0b6:	e853 1f00 	ldrex	r1, [r3]
   1a0ba:	f041 0101 	orr.w	r1, r1, #1
   1a0be:	e843 1200 	strex	r2, r1, [r3]
   1a0c2:	2a00      	cmp	r2, #0
   1a0c4:	d1f7      	bne.n	1a0b6 <bt_l2cap_connected+0x66>
   1a0c6:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
   1a0ca:	9801      	ldr	r0, [sp, #4]
   1a0cc:	6843      	ldr	r3, [r0, #4]
   1a0ce:	69db      	ldr	r3, [r3, #28]
   1a0d0:	b113      	cbz	r3, 1a0d8 <bt_l2cap_connected+0x88>
			chan->ops->status(chan, chan->status);
   1a0d2:	f100 0110 	add.w	r1, r0, #16
   1a0d6:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   1a0d8:	350c      	adds	r5, #12
   1a0da:	e7be      	b.n	1a05a <bt_l2cap_connected+0xa>
	parent->next = child;
   1a0dc:	600a      	str	r2, [r1, #0]
	list->tail = node;
   1a0de:	6562      	str	r2, [r4, #84]	; 0x54
}
   1a0e0:	e7de      	b.n	1a0a0 <bt_l2cap_connected+0x50>
   1a0e2:	bf00      	nop
   1a0e4:	00025524 	.word	0x00025524
   1a0e8:	00025548 	.word	0x00025548

0001a0ec <l2cap_recv>:
{
   1a0ec:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a0ee:	b089      	sub	sp, #36	; 0x24
	if (buf->len < sizeof(*hdr)) {
   1a0f0:	8a0b      	ldrh	r3, [r1, #16]
   1a0f2:	2b03      	cmp	r3, #3
{
   1a0f4:	af02      	add	r7, sp, #8
   1a0f6:	4606      	mov	r6, r0
   1a0f8:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
   1a0fa:	d80b      	bhi.n	1a114 <l2cap_recv+0x28>
		LOG_ERR("Too small L2CAP signaling PDU");
   1a0fc:	4b30      	ldr	r3, [pc, #192]	; (1a1c0 <l2cap_recv+0xd4>)
		LOG_ERR("Invalid ident value in L2CAP PDU");
   1a0fe:	617b      	str	r3, [r7, #20]
   1a100:	2302      	movs	r3, #2
   1a102:	4830      	ldr	r0, [pc, #192]	; (1a1c4 <l2cap_recv+0xd8>)
   1a104:	613b      	str	r3, [r7, #16]
   1a106:	f107 0210 	add.w	r2, r7, #16
   1a10a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1a10e:	f008 fea4 	bl	22e5a <z_log_msg_static_create.constprop.0>
		return 0;
   1a112:	e019      	b.n	1a148 <l2cap_recv+0x5c>
	return net_buf_simple_pull_mem(&buf->b, len);
   1a114:	2104      	movs	r1, #4
   1a116:	f105 000c 	add.w	r0, r5, #12
   1a11a:	f009 ff16 	bl	23f4a <net_buf_simple_pull_mem>
	if (buf->len != len) {
   1a11e:	8a29      	ldrh	r1, [r5, #16]
	len = sys_le16_to_cpu(hdr->len);
   1a120:	8843      	ldrh	r3, [r0, #2]
	if (buf->len != len) {
   1a122:	4299      	cmp	r1, r3
   1a124:	4604      	mov	r4, r0
   1a126:	d013      	beq.n	1a150 <l2cap_recv+0x64>
		LOG_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
   1a128:	466c      	mov	r4, sp
   1a12a:	b088      	sub	sp, #32
   1a12c:	aa02      	add	r2, sp, #8
   1a12e:	4826      	ldr	r0, [pc, #152]	; (1a1c8 <l2cap_recv+0xdc>)
   1a130:	61d3      	str	r3, [r2, #28]
   1a132:	2304      	movs	r3, #4
   1a134:	e9c2 0105 	strd	r0, r1, [r2, #20]
   1a138:	f842 3f10 	str.w	r3, [r2, #16]!
   1a13c:	4821      	ldr	r0, [pc, #132]	; (1a1c4 <l2cap_recv+0xd8>)
   1a13e:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1a142:	f008 fe8a 	bl	22e5a <z_log_msg_static_create.constprop.0>
   1a146:	46a5      	mov	sp, r4
}
   1a148:	2000      	movs	r0, #0
   1a14a:	371c      	adds	r7, #28
   1a14c:	46bd      	mov	sp, r7
   1a14e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!hdr->ident) {
   1a150:	7843      	ldrb	r3, [r0, #1]
   1a152:	b90b      	cbnz	r3, 1a158 <l2cap_recv+0x6c>
		LOG_ERR("Invalid ident value in L2CAP PDU");
   1a154:	4b1d      	ldr	r3, [pc, #116]	; (1a1cc <l2cap_recv+0xe0>)
   1a156:	e7d2      	b.n	1a0fe <l2cap_recv+0x12>
	switch (hdr->code) {
   1a158:	7803      	ldrb	r3, [r0, #0]
   1a15a:	2b01      	cmp	r3, #1
   1a15c:	d0f4      	beq.n	1a148 <l2cap_recv+0x5c>
   1a15e:	2b13      	cmp	r3, #19
   1a160:	d103      	bne.n	1a16a <l2cap_recv+0x7e>
	if (buf->len < sizeof(*rsp)) {
   1a162:	2901      	cmp	r1, #1
   1a164:	d8f0      	bhi.n	1a148 <l2cap_recv+0x5c>
		LOG_ERR("Too small LE conn param rsp");
   1a166:	4b1a      	ldr	r3, [pc, #104]	; (1a1d0 <l2cap_recv+0xe4>)
   1a168:	e7c9      	b.n	1a0fe <l2cap_recv+0x12>
		LOG_WRN("Rejecting unknown L2CAP PDU code 0x%02x", hdr->code);
   1a16a:	466d      	mov	r5, sp
   1a16c:	b088      	sub	sp, #32
   1a16e:	aa02      	add	r2, sp, #8
   1a170:	4918      	ldr	r1, [pc, #96]	; (1a1d4 <l2cap_recv+0xe8>)
   1a172:	4814      	ldr	r0, [pc, #80]	; (1a1c4 <l2cap_recv+0xd8>)
	switch (hdr->code) {
   1a174:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_WRN("Rejecting unknown L2CAP PDU code 0x%02x", hdr->code);
   1a178:	2303      	movs	r3, #3
   1a17a:	f842 3f10 	str.w	r3, [r2, #16]!
   1a17e:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1a182:	f008 fe6a 	bl	22e5a <z_log_msg_static_create.constprop.0>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   1a186:	2202      	movs	r2, #2
   1a188:	7861      	ldrb	r1, [r4, #1]
   1a18a:	46ad      	mov	sp, r5
   1a18c:	2001      	movs	r0, #1
		l2cap_send_reject(chan->conn, hdr->ident,
   1a18e:	6835      	ldr	r5, [r6, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   1a190:	f008 fe66 	bl	22e60 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   1a194:	4604      	mov	r4, r0
   1a196:	2800      	cmp	r0, #0
   1a198:	d0d6      	beq.n	1a148 <l2cap_recv+0x5c>
	return net_buf_simple_add(&buf->b, len);
   1a19a:	2102      	movs	r1, #2
   1a19c:	300c      	adds	r0, #12
   1a19e:	f009 fead 	bl	23efc <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   1a1a2:	2300      	movs	r3, #0
   1a1a4:	7003      	strb	r3, [r0, #0]
   1a1a6:	7043      	strb	r3, [r0, #1]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   1a1a8:	4622      	mov	r2, r4
   1a1aa:	9300      	str	r3, [sp, #0]
   1a1ac:	2105      	movs	r1, #5
   1a1ae:	4628      	mov	r0, r5
   1a1b0:	f008 fea2 	bl	22ef8 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   1a1b4:	2800      	cmp	r0, #0
   1a1b6:	d0c7      	beq.n	1a148 <l2cap_recv+0x5c>
		net_buf_unref(buf);
   1a1b8:	4620      	mov	r0, r4
   1a1ba:	f002 f83b 	bl	1c234 <net_buf_unref>
   1a1be:	e7c3      	b.n	1a148 <l2cap_recv+0x5c>
   1a1c0:	000272a8 	.word	0x000272a8
   1a1c4:	000255b4 	.word	0x000255b4
   1a1c8:	000272c6 	.word	0x000272c6
   1a1cc:	000272e7 	.word	0x000272e7
   1a1d0:	00027308 	.word	0x00027308
   1a1d4:	00027324 	.word	0x00027324

0001a1d8 <bt_l2cap_recv>:
{
   1a1d8:	b5b0      	push	{r4, r5, r7, lr}
   1a1da:	b086      	sub	sp, #24
	if (buf->len < sizeof(*hdr)) {
   1a1dc:	8a0b      	ldrh	r3, [r1, #16]
   1a1de:	2b03      	cmp	r3, #3
{
   1a1e0:	af00      	add	r7, sp, #0
   1a1e2:	4605      	mov	r5, r0
   1a1e4:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   1a1e6:	d810      	bhi.n	1a20a <bt_l2cap_recv+0x32>
		LOG_ERR("Too small L2CAP PDU received");
   1a1e8:	4b17      	ldr	r3, [pc, #92]	; (1a248 <bt_l2cap_recv+0x70>)
   1a1ea:	617b      	str	r3, [r7, #20]
   1a1ec:	2302      	movs	r3, #2
   1a1ee:	4817      	ldr	r0, [pc, #92]	; (1a24c <bt_l2cap_recv+0x74>)
   1a1f0:	613b      	str	r3, [r7, #16]
   1a1f2:	f107 0210 	add.w	r2, r7, #16
   1a1f6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1a1fa:	f008 fe2e 	bl	22e5a <z_log_msg_static_create.constprop.0>
	net_buf_unref(buf);
   1a1fe:	4620      	mov	r0, r4
   1a200:	f002 f818 	bl	1c234 <net_buf_unref>
}
   1a204:	3718      	adds	r7, #24
   1a206:	46bd      	mov	sp, r7
   1a208:	bdb0      	pop	{r4, r5, r7, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   1a20a:	2104      	movs	r1, #4
   1a20c:	f104 000c 	add.w	r0, r4, #12
   1a210:	f009 fe9b 	bl	23f4a <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
   1a214:	8841      	ldrh	r1, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   1a216:	4628      	mov	r0, r5
   1a218:	f008 fe87 	bl	22f2a <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   1a21c:	b978      	cbnz	r0, 1a23e <bt_l2cap_recv+0x66>
		LOG_WRN("Ignoring data for unknown channel ID 0x%04x", cid);
   1a21e:	466d      	mov	r5, sp
   1a220:	b088      	sub	sp, #32
   1a222:	466a      	mov	r2, sp
   1a224:	4b0a      	ldr	r3, [pc, #40]	; (1a250 <bt_l2cap_recv+0x78>)
   1a226:	4809      	ldr	r0, [pc, #36]	; (1a24c <bt_l2cap_recv+0x74>)
   1a228:	e9c2 3105 	strd	r3, r1, [r2, #20]
   1a22c:	2303      	movs	r3, #3
   1a22e:	f842 3f10 	str.w	r3, [r2, #16]!
   1a232:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1a236:	f008 fe10 	bl	22e5a <z_log_msg_static_create.constprop.0>
   1a23a:	46ad      	mov	sp, r5
		net_buf_unref(buf);
   1a23c:	e7df      	b.n	1a1fe <bt_l2cap_recv+0x26>
	chan->ops->recv(chan, buf);
   1a23e:	6843      	ldr	r3, [r0, #4]
   1a240:	4621      	mov	r1, r4
   1a242:	695b      	ldr	r3, [r3, #20]
   1a244:	4798      	blx	r3
   1a246:	e7da      	b.n	1a1fe <bt_l2cap_recv+0x26>
   1a248:	0002734c 	.word	0x0002734c
   1a24c:	000255b4 	.word	0x000255b4
   1a250:	00027369 	.word	0x00027369

0001a254 <bt_l2cap_update_conn_param>:
{
   1a254:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ident++;
   1a256:	4b17      	ldr	r3, [pc, #92]	; (1a2b4 <bt_l2cap_update_conn_param+0x60>)
{
   1a258:	460e      	mov	r6, r1
	ident++;
   1a25a:	7819      	ldrb	r1, [r3, #0]
   1a25c:	3101      	adds	r1, #1
   1a25e:	b2c9      	uxtb	r1, r1
   1a260:	2901      	cmp	r1, #1
   1a262:	bf38      	it	cc
   1a264:	2101      	movcc	r1, #1
{
   1a266:	4605      	mov	r5, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   1a268:	2208      	movs	r2, #8
   1a26a:	2012      	movs	r0, #18
	ident++;
   1a26c:	7019      	strb	r1, [r3, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   1a26e:	f008 fdf7 	bl	22e60 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   1a272:	4604      	mov	r4, r0
   1a274:	b1d0      	cbz	r0, 1a2ac <bt_l2cap_update_conn_param+0x58>
	return net_buf_simple_add(&buf->b, len);
   1a276:	2108      	movs	r1, #8
   1a278:	300c      	adds	r0, #12
   1a27a:	f009 fe3f 	bl	23efc <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   1a27e:	8833      	ldrh	r3, [r6, #0]
   1a280:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   1a282:	8873      	ldrh	r3, [r6, #2]
   1a284:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   1a286:	88b3      	ldrh	r3, [r6, #4]
   1a288:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   1a28a:	88f3      	ldrh	r3, [r6, #6]
   1a28c:	80c3      	strh	r3, [r0, #6]
   1a28e:	2300      	movs	r3, #0
   1a290:	4628      	mov	r0, r5
   1a292:	9300      	str	r3, [sp, #0]
   1a294:	4622      	mov	r2, r4
   1a296:	2105      	movs	r1, #5
   1a298:	f008 fe2e 	bl	22ef8 <bt_l2cap_send_cb>
	if (err) {
   1a29c:	4605      	mov	r5, r0
   1a29e:	b110      	cbz	r0, 1a2a6 <bt_l2cap_update_conn_param+0x52>
		net_buf_unref(buf);
   1a2a0:	4620      	mov	r0, r4
   1a2a2:	f001 ffc7 	bl	1c234 <net_buf_unref>
}
   1a2a6:	4628      	mov	r0, r5
   1a2a8:	b002      	add	sp, #8
   1a2aa:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   1a2ac:	f06f 050b 	mvn.w	r5, #11
   1a2b0:	e7f9      	b.n	1a2a6 <bt_l2cap_update_conn_param+0x52>
   1a2b2:	bf00      	nop
   1a2b4:	20005442 	.word	0x20005442

0001a2b8 <att_op_get_type>:
#endif /* CONFIG_BT_GATT_CLIENT */
};

static att_type_t att_op_get_type(uint8_t op)
{
	switch (op) {
   1a2b8:	2823      	cmp	r0, #35	; 0x23
   1a2ba:	d81f      	bhi.n	1a2fc <att_op_get_type+0x44>
   1a2bc:	281a      	cmp	r0, #26
   1a2be:	d804      	bhi.n	1a2ca <att_op_get_type+0x12>
   1a2c0:	1e43      	subs	r3, r0, #1
   1a2c2:	2b18      	cmp	r3, #24
   1a2c4:	d90e      	bls.n	1a2e4 <att_op_get_type+0x2c>

	if (op & ATT_CMD_MASK) {
		return ATT_COMMAND;
	}

	return ATT_UNKNOWN;
   1a2c6:	2006      	movs	r0, #6
   1a2c8:	4770      	bx	lr
	switch (op) {
   1a2ca:	f1a0 031b 	sub.w	r3, r0, #27
   1a2ce:	2b08      	cmp	r3, #8
   1a2d0:	d81e      	bhi.n	1a310 <att_op_get_type+0x58>
   1a2d2:	e8df f003 	tbb	[pc, r3]
   1a2d6:	1d05      	.short	0x1d05
   1a2d8:	191d231b 	.word	0x191d231b
   1a2dc:	1d25      	.short	0x1d25
   1a2de:	05          	.byte	0x05
   1a2df:	00          	.byte	0x00
		return ATT_NOTIFICATION;
   1a2e0:	2003      	movs	r0, #3
   1a2e2:	4770      	bx	lr
	switch (op) {
   1a2e4:	4a0f      	ldr	r2, [pc, #60]	; (1a324 <att_op_get_type+0x6c>)
   1a2e6:	2301      	movs	r3, #1
   1a2e8:	4083      	lsls	r3, r0
   1a2ea:	401a      	ands	r2, r3
   1a2ec:	b9c2      	cbnz	r2, 1a320 <att_op_get_type+0x68>
   1a2ee:	4a0e      	ldr	r2, [pc, #56]	; (1a328 <att_op_get_type+0x70>)
   1a2f0:	401a      	ands	r2, r3
	return ATT_UNKNOWN;
   1a2f2:	2a00      	cmp	r2, #0
   1a2f4:	bf14      	ite	ne
   1a2f6:	2001      	movne	r0, #1
   1a2f8:	2006      	moveq	r0, #6
   1a2fa:	4770      	bx	lr
	switch (op) {
   1a2fc:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   1a300:	2b52      	cmp	r3, #82	; 0x52
   1a302:	d105      	bne.n	1a310 <att_op_get_type+0x58>
		return ATT_COMMAND;
   1a304:	2000      	movs	r0, #0
}
   1a306:	4770      	bx	lr
		return ATT_REQUEST;
   1a308:	2001      	movs	r0, #1
   1a30a:	4770      	bx	lr
		return ATT_INDICATION;
   1a30c:	2005      	movs	r0, #5
   1a30e:	4770      	bx	lr
		return ATT_COMMAND;
   1a310:	f010 0f40 	tst.w	r0, #64	; 0x40
   1a314:	bf0c      	ite	eq
   1a316:	2006      	moveq	r0, #6
   1a318:	2000      	movne	r0, #0
   1a31a:	4770      	bx	lr
	switch (op) {
   1a31c:	2004      	movs	r0, #4
   1a31e:	4770      	bx	lr
		return ATT_RESPONSE;
   1a320:	2002      	movs	r0, #2
   1a322:	4770      	bx	lr
   1a324:	028aaaaa 	.word	0x028aaaaa
   1a328:	01455554 	.word	0x01455554

0001a32c <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
   1a32c:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
   1a32e:	3804      	subs	r0, #4
   1a330:	9001      	str	r0, [sp, #4]

	LOG_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
   1a332:	a901      	add	r1, sp, #4
   1a334:	4802      	ldr	r0, [pc, #8]	; (1a340 <bt_att_released+0x14>)
   1a336:	f00a f9d4 	bl	246e2 <k_mem_slab_free>
}
   1a33a:	b003      	add	sp, #12
   1a33c:	f85d fb04 	ldr.w	pc, [sp], #4
   1a340:	200007e4 	.word	0x200007e4

0001a344 <tx_meta_data_free>:
{
   1a344:	b510      	push	{r4, lr}
__ssp_bos_icheck3(memset, void *, int)
   1a346:	2100      	movs	r1, #0
   1a348:	4604      	mov	r4, r0
   1a34a:	2214      	movs	r2, #20
   1a34c:	f00a ff49 	bl	251e2 <memset>
	k_fifo_put(&free_att_tx_meta_data, data);
   1a350:	4621      	mov	r1, r4
   1a352:	4802      	ldr	r0, [pc, #8]	; (1a35c <tx_meta_data_free+0x18>)
}
   1a354:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_fifo_put(&free_att_tx_meta_data, data);
   1a358:	f00a ba86 	b.w	24868 <k_queue_append>
   1a35c:	2000085c 	.word	0x2000085c

0001a360 <find_type_cb>:
{
   1a360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a364:	b093      	sub	sp, #76	; 0x4c
	struct bt_att_chan *chan = data->chan;
   1a366:	f8d2 a000 	ldr.w	sl, [r2]
{
   1a36a:	af02      	add	r7, sp, #8
	struct bt_conn *conn = chan->chan.chan.conn;
   1a36c:	f8da 3004 	ldr.w	r3, [sl, #4]
   1a370:	607b      	str	r3, [r7, #4]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1a372:	2500      	movs	r5, #0
   1a374:	f642 0301 	movw	r3, #10241	; 0x2801
{
   1a378:	4680      	mov	r8, r0
   1a37a:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1a37c:	6800      	ldr	r0, [r0, #0]
   1a37e:	f887 502c 	strb.w	r5, [r7, #44]	; 0x2c
   1a382:	85fb      	strh	r3, [r7, #46]	; 0x2e
   1a384:	f107 012c 	add.w	r1, r7, #44	; 0x2c
{
   1a388:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1a38a:	f008 fa16 	bl	227ba <bt_uuid_cmp>
   1a38e:	2800      	cmp	r0, #0
   1a390:	d070      	beq.n	1a474 <find_type_cb+0x114>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   1a392:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1a396:	f8d8 0000 	ldr.w	r0, [r8]
   1a39a:	f887 502c 	strb.w	r5, [r7, #44]	; 0x2c
   1a39e:	85fb      	strh	r3, [r7, #46]	; 0x2e
   1a3a0:	f107 012c 	add.w	r1, r7, #44	; 0x2c
   1a3a4:	f008 fa09 	bl	227ba <bt_uuid_cmp>
   1a3a8:	b138      	cbz	r0, 1a3ba <find_type_cb+0x5a>
		if (data->group &&
   1a3aa:	68a3      	ldr	r3, [r4, #8]
   1a3ac:	b11b      	cbz	r3, 1a3b6 <find_type_cb+0x56>
   1a3ae:	885a      	ldrh	r2, [r3, #2]
   1a3b0:	42b2      	cmp	r2, r6
   1a3b2:	d200      	bcs.n	1a3b6 <find_type_cb+0x56>
	data->group->end_handle = sys_cpu_to_le16(handle);
   1a3b4:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   1a3b6:	2001      	movs	r0, #1
   1a3b8:	e009      	b.n	1a3ce <find_type_cb+0x6e>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   1a3ba:	6861      	ldr	r1, [r4, #4]
   1a3bc:	4608      	mov	r0, r1
   1a3be:	f008 fdc9 	bl	22f54 <net_buf_frags_len>
   1a3c2:	f8ba 302a 	ldrh.w	r3, [sl, #42]	; 0x2a
   1a3c6:	1a1b      	subs	r3, r3, r0
   1a3c8:	2b03      	cmp	r3, #3
   1a3ca:	d804      	bhi.n	1a3d6 <find_type_cb+0x76>
		return BT_GATT_ITER_STOP;
   1a3cc:	2000      	movs	r0, #0
}
   1a3ce:	3744      	adds	r7, #68	; 0x44
   1a3d0:	46bd      	mov	sp, r7
   1a3d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
   1a3d6:	4608      	mov	r0, r1
   1a3d8:	f009 fd6e 	bl	23eb8 <net_buf_frag_last>
   1a3dc:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   1a3de:	6860      	ldr	r0, [r4, #4]
   1a3e0:	f008 fdb8 	bl	22f54 <net_buf_frags_len>
   1a3e4:	f8ba b02a 	ldrh.w	fp, [sl, #42]	; 0x2a
	return net_buf_simple_tailroom(&buf->b);
   1a3e8:	f105 090c 	add.w	r9, r5, #12
   1a3ec:	ebab 0b00 	sub.w	fp, fp, r0
   1a3f0:	4648      	mov	r0, r9
   1a3f2:	f009 fdbe 	bl	23f72 <net_buf_simple_tailroom>
   1a3f6:	4558      	cmp	r0, fp
   1a3f8:	d93f      	bls.n	1a47a <find_type_cb+0x11a>
   1a3fa:	6860      	ldr	r0, [r4, #4]
   1a3fc:	f008 fdaa 	bl	22f54 <net_buf_frags_len>
   1a400:	f8ba 302a 	ldrh.w	r3, [sl, #42]	; 0x2a
   1a404:	1a18      	subs	r0, r3, r0
	if (!len) {
   1a406:	b970      	cbnz	r0, 1a426 <find_type_cb+0xc6>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   1a408:	6863      	ldr	r3, [r4, #4]
   1a40a:	7a98      	ldrb	r0, [r3, #10]
   1a40c:	f001 fe50 	bl	1c0b0 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   1a410:	2200      	movs	r2, #0
   1a412:	2300      	movs	r3, #0
   1a414:	f009 fd12 	bl	23e3c <net_buf_alloc_fixed>
		if (!frag) {
   1a418:	4605      	mov	r5, r0
   1a41a:	2800      	cmp	r0, #0
   1a41c:	d0d6      	beq.n	1a3cc <find_type_cb+0x6c>
		net_buf_frag_add(data->buf, frag);
   1a41e:	4601      	mov	r1, r0
   1a420:	6860      	ldr	r0, [r4, #4]
   1a422:	f009 fd5a 	bl	23eda <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   1a426:	2300      	movs	r3, #0
   1a428:	9300      	str	r3, [sp, #0]
   1a42a:	f8d8 a004 	ldr.w	sl, [r8, #4]
   1a42e:	6878      	ldr	r0, [r7, #4]
   1a430:	4641      	mov	r1, r8
   1a432:	2310      	movs	r3, #16
   1a434:	f107 0208 	add.w	r2, r7, #8
   1a438:	47d0      	blx	sl
	if (read < 0) {
   1a43a:	f1b0 0800 	subs.w	r8, r0, #0
   1a43e:	db19      	blt.n	1a474 <find_type_cb+0x114>
	if (read != data->value_len) {
   1a440:	7c22      	ldrb	r2, [r4, #16]
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   1a442:	68e0      	ldr	r0, [r4, #12]
	if (read != data->value_len) {
   1a444:	4542      	cmp	r2, r8
   1a446:	d03f      	beq.n	1a4c8 <find_type_cb+0x168>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   1a448:	4601      	mov	r1, r0
   1a44a:	f107 002c 	add.w	r0, r7, #44	; 0x2c
   1a44e:	f008 f9e2 	bl	22816 <bt_uuid_create>
   1a452:	b9b0      	cbnz	r0, 1a482 <find_type_cb+0x122>
			LOG_WRN("Unable to create UUID: size %u", data->value_len);
   1a454:	466d      	mov	r5, sp
   1a456:	b088      	sub	sp, #32
   1a458:	7c23      	ldrb	r3, [r4, #16]
   1a45a:	aa02      	add	r2, sp, #8
   1a45c:	491d      	ldr	r1, [pc, #116]	; (1a4d4 <find_type_cb+0x174>)
   1a45e:	e9c2 1305 	strd	r1, r3, [r2, #20]
			LOG_WRN("Unable to create UUID: size %d", read);
   1a462:	2303      	movs	r3, #3
   1a464:	f842 3f10 	str.w	r3, [r2, #16]!
   1a468:	481b      	ldr	r0, [pc, #108]	; (1a4d8 <find_type_cb+0x178>)
   1a46a:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1a46e:	f008 fe63 	bl	23138 <z_log_msg_static_create.constprop.0>
   1a472:	46ad      	mov	sp, r5
	data->group = NULL;
   1a474:	2300      	movs	r3, #0
   1a476:	60a3      	str	r3, [r4, #8]
	return BT_GATT_ITER_CONTINUE;
   1a478:	e79d      	b.n	1a3b6 <find_type_cb+0x56>
	return net_buf_simple_tailroom(&buf->b);
   1a47a:	4648      	mov	r0, r9
   1a47c:	f009 fd79 	bl	23f72 <net_buf_simple_tailroom>
   1a480:	e7c1      	b.n	1a406 <find_type_cb+0xa6>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   1a482:	fa5f f288 	uxtb.w	r2, r8
   1a486:	f107 0108 	add.w	r1, r7, #8
   1a48a:	f107 0018 	add.w	r0, r7, #24
   1a48e:	f008 f9c2 	bl	22816 <bt_uuid_create>
   1a492:	b930      	cbnz	r0, 1a4a2 <find_type_cb+0x142>
			LOG_WRN("Unable to create UUID: size %d", read);
   1a494:	466d      	mov	r5, sp
   1a496:	b088      	sub	sp, #32
   1a498:	aa02      	add	r2, sp, #8
   1a49a:	4b10      	ldr	r3, [pc, #64]	; (1a4dc <find_type_cb+0x17c>)
   1a49c:	e9c2 3805 	strd	r3, r8, [r2, #20]
   1a4a0:	e7df      	b.n	1a462 <find_type_cb+0x102>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   1a4a2:	f107 0118 	add.w	r1, r7, #24
   1a4a6:	f107 002c 	add.w	r0, r7, #44	; 0x2c
   1a4aa:	f008 f986 	bl	227ba <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
   1a4ae:	2800      	cmp	r0, #0
   1a4b0:	d1e0      	bne.n	1a474 <find_type_cb+0x114>
	data->err = 0x00;
   1a4b2:	2300      	movs	r3, #0
   1a4b4:	7463      	strb	r3, [r4, #17]
	return net_buf_simple_add(&buf->b, len);
   1a4b6:	2104      	movs	r1, #4
   1a4b8:	f105 000c 	add.w	r0, r5, #12
   1a4bc:	f009 fd1e 	bl	23efc <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   1a4c0:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   1a4c2:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   1a4c4:	68a3      	ldr	r3, [r4, #8]
   1a4c6:	e775      	b.n	1a3b4 <find_type_cb+0x54>
	} else if (memcmp(data->value, uuid, read)) {
   1a4c8:	f107 0108 	add.w	r1, r7, #8
   1a4cc:	f00a fe6b 	bl	251a6 <memcmp>
   1a4d0:	e7ed      	b.n	1a4ae <find_type_cb+0x14e>
   1a4d2:	bf00      	nop
   1a4d4:	000273a5 	.word	0x000273a5
   1a4d8:	0002558c 	.word	0x0002558c
   1a4dc:	000273c4 	.word	0x000273c4

0001a4e0 <chan_send>:
{
   1a4e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1a4e4:	4606      	mov	r6, r0
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   1a4e6:	f8d1 9018 	ldr.w	r9, [r1, #24]
	hdr = (void *)buf->data;
   1a4ea:	68cb      	ldr	r3, [r1, #12]
{
   1a4ec:	b089      	sub	sp, #36	; 0x24
   1a4ee:	460c      	mov	r4, r1
	if (!atomic_test_bit(chan->flags, ATT_CONNECTED)) {
   1a4f0:	3090      	adds	r0, #144	; 0x90
   1a4f2:	2102      	movs	r1, #2
   1a4f4:	f008 fd48 	bl	22f88 <atomic_test_bit>
   1a4f8:	2800      	cmp	r0, #0
   1a4fa:	d043      	beq.n	1a584 <chan_send+0xa4>
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   1a4fc:	781b      	ldrb	r3, [r3, #0]
   1a4fe:	2bd2      	cmp	r3, #210	; 0xd2
   1a500:	d11a      	bne.n	1a538 <chan_send+0x58>
		err = bt_smp_sign(chan->att->conn, buf);
   1a502:	6833      	ldr	r3, [r6, #0]
   1a504:	4621      	mov	r1, r4
   1a506:	6818      	ldr	r0, [r3, #0]
   1a508:	f009 fc92 	bl	23e30 <bt_smp_sign>
		if (err) {
   1a50c:	4605      	mov	r5, r0
   1a50e:	b198      	cbz	r0, 1a538 <chan_send+0x58>
			LOG_ERR("Error signing data");
   1a510:	4b1e      	ldr	r3, [pc, #120]	; (1a58c <chan_send+0xac>)
   1a512:	481f      	ldr	r0, [pc, #124]	; (1a590 <chan_send+0xb0>)
   1a514:	9307      	str	r3, [sp, #28]
   1a516:	aa06      	add	r2, sp, #24
   1a518:	2302      	movs	r3, #2
   1a51a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1a51e:	9306      	str	r3, [sp, #24]
   1a520:	f008 fe0a 	bl	23138 <z_log_msg_static_create.constprop.0>
			tx_meta_data_free(bt_att_tx_meta_data(buf));
   1a524:	69a0      	ldr	r0, [r4, #24]
   1a526:	f7ff ff0d 	bl	1a344 <tx_meta_data_free>
			net_buf_unref(buf);
   1a52a:	4620      	mov	r0, r4
   1a52c:	f001 fe82 	bl	1c234 <net_buf_unref>
}
   1a530:	4628      	mov	r0, r5
   1a532:	b009      	add	sp, #36	; 0x24
   1a534:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
   1a538:	f104 000c 	add.w	r0, r4, #12
   1a53c:	f009 fd15 	bl	23f6a <net_buf_simple_headroom>
	state->len = buf->len;
   1a540:	f8b4 8010 	ldrh.w	r8, [r4, #16]
	data->att_chan = chan;
   1a544:	f8c9 6000 	str.w	r6, [r9]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   1a548:	6833      	ldr	r3, [r6, #0]
   1a54a:	681d      	ldr	r5, [r3, #0]
	const att_type_t op_type = att_op_get_type(buf->data[0]);
   1a54c:	68e3      	ldr	r3, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
   1a54e:	4607      	mov	r7, r0
   1a550:	7818      	ldrb	r0, [r3, #0]
   1a552:	f7ff feb1 	bl	1a2b8 <att_op_get_type>
	switch (op_type) {
   1a556:	2805      	cmp	r0, #5
   1a558:	bf96      	itet	ls
   1a55a:	4b0e      	ldrls	r3, [pc, #56]	; (1a594 <chan_send+0xb4>)
	const att_type_t op_type = att_op_get_type(buf->data[0]);
   1a55c:	4b0e      	ldrhi	r3, [pc, #56]	; (1a598 <chan_send+0xb8>)
   1a55e:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   1a562:	f8cd 9000 	str.w	r9, [sp]
   1a566:	4628      	mov	r0, r5
   1a568:	4622      	mov	r2, r4
   1a56a:	2104      	movs	r1, #4
   1a56c:	f008 fcc4 	bl	22ef8 <bt_l2cap_send_cb>
	if (err) {
   1a570:	4605      	mov	r5, r0
   1a572:	2800      	cmp	r0, #0
   1a574:	d0dc      	beq.n	1a530 <chan_send+0x50>
	buf->data = buf->__buf + state->offset;
   1a576:	6963      	ldr	r3, [r4, #20]
	buf->len = state->len;
   1a578:	f8a4 8010 	strh.w	r8, [r4, #16]
	buf->data = buf->__buf + state->offset;
   1a57c:	fa13 f787 	uxtah	r7, r3, r7
   1a580:	60e7      	str	r7, [r4, #12]
}
   1a582:	e7d5      	b.n	1a530 <chan_send+0x50>
		return -EINVAL;
   1a584:	f06f 0515 	mvn.w	r5, #21
   1a588:	e7d2      	b.n	1a530 <chan_send+0x50>
   1a58a:	bf00      	nop
   1a58c:	000273e3 	.word	0x000273e3
   1a590:	0002558c 	.word	0x0002558c
   1a594:	00025928 	.word	0x00025928
   1a598:	0002352d 	.word	0x0002352d

0001a59c <att_get>:
{
   1a59c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   1a59e:	7a83      	ldrb	r3, [r0, #10]
   1a5a0:	2b07      	cmp	r3, #7
   1a5a2:	d00d      	beq.n	1a5c0 <att_get+0x24>
		LOG_WRN("Not connected");
   1a5a4:	4b0e      	ldr	r3, [pc, #56]	; (1a5e0 <att_get+0x44>)
   1a5a6:	9305      	str	r3, [sp, #20]
   1a5a8:	2302      	movs	r3, #2
   1a5aa:	9304      	str	r3, [sp, #16]
   1a5ac:	aa04      	add	r2, sp, #16
   1a5ae:	f44f 5184 	mov.w	r1, #4224	; 0x1080
		LOG_ERR("Unable to find ATT channel");
   1a5b2:	480c      	ldr	r0, [pc, #48]	; (1a5e4 <att_get+0x48>)
   1a5b4:	f008 fdc0 	bl	23138 <z_log_msg_static_create.constprop.0>
		return NULL;
   1a5b8:	2000      	movs	r0, #0
}
   1a5ba:	b007      	add	sp, #28
   1a5bc:	f85d fb04 	ldr.w	pc, [sp], #4
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   1a5c0:	2104      	movs	r1, #4
   1a5c2:	f008 fcb2 	bl	22f2a <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   1a5c6:	b938      	cbnz	r0, 1a5d8 <att_get+0x3c>
		LOG_ERR("Unable to find ATT channel");
   1a5c8:	4b07      	ldr	r3, [pc, #28]	; (1a5e8 <att_get+0x4c>)
   1a5ca:	9305      	str	r3, [sp, #20]
   1a5cc:	2302      	movs	r3, #2
   1a5ce:	9304      	str	r3, [sp, #16]
   1a5d0:	aa04      	add	r2, sp, #16
   1a5d2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1a5d6:	e7ec      	b.n	1a5b2 <att_get+0x16>
	return att_chan->att;
   1a5d8:	f850 0c04 	ldr.w	r0, [r0, #-4]
   1a5dc:	e7ed      	b.n	1a5ba <att_get+0x1e>
   1a5de:	bf00      	nop
   1a5e0:	000273f6 	.word	0x000273f6
   1a5e4:	0002558c 	.word	0x0002558c
   1a5e8:	00027404 	.word	0x00027404

0001a5ec <bt_att_connected>:
{
   1a5ec:	b510      	push	{r4, lr}
   1a5ee:	f100 038c 	add.w	r3, r0, #140	; 0x8c
   1a5f2:	4604      	mov	r4, r0
   1a5f4:	f3bf 8f5b 	dmb	ish
   1a5f8:	e853 1f00 	ldrex	r1, [r3]
   1a5fc:	f041 0104 	orr.w	r1, r1, #4
   1a600:	e843 1200 	strex	r2, r1, [r3]
   1a604:	2a00      	cmp	r2, #0
   1a606:	d1f7      	bne.n	1a5f8 <bt_att_connected+0xc>
   1a608:	f3bf 8f5b 	dmb	ish
		le_chan->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   1a60c:	2317      	movs	r3, #23
   1a60e:	84e3      	strh	r3, [r4, #38]	; 0x26
		le_chan->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   1a610:	82e3      	strh	r3, [r4, #22]
	att_chan_mtu_updated(att_chan);
   1a612:	1f20      	subs	r0, r4, #4
   1a614:	f008 fcfd 	bl	23012 <att_chan_mtu_updated>
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   1a618:	f104 00ac 	add.w	r0, r4, #172	; 0xac
   1a61c:	4903      	ldr	r1, [pc, #12]	; (1a62c <bt_att_connected+0x40>)
   1a61e:	f00a f9fe 	bl	24a1e <k_work_init_delayable>
	bt_gatt_connected(le_chan->chan.conn);
   1a622:	6820      	ldr	r0, [r4, #0]
}
   1a624:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_gatt_connected(le_chan->chan.conn);
   1a628:	f001 bcd4 	b.w	1bfd4 <bt_gatt_connected>
   1a62c:	0001b311 	.word	0x0001b311

0001a630 <read_group_cb>:
{
   1a630:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   1a634:	4605      	mov	r5, r0
   1a636:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1a638:	f04f 0800 	mov.w	r8, #0
   1a63c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1a640:	6800      	ldr	r0, [r0, #0]
	struct bt_att_chan *chan = data->chan;
   1a642:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1a644:	f88d 8008 	strb.w	r8, [sp, #8]
   1a648:	a902      	add	r1, sp, #8
{
   1a64a:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1a64c:	f8ad 300a 	strh.w	r3, [sp, #10]
   1a650:	f008 f8b3 	bl	227ba <bt_uuid_cmp>
   1a654:	b1a0      	cbz	r0, 1a680 <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1a656:	f642 0301 	movw	r3, #10241	; 0x2801
   1a65a:	6828      	ldr	r0, [r5, #0]
   1a65c:	f88d 800c 	strb.w	r8, [sp, #12]
   1a660:	a903      	add	r1, sp, #12
   1a662:	f8ad 300e 	strh.w	r3, [sp, #14]
   1a666:	f008 f8a8 	bl	227ba <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1a66a:	b148      	cbz	r0, 1a680 <read_group_cb+0x50>
		if (data->group &&
   1a66c:	6923      	ldr	r3, [r4, #16]
   1a66e:	b11b      	cbz	r3, 1a678 <read_group_cb+0x48>
   1a670:	885a      	ldrh	r2, [r3, #2]
   1a672:	42b2      	cmp	r2, r6
   1a674:	d200      	bcs.n	1a678 <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
   1a676:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   1a678:	2001      	movs	r0, #1
}
   1a67a:	b004      	add	sp, #16
   1a67c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   1a680:	6861      	ldr	r1, [r4, #4]
   1a682:	6828      	ldr	r0, [r5, #0]
   1a684:	f008 f899 	bl	227ba <bt_uuid_cmp>
   1a688:	b110      	cbz	r0, 1a690 <read_group_cb+0x60>
		data->group = NULL;
   1a68a:	2300      	movs	r3, #0
   1a68c:	6123      	str	r3, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   1a68e:	e7f3      	b.n	1a678 <read_group_cb+0x48>
	if (data->rsp->len &&
   1a690:	68e3      	ldr	r3, [r4, #12]
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   1a692:	68a0      	ldr	r0, [r4, #8]
	if (data->rsp->len &&
   1a694:	781a      	ldrb	r2, [r3, #0]
   1a696:	b132      	cbz	r2, 1a6a6 <read_group_cb+0x76>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   1a698:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   1a69a:	8a01      	ldrh	r1, [r0, #16]
   1a69c:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   1a69e:	4293      	cmp	r3, r2
   1a6a0:	da01      	bge.n	1a6a6 <read_group_cb+0x76>
		return BT_GATT_ITER_STOP;
   1a6a2:	2000      	movs	r0, #0
   1a6a4:	e7e9      	b.n	1a67a <read_group_cb+0x4a>
	return net_buf_simple_add(&buf->b, len);
   1a6a6:	2104      	movs	r1, #4
   1a6a8:	300c      	adds	r0, #12
   1a6aa:	f009 fc27 	bl	23efc <net_buf_simple_add>
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   1a6ae:	6120      	str	r0, [r4, #16]
	data->group->start_handle = sys_cpu_to_le16(handle);
   1a6b0:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   1a6b2:	6923      	ldr	r3, [r4, #16]
   1a6b4:	805e      	strh	r6, [r3, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   1a6b6:	4b08      	ldr	r3, [pc, #32]	; (1a6d8 <read_group_cb+0xa8>)
   1a6b8:	9300      	str	r3, [sp, #0]
   1a6ba:	9401      	str	r4, [sp, #4]
   1a6bc:	68a2      	ldr	r2, [r4, #8]
   1a6be:	2300      	movs	r3, #0
   1a6c0:	4629      	mov	r1, r5
   1a6c2:	4638      	mov	r0, r7
   1a6c4:	f008 fd7c 	bl	231c0 <att_chan_read>
	if (read < 0) {
   1a6c8:	2800      	cmp	r0, #0
   1a6ca:	dbea      	blt.n	1a6a2 <read_group_cb+0x72>
	if (!data->group) {
   1a6cc:	6920      	ldr	r0, [r4, #16]
   1a6ce:	3800      	subs	r0, #0
   1a6d0:	bf18      	it	ne
   1a6d2:	2001      	movne	r0, #1
   1a6d4:	e7d1      	b.n	1a67a <read_group_cb+0x4a>
   1a6d6:	bf00      	nop
   1a6d8:	00023079 	.word	0x00023079

0001a6dc <read_type_cb>:
{
   1a6dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
   1a6e0:	6817      	ldr	r7, [r2, #0]
{
   1a6e2:	4605      	mov	r5, r0
   1a6e4:	4688      	mov	r8, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   1a6e6:	6800      	ldr	r0, [r0, #0]
   1a6e8:	6851      	ldr	r1, [r2, #4]
	struct bt_conn *conn = chan->chan.chan.conn;
   1a6ea:	687e      	ldr	r6, [r7, #4]
{
   1a6ec:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   1a6ee:	f008 f864 	bl	227ba <bt_uuid_cmp>
   1a6f2:	4681      	mov	r9, r0
   1a6f4:	2800      	cmp	r0, #0
   1a6f6:	d13c      	bne.n	1a772 <read_type_cb+0x96>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   1a6f8:	4630      	mov	r0, r6
   1a6fa:	2295      	movs	r2, #149	; 0x95
   1a6fc:	4629      	mov	r1, r5
   1a6fe:	f009 fa7d 	bl	23bfc <bt_gatt_check_perm>
   1a702:	4606      	mov	r6, r0
   1a704:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   1a706:	b140      	cbz	r0, 1a71a <read_type_cb+0x3e>
		if (data->rsp->len) {
   1a708:	68e3      	ldr	r3, [r4, #12]
   1a70a:	781b      	ldrb	r3, [r3, #0]
   1a70c:	b10b      	cbz	r3, 1a712 <read_type_cb+0x36>
			data->err = 0x00;
   1a70e:	f884 9014 	strb.w	r9, [r4, #20]
		return BT_GATT_ITER_STOP;
   1a712:	2000      	movs	r0, #0
}
   1a714:	b003      	add	sp, #12
   1a716:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   1a71a:	68a0      	ldr	r0, [r4, #8]
   1a71c:	f009 fbcc 	bl	23eb8 <net_buf_frag_last>
   1a720:	2102      	movs	r1, #2
   1a722:	300c      	adds	r0, #12
   1a724:	f009 fbea 	bl	23efc <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   1a728:	4b13      	ldr	r3, [pc, #76]	; (1a778 <read_type_cb+0x9c>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   1a72a:	6120      	str	r0, [r4, #16]
	data->item->handle = sys_cpu_to_le16(handle);
   1a72c:	f8a0 8000 	strh.w	r8, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   1a730:	9300      	str	r3, [sp, #0]
   1a732:	9401      	str	r4, [sp, #4]
   1a734:	68a2      	ldr	r2, [r4, #8]
   1a736:	4633      	mov	r3, r6
   1a738:	4629      	mov	r1, r5
   1a73a:	4638      	mov	r0, r7
   1a73c:	f008 fd40 	bl	231c0 <att_chan_read>
	if (read < 0) {
   1a740:	2800      	cmp	r0, #0
   1a742:	da07      	bge.n	1a754 <read_type_cb+0x78>
	if (err < 0 && err >= -0xff) {
   1a744:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
   1a748:	bf26      	itte	cs
   1a74a:	4240      	negcs	r0, r0
   1a74c:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
   1a74e:	200e      	movcc	r0, #14
		data->err = err_to_att(read);
   1a750:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   1a752:	e7de      	b.n	1a712 <read_type_cb+0x36>
	if (!data->item) {
   1a754:	6923      	ldr	r3, [r4, #16]
   1a756:	2b00      	cmp	r3, #0
   1a758:	d0db      	beq.n	1a712 <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   1a75a:	68a0      	ldr	r0, [r4, #8]
   1a75c:	f008 fbfa 	bl	22f54 <net_buf_frags_len>
   1a760:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   1a762:	1a18      	subs	r0, r3, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   1a764:	68e3      	ldr	r3, [r4, #12]
   1a766:	781b      	ldrb	r3, [r3, #0]
   1a768:	4298      	cmp	r0, r3
   1a76a:	bf94      	ite	ls
   1a76c:	2000      	movls	r0, #0
   1a76e:	2001      	movhi	r0, #1
   1a770:	e7d0      	b.n	1a714 <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
   1a772:	2001      	movs	r0, #1
   1a774:	e7ce      	b.n	1a714 <read_type_cb+0x38>
   1a776:	bf00      	nop
   1a778:	00022f65 	.word	0x00022f65

0001a77c <bt_att_accept>:

}
#endif /* CONFIG_BT_EATT */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   1a77c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a780:	b082      	sub	sp, #8
   1a782:	af00      	add	r7, sp, #0
   1a784:	4604      	mov	r4, r0
   1a786:	460e      	mov	r6, r1
	struct bt_att *att;
	struct bt_att_chan *chan;

	LOG_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   1a788:	483d      	ldr	r0, [pc, #244]	; (1a880 <bt_att_accept+0x104>)
   1a78a:	2200      	movs	r2, #0
   1a78c:	2300      	movs	r3, #0
   1a78e:	4639      	mov	r1, r7
   1a790:	f004 feec 	bl	1f56c <k_mem_slab_alloc>
   1a794:	4605      	mov	r5, r0
   1a796:	b1a8      	cbz	r0, 1a7c4 <bt_att_accept+0x48>
		LOG_ERR("No available ATT context for conn %p", conn);
   1a798:	466d      	mov	r5, sp
   1a79a:	b088      	sub	sp, #32
   1a79c:	466a      	mov	r2, sp
   1a79e:	4b39      	ldr	r3, [pc, #228]	; (1a884 <bt_att_accept+0x108>)
   1a7a0:	4839      	ldr	r0, [pc, #228]	; (1a888 <bt_att_accept+0x10c>)
   1a7a2:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1a7a6:	2303      	movs	r3, #3
   1a7a8:	f842 3f10 	str.w	r3, [r2, #16]!
   1a7ac:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1a7b0:	f008 fcc2 	bl	23138 <z_log_msg_static_create.constprop.0>
   1a7b4:	46ad      	mov	sp, r5
		return -ENOMEM;
   1a7b6:	f06f 050b 	mvn.w	r5, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
   1a7ba:	4628      	mov	r0, r5
   1a7bc:	3708      	adds	r7, #8
   1a7be:	46bd      	mov	sp, r7
   1a7c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return z_impl_z_current_get();
   1a7c4:	f005 fd24 	bl	20210 <z_impl_z_current_get>
	att_handle_rsp_thread = k_current_get();
   1a7c8:	4b30      	ldr	r3, [pc, #192]	; (1a88c <bt_att_accept+0x110>)
	(void)memset(att, 0, sizeof(*att));
   1a7ca:	f8d7 8000 	ldr.w	r8, [r7]
	att_handle_rsp_thread = k_current_get();
   1a7ce:	6018      	str	r0, [r3, #0]
   1a7d0:	4629      	mov	r1, r5
   1a7d2:	2228      	movs	r2, #40	; 0x28
   1a7d4:	f108 0004 	add.w	r0, r8, #4
   1a7d8:	f00a fd03 	bl	251e2 <memset>
	att->conn = conn;
   1a7dc:	f8c8 4000 	str.w	r4, [r8]
	sys_slist_init(&att->reqs);
   1a7e0:	683c      	ldr	r4, [r7, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   1a7e2:	482b      	ldr	r0, [pc, #172]	; (1a890 <bt_att_accept+0x114>)
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   1a7e4:	607d      	str	r5, [r7, #4]
	list->tail = NULL;
   1a7e6:	e9c4 5501 	strd	r5, r5, [r4, #4]
   1a7ea:	e9c4 5509 	strd	r5, r5, [r4, #36]	; 0x24
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   1a7ee:	2200      	movs	r2, #0
   1a7f0:	2300      	movs	r3, #0
   1a7f2:	1d39      	adds	r1, r7, #4
   1a7f4:	f004 feba 	bl	1f56c <k_mem_slab_alloc>
   1a7f8:	4605      	mov	r5, r0
   1a7fa:	b180      	cbz	r0, 1a81e <bt_att_accept+0xa2>
		LOG_WRN("No available ATT channel for conn %p", att->conn);
   1a7fc:	6823      	ldr	r3, [r4, #0]
   1a7fe:	466c      	mov	r4, sp
   1a800:	b088      	sub	sp, #32
   1a802:	466a      	mov	r2, sp
   1a804:	4923      	ldr	r1, [pc, #140]	; (1a894 <bt_att_accept+0x118>)
   1a806:	4820      	ldr	r0, [pc, #128]	; (1a888 <bt_att_accept+0x10c>)
   1a808:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1a80c:	2303      	movs	r3, #3
   1a80e:	f842 3f10 	str.w	r3, [r2, #16]!
   1a812:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1a816:	f008 fc8f 	bl	23138 <z_log_msg_static_create.constprop.0>
   1a81a:	46a5      	mov	sp, r4
	if (!chan) {
   1a81c:	e7cb      	b.n	1a7b6 <bt_att_accept+0x3a>
	(void)memset(chan, 0, sizeof(*chan));
   1a81e:	687b      	ldr	r3, [r7, #4]
   1a820:	4601      	mov	r1, r0
   1a822:	22e8      	movs	r2, #232	; 0xe8
   1a824:	4618      	mov	r0, r3
   1a826:	f00a fcdc 	bl	251e2 <memset>
	chan->chan.chan.ops = &ops;
   1a82a:	4a1b      	ldr	r2, [pc, #108]	; (1a898 <bt_att_accept+0x11c>)
   1a82c:	6082      	str	r2, [r0, #8]
	z_impl_k_queue_init(queue);
   1a82e:	3098      	adds	r0, #152	; 0x98
   1a830:	f00a f80e 	bl	24850 <z_impl_k_queue_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1a834:	687b      	ldr	r3, [r7, #4]
   1a836:	f3bf 8f5b 	dmb	ish
   1a83a:	3390      	adds	r3, #144	; 0x90
   1a83c:	e853 2f00 	ldrex	r2, [r3]
   1a840:	e843 5100 	strex	r1, r5, [r3]
   1a844:	2900      	cmp	r1, #0
   1a846:	d1f9      	bne.n	1a83c <bt_att_accept+0xc0>
   1a848:	f3bf 8f5b 	dmb	ish
	chan->att = att;
   1a84c:	687b      	ldr	r3, [r7, #4]
   1a84e:	601c      	str	r4, [r3, #0]
	if (sys_slist_is_empty(&att->chans)) {
   1a850:	6a63      	ldr	r3, [r4, #36]	; 0x24
	att_chan_attach(att, chan);
   1a852:	f8d7 8004 	ldr.w	r8, [r7, #4]
	if (sys_slist_is_empty(&att->chans)) {
   1a856:	b91b      	cbnz	r3, 1a860 <bt_att_accept+0xe4>
   1a858:	f104 000c 	add.w	r0, r4, #12
   1a85c:	f009 fff8 	bl	24850 <z_impl_k_queue_init>
	return list->head;
   1a860:	6a62      	ldr	r2, [r4, #36]	; 0x24
	parent->next = child;
   1a862:	f8c8 20e0 	str.w	r2, [r8, #224]	; 0xe0
Z_GENLIST_PREPEND(slist, snode)
   1a866:	6aa2      	ldr	r2, [r4, #40]	; 0x28
	sys_slist_prepend(&att->chans, &chan->node);
   1a868:	f108 03e0 	add.w	r3, r8, #224	; 0xe0
	list->head = node;
   1a86c:	6263      	str	r3, [r4, #36]	; 0x24
Z_GENLIST_PREPEND(slist, snode)
   1a86e:	b902      	cbnz	r2, 1a872 <bt_att_accept+0xf6>
	list->tail = node;
   1a870:	62a3      	str	r3, [r4, #40]	; 0x28
	return chan;
   1a872:	687b      	ldr	r3, [r7, #4]
	if (!chan) {
   1a874:	2b00      	cmp	r3, #0
   1a876:	d09e      	beq.n	1a7b6 <bt_att_accept+0x3a>
	*ch = &chan->chan.chan;
   1a878:	3304      	adds	r3, #4
   1a87a:	6033      	str	r3, [r6, #0]
	return 0;
   1a87c:	e79d      	b.n	1a7ba <bt_att_accept+0x3e>
   1a87e:	bf00      	nop
   1a880:	200007c8 	.word	0x200007c8
   1a884:	0002741f 	.word	0x0002741f
   1a888:	0002558c 	.word	0x0002558c
   1a88c:	2000503c 	.word	0x2000503c
   1a890:	200007e4 	.word	0x200007e4
   1a894:	00027444 	.word	0x00027444
   1a898:	20000594 	.word	0x20000594

0001a89c <bt_att_chan_create_pdu>:
{
   1a89c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
   1a8a0:	b086      	sub	sp, #24
   1a8a2:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   1a8a4:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   1a8a6:	1c53      	adds	r3, r2, #1
   1a8a8:	428b      	cmp	r3, r1
{
   1a8aa:	af00      	add	r7, sp, #0
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   1a8ac:	d915      	bls.n	1a8da <bt_att_chan_create_pdu+0x3e>
		LOG_WRN("ATT MTU exceeded, max %u, wanted %zu", chan->chan.tx.mtu,
   1a8ae:	466c      	mov	r4, sp
   1a8b0:	b088      	sub	sp, #32
   1a8b2:	466a      	mov	r2, sp
   1a8b4:	4829      	ldr	r0, [pc, #164]	; (1a95c <bt_att_chan_create_pdu+0xc0>)
   1a8b6:	61d3      	str	r3, [r2, #28]
   1a8b8:	2304      	movs	r3, #4
   1a8ba:	e9c2 0105 	strd	r0, r1, [r2, #20]
   1a8be:	f842 3f10 	str.w	r3, [r2, #16]!
   1a8c2:	f44f 5102 	mov.w	r1, #8320	; 0x2080
		LOG_ERR("Unable to allocate buffer for op 0x%02x", op);
   1a8c6:	4826      	ldr	r0, [pc, #152]	; (1a960 <bt_att_chan_create_pdu+0xc4>)
   1a8c8:	f008 fc36 	bl	23138 <z_log_msg_static_create.constprop.0>
   1a8cc:	46a5      	mov	sp, r4
		return NULL;
   1a8ce:	2400      	movs	r4, #0
}
   1a8d0:	4620      	mov	r0, r4
   1a8d2:	3718      	adds	r7, #24
   1a8d4:	46bd      	mov	sp, r7
   1a8d6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	switch (att_op_get_type(op)) {
   1a8da:	4628      	mov	r0, r5
   1a8dc:	f7ff fcec 	bl	1a2b8 <att_op_get_type>
   1a8e0:	2802      	cmp	r0, #2
   1a8e2:	d019      	beq.n	1a918 <bt_att_chan_create_pdu+0x7c>
   1a8e4:	2804      	cmp	r0, #4
   1a8e6:	d017      	beq.n	1a918 <bt_att_chan_create_pdu+0x7c>
		timeout = K_FOREVER;
   1a8e8:	f04f 38ff 	mov.w	r8, #4294967295
   1a8ec:	f04f 39ff 	mov.w	r9, #4294967295
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   1a8f0:	2100      	movs	r1, #0
   1a8f2:	4642      	mov	r2, r8
   1a8f4:	464b      	mov	r3, r9
   1a8f6:	4608      	mov	r0, r1
   1a8f8:	f008 fafb 	bl	22ef2 <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   1a8fc:	4604      	mov	r4, r0
   1a8fe:	b980      	cbnz	r0, 1a922 <bt_att_chan_create_pdu+0x86>
		LOG_ERR("Unable to allocate buffer for op 0x%02x", op);
   1a900:	466c      	mov	r4, sp
   1a902:	b088      	sub	sp, #32
   1a904:	466a      	mov	r2, sp
   1a906:	4b17      	ldr	r3, [pc, #92]	; (1a964 <bt_att_chan_create_pdu+0xc8>)
   1a908:	e9c2 3505 	strd	r3, r5, [r2, #20]
   1a90c:	2303      	movs	r3, #3
   1a90e:	f842 3f10 	str.w	r3, [r2, #16]!
   1a912:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1a916:	e7d6      	b.n	1a8c6 <bt_att_chan_create_pdu+0x2a>
	switch (att_op_get_type(op)) {
   1a918:	f44f 2870 	mov.w	r8, #983040	; 0xf0000
   1a91c:	f04f 0900 	mov.w	r9, #0
   1a920:	e7e6      	b.n	1a8f0 <bt_att_chan_create_pdu+0x54>
	return z_impl_k_queue_get(queue, timeout);
   1a922:	4811      	ldr	r0, [pc, #68]	; (1a968 <bt_att_chan_create_pdu+0xcc>)
   1a924:	4642      	mov	r2, r8
   1a926:	464b      	mov	r3, r9
   1a928:	f004 ffda 	bl	1f8e0 <z_impl_k_queue_get>
	if (!data) {
   1a92c:	b970      	cbnz	r0, 1a94c <bt_att_chan_create_pdu+0xb0>
		LOG_WRN("Unable to allocate ATT TX meta");
   1a92e:	4b0f      	ldr	r3, [pc, #60]	; (1a96c <bt_att_chan_create_pdu+0xd0>)
   1a930:	617b      	str	r3, [r7, #20]
   1a932:	2302      	movs	r3, #2
   1a934:	480a      	ldr	r0, [pc, #40]	; (1a960 <bt_att_chan_create_pdu+0xc4>)
   1a936:	613b      	str	r3, [r7, #16]
   1a938:	f107 0210 	add.w	r2, r7, #16
   1a93c:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1a940:	f008 fbfa 	bl	23138 <z_log_msg_static_create.constprop.0>
		net_buf_unref(buf);
   1a944:	4620      	mov	r0, r4
   1a946:	f001 fc75 	bl	1c234 <net_buf_unref>
		return NULL;
   1a94a:	e7c0      	b.n	1a8ce <bt_att_chan_create_pdu+0x32>
	bt_att_tx_meta_data(buf) = data;
   1a94c:	61a0      	str	r0, [r4, #24]
   1a94e:	2101      	movs	r1, #1
   1a950:	f104 000c 	add.w	r0, r4, #12
   1a954:	f009 fad2 	bl	23efc <net_buf_simple_add>
	hdr->code = op;
   1a958:	7005      	strb	r5, [r0, #0]
	return buf;
   1a95a:	e7b9      	b.n	1a8d0 <bt_att_chan_create_pdu+0x34>
   1a95c:	00027469 	.word	0x00027469
   1a960:	0002558c 	.word	0x0002558c
   1a964:	00027259 	.word	0x00027259
   1a968:	2000085c 	.word	0x2000085c
   1a96c:	0002748e 	.word	0x0002748e

0001a970 <bt_att_recv>:
{
   1a970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a974:	b087      	sub	sp, #28
	if (buf->len < sizeof(*hdr)) {
   1a976:	8a0b      	ldrh	r3, [r1, #16]
{
   1a978:	af00      	add	r7, sp, #0
   1a97a:	4682      	mov	sl, r0
   1a97c:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   1a97e:	b97b      	cbnz	r3, 1a9a0 <bt_att_recv+0x30>
		LOG_ERR("Too small ATT PDU received");
   1a980:	4b4c      	ldr	r3, [pc, #304]	; (1aab4 <bt_att_recv+0x144>)
   1a982:	617b      	str	r3, [r7, #20]
   1a984:	2302      	movs	r3, #2
   1a986:	613b      	str	r3, [r7, #16]
   1a988:	f107 0210 	add.w	r2, r7, #16
   1a98c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
			LOG_WRN("Ignoring unexpected request");
   1a990:	4849      	ldr	r0, [pc, #292]	; (1aab8 <bt_att_recv+0x148>)
   1a992:	f008 fbd1 	bl	23138 <z_log_msg_static_create.constprop.0>
}
   1a996:	2000      	movs	r0, #0
   1a998:	371c      	adds	r7, #28
   1a99a:	46bd      	mov	sp, r7
   1a99c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   1a9a0:	2101      	movs	r1, #1
   1a9a2:	f104 000c 	add.w	r0, r4, #12
   1a9a6:	f009 fad0 	bl	23f4a <net_buf_simple_pull_mem>
	if (!att_chan->att) {
   1a9aa:	f85a 3c04 	ldr.w	r3, [sl, #-4]
   1a9ae:	4605      	mov	r5, r0
   1a9b0:	2b00      	cmp	r3, #0
   1a9b2:	d0f0      	beq.n	1a996 <bt_att_recv+0x26>
		if (hdr->code == handlers[i].op) {
   1a9b4:	7801      	ldrb	r1, [r0, #0]
   1a9b6:	f8df 8114 	ldr.w	r8, [pc, #276]	; 1aacc <bt_att_recv+0x15c>
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   1a9ba:	f1aa 0604 	sub.w	r6, sl, #4
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   1a9be:	2300      	movs	r3, #0
		if (hdr->code == handlers[i].op) {
   1a9c0:	f818 0033 	ldrb.w	r0, [r8, r3, lsl #3]
   1a9c4:	4288      	cmp	r0, r1
   1a9c6:	ea4f 0bc3 	mov.w	fp, r3, lsl #3
   1a9ca:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
   1a9ce:	d114      	bne.n	1a9fa <bt_att_recv+0x8a>
		if (handler->type == ATT_REQUEST &&
   1a9d0:	f892 9002 	ldrb.w	r9, [r2, #2]
   1a9d4:	f1b9 0f01 	cmp.w	r9, #1
   1a9d8:	d131      	bne.n	1aa3e <bt_att_recv+0xce>
		    atomic_test_and_set_bit(att_chan->flags, ATT_PENDING_RSP)) {
   1a9da:	2100      	movs	r1, #0
   1a9dc:	f10a 008c 	add.w	r0, sl, #140	; 0x8c
   1a9e0:	f008 fc94 	bl	2330c <atomic_test_and_set_bit>
		if (handler->type == ATT_REQUEST &&
   1a9e4:	2800      	cmp	r0, #0
   1a9e6:	d035      	beq.n	1aa54 <bt_att_recv+0xe4>
			LOG_WRN("Ignoring unexpected request");
   1a9e8:	4b34      	ldr	r3, [pc, #208]	; (1aabc <bt_att_recv+0x14c>)
   1a9ea:	617b      	str	r3, [r7, #20]
   1a9ec:	2302      	movs	r3, #2
   1a9ee:	613b      	str	r3, [r7, #16]
   1a9f0:	f107 0210 	add.w	r2, r7, #16
   1a9f4:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1a9f8:	e7ca      	b.n	1a990 <bt_att_recv+0x20>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   1a9fa:	3301      	adds	r3, #1
   1a9fc:	2b0e      	cmp	r3, #14
   1a9fe:	d1df      	bne.n	1a9c0 <bt_att_recv+0x50>
		LOG_WRN("Unhandled ATT code 0x%02x", hdr->code);
   1aa00:	466c      	mov	r4, sp
   1aa02:	b088      	sub	sp, #32
   1aa04:	466a      	mov	r2, sp
   1aa06:	4b2e      	ldr	r3, [pc, #184]	; (1aac0 <bt_att_recv+0x150>)
   1aa08:	482b      	ldr	r0, [pc, #172]	; (1aab8 <bt_att_recv+0x148>)
   1aa0a:	e9c2 3105 	strd	r3, r1, [r2, #20]
   1aa0e:	2303      	movs	r3, #3
   1aa10:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1aa14:	f842 3f10 	str.w	r3, [r2, #16]!
   1aa18:	f008 fb8e 	bl	23138 <z_log_msg_static_create.constprop.0>
		if (att_op_get_type(hdr->code) != ATT_COMMAND &&
   1aa1c:	7829      	ldrb	r1, [r5, #0]
   1aa1e:	46a5      	mov	sp, r4
   1aa20:	4608      	mov	r0, r1
   1aa22:	f7ff fc49 	bl	1a2b8 <att_op_get_type>
   1aa26:	2800      	cmp	r0, #0
   1aa28:	d0b5      	beq.n	1a996 <bt_att_recv+0x26>
   1aa2a:	2805      	cmp	r0, #5
   1aa2c:	d0b3      	beq.n	1a996 <bt_att_recv+0x26>
	if (!req) {
   1aa2e:	2900      	cmp	r1, #0
   1aa30:	d0b1      	beq.n	1a996 <bt_att_recv+0x26>
   1aa32:	2306      	movs	r3, #6
   1aa34:	2200      	movs	r2, #0
   1aa36:	4630      	mov	r0, r6
   1aa38:	f008 fde6 	bl	23608 <send_err_rsp.part.0>
   1aa3c:	e7ab      	b.n	1a996 <bt_att_recv+0x26>
		} else if (handler->type == ATT_INDICATION &&
   1aa3e:	f1b9 0f05 	cmp.w	r9, #5
   1aa42:	d107      	bne.n	1aa54 <bt_att_recv+0xe4>
			   atomic_test_and_set_bit(att_chan->flags,
   1aa44:	2101      	movs	r1, #1
   1aa46:	f10a 008c 	add.w	r0, sl, #140	; 0x8c
   1aa4a:	f008 fc5f 	bl	2330c <atomic_test_and_set_bit>
		} else if (handler->type == ATT_INDICATION &&
   1aa4e:	b108      	cbz	r0, 1aa54 <bt_att_recv+0xe4>
			LOG_WRN("Ignoring unexpected indication");
   1aa50:	4b1c      	ldr	r3, [pc, #112]	; (1aac4 <bt_att_recv+0x154>)
   1aa52:	e7ca      	b.n	1a9ea <bt_att_recv+0x7a>
	if (buf->len < handler->expect_len) {
   1aa54:	44d8      	add	r8, fp
   1aa56:	8a23      	ldrh	r3, [r4, #16]
   1aa58:	f898 2001 	ldrb.w	r2, [r8, #1]
   1aa5c:	429a      	cmp	r2, r3
   1aa5e:	d916      	bls.n	1aa8e <bt_att_recv+0x11e>
		LOG_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   1aa60:	46e9      	mov	r9, sp
   1aa62:	b088      	sub	sp, #32
   1aa64:	7829      	ldrb	r1, [r5, #0]
   1aa66:	466a      	mov	r2, sp
   1aa68:	4817      	ldr	r0, [pc, #92]	; (1aac8 <bt_att_recv+0x158>)
   1aa6a:	61d1      	str	r1, [r2, #28]
   1aa6c:	2404      	movs	r4, #4
   1aa6e:	e9c2 0305 	strd	r0, r3, [r2, #20]
   1aa72:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1aa76:	f842 4f10 	str.w	r4, [r2, #16]!
   1aa7a:	480f      	ldr	r0, [pc, #60]	; (1aab8 <bt_att_recv+0x148>)
   1aa7c:	f008 fb5c 	bl	23138 <z_log_msg_static_create.constprop.0>
	if (handler->type == ATT_REQUEST && err) {
   1aa80:	f898 3002 	ldrb.w	r3, [r8, #2]
   1aa84:	2b01      	cmp	r3, #1
   1aa86:	46cd      	mov	sp, r9
   1aa88:	d185      	bne.n	1a996 <bt_att_recv+0x26>
		err = BT_ATT_ERR_INVALID_PDU;
   1aa8a:	4623      	mov	r3, r4
   1aa8c:	e00c      	b.n	1aaa8 <bt_att_recv+0x138>
		err = handler->func(att_chan, buf);
   1aa8e:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1aa92:	4621      	mov	r1, r4
   1aa94:	4630      	mov	r0, r6
   1aa96:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   1aa98:	f1b9 0f01 	cmp.w	r9, #1
		err = handler->func(att_chan, buf);
   1aa9c:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
   1aa9e:	f47f af7a 	bne.w	1a996 <bt_att_recv+0x26>
   1aaa2:	2800      	cmp	r0, #0
   1aaa4:	f43f af77 	beq.w	1a996 <bt_att_recv+0x26>
		send_err_rsp(att_chan, hdr->code, 0, err);
   1aaa8:	7829      	ldrb	r1, [r5, #0]
	if (!req) {
   1aaaa:	2900      	cmp	r1, #0
   1aaac:	f43f af73 	beq.w	1a996 <bt_att_recv+0x26>
   1aab0:	e7c0      	b.n	1aa34 <bt_att_recv+0xc4>
   1aab2:	bf00      	nop
   1aab4:	000274ad 	.word	0x000274ad
   1aab8:	0002558c 	.word	0x0002558c
   1aabc:	000274e2 	.word	0x000274e2
   1aac0:	000274c8 	.word	0x000274c8
   1aac4:	000274fe 	.word	0x000274fe
   1aac8:	0002751d 	.word	0x0002751d
   1aacc:	00025940 	.word	0x00025940

0001aad0 <att_write_rsp.constprop.0>:
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   1aad0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1aad2:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   1aad4:	6803      	ldr	r3, [r0, #0]
   1aad6:	460d      	mov	r5, r1
   1aad8:	3900      	subs	r1, #0
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   1aada:	b087      	sub	sp, #28
   1aadc:	4604      	mov	r4, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   1aade:	bf18      	it	ne
   1aae0:	2101      	movne	r1, #1
   1aae2:	6818      	ldr	r0, [r3, #0]
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   1aae4:	4617      	mov	r7, r2
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   1aae6:	f009 f936 	bl	23d56 <bt_gatt_change_aware>
   1aaea:	b948      	cbnz	r0, 1ab00 <att_write_rsp.constprop.0+0x30>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   1aaec:	2105      	movs	r1, #5
   1aaee:	f104 0090 	add.w	r0, r4, #144	; 0x90
   1aaf2:	f008 fc0b 	bl	2330c <atomic_test_and_set_bit>
   1aaf6:	2800      	cmp	r0, #0
   1aaf8:	d048      	beq.n	1ab8c <att_write_rsp.constprop.0+0xbc>
			return 0;
   1aafa:	2000      	movs	r0, #0
}
   1aafc:	b007      	add	sp, #28
   1aafe:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!handle) {
   1ab00:	2e00      	cmp	r6, #0
   1ab02:	d045      	beq.n	1ab90 <att_write_rsp.constprop.0+0xc0>
	(void)memset(&data, 0, sizeof(data));
   1ab04:	2218      	movs	r2, #24
   1ab06:	2100      	movs	r1, #0
   1ab08:	4668      	mov	r0, sp
   1ab0a:	f00a fb6a 	bl	251e2 <memset>
	if (rsp) {
   1ab0e:	bb67      	cbnz	r7, 1ab6a <att_write_rsp.constprop.0+0x9a>
	data.conn = chan->att->conn;
   1ab10:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   1ab12:	4a20      	ldr	r2, [pc, #128]	; (1ab94 <att_write_rsp.constprop.0+0xc4>)
	data.conn = chan->att->conn;
   1ab14:	681b      	ldr	r3, [r3, #0]
   1ab16:	9300      	str	r3, [sp, #0]
	data.offset = offset;
   1ab18:	2300      	movs	r3, #0
   1ab1a:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.value = value;
   1ab1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1ab20:	9303      	str	r3, [sp, #12]
	data.len = len;
   1ab22:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
   1ab26:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   1ab2a:	2301      	movs	r3, #1
   1ab2c:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   1ab30:	4631      	mov	r1, r6
   1ab32:	466b      	mov	r3, sp
   1ab34:	4630      	mov	r0, r6
	data.req = req;
   1ab36:	f88d 5008 	strb.w	r5, [sp, #8]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   1ab3a:	f008 fa5f 	bl	22ffc <bt_gatt_foreach_attr>
	if (data.err) {
   1ab3e:	f89d 3014 	ldrb.w	r3, [sp, #20]
   1ab42:	b1e3      	cbz	r3, 1ab7e <att_write_rsp.constprop.0+0xae>
		if (rsp) {
   1ab44:	2f00      	cmp	r7, #0
   1ab46:	d0d8      	beq.n	1aafa <att_write_rsp.constprop.0+0x2a>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1ab48:	9b01      	ldr	r3, [sp, #4]
   1ab4a:	6998      	ldr	r0, [r3, #24]
   1ab4c:	f7ff fbfa 	bl	1a344 <tx_meta_data_free>
			net_buf_unref(data.buf);
   1ab50:	9801      	ldr	r0, [sp, #4]
   1ab52:	f001 fb6f 	bl	1c234 <net_buf_unref>
			send_err_rsp(chan, req, handle, data.err);
   1ab56:	f89d 3014 	ldrb.w	r3, [sp, #20]
	if (!req) {
   1ab5a:	2d00      	cmp	r5, #0
   1ab5c:	d0cd      	beq.n	1aafa <att_write_rsp.constprop.0+0x2a>
   1ab5e:	4632      	mov	r2, r6
   1ab60:	4629      	mov	r1, r5
   1ab62:	4620      	mov	r0, r4
   1ab64:	f008 fd50 	bl	23608 <send_err_rsp.part.0>
   1ab68:	e7c7      	b.n	1aafa <att_write_rsp.constprop.0+0x2a>
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   1ab6a:	2200      	movs	r2, #0
   1ab6c:	4639      	mov	r1, r7
   1ab6e:	4620      	mov	r0, r4
   1ab70:	f7ff fe94 	bl	1a89c <bt_att_chan_create_pdu>
   1ab74:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
   1ab76:	2800      	cmp	r0, #0
   1ab78:	d1ca      	bne.n	1ab10 <att_write_rsp.constprop.0+0x40>
			return BT_ATT_ERR_UNLIKELY;
   1ab7a:	200e      	movs	r0, #14
   1ab7c:	e7be      	b.n	1aafc <att_write_rsp.constprop.0+0x2c>
	if (data.buf) {
   1ab7e:	9901      	ldr	r1, [sp, #4]
   1ab80:	2900      	cmp	r1, #0
   1ab82:	d0ba      	beq.n	1aafa <att_write_rsp.constprop.0+0x2a>
		bt_att_chan_send_rsp(chan, data.buf);
   1ab84:	4620      	mov	r0, r4
   1ab86:	f008 fb0d 	bl	231a4 <bt_att_chan_send_rsp>
   1ab8a:	e7b6      	b.n	1aafa <att_write_rsp.constprop.0+0x2a>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   1ab8c:	2012      	movs	r0, #18
   1ab8e:	e7b5      	b.n	1aafc <att_write_rsp.constprop.0+0x2c>
		return BT_ATT_ERR_INVALID_HANDLE;
   1ab90:	2001      	movs	r0, #1
   1ab92:	e7b3      	b.n	1aafc <att_write_rsp.constprop.0+0x2c>
   1ab94:	00022f9b 	.word	0x00022f9b

0001ab98 <bt_att_create_pdu>:
{
   1ab98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ab9a:	af00      	add	r7, sp, #0
   1ab9c:	460e      	mov	r6, r1
   1ab9e:	4615      	mov	r5, r2
	att = att_get(conn);
   1aba0:	f7ff fcfc 	bl	1a59c <att_get>
	if (!att) {
   1aba4:	b1e0      	cbz	r0, 1abe0 <bt_att_create_pdu+0x48>
	return list->head;
   1aba6:	6a43      	ldr	r3, [r0, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1aba8:	4618      	mov	r0, r3
   1abaa:	b11b      	cbz	r3, 1abb4 <bt_att_create_pdu+0x1c>
	return node->next;
   1abac:	f850 39e0 	ldr.w	r3, [r0], #-224
   1abb0:	b103      	cbz	r3, 1abb4 <bt_att_create_pdu+0x1c>
   1abb2:	3be0      	subs	r3, #224	; 0xe0
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   1abb4:	1c6c      	adds	r4, r5, #1
   1abb6:	4622      	mov	r2, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1abb8:	b118      	cbz	r0, 1abc2 <bt_att_create_pdu+0x2a>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   1abba:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   1abbc:	42a1      	cmp	r1, r4
   1abbe:	d21a      	bcs.n	1abf6 <bt_att_create_pdu+0x5e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1abc0:	b983      	cbnz	r3, 1abe4 <bt_att_create_pdu+0x4c>
	LOG_WRN("No ATT channel for MTU %zu", len + sizeof(op));
   1abc2:	466d      	mov	r5, sp
   1abc4:	b088      	sub	sp, #32
   1abc6:	466a      	mov	r2, sp
   1abc8:	4b0f      	ldr	r3, [pc, #60]	; (1ac08 <bt_att_create_pdu+0x70>)
   1abca:	4810      	ldr	r0, [pc, #64]	; (1ac0c <bt_att_create_pdu+0x74>)
   1abcc:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1abd0:	2303      	movs	r3, #3
   1abd2:	f842 3f10 	str.w	r3, [r2, #16]!
   1abd6:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1abda:	f008 faad 	bl	23138 <z_log_msg_static_create.constprop.0>
   1abde:	46ad      	mov	sp, r5
		return NULL;
   1abe0:	2000      	movs	r0, #0
   1abe2:	e00c      	b.n	1abfe <bt_att_create_pdu+0x66>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1abe4:	4618      	mov	r0, r3
   1abe6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   1abea:	b153      	cbz	r3, 1ac02 <bt_att_create_pdu+0x6a>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   1abec:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   1abee:	428a      	cmp	r2, r1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1abf0:	f1a3 03e0 	sub.w	r3, r3, #224	; 0xe0
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   1abf4:	d8f6      	bhi.n	1abe4 <bt_att_create_pdu+0x4c>
		return bt_att_chan_create_pdu(chan, op, len);
   1abf6:	462a      	mov	r2, r5
   1abf8:	4631      	mov	r1, r6
   1abfa:	f7ff fe4f 	bl	1a89c <bt_att_chan_create_pdu>
}
   1abfe:	46bd      	mov	sp, r7
   1ac00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   1ac02:	4614      	mov	r4, r2
   1ac04:	e7d9      	b.n	1abba <bt_att_create_pdu+0x22>
   1ac06:	bf00      	nop
   1ac08:	0002753c 	.word	0x0002753c
   1ac0c:	0002558c 	.word	0x0002558c

0001ac10 <att_read_group_req>:
{
   1ac10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   1ac14:	8a0e      	ldrh	r6, [r1, #16]
   1ac16:	3e04      	subs	r6, #4
   1ac18:	b2f6      	uxtb	r6, r6
	if (uuid_len != 2 && uuid_len != 16) {
   1ac1a:	2e02      	cmp	r6, #2
{
   1ac1c:	4604      	mov	r4, r0
   1ac1e:	b08c      	sub	sp, #48	; 0x30
   1ac20:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   1ac22:	d001      	beq.n	1ac28 <att_read_group_req+0x18>
   1ac24:	2e10      	cmp	r6, #16
   1ac26:	d16a      	bne.n	1acfe <att_read_group_req+0xee>
   1ac28:	2104      	movs	r1, #4
   1ac2a:	300c      	adds	r0, #12
   1ac2c:	f009 f98d 	bl	23f4a <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   1ac30:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
   1ac34:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   1ac36:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   1ac38:	1d01      	adds	r1, r0, #4
   1ac3a:	4632      	mov	r2, r6
   1ac3c:	4640      	mov	r0, r8
   1ac3e:	f007 fdea 	bl	22816 <bt_uuid_create>
   1ac42:	2800      	cmp	r0, #0
   1ac44:	d05d      	beq.n	1ad02 <att_read_group_req+0xf2>
	if (!start || !end) {
   1ac46:	2d00      	cmp	r5, #0
   1ac48:	d03a      	beq.n	1acc0 <att_read_group_req+0xb0>
   1ac4a:	2600      	movs	r6, #0
   1ac4c:	2f00      	cmp	r7, #0
   1ac4e:	d036      	beq.n	1acbe <att_read_group_req+0xae>
	if (start > end) {
   1ac50:	42bd      	cmp	r5, r7
   1ac52:	d835      	bhi.n	1acc0 <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   1ac54:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1ac58:	a901      	add	r1, sp, #4
   1ac5a:	4640      	mov	r0, r8
   1ac5c:	f88d 6004 	strb.w	r6, [sp, #4]
   1ac60:	f8ad 3006 	strh.w	r3, [sp, #6]
   1ac64:	f007 fda9 	bl	227ba <bt_uuid_cmp>
   1ac68:	bb70      	cbnz	r0, 1acc8 <att_read_group_req+0xb8>
	struct bt_conn *conn = chan->chan.chan.conn;
   1ac6a:	6866      	ldr	r6, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
   1ac6c:	2214      	movs	r2, #20
   1ac6e:	2100      	movs	r1, #0
   1ac70:	a807      	add	r0, sp, #28
   1ac72:	f00a fab6 	bl	251e2 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   1ac76:	2201      	movs	r2, #1
   1ac78:	2111      	movs	r1, #17
   1ac7a:	4630      	mov	r0, r6
   1ac7c:	f7ff ff8c 	bl	1ab98 <bt_att_create_pdu>
   1ac80:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
   1ac82:	2800      	cmp	r0, #0
   1ac84:	d03d      	beq.n	1ad02 <att_read_group_req+0xf2>
	return net_buf_simple_add(&buf->b, len);
   1ac86:	2101      	movs	r1, #1
   1ac88:	300c      	adds	r0, #12
	data.uuid = uuid;
   1ac8a:	e9cd 4807 	strd	r4, r8, [sp, #28]
   1ac8e:	f009 f935 	bl	23efc <net_buf_simple_add>
	data.rsp->len = 0U;
   1ac92:	2300      	movs	r3, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   1ac94:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   1ac96:	4a1c      	ldr	r2, [pc, #112]	; (1ad08 <att_read_group_req+0xf8>)
	data.rsp->len = 0U;
   1ac98:	7003      	strb	r3, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   1ac9a:	4639      	mov	r1, r7
	data.group = NULL;
   1ac9c:	930b      	str	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   1ac9e:	4628      	mov	r0, r5
   1aca0:	ab07      	add	r3, sp, #28
   1aca2:	f008 f9ab 	bl	22ffc <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
   1aca6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1aca8:	781b      	ldrb	r3, [r3, #0]
   1acaa:	bb1b      	cbnz	r3, 1acf4 <att_read_group_req+0xe4>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1acac:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1acae:	6998      	ldr	r0, [r3, #24]
   1acb0:	f7ff fb48 	bl	1a344 <tx_meta_data_free>
		net_buf_unref(data.buf);
   1acb4:	9809      	ldr	r0, [sp, #36]	; 0x24
   1acb6:	f001 fabd 	bl	1c234 <net_buf_unref>
	if (!req) {
   1acba:	230a      	movs	r3, #10
   1acbc:	e001      	b.n	1acc2 <att_read_group_req+0xb2>
			*err = 0U;
   1acbe:	463d      	mov	r5, r7
	if (!req) {
   1acc0:	2301      	movs	r3, #1
   1acc2:	462a      	mov	r2, r5
   1acc4:	2110      	movs	r1, #16
   1acc6:	e00e      	b.n	1ace6 <att_read_group_req+0xd6>
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   1acc8:	f642 0301 	movw	r3, #10241	; 0x2801
   1accc:	a907      	add	r1, sp, #28
   1acce:	4640      	mov	r0, r8
   1acd0:	f88d 601c 	strb.w	r6, [sp, #28]
   1acd4:	f8ad 301e 	strh.w	r3, [sp, #30]
   1acd8:	f007 fd6f 	bl	227ba <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   1acdc:	2800      	cmp	r0, #0
   1acde:	d0c4      	beq.n	1ac6a <att_read_group_req+0x5a>
	if (!req) {
   1ace0:	2310      	movs	r3, #16
   1ace2:	462a      	mov	r2, r5
   1ace4:	4619      	mov	r1, r3
   1ace6:	4620      	mov	r0, r4
   1ace8:	f008 fc8e 	bl	23608 <send_err_rsp.part.0>
		return 0;
   1acec:	2000      	movs	r0, #0
}
   1acee:	b00c      	add	sp, #48	; 0x30
   1acf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf);
   1acf4:	9909      	ldr	r1, [sp, #36]	; 0x24
   1acf6:	4620      	mov	r0, r4
   1acf8:	f008 fa54 	bl	231a4 <bt_att_chan_send_rsp>
	return 0;
   1acfc:	e7f6      	b.n	1acec <att_read_group_req+0xdc>
		return BT_ATT_ERR_INVALID_PDU;
   1acfe:	2004      	movs	r0, #4
   1ad00:	e7f5      	b.n	1acee <att_read_group_req+0xde>
		return BT_ATT_ERR_UNLIKELY;
   1ad02:	200e      	movs	r0, #14
   1ad04:	e7f3      	b.n	1acee <att_read_group_req+0xde>
   1ad06:	bf00      	nop
   1ad08:	0001a631 	.word	0x0001a631

0001ad0c <att_read_mult_vl_req>:
{
   1ad0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   1ad10:	6846      	ldr	r6, [r0, #4]
{
   1ad12:	b085      	sub	sp, #20
   1ad14:	4604      	mov	r4, r0
   1ad16:	460d      	mov	r5, r1
	if (!bt_gatt_change_aware(conn, true)) {
   1ad18:	4630      	mov	r0, r6
   1ad1a:	2101      	movs	r1, #1
   1ad1c:	f009 f81b 	bl	23d56 <bt_gatt_change_aware>
   1ad20:	b950      	cbnz	r0, 1ad38 <att_read_mult_vl_req+0x2c>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   1ad22:	2105      	movs	r1, #5
   1ad24:	f104 0090 	add.w	r0, r4, #144	; 0x90
   1ad28:	f008 faf0 	bl	2330c <atomic_test_and_set_bit>
   1ad2c:	2800      	cmp	r0, #0
   1ad2e:	d13b      	bne.n	1ada8 <att_read_mult_vl_req+0x9c>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   1ad30:	2012      	movs	r0, #18
}
   1ad32:	b005      	add	sp, #20
   1ad34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	(void)memset(&data, 0, sizeof(data));
   1ad38:	2210      	movs	r2, #16
   1ad3a:	2100      	movs	r1, #0
   1ad3c:	4668      	mov	r0, sp
   1ad3e:	f00a fa50 	bl	251e2 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_VL_RSP, 0);
   1ad42:	2200      	movs	r2, #0
   1ad44:	2121      	movs	r1, #33	; 0x21
   1ad46:	4630      	mov	r0, r6
   1ad48:	f7ff ff26 	bl	1ab98 <bt_att_create_pdu>
   1ad4c:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   1ad4e:	b368      	cbz	r0, 1adac <att_read_mult_vl_req+0xa0>
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   1ad50:	f8df 905c 	ldr.w	r9, [pc, #92]	; 1adb0 <att_read_mult_vl_req+0xa4>
	data.chan = chan;
   1ad54:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
   1ad56:	f105 070c 	add.w	r7, r5, #12
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   1ad5a:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
   1ad5e:	8a2b      	ldrh	r3, [r5, #16]
   1ad60:	2b01      	cmp	r3, #1
   1ad62:	d804      	bhi.n	1ad6e <att_read_mult_vl_req+0x62>
	bt_att_chan_send_rsp(chan, data.buf);
   1ad64:	9902      	ldr	r1, [sp, #8]
   1ad66:	4620      	mov	r0, r4
   1ad68:	f008 fa1c 	bl	231a4 <bt_att_chan_send_rsp>
	return 0;
   1ad6c:	e01c      	b.n	1ada8 <att_read_mult_vl_req+0x9c>
   1ad6e:	4638      	mov	r0, r7
   1ad70:	f009 f8f3 	bl	23f5a <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   1ad74:	466b      	mov	r3, sp
   1ad76:	464a      	mov	r2, r9
   1ad78:	4601      	mov	r1, r0
   1ad7a:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   1ad7c:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   1ad80:	f008 f93c 	bl	22ffc <bt_gatt_foreach_attr>
		if (data.err) {
   1ad84:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1ad88:	2b00      	cmp	r3, #0
   1ad8a:	d0e8      	beq.n	1ad5e <att_read_mult_vl_req+0x52>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1ad8c:	9b02      	ldr	r3, [sp, #8]
   1ad8e:	6998      	ldr	r0, [r3, #24]
   1ad90:	f7ff fad8 	bl	1a344 <tx_meta_data_free>
			net_buf_unref(data.buf);
   1ad94:	9802      	ldr	r0, [sp, #8]
   1ad96:	f001 fa4d 	bl	1c234 <net_buf_unref>
	if (!req) {
   1ad9a:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1ad9e:	4632      	mov	r2, r6
   1ada0:	2120      	movs	r1, #32
   1ada2:	4620      	mov	r0, r4
   1ada4:	f008 fc30 	bl	23608 <send_err_rsp.part.0>
			return 0;
   1ada8:	2000      	movs	r0, #0
   1adaa:	e7c2      	b.n	1ad32 <att_read_mult_vl_req+0x26>
		return BT_ATT_ERR_UNLIKELY;
   1adac:	200e      	movs	r0, #14
   1adae:	e7c0      	b.n	1ad32 <att_read_mult_vl_req+0x26>
   1adb0:	0002337d 	.word	0x0002337d

0001adb4 <att_read_mult_req>:
{
   1adb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   1adb8:	6846      	ldr	r6, [r0, #4]
{
   1adba:	b085      	sub	sp, #20
   1adbc:	4604      	mov	r4, r0
   1adbe:	460d      	mov	r5, r1
	if (!bt_gatt_change_aware(conn, true)) {
   1adc0:	4630      	mov	r0, r6
   1adc2:	2101      	movs	r1, #1
   1adc4:	f008 ffc7 	bl	23d56 <bt_gatt_change_aware>
   1adc8:	b950      	cbnz	r0, 1ade0 <att_read_mult_req+0x2c>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   1adca:	2105      	movs	r1, #5
   1adcc:	f104 0090 	add.w	r0, r4, #144	; 0x90
   1add0:	f008 fa9c 	bl	2330c <atomic_test_and_set_bit>
   1add4:	2800      	cmp	r0, #0
   1add6:	d13b      	bne.n	1ae50 <att_read_mult_req+0x9c>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   1add8:	2012      	movs	r0, #18
}
   1adda:	b005      	add	sp, #20
   1addc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	(void)memset(&data, 0, sizeof(data));
   1ade0:	2210      	movs	r2, #16
   1ade2:	2100      	movs	r1, #0
   1ade4:	4668      	mov	r0, sp
   1ade6:	f00a f9fc 	bl	251e2 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   1adea:	2200      	movs	r2, #0
   1adec:	210f      	movs	r1, #15
   1adee:	4630      	mov	r0, r6
   1adf0:	f7ff fed2 	bl	1ab98 <bt_att_create_pdu>
   1adf4:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   1adf6:	b368      	cbz	r0, 1ae54 <att_read_mult_req+0xa0>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1adf8:	f8df 905c 	ldr.w	r9, [pc, #92]	; 1ae58 <att_read_mult_req+0xa4>
	data.chan = chan;
   1adfc:	9400      	str	r4, [sp, #0]
   1adfe:	f105 070c 	add.w	r7, r5, #12
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   1ae02:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
   1ae06:	8a2b      	ldrh	r3, [r5, #16]
   1ae08:	2b01      	cmp	r3, #1
   1ae0a:	d804      	bhi.n	1ae16 <att_read_mult_req+0x62>
	bt_att_chan_send_rsp(chan, data.buf);
   1ae0c:	9902      	ldr	r1, [sp, #8]
   1ae0e:	4620      	mov	r0, r4
   1ae10:	f008 f9c8 	bl	231a4 <bt_att_chan_send_rsp>
	return 0;
   1ae14:	e01c      	b.n	1ae50 <att_read_mult_req+0x9c>
   1ae16:	4638      	mov	r0, r7
   1ae18:	f009 f89f 	bl	23f5a <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1ae1c:	466b      	mov	r3, sp
   1ae1e:	464a      	mov	r2, r9
   1ae20:	4601      	mov	r1, r0
   1ae22:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   1ae24:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1ae28:	f008 f8e8 	bl	22ffc <bt_gatt_foreach_attr>
		if (data.err) {
   1ae2c:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1ae30:	2b00      	cmp	r3, #0
   1ae32:	d0e8      	beq.n	1ae06 <att_read_mult_req+0x52>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1ae34:	9b02      	ldr	r3, [sp, #8]
   1ae36:	6998      	ldr	r0, [r3, #24]
   1ae38:	f7ff fa84 	bl	1a344 <tx_meta_data_free>
			net_buf_unref(data.buf);
   1ae3c:	9802      	ldr	r0, [sp, #8]
   1ae3e:	f001 f9f9 	bl	1c234 <net_buf_unref>
	if (!req) {
   1ae42:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1ae46:	4632      	mov	r2, r6
   1ae48:	210e      	movs	r1, #14
   1ae4a:	4620      	mov	r0, r4
   1ae4c:	f008 fbdc 	bl	23608 <send_err_rsp.part.0>
			return 0;
   1ae50:	2000      	movs	r0, #0
   1ae52:	e7c2      	b.n	1adda <att_read_mult_req+0x26>
		return BT_ATT_ERR_UNLIKELY;
   1ae54:	200e      	movs	r0, #14
   1ae56:	e7c0      	b.n	1adda <att_read_mult_req+0x26>
   1ae58:	00023337 	.word	0x00023337

0001ae5c <att_read_rsp>:
{
   1ae5c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   1ae60:	f8d0 8004 	ldr.w	r8, [r0, #4]
{
   1ae64:	4604      	mov	r4, r0
   1ae66:	460e      	mov	r6, r1
	if (!bt_gatt_change_aware(conn, true)) {
   1ae68:	4640      	mov	r0, r8
   1ae6a:	2101      	movs	r1, #1
{
   1ae6c:	4617      	mov	r7, r2
   1ae6e:	461d      	mov	r5, r3
	if (!bt_gatt_change_aware(conn, true)) {
   1ae70:	f008 ff71 	bl	23d56 <bt_gatt_change_aware>
   1ae74:	b948      	cbnz	r0, 1ae8a <att_read_rsp+0x2e>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   1ae76:	2105      	movs	r1, #5
   1ae78:	f104 0090 	add.w	r0, r4, #144	; 0x90
   1ae7c:	f008 fa46 	bl	2330c <atomic_test_and_set_bit>
   1ae80:	bb78      	cbnz	r0, 1aee2 <att_read_rsp+0x86>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   1ae82:	2012      	movs	r0, #18
}
   1ae84:	b004      	add	sp, #16
   1ae86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!handle) {
   1ae8a:	b38d      	cbz	r5, 1aef0 <att_read_rsp+0x94>
	(void)memset(&data, 0, sizeof(data));
   1ae8c:	2210      	movs	r2, #16
   1ae8e:	2100      	movs	r1, #0
   1ae90:	4668      	mov	r0, sp
   1ae92:	f00a f9a6 	bl	251e2 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   1ae96:	2200      	movs	r2, #0
   1ae98:	4639      	mov	r1, r7
   1ae9a:	4640      	mov	r0, r8
   1ae9c:	f7ff fe7c 	bl	1ab98 <bt_att_create_pdu>
   1aea0:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   1aea2:	b338      	cbz	r0, 1aef4 <att_read_rsp+0x98>
	data.offset = offset;
   1aea4:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   1aea8:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   1aeac:	2301      	movs	r3, #1
   1aeae:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1aeb2:	4a11      	ldr	r2, [pc, #68]	; (1aef8 <att_read_rsp+0x9c>)
	data.chan = chan;
   1aeb4:	9400      	str	r4, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1aeb6:	466b      	mov	r3, sp
   1aeb8:	4629      	mov	r1, r5
   1aeba:	4628      	mov	r0, r5
   1aebc:	f008 f89e 	bl	22ffc <bt_gatt_foreach_attr>
	if (data.err) {
   1aec0:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1aec4:	b17b      	cbz	r3, 1aee6 <att_read_rsp+0x8a>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1aec6:	9b02      	ldr	r3, [sp, #8]
   1aec8:	6998      	ldr	r0, [r3, #24]
   1aeca:	f7ff fa3b 	bl	1a344 <tx_meta_data_free>
		net_buf_unref(data.buf);
   1aece:	9802      	ldr	r0, [sp, #8]
   1aed0:	f001 f9b0 	bl	1c234 <net_buf_unref>
	if (!req) {
   1aed4:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1aed8:	462a      	mov	r2, r5
   1aeda:	4631      	mov	r1, r6
   1aedc:	4620      	mov	r0, r4
   1aede:	f008 fb93 	bl	23608 <send_err_rsp.part.0>
			return 0;
   1aee2:	2000      	movs	r0, #0
   1aee4:	e7ce      	b.n	1ae84 <att_read_rsp+0x28>
	bt_att_chan_send_rsp(chan, data.buf);
   1aee6:	9902      	ldr	r1, [sp, #8]
   1aee8:	4620      	mov	r0, r4
   1aeea:	f008 f95b 	bl	231a4 <bt_att_chan_send_rsp>
	return 0;
   1aeee:	e7f8      	b.n	1aee2 <att_read_rsp+0x86>
		return BT_ATT_ERR_INVALID_HANDLE;
   1aef0:	2001      	movs	r0, #1
   1aef2:	e7c7      	b.n	1ae84 <att_read_rsp+0x28>
		return BT_ATT_ERR_UNLIKELY;
   1aef4:	200e      	movs	r0, #14
   1aef6:	e7c5      	b.n	1ae84 <att_read_rsp+0x28>
   1aef8:	00023337 	.word	0x00023337

0001aefc <att_read_type_req>:
{
   1aefc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   1af00:	8a0d      	ldrh	r5, [r1, #16]
   1af02:	3d04      	subs	r5, #4
   1af04:	b2ed      	uxtb	r5, r5
	if (uuid_len != 2 && uuid_len != 16) {
   1af06:	2d02      	cmp	r5, #2
{
   1af08:	4604      	mov	r4, r0
   1af0a:	b08c      	sub	sp, #48	; 0x30
   1af0c:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   1af0e:	d001      	beq.n	1af14 <att_read_type_req+0x18>
   1af10:	2d10      	cmp	r5, #16
   1af12:	d150      	bne.n	1afb6 <att_read_type_req+0xba>
	return net_buf_simple_pull_mem(&buf->b, len);
   1af14:	2104      	movs	r1, #4
   1af16:	300c      	adds	r0, #12
   1af18:	f009 f817 	bl	23f4a <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   1af1c:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
   1af20:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   1af22:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   1af24:	1d01      	adds	r1, r0, #4
   1af26:	462a      	mov	r2, r5
   1af28:	4640      	mov	r0, r8
   1af2a:	f007 fc74 	bl	22816 <bt_uuid_create>
   1af2e:	b188      	cbz	r0, 1af54 <att_read_type_req+0x58>
	if (!start || !end) {
   1af30:	b19e      	cbz	r6, 1af5a <att_read_type_req+0x5e>
   1af32:	b18f      	cbz	r7, 1af58 <att_read_type_req+0x5c>
	if (start > end) {
   1af34:	42b7      	cmp	r7, r6
   1af36:	d310      	bcc.n	1af5a <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
   1af38:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
   1af3a:	6865      	ldr	r5, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
   1af3c:	2100      	movs	r1, #0
   1af3e:	eb0d 0002 	add.w	r0, sp, r2
   1af42:	f00a f94e 	bl	251e2 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   1af46:	2201      	movs	r2, #1
   1af48:	2109      	movs	r1, #9
   1af4a:	4628      	mov	r0, r5
   1af4c:	f7ff fe24 	bl	1ab98 <bt_att_create_pdu>
   1af50:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
   1af52:	b960      	cbnz	r0, 1af6e <att_read_type_req+0x72>
		return BT_ATT_ERR_UNLIKELY;
   1af54:	200e      	movs	r0, #14
   1af56:	e007      	b.n	1af68 <att_read_type_req+0x6c>
			*err = 0U;
   1af58:	463e      	mov	r6, r7
	if (!req) {
   1af5a:	2301      	movs	r3, #1
   1af5c:	4632      	mov	r2, r6
   1af5e:	2108      	movs	r1, #8
   1af60:	4620      	mov	r0, r4
   1af62:	f008 fb51 	bl	23608 <send_err_rsp.part.0>
		return 0;
   1af66:	2000      	movs	r0, #0
}
   1af68:	b00c      	add	sp, #48	; 0x30
   1af6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
   1af6e:	2101      	movs	r1, #1
   1af70:	300c      	adds	r0, #12
	data.uuid = uuid;
   1af72:	e9cd 4806 	strd	r4, r8, [sp, #24]
   1af76:	f008 ffc1 	bl	23efc <net_buf_simple_add>
	data.rsp->len = 0U;
   1af7a:	2300      	movs	r3, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   1af7c:	9009      	str	r0, [sp, #36]	; 0x24
	data.rsp->len = 0U;
   1af7e:	7003      	strb	r3, [r0, #0]
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   1af80:	230a      	movs	r3, #10
   1af82:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   1af86:	4a0d      	ldr	r2, [pc, #52]	; (1afbc <att_read_type_req+0xc0>)
   1af88:	ab06      	add	r3, sp, #24
   1af8a:	4639      	mov	r1, r7
   1af8c:	4630      	mov	r0, r6
   1af8e:	f008 f835 	bl	22ffc <bt_gatt_foreach_attr>
	if (data.err) {
   1af92:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   1af96:	b14b      	cbz	r3, 1afac <att_read_type_req+0xb0>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1af98:	9b08      	ldr	r3, [sp, #32]
   1af9a:	6998      	ldr	r0, [r3, #24]
   1af9c:	f7ff f9d2 	bl	1a344 <tx_meta_data_free>
		net_buf_unref(data.buf);
   1afa0:	9808      	ldr	r0, [sp, #32]
   1afa2:	f001 f947 	bl	1c234 <net_buf_unref>
	if (!req) {
   1afa6:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   1afaa:	e7d7      	b.n	1af5c <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf);
   1afac:	9908      	ldr	r1, [sp, #32]
   1afae:	4620      	mov	r0, r4
   1afb0:	f008 f8f8 	bl	231a4 <bt_att_chan_send_rsp>
	return 0;
   1afb4:	e7d7      	b.n	1af66 <att_read_type_req+0x6a>
		return BT_ATT_ERR_INVALID_PDU;
   1afb6:	2004      	movs	r0, #4
   1afb8:	e7d6      	b.n	1af68 <att_read_type_req+0x6c>
   1afba:	bf00      	nop
   1afbc:	0001a6dd 	.word	0x0001a6dd

0001afc0 <att_find_type_req>:
{
   1afc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1afc4:	460f      	mov	r7, r1
   1afc6:	b086      	sub	sp, #24
   1afc8:	4604      	mov	r4, r0
	return net_buf_simple_pull_mem(&buf->b, len);
   1afca:	2106      	movs	r1, #6
   1afcc:	f107 000c 	add.w	r0, r7, #12
   1afd0:	f008 ffbb 	bl	23f4a <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   1afd4:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   1afd6:	f8b0 8002 	ldrh.w	r8, [r0, #2]
	type = sys_le16_to_cpu(req->type);
   1afda:	8882      	ldrh	r2, [r0, #4]
	value = buf->data;
   1afdc:	f8d7 900c 	ldr.w	r9, [r7, #12]
	if (!start || !end) {
   1afe0:	b1c5      	cbz	r5, 1b014 <att_find_type_req+0x54>
   1afe2:	2300      	movs	r3, #0
   1afe4:	f1b8 0f00 	cmp.w	r8, #0
   1afe8:	d013      	beq.n	1b012 <att_find_type_req+0x52>
	if (start > end) {
   1afea:	4545      	cmp	r5, r8
   1afec:	d812      	bhi.n	1b014 <att_find_type_req+0x54>
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   1afee:	f88d 3000 	strb.w	r3, [sp]
   1aff2:	f88d 3004 	strb.w	r3, [sp, #4]
   1aff6:	a901      	add	r1, sp, #4
   1aff8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1affc:	4668      	mov	r0, sp
   1affe:	f8ad 2002 	strh.w	r2, [sp, #2]
   1b002:	f8ad 3006 	strh.w	r3, [sp, #6]
   1b006:	f007 fbd8 	bl	227ba <bt_uuid_cmp>
   1b00a:	4606      	mov	r6, r0
   1b00c:	b160      	cbz	r0, 1b028 <att_find_type_req+0x68>
	if (!req) {
   1b00e:	230a      	movs	r3, #10
   1b010:	e001      	b.n	1b016 <att_find_type_req+0x56>
			*err = 0U;
   1b012:	4645      	mov	r5, r8
	if (!req) {
   1b014:	2301      	movs	r3, #1
   1b016:	462a      	mov	r2, r5
   1b018:	2106      	movs	r1, #6
   1b01a:	4620      	mov	r0, r4
   1b01c:	f008 faf4 	bl	23608 <send_err_rsp.part.0>
		return 0;
   1b020:	2000      	movs	r0, #0
}
   1b022:	b006      	add	sp, #24
   1b024:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	struct bt_conn *conn = chan->chan.chan.conn;
   1b028:	f8d4 a004 	ldr.w	sl, [r4, #4]
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   1b02c:	7c3f      	ldrb	r7, [r7, #16]
	(void)memset(&data, 0, sizeof(data));
   1b02e:	4601      	mov	r1, r0
   1b030:	2214      	movs	r2, #20
   1b032:	a801      	add	r0, sp, #4
   1b034:	f00a f8d5 	bl	251e2 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   1b038:	4632      	mov	r2, r6
   1b03a:	2107      	movs	r1, #7
   1b03c:	4650      	mov	r0, sl
   1b03e:	f7ff fdab 	bl	1ab98 <bt_att_create_pdu>
   1b042:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   1b044:	b1f8      	cbz	r0, 1b086 <att_find_type_req+0xc6>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   1b046:	230a      	movs	r3, #10
   1b048:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   1b04c:	4a0f      	ldr	r2, [pc, #60]	; (1b08c <att_find_type_req+0xcc>)
	data.chan = chan;
   1b04e:	9401      	str	r4, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   1b050:	ab01      	add	r3, sp, #4
   1b052:	4641      	mov	r1, r8
   1b054:	4628      	mov	r0, r5
	data.value = value;
   1b056:	e9cd 6903 	strd	r6, r9, [sp, #12]
	data.value_len = value_len;
   1b05a:	f88d 7014 	strb.w	r7, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   1b05e:	f007 ffcd 	bl	22ffc <bt_gatt_foreach_attr>
	if (data.err) {
   1b062:	f89d 3015 	ldrb.w	r3, [sp, #21]
   1b066:	b14b      	cbz	r3, 1b07c <att_find_type_req+0xbc>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1b068:	9b02      	ldr	r3, [sp, #8]
   1b06a:	6998      	ldr	r0, [r3, #24]
   1b06c:	f7ff f96a 	bl	1a344 <tx_meta_data_free>
		net_buf_unref(data.buf);
   1b070:	9802      	ldr	r0, [sp, #8]
   1b072:	f001 f8df 	bl	1c234 <net_buf_unref>
	if (!req) {
   1b076:	f89d 3015 	ldrb.w	r3, [sp, #21]
   1b07a:	e7cc      	b.n	1b016 <att_find_type_req+0x56>
	bt_att_chan_send_rsp(chan, data.buf);
   1b07c:	9902      	ldr	r1, [sp, #8]
   1b07e:	4620      	mov	r0, r4
   1b080:	f008 f890 	bl	231a4 <bt_att_chan_send_rsp>
	return 0;
   1b084:	e7cc      	b.n	1b020 <att_find_type_req+0x60>
		return BT_ATT_ERR_UNLIKELY;
   1b086:	200e      	movs	r0, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   1b088:	e7cb      	b.n	1b022 <att_find_type_req+0x62>
   1b08a:	bf00      	nop
   1b08c:	0001a361 	.word	0x0001a361

0001b090 <att_find_info_req>:
{
   1b090:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
   1b092:	68cb      	ldr	r3, [r1, #12]
	start_handle = sys_le16_to_cpu(req->start_handle);
   1b094:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   1b096:	885e      	ldrh	r6, [r3, #2]
{
   1b098:	b085      	sub	sp, #20
   1b09a:	4604      	mov	r4, r0
	if (!start || !end) {
   1b09c:	b195      	cbz	r5, 1b0c4 <att_find_info_req+0x34>
   1b09e:	b186      	cbz	r6, 1b0c2 <att_find_info_req+0x32>
	if (start > end) {
   1b0a0:	42b5      	cmp	r5, r6
   1b0a2:	d80f      	bhi.n	1b0c4 <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
   1b0a4:	6847      	ldr	r7, [r0, #4]
	(void)memset(&data, 0, sizeof(data));
   1b0a6:	2210      	movs	r2, #16
   1b0a8:	2100      	movs	r1, #0
   1b0aa:	4668      	mov	r0, sp
   1b0ac:	f00a f899 	bl	251e2 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   1b0b0:	2200      	movs	r2, #0
   1b0b2:	2105      	movs	r1, #5
   1b0b4:	4638      	mov	r0, r7
   1b0b6:	f7ff fd6f 	bl	1ab98 <bt_att_create_pdu>
   1b0ba:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
   1b0bc:	b958      	cbnz	r0, 1b0d6 <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
   1b0be:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
   1b0c0:	e007      	b.n	1b0d2 <att_find_info_req+0x42>
			*err = 0U;
   1b0c2:	4635      	mov	r5, r6
	if (!req) {
   1b0c4:	2301      	movs	r3, #1
   1b0c6:	462a      	mov	r2, r5
   1b0c8:	2104      	movs	r1, #4
   1b0ca:	4620      	mov	r0, r4
   1b0cc:	f008 fa9c 	bl	23608 <send_err_rsp.part.0>
		return 0;
   1b0d0:	2000      	movs	r0, #0
}
   1b0d2:	b005      	add	sp, #20
   1b0d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   1b0d6:	466b      	mov	r3, sp
   1b0d8:	4a0a      	ldr	r2, [pc, #40]	; (1b104 <att_find_info_req+0x74>)
	data.chan = chan;
   1b0da:	9400      	str	r4, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   1b0dc:	4631      	mov	r1, r6
   1b0de:	4628      	mov	r0, r5
   1b0e0:	f007 ff8c 	bl	22ffc <bt_gatt_foreach_attr>
	if (!data.rsp) {
   1b0e4:	9b02      	ldr	r3, [sp, #8]
   1b0e6:	b943      	cbnz	r3, 1b0fa <att_find_info_req+0x6a>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1b0e8:	9b01      	ldr	r3, [sp, #4]
   1b0ea:	6998      	ldr	r0, [r3, #24]
   1b0ec:	f7ff f92a 	bl	1a344 <tx_meta_data_free>
		net_buf_unref(data.buf);
   1b0f0:	9801      	ldr	r0, [sp, #4]
   1b0f2:	f001 f89f 	bl	1c234 <net_buf_unref>
	if (!req) {
   1b0f6:	230a      	movs	r3, #10
   1b0f8:	e7e5      	b.n	1b0c6 <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf);
   1b0fa:	9901      	ldr	r1, [sp, #4]
   1b0fc:	4620      	mov	r0, r4
   1b0fe:	f008 f851 	bl	231a4 <bt_att_chan_send_rsp>
	return 0;
   1b102:	e7e5      	b.n	1b0d0 <att_find_info_req+0x40>
   1b104:	00023099 	.word	0x00023099

0001b108 <bt_att_init>:
	bt_l2cap_register_ecred_cb(&cb);
#endif /* CONFIG_BT_EATT */
}

void bt_att_init(void)
{
   1b108:	b538      	push	{r3, r4, r5, lr}
	z_impl_k_queue_init(queue);
   1b10a:	4c0b      	ldr	r4, [pc, #44]	; (1b138 <bt_att_init+0x30>)
	k_fifo_init(&free_att_tx_meta_data);
	for (size_t i = 0; i < ARRAY_SIZE(tx_meta_data); i++) {
		k_fifo_put(&free_att_tx_meta_data, &tx_meta_data[i]);
   1b10c:	4d0b      	ldr	r5, [pc, #44]	; (1b13c <bt_att_init+0x34>)
   1b10e:	4620      	mov	r0, r4
   1b110:	f009 fb9e 	bl	24850 <z_impl_k_queue_init>
   1b114:	4629      	mov	r1, r5
   1b116:	4620      	mov	r0, r4
   1b118:	f009 fba6 	bl	24868 <k_queue_append>
   1b11c:	f105 0114 	add.w	r1, r5, #20
   1b120:	4620      	mov	r0, r4
   1b122:	f009 fba1 	bl	24868 <k_queue_append>
   1b126:	f105 0128 	add.w	r1, r5, #40	; 0x28
   1b12a:	4620      	mov	r0, r4
   1b12c:	f009 fb9c 	bl	24868 <k_queue_append>
	bt_gatt_init();

	if (IS_ENABLED(CONFIG_BT_EATT)) {
		bt_eatt_init();
	}
}
   1b130:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_gatt_init();
   1b134:	f000 bac4 	b.w	1b6c0 <bt_gatt_init>
   1b138:	2000085c 	.word	0x2000085c
   1b13c:	20005000 	.word	0x20005000

0001b140 <bt_att_req_alloc>:
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
	}
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
   1b140:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_att_req *req = NULL;
   1b142:	2300      	movs	r3, #0
{
   1b144:	4605      	mov	r5, r0
   1b146:	460c      	mov	r4, r1
	struct bt_att_req *req = NULL;
   1b148:	9301      	str	r3, [sp, #4]
	return z_impl_z_current_get();
   1b14a:	f005 f861 	bl	20210 <z_impl_z_current_get>

	if (k_current_get() == att_handle_rsp_thread) {
   1b14e:	4b0c      	ldr	r3, [pc, #48]	; (1b180 <bt_att_req_alloc+0x40>)
   1b150:	681b      	ldr	r3, [r3, #0]
   1b152:	4283      	cmp	r3, r0
		/* No req will be fulfilled while blocking on the bt_recv thread.
		 * Blocking would cause deadlock.
		 */
		timeout = K_NO_WAIT;
   1b154:	bf04      	itt	eq
   1b156:	2500      	moveq	r5, #0
   1b158:	462c      	moveq	r4, r5
	}

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   1b15a:	a901      	add	r1, sp, #4
   1b15c:	4809      	ldr	r0, [pc, #36]	; (1b184 <bt_att_req_alloc+0x44>)
   1b15e:	462a      	mov	r2, r5
   1b160:	4623      	mov	r3, r4
   1b162:	f004 fa03 	bl	1f56c <k_mem_slab_alloc>
   1b166:	4601      	mov	r1, r0
   1b168:	b940      	cbnz	r0, 1b17c <bt_att_req_alloc+0x3c>
		return NULL;
	}

	LOG_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
   1b16a:	9b01      	ldr	r3, [sp, #4]
   1b16c:	2210      	movs	r2, #16
   1b16e:	4618      	mov	r0, r3
   1b170:	f00a f837 	bl	251e2 <memset>
   1b174:	4603      	mov	r3, r0

	return req;
}
   1b176:	4618      	mov	r0, r3
   1b178:	b003      	add	sp, #12
   1b17a:	bd30      	pop	{r4, r5, pc}
		return NULL;
   1b17c:	2300      	movs	r3, #0
   1b17e:	e7fa      	b.n	1b176 <bt_att_req_alloc+0x36>
   1b180:	2000503c 	.word	0x2000503c
   1b184:	20000800 	.word	0x20000800

0001b188 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   1b188:	b507      	push	{r0, r1, r2, lr}
	LOG_DBG("req %p", req);

	if (req->buf) {
   1b18a:	6883      	ldr	r3, [r0, #8]
{
   1b18c:	9001      	str	r0, [sp, #4]
	if (req->buf) {
   1b18e:	b14b      	cbz	r3, 1b1a4 <bt_att_req_free+0x1c>
		tx_meta_data_free(bt_att_tx_meta_data(req->buf));
   1b190:	6998      	ldr	r0, [r3, #24]
   1b192:	f7ff f8d7 	bl	1a344 <tx_meta_data_free>
		net_buf_unref(req->buf);
   1b196:	9b01      	ldr	r3, [sp, #4]
   1b198:	6898      	ldr	r0, [r3, #8]
   1b19a:	f001 f84b 	bl	1c234 <net_buf_unref>
		req->buf = NULL;
   1b19e:	9b01      	ldr	r3, [sp, #4]
   1b1a0:	2200      	movs	r2, #0
   1b1a2:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
   1b1a4:	4803      	ldr	r0, [pc, #12]	; (1b1b4 <bt_att_req_free+0x2c>)
   1b1a6:	a901      	add	r1, sp, #4
   1b1a8:	f009 fa9b 	bl	246e2 <k_mem_slab_free>
}
   1b1ac:	b003      	add	sp, #12
   1b1ae:	f85d fb04 	ldr.w	pc, [sp], #4
   1b1b2:	bf00      	nop
   1b1b4:	20000800 	.word	0x20000800

0001b1b8 <att_handle_rsp>:
{
   1b1b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1b1bc:	4604      	mov	r4, r0
   1b1be:	b088      	sub	sp, #32
	k_work_cancel_delayable(&chan->timeout_work);
   1b1c0:	30b0      	adds	r0, #176	; 0xb0
{
   1b1c2:	460e      	mov	r6, r1
   1b1c4:	4617      	mov	r7, r2
   1b1c6:	461d      	mov	r5, r3
	k_work_cancel_delayable(&chan->timeout_work);
   1b1c8:	f009 fc37 	bl	24a3a <k_work_cancel_delayable>
	if (!chan->req) {
   1b1cc:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
   1b1d0:	b980      	cbnz	r0, 1b1f4 <att_handle_rsp+0x3c>
		LOG_WRN("No pending ATT request");
   1b1d2:	4b1a      	ldr	r3, [pc, #104]	; (1b23c <att_handle_rsp+0x84>)
   1b1d4:	9307      	str	r3, [sp, #28]
   1b1d6:	481a      	ldr	r0, [pc, #104]	; (1b240 <att_handle_rsp+0x88>)
   1b1d8:	2302      	movs	r3, #2
   1b1da:	aa06      	add	r2, sp, #24
   1b1dc:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1b1e0:	9306      	str	r3, [sp, #24]
   1b1e2:	f007 ffa9 	bl	23138 <z_log_msg_static_create.constprop.0>
	att_req_send_process(chan->att);
   1b1e6:	6820      	ldr	r0, [r4, #0]
   1b1e8:	f008 f934 	bl	23454 <att_req_send_process>
}
   1b1ec:	2000      	movs	r0, #0
   1b1ee:	b008      	add	sp, #32
   1b1f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (chan->req == &cancel) {
   1b1f4:	4b13      	ldr	r3, [pc, #76]	; (1b244 <att_handle_rsp+0x8c>)
   1b1f6:	4298      	cmp	r0, r3
   1b1f8:	f04f 0800 	mov.w	r8, #0
   1b1fc:	d102      	bne.n	1b204 <att_handle_rsp+0x4c>
		chan->req = NULL;
   1b1fe:	f8c4 8094 	str.w	r8, [r4, #148]	; 0x94
   1b202:	e7f0      	b.n	1b1e6 <att_handle_rsp+0x2e>
	func = chan->req->func;
   1b204:	f8d0 9004 	ldr.w	r9, [r0, #4]
	chan->req->func = NULL;
   1b208:	f8c0 8004 	str.w	r8, [r0, #4]
	params = chan->req->user_data;
   1b20c:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
   1b210:	f8d0 a00c 	ldr.w	sl, [r0, #12]
	bt_att_req_free(chan->req);
   1b214:	f7ff ffb8 	bl	1b188 <bt_att_req_free>
	att_req_send_process(chan->att);
   1b218:	6820      	ldr	r0, [r4, #0]
	chan->req = NULL;
   1b21a:	f8c4 8094 	str.w	r8, [r4, #148]	; 0x94
	att_req_send_process(chan->att);
   1b21e:	f008 f919 	bl	23454 <att_req_send_process>
	if (func) {
   1b222:	f1b9 0f00 	cmp.w	r9, #0
   1b226:	d0e1      	beq.n	1b1ec <att_handle_rsp+0x34>
		func(chan->att->conn, err, pdu, len, params);
   1b228:	6820      	ldr	r0, [r4, #0]
   1b22a:	f8cd a000 	str.w	sl, [sp]
   1b22e:	6800      	ldr	r0, [r0, #0]
   1b230:	463b      	mov	r3, r7
   1b232:	4632      	mov	r2, r6
   1b234:	4629      	mov	r1, r5
   1b236:	47c8      	blx	r9
   1b238:	e7d8      	b.n	1b1ec <att_handle_rsp+0x34>
   1b23a:	bf00      	nop
   1b23c:	00027557 	.word	0x00027557
   1b240:	0002558c 	.word	0x0002558c
   1b244:	20005040 	.word	0x20005040

0001b248 <bt_att_disconnected>:
{
   1b248:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_att *att = att_chan->att;
   1b24c:	f850 6c04 	ldr.w	r6, [r0, #-4]
{
   1b250:	4604      	mov	r4, r0
	if (!att_chan->att) {
   1b252:	2e00      	cmp	r6, #0
   1b254:	d056      	beq.n	1b304 <bt_att_disconnected+0xbc>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   1b256:	f100 01dc 	add.w	r1, r0, #220	; 0xdc
   1b25a:	f106 0024 	add.w	r0, r6, #36	; 0x24
   1b25e:	f008 f83a 	bl	232d6 <sys_slist_find_and_remove.isra.0>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   1b262:	1f27      	subs	r7, r4, #4
   1b264:	f104 0894 	add.w	r8, r4, #148	; 0x94
   1b268:	2200      	movs	r2, #0
   1b26a:	2300      	movs	r3, #0
   1b26c:	4640      	mov	r0, r8
   1b26e:	f008 fdea 	bl	23e46 <net_buf_get>
   1b272:	4605      	mov	r5, r0
   1b274:	bb28      	cbnz	r0, 1b2c2 <bt_att_disconnected+0x7a>
	if (chan->req) {
   1b276:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   1b27a:	b12b      	cbz	r3, 1b288 <bt_att_disconnected+0x40>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   1b27c:	4602      	mov	r2, r0
   1b27e:	4601      	mov	r1, r0
   1b280:	230e      	movs	r3, #14
   1b282:	4638      	mov	r0, r7
   1b284:	f7ff ff98 	bl	1b1b8 <att_handle_rsp>
	chan->att = NULL;
   1b288:	2300      	movs	r3, #0
   1b28a:	f844 3c04 	str.w	r3, [r4, #-4]
	if (!sys_slist_is_empty(&att->chans)) {
   1b28e:	6a73      	ldr	r3, [r6, #36]	; 0x24
   1b290:	2b00      	cmp	r3, #0
   1b292:	d137      	bne.n	1b304 <bt_att_disconnected+0xbc>
	att_reset(att);
   1b294:	9603      	str	r6, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   1b296:	9803      	ldr	r0, [sp, #12]
   1b298:	2200      	movs	r2, #0
   1b29a:	2300      	movs	r3, #0
   1b29c:	300c      	adds	r0, #12
   1b29e:	f008 fdd2 	bl	23e46 <net_buf_get>
   1b2a2:	4605      	mov	r5, r0
   1b2a4:	b9a0      	cbnz	r0, 1b2d0 <bt_att_disconnected+0x88>
	while (!sys_slist_is_empty(&att->reqs)) {
   1b2a6:	9803      	ldr	r0, [sp, #12]
	return list->head;
   1b2a8:	6845      	ldr	r5, [r0, #4]
   1b2aa:	b9c5      	cbnz	r5, 1b2de <bt_att_disconnected+0x96>
	att->conn = NULL;
   1b2ac:	6005      	str	r5, [r0, #0]
	k_mem_slab_free(&att_slab, (void **)&att);
   1b2ae:	a903      	add	r1, sp, #12
   1b2b0:	4816      	ldr	r0, [pc, #88]	; (1b30c <bt_att_disconnected+0xc4>)
   1b2b2:	f009 fa16 	bl	246e2 <k_mem_slab_free>
	bt_gatt_disconnected(le_chan->chan.conn);
   1b2b6:	6820      	ldr	r0, [r4, #0]
}
   1b2b8:	b004      	add	sp, #16
   1b2ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_gatt_disconnected(le_chan->chan.conn);
   1b2be:	f000 bead 	b.w	1c01c <bt_gatt_disconnected>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   1b2c2:	69a8      	ldr	r0, [r5, #24]
   1b2c4:	f7ff f83e 	bl	1a344 <tx_meta_data_free>
		net_buf_unref(buf);
   1b2c8:	4628      	mov	r0, r5
   1b2ca:	f000 ffb3 	bl	1c234 <net_buf_unref>
   1b2ce:	e7cb      	b.n	1b268 <bt_att_disconnected+0x20>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   1b2d0:	69a8      	ldr	r0, [r5, #24]
   1b2d2:	f7ff f837 	bl	1a344 <tx_meta_data_free>
		net_buf_unref(buf);
   1b2d6:	4628      	mov	r0, r5
   1b2d8:	f000 ffac 	bl	1c234 <net_buf_unref>
   1b2dc:	e7db      	b.n	1b296 <bt_att_disconnected+0x4e>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1b2de:	6882      	ldr	r2, [r0, #8]
	return node->next;
   1b2e0:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   1b2e2:	6043      	str	r3, [r0, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1b2e4:	4295      	cmp	r5, r2
	list->tail = node;
   1b2e6:	bf08      	it	eq
   1b2e8:	6083      	streq	r3, [r0, #8]
		if (req->func) {
   1b2ea:	686e      	ldr	r6, [r5, #4]
   1b2ec:	b136      	cbz	r6, 1b2fc <bt_att_disconnected+0xb4>
			req->func(att->conn, BT_ATT_ERR_UNLIKELY, NULL, 0,
   1b2ee:	68eb      	ldr	r3, [r5, #12]
   1b2f0:	9300      	str	r3, [sp, #0]
   1b2f2:	2300      	movs	r3, #0
   1b2f4:	6800      	ldr	r0, [r0, #0]
   1b2f6:	461a      	mov	r2, r3
   1b2f8:	210e      	movs	r1, #14
   1b2fa:	47b0      	blx	r6
		bt_att_req_free(req);
   1b2fc:	4628      	mov	r0, r5
   1b2fe:	f7ff ff43 	bl	1b188 <bt_att_req_free>
   1b302:	e7d0      	b.n	1b2a6 <bt_att_disconnected+0x5e>
}
   1b304:	b004      	add	sp, #16
   1b306:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b30a:	bf00      	nop
   1b30c:	200007c8 	.word	0x200007c8

0001b310 <att_timeout>:
{
   1b310:	b510      	push	{r4, lr}
   1b312:	4604      	mov	r4, r0
   1b314:	b086      	sub	sp, #24
	LOG_ERR("ATT Timeout");
   1b316:	4b08      	ldr	r3, [pc, #32]	; (1b338 <att_timeout+0x28>)
   1b318:	9305      	str	r3, [sp, #20]
   1b31a:	4808      	ldr	r0, [pc, #32]	; (1b33c <att_timeout+0x2c>)
   1b31c:	2302      	movs	r3, #2
   1b31e:	aa04      	add	r2, sp, #16
   1b320:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1b324:	9304      	str	r3, [sp, #16]
   1b326:	f007 ff07 	bl	23138 <z_log_msg_static_create.constprop.0>
	bt_att_disconnected(&chan->chan.chan);
   1b32a:	f1a4 00ac 	sub.w	r0, r4, #172	; 0xac
}
   1b32e:	b006      	add	sp, #24
   1b330:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_disconnected(&chan->chan.chan);
   1b334:	f7ff bf88 	b.w	1b248 <bt_att_disconnected>
   1b338:	0002756e 	.word	0x0002756e
   1b33c:	0002558c 	.word	0x0002558c

0001b340 <find_cf_cfg>:
	atomic_set(cfg->flags, 0);
}

#if defined(CONFIG_BT_GATT_CACHING)
static struct gatt_cf_cfg *find_cf_cfg(struct bt_conn *conn)
{
   1b340:	b508      	push	{r3, lr}
	int i;

	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
		struct gatt_cf_cfg *cfg = &cf_cfg[i];

		if (!conn) {
   1b342:	b930      	cbnz	r0, 1b352 <find_cf_cfg+0x12>
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   1b344:	4907      	ldr	r1, [pc, #28]	; (1b364 <find_cf_cfg+0x24>)
   1b346:	4808      	ldr	r0, [pc, #32]	; (1b368 <find_cf_cfg+0x28>)
   1b348:	f008 fae7 	bl	2391a <bt_addr_le_eq>
   1b34c:	b138      	cbz	r0, 1b35e <find_cf_cfg+0x1e>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   1b34e:	4807      	ldr	r0, [pc, #28]	; (1b36c <find_cf_cfg+0x2c>)
			return cfg;
		}
	}

	return NULL;
}
   1b350:	bd08      	pop	{r3, pc}
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1b352:	4a05      	ldr	r2, [pc, #20]	; (1b368 <find_cf_cfg+0x28>)
   1b354:	f812 1c01 	ldrb.w	r1, [r2, #-1]
   1b358:	f007 fd36 	bl	22dc8 <bt_conn_is_peer_addr_le>
   1b35c:	e7f6      	b.n	1b34c <find_cf_cfg+0xc>
	return NULL;
   1b35e:	2000      	movs	r0, #0
   1b360:	e7f6      	b.n	1b350 <find_cf_cfg+0x10>
   1b362:	bf00      	nop
   1b364:	0002682b 	.word	0x0002682b
   1b368:	20005069 	.word	0x20005069
   1b36c:	20005068 	.word	0x20005068

0001b370 <find_sc_cfg>:
{
   1b370:	b510      	push	{r4, lr}
		if (id == sc_cfg[i].id &&
   1b372:	4c06      	ldr	r4, [pc, #24]	; (1b38c <find_sc_cfg+0x1c>)
   1b374:	7823      	ldrb	r3, [r4, #0]
   1b376:	4283      	cmp	r3, r0
   1b378:	d103      	bne.n	1b382 <find_sc_cfg+0x12>
		    bt_addr_le_eq(&sc_cfg[i].peer, addr)) {
   1b37a:	1c60      	adds	r0, r4, #1
   1b37c:	f008 facd 	bl	2391a <bt_addr_le_eq>
		if (id == sc_cfg[i].id &&
   1b380:	b908      	cbnz	r0, 1b386 <find_sc_cfg+0x16>
	return NULL;
   1b382:	2000      	movs	r0, #0
}
   1b384:	bd10      	pop	{r4, pc}
			return &sc_cfg[i];
   1b386:	4620      	mov	r0, r4
   1b388:	e7fc      	b.n	1b384 <find_sc_cfg+0x14>
   1b38a:	bf00      	nop
   1b38c:	20005360 	.word	0x20005360

0001b390 <find_ccc_cfg>:
	return next;
}

static struct bt_gatt_ccc_cfg *find_ccc_cfg(const struct bt_conn *conn,
					    struct _bt_gatt_ccc *ccc)
{
   1b390:	b510      	push	{r4, lr}
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];

		if (conn) {
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
						    &cfg->peer)) {
   1b392:	1c4a      	adds	r2, r1, #1
{
   1b394:	460c      	mov	r4, r1
		if (conn) {
   1b396:	b138      	cbz	r0, 1b3a8 <find_ccc_cfg+0x18>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   1b398:	7809      	ldrb	r1, [r1, #0]
   1b39a:	f007 fd15 	bl	22dc8 <bt_conn_is_peer_addr_le>
   1b39e:	b108      	cbz	r0, 1b3a4 <find_ccc_cfg+0x14>
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   1b3a0:	4620      	mov	r0, r4
			return cfg;
		}
	}

	return NULL;
}
   1b3a2:	bd10      	pop	{r4, pc}
	return NULL;
   1b3a4:	2000      	movs	r0, #0
   1b3a6:	e7fc      	b.n	1b3a2 <find_ccc_cfg+0x12>
		} else if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   1b3a8:	4902      	ldr	r1, [pc, #8]	; (1b3b4 <find_ccc_cfg+0x24>)
   1b3aa:	4610      	mov	r0, r2
   1b3ac:	f008 fab5 	bl	2391a <bt_addr_le_eq>
   1b3b0:	e7f5      	b.n	1b39e <find_ccc_cfg+0xe>
   1b3b2:	bf00      	nop
   1b3b4:	0002682b 	.word	0x0002682b

0001b3b8 <bt_gatt_attr_write_ccc>:
}

ssize_t bt_gatt_attr_write_ccc(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr, const void *buf,
			       uint16_t len, uint16_t offset, uint8_t flags)
{
   1b3b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1b3bc:	b087      	sub	sp, #28
   1b3be:	461e      	mov	r6, r3
   1b3c0:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
	struct _bt_gatt_ccc *ccc = attr->user_data;
   1b3c4:	f8d1 800c 	ldr.w	r8, [r1, #12]
{
   1b3c8:	4681      	mov	r9, r0
   1b3ca:	460f      	mov	r7, r1
	struct bt_gatt_ccc_cfg *cfg;
	bool value_changed;
	uint16_t value;

	if (offset) {
   1b3cc:	2b00      	cmp	r3, #0
   1b3ce:	d14b      	bne.n	1b468 <bt_gatt_attr_write_ccc+0xb0>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
	}

	if (!len || len > sizeof(uint16_t)) {
   1b3d0:	1e73      	subs	r3, r6, #1
   1b3d2:	2b01      	cmp	r3, #1
   1b3d4:	d84b      	bhi.n	1b46e <bt_gatt_attr_write_ccc+0xb6>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
	}

	if (len < sizeof(uint16_t)) {
   1b3d6:	2e01      	cmp	r6, #1
		value = *(uint8_t *)buf;
	} else {
		value = sys_get_le16(buf);
	}

	cfg = find_ccc_cfg(conn, ccc);
   1b3d8:	4641      	mov	r1, r8
		value = *(uint8_t *)buf;
   1b3da:	7815      	ldrb	r5, [r2, #0]
   1b3dc:	bf18      	it	ne
   1b3de:	8815      	ldrhne	r5, [r2, #0]
	cfg = find_ccc_cfg(conn, ccc);
   1b3e0:	f7ff ffd6 	bl	1b390 <find_ccc_cfg>
	if (!cfg) {
   1b3e4:	4604      	mov	r4, r0
   1b3e6:	b9f0      	cbnz	r0, 1b426 <bt_gatt_attr_write_ccc+0x6e>
		/* If there's no existing entry, but the new value is zero,
		 * we don't need to do anything, since a disabled CCC is
		 * behaviorally the same as no written CCC.
		 */
		if (!value) {
   1b3e8:	b91d      	cbnz	r5, 1b3f2 <bt_gatt_attr_write_ccc+0x3a>
			return len;
   1b3ea:	4630      	mov	r0, r6
	if (!value) {
		clear_ccc_cfg(cfg);
	}

	return len;
}
   1b3ec:	b007      	add	sp, #28
   1b3ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
   1b3f2:	4641      	mov	r1, r8
   1b3f4:	f7ff ffcc 	bl	1b390 <find_ccc_cfg>
		if (!cfg) {
   1b3f8:	4604      	mov	r4, r0
   1b3fa:	b960      	cbnz	r0, 1b416 <bt_gatt_attr_write_ccc+0x5e>
			LOG_WRN("No space to store CCC cfg");
   1b3fc:	4b1d      	ldr	r3, [pc, #116]	; (1b474 <bt_gatt_attr_write_ccc+0xbc>)
   1b3fe:	481e      	ldr	r0, [pc, #120]	; (1b478 <bt_gatt_attr_write_ccc+0xc0>)
   1b400:	9305      	str	r3, [sp, #20]
   1b402:	aa04      	add	r2, sp, #16
   1b404:	2302      	movs	r3, #2
   1b406:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1b40a:	9304      	str	r3, [sp, #16]
   1b40c:	f008 fb56 	bl	23abc <z_log_msg_static_create.constprop.0>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   1b410:	f06f 0010 	mvn.w	r0, #16
   1b414:	e7ea      	b.n	1b3ec <bt_gatt_attr_write_ccc+0x34>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1b416:	f109 0188 	add.w	r1, r9, #136	; 0x88
   1b41a:	3001      	adds	r0, #1
   1b41c:	f008 faa7 	bl	2396e <bt_addr_le_copy>
		cfg->id = conn->id;
   1b420:	f899 3008 	ldrb.w	r3, [r9, #8]
   1b424:	7023      	strb	r3, [r4, #0]
	if (ccc->cfg_write) {
   1b426:	f8d8 3010 	ldr.w	r3, [r8, #16]
   1b42a:	b98b      	cbnz	r3, 1b450 <bt_gatt_attr_write_ccc+0x98>
	cfg->value = value;
   1b42c:	8125      	strh	r5, [r4, #8]
	if (cfg->value != ccc->value) {
   1b42e:	f8b8 300a 	ldrh.w	r3, [r8, #10]
   1b432:	42ab      	cmp	r3, r5
   1b434:	d003      	beq.n	1b43e <bt_gatt_attr_write_ccc+0x86>
		gatt_ccc_changed(attr, ccc);
   1b436:	4641      	mov	r1, r8
   1b438:	4638      	mov	r0, r7
   1b43a:	f008 f9fa 	bl	23832 <gatt_ccc_changed>
	if (!value) {
   1b43e:	2d00      	cmp	r5, #0
   1b440:	d1d3      	bne.n	1b3ea <bt_gatt_attr_write_ccc+0x32>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1b442:	490e      	ldr	r1, [pc, #56]	; (1b47c <bt_gatt_attr_write_ccc+0xc4>)
   1b444:	1c60      	adds	r0, r4, #1
   1b446:	f008 fa92 	bl	2396e <bt_addr_le_copy>
	cfg->id = 0U;
   1b44a:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   1b44c:	8125      	strh	r5, [r4, #8]
}
   1b44e:	e7cc      	b.n	1b3ea <bt_gatt_attr_write_ccc+0x32>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   1b450:	462a      	mov	r2, r5
   1b452:	4639      	mov	r1, r7
   1b454:	4648      	mov	r0, r9
   1b456:	4798      	blx	r3
		if (write < 0) {
   1b458:	2800      	cmp	r0, #0
   1b45a:	dbc7      	blt.n	1b3ec <bt_gatt_attr_write_ccc+0x34>
		if (write != sizeof(value) && write != 1) {
   1b45c:	3801      	subs	r0, #1
   1b45e:	2801      	cmp	r0, #1
   1b460:	d9e4      	bls.n	1b42c <bt_gatt_attr_write_ccc+0x74>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   1b462:	f06f 000d 	mvn.w	r0, #13
   1b466:	e7c1      	b.n	1b3ec <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1b468:	f06f 0006 	mvn.w	r0, #6
   1b46c:	e7be      	b.n	1b3ec <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1b46e:	f06f 000c 	mvn.w	r0, #12
   1b472:	e7bb      	b.n	1b3ec <bt_gatt_attr_write_ccc+0x34>
   1b474:	00027581 	.word	0x00027581
   1b478:	0002559c 	.word	0x0002559c
   1b47c:	0002682b 	.word	0x0002682b

0001b480 <clear_cf_cfg>:
{
   1b480:	4602      	mov	r2, r0
   1b482:	b508      	push	{r3, lr}
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1b484:	4908      	ldr	r1, [pc, #32]	; (1b4a8 <clear_cf_cfg+0x28>)
   1b486:	3001      	adds	r0, #1
   1b488:	f008 fa71 	bl	2396e <bt_addr_le_copy>
   1b48c:	2300      	movs	r3, #0
   1b48e:	7213      	strb	r3, [r2, #8]
   1b490:	320c      	adds	r2, #12
   1b492:	f3bf 8f5b 	dmb	ish
   1b496:	e852 1f00 	ldrex	r1, [r2]
   1b49a:	e842 3000 	strex	r0, r3, [r2]
   1b49e:	2800      	cmp	r0, #0
   1b4a0:	d1f9      	bne.n	1b496 <clear_cf_cfg+0x16>
   1b4a2:	f3bf 8f5b 	dmb	ish
}
   1b4a6:	bd08      	pop	{r3, pc}
   1b4a8:	0002682b 	.word	0x0002682b

0001b4ac <sc_save>:
{
   1b4ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b4b0:	b086      	sub	sp, #24
   1b4b2:	4680      	mov	r8, r0
   1b4b4:	460f      	mov	r7, r1
   1b4b6:	4616      	mov	r6, r2
   1b4b8:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   1b4ba:	f7ff ff59 	bl	1b370 <find_sc_cfg>
	if (!cfg) {
   1b4be:	4604      	mov	r4, r0
   1b4c0:	b9b0      	cbnz	r0, 1b4f0 <sc_save+0x44>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   1b4c2:	4912      	ldr	r1, [pc, #72]	; (1b50c <sc_save+0x60>)
   1b4c4:	f7ff ff54 	bl	1b370 <find_sc_cfg>
		if (!cfg) {
   1b4c8:	4604      	mov	r4, r0
   1b4ca:	b960      	cbnz	r0, 1b4e6 <sc_save+0x3a>
			LOG_ERR("unable to save SC: no cfg left");
   1b4cc:	4b10      	ldr	r3, [pc, #64]	; (1b510 <sc_save+0x64>)
   1b4ce:	9305      	str	r3, [sp, #20]
   1b4d0:	4810      	ldr	r0, [pc, #64]	; (1b514 <sc_save+0x68>)
   1b4d2:	2302      	movs	r3, #2
   1b4d4:	aa04      	add	r2, sp, #16
   1b4d6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1b4da:	9304      	str	r3, [sp, #16]
   1b4dc:	f008 faee 	bl	23abc <z_log_msg_static_create.constprop.0>
}
   1b4e0:	b006      	add	sp, #24
   1b4e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cfg->id = id;
   1b4e6:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
   1b4ea:	4639      	mov	r1, r7
   1b4ec:	f008 fa3f 	bl	2396e <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
   1b4f0:	8922      	ldrh	r2, [r4, #8]
   1b4f2:	8963      	ldrh	r3, [r4, #10]
   1b4f4:	b91a      	cbnz	r2, 1b4fe <sc_save+0x52>
   1b4f6:	b92b      	cbnz	r3, 1b504 <sc_save+0x58>
		cfg->data.start = start;
   1b4f8:	8126      	strh	r6, [r4, #8]
		*end = new_end;
   1b4fa:	8165      	strh	r5, [r4, #10]
   1b4fc:	e7f0      	b.n	1b4e0 <sc_save+0x34>
	if (new_start >= *start && new_end <= *end) {
   1b4fe:	4296      	cmp	r6, r2
		*start = new_start;
   1b500:	bf38      	it	cc
   1b502:	8126      	strhcc	r6, [r4, #8]
	if (new_start >= *start && new_end <= *end) {
   1b504:	429d      	cmp	r5, r3
   1b506:	d9eb      	bls.n	1b4e0 <sc_save+0x34>
   1b508:	e7f7      	b.n	1b4fa <sc_save+0x4e>
   1b50a:	bf00      	nop
   1b50c:	0002682b 	.word	0x0002682b
   1b510:	0002759b 	.word	0x0002759b
   1b514:	0002559c 	.word	0x0002559c

0001b518 <cf_write>:
{
   1b518:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b51c:	b086      	sub	sp, #24
   1b51e:	461f      	mov	r7, r3
   1b520:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
	if (offset > sizeof(cfg->data)) {
   1b524:	2b01      	cmp	r3, #1
{
   1b526:	4606      	mov	r6, r0
   1b528:	4690      	mov	r8, r2
	if (offset > sizeof(cfg->data)) {
   1b52a:	d83c      	bhi.n	1b5a6 <cf_write+0x8e>
	if (offset + len > sizeof(cfg->data)) {
   1b52c:	443b      	add	r3, r7
   1b52e:	2b01      	cmp	r3, #1
   1b530:	463d      	mov	r5, r7
   1b532:	dc3b      	bgt.n	1b5ac <cf_write+0x94>
	cfg = find_cf_cfg(conn);
   1b534:	f7ff ff04 	bl	1b340 <find_cf_cfg>
	if (!cfg) {
   1b538:	4604      	mov	r4, r0
   1b53a:	b998      	cbnz	r0, 1b564 <cf_write+0x4c>
		cfg = find_cf_cfg(NULL);
   1b53c:	f7ff ff00 	bl	1b340 <find_cf_cfg>
	if (!cfg) {
   1b540:	4604      	mov	r4, r0
   1b542:	b978      	cbnz	r0, 1b564 <cf_write+0x4c>
		LOG_WRN("No space to store Client Supported Features");
   1b544:	4b1c      	ldr	r3, [pc, #112]	; (1b5b8 <cf_write+0xa0>)
   1b546:	9305      	str	r3, [sp, #20]
   1b548:	481c      	ldr	r0, [pc, #112]	; (1b5bc <cf_write+0xa4>)
   1b54a:	2302      	movs	r3, #2
   1b54c:	aa04      	add	r2, sp, #16
   1b54e:	f44f 5184 	mov.w	r1, #4224	; 0x1080
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   1b552:	f06f 0510 	mvn.w	r5, #16
		LOG_WRN("No space to store Client Supported Features");
   1b556:	9304      	str	r3, [sp, #16]
   1b558:	f008 fab0 	bl	23abc <z_log_msg_static_create.constprop.0>
}
   1b55c:	4628      	mov	r0, r5
   1b55e:	b006      	add	sp, #24
   1b560:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   1b564:	b197      	cbz	r7, 1b58c <cf_write+0x74>
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   1b566:	7a21      	ldrb	r1, [r4, #8]
		    !(value[i / 8] & BIT(i % 8))) {
   1b568:	f898 2000 	ldrb.w	r2, [r8]
   1b56c:	2300      	movs	r3, #0
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   1b56e:	fa21 f003 	lsr.w	r0, r1, r3
   1b572:	07c7      	lsls	r7, r0, #31
   1b574:	d503      	bpl.n	1b57e <cf_write+0x66>
		    !(value[i / 8] & BIT(i % 8))) {
   1b576:	fa22 f003 	lsr.w	r0, r2, r3
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   1b57a:	07c0      	lsls	r0, r0, #31
   1b57c:	d519      	bpl.n	1b5b2 <cf_write+0x9a>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   1b57e:	3301      	adds	r3, #1
   1b580:	2b03      	cmp	r3, #3
   1b582:	d1f4      	bne.n	1b56e <cf_write+0x56>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   1b584:	f002 0207 	and.w	r2, r2, #7
   1b588:	4311      	orrs	r1, r2
   1b58a:	7221      	strb	r1, [r4, #8]
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1b58c:	f106 0188 	add.w	r1, r6, #136	; 0x88
   1b590:	1c60      	adds	r0, r4, #1
   1b592:	f008 f9ec 	bl	2396e <bt_addr_le_copy>
	cfg->id = conn->id;
   1b596:	4620      	mov	r0, r4
   1b598:	7a33      	ldrb	r3, [r6, #8]
   1b59a:	f800 3b0c 	strb.w	r3, [r0], #12
	atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   1b59e:	2100      	movs	r1, #0
   1b5a0:	f008 fab0 	bl	23b04 <atomic_set_bit>
	return len;
   1b5a4:	e7da      	b.n	1b55c <cf_write+0x44>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1b5a6:	f06f 0506 	mvn.w	r5, #6
   1b5aa:	e7d7      	b.n	1b55c <cf_write+0x44>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1b5ac:	f06f 050c 	mvn.w	r5, #12
   1b5b0:	e7d4      	b.n	1b55c <cf_write+0x44>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   1b5b2:	f06f 0512 	mvn.w	r5, #18
   1b5b6:	e7d1      	b.n	1b55c <cf_write+0x44>
   1b5b8:	000275ba 	.word	0x000275ba
   1b5bc:	0002559c 	.word	0x0002559c

0001b5c0 <disconnected_cb>:
	return BT_GATT_ITER_CONTINUE;
}

static uint8_t disconnected_cb(const struct bt_gatt_attr *attr, uint16_t handle,
			       void *user_data)
{
   1b5c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct _bt_gatt_ccc *ccc;
	bool value_used;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
   1b5c4:	4b23      	ldr	r3, [pc, #140]	; (1b654 <disconnected_cb+0x94>)
{
   1b5c6:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1b5c8:	6882      	ldr	r2, [r0, #8]
   1b5ca:	429a      	cmp	r2, r3
{
   1b5cc:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   1b5ce:	d102      	bne.n	1b5d6 <disconnected_cb+0x16>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
   1b5d0:	68c4      	ldr	r4, [r0, #12]

	/* If already disabled skip */
	if (!ccc->value) {
   1b5d2:	8963      	ldrh	r3, [r4, #10]
   1b5d4:	bb33      	cbnz	r3, 1b624 <disconnected_cb+0x64>

		LOG_DBG("ccc %p reseted", ccc);
	}

	return BT_GATT_ITER_CONTINUE;
}
   1b5d6:	2001      	movs	r0, #1
   1b5d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				bt_conn_unref(tmp);
   1b5dc:	f007 fbab 	bl	22d36 <bt_conn_unref>
		if (ccc->cfg_changed) {
   1b5e0:	68e3      	ldr	r3, [r4, #12]
		ccc->value = 0U;
   1b5e2:	2100      	movs	r1, #0
   1b5e4:	8161      	strh	r1, [r4, #10]
		if (ccc->cfg_changed) {
   1b5e6:	2b00      	cmp	r3, #0
   1b5e8:	d0f5      	beq.n	1b5d6 <disconnected_cb+0x16>
			ccc->cfg_changed(attr, ccc->value);
   1b5ea:	4638      	mov	r0, r7
   1b5ec:	4798      	blx	r3
   1b5ee:	e7f2      	b.n	1b5d6 <disconnected_cb+0x16>
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1b5f0:	f105 0888 	add.w	r8, r5, #136	; 0x88
   1b5f4:	7a28      	ldrb	r0, [r5, #8]
   1b5f6:	4641      	mov	r1, r8
   1b5f8:	f007 fa1b 	bl	22a32 <bt_addr_le_is_bonded>
   1b5fc:	b968      	cbnz	r0, 1b61a <disconnected_cb+0x5a>
				if (ccc == &sc_ccc) {
   1b5fe:	4b16      	ldr	r3, [pc, #88]	; (1b658 <disconnected_cb+0x98>)
   1b600:	429c      	cmp	r4, r3
   1b602:	d102      	bne.n	1b60a <disconnected_cb+0x4a>
					sc_clear(conn);
   1b604:	4628      	mov	r0, r5
   1b606:	f008 fa5c 	bl	23ac2 <sc_clear>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1b60a:	4914      	ldr	r1, [pc, #80]	; (1b65c <disconnected_cb+0x9c>)
   1b60c:	4630      	mov	r0, r6
   1b60e:	f008 f9ae 	bl	2396e <bt_addr_le_copy>
	cfg->id = 0U;
   1b612:	2300      	movs	r3, #0
   1b614:	7023      	strb	r3, [r4, #0]
	cfg->value = 0U;
   1b616:	8123      	strh	r3, [r4, #8]
}
   1b618:	e7e2      	b.n	1b5e0 <disconnected_cb+0x20>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1b61a:	4641      	mov	r1, r8
   1b61c:	4630      	mov	r0, r6
   1b61e:	f008 f9a6 	bl	2396e <bt_addr_le_copy>
   1b622:	e7dd      	b.n	1b5e0 <disconnected_cb+0x20>
		if (!cfg->value) {
   1b624:	8923      	ldrh	r3, [r4, #8]
   1b626:	2b00      	cmp	r3, #0
   1b628:	d0da      	beq.n	1b5e0 <disconnected_cb+0x20>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1b62a:	4626      	mov	r6, r4
   1b62c:	4628      	mov	r0, r5
   1b62e:	f816 1b01 	ldrb.w	r1, [r6], #1
   1b632:	4632      	mov	r2, r6
   1b634:	f007 fbc8 	bl	22dc8 <bt_conn_is_peer_addr_le>
   1b638:	2800      	cmp	r0, #0
   1b63a:	d1d9      	bne.n	1b5f0 <disconnected_cb+0x30>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   1b63c:	7820      	ldrb	r0, [r4, #0]
   1b63e:	4631      	mov	r1, r6
   1b640:	f7fe fac0 	bl	19bc4 <bt_conn_lookup_addr_le>
			if (tmp) {
   1b644:	2800      	cmp	r0, #0
   1b646:	d0cb      	beq.n	1b5e0 <disconnected_cb+0x20>
				if (tmp->state == BT_CONN_CONNECTED) {
   1b648:	7a83      	ldrb	r3, [r0, #10]
   1b64a:	2b07      	cmp	r3, #7
   1b64c:	d1c6      	bne.n	1b5dc <disconnected_cb+0x1c>
				bt_conn_unref(tmp);
   1b64e:	f007 fb72 	bl	22d36 <bt_conn_unref>
	if (!value_used) {
   1b652:	e7c0      	b.n	1b5d6 <disconnected_cb+0x16>
   1b654:	0001b3b9 	.word	0x0001b3b9
   1b658:	200005d4 	.word	0x200005d4
   1b65c:	0002682b 	.word	0x0002682b

0001b660 <sc_indicate_rsp>:
{
   1b660:	b510      	push	{r4, lr}
   1b662:	4604      	mov	r4, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1b664:	4815      	ldr	r0, [pc, #84]	; (1b6bc <sc_indicate_rsp+0x5c>)
   1b666:	f3bf 8f5b 	dmb	ish
   1b66a:	e850 3f00 	ldrex	r3, [r0]
   1b66e:	f023 0302 	bic.w	r3, r3, #2
   1b672:	e840 3200 	strex	r2, r3, [r0]
   1b676:	2a00      	cmp	r2, #0
   1b678:	d1f7      	bne.n	1b66a <sc_indicate_rsp+0xa>
   1b67a:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1b67e:	f3bf 8f5b 	dmb	ish
   1b682:	6803      	ldr	r3, [r0, #0]
   1b684:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   1b688:	07da      	lsls	r2, r3, #31
   1b68a:	d504      	bpl.n	1b696 <sc_indicate_rsp+0x36>
	k_work_reschedule(&gatt_sc.work, timeout);
   1b68c:	2200      	movs	r2, #0
   1b68e:	2300      	movs	r3, #0
   1b690:	3830      	subs	r0, #48	; 0x30
   1b692:	f004 fad5 	bl	1fc40 <k_work_reschedule>
	if (bt_att_fixed_chan_only(conn)) {
   1b696:	4620      	mov	r0, r4
   1b698:	f008 f89a 	bl	237d0 <bt_att_fixed_chan_only>
   1b69c:	b160      	cbz	r0, 1b6b8 <sc_indicate_rsp+0x58>
		cfg = find_cf_cfg(conn);
   1b69e:	4620      	mov	r0, r4
   1b6a0:	f7ff fe4e 	bl	1b340 <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   1b6a4:	b140      	cbz	r0, 1b6b8 <sc_indicate_rsp+0x58>
   1b6a6:	7a03      	ldrb	r3, [r0, #8]
   1b6a8:	07db      	lsls	r3, r3, #31
   1b6aa:	d505      	bpl.n	1b6b8 <sc_indicate_rsp+0x58>
}
   1b6ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   1b6b0:	2100      	movs	r1, #0
   1b6b2:	300c      	adds	r0, #12
   1b6b4:	f008 ba26 	b.w	23b04 <atomic_set_bit>
}
   1b6b8:	bd10      	pop	{r4, pc}
   1b6ba:	bf00      	nop
   1b6bc:	20001f98 	.word	0x20001f98

0001b6c0 <bt_gatt_init>:
{
   1b6c0:	b510      	push	{r4, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1b6c2:	4b20      	ldr	r3, [pc, #128]	; (1b744 <bt_gatt_init+0x84>)
   1b6c4:	f3bf 8f5b 	dmb	ish
   1b6c8:	2201      	movs	r2, #1
   1b6ca:	e853 1f00 	ldrex	r1, [r3]
   1b6ce:	2900      	cmp	r1, #0
   1b6d0:	d103      	bne.n	1b6da <bt_gatt_init+0x1a>
   1b6d2:	e843 2000 	strex	r0, r2, [r3]
   1b6d6:	2800      	cmp	r0, #0
   1b6d8:	d1f7      	bne.n	1b6ca <bt_gatt_init+0xa>
   1b6da:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
   1b6de:	d130      	bne.n	1b742 <bt_gatt_init+0x82>
   1b6e0:	f3bf 8f5b 	dmb	ish
   1b6e4:	4b18      	ldr	r3, [pc, #96]	; (1b748 <bt_gatt_init+0x88>)
   1b6e6:	e853 1f00 	ldrex	r1, [r3]
   1b6ea:	2900      	cmp	r1, #0
   1b6ec:	d103      	bne.n	1b6f6 <bt_gatt_init+0x36>
   1b6ee:	e843 2000 	strex	r0, r2, [r3]
   1b6f2:	2800      	cmp	r0, #0
   1b6f4:	d1f7      	bne.n	1b6e6 <bt_gatt_init+0x26>
   1b6f6:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&service_init, 0, 1)) {
   1b6fa:	d108      	bne.n	1b70e <bt_gatt_init+0x4e>
   1b6fc:	4913      	ldr	r1, [pc, #76]	; (1b74c <bt_gatt_init+0x8c>)
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   1b6fe:	4a14      	ldr	r2, [pc, #80]	; (1b750 <bt_gatt_init+0x90>)
   1b700:	880b      	ldrh	r3, [r1, #0]
   1b702:	4c14      	ldr	r4, [pc, #80]	; (1b754 <bt_gatt_init+0x94>)
	if (!atomic_cas(&service_init, 0, 1)) {
   1b704:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   1b706:	42a2      	cmp	r2, r4
   1b708:	d315      	bcc.n	1b736 <bt_gatt_init+0x76>
   1b70a:	b100      	cbz	r0, 1b70e <bt_gatt_init+0x4e>
   1b70c:	800b      	strh	r3, [r1, #0]
	list->head = NULL;
   1b70e:	4b12      	ldr	r3, [pc, #72]	; (1b758 <bt_gatt_init+0x98>)
	k_work_init_delayable(&db_hash.work, db_hash_process);
   1b710:	4912      	ldr	r1, [pc, #72]	; (1b75c <bt_gatt_init+0x9c>)
   1b712:	4813      	ldr	r0, [pc, #76]	; (1b760 <bt_gatt_init+0xa0>)
   1b714:	2200      	movs	r2, #0
	list->tail = NULL;
   1b716:	e9c3 2200 	strd	r2, r2, [r3]
   1b71a:	f009 f980 	bl	24a1e <k_work_init_delayable>
		bt_long_wq_schedule(&db_hash.work, DB_HASH_TIMEOUT);
   1b71e:	4810      	ldr	r0, [pc, #64]	; (1b760 <bt_gatt_init+0xa0>)
   1b720:	f44f 72a4 	mov.w	r2, #328	; 0x148
   1b724:	2300      	movs	r3, #0
   1b726:	f7fb fbd5 	bl	16ed4 <bt_long_wq_schedule>
}
   1b72a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_init_delayable(&gatt_sc.work, sc_process);
   1b72e:	490d      	ldr	r1, [pc, #52]	; (1b764 <bt_gatt_init+0xa4>)
   1b730:	480d      	ldr	r0, [pc, #52]	; (1b768 <bt_gatt_init+0xa8>)
   1b732:	f009 b974 	b.w	24a1e <k_work_init_delayable>
		last_static_handle += svc->attr_count;
   1b736:	6850      	ldr	r0, [r2, #4]
   1b738:	4403      	add	r3, r0
   1b73a:	b29b      	uxth	r3, r3
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   1b73c:	3208      	adds	r2, #8
   1b73e:	2001      	movs	r0, #1
   1b740:	e7e1      	b.n	1b706 <bt_gatt_init+0x46>
}
   1b742:	bd10      	pop	{r4, pc}
   1b744:	2000507c 	.word	0x2000507c
   1b748:	20005078 	.word	0x20005078
   1b74c:	2000536c 	.word	0x2000536c
   1b750:	0002555c 	.word	0x0002555c
   1b754:	00025574 	.word	0x00025574
   1b758:	20005080 	.word	0x20005080
   1b75c:	00023bf9 	.word	0x00023bf9
   1b760:	20001ef0 	.word	0x20001ef0
   1b764:	0001bba9 	.word	0x0001bba9
   1b768:	20001f68 	.word	0x20001f68

0001b76c <bt_gatt_attr_get_handle>:
{
   1b76c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
   1b770:	4603      	mov	r3, r0
   1b772:	b148      	cbz	r0, 1b788 <bt_gatt_attr_get_handle+0x1c>
	if (attr->handle) {
   1b774:	8a00      	ldrh	r0, [r0, #16]
   1b776:	b938      	cbnz	r0, 1b788 <bt_gatt_attr_get_handle+0x1c>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1b778:	4912      	ldr	r1, [pc, #72]	; (1b7c4 <bt_gatt_attr_get_handle+0x58>)
   1b77a:	f8df e04c 	ldr.w	lr, [pc, #76]	; 1b7c8 <bt_gatt_attr_get_handle+0x5c>
	uint16_t handle = 1;
   1b77e:	2401      	movs	r4, #1
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   1b780:	f04f 0c14 	mov.w	ip, #20
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1b784:	4571      	cmp	r1, lr
   1b786:	d301      	bcc.n	1b78c <bt_gatt_attr_get_handle+0x20>
}
   1b788:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   1b78c:	e9d1 7600 	ldrd	r7, r6, [r1]
		if ((attr < &static_svc->attrs[0]) ||
   1b790:	42bb      	cmp	r3, r7
   1b792:	d304      	bcc.n	1b79e <bt_gatt_attr_get_handle+0x32>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   1b794:	fb0c 7206 	mla	r2, ip, r6, r7
   1b798:	3a14      	subs	r2, #20
		if ((attr < &static_svc->attrs[0]) ||
   1b79a:	4293      	cmp	r3, r2
   1b79c:	d90e      	bls.n	1b7bc <bt_gatt_attr_get_handle+0x50>
			handle += static_svc->attr_count;
   1b79e:	4434      	add	r4, r6
   1b7a0:	b2a2      	uxth	r2, r4
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1b7a2:	3108      	adds	r1, #8
   1b7a4:	4614      	mov	r4, r2
   1b7a6:	e7ed      	b.n	1b784 <bt_gatt_attr_get_handle+0x18>
			if (attr == &static_svc->attrs[i]) {
   1b7a8:	fb0c 7805 	mla	r8, ip, r5, r7
   1b7ac:	4543      	cmp	r3, r8
   1b7ae:	d007      	beq.n	1b7c0 <bt_gatt_attr_get_handle+0x54>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   1b7b0:	3501      	adds	r5, #1
   1b7b2:	1962      	adds	r2, r4, r5
   1b7b4:	42b5      	cmp	r5, r6
   1b7b6:	b292      	uxth	r2, r2
   1b7b8:	d1f6      	bne.n	1b7a8 <bt_gatt_attr_get_handle+0x3c>
   1b7ba:	e7f2      	b.n	1b7a2 <bt_gatt_attr_get_handle+0x36>
   1b7bc:	2500      	movs	r5, #0
   1b7be:	e7f8      	b.n	1b7b2 <bt_gatt_attr_get_handle+0x46>
   1b7c0:	4610      	mov	r0, r2
   1b7c2:	e7e1      	b.n	1b788 <bt_gatt_attr_get_handle+0x1c>
   1b7c4:	0002555c 	.word	0x0002555c
   1b7c8:	00025574 	.word	0x00025574

0001b7cc <bt_gatt_foreach_attr_type>:
{
   1b7cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b7d0:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
   1b7d4:	9100      	str	r1, [sp, #0]
   1b7d6:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
   1b7d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1b7dc:	2d00      	cmp	r5, #0
   1b7de:	bf08      	it	eq
   1b7e0:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
   1b7e2:	4b24      	ldr	r3, [pc, #144]	; (1b874 <bt_gatt_foreach_attr_type+0xa8>)
   1b7e4:	881b      	ldrh	r3, [r3, #0]
   1b7e6:	4283      	cmp	r3, r0
{
   1b7e8:	4607      	mov	r7, r0
   1b7ea:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
   1b7ec:	d23c      	bcs.n	1b868 <bt_gatt_foreach_attr_type+0x9c>
}
   1b7ee:	b003      	add	sp, #12
   1b7f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (handle + static_svc->attr_count < start_handle) {
   1b7f4:	6873      	ldr	r3, [r6, #4]
   1b7f6:	4423      	add	r3, r4
   1b7f8:	42bb      	cmp	r3, r7
   1b7fa:	d232      	bcs.n	1b862 <bt_gatt_foreach_attr_type+0x96>
				handle += static_svc->attr_count;
   1b7fc:	b29c      	uxth	r4, r3
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1b7fe:	3608      	adds	r6, #8
   1b800:	4b1d      	ldr	r3, [pc, #116]	; (1b878 <bt_gatt_foreach_attr_type+0xac>)
   1b802:	429e      	cmp	r6, r3
   1b804:	d3f6      	bcc.n	1b7f4 <bt_gatt_foreach_attr_type+0x28>
   1b806:	e7f2      	b.n	1b7ee <bt_gatt_foreach_attr_type+0x22>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   1b808:	5889      	ldr	r1, [r1, r2]
   1b80a:	9301      	str	r3, [sp, #4]
   1b80c:	4640      	mov	r0, r8
   1b80e:	f006 ffd4 	bl	227ba <bt_uuid_cmp>
   1b812:	9b01      	ldr	r3, [sp, #4]
   1b814:	b190      	cbz	r0, 1b83c <bt_gatt_foreach_attr_type+0x70>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   1b816:	3401      	adds	r4, #1
   1b818:	f10a 0a01 	add.w	sl, sl, #1
   1b81c:	b2a4      	uxth	r4, r4
   1b81e:	6873      	ldr	r3, [r6, #4]
   1b820:	4553      	cmp	r3, sl
   1b822:	d9ec      	bls.n	1b7fe <bt_gatt_foreach_attr_type+0x32>
	if (handle > end_handle) {
   1b824:	9b00      	ldr	r3, [sp, #0]
   1b826:	429c      	cmp	r4, r3
   1b828:	d8e1      	bhi.n	1b7ee <bt_gatt_foreach_attr_type+0x22>
	if (handle < start_handle) {
   1b82a:	42bc      	cmp	r4, r7
				if (gatt_foreach_iter(&static_svc->attrs[i],
   1b82c:	6831      	ldr	r1, [r6, #0]
	if (handle < start_handle) {
   1b82e:	d3f2      	bcc.n	1b816 <bt_gatt_foreach_attr_type+0x4a>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   1b830:	fb0b f20a 	mul.w	r2, fp, sl
   1b834:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   1b836:	f1b8 0f00 	cmp.w	r8, #0
   1b83a:	d1e5      	bne.n	1b808 <bt_gatt_foreach_attr_type+0x3c>
	if (attr_data && attr_data != attr->user_data) {
   1b83c:	f1b9 0f00 	cmp.w	r9, #0
   1b840:	d10b      	bne.n	1b85a <bt_gatt_foreach_attr_type+0x8e>
	*num_matches -= 1;
   1b842:	3d01      	subs	r5, #1
   1b844:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
   1b846:	4618      	mov	r0, r3
   1b848:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1b84a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1b84c:	4621      	mov	r1, r4
   1b84e:	4798      	blx	r3
	if (!*num_matches) {
   1b850:	2d00      	cmp	r5, #0
   1b852:	d0cc      	beq.n	1b7ee <bt_gatt_foreach_attr_type+0x22>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   1b854:	2800      	cmp	r0, #0
   1b856:	d1de      	bne.n	1b816 <bt_gatt_foreach_attr_type+0x4a>
   1b858:	e7c9      	b.n	1b7ee <bt_gatt_foreach_attr_type+0x22>
	if (attr_data && attr_data != attr->user_data) {
   1b85a:	68da      	ldr	r2, [r3, #12]
   1b85c:	4591      	cmp	r9, r2
   1b85e:	d1da      	bne.n	1b816 <bt_gatt_foreach_attr_type+0x4a>
   1b860:	e7ef      	b.n	1b842 <bt_gatt_foreach_attr_type+0x76>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   1b862:	f04f 0a00 	mov.w	sl, #0
   1b866:	e7da      	b.n	1b81e <bt_gatt_foreach_attr_type+0x52>
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1b868:	4e04      	ldr	r6, [pc, #16]	; (1b87c <bt_gatt_foreach_attr_type+0xb0>)
		uint16_t handle = 1;
   1b86a:	2401      	movs	r4, #1
				if (gatt_foreach_iter(&static_svc->attrs[i],
   1b86c:	f04f 0b14 	mov.w	fp, #20
   1b870:	e7c6      	b.n	1b800 <bt_gatt_foreach_attr_type+0x34>
   1b872:	bf00      	nop
   1b874:	2000536c 	.word	0x2000536c
   1b878:	00025574 	.word	0x00025574
   1b87c:	0002555c 	.word	0x0002555c

0001b880 <db_hash_gen.constprop.0>:
static void db_hash_gen(bool store)
   1b880:	b510      	push	{r4, lr}
   1b882:	b0ce      	sub	sp, #312	; 0x138
	uint8_t key[16] = {};
   1b884:	2300      	movs	r3, #0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   1b886:	aa22      	add	r2, sp, #136	; 0x88
   1b888:	4669      	mov	r1, sp
   1b88a:	a80a      	add	r0, sp, #40	; 0x28
	uint8_t key[16] = {};
   1b88c:	e9cd 3300 	strd	r3, r3, [sp]
   1b890:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   1b894:	f006 fe9c 	bl	225d0 <tc_cmac_setup>
   1b898:	b958      	cbnz	r0, 1b8b2 <db_hash_gen.constprop.0+0x32>
		LOG_ERR("Unable to setup AES CMAC");
   1b89a:	4b1a      	ldr	r3, [pc, #104]	; (1b904 <db_hash_gen.constprop.0+0x84>)
		LOG_ERR("Unable to calculate hash");
   1b89c:	9309      	str	r3, [sp, #36]	; 0x24
   1b89e:	481a      	ldr	r0, [pc, #104]	; (1b908 <db_hash_gen.constprop.0+0x88>)
   1b8a0:	2302      	movs	r3, #2
   1b8a2:	aa08      	add	r2, sp, #32
   1b8a4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1b8a8:	9308      	str	r3, [sp, #32]
   1b8aa:	f008 f907 	bl	23abc <z_log_msg_static_create.constprop.0>
}
   1b8ae:	b04e      	add	sp, #312	; 0x138
   1b8b0:	bd10      	pop	{r4, pc}
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
   1b8b2:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1b8b6:	2001      	movs	r0, #1
   1b8b8:	4a14      	ldr	r2, [pc, #80]	; (1b90c <db_hash_gen.constprop.0+0x8c>)
   1b8ba:	ab0a      	add	r3, sp, #40	; 0x28
   1b8bc:	f008 f991 	bl	23be2 <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   1b8c0:	4813      	ldr	r0, [pc, #76]	; (1b910 <db_hash_gen.constprop.0+0x90>)
   1b8c2:	a90a      	add	r1, sp, #40	; 0x28
   1b8c4:	f006 ff19 	bl	226fa <tc_cmac_final>
   1b8c8:	b908      	cbnz	r0, 1b8ce <db_hash_gen.constprop.0+0x4e>
		LOG_ERR("Unable to calculate hash");
   1b8ca:	4b12      	ldr	r3, [pc, #72]	; (1b914 <db_hash_gen.constprop.0+0x94>)
   1b8cc:	e7e6      	b.n	1b89c <db_hash_gen.constprop.0+0x1c>
   1b8ce:	4b10      	ldr	r3, [pc, #64]	; (1b910 <db_hash_gen.constprop.0+0x90>)
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   1b8d0:	2208      	movs	r2, #8
   1b8d2:	f103 0110 	add.w	r1, r3, #16
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
		uint8_t tmp = ((uint8_t *)buf)[i];
   1b8d6:	7818      	ldrb	r0, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   1b8d8:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
   1b8dc:	f803 4b01 	strb.w	r4, [r3], #1
	for (i = 0; i < (length/2); i++) {
   1b8e0:	3a01      	subs	r2, #1
		((uint8_t *)buf)[length - 1 - i] = tmp;
   1b8e2:	7008      	strb	r0, [r1, #0]
	for (i = 0; i < (length/2); i++) {
   1b8e4:	d1f7      	bne.n	1b8d6 <db_hash_gen.constprop.0+0x56>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1b8e6:	f3bf 8f5b 	dmb	ish
   1b8ea:	4b0b      	ldr	r3, [pc, #44]	; (1b918 <db_hash_gen.constprop.0+0x98>)
   1b8ec:	e853 1f00 	ldrex	r1, [r3]
   1b8f0:	f041 0104 	orr.w	r1, r1, #4
   1b8f4:	e843 1200 	strex	r2, r1, [r3]
   1b8f8:	2a00      	cmp	r2, #0
   1b8fa:	d1f7      	bne.n	1b8ec <db_hash_gen.constprop.0+0x6c>
   1b8fc:	f3bf 8f5b 	dmb	ish
   1b900:	e7d5      	b.n	1b8ae <db_hash_gen.constprop.0+0x2e>
   1b902:	bf00      	nop
   1b904:	000275e6 	.word	0x000275e6
   1b908:	0002559c 	.word	0x0002559c
   1b90c:	00023875 	.word	0x00023875
   1b910:	20001ee0 	.word	0x20001ee0
   1b914:	000275ff 	.word	0x000275ff
   1b918:	20001f98 	.word	0x20001f98

0001b91c <db_hash_read>:
{
   1b91c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   1b920:	4918      	ldr	r1, [pc, #96]	; (1b984 <db_hash_read+0x68>)
{
   1b922:	f8bd 7018 	ldrh.w	r7, [sp, #24]
   1b926:	4604      	mov	r4, r0
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   1b928:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
{
   1b92c:	461e      	mov	r6, r3
   1b92e:	4615      	mov	r5, r2
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   1b930:	f009 f897 	bl	24a62 <k_work_cancel_delayable_sync>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1b934:	f3bf 8f5b 	dmb	ish
   1b938:	4b13      	ldr	r3, [pc, #76]	; (1b988 <db_hash_read+0x6c>)
   1b93a:	681b      	ldr	r3, [r3, #0]
   1b93c:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   1b940:	0759      	lsls	r1, r3, #29
   1b942:	d401      	bmi.n	1b948 <db_hash_read+0x2c>
		db_hash_gen(true);
   1b944:	f7ff ff9c 	bl	1b880 <db_hash_gen.constprop.0>
	cfg = find_cf_cfg(conn);
   1b948:	4620      	mov	r0, r4
   1b94a:	f7ff fcf9 	bl	1b340 <find_cf_cfg>
	if (cfg &&
   1b94e:	4604      	mov	r4, r0
   1b950:	b170      	cbz	r0, 1b970 <db_hash_read+0x54>
   1b952:	7a03      	ldrb	r3, [r0, #8]
   1b954:	07da      	lsls	r2, r3, #31
   1b956:	d50b      	bpl.n	1b970 <db_hash_read+0x54>
   1b958:	f3bf 8f5b 	dmb	ish
   1b95c:	68e3      	ldr	r3, [r4, #12]
   1b95e:	f3bf 8f5b 	dmb	ish
	    CF_ROBUST_CACHING(cfg) &&
   1b962:	07db      	lsls	r3, r3, #31
	    !atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   1b964:	f100 000c 	add.w	r0, r0, #12
	    CF_ROBUST_CACHING(cfg) &&
   1b968:	d402      	bmi.n	1b970 <db_hash_read+0x54>
		atomic_set_bit(cfg->flags, CF_DB_HASH_READ);
   1b96a:	2101      	movs	r1, #1
   1b96c:	f008 f8ca 	bl	23b04 <atomic_set_bit>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   1b970:	2310      	movs	r3, #16
   1b972:	9306      	str	r3, [sp, #24]
   1b974:	463a      	mov	r2, r7
   1b976:	4631      	mov	r1, r6
   1b978:	4628      	mov	r0, r5
   1b97a:	4b04      	ldr	r3, [pc, #16]	; (1b98c <db_hash_read+0x70>)
}
   1b97c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   1b980:	f008 b801 	b.w	23986 <bt_gatt_attr_read.constprop.0>
   1b984:	20001f20 	.word	0x20001f20
   1b988:	20001f98 	.word	0x20001f98
   1b98c:	20001ee0 	.word	0x20001ee0

0001b990 <bt_gatt_attr_next>:
{
   1b990:	b507      	push	{r0, r1, r2, lr}
	struct bt_gatt_attr *next = NULL;
   1b992:	2300      	movs	r3, #0
   1b994:	9301      	str	r3, [sp, #4]
	uint16_t handle = bt_gatt_attr_get_handle(attr);
   1b996:	f7ff fee9 	bl	1b76c <bt_gatt_attr_get_handle>
	bt_gatt_foreach_attr(handle + 1, handle + 1, find_next, &next);
   1b99a:	1c41      	adds	r1, r0, #1
   1b99c:	b289      	uxth	r1, r1
   1b99e:	4608      	mov	r0, r1
   1b9a0:	4a03      	ldr	r2, [pc, #12]	; (1b9b0 <bt_gatt_attr_next+0x20>)
   1b9a2:	ab01      	add	r3, sp, #4
   1b9a4:	f008 f91d 	bl	23be2 <bt_gatt_foreach_attr>
}
   1b9a8:	9801      	ldr	r0, [sp, #4]
   1b9aa:	b003      	add	sp, #12
   1b9ac:	f85d fb04 	ldr.w	pc, [sp], #4
   1b9b0:	0002382d 	.word	0x0002382d

0001b9b4 <gatt_indicate>:
{
   1b9b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1b9b8:	4615      	mov	r5, r2
   1b9ba:	b086      	sub	sp, #24
   1b9bc:	4689      	mov	r9, r1
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1b9be:	2294      	movs	r2, #148	; 0x94
   1b9c0:	6869      	ldr	r1, [r5, #4]
{
   1b9c2:	4606      	mov	r6, r0
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1b9c4:	f008 f91a 	bl	23bfc <bt_gatt_check_perm>
   1b9c8:	4680      	mov	r8, r0
   1b9ca:	b178      	cbz	r0, 1b9ec <gatt_indicate+0x38>
		LOG_WRN("Link is not encrypted");
   1b9cc:	4b34      	ldr	r3, [pc, #208]	; (1baa0 <gatt_indicate+0xec>)
   1b9ce:	9305      	str	r3, [sp, #20]
   1b9d0:	4834      	ldr	r0, [pc, #208]	; (1baa4 <gatt_indicate+0xf0>)
   1b9d2:	2302      	movs	r3, #2
   1b9d4:	aa04      	add	r2, sp, #16
   1b9d6:	f44f 5184 	mov.w	r1, #4224	; 0x1080
		return -EPERM;
   1b9da:	f04f 35ff 	mov.w	r5, #4294967295
		LOG_WRN("Link is not encrypted");
   1b9de:	9304      	str	r3, [sp, #16]
   1b9e0:	f008 f86c 	bl	23abc <z_log_msg_static_create.constprop.0>
}
   1b9e4:	4628      	mov	r0, r5
   1b9e6:	b006      	add	sp, #24
   1b9e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_INDICATE)) {
   1b9ec:	6869      	ldr	r1, [r5, #4]
   1b9ee:	2202      	movs	r2, #2
   1b9f0:	4630      	mov	r0, r6
   1b9f2:	f008 f92c 	bl	23c4e <bt_gatt_is_subscribed>
   1b9f6:	b960      	cbnz	r0, 1ba12 <gatt_indicate+0x5e>
			LOG_WRN("Device is not subscribed to characteristic");
   1b9f8:	4b2b      	ldr	r3, [pc, #172]	; (1baa8 <gatt_indicate+0xf4>)
   1b9fa:	9305      	str	r3, [sp, #20]
   1b9fc:	4829      	ldr	r0, [pc, #164]	; (1baa4 <gatt_indicate+0xf0>)
   1b9fe:	2302      	movs	r3, #2
   1ba00:	aa04      	add	r2, sp, #16
   1ba02:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1ba06:	9304      	str	r3, [sp, #16]
			return -EINVAL;
   1ba08:	f06f 0515 	mvn.w	r5, #21
			LOG_WRN("Device is not subscribed to characteristic");
   1ba0c:	f008 f856 	bl	23abc <z_log_msg_static_create.constprop.0>
			return -EINVAL;
   1ba10:	e7e8      	b.n	1b9e4 <gatt_indicate+0x30>
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   1ba12:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   1ba16:	2100      	movs	r1, #0
	len = sizeof(*ind) + params->len;
   1ba18:	8aaf      	ldrh	r7, [r5, #20]
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   1ba1a:	f7ff fb91 	bl	1b140 <bt_att_req_alloc>
	len = sizeof(*ind) + params->len;
   1ba1e:	3702      	adds	r7, #2
	if (!req) {
   1ba20:	4604      	mov	r4, r0
   1ba22:	b1b0      	cbz	r0, 1ba52 <gatt_indicate+0x9e>
	req->func = func;
   1ba24:	4b21      	ldr	r3, [pc, #132]	; (1baac <gatt_indicate+0xf8>)
   1ba26:	6043      	str	r3, [r0, #4]
	req->user_data = params;
   1ba28:	60c5      	str	r5, [r0, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   1ba2a:	463a      	mov	r2, r7
   1ba2c:	211d      	movs	r1, #29
   1ba2e:	4630      	mov	r0, r6
   1ba30:	f7ff f8b2 	bl	1ab98 <bt_att_create_pdu>
	if (!buf) {
   1ba34:	4607      	mov	r7, r0
   1ba36:	b978      	cbnz	r0, 1ba58 <gatt_indicate+0xa4>
		LOG_WRN("No buffer available to send indication");
   1ba38:	4b1d      	ldr	r3, [pc, #116]	; (1bab0 <gatt_indicate+0xfc>)
   1ba3a:	481a      	ldr	r0, [pc, #104]	; (1baa4 <gatt_indicate+0xf0>)
   1ba3c:	9305      	str	r3, [sp, #20]
   1ba3e:	aa04      	add	r2, sp, #16
   1ba40:	2302      	movs	r3, #2
   1ba42:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1ba46:	9304      	str	r3, [sp, #16]
   1ba48:	f008 f838 	bl	23abc <z_log_msg_static_create.constprop.0>
		bt_att_req_free(req);
   1ba4c:	4620      	mov	r0, r4
   1ba4e:	f7ff fb9b 	bl	1b188 <bt_att_req_free>
		return -ENOMEM;
   1ba52:	f06f 050b 	mvn.w	r5, #11
   1ba56:	e7c5      	b.n	1b9e4 <gatt_indicate+0x30>
	bt_att_set_tx_meta_data(buf, NULL, NULL, BT_ATT_CHAN_OPT(params));
   1ba58:	2301      	movs	r3, #1
   1ba5a:	4642      	mov	r2, r8
   1ba5c:	4641      	mov	r1, r8
	return net_buf_simple_add(&buf->b, len);
   1ba5e:	f107 0a0c 	add.w	sl, r7, #12
   1ba62:	f007 fedc 	bl	2381e <bt_att_set_tx_meta_data>
   1ba66:	2102      	movs	r1, #2
   1ba68:	4650      	mov	r0, sl
   1ba6a:	f008 fa47 	bl	23efc <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   1ba6e:	4680      	mov	r8, r0
   1ba70:	4650      	mov	r0, sl
   1ba72:	f828 9b02 	strh.w	r9, [r8], #2
   1ba76:	8aa9      	ldrh	r1, [r5, #20]
   1ba78:	f008 fa40 	bl	23efc <net_buf_simple_add>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1ba7c:	8aaa      	ldrh	r2, [r5, #20]
   1ba7e:	6929      	ldr	r1, [r5, #16]
   1ba80:	4640      	mov	r0, r8
   1ba82:	f009 fba0 	bl	251c6 <memcpy>
	req->buf = buf;
   1ba86:	60a7      	str	r7, [r4, #8]
	err = bt_att_req_send(conn, req);
   1ba88:	4621      	mov	r1, r4
   1ba8a:	4630      	mov	r0, r6
   1ba8c:	f007 fe8b 	bl	237a6 <bt_att_req_send>
	if (err) {
   1ba90:	4605      	mov	r5, r0
   1ba92:	2800      	cmp	r0, #0
   1ba94:	d0a6      	beq.n	1b9e4 <gatt_indicate+0x30>
		bt_att_req_free(req);
   1ba96:	4620      	mov	r0, r4
   1ba98:	f7ff fb76 	bl	1b188 <bt_att_req_free>
   1ba9c:	e7a2      	b.n	1b9e4 <gatt_indicate+0x30>
   1ba9e:	bf00      	nop
   1baa0:	00027618 	.word	0x00027618
   1baa4:	0002559c 	.word	0x0002559c
   1baa8:	0002762e 	.word	0x0002762e
   1baac:	00023847 	.word	0x00023847
   1bab0:	00027659 	.word	0x00027659

0001bab4 <bt_gatt_indicate>:
{
   1bab4:	b530      	push	{r4, r5, lr}
   1bab6:	4b39      	ldr	r3, [pc, #228]	; (1bb9c <bt_gatt_indicate+0xe8>)
   1bab8:	f3bf 8f5b 	dmb	ish
   1babc:	681b      	ldr	r3, [r3, #0]
   1babe:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1bac2:	075a      	lsls	r2, r3, #29
{
   1bac4:	b08b      	sub	sp, #44	; 0x2c
   1bac6:	4604      	mov	r4, r0
   1bac8:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1baca:	d561      	bpl.n	1bb90 <bt_gatt_indicate+0xdc>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   1bacc:	b110      	cbz	r0, 1bad4 <bt_gatt_indicate+0x20>
   1bace:	7a83      	ldrb	r3, [r0, #10]
   1bad0:	2b07      	cmp	r3, #7
   1bad2:	d160      	bne.n	1bb96 <bt_gatt_indicate+0xe2>
	data.attr = params->attr;
   1bad4:	6868      	ldr	r0, [r5, #4]
   1bad6:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   1bad8:	f7ff fe48 	bl	1b76c <bt_gatt_attr_get_handle>
	if (params->uuid) {
   1badc:	682a      	ldr	r2, [r5, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   1bade:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   1bae2:	b33a      	cbz	r2, 1bb34 <bt_gatt_indicate+0x80>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1bae4:	a905      	add	r1, sp, #20
   1bae6:	9102      	str	r1, [sp, #8]
   1bae8:	492d      	ldr	r1, [pc, #180]	; (1bba0 <bt_gatt_indicate+0xec>)
   1baea:	9101      	str	r1, [sp, #4]
   1baec:	2101      	movs	r1, #1
	found->attr = NULL;
   1baee:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1baf0:	9100      	str	r1, [sp, #0]
   1baf2:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   1baf6:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1baf8:	f7ff fe68 	bl	1b7cc <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   1bafc:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   1bafe:	b91b      	cbnz	r3, 1bb08 <bt_gatt_indicate+0x54>
			return -ENOENT;
   1bb00:	f06f 0001 	mvn.w	r0, #1
}
   1bb04:	b00b      	add	sp, #44	; 0x2c
   1bb06:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   1bb08:	606b      	str	r3, [r5, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   1bb0a:	9b05      	ldr	r3, [sp, #20]
   1bb0c:	6818      	ldr	r0, [r3, #0]
   1bb0e:	2300      	movs	r3, #0
   1bb10:	f88d 3010 	strb.w	r3, [sp, #16]
   1bb14:	a904      	add	r1, sp, #16
   1bb16:	f642 0303 	movw	r3, #10243	; 0x2803
   1bb1a:	f8ad 3012 	strh.w	r3, [sp, #18]
   1bb1e:	f006 fe4c 	bl	227ba <bt_uuid_cmp>
   1bb22:	b970      	cbnz	r0, 1bb42 <bt_gatt_indicate+0x8e>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   1bb24:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   1bb26:	68c3      	ldr	r3, [r0, #12]
   1bb28:	799b      	ldrb	r3, [r3, #6]
   1bb2a:	069b      	lsls	r3, r3, #26
   1bb2c:	d405      	bmi.n	1bb3a <bt_gatt_indicate+0x86>
			return -EINVAL;
   1bb2e:	f06f 0015 	mvn.w	r0, #21
   1bb32:	e7e7      	b.n	1bb04 <bt_gatt_indicate+0x50>
		if (!data.handle) {
   1bb34:	2800      	cmp	r0, #0
   1bb36:	d1e8      	bne.n	1bb0a <bt_gatt_indicate+0x56>
   1bb38:	e7e2      	b.n	1bb00 <bt_gatt_indicate+0x4c>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   1bb3a:	f008 f80b 	bl	23b54 <bt_gatt_attr_value_handle>
   1bb3e:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_indicate(conn, data.handle, params);
   1bb42:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   1bb46:	b13c      	cbz	r4, 1bb58 <bt_gatt_indicate+0xa4>
		params->_ref = 1;
   1bb48:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
   1bb4a:	4601      	mov	r1, r0
		params->_ref = 1;
   1bb4c:	75ab      	strb	r3, [r5, #22]
		return gatt_indicate(conn, data.handle, params);
   1bb4e:	462a      	mov	r2, r5
   1bb50:	4620      	mov	r0, r4
   1bb52:	f7ff ff2f 	bl	1b9b4 <gatt_indicate>
   1bb56:	e7d5      	b.n	1bb04 <bt_gatt_indicate+0x50>
	data.err = -ENOTCONN;
   1bb58:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   1bb5c:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   1bb5e:	2302      	movs	r3, #2
   1bb60:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1bb64:	f642 1302 	movw	r3, #10498	; 0x2902
   1bb68:	f8ad 3012 	strh.w	r3, [sp, #18]
   1bb6c:	ab05      	add	r3, sp, #20
	params->_ref = 0;
   1bb6e:	75ac      	strb	r4, [r5, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1bb70:	9302      	str	r3, [sp, #8]
   1bb72:	4b0c      	ldr	r3, [pc, #48]	; (1bba4 <bt_gatt_indicate+0xf0>)
   1bb74:	9301      	str	r3, [sp, #4]
   1bb76:	2301      	movs	r3, #1
   1bb78:	9300      	str	r3, [sp, #0]
   1bb7a:	aa04      	add	r2, sp, #16
   1bb7c:	4623      	mov	r3, r4
   1bb7e:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.ind_params = params;
   1bb82:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1bb84:	f88d 4010 	strb.w	r4, [sp, #16]
   1bb88:	f7ff fe20 	bl	1b7cc <bt_gatt_foreach_attr_type>
	return data.err;
   1bb8c:	9807      	ldr	r0, [sp, #28]
   1bb8e:	e7b9      	b.n	1bb04 <bt_gatt_indicate+0x50>
		return -EAGAIN;
   1bb90:	f06f 000a 	mvn.w	r0, #10
   1bb94:	e7b6      	b.n	1bb04 <bt_gatt_indicate+0x50>
		return -ENOTCONN;
   1bb96:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1bb9a:	e7b3      	b.n	1bb04 <bt_gatt_indicate+0x50>
   1bb9c:	20000454 	.word	0x20000454
   1bba0:	0002386d 	.word	0x0002386d
   1bba4:	0001bebd 	.word	0x0001bebd

0001bba8 <sc_process>:
{
   1bba8:	b513      	push	{r0, r1, r4, lr}
	sc_range[0] = sys_cpu_to_le16(sc->start);
   1bbaa:	f850 2c08 	ldr.w	r2, [r0, #-8]
   1bbae:	9201      	str	r2, [sp, #4]
{
   1bbb0:	4603      	mov	r3, r0
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
   1bbb2:	f1a0 0120 	sub.w	r1, r0, #32
   1bbb6:	f100 0430 	add.w	r4, r0, #48	; 0x30
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1bbba:	f3bf 8f5b 	dmb	ish
   1bbbe:	e854 2f00 	ldrex	r2, [r4]
   1bbc2:	f022 0201 	bic.w	r2, r2, #1
   1bbc6:	e844 2000 	strex	r0, r2, [r4]
   1bbca:	2800      	cmp	r0, #0
   1bbcc:	d1f7      	bne.n	1bbbe <sc_process+0x16>
   1bbce:	f3bf 8f5b 	dmb	ish
	sc->params.attr = &_1_gatt_svc.attrs[2];
   1bbd2:	4a0d      	ldr	r2, [pc, #52]	; (1bc08 <sc_process+0x60>)
   1bbd4:	f843 2c1c 	str.w	r2, [r3, #-28]
	sc->params.func = sc_indicate_rsp;
   1bbd8:	4a0c      	ldr	r2, [pc, #48]	; (1bc0c <sc_process+0x64>)
   1bbda:	f843 2c18 	str.w	r2, [r3, #-24]
	sc->params.data = &sc_range[0];
   1bbde:	aa01      	add	r2, sp, #4
	sc->start = 0U;
   1bbe0:	2000      	movs	r0, #0
	sc->params.data = &sc_range[0];
   1bbe2:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.len = sizeof(sc_range);
   1bbe6:	2204      	movs	r2, #4
	sc->start = 0U;
   1bbe8:	f823 0c08 	strh.w	r0, [r3, #-8]
	sc->end = 0U;
   1bbec:	f823 0c06 	strh.w	r0, [r3, #-6]
	sc->params.len = sizeof(sc_range);
   1bbf0:	f823 2c0c 	strh.w	r2, [r3, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   1bbf4:	f7ff ff5e 	bl	1bab4 <bt_gatt_indicate>
   1bbf8:	b918      	cbnz	r0, 1bc02 <sc_process+0x5a>
	atomic_set_bit(sc->flags, SC_INDICATE_PENDING);
   1bbfa:	2101      	movs	r1, #1
   1bbfc:	4620      	mov	r0, r4
   1bbfe:	f007 ff81 	bl	23b04 <atomic_set_bit>
}
   1bc02:	b002      	add	sp, #8
   1bc04:	bd10      	pop	{r4, pc}
   1bc06:	bf00      	nop
   1bc08:	000259d8 	.word	0x000259d8
   1bc0c:	0001b661 	.word	0x0001b661

0001bc10 <update_ccc>:
{
   1bc10:	b5f0      	push	{r4, r5, r6, r7, lr}
   1bc12:	b089      	sub	sp, #36	; 0x24
	struct bt_conn *conn = data->conn;
   1bc14:	6815      	ldr	r5, [r2, #0]
	if (attr->write != bt_gatt_attr_write_ccc) {
   1bc16:	4b31      	ldr	r3, [pc, #196]	; (1bcdc <update_ccc+0xcc>)
   1bc18:	6882      	ldr	r2, [r0, #8]
   1bc1a:	429a      	cmp	r2, r3
{
   1bc1c:	af00      	add	r7, sp, #0
   1bc1e:	4604      	mov	r4, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   1bc20:	d11e      	bne.n	1bc60 <update_ccc+0x50>
	ccc = attr->user_data;
   1bc22:	68c6      	ldr	r6, [r0, #12]
		if (!cfg->value ||
   1bc24:	8933      	ldrh	r3, [r6, #8]
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1bc26:	1c72      	adds	r2, r6, #1
		if (!cfg->value ||
   1bc28:	b1d3      	cbz	r3, 1bc60 <update_ccc+0x50>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1bc2a:	7831      	ldrb	r1, [r6, #0]
   1bc2c:	4628      	mov	r0, r5
   1bc2e:	f007 f8cb 	bl	22dc8 <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   1bc32:	b1a8      	cbz	r0, 1bc60 <update_ccc+0x50>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   1bc34:	f44f 7295 	mov.w	r2, #298	; 0x12a
   1bc38:	4621      	mov	r1, r4
   1bc3a:	4628      	mov	r0, r5
   1bc3c:	f007 ffde 	bl	23bfc <bt_gatt_check_perm>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   1bc40:	2803      	cmp	r0, #3
   1bc42:	d111      	bne.n	1bc68 <update_ccc+0x58>
				LOG_WRN("CCC %p not writable", attr);
   1bc44:	466d      	mov	r5, sp
   1bc46:	b088      	sub	sp, #32
   1bc48:	466a      	mov	r2, sp
   1bc4a:	4b25      	ldr	r3, [pc, #148]	; (1bce0 <update_ccc+0xd0>)
   1bc4c:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1bc50:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1bc54:	f842 0f10 	str.w	r0, [r2, #16]!
   1bc58:	4822      	ldr	r0, [pc, #136]	; (1bce4 <update_ccc+0xd4>)
   1bc5a:	f007 ff2f 	bl	23abc <z_log_msg_static_create.constprop.0>
   1bc5e:	46ad      	mov	sp, r5
}
   1bc60:	2001      	movs	r0, #1
   1bc62:	3724      	adds	r7, #36	; 0x24
   1bc64:	46bd      	mov	sp, r7
   1bc66:	bdf0      	pop	{r4, r5, r6, r7, pc}
		gatt_ccc_changed(attr, ccc);
   1bc68:	4631      	mov	r1, r6
   1bc6a:	4620      	mov	r0, r4
   1bc6c:	f007 fde1 	bl	23832 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   1bc70:	4b1d      	ldr	r3, [pc, #116]	; (1bce8 <update_ccc+0xd8>)
   1bc72:	429e      	cmp	r6, r3
   1bc74:	d1f4      	bne.n	1bc60 <update_ccc+0x50>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   1bc76:	7a28      	ldrb	r0, [r5, #8]
   1bc78:	f105 0188 	add.w	r1, r5, #136	; 0x88
   1bc7c:	f7ff fb78 	bl	1b370 <find_sc_cfg>
	if (!cfg) {
   1bc80:	2800      	cmp	r0, #0
   1bc82:	d0ed      	beq.n	1bc60 <update_ccc+0x50>
	if (!(cfg->data.start || cfg->data.end)) {
   1bc84:	8902      	ldrh	r2, [r0, #8]
   1bc86:	8943      	ldrh	r3, [r0, #10]
   1bc88:	ea52 0103 	orrs.w	r1, r2, r3
   1bc8c:	d0e8      	beq.n	1bc60 <update_ccc+0x50>
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   1bc8e:	80ba      	strh	r2, [r7, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   1bc90:	80fb      	strh	r3, [r7, #6]
	index = bt_conn_index(conn);
   1bc92:	4628      	mov	r0, r5
   1bc94:	f7fd fed2 	bl	19a3c <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   1bc98:	4914      	ldr	r1, [pc, #80]	; (1bcec <update_ccc+0xdc>)
   1bc9a:	4a15      	ldr	r2, [pc, #84]	; (1bcf0 <update_ccc+0xe0>)
   1bc9c:	2318      	movs	r3, #24
   1bc9e:	fb03 1300 	mla	r3, r3, r0, r1
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1bca2:	b200      	sxth	r0, r0
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   1bca4:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   1bca6:	4a13      	ldr	r2, [pc, #76]	; (1bcf4 <update_ccc+0xe4>)
   1bca8:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
   1bcaa:	1d3a      	adds	r2, r7, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1bcac:	eb00 0040 	add.w	r0, r0, r0, lsl #1
	sc_restore_params[index].data = &sc_range[0];
   1bcb0:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
   1bcb2:	2204      	movs	r2, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1bcb4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
	sc_restore_params[index].len = sizeof(sc_range);
   1bcb8:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1bcba:	4628      	mov	r0, r5
   1bcbc:	f7ff fefa 	bl	1bab4 <bt_gatt_indicate>
   1bcc0:	2800      	cmp	r0, #0
   1bcc2:	d0cd      	beq.n	1bc60 <update_ccc+0x50>
		LOG_ERR("SC restore indication failed");
   1bcc4:	4b0c      	ldr	r3, [pc, #48]	; (1bcf8 <update_ccc+0xe8>)
   1bcc6:	61fb      	str	r3, [r7, #28]
   1bcc8:	2302      	movs	r3, #2
   1bcca:	4806      	ldr	r0, [pc, #24]	; (1bce4 <update_ccc+0xd4>)
   1bccc:	61bb      	str	r3, [r7, #24]
   1bcce:	f107 0218 	add.w	r2, r7, #24
   1bcd2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1bcd6:	f007 fef1 	bl	23abc <z_log_msg_static_create.constprop.0>
   1bcda:	e7c1      	b.n	1bc60 <update_ccc+0x50>
   1bcdc:	0001b3b9 	.word	0x0001b3b9
   1bce0:	00027680 	.word	0x00027680
   1bce4:	0002559c 	.word	0x0002559c
   1bce8:	200005d4 	.word	0x200005d4
   1bcec:	20005050 	.word	0x20005050
   1bcf0:	000259d8 	.word	0x000259d8
   1bcf4:	00023b21 	.word	0x00023b21
   1bcf8:	00027694 	.word	0x00027694

0001bcfc <gatt_notify>:
{
   1bcfc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1bd00:	4614      	mov	r4, r2
   1bd02:	b087      	sub	sp, #28
   1bd04:	4688      	mov	r8, r1
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1bd06:	2294      	movs	r2, #148	; 0x94
   1bd08:	6861      	ldr	r1, [r4, #4]
{
   1bd0a:	4606      	mov	r6, r0
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1bd0c:	f007 ff76 	bl	23bfc <bt_gatt_check_perm>
   1bd10:	b170      	cbz	r0, 1bd30 <gatt_notify+0x34>
		LOG_WRN("Link is not encrypted");
   1bd12:	4b2b      	ldr	r3, [pc, #172]	; (1bdc0 <gatt_notify+0xc4>)
   1bd14:	482b      	ldr	r0, [pc, #172]	; (1bdc4 <gatt_notify+0xc8>)
   1bd16:	9305      	str	r3, [sp, #20]
   1bd18:	aa04      	add	r2, sp, #16
   1bd1a:	2302      	movs	r3, #2
   1bd1c:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1bd20:	9304      	str	r3, [sp, #16]
   1bd22:	f007 fecb 	bl	23abc <z_log_msg_static_create.constprop.0>
		return -EPERM;
   1bd26:	f04f 30ff 	mov.w	r0, #4294967295
}
   1bd2a:	b007      	add	sp, #28
   1bd2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_NOTIFY)) {
   1bd30:	6861      	ldr	r1, [r4, #4]
   1bd32:	2201      	movs	r2, #1
   1bd34:	4630      	mov	r0, r6
   1bd36:	f007 ff8a 	bl	23c4e <bt_gatt_is_subscribed>
   1bd3a:	b960      	cbnz	r0, 1bd56 <gatt_notify+0x5a>
			LOG_WRN("Device is not subscribed to characteristic");
   1bd3c:	4b22      	ldr	r3, [pc, #136]	; (1bdc8 <gatt_notify+0xcc>)
   1bd3e:	4821      	ldr	r0, [pc, #132]	; (1bdc4 <gatt_notify+0xc8>)
   1bd40:	9305      	str	r3, [sp, #20]
   1bd42:	aa04      	add	r2, sp, #16
   1bd44:	2302      	movs	r3, #2
   1bd46:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1bd4a:	9304      	str	r3, [sp, #16]
   1bd4c:	f007 feb6 	bl	23abc <z_log_msg_static_create.constprop.0>
			return -EINVAL;
   1bd50:	f06f 0015 	mvn.w	r0, #21
   1bd54:	e7e9      	b.n	1bd2a <gatt_notify+0x2e>
				sizeof(*nfy) + params->len);
   1bd56:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   1bd58:	211b      	movs	r1, #27
   1bd5a:	3202      	adds	r2, #2
   1bd5c:	4630      	mov	r0, r6
   1bd5e:	f7fe ff1b 	bl	1ab98 <bt_att_create_pdu>
	if (!buf) {
   1bd62:	4605      	mov	r5, r0
   1bd64:	b960      	cbnz	r0, 1bd80 <gatt_notify+0x84>
		LOG_WRN("No buffer available to send notification");
   1bd66:	4b19      	ldr	r3, [pc, #100]	; (1bdcc <gatt_notify+0xd0>)
   1bd68:	4816      	ldr	r0, [pc, #88]	; (1bdc4 <gatt_notify+0xc8>)
   1bd6a:	9305      	str	r3, [sp, #20]
   1bd6c:	aa04      	add	r2, sp, #16
   1bd6e:	2302      	movs	r3, #2
   1bd70:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1bd74:	9304      	str	r3, [sp, #16]
   1bd76:	f007 fea1 	bl	23abc <z_log_msg_static_create.constprop.0>
		return -ENOMEM;
   1bd7a:	f06f 000b 	mvn.w	r0, #11
   1bd7e:	e7d4      	b.n	1bd2a <gatt_notify+0x2e>
   1bd80:	f100 090c 	add.w	r9, r0, #12
   1bd84:	2102      	movs	r1, #2
   1bd86:	4648      	mov	r0, r9
   1bd88:	f008 f8b8 	bl	23efc <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   1bd8c:	4607      	mov	r7, r0
   1bd8e:	4648      	mov	r0, r9
   1bd90:	f827 8b02 	strh.w	r8, [r7], #2
   1bd94:	89a1      	ldrh	r1, [r4, #12]
   1bd96:	f008 f8b1 	bl	23efc <net_buf_simple_add>
   1bd9a:	89a2      	ldrh	r2, [r4, #12]
   1bd9c:	68a1      	ldr	r1, [r4, #8]
   1bd9e:	4638      	mov	r0, r7
   1bda0:	f009 fa11 	bl	251c6 <memcpy>
	bt_att_set_tx_meta_data(buf, params->func, params->user_data, BT_ATT_CHAN_OPT(params));
   1bda4:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   1bda8:	4628      	mov	r0, r5
   1bdaa:	2301      	movs	r3, #1
   1bdac:	f007 fd37 	bl	2381e <bt_att_set_tx_meta_data>
	return bt_att_send(conn, buf);
   1bdb0:	4629      	mov	r1, r5
   1bdb2:	4630      	mov	r0, r6
}
   1bdb4:	b007      	add	sp, #28
   1bdb6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return bt_att_send(conn, buf);
   1bdba:	f007 bcb6 	b.w	2372a <bt_att_send>
   1bdbe:	bf00      	nop
   1bdc0:	00027618 	.word	0x00027618
   1bdc4:	0002559c 	.word	0x0002559c
   1bdc8:	0002762e 	.word	0x0002762e
   1bdcc:	000276b1 	.word	0x000276b1

0001bdd0 <bt_gatt_notify_cb>:
{
   1bdd0:	b530      	push	{r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1bdd2:	4b37      	ldr	r3, [pc, #220]	; (1beb0 <bt_gatt_notify_cb+0xe0>)
   1bdd4:	f3bf 8f5b 	dmb	ish
   1bdd8:	681b      	ldr	r3, [r3, #0]
   1bdda:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1bdde:	075a      	lsls	r2, r3, #29
{
   1bde0:	b08b      	sub	sp, #44	; 0x2c
   1bde2:	4604      	mov	r4, r0
   1bde4:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1bde6:	d55d      	bpl.n	1bea4 <bt_gatt_notify_cb+0xd4>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   1bde8:	b110      	cbz	r0, 1bdf0 <bt_gatt_notify_cb+0x20>
   1bdea:	7a83      	ldrb	r3, [r0, #10]
   1bdec:	2b07      	cmp	r3, #7
   1bdee:	d15c      	bne.n	1beaa <bt_gatt_notify_cb+0xda>
	data.attr = params->attr;
   1bdf0:	6868      	ldr	r0, [r5, #4]
   1bdf2:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   1bdf4:	f7ff fcba 	bl	1b76c <bt_gatt_attr_get_handle>
	if (params->uuid) {
   1bdf8:	682a      	ldr	r2, [r5, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   1bdfa:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   1bdfe:	b33a      	cbz	r2, 1be50 <bt_gatt_notify_cb+0x80>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1be00:	a905      	add	r1, sp, #20
   1be02:	9102      	str	r1, [sp, #8]
   1be04:	492b      	ldr	r1, [pc, #172]	; (1beb4 <bt_gatt_notify_cb+0xe4>)
   1be06:	9101      	str	r1, [sp, #4]
   1be08:	2101      	movs	r1, #1
	found->attr = NULL;
   1be0a:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1be0c:	9100      	str	r1, [sp, #0]
   1be0e:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   1be12:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1be14:	f7ff fcda 	bl	1b7cc <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   1be18:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   1be1a:	b91b      	cbnz	r3, 1be24 <bt_gatt_notify_cb+0x54>
			return -ENOENT;
   1be1c:	f06f 0001 	mvn.w	r0, #1
}
   1be20:	b00b      	add	sp, #44	; 0x2c
   1be22:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   1be24:	606b      	str	r3, [r5, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   1be26:	9b05      	ldr	r3, [sp, #20]
   1be28:	6818      	ldr	r0, [r3, #0]
   1be2a:	2300      	movs	r3, #0
   1be2c:	f88d 3010 	strb.w	r3, [sp, #16]
   1be30:	a904      	add	r1, sp, #16
   1be32:	f642 0303 	movw	r3, #10243	; 0x2803
   1be36:	f8ad 3012 	strh.w	r3, [sp, #18]
   1be3a:	f006 fcbe 	bl	227ba <bt_uuid_cmp>
   1be3e:	b970      	cbnz	r0, 1be5e <bt_gatt_notify_cb+0x8e>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   1be40:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_NOTIFY)) {
   1be42:	68c3      	ldr	r3, [r0, #12]
   1be44:	799b      	ldrb	r3, [r3, #6]
   1be46:	06db      	lsls	r3, r3, #27
   1be48:	d405      	bmi.n	1be56 <bt_gatt_notify_cb+0x86>
			return -EINVAL;
   1be4a:	f06f 0015 	mvn.w	r0, #21
   1be4e:	e7e7      	b.n	1be20 <bt_gatt_notify_cb+0x50>
		if (!data.handle) {
   1be50:	2800      	cmp	r0, #0
   1be52:	d1e8      	bne.n	1be26 <bt_gatt_notify_cb+0x56>
   1be54:	e7e2      	b.n	1be1c <bt_gatt_notify_cb+0x4c>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   1be56:	f007 fe7d 	bl	23b54 <bt_gatt_attr_value_handle>
   1be5a:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_notify(conn, data.handle, params);
   1be5e:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   1be62:	b12c      	cbz	r4, 1be70 <bt_gatt_notify_cb+0xa0>
		return gatt_notify(conn, data.handle, params);
   1be64:	4601      	mov	r1, r0
   1be66:	462a      	mov	r2, r5
   1be68:	4620      	mov	r0, r4
   1be6a:	f7ff ff47 	bl	1bcfc <gatt_notify>
   1be6e:	e7d7      	b.n	1be20 <bt_gatt_notify_cb+0x50>
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1be70:	f642 1202 	movw	r2, #10498	; 0x2902
   1be74:	f8ad 2012 	strh.w	r2, [sp, #18]
   1be78:	aa05      	add	r2, sp, #20
	data.err = -ENOTCONN;
   1be7a:	f06f 037f 	mvn.w	r3, #127	; 0x7f
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1be7e:	9202      	str	r2, [sp, #8]
   1be80:	4a0d      	ldr	r2, [pc, #52]	; (1beb8 <bt_gatt_notify_cb+0xe8>)
	data.err = -ENOTCONN;
   1be82:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_NOTIFY;
   1be84:	2301      	movs	r3, #1
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1be86:	e9cd 3200 	strd	r3, r2, [sp]
	data.type = BT_GATT_CCC_NOTIFY;
   1be8a:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1be8e:	aa04      	add	r2, sp, #16
   1be90:	4623      	mov	r3, r4
   1be92:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.nfy_params = params;
   1be96:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1be98:	f88d 4010 	strb.w	r4, [sp, #16]
   1be9c:	f7ff fc96 	bl	1b7cc <bt_gatt_foreach_attr_type>
	return data.err;
   1bea0:	9807      	ldr	r0, [sp, #28]
   1bea2:	e7bd      	b.n	1be20 <bt_gatt_notify_cb+0x50>
		return -EAGAIN;
   1bea4:	f06f 000a 	mvn.w	r0, #10
   1bea8:	e7ba      	b.n	1be20 <bt_gatt_notify_cb+0x50>
		return -ENOTCONN;
   1beaa:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1beae:	e7b7      	b.n	1be20 <bt_gatt_notify_cb+0x50>
   1beb0:	20000454 	.word	0x20000454
   1beb4:	0002386d 	.word	0x0002386d
   1beb8:	0001bebd 	.word	0x0001bebd

0001bebc <notify_cb>:
{
   1bebc:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   1bebe:	4b3f      	ldr	r3, [pc, #252]	; (1bfbc <notify_cb+0x100>)
{
   1bec0:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1bec2:	6882      	ldr	r2, [r0, #8]
   1bec4:	429a      	cmp	r2, r3
{
   1bec6:	b087      	sub	sp, #28
   1bec8:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   1beca:	d003      	beq.n	1bed4 <notify_cb+0x18>
		return BT_GATT_ITER_CONTINUE;
   1becc:	2701      	movs	r7, #1
}
   1bece:	4638      	mov	r0, r7
   1bed0:	b007      	add	sp, #28
   1bed2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ccc = attr->user_data;
   1bed4:	68c6      	ldr	r6, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   1bed6:	4b3a      	ldr	r3, [pc, #232]	; (1bfc0 <notify_cb+0x104>)
   1bed8:	429e      	cmp	r6, r3
   1beda:	d056      	beq.n	1bf8a <notify_cb+0xce>
		if (cfg->value != data->type) {
   1bedc:	8932      	ldrh	r2, [r6, #8]
   1bede:	89ab      	ldrh	r3, [r5, #12]
   1bee0:	429a      	cmp	r2, r3
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   1bee2:	f106 0101 	add.w	r1, r6, #1
		if (cfg->value != data->type) {
   1bee6:	d1f1      	bne.n	1becc <notify_cb+0x10>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   1bee8:	7830      	ldrb	r0, [r6, #0]
   1beea:	f7fd fe6b 	bl	19bc4 <bt_conn_lookup_addr_le>
		if (!conn) {
   1beee:	4604      	mov	r4, r0
   1bef0:	2800      	cmp	r0, #0
   1bef2:	d0eb      	beq.n	1becc <notify_cb+0x10>
		if (conn->state != BT_CONN_CONNECTED) {
   1bef4:	7a83      	ldrb	r3, [r0, #10]
   1bef6:	2b07      	cmp	r3, #7
   1bef8:	d005      	beq.n	1bf06 <notify_cb+0x4a>
			bt_conn_unref(conn);
   1befa:	f006 ff1c 	bl	22d36 <bt_conn_unref>
			continue;
   1befe:	e7e5      	b.n	1becc <notify_cb+0x10>
			bt_conn_unref(conn);
   1bf00:	f006 ff19 	bl	22d36 <bt_conn_unref>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1bf04:	e7ea      	b.n	1bedc <notify_cb+0x20>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   1bf06:	6973      	ldr	r3, [r6, #20]
   1bf08:	b123      	cbz	r3, 1bf14 <notify_cb+0x58>
   1bf0a:	4639      	mov	r1, r7
   1bf0c:	4798      	blx	r3
   1bf0e:	b908      	cbnz	r0, 1bf14 <notify_cb+0x58>
			bt_conn_unref(conn);
   1bf10:	4620      	mov	r0, r4
   1bf12:	e7f2      	b.n	1befa <notify_cb+0x3e>
		if (bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1bf14:	4639      	mov	r1, r7
   1bf16:	2294      	movs	r2, #148	; 0x94
   1bf18:	4620      	mov	r0, r4
   1bf1a:	f007 fe6f 	bl	23bfc <bt_gatt_check_perm>
   1bf1e:	4607      	mov	r7, r0
   1bf20:	b150      	cbz	r0, 1bf38 <notify_cb+0x7c>
			LOG_WRN("Link is not encrypted");
   1bf22:	4b28      	ldr	r3, [pc, #160]	; (1bfc4 <notify_cb+0x108>)
   1bf24:	9305      	str	r3, [sp, #20]
   1bf26:	4828      	ldr	r0, [pc, #160]	; (1bfc8 <notify_cb+0x10c>)
   1bf28:	2302      	movs	r3, #2
   1bf2a:	aa04      	add	r2, sp, #16
   1bf2c:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1bf30:	9304      	str	r3, [sp, #16]
   1bf32:	f007 fdc3 	bl	23abc <z_log_msg_static_create.constprop.0>
   1bf36:	e7eb      	b.n	1bf10 <notify_cb+0x54>
		if ((data->type == BT_GATT_CCC_INDICATE) &&
   1bf38:	89ab      	ldrh	r3, [r5, #12]
   1bf3a:	2b02      	cmp	r3, #2
   1bf3c:	d114      	bne.n	1bf68 <notify_cb+0xac>
   1bf3e:	8933      	ldrh	r3, [r6, #8]
   1bf40:	079a      	lsls	r2, r3, #30
   1bf42:	d405      	bmi.n	1bf50 <notify_cb+0x94>
		bt_conn_unref(conn);
   1bf44:	4620      	mov	r0, r4
   1bf46:	f006 fef6 	bl	22d36 <bt_conn_unref>
		data->err = 0;
   1bf4a:	2300      	movs	r3, #0
   1bf4c:	60ab      	str	r3, [r5, #8]
   1bf4e:	e7bd      	b.n	1becc <notify_cb+0x10>
			err = gatt_indicate(conn, data->handle, data->ind_params);
   1bf50:	692a      	ldr	r2, [r5, #16]
   1bf52:	88a9      	ldrh	r1, [r5, #4]
   1bf54:	4620      	mov	r0, r4
   1bf56:	f7ff fd2d 	bl	1b9b4 <gatt_indicate>
			if (err == 0) {
   1bf5a:	4606      	mov	r6, r0
   1bf5c:	b978      	cbnz	r0, 1bf7e <notify_cb+0xc2>
				data->ind_params->_ref++;
   1bf5e:	692a      	ldr	r2, [r5, #16]
   1bf60:	7d93      	ldrb	r3, [r2, #22]
   1bf62:	3301      	adds	r3, #1
   1bf64:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
   1bf66:	e7ed      	b.n	1bf44 <notify_cb+0x88>
		} else if ((data->type == BT_GATT_CCC_NOTIFY) &&
   1bf68:	2b01      	cmp	r3, #1
   1bf6a:	d1eb      	bne.n	1bf44 <notify_cb+0x88>
   1bf6c:	8933      	ldrh	r3, [r6, #8]
   1bf6e:	07db      	lsls	r3, r3, #31
   1bf70:	d5e8      	bpl.n	1bf44 <notify_cb+0x88>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   1bf72:	692a      	ldr	r2, [r5, #16]
   1bf74:	88a9      	ldrh	r1, [r5, #4]
   1bf76:	4620      	mov	r0, r4
   1bf78:	f7ff fec0 	bl	1bcfc <gatt_notify>
   1bf7c:	4606      	mov	r6, r0
		bt_conn_unref(conn);
   1bf7e:	4620      	mov	r0, r4
   1bf80:	f006 fed9 	bl	22d36 <bt_conn_unref>
		if (err < 0) {
   1bf84:	2e00      	cmp	r6, #0
   1bf86:	dba2      	blt.n	1bece <notify_cb+0x12>
   1bf88:	e7df      	b.n	1bf4a <notify_cb+0x8e>
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   1bf8a:	4c10      	ldr	r4, [pc, #64]	; (1bfcc <notify_cb+0x110>)
   1bf8c:	4910      	ldr	r1, [pc, #64]	; (1bfd0 <notify_cb+0x114>)
   1bf8e:	4620      	mov	r0, r4
   1bf90:	f007 fcc3 	bl	2391a <bt_addr_le_eq>
   1bf94:	2800      	cmp	r0, #0
   1bf96:	d1a1      	bne.n	1bedc <notify_cb+0x20>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   1bf98:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   1bf9c:	2207      	movs	r2, #7
   1bf9e:	4621      	mov	r1, r4
   1bfa0:	f7fd fe5a 	bl	19c58 <bt_conn_lookup_state_le>
			if (!conn) {
   1bfa4:	2800      	cmp	r0, #0
   1bfa6:	d1ab      	bne.n	1bf00 <notify_cb+0x44>
				sc = (struct sc_data *)data->ind_params->data;
   1bfa8:	692b      	ldr	r3, [r5, #16]
				sc_save(cfg->id, &cfg->peer,
   1bfaa:	f814 0c01 	ldrb.w	r0, [r4, #-1]
				sc = (struct sc_data *)data->ind_params->data;
   1bfae:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   1bfb0:	4621      	mov	r1, r4
   1bfb2:	8853      	ldrh	r3, [r2, #2]
   1bfb4:	8812      	ldrh	r2, [r2, #0]
   1bfb6:	f7ff fa79 	bl	1b4ac <sc_save>
				continue;
   1bfba:	e78f      	b.n	1bedc <notify_cb+0x20>
   1bfbc:	0001b3b9 	.word	0x0001b3b9
   1bfc0:	200005d4 	.word	0x200005d4
   1bfc4:	00027618 	.word	0x00027618
   1bfc8:	0002559c 	.word	0x0002559c
   1bfcc:	20005361 	.word	0x20005361
   1bfd0:	0002682b 	.word	0x0002682b

0001bfd4 <bt_gatt_connected>:
	}
	return 0;
}

void bt_gatt_connected(struct bt_conn *conn)
{
   1bfd4:	b507      	push	{r0, r1, r2, lr}
		}

		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
	}

	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1bfd6:	4a06      	ldr	r2, [pc, #24]	; (1bff0 <bt_gatt_connected+0x1c>)
	data.conn = conn;
   1bfd8:	9000      	str	r0, [sp, #0]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1bfda:	466b      	mov	r3, sp
	data.sec = BT_SECURITY_L1;
   1bfdc:	2001      	movs	r0, #1
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1bfde:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.sec = BT_SECURITY_L1;
   1bfe2:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1bfe6:	f007 fdfc 	bl	23be2 <bt_gatt_foreach_attr>
	if (err) {
		LOG_WRN("MTU Exchange failed (err %d)", err);
	}
#endif /* CONFIG_BT_GATT_AUTO_UPDATE_MTU */
#endif /* CONFIG_BT_GATT_CLIENT */
}
   1bfea:	b003      	add	sp, #12
   1bfec:	f85d fb04 	ldr.w	pc, [sp], #4
   1bff0:	0001bc11 	.word	0x0001bc11

0001bff4 <bt_gatt_att_max_mtu_changed>:

void bt_gatt_att_max_mtu_changed(struct bt_conn *conn, uint16_t tx, uint16_t rx)
{
   1bff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return list->head;
   1bff6:	4b08      	ldr	r3, [pc, #32]	; (1c018 <bt_gatt_att_max_mtu_changed+0x24>)
   1bff8:	681c      	ldr	r4, [r3, #0]
   1bffa:	4605      	mov	r5, r0
   1bffc:	460e      	mov	r6, r1
   1bffe:	4617      	mov	r7, r2
	struct bt_gatt_cb *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   1c000:	b14c      	cbz	r4, 1c016 <bt_gatt_att_max_mtu_changed+0x22>
		if (cb->att_mtu_updated) {
   1c002:	f854 3c04 	ldr.w	r3, [r4, #-4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   1c006:	3c04      	subs	r4, #4
		if (cb->att_mtu_updated) {
   1c008:	b11b      	cbz	r3, 1c012 <bt_gatt_att_max_mtu_changed+0x1e>
			cb->att_mtu_updated(conn, tx, rx);
   1c00a:	463a      	mov	r2, r7
   1c00c:	4631      	mov	r1, r6
   1c00e:	4628      	mov	r0, r5
   1c010:	4798      	blx	r3
	return node->next;
   1c012:	6864      	ldr	r4, [r4, #4]
   1c014:	e7f4      	b.n	1c000 <bt_gatt_att_max_mtu_changed+0xc>
		}
	}
}
   1c016:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1c018:	20005080 	.word	0x20005080

0001c01c <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
   1c01c:	b570      	push	{r4, r5, r6, lr}
	LOG_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   1c01e:	4603      	mov	r3, r0
   1c020:	4a0f      	ldr	r2, [pc, #60]	; (1c060 <bt_gatt_disconnected+0x44>)
{
   1c022:	4604      	mov	r4, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   1c024:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1c028:	2001      	movs	r0, #1
   1c02a:	f007 fdda 	bl	23be2 <bt_gatt_foreach_attr>
	cfg = find_cf_cfg(conn);
   1c02e:	4620      	mov	r0, r4
   1c030:	f7ff f986 	bl	1b340 <find_cf_cfg>
	if (!cfg) {
   1c034:	4605      	mov	r5, r0
   1c036:	b188      	cbz	r0, 1c05c <bt_gatt_disconnected+0x40>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1c038:	f104 0688 	add.w	r6, r4, #136	; 0x88
   1c03c:	7a20      	ldrb	r0, [r4, #8]
   1c03e:	4631      	mov	r1, r6
   1c040:	f006 fcf7 	bl	22a32 <bt_addr_le_is_bonded>
   1c044:	b920      	cbnz	r0, 1c050 <bt_gatt_disconnected+0x34>
		clear_cf_cfg(cfg);
   1c046:	4628      	mov	r0, r5
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
   1c048:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		clear_cf_cfg(cfg);
   1c04c:	f7ff ba18 	b.w	1b480 <clear_cf_cfg>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1c050:	4631      	mov	r1, r6
   1c052:	1c68      	adds	r0, r5, #1
}
   1c054:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1c058:	f007 bc89 	b.w	2396e <bt_addr_le_copy>
}
   1c05c:	bd70      	pop	{r4, r5, r6, pc}
   1c05e:	bf00      	nop
   1c060:	0001b5c1 	.word	0x0001b5c1

0001c064 <bt_smp_accept.part.0>:
	}

	return 0;
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
   1c064:	b580      	push	{r7, lr}
   1c066:	af00      	add	r7, sp, #0
		*chan = &smp->chan;

		return 0;
	}

	LOG_ERR("No available SMP context for conn %p", conn);
   1c068:	b088      	sub	sp, #32
   1c06a:	466a      	mov	r2, sp
   1c06c:	4b07      	ldr	r3, [pc, #28]	; (1c08c <bt_smp_accept.part.0+0x28>)
   1c06e:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1c072:	2303      	movs	r3, #3
   1c074:	f842 3f10 	str.w	r3, [r2, #16]!
   1c078:	4805      	ldr	r0, [pc, #20]	; (1c090 <bt_smp_accept.part.0+0x2c>)
   1c07a:	2300      	movs	r3, #0
   1c07c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1c080:	f7f9 fabe 	bl	15600 <z_impl_z_log_msg_static_create>

	return -ENOMEM;
}
   1c084:	f06f 000b 	mvn.w	r0, #11
   1c088:	46bd      	mov	sp, r7
   1c08a:	bd80      	pop	{r7, pc}
   1c08c:	000276e9 	.word	0x000276e9
   1c090:	000255d4 	.word	0x000255d4

0001c094 <bt_smp_accept>:
		if (smp->chan.conn) {
   1c094:	4b04      	ldr	r3, [pc, #16]	; (1c0a8 <bt_smp_accept+0x14>)
   1c096:	681a      	ldr	r2, [r3, #0]
   1c098:	b10a      	cbz	r2, 1c09e <bt_smp_accept+0xa>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   1c09a:	f7ff bfe3 	b.w	1c064 <bt_smp_accept.part.0>
		smp->chan.ops = &ops;
   1c09e:	4803      	ldr	r0, [pc, #12]	; (1c0ac <bt_smp_accept+0x18>)
   1c0a0:	6058      	str	r0, [r3, #4]
		*chan = &smp->chan;
   1c0a2:	600b      	str	r3, [r1, #0]
}
   1c0a4:	4610      	mov	r0, r2
   1c0a6:	4770      	bx	lr
   1c0a8:	20005088 	.word	0x20005088
   1c0ac:	00025adc 	.word	0x00025adc

0001c0b0 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   1c0b0:	4b02      	ldr	r3, [pc, #8]	; (1c0bc <net_buf_pool_get+0xc>)
   1c0b2:	222c      	movs	r2, #44	; 0x2c
   1c0b4:	fb02 3000 	mla	r0, r2, r0, r3
   1c0b8:	4770      	bx	lr
   1c0ba:	bf00      	nop
   1c0bc:	2000088c 	.word	0x2000088c

0001c0c0 <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1c0c0:	7a82      	ldrb	r2, [r0, #10]
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
				__alignof__(struct net_buf));
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   1c0c2:	4b06      	ldr	r3, [pc, #24]	; (1c0dc <net_buf_id+0x1c>)
   1c0c4:	212c      	movs	r1, #44	; 0x2c
   1c0c6:	fb01 3302 	mla	r3, r1, r2, r3
   1c0ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1c0cc:	7f1b      	ldrb	r3, [r3, #28]
   1c0ce:	331b      	adds	r3, #27
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   1c0d0:	1a80      	subs	r0, r0, r2
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1c0d2:	f023 0303 	bic.w	r3, r3, #3

	return offset / struct_size;
}
   1c0d6:	fbb0 f0f3 	udiv	r0, r0, r3
   1c0da:	4770      	bx	lr
   1c0dc:	2000088c 	.word	0x2000088c

0001c0e0 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   1c0e0:	b538      	push	{r3, r4, r5, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1c0e2:	4b0a      	ldr	r3, [pc, #40]	; (1c10c <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1c0e4:	7a82      	ldrb	r2, [r0, #10]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1c0e6:	242c      	movs	r4, #44	; 0x2c
   1c0e8:	fb04 3302 	mla	r3, r4, r2, r3

	*size = MIN(fixed->data_size, *size);
   1c0ec:	680c      	ldr	r4, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1c0ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1c0f0:	685b      	ldr	r3, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   1c0f2:	681a      	ldr	r2, [r3, #0]
   1c0f4:	4294      	cmp	r4, r2
   1c0f6:	bf94      	ite	ls
   1c0f8:	600c      	strls	r4, [r1, #0]
   1c0fa:	600a      	strhi	r2, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   1c0fc:	e9d3 5400 	ldrd	r5, r4, [r3]
   1c100:	f7ff ffde 	bl	1c0c0 <net_buf_id>
}
   1c104:	fb05 4000 	mla	r0, r5, r0, r4
   1c108:	bd38      	pop	{r3, r4, r5, pc}
   1c10a:	bf00      	nop
   1c10c:	2000088c 	.word	0x2000088c

0001c110 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   1c110:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c114:	4605      	mov	r5, r0
   1c116:	9101      	str	r1, [sp, #4]
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   1c118:	4610      	mov	r0, r2
   1c11a:	4619      	mov	r1, r3
{
   1c11c:	4691      	mov	r9, r2
   1c11e:	4698      	mov	r8, r3
   1c120:	4617      	mov	r7, r2
   1c122:	461e      	mov	r6, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   1c124:	f008 fe2f 	bl	24d86 <sys_clock_timeout_end_calc>
   1c128:	4682      	mov	sl, r0
   1c12a:	468b      	mov	fp, r1
	__asm__ volatile(
   1c12c:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c130:	f3ef 8111 	mrs	r1, BASEPRI
   1c134:	f383 8812 	msr	BASEPRI_MAX, r3
   1c138:	f3bf 8f6f 	isb	sy
	key = k_spin_lock(&pool->lock);

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   1c13c:	8b6b      	ldrh	r3, [r5, #26]
   1c13e:	2b00      	cmp	r3, #0
   1c140:	d058      	beq.n	1c1f4 <net_buf_alloc_len+0xe4>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   1c142:	8b2a      	ldrh	r2, [r5, #24]
   1c144:	429a      	cmp	r2, r3
   1c146:	d93c      	bls.n	1c1c2 <net_buf_alloc_len+0xb2>
   1c148:	9100      	str	r1, [sp, #0]
	return z_impl_k_queue_get(queue, timeout);
   1c14a:	2200      	movs	r2, #0
   1c14c:	2300      	movs	r3, #0
   1c14e:	4628      	mov	r0, r5
   1c150:	f003 fbc6 	bl	1f8e0 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   1c154:	9900      	ldr	r1, [sp, #0]
   1c156:	4604      	mov	r4, r0
   1c158:	2800      	cmp	r0, #0
   1c15a:	d032      	beq.n	1c1c2 <net_buf_alloc_len+0xb2>
	__asm__ volatile(
   1c15c:	f381 8811 	msr	BASEPRI, r1
   1c160:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   1c164:	9b01      	ldr	r3, [sp, #4]
   1c166:	2b00      	cmp	r3, #0
   1c168:	d055      	beq.n	1c216 <net_buf_alloc_len+0x106>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   1c16a:	ea58 0309 	orrs.w	r3, r8, r9
   1c16e:	d00f      	beq.n	1c190 <net_buf_alloc_len+0x80>
   1c170:	f1b8 3fff 	cmp.w	r8, #4294967295
   1c174:	bf08      	it	eq
   1c176:	f1b9 3fff 	cmpeq.w	r9, #4294967295
   1c17a:	d009      	beq.n	1c190 <net_buf_alloc_len+0x80>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - sys_clock_tick_get();
   1c17c:	f004 fa00 	bl	20580 <sys_clock_tick_get>
   1c180:	ebba 0700 	subs.w	r7, sl, r0
   1c184:	eb6b 0601 	sbc.w	r6, fp, r1

			if (remaining <= 0) {
   1c188:	2e00      	cmp	r6, #0
   1c18a:	bfbc      	itt	lt
   1c18c:	2700      	movlt	r7, #0
   1c18e:	463e      	movlt	r6, r7
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1c190:	7aa3      	ldrb	r3, [r4, #10]
	return pool->alloc->cb->alloc(buf, size, timeout);
   1c192:	4d26      	ldr	r5, [pc, #152]	; (1c22c <net_buf_alloc_len+0x11c>)
   1c194:	f04f 082c 	mov.w	r8, #44	; 0x2c
   1c198:	fb08 5303 	mla	r3, r8, r3, r5
   1c19c:	463a      	mov	r2, r7
   1c19e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1c1a0:	681b      	ldr	r3, [r3, #0]
   1c1a2:	a901      	add	r1, sp, #4
   1c1a4:	f8d3 9000 	ldr.w	r9, [r3]
   1c1a8:	4620      	mov	r0, r4
   1c1aa:	4633      	mov	r3, r6
   1c1ac:	47c8      	blx	r9
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   1c1ae:	6160      	str	r0, [r4, #20]
		if (!buf->__buf) {
   1c1b0:	2800      	cmp	r0, #0
   1c1b2:	d131      	bne.n	1c218 <net_buf_alloc_len+0x108>
	k_lifo_put(&pool->free, buf);
   1c1b4:	7aa0      	ldrb	r0, [r4, #10]
   1c1b6:	4621      	mov	r1, r4
   1c1b8:	fb00 5008 	mla	r0, r0, r8, r5
   1c1bc:	f008 fb5f 	bl	2487e <k_queue_prepend>
}
   1c1c0:	e024      	b.n	1c20c <net_buf_alloc_len+0xfc>
		uninit_count = pool->uninit_count--;
   1c1c2:	8b68      	ldrh	r0, [r5, #26]
   1c1c4:	1e43      	subs	r3, r0, #1
   1c1c6:	836b      	strh	r3, [r5, #26]
   1c1c8:	f381 8811 	msr	BASEPRI, r1
   1c1cc:	f3bf 8f6f 	isb	sy
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1c1d0:	7f2b      	ldrb	r3, [r5, #28]
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   1c1d2:	8b2a      	ldrh	r2, [r5, #24]
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   1c1d4:	6aac      	ldr	r4, [r5, #40]	; 0x28
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1c1d6:	331b      	adds	r3, #27
   1c1d8:	f023 0303 	bic.w	r3, r3, #3
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   1c1dc:	1a12      	subs	r2, r2, r0
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   1c1de:	fb02 4403 	mla	r4, r2, r3, r4
	return pool - _net_buf_pool_list;
   1c1e2:	4b12      	ldr	r3, [pc, #72]	; (1c22c <net_buf_alloc_len+0x11c>)
   1c1e4:	4a12      	ldr	r2, [pc, #72]	; (1c230 <net_buf_alloc_len+0x120>)
   1c1e6:	1aeb      	subs	r3, r5, r3
   1c1e8:	109b      	asrs	r3, r3, #2
   1c1ea:	4353      	muls	r3, r2
	buf->pool_id = pool_id(pool);
   1c1ec:	72a3      	strb	r3, [r4, #10]
	buf->user_data_size = pool->user_data_size;
   1c1ee:	7f2b      	ldrb	r3, [r5, #28]
   1c1f0:	72e3      	strb	r3, [r4, #11]
		goto success;
   1c1f2:	e7b7      	b.n	1c164 <net_buf_alloc_len+0x54>
   1c1f4:	f381 8811 	msr	BASEPRI, r1
   1c1f8:	f3bf 8f6f 	isb	sy
   1c1fc:	464a      	mov	r2, r9
   1c1fe:	4643      	mov	r3, r8
   1c200:	4628      	mov	r0, r5
   1c202:	f003 fb6d 	bl	1f8e0 <z_impl_k_queue_get>
	if (!buf) {
   1c206:	4604      	mov	r4, r0
   1c208:	2800      	cmp	r0, #0
   1c20a:	d1ab      	bne.n	1c164 <net_buf_alloc_len+0x54>
		return NULL;
   1c20c:	2400      	movs	r4, #0
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   1c20e:	4620      	mov	r0, r4
   1c210:	b003      	add	sp, #12
   1c212:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf->__buf = NULL;
   1c216:	6163      	str	r3, [r4, #20]
	buf->frags = NULL;
   1c218:	2300      	movs	r3, #0
	buf->ref   = 1U;
   1c21a:	2201      	movs	r2, #1
	buf->frags = NULL;
   1c21c:	6063      	str	r3, [r4, #4]
	buf->ref   = 1U;
   1c21e:	8122      	strh	r2, [r4, #8]
	buf->len  = 0U;
   1c220:	8223      	strh	r3, [r4, #16]
	buf->size  = size;
   1c222:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
   1c224:	6963      	ldr	r3, [r4, #20]
   1c226:	8262      	strh	r2, [r4, #18]
   1c228:	60e3      	str	r3, [r4, #12]
	return buf;
   1c22a:	e7f0      	b.n	1c20e <net_buf_alloc_len+0xfe>
   1c22c:	2000088c 	.word	0x2000088c
   1c230:	ba2e8ba3 	.word	0xba2e8ba3

0001c234 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   1c234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c238:	4d16      	ldr	r5, [pc, #88]	; (1c294 <net_buf_unref+0x60>)
   1c23a:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   1c23c:	2600      	movs	r6, #0
	pool->alloc->cb->unref(buf, data);
   1c23e:	272c      	movs	r7, #44	; 0x2c
	while (buf) {
   1c240:	b90c      	cbnz	r4, 1c246 <net_buf_unref+0x12>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   1c242:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (--buf->ref > 0) {
   1c246:	7a23      	ldrb	r3, [r4, #8]
		struct net_buf *frags = buf->frags;
   1c248:	f8d4 8004 	ldr.w	r8, [r4, #4]
		if (--buf->ref > 0) {
   1c24c:	3b01      	subs	r3, #1
   1c24e:	b2db      	uxtb	r3, r3
   1c250:	7223      	strb	r3, [r4, #8]
   1c252:	2b00      	cmp	r3, #0
   1c254:	d1f5      	bne.n	1c242 <net_buf_unref+0xe>
		if (buf->__buf) {
   1c256:	6961      	ldr	r1, [r4, #20]
   1c258:	b159      	cbz	r1, 1c272 <net_buf_unref+0x3e>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   1c25a:	7a63      	ldrb	r3, [r4, #9]
   1c25c:	07db      	lsls	r3, r3, #31
   1c25e:	d407      	bmi.n	1c270 <net_buf_unref+0x3c>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1c260:	7aa3      	ldrb	r3, [r4, #10]
	pool->alloc->cb->unref(buf, data);
   1c262:	fb07 5303 	mla	r3, r7, r3, r5
   1c266:	4620      	mov	r0, r4
   1c268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1c26a:	681b      	ldr	r3, [r3, #0]
   1c26c:	689b      	ldr	r3, [r3, #8]
   1c26e:	4798      	blx	r3
			buf->__buf = NULL;
   1c270:	6166      	str	r6, [r4, #20]
		pool = net_buf_pool_get(buf->pool_id);
   1c272:	7aa0      	ldrb	r0, [r4, #10]
		buf->data = NULL;
   1c274:	60e6      	str	r6, [r4, #12]
		if (pool->destroy) {
   1c276:	fb07 5300 	mla	r3, r7, r0, r5
		buf->frags = NULL;
   1c27a:	6066      	str	r6, [r4, #4]
		if (pool->destroy) {
   1c27c:	6a1b      	ldr	r3, [r3, #32]
   1c27e:	b11b      	cbz	r3, 1c288 <net_buf_unref+0x54>
			pool->destroy(buf);
   1c280:	4620      	mov	r0, r4
   1c282:	4798      	blx	r3
{
   1c284:	4644      	mov	r4, r8
   1c286:	e7db      	b.n	1c240 <net_buf_unref+0xc>
	k_lifo_put(&pool->free, buf);
   1c288:	4621      	mov	r1, r4
   1c28a:	fb00 5007 	mla	r0, r0, r7, r5
   1c28e:	f008 faf6 	bl	2487e <k_queue_prepend>
}
   1c292:	e7f7      	b.n	1c284 <net_buf_unref+0x50>
   1c294:	2000088c 	.word	0x2000088c

0001c298 <xoshiro128_initialize>:
{
	return (x << k) | (x >> (32 - k));
}

static int xoshiro128_initialize(const struct device *dev)
{
   1c298:	b508      	push	{r3, lr}
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
   1c29a:	4804      	ldr	r0, [pc, #16]	; (1c2ac <xoshiro128_initialize+0x14>)
   1c29c:	f008 f989 	bl	245b2 <z_device_is_ready>
	if (!device_is_ready(entropy_driver)) {
		return -ENODEV;
	}
	return 0;
   1c2a0:	2800      	cmp	r0, #0
}
   1c2a2:	bf0c      	ite	eq
   1c2a4:	f06f 0012 	mvneq.w	r0, #18
   1c2a8:	2000      	movne	r0, #0
   1c2aa:	bd08      	pop	{r3, pc}
   1c2ac:	00025338 	.word	0x00025338

0001c2b0 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
   1c2b0:	4b08      	ldr	r3, [pc, #32]	; (1c2d4 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   1c2b2:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   1c2b4:	1ac3      	subs	r3, r0, r3
{
   1c2b6:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1c2b8:	4907      	ldr	r1, [pc, #28]	; (1c2d8 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
   1c2ba:	109b      	asrs	r3, r3, #2
{
   1c2bc:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1c2be:	4359      	muls	r1, r3
   1c2c0:	4806      	ldr	r0, [pc, #24]	; (1c2dc <onoff_stop+0x2c>)
   1c2c2:	2240      	movs	r2, #64	; 0x40
   1c2c4:	f007 fe79 	bl	23fba <stop>
	notify(mgr, res);
   1c2c8:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1c2ca:	4601      	mov	r1, r0
	notify(mgr, res);
   1c2cc:	4620      	mov	r0, r4
}
   1c2ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   1c2d2:	4718      	bx	r3
   1c2d4:	20005128 	.word	0x20005128
   1c2d8:	b6db6db7 	.word	0xb6db6db7
   1c2dc:	000252f0 	.word	0x000252f0

0001c2e0 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   1c2e0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   1c2e2:	4c0c      	ldr	r4, [pc, #48]	; (1c314 <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1c2e4:	4a0c      	ldr	r2, [pc, #48]	; (1c318 <onoff_start+0x38>)
   1c2e6:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
   1c2e8:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1c2ea:	9300      	str	r3, [sp, #0]
{
   1c2ec:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1c2ee:	460b      	mov	r3, r1
   1c2f0:	490a      	ldr	r1, [pc, #40]	; (1c31c <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
   1c2f2:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1c2f4:	4361      	muls	r1, r4
{
   1c2f6:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1c2f8:	4809      	ldr	r0, [pc, #36]	; (1c320 <onoff_start+0x40>)
   1c2fa:	f007 fe8a 	bl	24012 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   1c2fe:	1e01      	subs	r1, r0, #0
   1c300:	da05      	bge.n	1c30e <onoff_start+0x2e>
		notify(mgr, err);
   1c302:	4630      	mov	r0, r6
   1c304:	462b      	mov	r3, r5
	}
}
   1c306:	b002      	add	sp, #8
   1c308:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
   1c30c:	4718      	bx	r3
}
   1c30e:	b002      	add	sp, #8
   1c310:	bd70      	pop	{r4, r5, r6, pc}
   1c312:	bf00      	nop
   1c314:	20005128 	.word	0x20005128
   1c318:	0002407d 	.word	0x0002407d
   1c31c:	b6db6db7 	.word	0xb6db6db7
   1c320:	000252f0 	.word	0x000252f0

0001c324 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1c324:	2200      	movs	r2, #0
{
   1c326:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1c328:	2101      	movs	r1, #1
{
   1c32a:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1c32c:	4610      	mov	r0, r2
   1c32e:	f7f9 ff0b 	bl	16148 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
   1c332:	480f      	ldr	r0, [pc, #60]	; (1c370 <clk_init+0x4c>)
   1c334:	f001 ff86 	bl	1e244 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   1c338:	4b0e      	ldr	r3, [pc, #56]	; (1c374 <clk_init+0x50>)
   1c33a:	4298      	cmp	r0, r3
   1c33c:	d115      	bne.n	1c36a <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   1c33e:	f007 ffdd 	bl	242fc <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
   1c342:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
   1c344:	490c      	ldr	r1, [pc, #48]	; (1c378 <clk_init+0x54>)
   1c346:	4630      	mov	r0, r6
   1c348:	f005 fc4d 	bl	21be6 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   1c34c:	2800      	cmp	r0, #0
   1c34e:	db0b      	blt.n	1c368 <clk_init+0x44>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1c350:	2501      	movs	r5, #1
   1c352:	6435      	str	r5, [r6, #64]	; 0x40
	struct nrf_clock_control_data *data = dev->data;
   1c354:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   1c356:	4908      	ldr	r1, [pc, #32]	; (1c378 <clk_init+0x54>)
   1c358:	f104 001c 	add.w	r0, r4, #28
   1c35c:	f005 fc43 	bl	21be6 <onoff_manager_init>
		if (err < 0) {
   1c360:	2800      	cmp	r0, #0
   1c362:	db01      	blt.n	1c368 <clk_init+0x44>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1c364:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
   1c366:	2000      	movs	r0, #0
}
   1c368:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   1c36a:	f06f 0004 	mvn.w	r0, #4
   1c36e:	e7fb      	b.n	1c368 <clk_init+0x44>
   1c370:	0001c3b1 	.word	0x0001c3b1
   1c374:	0bad0000 	.word	0x0bad0000
   1c378:	00025b10 	.word	0x00025b10

0001c37c <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   1c37c:	b570      	push	{r4, r5, r6, lr}
   1c37e:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   1c380:	230c      	movs	r3, #12
   1c382:	4809      	ldr	r0, [pc, #36]	; (1c3a8 <clkstarted_handle.constprop.0+0x2c>)
   1c384:	434b      	muls	r3, r1
   1c386:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
   1c388:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
   1c38c:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
   1c38e:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
   1c390:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
   1c392:	4418      	add	r0, r3
   1c394:	f007 fdfe 	bl	23f94 <set_on_state>
	if (callback) {
   1c398:	b12d      	cbz	r5, 1c3a6 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   1c39a:	4632      	mov	r2, r6
   1c39c:	462b      	mov	r3, r5
   1c39e:	4803      	ldr	r0, [pc, #12]	; (1c3ac <clkstarted_handle.constprop.0+0x30>)
}
   1c3a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   1c3a4:	4718      	bx	r3
}
   1c3a6:	bd70      	pop	{r4, r5, r6, pc}
   1c3a8:	20005128 	.word	0x20005128
   1c3ac:	000252f0 	.word	0x000252f0

0001c3b0 <clock_event_handler>:
	switch (event) {
   1c3b0:	b110      	cbz	r0, 1c3b8 <clock_event_handler+0x8>
   1c3b2:	2801      	cmp	r0, #1
   1c3b4:	d004      	beq.n	1c3c0 <clock_event_handler+0x10>
   1c3b6:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   1c3b8:	4b03      	ldr	r3, [pc, #12]	; (1c3c8 <clock_event_handler+0x18>)
   1c3ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1c3bc:	075b      	lsls	r3, r3, #29
   1c3be:	d101      	bne.n	1c3c4 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   1c3c0:	f7ff bfdc 	b.w	1c37c <clkstarted_handle.constprop.0>
}
   1c3c4:	4770      	bx	lr
   1c3c6:	bf00      	nop
   1c3c8:	20005128 	.word	0x20005128

0001c3cc <generic_hfclk_start>:
{
   1c3cc:	b508      	push	{r3, lr}
	__asm__ volatile(
   1c3ce:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c3d2:	f3ef 8111 	mrs	r1, BASEPRI
   1c3d6:	f383 8812 	msr	BASEPRI_MAX, r3
   1c3da:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   1c3de:	4a12      	ldr	r2, [pc, #72]	; (1c428 <generic_hfclk_start+0x5c>)
   1c3e0:	6813      	ldr	r3, [r2, #0]
   1c3e2:	f043 0002 	orr.w	r0, r3, #2
   1c3e6:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   1c3e8:	07da      	lsls	r2, r3, #31
   1c3ea:	d408      	bmi.n	1c3fe <generic_hfclk_start+0x32>
	__asm__ volatile(
   1c3ec:	f381 8811 	msr	BASEPRI, r1
   1c3f0:	f3bf 8f6f 	isb	sy
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   1c3f4:	2001      	movs	r0, #1
}
   1c3f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1c3fa:	f001 bf13 	b.w	1e224 <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1c3fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1c402:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1c406:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   1c40a:	07d3      	lsls	r3, r2, #31
   1c40c:	d5ee      	bpl.n	1c3ec <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
   1c40e:	4807      	ldr	r0, [pc, #28]	; (1c42c <generic_hfclk_start+0x60>)
   1c410:	f007 fdc0 	bl	23f94 <set_on_state>
   1c414:	f381 8811 	msr	BASEPRI, r1
   1c418:	f3bf 8f6f 	isb	sy
		clkstarted_handle(CLOCK_DEVICE,
   1c41c:	2000      	movs	r0, #0
}
   1c41e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   1c422:	f7ff bfab 	b.w	1c37c <clkstarted_handle.constprop.0>
   1c426:	bf00      	nop
   1c428:	20005178 	.word	0x20005178
   1c42c:	20005168 	.word	0x20005168

0001c430 <api_blocking_start>:
{
   1c430:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1c432:	2200      	movs	r2, #0
   1c434:	2301      	movs	r3, #1
   1c436:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1c43a:	ab04      	add	r3, sp, #16
   1c43c:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1c440:	4a09      	ldr	r2, [pc, #36]	; (1c468 <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1c442:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1c446:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1c448:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1c44c:	f007 fe0f 	bl	2406e <api_start>
	if (err < 0) {
   1c450:	2800      	cmp	r0, #0
   1c452:	db05      	blt.n	1c460 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   1c454:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   1c458:	2300      	movs	r3, #0
   1c45a:	4668      	mov	r0, sp
   1c45c:	f003 fa9a 	bl	1f994 <z_impl_k_sem_take>
}
   1c460:	b007      	add	sp, #28
   1c462:	f85d fb04 	ldr.w	pc, [sp], #4
   1c466:	bf00      	nop
   1c468:	0002409d 	.word	0x0002409d

0001c46c <generic_hfclk_stop>:
{
   1c46c:	b510      	push	{r4, lr}
	__asm__ volatile(
   1c46e:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c472:	f3ef 8411 	mrs	r4, BASEPRI
   1c476:	f383 8812 	msr	BASEPRI_MAX, r3
   1c47a:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_GENERIC;
   1c47e:	4a07      	ldr	r2, [pc, #28]	; (1c49c <generic_hfclk_stop+0x30>)
   1c480:	6813      	ldr	r3, [r2, #0]
   1c482:	f023 0102 	bic.w	r1, r3, #2
	if (!(hfclk_users & HF_USER_BT)) {
   1c486:	07db      	lsls	r3, r3, #31
	hfclk_users &= ~HF_USER_GENERIC;
   1c488:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_BT)) {
   1c48a:	d402      	bmi.n	1c492 <generic_hfclk_stop+0x26>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   1c48c:	2001      	movs	r0, #1
   1c48e:	f007 ff30 	bl	242f2 <nrfx_clock_stop>
	__asm__ volatile(
   1c492:	f384 8811 	msr	BASEPRI, r4
   1c496:	f3bf 8f6f 	isb	sy
}
   1c49a:	bd10      	pop	{r4, pc}
   1c49c:	20005178 	.word	0x20005178

0001c4a0 <z_nrf_clock_control_lf_on>:
{
   1c4a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1c4a4:	4938      	ldr	r1, [pc, #224]	; (1c588 <z_nrf_clock_control_lf_on+0xe8>)
   1c4a6:	f3bf 8f5b 	dmb	ish
   1c4aa:	4607      	mov	r7, r0
   1c4ac:	2201      	movs	r2, #1
   1c4ae:	e851 3f00 	ldrex	r3, [r1]
   1c4b2:	e841 2000 	strex	r0, r2, [r1]
   1c4b6:	2800      	cmp	r0, #0
   1c4b8:	d1f9      	bne.n	1c4ae <z_nrf_clock_control_lf_on+0xe>
   1c4ba:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
   1c4be:	b933      	cbnz	r3, 1c4ce <z_nrf_clock_control_lf_on+0x2e>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   1c4c0:	4932      	ldr	r1, [pc, #200]	; (1c58c <z_nrf_clock_control_lf_on+0xec>)
		err = onoff_request(mgr, &cli);
   1c4c2:	4833      	ldr	r0, [pc, #204]	; (1c590 <z_nrf_clock_control_lf_on+0xf0>)
   1c4c4:	604b      	str	r3, [r1, #4]
   1c4c6:	60cb      	str	r3, [r1, #12]
   1c4c8:	608a      	str	r2, [r1, #8]
   1c4ca:	f005 fb9f 	bl	21c0c <onoff_request>
	switch (start_mode) {
   1c4ce:	1e7b      	subs	r3, r7, #1
   1c4d0:	2b01      	cmp	r3, #1
   1c4d2:	d82b      	bhi.n	1c52c <z_nrf_clock_control_lf_on+0x8c>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   1c4d4:	2f01      	cmp	r7, #1
   1c4d6:	d107      	bne.n	1c4e8 <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   1c4d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1c4dc:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   1c4e0:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   1c4e4:	2b01      	cmp	r3, #1
   1c4e6:	d021      	beq.n	1c52c <z_nrf_clock_control_lf_on+0x8c>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1c4e8:	f008 f924 	bl	24734 <k_is_in_isr>
   1c4ec:	4605      	mov	r5, r0
   1c4ee:	b9f8      	cbnz	r0, 1c530 <z_nrf_clock_control_lf_on+0x90>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
   1c4f0:	4b28      	ldr	r3, [pc, #160]	; (1c594 <z_nrf_clock_control_lf_on+0xf4>)
   1c4f2:	781b      	ldrb	r3, [r3, #0]
   1c4f4:	b1e3      	cbz	r3, 1c530 <z_nrf_clock_control_lf_on+0x90>
    p_reg->INTENCLR = mask;
   1c4f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1c4fa:	2202      	movs	r2, #2
   1c4fc:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
   1c500:	4606      	mov	r6, r0
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1c502:	f8df 8094 	ldr.w	r8, [pc, #148]	; 1c598 <z_nrf_clock_control_lf_on+0xf8>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1c506:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
   1c50a:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1c50e:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
   1c512:	03d2      	lsls	r2, r2, #15
   1c514:	d516      	bpl.n	1c544 <z_nrf_clock_control_lf_on+0xa4>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   1c516:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
   1c51a:	2b01      	cmp	r3, #1
   1c51c:	d001      	beq.n	1c522 <z_nrf_clock_control_lf_on+0x82>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   1c51e:	2f01      	cmp	r7, #1
   1c520:	d110      	bne.n	1c544 <z_nrf_clock_control_lf_on+0xa4>
	if (isr_mode) {
   1c522:	b35d      	cbz	r5, 1c57c <z_nrf_clock_control_lf_on+0xdc>
   1c524:	f386 8811 	msr	BASEPRI, r6
   1c528:	f3bf 8f6f 	isb	sy
}
   1c52c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
   1c530:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c534:	f3ef 8611 	mrs	r6, BASEPRI
   1c538:	f383 8812 	msr	BASEPRI_MAX, r3
   1c53c:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1c540:	2501      	movs	r5, #1
   1c542:	e7de      	b.n	1c502 <z_nrf_clock_control_lf_on+0x62>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   1c544:	b1ad      	cbz	r5, 1c572 <z_nrf_clock_control_lf_on+0xd2>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   1c546:	4630      	mov	r0, r6
   1c548:	f7f9 fd12 	bl	15f70 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   1c54c:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   1c550:	2b00      	cmp	r3, #0
   1c552:	d1da      	bne.n	1c50a <z_nrf_clock_control_lf_on+0x6a>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1c554:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
   1c558:	2a00      	cmp	r2, #0
   1c55a:	d0d6      	beq.n	1c50a <z_nrf_clock_control_lf_on+0x6a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c55c:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   1c560:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
   1c564:	2301      	movs	r3, #1
   1c566:	f8c4 3518 	str.w	r3, [r4, #1304]	; 0x518
   1c56a:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c56e:	60a3      	str	r3, [r4, #8]
}
   1c570:	e7cb      	b.n	1c50a <z_nrf_clock_control_lf_on+0x6a>
	return z_impl_k_sleep(timeout);
   1c572:	2100      	movs	r1, #0
   1c574:	2021      	movs	r0, #33	; 0x21
   1c576:	f003 fe31 	bl	201dc <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   1c57a:	e7e7      	b.n	1c54c <z_nrf_clock_control_lf_on+0xac>
    p_reg->INTENSET = mask;
   1c57c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1c580:	2202      	movs	r2, #2
   1c582:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1c586:	e7d1      	b.n	1c52c <z_nrf_clock_control_lf_on+0x8c>
   1c588:	20005124 	.word	0x20005124
   1c58c:	20005114 	.word	0x20005114
   1c590:	20005144 	.word	0x20005144
   1c594:	200059fa 	.word	0x200059fa
   1c598:	e000e100 	.word	0xe000e100

0001c59c <rtt_console_init>:

	return character;
}

static int rtt_console_init(const struct device *d)
{
   1c59c:	b510      	push	{r4, lr}
	ARG_UNUSED(d);

#ifdef CONFIG_PRINTK
	__printk_hook_install(rtt_console_out);
   1c59e:	4c04      	ldr	r4, [pc, #16]	; (1c5b0 <rtt_console_init+0x14>)
   1c5a0:	4620      	mov	r0, r4
   1c5a2:	f7f8 fc0d 	bl	14dc0 <__printk_hook_install>
#endif
	__stdout_hook_install(rtt_console_out);
   1c5a6:	4620      	mov	r0, r4
   1c5a8:	f7fa fbda 	bl	16d60 <__stdout_hook_install>

	return 0;
}
   1c5ac:	2000      	movs	r0, #0
   1c5ae:	bd10      	pop	{r4, pc}
   1c5b0:	0001c5b5 	.word	0x0001c5b5

0001c5b4 <rtt_console_out>:
{
   1c5b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1c5b6:	4e13      	ldr	r6, [pc, #76]	; (1c604 <rtt_console_out+0x50>)
	char c = (char)character;
   1c5b8:	f88d 0007 	strb.w	r0, [sp, #7]
{
   1c5bc:	4604      	mov	r4, r0
	char c = (char)character;
   1c5be:	2503      	movs	r5, #3
		SEGGER_RTT_LOCK();
   1c5c0:	f002 fe2c 	bl	1f21c <zephyr_rtt_mutex_lock>
		cnt = SEGGER_RTT_WriteNoLock(0, &c, 1);
   1c5c4:	2201      	movs	r2, #1
   1c5c6:	f10d 0107 	add.w	r1, sp, #7
   1c5ca:	2000      	movs	r0, #0
   1c5cc:	f002 fdf0 	bl	1f1b0 <SEGGER_RTT_WriteNoLock>
   1c5d0:	4607      	mov	r7, r0
		SEGGER_RTT_UNLOCK();
   1c5d2:	f002 fe2d 	bl	1f230 <zephyr_rtt_mutex_unlock>
		if (cnt) {
   1c5d6:	b127      	cbz	r7, 1c5e2 <rtt_console_out+0x2e>
			host_present = true;
   1c5d8:	2301      	movs	r3, #1
   1c5da:	7033      	strb	r3, [r6, #0]
}
   1c5dc:	4620      	mov	r0, r4
   1c5de:	b003      	add	sp, #12
   1c5e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (host_present) {
   1c5e2:	7833      	ldrb	r3, [r6, #0]
   1c5e4:	2b00      	cmp	r3, #0
   1c5e6:	d0f9      	beq.n	1c5dc <rtt_console_out+0x28>
			if (max_cnt) {
   1c5e8:	3d01      	subs	r5, #1
   1c5ea:	d008      	beq.n	1c5fe <rtt_console_out+0x4a>
	if (!IS_ENABLED(CONFIG_MULTITHREADING) || k_is_in_isr()) {
   1c5ec:	f008 f8a2 	bl	24734 <k_is_in_isr>
   1c5f0:	2800      	cmp	r0, #0
   1c5f2:	d1e5      	bne.n	1c5c0 <rtt_console_out+0xc>
   1c5f4:	2100      	movs	r1, #0
   1c5f6:	2042      	movs	r0, #66	; 0x42
   1c5f8:	f003 fdf0 	bl	201dc <z_impl_k_sleep>
		SEGGER_RTT_LOCK();
   1c5fc:	e7e0      	b.n	1c5c0 <rtt_console_out+0xc>
				host_present = false;
   1c5fe:	7035      	strb	r5, [r6, #0]
   1c600:	e7ec      	b.n	1c5dc <rtt_console_out+0x28>
   1c602:	bf00      	nop
   1c604:	20005443 	.word	0x20005443

0001c608 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
   1c608:	b530      	push	{r4, r5, lr}
	return port->config;
   1c60a:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1c60c:	7b05      	ldrb	r5, [r0, #12]
   1c60e:	f001 041f 	and.w	r4, r1, #31
	nrfx_err_t err;
	uint8_t ch;

	if (mode == GPIO_INT_MODE_DISABLED) {
   1c612:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
   1c616:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1c618:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
   1c61c:	d105      	bne.n	1c62a <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
   1c61e:	4620      	mov	r0, r4
   1c620:	f002 f956 	bl	1e8d0 <nrfx_gpiote_trigger_disable>

		return 0;
   1c624:	2000      	movs	r0, #0
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
}
   1c626:	b005      	add	sp, #20
   1c628:	bd30      	pop	{r4, r5, pc}
	nrfx_gpiote_trigger_config_t trigger_config = {
   1c62a:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
   1c62c:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
   1c630:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
   1c634:	d114      	bne.n	1c660 <gpio_nrfx_pin_interrupt_configure+0x58>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   1c636:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
   1c63a:	bf0c      	ite	eq
   1c63c:	2304      	moveq	r3, #4
   1c63e:	2305      	movne	r3, #5
   1c640:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1c644:	2300      	movs	r3, #0
   1c646:	4619      	mov	r1, r3
   1c648:	aa02      	add	r2, sp, #8
   1c64a:	4620      	mov	r0, r4
   1c64c:	f001 ff7e 	bl	1e54c <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   1c650:	4b1f      	ldr	r3, [pc, #124]	; (1c6d0 <gpio_nrfx_pin_interrupt_configure+0xc8>)
   1c652:	4298      	cmp	r0, r3
   1c654:	d139      	bne.n	1c6ca <gpio_nrfx_pin_interrupt_configure+0xc2>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   1c656:	2101      	movs	r1, #1
   1c658:	4620      	mov	r0, r4
   1c65a:	f002 f8f1 	bl	1e840 <nrfx_gpiote_trigger_enable>
	return 0;
   1c65e:	e7e1      	b.n	1c624 <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   1c660:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
   1c664:	d026      	beq.n	1c6b4 <gpio_nrfx_pin_interrupt_configure+0xac>
   1c666:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
   1c66a:	bf14      	ite	ne
   1c66c:	2301      	movne	r3, #1
   1c66e:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
   1c670:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   1c674:	6883      	ldr	r3, [r0, #8]
   1c676:	40cb      	lsrs	r3, r1
   1c678:	07d9      	lsls	r1, r3, #31
   1c67a:	d4e3      	bmi.n	1c644 <gpio_nrfx_pin_interrupt_configure+0x3c>
   1c67c:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
   1c680:	d1e0      	bne.n	1c644 <gpio_nrfx_pin_interrupt_configure+0x3c>
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
   1c682:	0962      	lsrs	r2, r4, #5
        case 1: return NRF_P1;
   1c684:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
   1c686:	f004 031f 	and.w	r3, r4, #31
        case 1: return NRF_P1;
   1c68a:	4a12      	ldr	r2, [pc, #72]	; (1c6d4 <gpio_nrfx_pin_interrupt_configure+0xcc>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1c68c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
        case 1: return NRF_P1;
   1c690:	bf18      	it	ne
   1c692:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1c696:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   1c69a:	07db      	lsls	r3, r3, #31
   1c69c:	d4d2      	bmi.n	1c644 <gpio_nrfx_pin_interrupt_configure+0x3c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1c69e:	f10d 0507 	add.w	r5, sp, #7
   1c6a2:	4629      	mov	r1, r5
   1c6a4:	4620      	mov	r0, r4
   1c6a6:	f002 f877 	bl	1e798 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   1c6aa:	4b0b      	ldr	r3, [pc, #44]	; (1c6d8 <gpio_nrfx_pin_interrupt_configure+0xd0>)
   1c6ac:	4298      	cmp	r0, r3
   1c6ae:	d003      	beq.n	1c6b8 <gpio_nrfx_pin_interrupt_configure+0xb0>
		trigger_config.p_in_channel = &ch;
   1c6b0:	9503      	str	r5, [sp, #12]
   1c6b2:	e7c7      	b.n	1c644 <gpio_nrfx_pin_interrupt_configure+0x3c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   1c6b4:	2303      	movs	r3, #3
   1c6b6:	e7db      	b.n	1c670 <gpio_nrfx_pin_interrupt_configure+0x68>
			err = nrfx_gpiote_channel_alloc(&ch);
   1c6b8:	4628      	mov	r0, r5
   1c6ba:	f002 f8bb 	bl	1e834 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   1c6be:	4b04      	ldr	r3, [pc, #16]	; (1c6d0 <gpio_nrfx_pin_interrupt_configure+0xc8>)
   1c6c0:	4298      	cmp	r0, r3
   1c6c2:	d0f5      	beq.n	1c6b0 <gpio_nrfx_pin_interrupt_configure+0xa8>
				return -ENOMEM;
   1c6c4:	f06f 000b 	mvn.w	r0, #11
   1c6c8:	e7ad      	b.n	1c626 <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EINVAL;
   1c6ca:	f06f 0015 	mvn.w	r0, #21
   1c6ce:	e7aa      	b.n	1c626 <gpio_nrfx_pin_interrupt_configure+0x1e>
   1c6d0:	0bad0000 	.word	0x0bad0000
   1c6d4:	50000300 	.word	0x50000300
   1c6d8:	0bad0004 	.word	0x0bad0004

0001c6dc <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   1c6dc:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   1c6de:	f002 f899 	bl	1e814 <nrfx_gpiote_is_init>
   1c6e2:	4604      	mov	r4, r0
   1c6e4:	b968      	cbnz	r0, 1c702 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
   1c6e6:	f002 f86d 	bl	1e7c4 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   1c6ea:	4b08      	ldr	r3, [pc, #32]	; (1c70c <gpio_nrfx_init+0x30>)
   1c6ec:	4298      	cmp	r0, r3
   1c6ee:	d10a      	bne.n	1c706 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   1c6f0:	4807      	ldr	r0, [pc, #28]	; (1c710 <gpio_nrfx_init+0x34>)
   1c6f2:	4621      	mov	r1, r4
   1c6f4:	f002 f84a 	bl	1e78c <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   1c6f8:	4622      	mov	r2, r4
   1c6fa:	2105      	movs	r1, #5
   1c6fc:	2006      	movs	r0, #6
   1c6fe:	f7f9 fd23 	bl	16148 <z_arm_irq_priority_set>
		return 0;
   1c702:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   1c704:	bd10      	pop	{r4, pc}
		return -EIO;
   1c706:	f06f 0004 	mvn.w	r0, #4
   1c70a:	e7fb      	b.n	1c704 <gpio_nrfx_init+0x28>
   1c70c:	0bad0000 	.word	0x0bad0000
   1c710:	0001c715 	.word	0x0001c715

0001c714 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1c714:	0942      	lsrs	r2, r0, #5
{
   1c716:	b570      	push	{r4, r5, r6, lr}
   1c718:	4603      	mov	r3, r0
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1c71a:	d002      	beq.n	1c722 <nrfx_gpio_handler+0xe>
   1c71c:	2a01      	cmp	r2, #1
   1c71e:	d017      	beq.n	1c750 <nrfx_gpio_handler+0x3c>
}
   1c720:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1c722:	4e0d      	ldr	r6, [pc, #52]	; (1c758 <nrfx_gpio_handler+0x44>)
	gpio_fire_callbacks(list, port, BIT(pin));
   1c724:	6932      	ldr	r2, [r6, #16]
   1c726:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1c728:	2900      	cmp	r1, #0
   1c72a:	d0f9      	beq.n	1c720 <nrfx_gpio_handler+0xc>
    *p_pin = pin_number & 0x1F;
   1c72c:	f003 031f 	and.w	r3, r3, #31
   1c730:	2501      	movs	r5, #1
   1c732:	680c      	ldr	r4, [r1, #0]
   1c734:	409d      	lsls	r5, r3
   1c736:	2900      	cmp	r1, #0
   1c738:	d0f2      	beq.n	1c720 <nrfx_gpio_handler+0xc>
		if (cb->pin_mask & pins) {
   1c73a:	688a      	ldr	r2, [r1, #8]
   1c73c:	402a      	ands	r2, r5
   1c73e:	d002      	beq.n	1c746 <nrfx_gpio_handler+0x32>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   1c740:	684b      	ldr	r3, [r1, #4]
   1c742:	4630      	mov	r0, r6
   1c744:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1c746:	b12c      	cbz	r4, 1c754 <nrfx_gpio_handler+0x40>
   1c748:	6823      	ldr	r3, [r4, #0]
   1c74a:	4621      	mov	r1, r4
   1c74c:	461c      	mov	r4, r3
   1c74e:	e7f2      	b.n	1c736 <nrfx_gpio_handler+0x22>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1c750:	4e02      	ldr	r6, [pc, #8]	; (1c75c <nrfx_gpio_handler+0x48>)
   1c752:	e7e7      	b.n	1c724 <nrfx_gpio_handler+0x10>
   1c754:	4623      	mov	r3, r4
   1c756:	e7f8      	b.n	1c74a <nrfx_gpio_handler+0x36>
   1c758:	00025320 	.word	0x00025320
   1c75c:	00025308 	.word	0x00025308

0001c760 <gpio_nrfx_pin_configure>:
{
   1c760:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return port->config;
   1c764:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1c766:	7b3b      	ldrb	r3, [r7, #12]
   1c768:	f001 051f 	and.w	r5, r1, #31
   1c76c:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
{
   1c770:	460e      	mov	r6, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1c772:	4628      	mov	r0, r5
   1c774:	f10d 0103 	add.w	r1, sp, #3
{
   1c778:	4614      	mov	r4, r2
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1c77a:	f002 f80d 	bl	1e798 <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   1c77e:	f414 3f40 	tst.w	r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1c782:	4680      	mov	r8, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   1c784:	d10b      	bne.n	1c79e <gpio_nrfx_pin_configure+0x3e>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
   1c786:	4628      	mov	r0, r5
   1c788:	f002 f8ca 	bl	1e920 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
   1c78c:	4b3d      	ldr	r3, [pc, #244]	; (1c884 <gpio_nrfx_pin_configure+0x124>)
   1c78e:	4598      	cmp	r8, r3
   1c790:	d103      	bne.n	1c79a <gpio_nrfx_pin_configure+0x3a>
			err = nrfx_gpiote_channel_free(ch);
   1c792:	f89d 0003 	ldrb.w	r0, [sp, #3]
   1c796:	f002 f847 	bl	1e828 <nrfx_gpiote_channel_free>
		return 0;
   1c79a:	2000      	movs	r0, #0
   1c79c:	e00c      	b.n	1c7b8 <gpio_nrfx_pin_configure+0x58>
	nrfx_gpiote_trigger_config_t trigger_config = {
   1c79e:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1c7a0:	4619      	mov	r1, r3
   1c7a2:	aa02      	add	r2, sp, #8
   1c7a4:	4628      	mov	r0, r5
	nrfx_gpiote_trigger_config_t trigger_config = {
   1c7a6:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1c7aa:	f001 fecf 	bl	1e54c <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   1c7ae:	4b35      	ldr	r3, [pc, #212]	; (1c884 <gpio_nrfx_pin_configure+0x124>)
   1c7b0:	4298      	cmp	r0, r3
   1c7b2:	d004      	beq.n	1c7be <gpio_nrfx_pin_configure+0x5e>
		return NRF_GPIO_PIN_PULLUP;
   1c7b4:	f06f 0015 	mvn.w	r0, #21
}
   1c7b8:	b004      	add	sp, #16
   1c7ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (free_ch) {
   1c7be:	4580      	cmp	r8, r0
   1c7c0:	d103      	bne.n	1c7ca <gpio_nrfx_pin_configure+0x6a>
		err = nrfx_gpiote_channel_free(ch);
   1c7c2:	f89d 0003 	ldrb.w	r0, [sp, #3]
   1c7c6:	f002 f82f 	bl	1e828 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
   1c7ca:	03a3      	lsls	r3, r4, #14
   1c7cc:	d54b      	bpl.n	1c866 <gpio_nrfx_pin_configure+0x106>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1c7ce:	f240 3306 	movw	r3, #774	; 0x306
   1c7d2:	4023      	ands	r3, r4
   1c7d4:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
   1c7d8:	d019      	beq.n	1c80e <gpio_nrfx_pin_configure+0xae>
   1c7da:	d80c      	bhi.n	1c7f6 <gpio_nrfx_pin_configure+0x96>
   1c7dc:	2b06      	cmp	r3, #6
   1c7de:	d017      	beq.n	1c810 <gpio_nrfx_pin_configure+0xb0>
   1c7e0:	d804      	bhi.n	1c7ec <gpio_nrfx_pin_configure+0x8c>
   1c7e2:	b1ab      	cbz	r3, 1c810 <gpio_nrfx_pin_configure+0xb0>
   1c7e4:	2b02      	cmp	r3, #2
   1c7e6:	d1e5      	bne.n	1c7b4 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0S1;
   1c7e8:	2304      	movs	r3, #4
   1c7ea:	e011      	b.n	1c810 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1c7ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   1c7f0:	d1e0      	bne.n	1c7b4 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_H0S1;
   1c7f2:	2301      	movs	r3, #1
   1c7f4:	e00c      	b.n	1c810 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1c7f6:	f240 2202 	movw	r2, #514	; 0x202
   1c7fa:	4293      	cmp	r3, r2
   1c7fc:	d027      	beq.n	1c84e <gpio_nrfx_pin_configure+0xee>
   1c7fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
   1c802:	d026      	beq.n	1c852 <gpio_nrfx_pin_configure+0xf2>
   1c804:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   1c808:	d1d4      	bne.n	1c7b4 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_S0H1;
   1c80a:	2302      	movs	r3, #2
   1c80c:	e000      	b.n	1c810 <gpio_nrfx_pin_configure+0xb0>
		*drive = NRF_GPIO_PIN_H0D1;
   1c80e:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
   1c810:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   1c814:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
   1c818:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
   1c81c:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
   1c81e:	f88d 3005 	strb.w	r3, [sp, #5]
	} else if (flags & GPIO_PULL_DOWN) {
   1c822:	bf54      	ite	pl
   1c824:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
   1c828:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   1c82a:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
   1c82c:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   1c830:	d511      	bpl.n	1c856 <gpio_nrfx_pin_configure+0xf6>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   1c832:	687a      	ldr	r2, [r7, #4]
   1c834:	2301      	movs	r3, #1
   1c836:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
   1c838:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   1c83c:	2200      	movs	r2, #0
   1c83e:	a901      	add	r1, sp, #4
   1c840:	4628      	mov	r0, r5
   1c842:	f001 ff31 	bl	1e6a8 <nrfx_gpiote_output_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   1c846:	4b0f      	ldr	r3, [pc, #60]	; (1c884 <gpio_nrfx_pin_configure+0x124>)
   1c848:	4298      	cmp	r0, r3
   1c84a:	d0a6      	beq.n	1c79a <gpio_nrfx_pin_configure+0x3a>
   1c84c:	e7b2      	b.n	1c7b4 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0H1;
   1c84e:	2305      	movs	r3, #5
   1c850:	e7de      	b.n	1c810 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1c852:	2303      	movs	r3, #3
   1c854:	e7dc      	b.n	1c810 <gpio_nrfx_pin_configure+0xb0>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   1c856:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   1c858:	bf41      	itttt	mi
   1c85a:	2301      	movmi	r3, #1
   1c85c:	687a      	ldrmi	r2, [r7, #4]
   1c85e:	40b3      	lslmi	r3, r6
    p_reg->OUTCLR = clr_mask;
   1c860:	f8c2 350c 	strmi.w	r3, [r2, #1292]	; 0x50c
}
   1c864:	e7ea      	b.n	1c83c <gpio_nrfx_pin_configure+0xdc>
	if (flags & GPIO_PULL_UP) {
   1c866:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1c868:	f04f 0300 	mov.w	r3, #0
	} else if (flags & GPIO_PULL_DOWN) {
   1c86c:	bf54      	ite	pl
   1c86e:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
   1c872:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1c874:	461a      	mov	r2, r3
   1c876:	a901      	add	r1, sp, #4
   1c878:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
   1c87a:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1c87e:	f001 fe65 	bl	1e54c <nrfx_gpiote_input_configure>
   1c882:	e7e0      	b.n	1c846 <gpio_nrfx_pin_configure+0xe6>
   1c884:	0bad0000 	.word	0x0bad0000

0001c888 <i2c_nrfx_twi_recover_bus>:

	return 0;
}

static int i2c_nrfx_twi_recover_bus(const struct device *dev)
{
   1c888:	b508      	push	{r3, lr}
	uint32_t scl_pin;
	uint32_t sda_pin;
	nrfx_err_t err;

#ifdef CONFIG_PINCTRL
	scl_pin = nrf_twi_scl_pin_get(config->twi.p_twi);
   1c88a:	6843      	ldr	r3, [r0, #4]
   1c88c:	681b      	ldr	r3, [r3, #0]
}

NRF_STATIC_INLINE uint32_t nrf_twi_scl_pin_get(NRF_TWI_Type const * p_reg)
{
#if defined(TWI_PSEL_SCL_CONNECT_Pos)
    return p_reg->PSEL.SCL;
   1c88e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
}

NRF_STATIC_INLINE uint32_t nrf_twi_sda_pin_get(NRF_TWI_Type const * p_reg)
{
#if defined(TWI_PSEL_SDA_CONNECT_Pos)
    return p_reg->PSEL.SDA;
   1c892:	f8d3 150c 	ldr.w	r1, [r3, #1292]	; 0x50c
NRFX_STATIC_INLINE nrfx_err_t nrfx_twi_bus_recover(uint32_t scl_pin, uint32_t sda_pin);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE nrfx_err_t nrfx_twi_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
    return nrfx_twi_twim_bus_recover(scl_pin, sda_pin);
   1c896:	f002 fbaf 	bl	1eff8 <nrfx_twi_twim_bus_recover>
	scl_pin = config->config.scl;
	sda_pin = config->config.sda;
#endif

	err = nrfx_twi_bus_recover(scl_pin, sda_pin);
	return (err == NRFX_SUCCESS ? 0 : -EBUSY);
   1c89a:	4b03      	ldr	r3, [pc, #12]	; (1c8a8 <i2c_nrfx_twi_recover_bus+0x20>)
   1c89c:	4298      	cmp	r0, r3
}
   1c89e:	bf14      	ite	ne
   1c8a0:	f06f 000f 	mvnne.w	r0, #15
   1c8a4:	2000      	moveq	r0, #0
   1c8a6:	bd08      	pop	{r3, pc}
   1c8a8:	0bad0000 	.word	0x0bad0000

0001c8ac <twi_0_init>:
		      POST_KERNEL,					       \
		      CONFIG_I2C_INIT_PRIORITY,				       \
		      &i2c_nrfx_twi_driver_api)

#ifdef CONFIG_I2C_0_NRF_TWI
I2C_NRFX_TWI_DEVICE(0);
   1c8ac:	b5b0      	push	{r4, r5, r7, lr}
   1c8ae:	4604      	mov	r4, r0
   1c8b0:	b082      	sub	sp, #8
   1c8b2:	2200      	movs	r2, #0
   1c8b4:	af00      	add	r7, sp, #0
   1c8b6:	2101      	movs	r1, #1
   1c8b8:	2003      	movs	r0, #3
   1c8ba:	f7f9 fc45 	bl	16148 <z_arm_irq_priority_set>
   1c8be:	6863      	ldr	r3, [r4, #4]
   1c8c0:	699d      	ldr	r5, [r3, #24]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
   1c8c2:	1d3a      	adds	r2, r7, #4
   1c8c4:	2100      	movs	r1, #0
   1c8c6:	4628      	mov	r0, r5
   1c8c8:	f007 fc62 	bl	24190 <pinctrl_lookup_state>
	if (ret < 0) {
   1c8cc:	2800      	cmp	r0, #0
   1c8ce:	db27      	blt.n	1c920 <twi_0_init+0x74>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
   1c8d0:	687b      	ldr	r3, [r7, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   1c8d2:	682a      	ldr	r2, [r5, #0]
   1c8d4:	7919      	ldrb	r1, [r3, #4]
   1c8d6:	6818      	ldr	r0, [r3, #0]
   1c8d8:	f000 fc7e 	bl	1d1d8 <pinctrl_configure_pins>
   1c8dc:	2800      	cmp	r0, #0
   1c8de:	db1f      	blt.n	1c920 <twi_0_init+0x74>
	const struct i2c_nrfx_twi_config *config = dev->config;
   1c8e0:	6860      	ldr	r0, [r4, #4]
	nrfx_err_t result = nrfx_twi_init(&config->twi, &config->config,
   1c8e2:	6923      	ldr	r3, [r4, #16]
   1c8e4:	4a11      	ldr	r2, [pc, #68]	; (1c92c <twi_0_init+0x80>)
   1c8e6:	f100 0108 	add.w	r1, r0, #8
   1c8ea:	f002 fa0f 	bl	1ed0c <nrfx_twi_init>
	if (result != NRFX_SUCCESS) {
   1c8ee:	4b10      	ldr	r3, [pc, #64]	; (1c930 <twi_0_init+0x84>)
   1c8f0:	4298      	cmp	r0, r3
   1c8f2:	d018      	beq.n	1c926 <twi_0_init+0x7a>
		LOG_ERR("Failed to initialize device: %s",
   1c8f4:	6823      	ldr	r3, [r4, #0]
   1c8f6:	466c      	mov	r4, sp
   1c8f8:	b088      	sub	sp, #32
   1c8fa:	466a      	mov	r2, sp
   1c8fc:	490d      	ldr	r1, [pc, #52]	; (1c934 <twi_0_init+0x88>)
   1c8fe:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1c902:	f44f 7300 	mov.w	r3, #512	; 0x200
   1c906:	8393      	strh	r3, [r2, #28]
   1c908:	4b0b      	ldr	r3, [pc, #44]	; (1c938 <twi_0_init+0x8c>)
   1c90a:	f842 3f10 	str.w	r3, [r2, #16]!
   1c90e:	480b      	ldr	r0, [pc, #44]	; (1c93c <twi_0_init+0x90>)
   1c910:	2300      	movs	r3, #0
   1c912:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   1c916:	f7f8 fe73 	bl	15600 <z_impl_z_log_msg_static_create>
		return -EBUSY;
   1c91a:	f06f 000f 	mvn.w	r0, #15
   1c91e:	46a5      	mov	sp, r4
I2C_NRFX_TWI_DEVICE(0);
   1c920:	3708      	adds	r7, #8
   1c922:	46bd      	mov	sp, r7
   1c924:	bdb0      	pop	{r4, r5, r7, pc}
	return 0;
   1c926:	2000      	movs	r0, #0
   1c928:	e7fa      	b.n	1c920 <twi_0_init+0x74>
   1c92a:	bf00      	nop
   1c92c:	0001c941 	.word	0x0001c941
   1c930:	0bad0000 	.word	0x0bad0000
   1c934:	00027766 	.word	0x00027766
   1c938:	01000003 	.word	0x01000003
   1c93c:	000255fc 	.word	0x000255fc

0001c940 <event_handler>:
	switch (p_event->type) {
   1c940:	7803      	ldrb	r3, [r0, #0]
   1c942:	2b01      	cmp	r3, #1
   1c944:	d008      	beq.n	1c958 <event_handler+0x18>
   1c946:	2b02      	cmp	r3, #2
   1c948:	d008      	beq.n	1c95c <event_handler+0x1c>
   1c94a:	b94b      	cbnz	r3, 1c960 <event_handler+0x20>
		dev_data->res = NRFX_SUCCESS;
   1c94c:	4b05      	ldr	r3, [pc, #20]	; (1c964 <event_handler+0x24>)
		dev_data->res = NRFX_ERROR_INTERNAL;
   1c94e:	630b      	str	r3, [r1, #48]	; 0x30
	z_impl_k_sem_give(sem);
   1c950:	f101 0018 	add.w	r0, r1, #24
   1c954:	f002 bff8 	b.w	1f948 <z_impl_k_sem_give>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   1c958:	4b03      	ldr	r3, [pc, #12]	; (1c968 <event_handler+0x28>)
   1c95a:	e7f8      	b.n	1c94e <event_handler+0xe>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   1c95c:	4b03      	ldr	r3, [pc, #12]	; (1c96c <event_handler+0x2c>)
   1c95e:	e7f6      	b.n	1c94e <event_handler+0xe>
		dev_data->res = NRFX_ERROR_INTERNAL;
   1c960:	4b03      	ldr	r3, [pc, #12]	; (1c970 <event_handler+0x30>)
   1c962:	e7f4      	b.n	1c94e <event_handler+0xe>
   1c964:	0bad0000 	.word	0x0bad0000
   1c968:	0bae0001 	.word	0x0bae0001
   1c96c:	0bae0002 	.word	0x0bae0002
   1c970:	0bad0001 	.word	0x0bad0001

0001c974 <i2c_nrfx_twi_configure>:
{
   1c974:	b510      	push	{r4, lr}
	if (I2C_ADDR_10_BITS & dev_config) {
   1c976:	f011 0301 	ands.w	r3, r1, #1
	const struct i2c_nrfx_twi_config *config = dev->config;
   1c97a:	6842      	ldr	r2, [r0, #4]
	struct i2c_nrfx_twi_data *data = dev->data;
   1c97c:	6904      	ldr	r4, [r0, #16]
{
   1c97e:	b086      	sub	sp, #24
	if (I2C_ADDR_10_BITS & dev_config) {
   1c980:	d10f      	bne.n	1c9a2 <i2c_nrfx_twi_configure+0x2e>
	switch (I2C_SPEED_GET(dev_config)) {
   1c982:	f3c1 0042 	ubfx	r0, r1, #1, #3
   1c986:	2801      	cmp	r0, #1
   1c988:	d00e      	beq.n	1c9a8 <i2c_nrfx_twi_configure+0x34>
   1c98a:	2802      	cmp	r0, #2
   1c98c:	d015      	beq.n	1c9ba <i2c_nrfx_twi_configure+0x46>
		LOG_ERR("unsupported speed");
   1c98e:	4a0d      	ldr	r2, [pc, #52]	; (1c9c4 <i2c_nrfx_twi_configure+0x50>)
   1c990:	9205      	str	r2, [sp, #20]
   1c992:	2202      	movs	r2, #2
   1c994:	9204      	str	r2, [sp, #16]
   1c996:	480c      	ldr	r0, [pc, #48]	; (1c9c8 <i2c_nrfx_twi_configure+0x54>)
   1c998:	aa04      	add	r2, sp, #16
   1c99a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1c99e:	f7f8 fe2f 	bl	15600 <z_impl_z_log_msg_static_create>
		return -EINVAL;
   1c9a2:	f06f 0015 	mvn.w	r0, #21
   1c9a6:	e006      	b.n	1c9b6 <i2c_nrfx_twi_configure+0x42>
		nrf_twi_frequency_set(inst->p_twi, NRF_TWI_FREQ_100K);
   1c9a8:	6813      	ldr	r3, [r2, #0]
}

NRF_STATIC_INLINE void nrf_twi_frequency_set(NRF_TWI_Type *      p_reg,
                                             nrf_twi_frequency_t frequency)
{
    p_reg->FREQUENCY = frequency;
   1c9aa:	f04f 72cc 	mov.w	r2, #26738688	; 0x1980000
   1c9ae:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	return 0;
   1c9b2:	2000      	movs	r0, #0
	data->dev_config = dev_config;
   1c9b4:	6361      	str	r1, [r4, #52]	; 0x34
}
   1c9b6:	b006      	add	sp, #24
   1c9b8:	bd10      	pop	{r4, pc}
		nrf_twi_frequency_set(inst->p_twi, NRF_TWI_FREQ_400K);
   1c9ba:	6813      	ldr	r3, [r2, #0]
   1c9bc:	f04f 62cd 	mov.w	r2, #107479040	; 0x6680000
   1c9c0:	e7f5      	b.n	1c9ae <i2c_nrfx_twi_configure+0x3a>
   1c9c2:	bf00      	nop
   1c9c4:	00027786 	.word	0x00027786
   1c9c8:	000255fc 	.word	0x000255fc

0001c9cc <i2c_nrfx_twi_transfer>:
{
   1c9cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c9d0:	b08b      	sub	sp, #44	; 0x2c
   1c9d2:	af00      	add	r7, sp, #0
   1c9d4:	4606      	mov	r6, r0
   1c9d6:	460c      	mov	r4, r1
   1c9d8:	4692      	mov	sl, r2
   1c9da:	60bb      	str	r3, [r7, #8]
	const struct i2c_nrfx_twi_config *config = dev->config;
   1c9dc:	f8d0 9004 	ldr.w	r9, [r0, #4]
	struct i2c_nrfx_twi_data *data = dev->data;
   1c9e0:	f8d0 8010 	ldr.w	r8, [r0, #16]
	return z_impl_k_sem_take(sem, timeout);
   1c9e4:	f04f 32ff 	mov.w	r2, #4294967295
   1c9e8:	f04f 33ff 	mov.w	r3, #4294967295
   1c9ec:	4640      	mov	r0, r8
   1c9ee:	f002 ffd1 	bl	1f994 <z_impl_k_sem_take>
	k_sem_take(&data->completion_sync, K_NO_WAIT);
   1c9f2:	f108 0318 	add.w	r3, r8, #24
   1c9f6:	60fb      	str	r3, [r7, #12]
   1c9f8:	2200      	movs	r2, #0
   1c9fa:	2300      	movs	r3, #0
   1c9fc:	68f8      	ldr	r0, [r7, #12]
		if (res != NRFX_SUCCESS) {
   1c9fe:	f8df b11c 	ldr.w	fp, [pc, #284]	; 1cb1c <i2c_nrfx_twi_transfer+0x150>
   1ca02:	f002 ffc7 	bl	1f994 <z_impl_k_sem_take>
	nrfx_twi_enable(&config->twi);
   1ca06:	4648      	mov	r0, r9
   1ca08:	f002 f9e2 	bl	1edd0 <nrfx_twi_enable>
	for (size_t i = 0; i < num_msgs; i++) {
   1ca0c:	2500      	movs	r5, #0
   1ca0e:	4555      	cmp	r5, sl
   1ca10:	d301      	bcc.n	1ca16 <i2c_nrfx_twi_transfer+0x4a>
   1ca12:	2400      	movs	r4, #0
   1ca14:	e053      	b.n	1cabe <i2c_nrfx_twi_transfer+0xf2>
		if (I2C_MSG_ADDR_10_BITS & msgs[i].flags) {
   1ca16:	7a23      	ldrb	r3, [r4, #8]
   1ca18:	603b      	str	r3, [r7, #0]
   1ca1a:	f013 0108 	ands.w	r1, r3, #8
   1ca1e:	d172      	bne.n	1cb06 <i2c_nrfx_twi_transfer+0x13a>
		nrfx_twi_xfer_desc_t cur_xfer = {
   1ca20:	2212      	movs	r2, #18
   1ca22:	f107 0016 	add.w	r0, r7, #22
   1ca26:	6079      	str	r1, [r7, #4]
   1ca28:	f008 fbdb 	bl	251e2 <memset>
					  NRFX_TWI_XFER_RX : NRFX_TWI_XFER_TX
   1ca2c:	683b      	ldr	r3, [r7, #0]
		nrfx_twi_xfer_desc_t cur_xfer = {
   1ca2e:	6860      	ldr	r0, [r4, #4]
   1ca30:	68b9      	ldr	r1, [r7, #8]
   1ca32:	61b8      	str	r0, [r7, #24]
					  NRFX_TWI_XFER_RX : NRFX_TWI_XFER_TX
   1ca34:	f003 0201 	and.w	r2, r3, #1
		nrfx_twi_xfer_desc_t cur_xfer = {
   1ca38:	6820      	ldr	r0, [r4, #0]
   1ca3a:	7579      	strb	r1, [r7, #21]
		if (!(msgs[i].flags & I2C_MSG_STOP)) {
   1ca3c:	f013 0f02 	tst.w	r3, #2
   1ca40:	6879      	ldr	r1, [r7, #4]
		nrfx_twi_xfer_desc_t cur_xfer = {
   1ca42:	753a      	strb	r2, [r7, #20]
   1ca44:	6238      	str	r0, [r7, #32]
		if (!(msgs[i].flags & I2C_MSG_STOP)) {
   1ca46:	d116      	bne.n	1ca76 <i2c_nrfx_twi_transfer+0xaa>
			if ((i < (num_msgs - 1)) &&
   1ca48:	f10a 33ff 	add.w	r3, sl, #4294967295
   1ca4c:	42ab      	cmp	r3, r5
   1ca4e:	d902      	bls.n	1ca56 <i2c_nrfx_twi_transfer+0x8a>
   1ca50:	7d23      	ldrb	r3, [r4, #20]
   1ca52:	075b      	lsls	r3, r3, #29
   1ca54:	d511      	bpl.n	1ca7a <i2c_nrfx_twi_transfer+0xae>
			} else if (msgs[i].flags & I2C_MSG_READ) {
   1ca56:	2a00      	cmp	r2, #0
   1ca58:	d155      	bne.n	1cb06 <i2c_nrfx_twi_transfer+0x13a>
				xfer_flags |= NRFX_TWI_FLAG_TX_NO_STOP;
   1ca5a:	2220      	movs	r2, #32
		res = nrfx_twi_xfer(&config->twi, &cur_xfer, xfer_flags);
   1ca5c:	f107 0114 	add.w	r1, r7, #20
   1ca60:	4648      	mov	r0, r9
   1ca62:	f002 f9e1 	bl	1ee28 <nrfx_twi_xfer>
		if (res != NRFX_SUCCESS) {
   1ca66:	4558      	cmp	r0, fp
   1ca68:	d009      	beq.n	1ca7e <i2c_nrfx_twi_transfer+0xb2>
			if (res == NRFX_ERROR_BUSY) {
   1ca6a:	4b28      	ldr	r3, [pc, #160]	; (1cb0c <i2c_nrfx_twi_transfer+0x140>)
   1ca6c:	4298      	cmp	r0, r3
   1ca6e:	d124      	bne.n	1caba <i2c_nrfx_twi_transfer+0xee>
				ret = -EBUSY;
   1ca70:	f06f 040f 	mvn.w	r4, #15
   1ca74:	e023      	b.n	1cabe <i2c_nrfx_twi_transfer+0xf2>
		uint32_t xfer_flags = 0;
   1ca76:	460a      	mov	r2, r1
   1ca78:	e7f0      	b.n	1ca5c <i2c_nrfx_twi_transfer+0x90>
				xfer_flags |= NRFX_TWI_FLAG_SUSPEND;
   1ca7a:	2240      	movs	r2, #64	; 0x40
   1ca7c:	e7ee      	b.n	1ca5c <i2c_nrfx_twi_transfer+0x90>
   1ca7e:	2300      	movs	r3, #0
   1ca80:	68f8      	ldr	r0, [r7, #12]
   1ca82:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   1ca86:	f002 ff85 	bl	1f994 <z_impl_k_sem_take>
		if (ret != 0) {
   1ca8a:	4603      	mov	r3, r0
   1ca8c:	b310      	cbz	r0, 1cad4 <i2c_nrfx_twi_transfer+0x108>
			LOG_ERR("Error on I2C line occurred for message %d", i);
   1ca8e:	466c      	mov	r4, sp
   1ca90:	b088      	sub	sp, #32
   1ca92:	466a      	mov	r2, sp
   1ca94:	4b1e      	ldr	r3, [pc, #120]	; (1cb10 <i2c_nrfx_twi_transfer+0x144>)
   1ca96:	e9c2 3505 	strd	r3, r5, [r2, #20]
   1ca9a:	2303      	movs	r3, #3
   1ca9c:	f842 3f10 	str.w	r3, [r2, #16]!
   1caa0:	481c      	ldr	r0, [pc, #112]	; (1cb14 <i2c_nrfx_twi_transfer+0x148>)
   1caa2:	2300      	movs	r3, #0
   1caa4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1caa8:	f7f8 fdaa 	bl	15600 <z_impl_z_log_msg_static_create>
			nrfx_twi_disable(&config->twi);
   1caac:	4648      	mov	r0, r9
   1caae:	46a5      	mov	sp, r4
   1cab0:	f002 f99e 	bl	1edf0 <nrfx_twi_disable>
			(void)i2c_nrfx_twi_recover_bus(dev);
   1cab4:	4630      	mov	r0, r6
   1cab6:	f7ff fee7 	bl	1c888 <i2c_nrfx_twi_recover_bus>
				ret = -EIO;
   1caba:	f06f 0404 	mvn.w	r4, #4
	nrfx_twi_disable(&config->twi);
   1cabe:	4648      	mov	r0, r9
   1cac0:	f002 f996 	bl	1edf0 <nrfx_twi_disable>
	z_impl_k_sem_give(sem);
   1cac4:	4640      	mov	r0, r8
   1cac6:	f002 ff3f 	bl	1f948 <z_impl_k_sem_give>
}
   1caca:	4620      	mov	r0, r4
   1cacc:	372c      	adds	r7, #44	; 0x2c
   1cace:	46bd      	mov	sp, r7
   1cad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		res = data->res;
   1cad4:	f8d8 1030 	ldr.w	r1, [r8, #48]	; 0x30
		if (res != NRFX_SUCCESS) {
   1cad8:	4559      	cmp	r1, fp
   1cada:	f104 040c 	add.w	r4, r4, #12
   1cade:	d010      	beq.n	1cb02 <i2c_nrfx_twi_transfer+0x136>
			LOG_ERR("Error 0x%08X occurred for message %d", res, i);
   1cae0:	466c      	mov	r4, sp
   1cae2:	b088      	sub	sp, #32
   1cae4:	466a      	mov	r2, sp
   1cae6:	480c      	ldr	r0, [pc, #48]	; (1cb18 <i2c_nrfx_twi_transfer+0x14c>)
   1cae8:	61d5      	str	r5, [r2, #28]
   1caea:	e9c2 0105 	strd	r0, r1, [r2, #20]
   1caee:	2104      	movs	r1, #4
   1caf0:	f842 1f10 	str.w	r1, [r2, #16]!
   1caf4:	4807      	ldr	r0, [pc, #28]	; (1cb14 <i2c_nrfx_twi_transfer+0x148>)
   1caf6:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1cafa:	f7f8 fd81 	bl	15600 <z_impl_z_log_msg_static_create>
   1cafe:	46a5      	mov	sp, r4
			break;
   1cb00:	e7db      	b.n	1caba <i2c_nrfx_twi_transfer+0xee>
	for (size_t i = 0; i < num_msgs; i++) {
   1cb02:	3501      	adds	r5, #1
   1cb04:	e783      	b.n	1ca0e <i2c_nrfx_twi_transfer+0x42>
			ret = -ENOTSUP;
   1cb06:	f06f 0485 	mvn.w	r4, #133	; 0x85
   1cb0a:	e7d8      	b.n	1cabe <i2c_nrfx_twi_transfer+0xf2>
   1cb0c:	0bad000b 	.word	0x0bad000b
   1cb10:	00027798 	.word	0x00027798
   1cb14:	000255fc 	.word	0x000255fc
   1cb18:	000277c2 	.word	0x000277c2
   1cb1c:	0bad0000 	.word	0x0bad0000

0001cb20 <random_byte_get>:
   1cb20:	f04f 0340 	mov.w	r3, #64	; 0x40
   1cb24:	f3ef 8211 	mrs	r2, BASEPRI
   1cb28:	f383 8812 	msr	BASEPRI_MAX, r3
   1cb2c:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1cb30:	4b09      	ldr	r3, [pc, #36]	; (1cb58 <random_byte_get+0x38>)
   1cb32:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   1cb36:	b161      	cbz	r1, 1cb52 <random_byte_get+0x32>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1cb38:	2100      	movs	r1, #0
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   1cb3a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1cb3e:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
   1cb42:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
		retval = nrf_rng_random_value_get(NRF_RNG);
   1cb46:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
   1cb48:	f382 8811 	msr	BASEPRI, r2
   1cb4c:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   1cb50:	4770      	bx	lr
	int retval = -EAGAIN;
   1cb52:	f06f 000a 	mvn.w	r0, #10
   1cb56:	e7f7      	b.n	1cb48 <random_byte_get+0x28>
   1cb58:	4000d000 	.word	0x4000d000

0001cb5c <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   1cb5c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1cb5e:	4603      	mov	r3, r0
   1cb60:	4610      	mov	r0, r2
	uint32_t last  = rngp->last;
   1cb62:	789c      	ldrb	r4, [r3, #2]
	uint32_t mask  = rngp->mask;
   1cb64:	f893 c003 	ldrb.w	ip, [r3, #3]
	__asm__ volatile(
   1cb68:	f04f 0540 	mov.w	r5, #64	; 0x40
   1cb6c:	f3ef 8211 	mrs	r2, BASEPRI
   1cb70:	f385 8812 	msr	BASEPRI_MAX, r5
   1cb74:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   1cb78:	781f      	ldrb	r7, [r3, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   1cb7a:	f893 e001 	ldrb.w	lr, [r3, #1]

	available = (last - first) & mask;
   1cb7e:	1be4      	subs	r4, r4, r7
   1cb80:	ea04 040c 	and.w	r4, r4, ip
	if (available < len) {
   1cb84:	42a0      	cmp	r0, r4
		len = available;
   1cb86:	bf88      	it	hi
   1cb88:	b2a0      	uxthhi	r0, r4

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   1cb8a:	183e      	adds	r6, r7, r0
   1cb8c:	ea0c 0606 	and.w	r6, ip, r6
	first = rngp->first_alloc;
   1cb90:	463d      	mov	r5, r7
	rngp->first_alloc = (first + len) & mask;
   1cb92:	701e      	strb	r6, [r3, #0]
	__asm__ volatile(
   1cb94:	f382 8811 	msr	BASEPRI, r2
   1cb98:	f3bf 8f6f 	isb	sy
   1cb9c:	180a      	adds	r2, r1, r0
	irq_unlock(key);

	while (likely(len--)) {
   1cb9e:	428a      	cmp	r2, r1
   1cba0:	d117      	bne.n	1cbd2 <rng_pool_get+0x76>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   1cba2:	4577      	cmp	r7, lr
   1cba4:	d10d      	bne.n	1cbc2 <rng_pool_get+0x66>
	__asm__ volatile(
   1cba6:	f04f 0140 	mov.w	r1, #64	; 0x40
   1cbaa:	f3ef 8211 	mrs	r2, BASEPRI
   1cbae:	f381 8812 	msr	BASEPRI_MAX, r1
   1cbb2:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   1cbb6:	7819      	ldrb	r1, [r3, #0]
   1cbb8:	7059      	strb	r1, [r3, #1]
	__asm__ volatile(
   1cbba:	f382 8811 	msr	BASEPRI, r2
   1cbbe:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
	available = available - len;
	if (available <= rngp->threshold) {
   1cbc2:	791b      	ldrb	r3, [r3, #4]
	available = available - len;
   1cbc4:	1a24      	subs	r4, r4, r0
	if (available <= rngp->threshold) {
   1cbc6:	42a3      	cmp	r3, r4
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1cbc8:	bf22      	ittt	cs
   1cbca:	4b06      	ldrcs	r3, [pc, #24]	; (1cbe4 <rng_pool_get+0x88>)
   1cbcc:	2201      	movcs	r2, #1
   1cbce:	601a      	strcs	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   1cbd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
   1cbd2:	195e      	adds	r6, r3, r5
		first = (first + 1) & mask;
   1cbd4:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
   1cbd6:	7976      	ldrb	r6, [r6, #5]
   1cbd8:	f801 6b01 	strb.w	r6, [r1], #1
		first = (first + 1) & mask;
   1cbdc:	ea05 050c 	and.w	r5, r5, ip
   1cbe0:	e7dd      	b.n	1cb9e <rng_pool_get+0x42>
   1cbe2:	bf00      	nop
   1cbe4:	4000d000 	.word	0x4000d000

0001cbe8 <entropy_nrf5_get_entropy_isr>:
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1cbe8:	43db      	mvns	r3, r3
{
   1cbea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1cbee:	f013 0501 	ands.w	r5, r3, #1
{
   1cbf2:	460e      	mov	r6, r1
   1cbf4:	4614      	mov	r4, r2
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1cbf6:	d004      	beq.n	1cc02 <entropy_nrf5_get_entropy_isr+0x1a>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   1cbf8:	4823      	ldr	r0, [pc, #140]	; (1cc88 <entropy_nrf5_get_entropy_isr+0xa0>)
   1cbfa:	f7ff ffaf 	bl	1cb5c <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   1cbfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
   1cc02:	b3a2      	cbz	r2, 1cc6e <entropy_nrf5_get_entropy_isr+0x86>
	__asm__ volatile(
   1cc04:	f04f 0340 	mov.w	r3, #64	; 0x40
   1cc08:	f3ef 8811 	mrs	r8, BASEPRI
   1cc0c:	f383 8812 	msr	BASEPRI_MAX, r3
   1cc10:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   1cc14:	200d      	movs	r0, #13
   1cc16:	f7f9 fa89 	bl	1612c <arch_irq_is_enabled>
   1cc1a:	4607      	mov	r7, r0
		irq_disable(IRQN);
   1cc1c:	200d      	movs	r0, #13
   1cc1e:	f7f9 fa71 	bl	16104 <arch_irq_disable>
	__asm__ volatile(
   1cc22:	f388 8811 	msr	BASEPRI, r8
   1cc26:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1cc2a:	f8df a060 	ldr.w	sl, [pc, #96]	; 1cc8c <entropy_nrf5_get_entropy_isr+0xa4>
   1cc2e:	f8df 8060 	ldr.w	r8, [pc, #96]	; 1cc90 <entropy_nrf5_get_entropy_isr+0xa8>
   1cc32:	f8ca 5100 	str.w	r5, [sl, #256]	; 0x100
   1cc36:	f8da 3100 	ldr.w	r3, [sl, #256]	; 0x100
   1cc3a:	f44f 5900 	mov.w	r9, #8192	; 0x2000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1cc3e:	2301      	movs	r3, #1
   1cc40:	f8ca 3000 	str.w	r3, [sl]
   1cc44:	4625      	mov	r5, r4
   1cc46:	f8c8 9180 	str.w	r9, [r8, #384]	; 0x180
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1cc4a:	f8da 3100 	ldr.w	r3, [sl, #256]	; 0x100
			while (!nrf_rng_event_check(NRF_RNG,
   1cc4e:	b183      	cbz	r3, 1cc72 <entropy_nrf5_get_entropy_isr+0x8a>
			byte = random_byte_get();
   1cc50:	f7ff ff66 	bl	1cb20 <random_byte_get>
			if (byte < 0) {
   1cc54:	1e03      	subs	r3, r0, #0
   1cc56:	f8c8 9180 	str.w	r9, [r8, #384]	; 0x180
   1cc5a:	dbf6      	blt.n	1cc4a <entropy_nrf5_get_entropy_isr+0x62>
			buf[--len] = byte;
   1cc5c:	3d01      	subs	r5, #1
   1cc5e:	b2ad      	uxth	r5, r5
   1cc60:	5573      	strb	r3, [r6, r5]
		} while (len);
   1cc62:	2d00      	cmp	r5, #0
   1cc64:	d1f1      	bne.n	1cc4a <entropy_nrf5_get_entropy_isr+0x62>
		if (irq_enabled) {
   1cc66:	b117      	cbz	r7, 1cc6e <entropy_nrf5_get_entropy_isr+0x86>
			irq_enable(IRQN);
   1cc68:	200d      	movs	r0, #13
   1cc6a:	f7f9 fa3d 	bl	160e8 <arch_irq_enable>
	return cnt;
   1cc6e:	4620      	mov	r0, r4
   1cc70:	e7c5      	b.n	1cbfe <entropy_nrf5_get_entropy_isr+0x16>
	__asm__ volatile(
   1cc72:	f04f 0340 	mov.w	r3, #64	; 0x40
   1cc76:	f3ef 8011 	mrs	r0, BASEPRI
   1cc7a:	f383 8812 	msr	BASEPRI_MAX, r3
   1cc7e:	f3bf 8f6f 	isb	sy
	arch_cpu_atomic_idle(key);
   1cc82:	f7f9 f975 	bl	15f70 <arch_cpu_atomic_idle>
}
   1cc86:	e7e0      	b.n	1cc4a <entropy_nrf5_get_entropy_isr+0x62>
   1cc88:	200051c4 	.word	0x200051c4
   1cc8c:	4000d000 	.word	0x4000d000
   1cc90:	e000e100 	.word	0xe000e100

0001cc94 <entropy_nrf5_get_entropy>:
{
   1cc94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return z_impl_k_sem_take(sem, timeout);
   1cc98:	4f12      	ldr	r7, [pc, #72]	; (1cce4 <entropy_nrf5_get_entropy+0x50>)
   1cc9a:	460d      	mov	r5, r1
   1cc9c:	4614      	mov	r4, r2
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   1cc9e:	f107 0845 	add.w	r8, r7, #69	; 0x45
	while (len) {
   1cca2:	b914      	cbnz	r4, 1ccaa <entropy_nrf5_get_entropy+0x16>
}
   1cca4:	4620      	mov	r0, r4
   1cca6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ccaa:	f04f 33ff 	mov.w	r3, #4294967295
   1ccae:	f04f 32ff 	mov.w	r2, #4294967295
   1ccb2:	4638      	mov	r0, r7
   1ccb4:	f002 fe6e 	bl	1f994 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   1ccb8:	4622      	mov	r2, r4
   1ccba:	4629      	mov	r1, r5
   1ccbc:	4640      	mov	r0, r8
   1ccbe:	f7ff ff4d 	bl	1cb5c <rng_pool_get>
   1ccc2:	4606      	mov	r6, r0
	z_impl_k_sem_give(sem);
   1ccc4:	4638      	mov	r0, r7
   1ccc6:	f002 fe3f 	bl	1f948 <z_impl_k_sem_give>
		if (bytes == 0U) {
   1ccca:	b93e      	cbnz	r6, 1ccdc <entropy_nrf5_get_entropy+0x48>
	return z_impl_k_sem_take(sem, timeout);
   1cccc:	f04f 32ff 	mov.w	r2, #4294967295
   1ccd0:	f04f 33ff 	mov.w	r3, #4294967295
   1ccd4:	4804      	ldr	r0, [pc, #16]	; (1cce8 <entropy_nrf5_get_entropy+0x54>)
   1ccd6:	f002 fe5d 	bl	1f994 <z_impl_k_sem_take>
	while (len) {
   1ccda:	e7e6      	b.n	1ccaa <entropy_nrf5_get_entropy+0x16>
		len -= bytes;
   1ccdc:	1ba4      	subs	r4, r4, r6
   1ccde:	b2a4      	uxth	r4, r4
		buf += bytes;
   1cce0:	4435      	add	r5, r6
   1cce2:	e7de      	b.n	1cca2 <entropy_nrf5_get_entropy+0xe>
   1cce4:	20005194 	.word	0x20005194
   1cce8:	200051ac 	.word	0x200051ac

0001ccec <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_ENTROPY_INIT_PRIORITY,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
   1ccec:	b538      	push	{r3, r4, r5, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   1ccee:	4c19      	ldr	r4, [pc, #100]	; (1cd54 <entropy_nrf5_init+0x68>)
   1ccf0:	2201      	movs	r2, #1
   1ccf2:	4611      	mov	r1, r2
   1ccf4:	4620      	mov	r0, r4
   1ccf6:	f007 fdcc 	bl	24892 <z_impl_k_sem_init>
   1ccfa:	2201      	movs	r2, #1
   1ccfc:	2100      	movs	r1, #0
   1ccfe:	f104 0018 	add.w	r0, r4, #24
   1cd02:	f007 fdc6 	bl	24892 <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
   1cd06:	f240 4307 	movw	r3, #1031	; 0x407
   1cd0a:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
   1cd0e:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1cd12:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
   1cd14:	230c      	movs	r3, #12
   1cd16:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
   1cd1a:	2500      	movs	r5, #0
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
}

NRF_STATIC_INLINE void nrf_rng_error_correction_disable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
   1cd1c:	4b0e      	ldr	r3, [pc, #56]	; (1cd58 <entropy_nrf5_init+0x6c>)
   1cd1e:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
   1cd22:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
   1cd26:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   1cd2a:	f022 0201 	bic.w	r2, r2, #1
   1cd2e:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    p_reg->INTENSET = mask;
   1cd32:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1cd34:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
   1cd38:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   1cd3c:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   1cd40:	462a      	mov	r2, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1cd42:	6019      	str	r1, [r3, #0]
   1cd44:	200d      	movs	r0, #13
   1cd46:	f7f9 f9ff 	bl	16148 <z_arm_irq_priority_set>
	irq_enable(IRQN);
   1cd4a:	200d      	movs	r0, #13
   1cd4c:	f7f9 f9cc 	bl	160e8 <arch_irq_enable>

	return 0;
}
   1cd50:	4628      	mov	r0, r5
   1cd52:	bd38      	pop	{r3, r4, r5, pc}
   1cd54:	20005194 	.word	0x20005194
   1cd58:	4000d000 	.word	0x4000d000

0001cd5c <isr>:
{
   1cd5c:	b510      	push	{r4, lr}
	byte = random_byte_get();
   1cd5e:	f7ff fedf 	bl	1cb20 <random_byte_get>
	if (byte < 0) {
   1cd62:	2800      	cmp	r0, #0
   1cd64:	db20      	blt.n	1cda8 <isr+0x4c>
	uint8_t last  = rngp->last;
   1cd66:	4b17      	ldr	r3, [pc, #92]	; (1cdc4 <isr+0x68>)
   1cd68:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
   1cd6c:	f893 4031 	ldrb.w	r4, [r3, #49]	; 0x31
	uint8_t mask  = rngp->mask;
   1cd70:	f893 1033 	ldrb.w	r1, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
   1cd74:	1b14      	subs	r4, r2, r4
   1cd76:	ea31 0404 	bics.w	r4, r1, r4
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   1cd7a:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
   1cd7c:	d10d      	bne.n	1cd9a <isr+0x3e>
	uint8_t last  = rngp->last;
   1cd7e:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
   1cd82:	f893 4046 	ldrb.w	r4, [r3, #70]	; 0x46
	uint8_t mask  = rngp->mask;
   1cd86:	f893 1048 	ldrb.w	r1, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
   1cd8a:	1b14      	subs	r4, r2, r4
   1cd8c:	ea31 0404 	bics.w	r4, r1, r4
   1cd90:	d10b      	bne.n	1cdaa <isr+0x4e>
   1cd92:	4b0d      	ldr	r3, [pc, #52]	; (1cdc8 <isr+0x6c>)
   1cd94:	2201      	movs	r2, #1
   1cd96:	605a      	str	r2, [r3, #4]
}
   1cd98:	e00e      	b.n	1cdb8 <isr+0x5c>
	rngp->buffer[last] = byte;
   1cd9a:	189c      	adds	r4, r3, r2
	rngp->last = (last + 1) & mask;
   1cd9c:	3201      	adds	r2, #1
   1cd9e:	4011      	ands	r1, r2
	rngp->buffer[last] = byte;
   1cda0:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
	rngp->last = (last + 1) & mask;
   1cda4:	f883 1032 	strb.w	r1, [r3, #50]	; 0x32
}
   1cda8:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
   1cdaa:	189c      	adds	r4, r3, r2
	rngp->last = (last + 1) & mask;
   1cdac:	3201      	adds	r2, #1
   1cdae:	4011      	ands	r1, r2
	rngp->buffer[last] = byte;
   1cdb0:	f884 004a 	strb.w	r0, [r4, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
   1cdb4:	f883 1047 	strb.w	r1, [r3, #71]	; 0x47
	z_impl_k_sem_give(sem);
   1cdb8:	4804      	ldr	r0, [pc, #16]	; (1cdcc <isr+0x70>)
}
   1cdba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1cdbe:	f002 bdc3 	b.w	1f948 <z_impl_k_sem_give>
   1cdc2:	bf00      	nop
   1cdc4:	20005194 	.word	0x20005194
   1cdc8:	4000d000 	.word	0x4000d000
   1cdcc:	200051ac 	.word	0x200051ac

0001cdd0 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
   1cdd0:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   1cdd2:	2301      	movs	r3, #1
   1cdd4:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1cdd6:	4a0e      	ldr	r2, [pc, #56]	; (1ce10 <compare_int_lock+0x40>)
   1cdd8:	f3bf 8f5b 	dmb	ish
   1cddc:	43dc      	mvns	r4, r3
   1cdde:	e852 1f00 	ldrex	r1, [r2]
   1cde2:	ea01 0504 	and.w	r5, r1, r4
   1cde6:	e842 5600 	strex	r6, r5, [r2]
   1cdea:	2e00      	cmp	r6, #0
   1cdec:	d1f7      	bne.n	1cdde <compare_int_lock+0xe>
   1cdee:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1cdf2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1cdf6:	4082      	lsls	r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   1cdf8:	4806      	ldr	r0, [pc, #24]	; (1ce14 <compare_int_lock+0x44>)
   1cdfa:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
   1cdfe:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1ce02:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
   1ce06:	420b      	tst	r3, r1
}
   1ce08:	bf14      	ite	ne
   1ce0a:	2001      	movne	r0, #1
   1ce0c:	2000      	moveq	r0, #0
   1ce0e:	bd70      	pop	{r4, r5, r6, pc}
   1ce10:	200051ec 	.word	0x200051ec
   1ce14:	40011000 	.word	0x40011000

0001ce18 <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
   1ce18:	b470      	push	{r4, r5, r6}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
   1ce1a:	490e      	ldr	r1, [pc, #56]	; (1ce54 <sys_clock_timeout_handler+0x3c>)
   1ce1c:	e9d1 3400 	ldrd	r3, r4, [r1]
   1ce20:	1ad0      	subs	r0, r2, r3

	last_count += dticks * CYC_PER_TICK;
   1ce22:	18c3      	adds	r3, r0, r3
   1ce24:	f144 0400 	adc.w	r4, r4, #0
	return absolute_time & COUNTER_MAX;
   1ce28:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	last_count += dticks * CYC_PER_TICK;
   1ce2c:	e9c1 3400 	strd	r3, r4, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   1ce30:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
   1ce34:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   1ce38:	d209      	bcs.n	1ce4e <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   1ce3a:	4b07      	ldr	r3, [pc, #28]	; (1ce58 <sys_clock_timeout_handler+0x40>)
   1ce3c:	681b      	ldr	r3, [r3, #0]
   1ce3e:	0a1a      	lsrs	r2, r3, #8
   1ce40:	061b      	lsls	r3, r3, #24
   1ce42:	199c      	adds	r4, r3, r6
   1ce44:	4b05      	ldr	r3, [pc, #20]	; (1ce5c <sys_clock_timeout_handler+0x44>)
   1ce46:	f142 0500 	adc.w	r5, r2, #0
   1ce4a:	e9c3 4500 	strd	r4, r5, [r3]
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(dticks);
}
   1ce4e:	bc70      	pop	{r4, r5, r6}
	sys_clock_announce(dticks);
   1ce50:	f003 bb3c 	b.w	204cc <sys_clock_announce>
   1ce54:	20001fb0 	.word	0x20001fb0
   1ce58:	200051f0 	.word	0x200051f0
   1ce5c:	20001fb8 	.word	0x20001fb8

0001ce60 <compare_int_unlock>:
	if (key) {
   1ce60:	b311      	cbz	r1, 1cea8 <compare_int_unlock+0x48>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1ce62:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
   1ce66:	2301      	movs	r3, #1
   1ce68:	4a10      	ldr	r2, [pc, #64]	; (1ceac <compare_int_unlock+0x4c>)
   1ce6a:	4083      	lsls	r3, r0
   1ce6c:	e852 cf00 	ldrex	ip, [r2]
   1ce70:	ea4c 0c03 	orr.w	ip, ip, r3
   1ce74:	e842 c100 	strex	r1, ip, [r2]
   1ce78:	2900      	cmp	r1, #0
   1ce7a:	d1f7      	bne.n	1ce6c <compare_int_unlock+0xc>
   1ce7c:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
   1ce80:	4a0b      	ldr	r2, [pc, #44]	; (1ceb0 <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1ce82:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1ce86:	4083      	lsls	r3, r0
   1ce88:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1ce8c:	4b09      	ldr	r3, [pc, #36]	; (1ceb4 <compare_int_unlock+0x54>)
   1ce8e:	f3bf 8f5b 	dmb	ish
   1ce92:	681b      	ldr	r3, [r3, #0]
   1ce94:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   1ce98:	40c3      	lsrs	r3, r0
   1ce9a:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1ce9c:	bf42      	ittt	mi
   1ce9e:	4b06      	ldrmi	r3, [pc, #24]	; (1ceb8 <compare_int_unlock+0x58>)
   1cea0:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
   1cea4:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
   1cea8:	4770      	bx	lr
   1ceaa:	bf00      	nop
   1ceac:	200051ec 	.word	0x200051ec
   1ceb0:	40011000 	.word	0x40011000
   1ceb4:	200051e8 	.word	0x200051e8
   1ceb8:	e000e100 	.word	0xe000e100

0001cebc <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   1cebc:	4b0d      	ldr	r3, [pc, #52]	; (1cef4 <z_nrf_rtc_timer_read+0x38>)
   1cebe:	6818      	ldr	r0, [r3, #0]
   1cec0:	0a01      	lsrs	r1, r0, #8
   1cec2:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
   1cec4:	f3bf 8f5f 	dmb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
   1cec8:	4b0b      	ldr	r3, [pc, #44]	; (1cef8 <z_nrf_rtc_timer_read+0x3c>)
   1ceca:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
   1cece:	1818      	adds	r0, r3, r0
   1ced0:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   1ced4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   1ced8:	d20a      	bcs.n	1cef0 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
   1ceda:	4b08      	ldr	r3, [pc, #32]	; (1cefc <z_nrf_rtc_timer_read+0x40>)
   1cedc:	e9d3 2300 	ldrd	r2, r3, [r3]
   1cee0:	4290      	cmp	r0, r2
   1cee2:	eb71 0303 	sbcs.w	r3, r1, r3
   1cee6:	d203      	bcs.n	1cef0 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
   1cee8:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   1ceec:	f141 0100 	adc.w	r1, r1, #0
}
   1cef0:	4770      	bx	lr
   1cef2:	bf00      	nop
   1cef4:	200051f0 	.word	0x200051f0
   1cef8:	40011000 	.word	0x40011000
   1cefc:	20001fb8 	.word	0x20001fb8

0001cf00 <compare_set>:
{
   1cf00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cf04:	4616      	mov	r6, r2
   1cf06:	461f      	mov	r7, r3
   1cf08:	4604      	mov	r4, r0
	key = compare_int_lock(chan);
   1cf0a:	f7ff ff61 	bl	1cdd0 <compare_int_lock>
   1cf0e:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
   1cf10:	f7ff ffd4 	bl	1cebc <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   1cf14:	42b0      	cmp	r0, r6
   1cf16:	eb71 0307 	sbcs.w	r3, r1, r7
   1cf1a:	d251      	bcs.n	1cfc0 <compare_set+0xc0>
		if (target_time - curr_time > COUNTER_HALF_SPAN) {
   1cf1c:	4b3a      	ldr	r3, [pc, #232]	; (1d008 <compare_set+0x108>)
   1cf1e:	1a30      	subs	r0, r6, r0
   1cf20:	eb67 0101 	sbc.w	r1, r7, r1
   1cf24:	4298      	cmp	r0, r3
   1cf26:	f171 0100 	sbcs.w	r1, r1, #0
   1cf2a:	d26a      	bcs.n	1d002 <compare_set+0x102>
		if (target_time != cc_data[chan].target_time) {
   1cf2c:	4b37      	ldr	r3, [pc, #220]	; (1d00c <compare_set+0x10c>)
   1cf2e:	eb03 1304 	add.w	r3, r3, r4, lsl #4
   1cf32:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   1cf36:	429f      	cmp	r7, r3
   1cf38:	bf08      	it	eq
   1cf3a:	4296      	cmpeq	r6, r2
   1cf3c:	d04e      	beq.n	1cfdc <compare_set+0xdc>
    p_reg->EVTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   1cf3e:	4934      	ldr	r1, [pc, #208]	; (1d010 <compare_set+0x110>)
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1cf40:	f44f 3980 	mov.w	r9, #65536	; 0x10000
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   1cf44:	f104 0550 	add.w	r5, r4, #80	; 0x50
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1cf48:	fa09 f904 	lsl.w	r9, r9, r4
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   1cf4c:	00ad      	lsls	r5, r5, #2
   1cf4e:	f8c1 9348 	str.w	r9, [r1, #840]	; 0x348
	event_clear(chan);
   1cf52:	4620      	mov	r0, r4
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1cf54:	b2ad      	uxth	r5, r5
   1cf56:	f007 f90b 	bl	24170 <event_clear>
	return absolute_time & COUNTER_MAX;
   1cf5a:	f026 4b7f 	bic.w	fp, r6, #4278190080	; 0xff000000
   1cf5e:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
    p_reg->CC[ch] = cc_val;
   1cf62:	f504 73a8 	add.w	r3, r4, #336	; 0x150
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
   1cf66:	4a2b      	ldr	r2, [pc, #172]	; (1d014 <compare_set+0x114>)
   1cf68:	9301      	str	r3, [sp, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1cf6a:	f505 3588 	add.w	r5, r5, #69632	; 0x11000
	uint32_t cc_val = req_cc;
   1cf6e:	46dc      	mov	ip, fp
	uint32_t cc_inc = MIN_CYCLES_FROM_NOW;
   1cf70:	f04f 0a03 	mov.w	sl, #3
    p_reg->CC[ch] = cc_val;
   1cf74:	9b01      	ldr	r3, [sp, #4]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   1cf76:	f02c 407f 	bic.w	r0, ip, #4278190080	; 0xff000000
   1cf7a:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    p_reg->EVTENSET = mask;
   1cf7e:	f8c1 9344 	str.w	r9, [r1, #836]	; 0x344
     return p_reg->COUNTER;
   1cf82:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   1cf86:	f06f 0002 	mvn.w	r0, #2
   1cf8a:	eba0 0008 	sub.w	r0, r0, r8
   1cf8e:	4460      	add	r0, ip
   1cf90:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
   1cf94:	4290      	cmp	r0, r2
   1cf96:	d921      	bls.n	1cfdc <compare_set+0xdc>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1cf98:	6828      	ldr	r0, [r5, #0]
			if (event_check(chan)) {
   1cf9a:	b160      	cbz	r0, 1cfb6 <compare_set+0xb6>
     return p_reg->COUNTER;
   1cf9c:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   1cfa0:	eba8 000b 	sub.w	r0, r8, fp
   1cfa4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
				if (counter_sub(now, req_cc) > COUNTER_HALF_SPAN) {
   1cfa8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1cfac:	d916      	bls.n	1cfdc <compare_set+0xdc>
					event_clear(chan);
   1cfae:	4620      	mov	r0, r4
   1cfb0:	f007 f8de 	bl	24170 <event_clear>
   1cfb4:	4a17      	ldr	r2, [pc, #92]	; (1d014 <compare_set+0x114>)
			cc_val = now + cc_inc;
   1cfb6:	eb0a 0c08 	add.w	ip, sl, r8
			cc_inc++;
   1cfba:	f10a 0a01 	add.w	sl, sl, #1
	for (;;) {
   1cfbe:	e7d9      	b.n	1cf74 <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
   1cfc0:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1cfc2:	4a15      	ldr	r2, [pc, #84]	; (1d018 <compare_set+0x118>)
   1cfc4:	f3bf 8f5b 	dmb	ish
   1cfc8:	40a3      	lsls	r3, r4
   1cfca:	e852 0f00 	ldrex	r0, [r2]
   1cfce:	4318      	orrs	r0, r3
   1cfd0:	e842 0100 	strex	r1, r0, [r2]
   1cfd4:	2900      	cmp	r1, #0
   1cfd6:	d1f8      	bne.n	1cfca <compare_set+0xca>
   1cfd8:	f3bf 8f5b 	dmb	ish
	cc_data[chan].target_time = target_time;
   1cfdc:	490b      	ldr	r1, [pc, #44]	; (1d00c <compare_set+0x10c>)
	cc_data[chan].callback = handler;
   1cfde:	980c      	ldr	r0, [sp, #48]	; 0x30
	cc_data[chan].target_time = target_time;
   1cfe0:	0123      	lsls	r3, r4, #4
   1cfe2:	eb01 1204 	add.w	r2, r1, r4, lsl #4
   1cfe6:	e9c2 6702 	strd	r6, r7, [r2, #8]
	cc_data[chan].callback = handler;
   1cfea:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
   1cfec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1cfee:	6053      	str	r3, [r2, #4]
	return ret;
   1cff0:	2500      	movs	r5, #0
	compare_int_unlock(chan, key);
   1cff2:	4620      	mov	r0, r4
   1cff4:	9900      	ldr	r1, [sp, #0]
   1cff6:	f7ff ff33 	bl	1ce60 <compare_int_unlock>
}
   1cffa:	4628      	mov	r0, r5
   1cffc:	b003      	add	sp, #12
   1cffe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return -EINVAL;
   1d002:	f06f 0515 	mvn.w	r5, #21
   1d006:	e7f4      	b.n	1cff2 <compare_set+0xf2>
   1d008:	00800001 	.word	0x00800001
   1d00c:	20001fa0 	.word	0x20001fa0
   1d010:	40011000 	.word	0x40011000
   1d014:	007ffffd 	.word	0x007ffffd
   1d018:	200051e8 	.word	0x200051e8

0001d01c <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
   1d01c:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   1d01e:	4b19      	ldr	r3, [pc, #100]	; (1d084 <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
   1d020:	4d19      	ldr	r5, [pc, #100]	; (1d088 <sys_clock_driver_init+0x6c>)
   1d022:	2400      	movs	r4, #0
   1d024:	f04f 30ff 	mov.w	r0, #4294967295
   1d028:	f04f 31ff 	mov.w	r1, #4294967295
   1d02c:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
   1d030:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
   1d034:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1d038:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1d03c:	4b13      	ldr	r3, [pc, #76]	; (1d08c <sys_clock_driver_init+0x70>)
   1d03e:	2602      	movs	r6, #2
   1d040:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   1d044:	2101      	movs	r1, #1
   1d046:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
   1d04a:	2011      	movs	r0, #17
   1d04c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   1d050:	4622      	mov	r2, r4
   1d052:	f7f9 f879 	bl	16148 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   1d056:	2011      	movs	r0, #17
   1d058:	f7f9 f846 	bl	160e8 <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   1d05c:	4a0c      	ldr	r2, [pc, #48]	; (1d090 <sys_clock_driver_init+0x74>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   1d05e:	2301      	movs	r3, #1
   1d060:	60ab      	str	r3, [r5, #8]
   1d062:	602b      	str	r3, [r5, #0]
   1d064:	6013      	str	r3, [r2, #0]
	}

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		MAX_CYCLES : CYC_PER_TICK;

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   1d066:	4b0b      	ldr	r3, [pc, #44]	; (1d094 <sys_clock_driver_init+0x78>)
   1d068:	4a0b      	ldr	r2, [pc, #44]	; (1d098 <sys_clock_driver_init+0x7c>)
   1d06a:	9300      	str	r3, [sp, #0]
   1d06c:	9401      	str	r4, [sp, #4]
   1d06e:	2300      	movs	r3, #0
   1d070:	4620      	mov	r0, r4
   1d072:	f7ff ff45 	bl	1cf00 <compare_set>

	z_nrf_clock_control_lf_on(mode);
   1d076:	4630      	mov	r0, r6
   1d078:	f7ff fa12 	bl	1c4a0 <z_nrf_clock_control_lf_on>

	return 0;
}
   1d07c:	4620      	mov	r0, r4
   1d07e:	b002      	add	sp, #8
   1d080:	bd70      	pop	{r4, r5, r6, pc}
   1d082:	bf00      	nop
   1d084:	20001fa0 	.word	0x20001fa0
   1d088:	40011000 	.word	0x40011000
   1d08c:	e000e100 	.word	0xe000e100
   1d090:	200051ec 	.word	0x200051ec
   1d094:	0001ce19 	.word	0x0001ce19
   1d098:	007fffff 	.word	0x007fffff

0001d09c <rtc_nrf_isr>:
{
   1d09c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
   1d0a0:	4c2b      	ldr	r4, [pc, #172]	; (1d150 <rtc_nrf_isr+0xb4>)
   1d0a2:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   1d0a6:	0799      	lsls	r1, r3, #30
   1d0a8:	d50b      	bpl.n	1d0c2 <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d0aa:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   1d0ae:	b143      	cbz	r3, 1d0c2 <rtc_nrf_isr+0x26>
		overflow_cnt++;
   1d0b0:	4a28      	ldr	r2, [pc, #160]	; (1d154 <rtc_nrf_isr+0xb8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1d0b2:	2300      	movs	r3, #0
   1d0b4:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   1d0b8:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   1d0bc:	6813      	ldr	r3, [r2, #0]
   1d0be:	3301      	adds	r3, #1
   1d0c0:	6013      	str	r3, [r2, #0]
    return p_reg->INTENSET & mask;
   1d0c2:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   1d0c6:	03da      	lsls	r2, r3, #15
   1d0c8:	d523      	bpl.n	1d112 <rtc_nrf_isr+0x76>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1d0ca:	f3bf 8f5b 	dmb	ish
   1d0ce:	4b22      	ldr	r3, [pc, #136]	; (1d158 <rtc_nrf_isr+0xbc>)
   1d0d0:	e853 2f00 	ldrex	r2, [r3]
   1d0d4:	f022 0101 	bic.w	r1, r2, #1
   1d0d8:	e843 1000 	strex	r0, r1, [r3]
   1d0dc:	2800      	cmp	r0, #0
   1d0de:	d1f7      	bne.n	1d0d0 <rtc_nrf_isr+0x34>
   1d0e0:	f3bf 8f5b 	dmb	ish
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
   1d0e4:	07d3      	lsls	r3, r2, #31
   1d0e6:	d402      	bmi.n	1d0ee <rtc_nrf_isr+0x52>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d0e8:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
   1d0ec:	b18b      	cbz	r3, 1d112 <rtc_nrf_isr+0x76>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1d0ee:	2500      	movs	r5, #0
   1d0f0:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
   1d0f4:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		curr_time = z_nrf_rtc_timer_read();
   1d0f8:	f7ff fee0 	bl	1cebc <z_nrf_rtc_timer_read>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1d0fc:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1d100:	b672      	cpsid	i
		expire_time = cc_data[chan].target_time;
   1d102:	4b16      	ldr	r3, [pc, #88]	; (1d15c <rtc_nrf_isr+0xc0>)
   1d104:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
   1d108:	42b0      	cmp	r0, r6
   1d10a:	41b9      	sbcs	r1, r7
   1d10c:	d204      	bcs.n	1d118 <rtc_nrf_isr+0x7c>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1d10e:	f382 8810 	msr	PRIMASK, r2
}
   1d112:	b003      	add	sp, #12
   1d114:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   1d118:	f04f 38ff 	mov.w	r8, #4294967295
   1d11c:	f04f 39ff 	mov.w	r9, #4294967295
   1d120:	e9c3 8902 	strd	r8, r9, [r3, #8]
			user_context = cc_data[chan].user_context;
   1d124:	e9d3 1000 	ldrd	r1, r0, [r3]
			cc_data[chan].callback = NULL;
   1d128:	601d      	str	r5, [r3, #0]
    p_reg->EVTENCLR = mask;
   1d12a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1d12e:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1d132:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
   1d136:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
   1d13a:	f382 8810 	msr	PRIMASK, r2
		if (handler) {
   1d13e:	2900      	cmp	r1, #0
   1d140:	d0e7      	beq.n	1d112 <rtc_nrf_isr+0x76>
			handler(chan, expire_time, user_context);
   1d142:	9000      	str	r0, [sp, #0]
   1d144:	4632      	mov	r2, r6
   1d146:	463b      	mov	r3, r7
   1d148:	4628      	mov	r0, r5
   1d14a:	4788      	blx	r1
   1d14c:	e7e1      	b.n	1d112 <rtc_nrf_isr+0x76>
   1d14e:	bf00      	nop
   1d150:	40011000 	.word	0x40011000
   1d154:	200051f0 	.word	0x200051f0
   1d158:	200051e8 	.word	0x200051e8
   1d15c:	20001fa0 	.word	0x20001fa0

0001d160 <sys_clock_set_timeout>:
	if (ticks == K_TICKS_FOREVER) {
   1d160:	1c43      	adds	r3, r0, #1
{
   1d162:	b513      	push	{r0, r1, r4, lr}
	if (ticks == K_TICKS_FOREVER) {
   1d164:	d022      	beq.n	1d1ac <sys_clock_set_timeout+0x4c>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
   1d166:	2801      	cmp	r0, #1
   1d168:	dd22      	ble.n	1d1b0 <sys_clock_set_timeout+0x50>
   1d16a:	4a12      	ldr	r2, [pc, #72]	; (1d1b4 <sys_clock_set_timeout+0x54>)
   1d16c:	4b12      	ldr	r3, [pc, #72]	; (1d1b8 <sys_clock_set_timeout+0x58>)
   1d16e:	4290      	cmp	r0, r2
   1d170:	bfd4      	ite	le
   1d172:	4604      	movle	r4, r0
   1d174:	461c      	movgt	r4, r3
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   1d176:	f7ff fea1 	bl	1cebc <z_nrf_rtc_timer_read>
   1d17a:	4b10      	ldr	r3, [pc, #64]	; (1d1bc <sys_clock_set_timeout+0x5c>)
	if (cyc > MAX_CYCLES) {
   1d17c:	490e      	ldr	r1, [pc, #56]	; (1d1b8 <sys_clock_set_timeout+0x58>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   1d17e:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d182:	1a80      	subs	r0, r0, r2
		cyc = 0;
   1d184:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1d188:	bf28      	it	cs
   1d18a:	2400      	movcs	r4, #0
	cyc += unannounced;
   1d18c:	4404      	add	r4, r0
	if (cyc > MAX_CYCLES) {
   1d18e:	428c      	cmp	r4, r1
   1d190:	bf28      	it	cs
   1d192:	460c      	movcs	r4, r1
	uint64_t target_time = cyc + last_count;
   1d194:	18a2      	adds	r2, r4, r2
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   1d196:	490a      	ldr	r1, [pc, #40]	; (1d1c0 <sys_clock_set_timeout+0x60>)
   1d198:	9100      	str	r1, [sp, #0]
	uint64_t target_time = cyc + last_count;
   1d19a:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   1d19e:	9001      	str	r0, [sp, #4]
   1d1a0:	f143 0300 	adc.w	r3, r3, #0
   1d1a4:	f7ff feac 	bl	1cf00 <compare_set>
}
   1d1a8:	b002      	add	sp, #8
   1d1aa:	bd10      	pop	{r4, pc}
		cyc = MAX_TICKS * CYC_PER_TICK;
   1d1ac:	4c02      	ldr	r4, [pc, #8]	; (1d1b8 <sys_clock_set_timeout+0x58>)
   1d1ae:	e7e2      	b.n	1d176 <sys_clock_set_timeout+0x16>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
   1d1b0:	2401      	movs	r4, #1
   1d1b2:	e7e0      	b.n	1d176 <sys_clock_set_timeout+0x16>
   1d1b4:	007ffffe 	.word	0x007ffffe
   1d1b8:	007fffff 	.word	0x007fffff
   1d1bc:	20001fb0 	.word	0x20001fb0
   1d1c0:	0001ce19 	.word	0x0001ce19

0001d1c4 <sys_clock_elapsed>:
{
   1d1c4:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   1d1c6:	f7ff fe79 	bl	1cebc <z_nrf_rtc_timer_read>
   1d1ca:	4b02      	ldr	r3, [pc, #8]	; (1d1d4 <sys_clock_elapsed+0x10>)
   1d1cc:	681b      	ldr	r3, [r3, #0]
}
   1d1ce:	1ac0      	subs	r0, r0, r3
   1d1d0:	bd08      	pop	{r3, pc}
   1d1d2:	bf00      	nop
   1d1d4:	20001fb0 	.word	0x20001fb0

0001d1d8 <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
   1d1d8:	b5f0      	push	{r4, r5, r6, r7, lr}
        case 0: return NRF_P0;
   1d1da:	4e1c      	ldr	r6, [pc, #112]	; (1d24c <pinctrl_configure_pins+0x74>)
   1d1dc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   1d1e0:	4281      	cmp	r1, r0
   1d1e2:	d101      	bne.n	1d1e8 <pinctrl_configure_pins+0x10>
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
   1d1e4:	2000      	movs	r0, #0
   1d1e6:	e010      	b.n	1d20a <pinctrl_configure_pins+0x32>
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   1d1e8:	6803      	ldr	r3, [r0, #0]
		uint32_t pin = NRF_GET_PIN(pins[i]);
   1d1ea:	f003 047f 	and.w	r4, r3, #127	; 0x7f
			pin = 0xFFFFFFFFU;
   1d1ee:	2c7f      	cmp	r4, #127	; 0x7f
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   1d1f0:	f3c3 2543 	ubfx	r5, r3, #9, #4
		switch (NRF_GET_FUN(pins[i])) {
   1d1f4:	ea4f 4313 	mov.w	r3, r3, lsr #16
			pin = 0xFFFFFFFFU;
   1d1f8:	bf08      	it	eq
   1d1fa:	f04f 34ff 	moveq.w	r4, #4294967295
		switch (NRF_GET_FUN(pins[i])) {
   1d1fe:	2b0b      	cmp	r3, #11
   1d200:	d004      	beq.n	1d20c <pinctrl_configure_pins+0x34>
   1d202:	2b0c      	cmp	r3, #12
   1d204:	d01f      	beq.n	1d246 <pinctrl_configure_pins+0x6e>
   1d206:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   1d20a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			NRF_PSEL_TWIM(reg, SCL) = pin;
   1d20c:	f8c2 4508 	str.w	r4, [r2, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
   1d210:	b905      	cbnz	r5, 1d214 <pinctrl_configure_pins+0x3c>
				drive = NRF_DRIVE_S0D1;
   1d212:	2506      	movs	r5, #6
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
   1d214:	f850 3b04 	ldr.w	r3, [r0], #4
    *p_pin = pin_number & 0x1F;
   1d218:	f004 071f 	and.w	r7, r4, #31
   1d21c:	f3c3 3e40 	ubfx	lr, r3, #13, #1
    return pin_number >> 5;
   1d220:	0964      	lsrs	r4, r4, #5
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
   1d222:	f3c3 13c1 	ubfx	r3, r3, #7, #2
        case 0: return NRF_P0;
   1d226:	2c01      	cmp	r4, #1
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   1d228:	ea4f 0383 	mov.w	r3, r3, lsl #2
        case 0: return NRF_P0;
   1d22c:	bf0c      	ite	eq
   1d22e:	46b4      	moveq	ip, r6
   1d230:	f04f 4ca0 	movne.w	ip, #1342177280	; 0x50000000
           ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos) |
   1d234:	ea43 034e 	orr.w	r3, r3, lr, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
   1d238:	f507 74e0 	add.w	r4, r7, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   1d23c:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
   1d240:	f84c 3024 	str.w	r3, [ip, r4, lsl #2]
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   1d244:	e7cc      	b.n	1d1e0 <pinctrl_configure_pins+0x8>
			NRF_PSEL_TWIM(reg, SDA) = pin;
   1d246:	f8c2 450c 	str.w	r4, [r2, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
   1d24a:	e7e1      	b.n	1d210 <pinctrl_configure_pins+0x38>
   1d24c:	50000300 	.word	0x50000300

0001d250 <multithreading_lock_acquire>:
#include "multithreading_lock.h"

static K_MUTEX_DEFINE(mpsl_lock);

int multithreading_lock_acquire(k_timeout_t timeout)
{
   1d250:	4602      	mov	r2, r0
   1d252:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
   1d254:	4801      	ldr	r0, [pc, #4]	; (1d25c <multithreading_lock_acquire+0xc>)
   1d256:	f002 ba8d 	b.w	1f774 <z_impl_k_mutex_lock>
   1d25a:	bf00      	nop
   1d25c:	2000081c 	.word	0x2000081c

0001d260 <multithreading_lock_release>:
	return z_impl_k_mutex_unlock(mutex);
   1d260:	4801      	ldr	r0, [pc, #4]	; (1d268 <multithreading_lock_release+0x8>)
   1d262:	f002 bb01 	b.w	1f868 <z_impl_k_mutex_unlock>
   1d266:	bf00      	nop
   1d268:	2000081c 	.word	0x2000081c

0001d26c <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   1d26c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	z_impl_log_panic();
   1d26e:	f7f8 f8e7 	bl	15440 <z_impl_log_panic>
	ARG_UNUSED(reason);

	LOG_PANIC();

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
   1d272:	4b07      	ldr	r3, [pc, #28]	; (1d290 <k_sys_fatal_error_handler+0x24>)
   1d274:	9305      	str	r3, [sp, #20]
   1d276:	2302      	movs	r3, #2
   1d278:	9304      	str	r3, [sp, #16]
   1d27a:	4806      	ldr	r0, [pc, #24]	; (1d294 <k_sys_fatal_error_handler+0x28>)
   1d27c:	2300      	movs	r3, #0
   1d27e:	aa04      	add	r2, sp, #16
   1d280:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1d284:	f7f8 f9bc 	bl	15600 <z_impl_z_log_msg_static_create>
		sys_arch_reboot(0);
   1d288:	2000      	movs	r0, #0
   1d28a:	f7f9 fd87 	bl	16d9c <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
   1d28e:	bf00      	nop
   1d290:	00027820 	.word	0x00027820
   1d294:	000255ec 	.word	0x000255ec

0001d298 <sdc_assertion_handler>:
	bt_ctlr_assert_handle((char *) file, line);
}

#else /* !IS_ENABLED(CONFIG_BT_CTLR_ASSERT_HANDLER) */
void sdc_assertion_handler(const char *const file, const uint32_t line)
{
   1d298:	b598      	push	{r3, r4, r7, lr}
   1d29a:	af00      	add	r7, sp, #0
	LOG_ERR("SoftDevice Controller ASSERT: %s, %d", file, line);
   1d29c:	466c      	mov	r4, sp
   1d29e:	b08a      	sub	sp, #40	; 0x28
   1d2a0:	466a      	mov	r2, sp
   1d2a2:	4b0c      	ldr	r3, [pc, #48]	; (1d2d4 <sdc_assertion_handler+0x3c>)
   1d2a4:	61d1      	str	r1, [r2, #28]
   1d2a6:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1d2aa:	f44f 7300 	mov.w	r3, #512	; 0x200
   1d2ae:	8413      	strh	r3, [r2, #32]
   1d2b0:	4b09      	ldr	r3, [pc, #36]	; (1d2d8 <sdc_assertion_handler+0x40>)
   1d2b2:	f842 3f10 	str.w	r3, [r2, #16]!
   1d2b6:	4809      	ldr	r0, [pc, #36]	; (1d2dc <sdc_assertion_handler+0x44>)
   1d2b8:	2300      	movs	r3, #0
   1d2ba:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   1d2be:	f7f8 f99f 	bl	15600 <z_impl_z_log_msg_static_create>
   1d2c2:	46a5      	mov	sp, r4
	k_oops();
   1d2c4:	4040      	eors	r0, r0
   1d2c6:	f380 8811 	msr	BASEPRI, r0
   1d2ca:	f04f 0003 	mov.w	r0, #3
   1d2ce:	df02      	svc	2
}
   1d2d0:	46bd      	mov	sp, r7
   1d2d2:	bd98      	pop	{r3, r4, r7, pc}
   1d2d4:	0002783d 	.word	0x0002783d
   1d2d8:	01000004 	.word	0x01000004
   1d2dc:	000255cc 	.word	0x000255cc

0001d2e0 <rand_prio_low_vector_get>:
}

static const struct device *entropy_source = DEVICE_DT_GET(DT_NODELABEL(rng));

static uint8_t rand_prio_low_vector_get(uint8_t *p_buff, uint8_t length)
{
   1d2e0:	b538      	push	{r3, r4, r5, lr}
   1d2e2:	4604      	mov	r4, r0
static inline int entropy_get_entropy_isr(const struct device *dev,
					  uint8_t *buffer,
					  uint16_t length,
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
   1d2e4:	4807      	ldr	r0, [pc, #28]	; (1d304 <rand_prio_low_vector_get+0x24>)
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   1d2e6:	6883      	ldr	r3, [r0, #8]
   1d2e8:	685d      	ldr	r5, [r3, #4]
   1d2ea:	460a      	mov	r2, r1
   1d2ec:	b135      	cbz	r5, 1d2fc <rand_prio_low_vector_get+0x1c>
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   1d2ee:	2300      	movs	r3, #0
   1d2f0:	4621      	mov	r1, r4
   1d2f2:	47a8      	blx	r5
	int ret = entropy_get_entropy_isr(entropy_source, p_buff, length, 0);

	__ASSERT(ret >= 0, "The entropy source returned an error in the low priority context");
	return ret >= 0 ? ret : 0;
   1d2f4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   1d2f8:	b2c0      	uxtb	r0, r0
   1d2fa:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTSUP;
   1d2fc:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1d300:	e7f8      	b.n	1d2f4 <rand_prio_low_vector_get+0x14>
   1d302:	bf00      	nop
   1d304:	00025338 	.word	0x00025338

0001d308 <receive_signal_raise>:
 *
 * @return N/A
 */
static inline int mpsl_work_submit(struct k_work *work)
{
	return k_work_submit_to_queue(&mpsl_work_q, work);
   1d308:	4901      	ldr	r1, [pc, #4]	; (1d310 <receive_signal_raise+0x8>)
   1d30a:	4802      	ldr	r0, [pc, #8]	; (1d314 <receive_signal_raise+0xc>)
   1d30c:	f007 bb70 	b.w	249f0 <k_work_submit_to_queue>
   1d310:	200051f4 	.word	0x200051f4
   1d314:	20002cc8 	.word	0x20002cc8

0001d318 <rand_prio_low_vector_get_blocking>:
	__ASSERT(ret >= 0, "The entropy source returned an error in the high priority context");
	return ret >= 0 ? ret : 0;
}

static void rand_prio_low_vector_get_blocking(uint8_t *p_buff, uint8_t length)
{
   1d318:	b410      	push	{r4}
   1d31a:	4603      	mov	r3, r0
   1d31c:	460a      	mov	r2, r1
	return api->get_entropy(dev, buffer, length);
   1d31e:	4804      	ldr	r0, [pc, #16]	; (1d330 <rand_prio_low_vector_get_blocking+0x18>)
   1d320:	6881      	ldr	r1, [r0, #8]
   1d322:	680c      	ldr	r4, [r1, #0]
   1d324:	4619      	mov	r1, r3
   1d326:	4623      	mov	r3, r4
	int err = entropy_get_entropy(entropy_source, p_buff, length);

	__ASSERT(err == 0, "The entropy source returned an error in a blocking call");
	(void) err;
}
   1d328:	f85d 4b04 	ldr.w	r4, [sp], #4
   1d32c:	4718      	bx	r3
   1d32e:	bf00      	nop
   1d330:	00025338 	.word	0x00025338

0001d334 <hci_driver_init>:

	(void)sdc_hci_cmd_vs_zephyr_write_bd_addr(bd_addr);
}

static int hci_driver_init(const struct device *unused)
{
   1d334:	b5b0      	push	{r4, r5, r7, lr}
   1d336:	b082      	sub	sp, #8
	ARG_UNUSED(unused);
	int err = 0;

	bt_hci_driver_register(&drv);
   1d338:	4835      	ldr	r0, [pc, #212]	; (1d410 <hci_driver_init+0xdc>)
{
   1d33a:	af00      	add	r7, sp, #0
	bt_hci_driver_register(&drv);
   1d33c:	f7fa ffca 	bl	182d4 <bt_hci_driver_register>

	err = sdc_init(sdc_assertion_handler);
   1d340:	4834      	ldr	r0, [pc, #208]	; (1d414 <hci_driver_init+0xe0>)
   1d342:	f7e4 f815 	bl	1370 <sdc_init>
		err = sdc_support_adv();
   1d346:	f7e4 f88d 	bl	1464 <sdc_support_adv>
		if (err) {
   1d34a:	b120      	cbz	r0, 1d356 <hci_driver_init+0x22>
			return -ENOTSUP;
   1d34c:	f06f 0085 	mvn.w	r0, #133	; 0x85
	if (err) {
		return err;
	}

	return err;
}
   1d350:	3708      	adds	r7, #8
   1d352:	46bd      	mov	sp, r7
   1d354:	bdb0      	pop	{r4, r5, r7, pc}
		err = sdc_support_peripheral();
   1d356:	f7e4 f8b5 	bl	14c4 <sdc_support_peripheral>
		if (err) {
   1d35a:	2800      	cmp	r0, #0
   1d35c:	d1f6      	bne.n	1d34c <hci_driver_init+0x18>
			err = sdc_support_dle_peripheral();
   1d35e:	f7e4 f891 	bl	1484 <sdc_support_dle_peripheral>
			if (err) {
   1d362:	2800      	cmp	r0, #0
   1d364:	d1f2      	bne.n	1d34c <hci_driver_init+0x18>
		err = sdc_support_le_2m_phy();
   1d366:	f7e4 f89d 	bl	14a4 <sdc_support_le_2m_phy>
		if (err) {
   1d36a:	2800      	cmp	r0, #0
   1d36c:	d1ee      	bne.n	1d34c <hci_driver_init+0x18>
			err = sdc_support_phy_update_peripheral();
   1d36e:	f7e4 f8b9 	bl	14e4 <sdc_support_phy_update_peripheral>
			if (err) {
   1d372:	4604      	mov	r4, r0
   1d374:	2800      	cmp	r0, #0
   1d376:	d1e9      	bne.n	1d34c <hci_driver_init+0x18>
	cfg.peripheral_count.count = CONFIG_BT_CTLR_SDC_PERIPHERAL_COUNT;
   1d378:	2501      	movs	r5, #1
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1d37a:	1d3a      	adds	r2, r7, #4
   1d37c:	2102      	movs	r1, #2
	cfg.peripheral_count.count = CONFIG_BT_CTLR_SDC_PERIPHERAL_COUNT;
   1d37e:	713d      	strb	r5, [r7, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1d380:	f7e3 ff66 	bl	1250 <sdc_cfg_set>
	if (required_memory < 0) {
   1d384:	2800      	cmp	r0, #0
   1d386:	dbe3      	blt.n	1d350 <hci_driver_init+0x1c>
	cfg.buffer_cfg.tx_packet_size = MAX_TX_PACKET_SIZE;
   1d388:	4b23      	ldr	r3, [pc, #140]	; (1d418 <hci_driver_init+0xe4>)
   1d38a:	607b      	str	r3, [r7, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1d38c:	1d3a      	adds	r2, r7, #4
   1d38e:	2103      	movs	r1, #3
   1d390:	4620      	mov	r0, r4
   1d392:	f7e3 ff5d 	bl	1250 <sdc_cfg_set>
	if (required_memory < 0) {
   1d396:	2800      	cmp	r0, #0
   1d398:	dbda      	blt.n	1d350 <hci_driver_init+0x1c>
	cfg.event_length.event_length_us =
   1d39a:	f641 534c 	movw	r3, #7500	; 0x1d4c
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1d39e:	1d3a      	adds	r2, r7, #4
   1d3a0:	2104      	movs	r1, #4
   1d3a2:	4620      	mov	r0, r4
	cfg.event_length.event_length_us =
   1d3a4:	607b      	str	r3, [r7, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1d3a6:	f7e3 ff53 	bl	1250 <sdc_cfg_set>
	if (required_memory < 0) {
   1d3aa:	2800      	cmp	r0, #0
   1d3ac:	dbd0      	blt.n	1d350 <hci_driver_init+0x1c>
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1d3ae:	1d3a      	adds	r2, r7, #4
   1d3b0:	2105      	movs	r1, #5
   1d3b2:	4620      	mov	r0, r4
	cfg.adv_count.count = SDC_ADV_SET_COUNT;
   1d3b4:	713d      	strb	r5, [r7, #4]
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1d3b6:	f7e3 ff4b 	bl	1250 <sdc_cfg_set>
	if (required_memory < 0) {
   1d3ba:	2800      	cmp	r0, #0
   1d3bc:	dbc8      	blt.n	1d350 <hci_driver_init+0x1c>
	cfg.adv_buffer_cfg.max_adv_data = SDC_DEFAULT_ADV_BUF_SIZE;
   1d3be:	231f      	movs	r3, #31
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1d3c0:	1d3a      	adds	r2, r7, #4
   1d3c2:	2107      	movs	r1, #7
   1d3c4:	4620      	mov	r0, r4
	cfg.adv_buffer_cfg.max_adv_data = SDC_DEFAULT_ADV_BUF_SIZE;
   1d3c6:	80bb      	strh	r3, [r7, #4]
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1d3c8:	f7e3 ff42 	bl	1250 <sdc_cfg_set>
	if (required_memory < 0) {
   1d3cc:	2800      	cmp	r0, #0
   1d3ce:	dbbf      	blt.n	1d350 <hci_driver_init+0x1c>
	if (required_memory > sizeof(sdc_mempool)) {
   1d3d0:	f640 433d 	movw	r3, #3133	; 0xc3d
   1d3d4:	4298      	cmp	r0, r3
   1d3d6:	dd19      	ble.n	1d40c <hci_driver_init+0xd8>
		LOG_ERR("Allocated memory too low: %u < %u",
   1d3d8:	466c      	mov	r4, sp
   1d3da:	b088      	sub	sp, #32
   1d3dc:	466a      	mov	r2, sp
   1d3de:	490f      	ldr	r1, [pc, #60]	; (1d41c <hci_driver_init+0xe8>)
   1d3e0:	61d0      	str	r0, [r2, #28]
   1d3e2:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1d3e6:	2304      	movs	r3, #4
   1d3e8:	f842 3f10 	str.w	r3, [r2, #16]!
   1d3ec:	480c      	ldr	r0, [pc, #48]	; (1d420 <hci_driver_init+0xec>)
   1d3ee:	2300      	movs	r3, #0
   1d3f0:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1d3f4:	f7f8 f904 	bl	15600 <z_impl_z_log_msg_static_create>
   1d3f8:	46a5      	mov	sp, r4
		k_panic();
   1d3fa:	4040      	eors	r0, r0
   1d3fc:	f380 8811 	msr	BASEPRI, r0
   1d400:	f04f 0004 	mov.w	r0, #4
   1d404:	df02      	svc	2
		return -ENOMEM;
   1d406:	f06f 000b 	mvn.w	r0, #11
   1d40a:	e7a1      	b.n	1d350 <hci_driver_init+0x1c>
	return 0;
   1d40c:	2000      	movs	r0, #0
	if (err) {
   1d40e:	e79f      	b.n	1d350 <hci_driver_init+0x1c>
   1d410:	00025bf4 	.word	0x00025bf4
   1d414:	0001d299 	.word	0x0001d299
   1d418:	0203fbfb 	.word	0x0203fbfb
   1d41c:	00027862 	.word	0x00027862
   1d420:	000255cc 	.word	0x000255cc

0001d424 <hci_driver_open>:
{
   1d424:	b590      	push	{r4, r7, lr}
   1d426:	b08d      	sub	sp, #52	; 0x34
	k_work_init(&receive_work, receive_work_handler);
   1d428:	4934      	ldr	r1, [pc, #208]	; (1d4fc <hci_driver_open+0xd8>)
   1d42a:	4835      	ldr	r0, [pc, #212]	; (1d500 <hci_driver_open+0xdc>)
{
   1d42c:	af00      	add	r7, sp, #0
	k_work_init(&receive_work, receive_work_handler);
   1d42e:	f007 fab2 	bl	24996 <k_work_init>
		hci_ecdh_init();
   1d432:	f000 fdfd 	bl	1e030 <hci_ecdh_init>
	sdc_build_revision_get(build_revision);
   1d436:	1d38      	adds	r0, r7, #4
   1d438:	f7e3 fefc 	bl	1234 <sdc_build_revision_get>
	LOG_HEXDUMP_INF(build_revision, sizeof(build_revision),
   1d43c:	466c      	mov	r4, sp
   1d43e:	b088      	sub	sp, #32
   1d440:	466a      	mov	r2, sp
   1d442:	4b30      	ldr	r3, [pc, #192]	; (1d504 <hci_driver_open+0xe0>)
   1d444:	6153      	str	r3, [r2, #20]
   1d446:	4b30      	ldr	r3, [pc, #192]	; (1d508 <hci_driver_open+0xe4>)
   1d448:	6193      	str	r3, [r2, #24]
   1d44a:	f44f 7300 	mov.w	r3, #512	; 0x200
   1d44e:	8393      	strh	r3, [r2, #28]
   1d450:	4b2e      	ldr	r3, [pc, #184]	; (1d50c <hci_driver_open+0xe8>)
   1d452:	f842 3f10 	str.w	r3, [r2, #16]!
   1d456:	492e      	ldr	r1, [pc, #184]	; (1d510 <hci_driver_open+0xec>)
   1d458:	482e      	ldr	r0, [pc, #184]	; (1d514 <hci_driver_open+0xf0>)
   1d45a:	1d3b      	adds	r3, r7, #4
   1d45c:	f7f8 f8d0 	bl	15600 <z_impl_z_log_msg_static_create>
   1d460:	46a5      	mov	sp, r4
   1d462:	482d      	ldr	r0, [pc, #180]	; (1d518 <hci_driver_open+0xf4>)
   1d464:	f007 f8a5 	bl	245b2 <z_device_is_ready>
	if (!device_is_ready(entropy_source)) {
   1d468:	4603      	mov	r3, r0
   1d46a:	b980      	cbnz	r0, 1d48e <hci_driver_open+0x6a>
		LOG_ERR("Entropy source device not ready");
   1d46c:	4a2b      	ldr	r2, [pc, #172]	; (1d51c <hci_driver_open+0xf8>)
   1d46e:	62fa      	str	r2, [r7, #44]	; 0x2c
   1d470:	2202      	movs	r2, #2
   1d472:	62ba      	str	r2, [r7, #40]	; 0x28
   1d474:	4827      	ldr	r0, [pc, #156]	; (1d514 <hci_driver_open+0xf0>)
   1d476:	f107 0228 	add.w	r2, r7, #40	; 0x28
   1d47a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -ENODEV;
   1d47e:	f06f 0412 	mvn.w	r4, #18
   1d482:	f7f8 f8bd 	bl	15600 <z_impl_z_log_msg_static_create>
}
   1d486:	4620      	mov	r0, r4
   1d488:	3734      	adds	r7, #52	; 0x34
   1d48a:	46bd      	mov	sp, r7
   1d48c:	bd90      	pop	{r4, r7, pc}
	sdc_rand_source_t rand_functions = {
   1d48e:	4a24      	ldr	r2, [pc, #144]	; (1d520 <hci_driver_open+0xfc>)
   1d490:	ca07      	ldmia	r2, {r0, r1, r2}
   1d492:	f107 0318 	add.w	r3, r7, #24
   1d496:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	err = sdc_rand_source_register(&rand_functions);
   1d49a:	4618      	mov	r0, r3
   1d49c:	f7e4 f878 	bl	1590 <sdc_rand_source_register>
	if (err) {
   1d4a0:	b188      	cbz	r0, 1d4c6 <hci_driver_open+0xa2>
		LOG_ERR("Failed to register rand source (%d)", err);
   1d4a2:	b088      	sub	sp, #32
   1d4a4:	466a      	mov	r2, sp
   1d4a6:	4b1f      	ldr	r3, [pc, #124]	; (1d524 <hci_driver_open+0x100>)
   1d4a8:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1d4ac:	2303      	movs	r3, #3
   1d4ae:	f842 3f10 	str.w	r3, [r2, #16]!
   1d4b2:	4818      	ldr	r0, [pc, #96]	; (1d514 <hci_driver_open+0xf0>)
   1d4b4:	2300      	movs	r3, #0
   1d4b6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1d4ba:	f7f8 f8a1 	bl	15600 <z_impl_z_log_msg_static_create>
   1d4be:	46a5      	mov	sp, r4
		return -EINVAL;
   1d4c0:	f06f 0415 	mvn.w	r4, #21
   1d4c4:	e7df      	b.n	1d486 <hci_driver_open+0x62>
	err = MULTITHREADING_LOCK_ACQUIRE();
   1d4c6:	f04f 30ff 	mov.w	r0, #4294967295
   1d4ca:	f04f 31ff 	mov.w	r1, #4294967295
   1d4ce:	f7ff febf 	bl	1d250 <multithreading_lock_acquire>
	if (err) {
   1d4d2:	4604      	mov	r4, r0
   1d4d4:	2800      	cmp	r0, #0
   1d4d6:	d1d6      	bne.n	1d486 <hci_driver_open+0x62>
	err = sdc_default_tx_power_set(RADIO_TXP_DEFAULT);
   1d4d8:	2004      	movs	r0, #4
   1d4da:	f7e3 feff 	bl	12dc <sdc_default_tx_power_set>
	if (err) {
   1d4de:	b120      	cbz	r0, 1d4ea <hci_driver_open+0xc6>
		MULTITHREADING_LOCK_RELEASE();
   1d4e0:	f7ff febe 	bl	1d260 <multithreading_lock_release>
		return -ENOTSUP;
   1d4e4:	f06f 0485 	mvn.w	r4, #133	; 0x85
   1d4e8:	e7cd      	b.n	1d486 <hci_driver_open+0x62>
	err = sdc_enable(receive_signal_raise, sdc_mempool);
   1d4ea:	490f      	ldr	r1, [pc, #60]	; (1d528 <hci_driver_open+0x104>)
   1d4ec:	480f      	ldr	r0, [pc, #60]	; (1d52c <hci_driver_open+0x108>)
   1d4ee:	f7e3 ff15 	bl	131c <sdc_enable>
	if (err) {
   1d4f2:	4604      	mov	r4, r0
	MULTITHREADING_LOCK_RELEASE();
   1d4f4:	f7ff feb4 	bl	1d260 <multithreading_lock_release>
	return 0;
   1d4f8:	e7c5      	b.n	1d486 <hci_driver_open+0x62>
   1d4fa:	bf00      	nop
   1d4fc:	0002424b 	.word	0x0002424b
   1d500:	200051f4 	.word	0x200051f4
   1d504:	00027783 	.word	0x00027783
   1d508:	00027884 	.word	0x00027884
   1d50c:	01000003 	.word	0x01000003
   1d510:	00a01cc0 	.word	0x00a01cc0
   1d514:	000255cc 	.word	0x000255cc
   1d518:	00025338 	.word	0x00025338
   1d51c:	000278ab 	.word	0x000278ab
   1d520:	000256a0 	.word	0x000256a0
   1d524:	000278cb 	.word	0x000278cb
   1d528:	20001fc0 	.word	0x20001fc0
   1d52c:	0001d309 	.word	0x0001d309

0001d530 <hci_driver_receive_process>:
{
   1d530:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d532:	b089      	sub	sp, #36	; 0x24
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   1d534:	f04f 30ff 	mov.w	r0, #4294967295
{
   1d538:	af00      	add	r7, sp, #0
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   1d53a:	f04f 31ff 	mov.w	r1, #4294967295
   1d53e:	f7ff fe87 	bl	1d250 <multithreading_lock_acquire>
	if (!errcode) {
   1d542:	bb40      	cbnz	r0, 1d596 <hci_driver_receive_process+0x66>
		errcode = hci_internal_msg_get(p_hci_buffer, &msg_type);
   1d544:	4d33      	ldr	r5, [pc, #204]	; (1d614 <hci_driver_receive_process+0xe4>)
   1d546:	1df9      	adds	r1, r7, #7
   1d548:	4628      	mov	r0, r5
   1d54a:	f000 fc3f 	bl	1ddcc <hci_internal_msg_get>
   1d54e:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   1d550:	f7ff fe86 	bl	1d260 <multithreading_lock_release>
	if (errcode) {
   1d554:	b9fc      	cbnz	r4, 1d596 <hci_driver_receive_process+0x66>
	if (msg_type == SDC_HCI_MSG_TYPE_EVT) {
   1d556:	79fe      	ldrb	r6, [r7, #7]
   1d558:	2e04      	cmp	r6, #4
   1d55a:	d133      	bne.n	1d5c4 <hci_driver_receive_process+0x94>
	switch (hdr->evt) {
   1d55c:	7828      	ldrb	r0, [r5, #0]
   1d55e:	283e      	cmp	r0, #62	; 0x3e
   1d560:	d01c      	beq.n	1d59c <hci_driver_receive_process+0x6c>
   1d562:	28ff      	cmp	r0, #255	; 0xff
   1d564:	d021      	beq.n	1d5aa <hci_driver_receive_process+0x7a>
		switch (subevent) {
   1d566:	f04f 32ff 	mov.w	r2, #4294967295
   1d56a:	f04f 33ff 	mov.w	r3, #4294967295
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   1d56e:	4621      	mov	r1, r4
   1d570:	f7f9 fda4 	bl	170bc <bt_buf_get_evt>
	if (!evt_buf) {
   1d574:	4606      	mov	r6, r0
   1d576:	b9d8      	cbnz	r0, 1d5b0 <hci_driver_receive_process+0x80>
		if (discardable) {
   1d578:	b95c      	cbnz	r4, 1d592 <hci_driver_receive_process+0x62>
		LOG_ERR("No event buffer available");
   1d57a:	4b27      	ldr	r3, [pc, #156]	; (1d618 <hci_driver_receive_process+0xe8>)
   1d57c:	61fb      	str	r3, [r7, #28]
   1d57e:	2302      	movs	r3, #2
   1d580:	61bb      	str	r3, [r7, #24]
   1d582:	4826      	ldr	r0, [pc, #152]	; (1d61c <hci_driver_receive_process+0xec>)
   1d584:	4623      	mov	r3, r4
   1d586:	f107 0218 	add.w	r2, r7, #24
   1d58a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1d58e:	f7f8 f837 	bl	15600 <z_impl_z_log_msg_static_create>
		receive_signal_raise();
   1d592:	f7ff feb9 	bl	1d308 <receive_signal_raise>
}
   1d596:	3724      	adds	r7, #36	; 0x24
   1d598:	46bd      	mov	sp, r7
   1d59a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		switch (me->subevent) {
   1d59c:	78ab      	ldrb	r3, [r5, #2]
   1d59e:	2b02      	cmp	r3, #2
		switch (subevent) {
   1d5a0:	d1e1      	bne.n	1d566 <hci_driver_receive_process+0x36>
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   1d5a2:	2200      	movs	r2, #0
   1d5a4:	2300      	movs	r3, #0
			return true;
   1d5a6:	2401      	movs	r4, #1
   1d5a8:	e7e1      	b.n	1d56e <hci_driver_receive_process+0x3e>
		switch (subevent) {
   1d5aa:	78ab      	ldrb	r3, [r5, #2]
   1d5ac:	2b80      	cmp	r3, #128	; 0x80
   1d5ae:	e7f7      	b.n	1d5a0 <hci_driver_receive_process+0x70>
	net_buf_add_mem(evt_buf, &hci_buf[0], hdr->len + sizeof(*hdr));
   1d5b0:	786a      	ldrb	r2, [r5, #1]
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1d5b2:	4918      	ldr	r1, [pc, #96]	; (1d614 <hci_driver_receive_process+0xe4>)
   1d5b4:	3202      	adds	r2, #2
   1d5b6:	300c      	adds	r0, #12
   1d5b8:	f006 fca6 	bl	23f08 <net_buf_simple_add_mem>
	bt_recv(evt_buf);
   1d5bc:	4630      	mov	r0, r6
	bt_recv(data_buf);
   1d5be:	f7fa fe55 	bl	1826c <bt_recv>
   1d5c2:	e7e6      	b.n	1d592 <hci_driver_receive_process+0x62>
	} else if (msg_type == SDC_HCI_MSG_TYPE_DATA) {
   1d5c4:	2e02      	cmp	r6, #2
   1d5c6:	d114      	bne.n	1d5f2 <hci_driver_receive_process+0xc2>
	struct net_buf *data_buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   1d5c8:	f04f 32ff 	mov.w	r2, #4294967295
   1d5cc:	f04f 33ff 	mov.w	r3, #4294967295
   1d5d0:	2003      	movs	r0, #3
   1d5d2:	f7f9 fd49 	bl	17068 <bt_buf_get_rx>
	if (!data_buf) {
   1d5d6:	4604      	mov	r4, r0
   1d5d8:	b918      	cbnz	r0, 1d5e2 <hci_driver_receive_process+0xb2>
		LOG_ERR("No data buffer available");
   1d5da:	4b11      	ldr	r3, [pc, #68]	; (1d620 <hci_driver_receive_process+0xf0>)
   1d5dc:	e9c7 6306 	strd	r6, r3, [r7, #24]
   1d5e0:	e7cf      	b.n	1d582 <hci_driver_receive_process+0x52>
	net_buf_add_mem(data_buf, &hci_buf[0], len + sizeof(*hdr));
   1d5e2:	886a      	ldrh	r2, [r5, #2]
   1d5e4:	4629      	mov	r1, r5
   1d5e6:	3204      	adds	r2, #4
   1d5e8:	300c      	adds	r0, #12
   1d5ea:	f006 fc8d 	bl	23f08 <net_buf_simple_add_mem>
	bt_recv(data_buf);
   1d5ee:	4620      	mov	r0, r4
   1d5f0:	e7e5      	b.n	1d5be <hci_driver_receive_process+0x8e>
		LOG_ERR("Unexpected msg_type: %u. This if-else needs a new branch", msg_type);
   1d5f2:	466d      	mov	r5, sp
   1d5f4:	b088      	sub	sp, #32
   1d5f6:	466a      	mov	r2, sp
   1d5f8:	4b0a      	ldr	r3, [pc, #40]	; (1d624 <hci_driver_receive_process+0xf4>)
   1d5fa:	e9c2 3605 	strd	r3, r6, [r2, #20]
   1d5fe:	2303      	movs	r3, #3
   1d600:	f842 3f10 	str.w	r3, [r2, #16]!
   1d604:	4805      	ldr	r0, [pc, #20]	; (1d61c <hci_driver_receive_process+0xec>)
   1d606:	4623      	mov	r3, r4
   1d608:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1d60c:	f7f7 fff8 	bl	15600 <z_impl_z_log_msg_static_create>
   1d610:	46ad      	mov	sp, r5
   1d612:	e7be      	b.n	1d592 <hci_driver_receive_process+0x62>
   1d614:	20005444 	.word	0x20005444
   1d618:	000278ef 	.word	0x000278ef
   1d61c:	000255cc 	.word	0x000255cc
   1d620:	00027909 	.word	0x00027909
   1d624:	00027922 	.word	0x00027922

0001d628 <hci_internal_cmd_put>:
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
	}
}

int hci_internal_cmd_put(uint8_t *cmd_in)
{
   1d628:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint16_t opcode = sys_get_le16(cmd_in);

	if (cmd_complete_or_status.occurred) {
   1d62a:	4dac      	ldr	r5, [pc, #688]	; (1d8dc <hci_internal_cmd_put+0x2b4>)
   1d62c:	782b      	ldrb	r3, [r5, #0]
{
   1d62e:	4604      	mov	r4, r0
	if (cmd_complete_or_status.occurred) {
   1d630:	2b00      	cmp	r3, #0
   1d632:	f040 83c6 	bne.w	1ddc2 <hci_internal_cmd_put+0x79a>
	uint8_t return_param_length = sizeof(struct bt_hci_evt_cmd_complete)
   1d636:	2304      	movs	r3, #4
   1d638:	f88d 3007 	strb.w	r3, [sp, #7]
	if (user_cmd_handler) {
   1d63c:	4ba8      	ldr	r3, [pc, #672]	; (1d8e0 <hci_internal_cmd_put+0x2b8>)
   1d63e:	8806      	ldrh	r6, [r0, #0]
   1d640:	681f      	ldr	r7, [r3, #0]
   1d642:	b1b7      	cbz	r7, 1d672 <hci_internal_cmd_put+0x4a>
		status = user_cmd_handler(cmd_in,
   1d644:	f10d 0306 	add.w	r3, sp, #6
   1d648:	f10d 0207 	add.w	r2, sp, #7
   1d64c:	1c69      	adds	r1, r5, #1
   1d64e:	47b8      	blx	r7
	if (status == BT_HCI_ERR_UNKNOWN_CMD) {
   1d650:	2801      	cmp	r0, #1
   1d652:	d00e      	beq.n	1d672 <hci_internal_cmd_put+0x4a>
	if (generate_command_status_event ||
   1d654:	f89d 3006 	ldrb.w	r3, [sp, #6]
   1d658:	2b00      	cmp	r3, #0
   1d65a:	f040 828d 	bne.w	1db78 <hci_internal_cmd_put+0x550>
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
   1d65e:	f89d 3007 	ldrb.w	r3, [sp, #7]
	evt_hdr->len = param_length;
   1d662:	70ab      	strb	r3, [r5, #2]
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   1d664:	220e      	movs	r2, #14
	evt_data->ncmd = 1;
   1d666:	2301      	movs	r3, #1
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   1d668:	706a      	strb	r2, [r5, #1]
	evt_data->ncmd = 1;
   1d66a:	70eb      	strb	r3, [r5, #3]
	evt_data->opcode = hci_opcode;
   1d66c:	80ae      	strh	r6, [r5, #4]
	event[BT_HCI_EVT_HDR_SIZE + sizeof(struct bt_hci_evt_cmd_complete)] = status;
   1d66e:	71a8      	strb	r0, [r5, #6]
}
   1d670:	e28b      	b.n	1db8a <hci_internal_cmd_put+0x562>
		switch (BT_OGF(opcode)) {
   1d672:	f5b6 5f10 	cmp.w	r6, #9216	; 0x2400
   1d676:	ea4f 2396 	mov.w	r3, r6, lsr #10
   1d67a:	d20f      	bcs.n	1d69c <hci_internal_cmd_put+0x74>
   1d67c:	2b00      	cmp	r3, #0
   1d67e:	d057      	beq.n	1d730 <hci_internal_cmd_put+0x108>
   1d680:	3b01      	subs	r3, #1
   1d682:	2b07      	cmp	r3, #7
   1d684:	f200 8384 	bhi.w	1dd90 <hci_internal_cmd_put+0x768>
   1d688:	e8df f013 	tbh	[pc, r3, lsl #1]
   1d68c:	0382000d 	.word	0x0382000d
   1d690:	0082003e 	.word	0x0082003e
   1d694:	03820382 	.word	0x03820382
   1d698:	01040382 	.word	0x01040382
   1d69c:	2b3f      	cmp	r3, #63	; 0x3f
   1d69e:	f000 82b8 	beq.w	1dc12 <hci_internal_cmd_put+0x5ea>
	switch (opcode)	{
   1d6a2:	2001      	movs	r0, #1
   1d6a4:	e310      	b.n	1dcc8 <hci_internal_cmd_put+0x6a0>
	return ((uint16_t)src[1] << 8) | src[0];
   1d6a6:	4620      	mov	r0, r4
	switch (opcode)	{
   1d6a8:	f240 4206 	movw	r2, #1030	; 0x406
   1d6ac:	f930 3b03 	ldrsh.w	r3, [r0], #3
   1d6b0:	4293      	cmp	r3, r2
   1d6b2:	d00f      	beq.n	1d6d4 <hci_internal_cmd_put+0xac>
   1d6b4:	f240 421d 	movw	r2, #1053	; 0x41d
   1d6b8:	4293      	cmp	r3, r2
   1d6ba:	d022      	beq.n	1d702 <hci_internal_cmd_put+0xda>
   1d6bc:	2001      	movs	r0, #1
	switch (hci_opcode) {
   1d6be:	f240 4306 	movw	r3, #1030	; 0x406
   1d6c2:	429e      	cmp	r6, r3
   1d6c4:	f000 8258 	beq.w	1db78 <hci_internal_cmd_put+0x550>
   1d6c8:	f240 431d 	movw	r3, #1053	; 0x41d
   1d6cc:	429e      	cmp	r6, r3
   1d6ce:	f000 8253 	beq.w	1db78 <hci_internal_cmd_put+0x550>
   1d6d2:	e042      	b.n	1d75a <hci_internal_cmd_put+0x132>
		return sdc_hci_cmd_lc_disconnect((void *)cmd_params);
   1d6d4:	f7ef fe5e 	bl	d394 <sdc_hci_cmd_lc_disconnect>
	switch (hci_opcode) {
   1d6d8:	f242 0332 	movw	r3, #8242	; 0x2032
   1d6dc:	429e      	cmp	r6, r3
   1d6de:	f240 8351 	bls.w	1dd84 <hci_internal_cmd_put+0x75c>
   1d6e2:	f242 0385 	movw	r3, #8325	; 0x2085
   1d6e6:	429e      	cmp	r6, r3
   1d6e8:	d837      	bhi.n	1d75a <hci_internal_cmd_put+0x132>
   1d6ea:	f242 036c 	movw	r3, #8300	; 0x206c
   1d6ee:	429e      	cmp	r6, r3
   1d6f0:	f5a6 5301 	sub.w	r3, r6, #8256	; 0x2040
   1d6f4:	f200 8350 	bhi.w	1dd98 <hci_internal_cmd_put+0x770>
   1d6f8:	3b03      	subs	r3, #3
   1d6fa:	b29b      	uxth	r3, r3
   1d6fc:	2b01      	cmp	r3, #1
   1d6fe:	d82c      	bhi.n	1d75a <hci_internal_cmd_put+0x132>
   1d700:	e23a      	b.n	1db78 <hci_internal_cmd_put+0x550>
		return sdc_hci_cmd_lc_read_remote_version_information((void *)cmd_params);
   1d702:	f7ef fe49 	bl	d398 <sdc_hci_cmd_lc_read_remote_version_information>
	switch (hci_opcode) {
   1d706:	e7e7      	b.n	1d6d8 <hci_internal_cmd_put+0xb0>
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   1d708:	4620      	mov	r0, r4
	switch (opcode)	{
   1d70a:	f640 4263 	movw	r2, #3171	; 0xc63
   1d70e:	f930 3b03 	ldrsh.w	r3, [r0], #3
   1d712:	4293      	cmp	r3, r2
   1d714:	d030      	beq.n	1d778 <hci_internal_cmd_put+0x150>
   1d716:	dc0d      	bgt.n	1d734 <hci_internal_cmd_put+0x10c>
   1d718:	f640 4203 	movw	r2, #3075	; 0xc03
   1d71c:	4293      	cmp	r3, r2
   1d71e:	d01f      	beq.n	1d760 <hci_internal_cmd_put+0x138>
   1d720:	f640 422d 	movw	r2, #3117	; 0xc2d
   1d724:	4293      	cmp	r3, r2
   1d726:	d01e      	beq.n	1d766 <hci_internal_cmd_put+0x13e>
   1d728:	f640 4201 	movw	r2, #3073	; 0xc01
   1d72c:	4293      	cmp	r3, r2
   1d72e:	d012      	beq.n	1d756 <hci_internal_cmd_put+0x12e>
	switch (hci_opcode) {
   1d730:	2001      	movs	r0, #1
   1d732:	e221      	b.n	1db78 <hci_internal_cmd_put+0x550>
	switch (opcode)	{
   1d734:	f640 427b 	movw	r2, #3195	; 0xc7b
   1d738:	4293      	cmp	r3, r2
   1d73a:	d020      	beq.n	1d77e <hci_internal_cmd_put+0x156>
   1d73c:	f640 427c 	movw	r2, #3196	; 0xc7c
   1d740:	4293      	cmp	r3, r2
   1d742:	d1f5      	bne.n	1d730 <hci_internal_cmd_put+0x108>
		*param_length_out +=
   1d744:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_write_authenticated_payload_timeout((void *)cmd_params,
   1d748:	4966      	ldr	r1, [pc, #408]	; (1d8e4 <hci_internal_cmd_put+0x2bc>)
		*param_length_out +=
   1d74a:	3302      	adds	r3, #2
   1d74c:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_write_authenticated_payload_timeout((void *)cmd_params,
   1d750:	f7ef fd12 	bl	d178 <sdc_hci_cmd_cb_write_authenticated_payload_timeout>
	if (generate_command_status_event ||
   1d754:	e001      	b.n	1d75a <hci_internal_cmd_put+0x132>
		return sdc_hci_cmd_cb_set_event_mask((void *)cmd_params);
   1d756:	f7ef fd05 	bl	d164 <sdc_hci_cmd_cb_set_event_mask>
	if (generate_command_status_event ||
   1d75a:	2801      	cmp	r0, #1
   1d75c:	d0e8      	beq.n	1d730 <hci_internal_cmd_put+0x108>
   1d75e:	e77e      	b.n	1d65e <hci_internal_cmd_put+0x36>
		return sdc_hci_cmd_cb_reset();
   1d760:	f7e4 f81c 	bl	179c <sdc_hci_cmd_cb_reset>
	if (generate_command_status_event ||
   1d764:	e7f9      	b.n	1d75a <hci_internal_cmd_put+0x132>
		*param_length_out += sizeof(sdc_hci_cmd_cb_read_transmit_power_level_return_t);
   1d766:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_read_transmit_power_level((void *)cmd_params,
   1d76a:	495e      	ldr	r1, [pc, #376]	; (1d8e4 <hci_internal_cmd_put+0x2bc>)
		*param_length_out += sizeof(sdc_hci_cmd_cb_read_transmit_power_level_return_t);
   1d76c:	3303      	adds	r3, #3
   1d76e:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_read_transmit_power_level((void *)cmd_params,
   1d772:	f7ef fcf5 	bl	d160 <sdc_hci_cmd_cb_read_transmit_power_level>
	if (generate_command_status_event ||
   1d776:	e7f0      	b.n	1d75a <hci_internal_cmd_put+0x132>
		return sdc_hci_cmd_cb_set_event_mask_page_2((void *)cmd_params);
   1d778:	f7ef fcf9 	bl	d16e <sdc_hci_cmd_cb_set_event_mask_page_2>
	if (generate_command_status_event ||
   1d77c:	e7ed      	b.n	1d75a <hci_internal_cmd_put+0x132>
		*param_length_out +=
   1d77e:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_read_authenticated_payload_timeout((void *)cmd_params,
   1d782:	4958      	ldr	r1, [pc, #352]	; (1d8e4 <hci_internal_cmd_put+0x2bc>)
		*param_length_out +=
   1d784:	3304      	adds	r3, #4
   1d786:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_read_authenticated_payload_timeout((void *)cmd_params,
   1d78a:	f7ef fce7 	bl	d15c <sdc_hci_cmd_cb_read_authenticated_payload_timeout>
	if (generate_command_status_event ||
   1d78e:	e7e4      	b.n	1d75a <hci_internal_cmd_put+0x132>
	switch (opcode)	{
   1d790:	8823      	ldrh	r3, [r4, #0]
   1d792:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
   1d796:	3b01      	subs	r3, #1
   1d798:	2b08      	cmp	r3, #8
   1d79a:	d8c9      	bhi.n	1d730 <hci_internal_cmd_put+0x108>
   1d79c:	a201      	add	r2, pc, #4	; (adr r2, 1d7a4 <hci_internal_cmd_put+0x17c>)
   1d79e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1d7a2:	bf00      	nop
   1d7a4:	0001d7c9 	.word	0x0001d7c9
   1d7a8:	0001d7db 	.word	0x0001d7db
   1d7ac:	0001d863 	.word	0x0001d863
   1d7b0:	0001d731 	.word	0x0001d731
   1d7b4:	0001d731 	.word	0x0001d731
   1d7b8:	0001d731 	.word	0x0001d731
   1d7bc:	0001d731 	.word	0x0001d731
   1d7c0:	0001d731 	.word	0x0001d731
   1d7c4:	0001d883 	.word	0x0001d883
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_version_information_return_t);
   1d7c8:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_ip_read_local_version_information((void *)event_out_params);
   1d7cc:	4845      	ldr	r0, [pc, #276]	; (1d8e4 <hci_internal_cmd_put+0x2bc>)
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_version_information_return_t);
   1d7ce:	3308      	adds	r3, #8
   1d7d0:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_ip_read_local_version_information((void *)event_out_params);
   1d7d4:	f7ef fd9f 	bl	d316 <sdc_hci_cmd_ip_read_local_version_information>
	if (generate_command_status_event ||
   1d7d8:	e7bf      	b.n	1d75a <hci_internal_cmd_put+0x132>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_commands_return_t);
   1d7da:	f89d 3007 	ldrb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   1d7de:	4841      	ldr	r0, [pc, #260]	; (1d8e4 <hci_internal_cmd_put+0x2bc>)
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_commands_return_t);
   1d7e0:	3340      	adds	r3, #64	; 0x40
	memset(cmds, 0, sizeof(*cmds));
   1d7e2:	2230      	movs	r2, #48	; 0x30
   1d7e4:	2100      	movs	r1, #0
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_commands_return_t);
   1d7e6:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   1d7ea:	f007 fcfa 	bl	251e2 <memset>
	cmds->hci_disconnect = 1;
   1d7ee:	2320      	movs	r3, #32
   1d7f0:	71eb      	strb	r3, [r5, #7]
	cmds->hci_read_remote_version_information = 1;
   1d7f2:	2380      	movs	r3, #128	; 0x80
   1d7f4:	726b      	strb	r3, [r5, #9]
	cmds->hci_set_event_mask = 1;
   1d7f6:	f06f 033f 	mvn.w	r3, #63	; 0x3f
   1d7fa:	732b      	strb	r3, [r5, #12]
	cmds->hci_read_transmit_power_level = 1;
   1d7fc:	2304      	movs	r3, #4
   1d7fe:	746b      	strb	r3, [r5, #17]
	cmds->hci_read_local_version_information = 1;
   1d800:	2328      	movs	r3, #40	; 0x28
   1d802:	756b      	strb	r3, [r5, #21]
	cmds->hci_read_bd_addr = 1;
   1d804:	2302      	movs	r3, #2
   1d806:	75ab      	strb	r3, [r5, #22]
	cmds->hci_set_event_mask_page_2 = 1;
   1d808:	2304      	movs	r3, #4
   1d80a:	776b      	strb	r3, [r5, #29]
	cmds->hci_le_set_event_mask = 1;
   1d80c:	f06f 0308 	mvn.w	r3, #8
   1d810:	f885 3020 	strb.w	r3, [r5, #32]
	cmds->hci_le_set_scan_response_data = 1;
   1d814:	f06f 033c 	mvn.w	r3, #60	; 0x3c
   1d818:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
	cmds->hci_le_add_device_to_filter_accept_list = 1;
   1d81c:	f06f 030c 	mvn.w	r3, #12
   1d820:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
	cmds->hci_le_long_term_key_request_reply = 1;
   1d824:	237e      	movs	r3, #126	; 0x7e
   1d826:	f885 3023 	strb.w	r3, [r5, #35]	; 0x23
	cmds->hci_read_authenticated_payload_timeout = 1;
   1d82a:	2330      	movs	r3, #48	; 0x30
   1d82c:	f885 3027 	strb.w	r3, [r5, #39]	; 0x27
	cmds->hci_le_set_data_length = 1;
   1d830:	f06f 033f 	mvn.w	r3, #63	; 0x3f
   1d834:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
	cmds->hci_le_write_suggested_default_data_length = 1;
   1d838:	2307      	movs	r3, #7
   1d83a:	f885 3029 	strb.w	r3, [r5, #41]	; 0x29
	cmds->hci_le_read_maximum_data_length = 1;
   1d83e:	f06f 0307 	mvn.w	r3, #7
   1d842:	f885 302a 	strb.w	r3, [r5, #42]	; 0x2a
	cmds->hci_le_transmitter_test_v2 = 1;
   1d846:	2301      	movs	r3, #1
   1d848:	f885 302b 	strb.w	r3, [r5, #43]	; 0x2b
	cmds->hci_le_read_transmit_power = 1;
   1d84c:	2380      	movs	r3, #128	; 0x80
   1d84e:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
	cmds->hci_le_generate_dhkey_v2 = 1;
   1d852:	2304      	movs	r3, #4
   1d854:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
	cmds->hci_le_set_data_related_address_changes = 1;
   1d858:	2340      	movs	r3, #64	; 0x40
   1d85a:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
		return 0;
   1d85e:	2000      	movs	r0, #0
   1d860:	e6fd      	b.n	1d65e <hci_internal_cmd_put+0x36>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_features_return_t);
   1d862:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1d866:	3308      	adds	r3, #8
   1d868:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(features, 0, sizeof(*features));
   1d86c:	4b1d      	ldr	r3, [pc, #116]	; (1d8e4 <hci_internal_cmd_put+0x2bc>)
   1d86e:	2200      	movs	r2, #0
   1d870:	601a      	str	r2, [r3, #0]
   1d872:	605a      	str	r2, [r3, #4]
	features->bdedr_not_supported = 1;
   1d874:	7aeb      	ldrb	r3, [r5, #11]
   1d876:	f023 0360 	bic.w	r3, r3, #96	; 0x60
   1d87a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
   1d87e:	72eb      	strb	r3, [r5, #11]
	if (generate_command_status_event ||
   1d880:	e7ed      	b.n	1d85e <hci_internal_cmd_put+0x236>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   1d882:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_ip_read_bd_addr((void *)event_out_params);
   1d886:	4817      	ldr	r0, [pc, #92]	; (1d8e4 <hci_internal_cmd_put+0x2bc>)
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   1d888:	3306      	adds	r3, #6
   1d88a:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_ip_read_bd_addr((void *)event_out_params);
   1d88e:	f7ef fd40 	bl	d312 <sdc_hci_cmd_ip_read_bd_addr>
	if (generate_command_status_event ||
   1d892:	e762      	b.n	1d75a <hci_internal_cmd_put+0x132>
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   1d894:	4620      	mov	r0, r4
	switch (opcode)	{
   1d896:	f242 014b 	movw	r1, #8267	; 0x204b
   1d89a:	f830 3b03 	ldrh.w	r3, [r0], #3
   1d89e:	b21a      	sxth	r2, r3
   1d8a0:	428a      	cmp	r2, r1
   1d8a2:	f300 80c1 	bgt.w	1da28 <hci_internal_cmd_put+0x400>
   1d8a6:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   1d8aa:	f242 0232 	movw	r2, #8242	; 0x2032
   1d8ae:	dc1d      	bgt.n	1d8ec <hci_internal_cmd_put+0x2c4>
	switch (hci_opcode) {
   1d8b0:	4296      	cmp	r6, r2
   1d8b2:	f43f af3d 	beq.w	1d730 <hci_internal_cmd_put+0x108>
   1d8b6:	f200 827e 	bhi.w	1ddb6 <hci_internal_cmd_put+0x78e>
   1d8ba:	f242 0326 	movw	r3, #8230	; 0x2026
   1d8be:	429e      	cmp	r6, r3
   1d8c0:	f63f af36 	bhi.w	1d730 <hci_internal_cmd_put+0x108>
   1d8c4:	2001      	movs	r0, #1
   1d8c6:	f242 030c 	movw	r3, #8204	; 0x200c
   1d8ca:	429e      	cmp	r6, r3
   1d8cc:	f67f aef7 	bls.w	1d6be <hci_internal_cmd_put+0x96>
   1d8d0:	f5a6 5300 	sub.w	r3, r6, #8192	; 0x2000
   1d8d4:	3b0d      	subs	r3, #13
   1d8d6:	4a04      	ldr	r2, [pc, #16]	; (1d8e8 <hci_internal_cmd_put+0x2c0>)
   1d8d8:	b29b      	uxth	r3, r3
   1d8da:	e260      	b.n	1dd9e <hci_internal_cmd_put+0x776>
   1d8dc:	20005543 	.word	0x20005543
   1d8e0:	20005204 	.word	0x20005204
   1d8e4:	2000554a 	.word	0x2000554a
   1d8e8:	03001241 	.word	0x03001241
	switch (opcode)	{
   1d8ec:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
   1d8f0:	3b01      	subs	r3, #1
   1d8f2:	2b4a      	cmp	r3, #74	; 0x4a
   1d8f4:	d8dc      	bhi.n	1d8b0 <hci_internal_cmd_put+0x288>
   1d8f6:	a101      	add	r1, pc, #4	; (adr r1, 1d8fc <hci_internal_cmd_put+0x2d4>)
   1d8f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   1d8fc:	0001da43 	.word	0x0001da43
   1d900:	0001da53 	.word	0x0001da53
   1d904:	0001da65 	.word	0x0001da65
   1d908:	0001d8b1 	.word	0x0001d8b1
   1d90c:	0001daa9 	.word	0x0001daa9
   1d910:	0001daaf 	.word	0x0001daaf
   1d914:	0001dab5 	.word	0x0001dab5
   1d918:	0001dac7 	.word	0x0001dac7
   1d91c:	0001dacd 	.word	0x0001dacd
   1d920:	0001dad3 	.word	0x0001dad3
   1d924:	0001d8b1 	.word	0x0001d8b1
   1d928:	0001d8b1 	.word	0x0001d8b1
   1d92c:	0001d8b1 	.word	0x0001d8b1
   1d930:	0001d8b1 	.word	0x0001d8b1
   1d934:	0001dadf 	.word	0x0001dadf
   1d938:	0001daf1 	.word	0x0001daf1
   1d93c:	0001daf7 	.word	0x0001daf7
   1d940:	0001dafd 	.word	0x0001dafd
   1d944:	0001d8b1 	.word	0x0001d8b1
   1d948:	0001d8b1 	.word	0x0001d8b1
   1d94c:	0001db03 	.word	0x0001db03
   1d950:	0001db15 	.word	0x0001db15
   1d954:	0001db1b 	.word	0x0001db1b
   1d958:	0001db2d 	.word	0x0001db2d
   1d95c:	0001d8b1 	.word	0x0001d8b1
   1d960:	0001db3f 	.word	0x0001db3f
   1d964:	0001db51 	.word	0x0001db51
   1d968:	0001db63 	.word	0x0001db63
   1d96c:	0001d8b1 	.word	0x0001d8b1
   1d970:	0001d8b1 	.word	0x0001d8b1
   1d974:	0001d8b1 	.word	0x0001d8b1
   1d978:	0001d8b1 	.word	0x0001d8b1
   1d97c:	0001d8b1 	.word	0x0001d8b1
   1d980:	0001db95 	.word	0x0001db95
   1d984:	0001dba7 	.word	0x0001dba7
   1d988:	0001dbb9 	.word	0x0001dbb9
   1d98c:	0001dbbf 	.word	0x0001dbbf
   1d990:	0001dbc5 	.word	0x0001dbc5
   1d994:	0001d8b1 	.word	0x0001d8b1
   1d998:	0001d8b1 	.word	0x0001d8b1
   1d99c:	0001d8b1 	.word	0x0001d8b1
   1d9a0:	0001d8b1 	.word	0x0001d8b1
   1d9a4:	0001d8b1 	.word	0x0001d8b1
   1d9a8:	0001d8b1 	.word	0x0001d8b1
   1d9ac:	0001d8b1 	.word	0x0001d8b1
   1d9b0:	0001d8b1 	.word	0x0001d8b1
   1d9b4:	0001dbd1 	.word	0x0001dbd1
   1d9b8:	0001dbe3 	.word	0x0001dbe3
   1d9bc:	0001dbf5 	.word	0x0001dbf5
   1d9c0:	0001dbfb 	.word	0x0001dbfb
   1d9c4:	0001d8b1 	.word	0x0001d8b1
   1d9c8:	0001d8b1 	.word	0x0001d8b1
   1d9cc:	0001d8b1 	.word	0x0001d8b1
   1d9d0:	0001d8b1 	.word	0x0001d8b1
   1d9d4:	0001d8b1 	.word	0x0001d8b1
   1d9d8:	0001d8b1 	.word	0x0001d8b1
   1d9dc:	0001d8b1 	.word	0x0001d8b1
   1d9e0:	0001d8b1 	.word	0x0001d8b1
   1d9e4:	0001d8b1 	.word	0x0001d8b1
   1d9e8:	0001d8b1 	.word	0x0001d8b1
   1d9ec:	0001d8b1 	.word	0x0001d8b1
   1d9f0:	0001d8b1 	.word	0x0001d8b1
   1d9f4:	0001d8b1 	.word	0x0001d8b1
   1d9f8:	0001d8b1 	.word	0x0001d8b1
   1d9fc:	0001d8b1 	.word	0x0001d8b1
   1da00:	0001d8b1 	.word	0x0001d8b1
   1da04:	0001d8b1 	.word	0x0001d8b1
   1da08:	0001d8b1 	.word	0x0001d8b1
   1da0c:	0001d8b1 	.word	0x0001d8b1
   1da10:	0001d8b1 	.word	0x0001d8b1
   1da14:	0001d8b1 	.word	0x0001d8b1
   1da18:	0001d8b1 	.word	0x0001d8b1
   1da1c:	0001d8b1 	.word	0x0001d8b1
   1da20:	0001d8b1 	.word	0x0001d8b1
   1da24:	0001dc01 	.word	0x0001dc01
   1da28:	f242 035e 	movw	r3, #8286	; 0x205e
   1da2c:	429a      	cmp	r2, r3
   1da2e:	f000 80cc 	beq.w	1dbca <hci_internal_cmd_put+0x5a2>
   1da32:	f242 037c 	movw	r3, #8316	; 0x207c
   1da36:	429a      	cmp	r2, r3
   1da38:	d04e      	beq.n	1dad8 <hci_internal_cmd_put+0x4b0>
	switch (hci_opcode) {
   1da3a:	f242 0332 	movw	r3, #8242	; 0x2032
   1da3e:	429e      	cmp	r6, r3
   1da40:	e737      	b.n	1d8b2 <hci_internal_cmd_put+0x28a>
		return sdc_hci_cmd_le_set_event_mask((void *)cmd_params);
   1da42:	f7ef fc9a 	bl	d37a <sdc_hci_cmd_le_set_event_mask>
	switch (hci_opcode) {
   1da46:	f242 0332 	movw	r3, #8242	; 0x2032
   1da4a:	429e      	cmp	r6, r3
   1da4c:	f47f ae44 	bne.w	1d6d8 <hci_internal_cmd_put+0xb0>
   1da50:	e092      	b.n	1db78 <hci_internal_cmd_put+0x550>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_buffer_size_return_t);
   1da52:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   1da56:	48cf      	ldr	r0, [pc, #828]	; (1dd94 <hci_internal_cmd_put+0x76c>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_buffer_size_return_t);
   1da58:	3303      	adds	r3, #3
   1da5a:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   1da5e:	f7ef fc6e 	bl	d33e <sdc_hci_cmd_le_read_buffer_size>
   1da62:	e7f0      	b.n	1da46 <hci_internal_cmd_put+0x41e>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_local_supported_features_return_t);
   1da64:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1da68:	3308      	adds	r3, #8
   1da6a:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(features, 0, sizeof(*features));
   1da6e:	4bc9      	ldr	r3, [pc, #804]	; (1dd94 <hci_internal_cmd_put+0x76c>)
   1da70:	2200      	movs	r2, #0
   1da72:	601a      	str	r2, [r3, #0]
   1da74:	605a      	str	r2, [r3, #4]
	features->params.le_encryption = 1;
   1da76:	79eb      	ldrb	r3, [r5, #7]
   1da78:	f023 033d 	bic.w	r3, r3, #61	; 0x3d
   1da7c:	f043 033d 	orr.w	r3, r3, #61	; 0x3d
   1da80:	71eb      	strb	r3, [r5, #7]
	features->params.le_2m_phy = 1;
   1da82:	7a2b      	ldrb	r3, [r5, #8]
   1da84:	f023 0341 	bic.w	r3, r3, #65	; 0x41
   1da88:	f043 0341 	orr.w	r3, r3, #65	; 0x41
   1da8c:	722b      	strb	r3, [r5, #8]
	switch (hci_opcode) {
   1da8e:	f242 0332 	movw	r3, #8242	; 0x2032
   1da92:	429e      	cmp	r6, r3
   1da94:	d06f      	beq.n	1db76 <hci_internal_cmd_put+0x54e>
   1da96:	f200 8188 	bhi.w	1ddaa <hci_internal_cmd_put+0x782>
   1da9a:	f242 0326 	movw	r3, #8230	; 0x2026
   1da9e:	429e      	cmp	r6, r3
   1daa0:	f63f aedd 	bhi.w	1d85e <hci_internal_cmd_put+0x236>
		return 0;
   1daa4:	2000      	movs	r0, #0
   1daa6:	e70e      	b.n	1d8c6 <hci_internal_cmd_put+0x29e>
		return sdc_hci_cmd_le_set_random_address((void *)cmd_params);
   1daa8:	f7ef fc6e 	bl	d388 <sdc_hci_cmd_le_set_random_address>
   1daac:	e7cb      	b.n	1da46 <hci_internal_cmd_put+0x41e>
		return sdc_hci_cmd_le_set_adv_params((void *)cmd_params);
   1daae:	f7ef fc5c 	bl	d36a <sdc_hci_cmd_le_set_adv_params>
   1dab2:	e7c8      	b.n	1da46 <hci_internal_cmd_put+0x41e>
		*param_length_out +=
   1dab4:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_adv_physical_channel_tx_power((void *)event_out_params);
   1dab8:	48b6      	ldr	r0, [pc, #728]	; (1dd94 <hci_internal_cmd_put+0x76c>)
		*param_length_out +=
   1daba:	3301      	adds	r3, #1
   1dabc:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_adv_physical_channel_tx_power((void *)event_out_params);
   1dac0:	f7ef fc3b 	bl	d33a <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>
   1dac4:	e7bf      	b.n	1da46 <hci_internal_cmd_put+0x41e>
		return sdc_hci_cmd_le_set_adv_data((void *)cmd_params);
   1dac6:	f7ef fc4c 	bl	d362 <sdc_hci_cmd_le_set_adv_data>
   1daca:	e7bc      	b.n	1da46 <hci_internal_cmd_put+0x41e>
		return sdc_hci_cmd_le_set_scan_response_data((void *)cmd_params);
   1dacc:	f7ef fc5e 	bl	d38c <sdc_hci_cmd_le_set_scan_response_data>
   1dad0:	e7b9      	b.n	1da46 <hci_internal_cmd_put+0x41e>
		return sdc_hci_cmd_le_set_adv_enable((void *)cmd_params);
   1dad2:	f7ef fc48 	bl	d366 <sdc_hci_cmd_le_set_adv_enable>
   1dad6:	e7b6      	b.n	1da46 <hci_internal_cmd_put+0x41e>
		return sdc_hci_cmd_le_set_data_related_address_changes((void *)cmd_params);
   1dad8:	f7ef fc4b 	bl	d372 <sdc_hci_cmd_le_set_data_related_address_changes>
   1dadc:	e7b3      	b.n	1da46 <hci_internal_cmd_put+0x41e>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_filter_accept_list_size_return_t);
   1dade:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_filter_accept_list_size((void *)event_out_params);
   1dae2:	48ac      	ldr	r0, [pc, #688]	; (1dd94 <hci_internal_cmd_put+0x76c>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_filter_accept_list_size_return_t);
   1dae4:	3301      	adds	r3, #1
   1dae6:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_filter_accept_list_size((void *)event_out_params);
   1daea:	f7ef fc2c 	bl	d346 <sdc_hci_cmd_le_read_filter_accept_list_size>
   1daee:	e7aa      	b.n	1da46 <hci_internal_cmd_put+0x41e>
		return sdc_hci_cmd_le_clear_filter_accept_list();
   1daf0:	f7ef fc15 	bl	d31e <sdc_hci_cmd_le_clear_filter_accept_list>
   1daf4:	e7a7      	b.n	1da46 <hci_internal_cmd_put+0x41e>
		return sdc_hci_cmd_le_add_device_to_filter_accept_list((void *)cmd_params);
   1daf6:	f7ef fc10 	bl	d31a <sdc_hci_cmd_le_add_device_to_filter_accept_list>
   1dafa:	e7a4      	b.n	1da46 <hci_internal_cmd_put+0x41e>
		return sdc_hci_cmd_le_remove_device_from_filter_accept_list((void *)cmd_params);
   1dafc:	f7ef fc2f 	bl	d35e <sdc_hci_cmd_le_remove_device_from_filter_accept_list>
   1db00:	e7a1      	b.n	1da46 <hci_internal_cmd_put+0x41e>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_channel_map_return_t);
   1db02:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   1db06:	49a3      	ldr	r1, [pc, #652]	; (1dd94 <hci_internal_cmd_put+0x76c>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_channel_map_return_t);
   1db08:	3307      	adds	r3, #7
   1db0a:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   1db0e:	f7ef fc18 	bl	d342 <sdc_hci_cmd_le_read_channel_map>
   1db12:	e798      	b.n	1da46 <hci_internal_cmd_put+0x41e>
		return sdc_hci_cmd_le_read_remote_features((void *)cmd_params);
   1db14:	f7ef fc1d 	bl	d352 <sdc_hci_cmd_le_read_remote_features>
   1db18:	e795      	b.n	1da46 <hci_internal_cmd_put+0x41e>
		*param_length_out += sizeof(sdc_hci_cmd_le_encrypt_return_t);
   1db1a:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   1db1e:	499d      	ldr	r1, [pc, #628]	; (1dd94 <hci_internal_cmd_put+0x76c>)
		*param_length_out += sizeof(sdc_hci_cmd_le_encrypt_return_t);
   1db20:	3310      	adds	r3, #16
   1db22:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   1db26:	f7ef fbfc 	bl	d322 <sdc_hci_cmd_le_encrypt>
   1db2a:	e78c      	b.n	1da46 <hci_internal_cmd_put+0x41e>
		*param_length_out += sizeof(sdc_hci_cmd_le_rand_return_t);
   1db2c:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_rand((void *)event_out_params);
   1db30:	4898      	ldr	r0, [pc, #608]	; (1dd94 <hci_internal_cmd_put+0x76c>)
		*param_length_out += sizeof(sdc_hci_cmd_le_rand_return_t);
   1db32:	3308      	adds	r3, #8
   1db34:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_rand((void *)event_out_params);
   1db38:	f7ef fbfd 	bl	d336 <sdc_hci_cmd_le_rand>
   1db3c:	e783      	b.n	1da46 <hci_internal_cmd_put+0x41e>
		*param_length_out += sizeof(sdc_hci_cmd_le_long_term_key_request_reply_return_t);
   1db3e:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_long_term_key_request_reply((void *)cmd_params,
   1db42:	4994      	ldr	r1, [pc, #592]	; (1dd94 <hci_internal_cmd_put+0x76c>)
		*param_length_out += sizeof(sdc_hci_cmd_le_long_term_key_request_reply_return_t);
   1db44:	3302      	adds	r3, #2
   1db46:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_long_term_key_request_reply((void *)cmd_params,
   1db4a:	f7ef fbf0 	bl	d32e <sdc_hci_cmd_le_long_term_key_request_reply>
   1db4e:	e77a      	b.n	1da46 <hci_internal_cmd_put+0x41e>
		*param_length_out +=
   1db50:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_long_term_key_request_negative_reply(
   1db54:	498f      	ldr	r1, [pc, #572]	; (1dd94 <hci_internal_cmd_put+0x76c>)
		*param_length_out +=
   1db56:	3302      	adds	r3, #2
   1db58:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_long_term_key_request_negative_reply(
   1db5c:	f7ef fbe3 	bl	d326 <sdc_hci_cmd_le_long_term_key_request_negative_reply>
   1db60:	e771      	b.n	1da46 <hci_internal_cmd_put+0x41e>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_supported_states_return_t);
   1db62:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1db66:	3308      	adds	r3, #8
   1db68:	f88d 3007 	strb.w	r3, [sp, #7]
	*buf = states1;
   1db6c:	238f      	movs	r3, #143	; 0x8f
   1db6e:	71eb      	strb	r3, [r5, #7]
	*(buf + 4) = states2;
   1db70:	23c0      	movs	r3, #192	; 0xc0
   1db72:	72eb      	strb	r3, [r5, #11]
   1db74:	e78b      	b.n	1da8e <hci_internal_cmd_put+0x466>
		return 0;
   1db76:	2000      	movs	r0, #0
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   1db78:	230f      	movs	r3, #15
   1db7a:	706b      	strb	r3, [r5, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   1db7c:	2304      	movs	r3, #4
   1db7e:	70ab      	strb	r3, [r5, #2]
	evt_data->ncmd = 1;
   1db80:	2301      	movs	r3, #1
	evt_data->status = status_code;
   1db82:	70e8      	strb	r0, [r5, #3]
	evt_data->ncmd = 1;
   1db84:	712b      	strb	r3, [r5, #4]
	evt_data->opcode = hci_opcode;
   1db86:	f8a5 6005 	strh.w	r6, [r5, #5]
	{
		/* SDC_HCI_OPCODE_CMD_CB_HOST_NUMBER_OF_COMPLETED_PACKETS will only generate
		 *  command complete if it fails.
		 */

		cmd_complete_or_status.occurred = true;
   1db8a:	2301      	movs	r3, #1
   1db8c:	702b      	strb	r3, [r5, #0]
	}

	return 0;
   1db8e:	2000      	movs	r0, #0
}
   1db90:	b003      	add	sp, #12
   1db92:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*param_length_out += sizeof(sdc_hci_cmd_le_set_data_length_return_t);
   1db94:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_set_data_length((void *)cmd_params, (void *)event_out_params);
   1db98:	497e      	ldr	r1, [pc, #504]	; (1dd94 <hci_internal_cmd_put+0x76c>)
		*param_length_out += sizeof(sdc_hci_cmd_le_set_data_length_return_t);
   1db9a:	3302      	adds	r3, #2
   1db9c:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_set_data_length((void *)cmd_params, (void *)event_out_params);
   1dba0:	f7ef fbe5 	bl	d36e <sdc_hci_cmd_le_set_data_length>
   1dba4:	e74f      	b.n	1da46 <hci_internal_cmd_put+0x41e>
		*param_length_out +=
   1dba6:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_suggested_default_data_length((void *)event_out_params);
   1dbaa:	487a      	ldr	r0, [pc, #488]	; (1dd94 <hci_internal_cmd_put+0x76c>)
		*param_length_out +=
   1dbac:	3304      	adds	r3, #4
   1dbae:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_suggested_default_data_length((void *)event_out_params);
   1dbb2:	f7ef fbd0 	bl	d356 <sdc_hci_cmd_le_read_suggested_default_data_length>
   1dbb6:	e746      	b.n	1da46 <hci_internal_cmd_put+0x41e>
		return sdc_hci_cmd_le_write_suggested_default_data_length((void *)cmd_params);
   1dbb8:	f7ef fbea 	bl	d390 <sdc_hci_cmd_le_write_suggested_default_data_length>
   1dbbc:	e743      	b.n	1da46 <hci_internal_cmd_put+0x41e>
		return hci_cmd_le_read_local_p256_public_key();
   1dbbe:	f000 fa67 	bl	1e090 <hci_cmd_le_read_local_p256_public_key>
   1dbc2:	e740      	b.n	1da46 <hci_internal_cmd_put+0x41e>
		return hci_cmd_le_generate_dhkey((void *)cmd_params);
   1dbc4:	f006 fb4d 	bl	24262 <hci_cmd_le_generate_dhkey>
   1dbc8:	e73d      	b.n	1da46 <hci_internal_cmd_put+0x41e>
		return hci_cmd_le_generate_dhkey_v2((void *)cmd_params);
   1dbca:	f006 fb4d 	bl	24268 <hci_cmd_le_generate_dhkey_v2>
   1dbce:	e73a      	b.n	1da46 <hci_internal_cmd_put+0x41e>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_max_data_length_return_t);
   1dbd0:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   1dbd4:	486f      	ldr	r0, [pc, #444]	; (1dd94 <hci_internal_cmd_put+0x76c>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_max_data_length_return_t);
   1dbd6:	3308      	adds	r3, #8
   1dbd8:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   1dbdc:	f7ef fbb5 	bl	d34a <sdc_hci_cmd_le_read_max_data_length>
   1dbe0:	e731      	b.n	1da46 <hci_internal_cmd_put+0x41e>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_phy_return_t);
   1dbe2:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   1dbe6:	496b      	ldr	r1, [pc, #428]	; (1dd94 <hci_internal_cmd_put+0x76c>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_phy_return_t);
   1dbe8:	3304      	adds	r3, #4
   1dbea:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   1dbee:	f7ef fbae 	bl	d34e <sdc_hci_cmd_le_read_phy>
   1dbf2:	e728      	b.n	1da46 <hci_internal_cmd_put+0x41e>
		return sdc_hci_cmd_le_set_default_phy((void *)cmd_params);
   1dbf4:	f7ef fbbf 	bl	d376 <sdc_hci_cmd_le_set_default_phy>
   1dbf8:	e725      	b.n	1da46 <hci_internal_cmd_put+0x41e>
		return sdc_hci_cmd_le_set_phy((void *)cmd_params);
   1dbfa:	f7ef fbc3 	bl	d384 <sdc_hci_cmd_le_set_phy>
   1dbfe:	e722      	b.n	1da46 <hci_internal_cmd_put+0x41e>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_transmit_power_return_t);
   1dc00:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   1dc04:	4863      	ldr	r0, [pc, #396]	; (1dd94 <hci_internal_cmd_put+0x76c>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_transmit_power_return_t);
   1dc06:	3302      	adds	r3, #2
   1dc08:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   1dc0c:	f7ef fba5 	bl	d35a <sdc_hci_cmd_le_read_transmit_power>
   1dc10:	e719      	b.n	1da46 <hci_internal_cmd_put+0x41e>
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   1dc12:	4620      	mov	r0, r4
	switch (opcode)	{
   1dc14:	f64f 420b 	movw	r2, #64523	; 0xfc0b
   1dc18:	f830 3b03 	ldrh.w	r3, [r0], #3
   1dc1c:	4293      	cmp	r3, r2
   1dc1e:	d823      	bhi.n	1dc68 <hci_internal_cmd_put+0x640>
   1dc20:	f5b3 4f7c 	cmp.w	r3, #64512	; 0xfc00
   1dc24:	f67f ad3d 	bls.w	1d6a2 <hci_internal_cmd_put+0x7a>
   1dc28:	f5a3 437c 	sub.w	r3, r3, #64512	; 0xfc00
   1dc2c:	3b01      	subs	r3, #1
   1dc2e:	2b0a      	cmp	r3, #10
   1dc30:	f63f ad37 	bhi.w	1d6a2 <hci_internal_cmd_put+0x7a>
   1dc34:	a201      	add	r2, pc, #4	; (adr r2, 1dc3c <hci_internal_cmd_put+0x614>)
   1dc36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1dc3a:	bf00      	nop
   1dc3c:	0001dcb9 	.word	0x0001dcb9
   1dc40:	0001dcd5 	.word	0x0001dcd5
   1dc44:	0001d6a3 	.word	0x0001d6a3
   1dc48:	0001d6a3 	.word	0x0001d6a3
   1dc4c:	0001d6a3 	.word	0x0001d6a3
   1dc50:	0001dd25 	.word	0x0001dd25
   1dc54:	0001d6a3 	.word	0x0001d6a3
   1dc58:	0001d6a3 	.word	0x0001d6a3
   1dc5c:	0001dd01 	.word	0x0001dd01
   1dc60:	0001dd13 	.word	0x0001dd13
   1dc64:	0001dd2b 	.word	0x0001dd2b
   1dc68:	f503 7240 	add.w	r2, r3, #768	; 0x300
   1dc6c:	b292      	uxth	r2, r2
   1dc6e:	2a0c      	cmp	r2, #12
   1dc70:	f63f ad17 	bhi.w	1d6a2 <hci_internal_cmd_put+0x7a>
   1dc74:	f5a3 437d 	sub.w	r3, r3, #64768	; 0xfd00
   1dc78:	2b0c      	cmp	r3, #12
   1dc7a:	f63f ad12 	bhi.w	1d6a2 <hci_internal_cmd_put+0x7a>
   1dc7e:	a201      	add	r2, pc, #4	; (adr r2, 1dc84 <hci_internal_cmd_put+0x65c>)
   1dc80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1dc84:	0001dd3d 	.word	0x0001dd3d
   1dc88:	0001dd5b 	.word	0x0001dd5b
   1dc8c:	0001dd61 	.word	0x0001dd61
   1dc90:	0001dd67 	.word	0x0001dd67
   1dc94:	0001dd6d 	.word	0x0001dd6d
   1dc98:	0001dd73 	.word	0x0001dd73
   1dc9c:	0001d6a3 	.word	0x0001d6a3
   1dca0:	0001d6a3 	.word	0x0001d6a3
   1dca4:	0001d6a3 	.word	0x0001d6a3
   1dca8:	0001dd79 	.word	0x0001dd79
   1dcac:	0001d6a3 	.word	0x0001d6a3
   1dcb0:	0001d6a3 	.word	0x0001d6a3
   1dcb4:	0001dd7f 	.word	0x0001dd7f
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_version_info_return_t);
   1dcb8:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   1dcbc:	4835      	ldr	r0, [pc, #212]	; (1dd94 <hci_internal_cmd_put+0x76c>)
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_version_info_return_t);
   1dcbe:	330c      	adds	r3, #12
   1dcc0:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   1dcc4:	f7e3 fd7e 	bl	17c4 <sdc_hci_cmd_vs_zephyr_read_version_info>
	switch (hci_opcode) {
   1dcc8:	f026 0308 	bic.w	r3, r6, #8
   1dccc:	f64f 5202 	movw	r2, #64770	; 0xfd02
   1dcd0:	4293      	cmp	r3, r2
   1dcd2:	e4fc      	b.n	1d6ce <hci_internal_cmd_put+0xa6>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_supported_commands_return_t);
   1dcd4:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1dcd8:	3340      	adds	r3, #64	; 0x40
   1dcda:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   1dcde:	4b2d      	ldr	r3, [pc, #180]	; (1dd94 <hci_internal_cmd_put+0x76c>)
   1dce0:	2200      	movs	r2, #0
   1dce2:	801a      	strh	r2, [r3, #0]
	cmds->read_version_info = 1;
   1dce4:	79eb      	ldrb	r3, [r5, #7]
   1dce6:	f023 0323 	bic.w	r3, r3, #35	; 0x23
   1dcea:	f043 0323 	orr.w	r3, r3, #35	; 0x23
   1dcee:	71eb      	strb	r3, [r5, #7]
	cmds->read_static_addresses = 1;
   1dcf0:	7a2b      	ldrb	r3, [r5, #8]
   1dcf2:	f023 0307 	bic.w	r3, r3, #7
   1dcf6:	f043 0307 	orr.w	r3, r3, #7
   1dcfa:	722b      	strb	r3, [r5, #8]
		return 0;
   1dcfc:	2000      	movs	r0, #0
   1dcfe:	e7e3      	b.n	1dcc8 <hci_internal_cmd_put+0x6a0>
		*param_length_out += sizeof(sdc_hci_vs_zephyr_static_address_t);
   1dd00:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   1dd04:	4823      	ldr	r0, [pc, #140]	; (1dd94 <hci_internal_cmd_put+0x76c>)
		*param_length_out += sizeof(sdc_hci_vs_zephyr_static_address_t);
   1dd06:	3317      	adds	r3, #23
   1dd08:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   1dd0c:	f7ef fab0 	bl	d270 <sdc_hci_cmd_vs_zephyr_read_static_addresses>
   1dd10:	e7da      	b.n	1dcc8 <hci_internal_cmd_put+0x6a0>
		*param_length_out +=
   1dd12:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   1dd16:	481f      	ldr	r0, [pc, #124]	; (1dd94 <hci_internal_cmd_put+0x76c>)
		*param_length_out +=
   1dd18:	3320      	adds	r3, #32
   1dd1a:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   1dd1e:	f7ef fa5a 	bl	d1d6 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>
   1dd22:	e7d1      	b.n	1dcc8 <hci_internal_cmd_put+0x6a0>
		return sdc_hci_cmd_vs_zephyr_write_bd_addr((void *)cmd_params);
   1dd24:	f7ef faf3 	bl	d30e <sdc_hci_cmd_vs_zephyr_write_bd_addr>
   1dd28:	e7ce      	b.n	1dcc8 <hci_internal_cmd_put+0x6a0>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_chip_temp_return_t);
   1dd2a:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_chip_temp((void *)event_out_params);
   1dd2e:	4819      	ldr	r0, [pc, #100]	; (1dd94 <hci_internal_cmd_put+0x76c>)
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_chip_temp_return_t);
   1dd30:	3301      	adds	r3, #1
   1dd32:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_chip_temp((void *)event_out_params);
   1dd36:	f7ef fa3a 	bl	d1ae <sdc_hci_cmd_vs_zephyr_read_chip_temp>
   1dd3a:	e7c5      	b.n	1dcc8 <hci_internal_cmd_put+0x6a0>
		*param_length_out += sizeof(sdc_hci_cmd_vs_read_supported_vs_commands_return_t);
   1dd3c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1dd40:	3340      	adds	r3, #64	; 0x40
   1dd42:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   1dd46:	4b13      	ldr	r3, [pc, #76]	; (1dd94 <hci_internal_cmd_put+0x76c>)
   1dd48:	2200      	movs	r2, #0
   1dd4a:	801a      	strh	r2, [r3, #0]
	cmds->read_supported_vs_commands = 1;
   1dd4c:	79eb      	ldrb	r3, [r5, #7]
   1dd4e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   1dd52:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
   1dd56:	71eb      	strb	r3, [r5, #7]
	switch (hci_opcode) {
   1dd58:	e7d0      	b.n	1dcfc <hci_internal_cmd_put+0x6d4>
		return sdc_hci_cmd_vs_llpm_mode_set((void *)cmd_params);
   1dd5a:	f7ef fa1b 	bl	d194 <sdc_hci_cmd_vs_llpm_mode_set>
   1dd5e:	e7b3      	b.n	1dcc8 <hci_internal_cmd_put+0x6a0>
		return sdc_hci_cmd_vs_conn_update((void *)cmd_params);
   1dd60:	f7ef fa14 	bl	d18c <sdc_hci_cmd_vs_conn_update>
   1dd64:	e7b0      	b.n	1dcc8 <hci_internal_cmd_put+0x6a0>
		return sdc_hci_cmd_vs_conn_event_extend((void *)cmd_params);
   1dd66:	f7ef fa09 	bl	d17c <sdc_hci_cmd_vs_conn_event_extend>
   1dd6a:	e7ad      	b.n	1dcc8 <hci_internal_cmd_put+0x6a0>
		return sdc_hci_cmd_vs_qos_conn_event_report_enable((void *)cmd_params);
   1dd6c:	f7ef fa18 	bl	d1a0 <sdc_hci_cmd_vs_qos_conn_event_report_enable>
   1dd70:	e7aa      	b.n	1dcc8 <hci_internal_cmd_put+0x6a0>
		return sdc_hci_cmd_vs_event_length_set((void *)cmd_params);
   1dd72:	f7ef fa0d 	bl	d190 <sdc_hci_cmd_vs_event_length_set>
   1dd76:	e7a7      	b.n	1dcc8 <hci_internal_cmd_put+0x6a0>
		return sdc_hci_cmd_vs_peripheral_latency_mode_set((void *)cmd_params);
   1dd78:	f7ef fa0e 	bl	d198 <sdc_hci_cmd_vs_peripheral_latency_mode_set>
   1dd7c:	e7a4      	b.n	1dcc8 <hci_internal_cmd_put+0x6a0>
		return sdc_hci_cmd_vs_set_adv_randomness((void *)cmd_params);
   1dd7e:	f7ef fa14 	bl	d1aa <sdc_hci_cmd_vs_set_adv_randomness>
   1dd82:	e7a1      	b.n	1dcc8 <hci_internal_cmd_put+0x6a0>
	switch (hci_opcode) {
   1dd84:	f242 0326 	movw	r3, #8230	; 0x2026
   1dd88:	429e      	cmp	r6, r3
   1dd8a:	f67f ad9c 	bls.w	1d8c6 <hci_internal_cmd_put+0x29e>
   1dd8e:	e4e4      	b.n	1d75a <hci_internal_cmd_put+0x132>
		switch (BT_OGF(opcode)) {
   1dd90:	2001      	movs	r0, #1
	if (generate_command_status_event ||
   1dd92:	e4e2      	b.n	1d75a <hci_internal_cmd_put+0x132>
   1dd94:	2000554a 	.word	0x2000554a
	switch (hci_opcode) {
   1dd98:	3b2d      	subs	r3, #45	; 0x2d
   1dd9a:	4a0b      	ldr	r2, [pc, #44]	; (1ddc8 <hci_internal_cmd_put+0x7a0>)
   1dd9c:	b29b      	uxth	r3, r3
   1dd9e:	fa22 f303 	lsr.w	r3, r2, r3
   1dda2:	07db      	lsls	r3, r3, #31
   1dda4:	f57f acd9 	bpl.w	1d75a <hci_internal_cmd_put+0x132>
   1dda8:	e6e6      	b.n	1db78 <hci_internal_cmd_put+0x550>
   1ddaa:	f242 0385 	movw	r3, #8325	; 0x2085
   1ddae:	429e      	cmp	r6, r3
   1ddb0:	d905      	bls.n	1ddbe <hci_internal_cmd_put+0x796>
		return 0;
   1ddb2:	2000      	movs	r0, #0
   1ddb4:	e4d1      	b.n	1d75a <hci_internal_cmd_put+0x132>
	switch (hci_opcode) {
   1ddb6:	f242 0385 	movw	r3, #8325	; 0x2085
   1ddba:	2001      	movs	r0, #1
   1ddbc:	e493      	b.n	1d6e6 <hci_internal_cmd_put+0xbe>
		return 0;
   1ddbe:	2000      	movs	r0, #0
   1ddc0:	e493      	b.n	1d6ea <hci_internal_cmd_put+0xc2>
		return -NRF_EPERM;
   1ddc2:	f04f 30ff 	mov.w	r0, #4294967295
   1ddc6:	e6e3      	b.n	1db90 <hci_internal_cmd_put+0x568>
   1ddc8:	01000401 	.word	0x01000401

0001ddcc <hci_internal_msg_get>:

int hci_internal_msg_get(uint8_t *msg_out, sdc_hci_msg_type_t *msg_type_out)
{
   1ddcc:	b538      	push	{r3, r4, r5, lr}
	if (cmd_complete_or_status.occurred) {
   1ddce:	4c09      	ldr	r4, [pc, #36]	; (1ddf4 <hci_internal_msg_get+0x28>)
   1ddd0:	7823      	ldrb	r3, [r4, #0]
{
   1ddd2:	460d      	mov	r5, r1
	if (cmd_complete_or_status.occurred) {
   1ddd4:	b91b      	cbnz	r3, 1ddde <hci_internal_msg_get+0x12>

		return 0;
	}

	return sdc_hci_get(msg_out, msg_type_out);
}
   1ddd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return sdc_hci_get(msg_out, msg_type_out);
   1ddda:	f7ef b9af 	b.w	d13c <sdc_hci_get>
		memcpy(msg_out,
   1ddde:	78a2      	ldrb	r2, [r4, #2]
   1dde0:	1c61      	adds	r1, r4, #1
   1dde2:	3202      	adds	r2, #2
   1dde4:	f007 f9ef 	bl	251c6 <memcpy>
		cmd_complete_or_status.occurred = false;
   1dde8:	2000      	movs	r0, #0
		*msg_type_out = SDC_HCI_MSG_TYPE_EVT;
   1ddea:	2304      	movs	r3, #4
		cmd_complete_or_status.occurred = false;
   1ddec:	7020      	strb	r0, [r4, #0]
		*msg_type_out = SDC_HCI_MSG_TYPE_EVT;
   1ddee:	702b      	strb	r3, [r5, #0]
}
   1ddf0:	bd38      	pop	{r3, r4, r5, pc}
   1ddf2:	bf00      	nop
   1ddf4:	20005543 	.word	0x20005543

0001ddf8 <bt_rand>:
#define BT_ECB_BLOCK_SIZE 16

static const struct device *dev = DEVICE_DT_GET(DT_NODELABEL(rng));

int bt_rand(void *buf, size_t len)
{
   1ddf8:	b570      	push	{r4, r5, r6, lr}
   1ddfa:	4605      	mov	r5, r0
   1ddfc:	460e      	mov	r6, r1
   1ddfe:	4c08      	ldr	r4, [pc, #32]	; (1de20 <bt_rand+0x28>)
   1de00:	4620      	mov	r0, r4
   1de02:	f006 fbd6 	bl	245b2 <z_device_is_ready>
	if (unlikely(!device_is_ready(dev))) {
   1de06:	b138      	cbz	r0, 1de18 <bt_rand+0x20>
   1de08:	68a3      	ldr	r3, [r4, #8]
   1de0a:	b2b2      	uxth	r2, r6
   1de0c:	4629      	mov	r1, r5
   1de0e:	4620      	mov	r0, r4
   1de10:	681b      	ldr	r3, [r3, #0]
		return -ENODEV;
	}

	return entropy_get_entropy(dev, (uint8_t *)buf, len);
}
   1de12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1de16:	4718      	bx	r3
   1de18:	f06f 0012 	mvn.w	r0, #18
   1de1c:	bd70      	pop	{r4, r5, r6, pc}
   1de1e:	bf00      	nop
   1de20:	00025338 	.word	0x00025338

0001de24 <ecdh_p256_common_secret>:

	return buf;
}

static struct net_buf *ecdh_p256_common_secret(bool use_debug)
{
   1de24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	err = ocrypto_ecdh_p256_common_secret(ecdh.dhkey_be,
   1de26:	4b24      	ldr	r3, [pc, #144]	; (1deb8 <ecdh_p256_common_secret+0x94>)
   1de28:	4924      	ldr	r1, [pc, #144]	; (1debc <ecdh_p256_common_secret+0x98>)
   1de2a:	f103 0220 	add.w	r2, r3, #32
   1de2e:	2800      	cmp	r0, #0
   1de30:	bf08      	it	eq
   1de32:	4619      	moveq	r1, r3
{
   1de34:	af00      	add	r7, sp, #0
	err = ocrypto_ecdh_p256_common_secret(ecdh.dhkey_be,
   1de36:	4610      	mov	r0, r2
   1de38:	f002 fd30 	bl	2089c <ocrypto_ecdh_p256_common_secret>
	if (err) {
   1de3c:	4604      	mov	r4, r0
   1de3e:	b180      	cbz	r0, 1de62 <ecdh_p256_common_secret+0x3e>
		LOG_ERR("public key is not valid (err %d)", err);
   1de40:	466d      	mov	r5, sp
   1de42:	b088      	sub	sp, #32
   1de44:	466a      	mov	r2, sp
   1de46:	4b1e      	ldr	r3, [pc, #120]	; (1dec0 <ecdh_p256_common_secret+0x9c>)
   1de48:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1de4c:	2303      	movs	r3, #3
   1de4e:	f842 3f10 	str.w	r3, [r2, #16]!
   1de52:	481c      	ldr	r0, [pc, #112]	; (1dec4 <ecdh_p256_common_secret+0xa0>)
   1de54:	2300      	movs	r3, #0
   1de56:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1de5a:	f7f7 fbd1 	bl	15600 <z_impl_z_log_msg_static_create>
		return BT_HCI_ERR_INVALID_PARAM;
   1de5e:	2412      	movs	r4, #18
   1de60:	46ad      	mov	sp, r5
	struct net_buf *buf;
	uint8_t status;

	status = common_secret(use_debug);

	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   1de62:	f04f 32ff 	mov.w	r2, #4294967295
   1de66:	f04f 33ff 	mov.w	r3, #4294967295
   1de6a:	2001      	movs	r0, #1
   1de6c:	f7f9 f8fc 	bl	17068 <bt_buf_get_rx>
	return net_buf_simple_add(&buf->b, len);
   1de70:	f100 060c 	add.w	r6, r0, #12
   1de74:	2102      	movs	r1, #2
   1de76:	4605      	mov	r5, r0
   1de78:	4630      	mov	r0, r6
   1de7a:	f006 f83f 	bl	23efc <net_buf_simple_add>

	hdr = net_buf_add(buf, sizeof(*hdr));
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   1de7e:	233e      	movs	r3, #62	; 0x3e
   1de80:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   1de82:	2322      	movs	r3, #34	; 0x22
   1de84:	7043      	strb	r3, [r0, #1]
   1de86:	2101      	movs	r1, #1
   1de88:	4630      	mov	r0, r6
   1de8a:	f006 f837 	bl	23efc <net_buf_simple_add>

	meta = net_buf_add(buf, sizeof(*meta));
	meta->subevent = BT_HCI_EVT_LE_GENERATE_DHKEY_COMPLETE;
   1de8e:	2309      	movs	r3, #9
   1de90:	7003      	strb	r3, [r0, #0]
   1de92:	2121      	movs	r1, #33	; 0x21
   1de94:	4630      	mov	r0, r6
   1de96:	f006 f831 	bl	23efc <net_buf_simple_add>

	evt = net_buf_add(buf, sizeof(*evt));
	evt->status = status;
   1de9a:	f800 4b01 	strb.w	r4, [r0], #1

	if (status) {
   1de9e:	b134      	cbz	r4, 1deae <ecdh_p256_common_secret+0x8a>
__ssp_bos_icheck3(memset, void *, int)
   1dea0:	2220      	movs	r2, #32
   1dea2:	21ff      	movs	r1, #255	; 0xff
   1dea4:	f007 f99d 	bl	251e2 <memset>
		sys_memcpy_swap(evt->dhkey, ecdh.dhkey_be,
				sizeof(ecdh.dhkey_be));
	}

	return buf;
}
   1dea8:	4628      	mov	r0, r5
   1deaa:	46bd      	mov	sp, r7
   1deac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		sys_memcpy_swap(evt->dhkey, ecdh.dhkey_be,
   1deae:	4906      	ldr	r1, [pc, #24]	; (1dec8 <ecdh_p256_common_secret+0xa4>)
   1deb0:	f006 f9cd 	bl	2424e <sys_memcpy_swap.constprop.0>
   1deb4:	e7f8      	b.n	1dea8 <ecdh_p256_common_secret+0x84>
   1deb6:	bf00      	nop
   1deb8:	2000558a 	.word	0x2000558a
   1debc:	000279cf 	.word	0x000279cf
   1dec0:	00027991 	.word	0x00027991
   1dec4:	000255c4 	.word	0x000255c4
   1dec8:	200055aa 	.word	0x200055aa

0001decc <ecdh_cmd_process>:

void ecdh_cmd_process(void)
{
   1decc:	b5f0      	push	{r4, r5, r6, r7, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1dece:	4c42      	ldr	r4, [pc, #264]	; (1dfd8 <ecdh_cmd_process+0x10c>)
   1ded0:	f3bf 8f5b 	dmb	ish
   1ded4:	6823      	ldr	r3, [r4, #0]
   1ded6:	f3bf 8f5b 	dmb	ish
	struct net_buf *buf;

	switch (atomic_get(&cmd)) {
   1deda:	2b02      	cmp	r3, #2
{
   1dedc:	b087      	sub	sp, #28
   1dede:	4627      	mov	r7, r4
	switch (atomic_get(&cmd)) {
   1dee0:	d05a      	beq.n	1df98 <ecdh_cmd_process+0xcc>
   1dee2:	2b04      	cmp	r3, #4
   1dee4:	d05d      	beq.n	1dfa2 <ecdh_cmd_process+0xd6>
   1dee6:	2b01      	cmp	r3, #1
   1dee8:	d15d      	bne.n	1dfa6 <ecdh_cmd_process+0xda>
		err = bt_rand(ecdh.private_key_be, 32);
   1deea:	4c3c      	ldr	r4, [pc, #240]	; (1dfdc <ecdh_cmd_process+0x110>)
		if (!memcmp(ecdh.private_key_be, debug_private_key_be, 32)) {
   1deec:	4e3c      	ldr	r6, [pc, #240]	; (1dfe0 <ecdh_cmd_process+0x114>)
		err = bt_rand(ecdh.private_key_be, 32);
   1deee:	2120      	movs	r1, #32
   1def0:	4620      	mov	r0, r4
   1def2:	f7ff ff81 	bl	1ddf8 <bt_rand>
		if (err) {
   1def6:	2800      	cmp	r0, #0
   1def8:	d143      	bne.n	1df82 <ecdh_cmd_process+0xb6>
		if (!memcmp(ecdh.private_key_be, debug_private_key_be, 32)) {
   1defa:	2220      	movs	r2, #32
   1defc:	4631      	mov	r1, r6
   1defe:	4620      	mov	r0, r4
   1df00:	f007 f951 	bl	251a6 <memcmp>
   1df04:	2800      	cmp	r0, #0
   1df06:	d0f2      	beq.n	1deee <ecdh_cmd_process+0x22>
		err = ocrypto_ecdh_p256_public_key(ecdh.public_key_be,
   1df08:	4836      	ldr	r0, [pc, #216]	; (1dfe4 <ecdh_cmd_process+0x118>)
   1df0a:	4621      	mov	r1, r4
   1df0c:	f002 fcb2 	bl	20874 <ocrypto_ecdh_p256_public_key>
	} while (err);
   1df10:	4605      	mov	r5, r0
   1df12:	2800      	cmp	r0, #0
   1df14:	d1eb      	bne.n	1deee <ecdh_cmd_process+0x22>
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   1df16:	f04f 32ff 	mov.w	r2, #4294967295
   1df1a:	f04f 33ff 	mov.w	r3, #4294967295
   1df1e:	2001      	movs	r0, #1
   1df20:	f7f9 f8a2 	bl	17068 <bt_buf_get_rx>
   1df24:	f100 060c 	add.w	r6, r0, #12
   1df28:	2102      	movs	r1, #2
   1df2a:	4604      	mov	r4, r0
   1df2c:	4630      	mov	r0, r6
   1df2e:	f005 ffe5 	bl	23efc <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   1df32:	233e      	movs	r3, #62	; 0x3e
   1df34:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   1df36:	2342      	movs	r3, #66	; 0x42
   1df38:	7043      	strb	r3, [r0, #1]
   1df3a:	2101      	movs	r1, #1
   1df3c:	4630      	mov	r0, r6
   1df3e:	f005 ffdd 	bl	23efc <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_P256_PUBLIC_KEY_COMPLETE;
   1df42:	2308      	movs	r3, #8
   1df44:	7003      	strb	r3, [r0, #0]
   1df46:	2141      	movs	r1, #65	; 0x41
   1df48:	4630      	mov	r0, r6
   1df4a:	f005 ffd7 	bl	23efc <net_buf_simple_add>
   1df4e:	4606      	mov	r6, r0
	evt->status = status;
   1df50:	f800 5b01 	strb.w	r5, [r0], #1
	if (status) {
   1df54:	b1bd      	cbz	r5, 1df86 <ecdh_cmd_process+0xba>
   1df56:	2240      	movs	r2, #64	; 0x40
   1df58:	2100      	movs	r1, #0
   1df5a:	f007 f942 	bl	251e2 <memset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1df5e:	f3bf 8f5b 	dmb	ish
   1df62:	2300      	movs	r3, #0
   1df64:	e857 2f00 	ldrex	r2, [r7]
   1df68:	e847 3100 	strex	r1, r3, [r7]
   1df6c:	2900      	cmp	r1, #0
   1df6e:	d1f9      	bne.n	1df64 <ecdh_cmd_process+0x98>
   1df70:	f3bf 8f5b 	dmb	ish
		buf = NULL;
		break;
	}

	atomic_set(&cmd, 0);
	if (buf) {
   1df74:	b36c      	cbz	r4, 1dfd2 <ecdh_cmd_process+0x106>
		bt_recv(buf);
   1df76:	4620      	mov	r0, r4
	}
}
   1df78:	b007      	add	sp, #28
   1df7a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_recv(buf);
   1df7e:	f7fa b975 	b.w	1826c <bt_recv>
			return BT_HCI_ERR_UNSPECIFIED;
   1df82:	251f      	movs	r5, #31
   1df84:	e7c7      	b.n	1df16 <ecdh_cmd_process+0x4a>
		sys_memcpy_swap(&evt->key[0], &ecdh.public_key_be[0], 32);
   1df86:	4917      	ldr	r1, [pc, #92]	; (1dfe4 <ecdh_cmd_process+0x118>)
   1df88:	f006 f961 	bl	2424e <sys_memcpy_swap.constprop.0>
		sys_memcpy_swap(&evt->key[32], &ecdh.public_key_be[32], 32);
   1df8c:	3120      	adds	r1, #32
   1df8e:	f106 0021 	add.w	r0, r6, #33	; 0x21
   1df92:	f006 f95c 	bl	2424e <sys_memcpy_swap.constprop.0>
		break;
   1df96:	e7e2      	b.n	1df5e <ecdh_cmd_process+0x92>
		buf = ecdh_p256_common_secret(false);
   1df98:	2000      	movs	r0, #0
		buf = ecdh_p256_common_secret(true);
   1df9a:	f7ff ff43 	bl	1de24 <ecdh_p256_common_secret>
   1df9e:	4604      	mov	r4, r0
		break;
   1dfa0:	e7dd      	b.n	1df5e <ecdh_cmd_process+0x92>
		buf = ecdh_p256_common_secret(true);
   1dfa2:	2001      	movs	r0, #1
   1dfa4:	e7f9      	b.n	1df9a <ecdh_cmd_process+0xce>
		LOG_WRN("Unknown command");
   1dfa6:	4b10      	ldr	r3, [pc, #64]	; (1dfe8 <ecdh_cmd_process+0x11c>)
   1dfa8:	9305      	str	r3, [sp, #20]
   1dfaa:	2302      	movs	r3, #2
   1dfac:	9304      	str	r3, [sp, #16]
   1dfae:	2300      	movs	r3, #0
   1dfb0:	480e      	ldr	r0, [pc, #56]	; (1dfec <ecdh_cmd_process+0x120>)
   1dfb2:	aa04      	add	r2, sp, #16
   1dfb4:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1dfb8:	f7f7 fb22 	bl	15600 <z_impl_z_log_msg_static_create>
   1dfbc:	f3bf 8f5b 	dmb	ish
   1dfc0:	2300      	movs	r3, #0
   1dfc2:	e854 2f00 	ldrex	r2, [r4]
   1dfc6:	e844 3100 	strex	r1, r3, [r4]
   1dfca:	2900      	cmp	r1, #0
   1dfcc:	d1f9      	bne.n	1dfc2 <ecdh_cmd_process+0xf6>
   1dfce:	f3bf 8f5b 	dmb	ish
}
   1dfd2:	b007      	add	sp, #28
   1dfd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1dfd6:	bf00      	nop
   1dfd8:	20005218 	.word	0x20005218
   1dfdc:	2000558a 	.word	0x2000558a
   1dfe0:	000279cf 	.word	0x000279cf
   1dfe4:	200055aa 	.word	0x200055aa
   1dfe8:	000279b2 	.word	0x000279b2
   1dfec:	000255c4 	.word	0x000255c4

0001dff0 <ecdh_thread>:
{
	k_poll_signal_raise(&ecdh_signal, 0);
}

static void ecdh_thread(void *p1, void *p2, void *p3)
{
   1dff0:	b510      	push	{r4, lr}
   1dff2:	b086      	sub	sp, #24
	struct k_poll_event events[1] = {
   1dff4:	2210      	movs	r2, #16
   1dff6:	2100      	movs	r1, #0
   1dff8:	a801      	add	r0, sp, #4
   1dffa:	f007 f8f2 	bl	251e2 <memset>
   1dffe:	4c0b      	ldr	r4, [pc, #44]	; (1e02c <ecdh_thread+0x3c>)
   1e000:	9405      	str	r4, [sp, #20]
   1e002:	2301      	movs	r3, #1
   1e004:	f88d 3011 	strb.w	r3, [sp, #17]
	return z_impl_k_poll(events, num_events, timeout);
   1e008:	f04f 32ff 	mov.w	r2, #4294967295
   1e00c:	f04f 33ff 	mov.w	r3, #4294967295
   1e010:	2101      	movs	r1, #1
   1e012:	a801      	add	r0, sp, #4
   1e014:	f002 fb84 	bl	20720 <z_impl_k_poll>
	z_impl_k_poll_signal_reset(sig);
   1e018:	4620      	mov	r0, r4
   1e01a:	f007 f852 	bl	250c2 <z_impl_k_poll_signal_reset>

	while (true) {
		k_poll(events, 1, K_FOREVER);

		k_poll_signal_reset(&ecdh_signal);
		events[0].state = K_POLL_STATE_NOT_READY;
   1e01e:	9b04      	ldr	r3, [sp, #16]
   1e020:	f36f 3394 	bfc	r3, #14, #7
   1e024:	9304      	str	r3, [sp, #16]

		ecdh_cmd_process();
   1e026:	f7ff ff51 	bl	1decc <ecdh_cmd_process>
	while (true) {
   1e02a:	e7ed      	b.n	1e008 <ecdh_thread+0x18>
   1e02c:	20005208 	.word	0x20005208

0001e030 <hci_ecdh_init>:
	}
}
#endif /* !defined(CONFIG_BT_CTLR_ECDH_IN_MPSL_WORK) */

void hci_ecdh_init(void)
{
   1e030:	b510      	push	{r4, lr}
   1e032:	b088      	sub	sp, #32
	z_impl_k_poll_signal_init(sig);
   1e034:	480e      	ldr	r0, [pc, #56]	; (1e070 <hci_ecdh_init+0x40>)
   1e036:	f007 f83f 	bl	250b8 <z_impl_k_poll_signal_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1e03a:	4c0e      	ldr	r4, [pc, #56]	; (1e074 <hci_ecdh_init+0x44>)
   1e03c:	490e      	ldr	r1, [pc, #56]	; (1e078 <hci_ecdh_init+0x48>)
   1e03e:	2200      	movs	r2, #0
   1e040:	2300      	movs	r3, #0
   1e042:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1e046:	2300      	movs	r3, #0
   1e048:	220a      	movs	r2, #10
   1e04a:	e9cd 2303 	strd	r2, r3, [sp, #12]
   1e04e:	e9cd 3301 	strd	r3, r3, [sp, #4]
   1e052:	9300      	str	r3, [sp, #0]
   1e054:	f44f 7262 	mov.w	r2, #904	; 0x388
   1e058:	4b08      	ldr	r3, [pc, #32]	; (1e07c <hci_ecdh_init+0x4c>)
   1e05a:	4620      	mov	r0, r4
   1e05c:	f001 fae6 	bl	1f62c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   1e060:	4907      	ldr	r1, [pc, #28]	; (1e080 <hci_ecdh_init+0x50>)
   1e062:	4620      	mov	r0, r4
			NULL, NULL, NULL, K_PRIO_PREEMPT(10), 0, K_NO_WAIT);
	k_thread_name_set(&ecdh_thread_data, "BT CTLR ECDH");
#else
	k_work_init(&ecdh_work, ecdh_work_handler);
#endif /* !defined(CONFIG_BT_CTLR_ECDH_IN_MPSL_WORK) */
}
   1e064:	b008      	add	sp, #32
   1e066:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1e06a:	f006 bb69 	b.w	24740 <z_impl_k_thread_name_set>
   1e06e:	bf00      	nop
   1e070:	20005208 	.word	0x20005208
   1e074:	20002c00 	.word	0x20002c00
   1e078:	20008e80 	.word	0x20008e80
   1e07c:	0001dff1 	.word	0x0001dff1
   1e080:	000279c2 	.word	0x000279c2

0001e084 <hci_ecdh_uninit>:
	z_impl_k_thread_abort(thread);
   1e084:	4801      	ldr	r0, [pc, #4]	; (1e08c <hci_ecdh_uninit+0x8>)
   1e086:	f7f8 bd65 	b.w	16b54 <z_impl_k_thread_abort>
   1e08a:	bf00      	nop
   1e08c:	20002c00 	.word	0x20002c00

0001e090 <hci_cmd_le_read_local_p256_public_key>:
#endif /* !defined(CONFIG_BT_CTLR_ECDH_IN_MPSL_WORK) */
}


uint8_t hci_cmd_le_read_local_p256_public_key(void)
{
   1e090:	b508      	push	{r3, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1e092:	4b0b      	ldr	r3, [pc, #44]	; (1e0c0 <hci_cmd_le_read_local_p256_public_key+0x30>)
   1e094:	f3bf 8f5b 	dmb	ish
   1e098:	2201      	movs	r2, #1
   1e09a:	e853 1f00 	ldrex	r1, [r3]
   1e09e:	2900      	cmp	r1, #0
   1e0a0:	d103      	bne.n	1e0aa <hci_cmd_le_read_local_p256_public_key+0x1a>
   1e0a2:	e843 2000 	strex	r0, r2, [r3]
   1e0a6:	2800      	cmp	r0, #0
   1e0a8:	d1f7      	bne.n	1e09a <hci_cmd_le_read_local_p256_public_key+0xa>
   1e0aa:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&cmd, 0, GEN_PUBLIC_KEY)) {
   1e0ae:	d105      	bne.n	1e0bc <hci_cmd_le_read_local_p256_public_key+0x2c>
	return z_impl_k_poll_signal_raise(sig, result);
   1e0b0:	4804      	ldr	r0, [pc, #16]	; (1e0c4 <hci_cmd_le_read_local_p256_public_key+0x34>)
   1e0b2:	2100      	movs	r1, #0
   1e0b4:	f002 fb90 	bl	207d8 <z_impl_k_poll_signal_raise>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	work_submit();

	return 0;
   1e0b8:	2000      	movs	r0, #0
}
   1e0ba:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1e0bc:	200c      	movs	r0, #12
   1e0be:	e7fc      	b.n	1e0ba <hci_cmd_le_read_local_p256_public_key+0x2a>
   1e0c0:	20005218 	.word	0x20005218
   1e0c4:	20005208 	.word	0x20005208

0001e0c8 <cmd_le_generate_dhkey>:

uint8_t cmd_le_generate_dhkey(uint8_t *key, uint8_t key_type)
{
   1e0c8:	b510      	push	{r4, lr}
	if (!atomic_cas(&cmd, 0, key_type ? GEN_DHKEY_DEBUG : GEN_DHKEY)) {
   1e0ca:	2900      	cmp	r1, #0
   1e0cc:	4b11      	ldr	r3, [pc, #68]	; (1e114 <cmd_le_generate_dhkey+0x4c>)
   1e0ce:	f3bf 8f5b 	dmb	ish
{
   1e0d2:	4604      	mov	r4, r0
	if (!atomic_cas(&cmd, 0, key_type ? GEN_DHKEY_DEBUG : GEN_DHKEY)) {
   1e0d4:	bf0c      	ite	eq
   1e0d6:	2202      	moveq	r2, #2
   1e0d8:	2204      	movne	r2, #4
   1e0da:	e853 1f00 	ldrex	r1, [r3]
   1e0de:	2900      	cmp	r1, #0
   1e0e0:	d103      	bne.n	1e0ea <cmd_le_generate_dhkey+0x22>
   1e0e2:	e843 2000 	strex	r0, r2, [r3]
   1e0e6:	2800      	cmp	r0, #0
   1e0e8:	d1f7      	bne.n	1e0da <cmd_le_generate_dhkey+0x12>
   1e0ea:	f3bf 8f5b 	dmb	ish
   1e0ee:	d10e      	bne.n	1e10e <cmd_le_generate_dhkey+0x46>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	sys_memcpy_swap(&ecdh.public_key_be[0], &key[0], 32);
   1e0f0:	4621      	mov	r1, r4
   1e0f2:	4809      	ldr	r0, [pc, #36]	; (1e118 <cmd_le_generate_dhkey+0x50>)
   1e0f4:	f006 f8ab 	bl	2424e <sys_memcpy_swap.constprop.0>
	sys_memcpy_swap(&ecdh.public_key_be[32], &key[32], 32);
   1e0f8:	4808      	ldr	r0, [pc, #32]	; (1e11c <cmd_le_generate_dhkey+0x54>)
   1e0fa:	f104 0120 	add.w	r1, r4, #32
   1e0fe:	f006 f8a6 	bl	2424e <sys_memcpy_swap.constprop.0>
   1e102:	4807      	ldr	r0, [pc, #28]	; (1e120 <cmd_le_generate_dhkey+0x58>)
   1e104:	2100      	movs	r1, #0
   1e106:	f002 fb67 	bl	207d8 <z_impl_k_poll_signal_raise>

	work_submit();

	return 0;
   1e10a:	2000      	movs	r0, #0
}
   1e10c:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1e10e:	200c      	movs	r0, #12
   1e110:	e7fc      	b.n	1e10c <cmd_le_generate_dhkey+0x44>
   1e112:	bf00      	nop
   1e114:	20005218 	.word	0x20005218
   1e118:	200055aa 	.word	0x200055aa
   1e11c:	200055ca 	.word	0x200055ca
   1e120:	20005208 	.word	0x20005208

0001e124 <mpsl_low_prio_irq_handler>:
static uint8_t __aligned(4) timeslot_context[TIMESLOT_MEM_SIZE];
#endif

static void mpsl_low_prio_irq_handler(const void *arg)
{
	k_work_submit_to_queue(&mpsl_work_q, &mpsl_low_prio_work);
   1e124:	4901      	ldr	r1, [pc, #4]	; (1e12c <mpsl_low_prio_irq_handler+0x8>)
   1e126:	4802      	ldr	r0, [pc, #8]	; (1e130 <mpsl_low_prio_irq_handler+0xc>)
   1e128:	f006 bc62 	b.w	249f0 <k_work_submit_to_queue>
   1e12c:	2000521c 	.word	0x2000521c
   1e130:	20002cc8 	.word	0x20002cc8

0001e134 <mpsl_lib_init_sys>:

	return 0;
}

static int mpsl_lib_init_sys(const struct device *dev)
{
   1e134:	b537      	push	{r0, r1, r2, r4, r5, lr}
	clock_cfg.accuracy_ppm = CONFIG_CLOCK_CONTROL_NRF_ACCURACY;
   1e136:	2332      	movs	r3, #50	; 0x32
   1e138:	f8ad 3004 	strh.w	r3, [sp, #4]
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   1e13c:	4a10      	ldr	r2, [pc, #64]	; (1e180 <mpsl_lib_init_sys+0x4c>)
	clock_cfg.skip_wait_lfclk_started =
   1e13e:	2300      	movs	r3, #0
	clock_cfg.source = m_config_clock_source_get();
   1e140:	2501      	movs	r5, #1
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   1e142:	2119      	movs	r1, #25
   1e144:	4668      	mov	r0, sp
	clock_cfg.skip_wait_lfclk_started =
   1e146:	f88d 3006 	strb.w	r3, [sp, #6]
	clock_cfg.source = m_config_clock_source_get();
   1e14a:	f8ad 5000 	strh.w	r5, [sp]
	clock_cfg.rc_temp_ctiv = 0;
   1e14e:	f88d 3002 	strb.w	r3, [sp, #2]
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   1e152:	f7ee fa07 	bl	c564 <mpsl_init>
	ARG_UNUSED(dev);
	int err = 0;

	err = mpsl_lib_init_internal();
	if (err) {
   1e156:	4604      	mov	r4, r0
   1e158:	b970      	cbnz	r0, 1e178 <mpsl_lib_init_sys+0x44>
	ARM_IRQ_DIRECT_DYNAMIC_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
			IRQ_CONNECT_FLAGS, reschedule);

	mpsl_lib_irq_connect();
#else /* !IS_ENABLED(CONFIG_MPSL_DYNAMIC_INTERRUPTS) */
	IRQ_DIRECT_CONNECT(TIMER0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   1e15a:	4601      	mov	r1, r0
   1e15c:	462a      	mov	r2, r5
   1e15e:	2008      	movs	r0, #8
   1e160:	f7f7 fff2 	bl	16148 <z_arm_irq_priority_set>
			   mpsl_timer0_isr_wrapper, IRQ_CONNECT_FLAGS);
	IRQ_DIRECT_CONNECT(RTC0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   1e164:	462a      	mov	r2, r5
   1e166:	4621      	mov	r1, r4
   1e168:	200b      	movs	r0, #11
   1e16a:	f7f7 ffed 	bl	16148 <z_arm_irq_priority_set>
			   mpsl_rtc0_isr_wrapper, IRQ_CONNECT_FLAGS);
	IRQ_DIRECT_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   1e16e:	462a      	mov	r2, r5
   1e170:	4621      	mov	r1, r4
   1e172:	4628      	mov	r0, r5
   1e174:	f7f7 ffe8 	bl	16148 <z_arm_irq_priority_set>
			   mpsl_radio_isr_wrapper, IRQ_CONNECT_FLAGS);
#endif /* IS_ENABLED(CONFIG_MPSL_DYNAMIC_INTERRUPTS) */

	return 0;
}
   1e178:	4620      	mov	r0, r4
   1e17a:	b003      	add	sp, #12
   1e17c:	bd30      	pop	{r4, r5, pc}
   1e17e:	bf00      	nop
   1e180:	0001e185 	.word	0x0001e185

0001e184 <m_assert_handler>:
{
   1e184:	b598      	push	{r3, r4, r7, lr}
   1e186:	af00      	add	r7, sp, #0
	LOG_ERR("MPSL ASSERT: %s, %d", file, line);
   1e188:	466c      	mov	r4, sp
   1e18a:	b08a      	sub	sp, #40	; 0x28
   1e18c:	466a      	mov	r2, sp
   1e18e:	4b0c      	ldr	r3, [pc, #48]	; (1e1c0 <m_assert_handler+0x3c>)
   1e190:	61d1      	str	r1, [r2, #28]
   1e192:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1e196:	f44f 7300 	mov.w	r3, #512	; 0x200
   1e19a:	8413      	strh	r3, [r2, #32]
   1e19c:	4b09      	ldr	r3, [pc, #36]	; (1e1c4 <m_assert_handler+0x40>)
   1e19e:	f842 3f10 	str.w	r3, [r2, #16]!
   1e1a2:	4809      	ldr	r0, [pc, #36]	; (1e1c8 <m_assert_handler+0x44>)
   1e1a4:	2300      	movs	r3, #0
   1e1a6:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   1e1aa:	f7f7 fa29 	bl	15600 <z_impl_z_log_msg_static_create>
   1e1ae:	46a5      	mov	sp, r4
	k_oops();
   1e1b0:	4040      	eors	r0, r0
   1e1b2:	f380 8811 	msr	BASEPRI, r0
   1e1b6:	f04f 0003 	mov.w	r0, #3
   1e1ba:	df02      	svc	2
}
   1e1bc:	46bd      	mov	sp, r7
   1e1be:	bd98      	pop	{r3, r4, r7, pc}
   1e1c0:	000279fb 	.word	0x000279fb
   1e1c4:	01000004 	.word	0x01000004
   1e1c8:	00025614 	.word	0x00025614

0001e1cc <mpsl_low_prio_init>:

static int mpsl_low_prio_init(const struct device *dev)
{
   1e1cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ARG_UNUSED(dev);

	k_work_queue_start(&mpsl_work_q, mpsl_work_stack,
   1e1ce:	4d0d      	ldr	r5, [pc, #52]	; (1e204 <mpsl_low_prio_init+0x38>)
   1e1d0:	490d      	ldr	r1, [pc, #52]	; (1e208 <mpsl_low_prio_init+0x3c>)
   1e1d2:	2400      	movs	r4, #0
   1e1d4:	9400      	str	r4, [sp, #0]
   1e1d6:	f06f 0309 	mvn.w	r3, #9
   1e1da:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1e1de:	4628      	mov	r0, r5
   1e1e0:	f001 fc98 	bl	1fb14 <k_work_queue_start>
	return z_impl_k_thread_name_set(thread, str);
   1e1e4:	4909      	ldr	r1, [pc, #36]	; (1e20c <mpsl_low_prio_init+0x40>)
   1e1e6:	4628      	mov	r0, r5
   1e1e8:	f006 faaa 	bl	24740 <z_impl_k_thread_name_set>
			   K_THREAD_STACK_SIZEOF(mpsl_work_stack),
			   K_PRIO_COOP(CONFIG_MPSL_THREAD_COOP_PRIO), NULL);
	k_thread_name_set(&mpsl_work_q.thread, "MPSL Work");
	k_work_init(&mpsl_low_prio_work, mpsl_low_prio_work_handler);
   1e1ec:	4908      	ldr	r1, [pc, #32]	; (1e210 <mpsl_low_prio_init+0x44>)
   1e1ee:	4809      	ldr	r0, [pc, #36]	; (1e214 <mpsl_low_prio_init+0x48>)
   1e1f0:	f006 fbd1 	bl	24996 <k_work_init>

	IRQ_CONNECT(MPSL_LOW_PRIO_IRQn, MPSL_LOW_PRIO,
   1e1f4:	4622      	mov	r2, r4
   1e1f6:	2104      	movs	r1, #4
   1e1f8:	2019      	movs	r0, #25
   1e1fa:	f7f7 ffa5 	bl	16148 <z_arm_irq_priority_set>
		    mpsl_low_prio_irq_handler, NULL, 0);

	return 0;
}
   1e1fe:	4620      	mov	r0, r4
   1e200:	b003      	add	sp, #12
   1e202:	bd30      	pop	{r4, r5, pc}
   1e204:	20002cc8 	.word	0x20002cc8
   1e208:	20009280 	.word	0x20009280
   1e20c:	00027a0f 	.word	0x00027a0f
   1e210:	00024297 	.word	0x00024297
   1e214:	2000521c 	.word	0x2000521c

0001e218 <mpsl_hfclk_callback>:

static nrfx_clock_event_handler_t event_handler;

static void mpsl_hfclk_callback(void)
{
	event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   1e218:	4b01      	ldr	r3, [pc, #4]	; (1e220 <mpsl_hfclk_callback+0x8>)
   1e21a:	2000      	movs	r0, #0
   1e21c:	681b      	ldr	r3, [r3, #0]
   1e21e:	4718      	bx	r3
   1e220:	2000522c 	.word	0x2000522c

0001e224 <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
	switch (domain) {
   1e224:	b120      	cbz	r0, 1e230 <nrfx_clock_start+0xc>
   1e226:	2801      	cmp	r0, #1
   1e228:	d106      	bne.n	1e238 <nrfx_clock_start+0x14>
	case NRF_CLOCK_DOMAIN_HFCLK:
		mpsl_clock_hfclk_request(mpsl_hfclk_callback);
   1e22a:	4804      	ldr	r0, [pc, #16]	; (1e23c <nrfx_clock_start+0x18>)
   1e22c:	f7ed bffc 	b.w	c228 <mpsl_clock_hfclk_request>
		break;
	case NRF_CLOCK_DOMAIN_LFCLK:
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   1e230:	4b03      	ldr	r3, [pc, #12]	; (1e240 <nrfx_clock_start+0x1c>)
   1e232:	2001      	movs	r0, #1
   1e234:	681b      	ldr	r3, [r3, #0]
   1e236:	4718      	bx	r3
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
   1e238:	4770      	bx	lr
   1e23a:	bf00      	nop
   1e23c:	0001e219 	.word	0x0001e219
   1e240:	2000522c 	.word	0x2000522c

0001e244 <nrfx_clock_init>:

}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t handler)
{
	event_handler = handler;
   1e244:	4b01      	ldr	r3, [pc, #4]	; (1e24c <nrfx_clock_init+0x8>)
   1e246:	6018      	str	r0, [r3, #0]

	return NRFX_SUCCESS;
}
   1e248:	4801      	ldr	r0, [pc, #4]	; (1e250 <nrfx_clock_init+0xc>)
   1e24a:	4770      	bx	lr
   1e24c:	2000522c 	.word	0x2000522c
   1e250:	0bad0000 	.word	0x0bad0000

0001e254 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   1e254:	4a02      	ldr	r2, [pc, #8]	; (1e260 <nvmc_wait+0xc>)
   1e256:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   1e25a:	2b00      	cmp	r3, #0
   1e25c:	d0fb      	beq.n	1e256 <nvmc_wait+0x2>
}
   1e25e:	4770      	bx	lr
   1e260:	4001e000 	.word	0x4001e000

0001e264 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
   1e264:	b510      	push	{r4, lr}
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1e266:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                        return true;
                }
            }
        #endif
        #if defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)
            if (var1 == 0x0D)
   1e26a:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   1e26e:	2a0d      	cmp	r2, #13
   1e270:	d155      	bne.n	1e31e <SystemInit+0xba>

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
            NRF_CLOCK->EVENTS_DONE = 0;
   1e272:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   1e276:	2200      	movs	r2, #0
   1e278:	f8c1 210c 	str.w	r2, [r1, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   1e27c:	f8c1 2110 	str.w	r2, [r1, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   1e280:	f8c1 2538 	str.w	r2, [r1, #1336]	; 0x538

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   1e284:	4a4c      	ldr	r2, [pc, #304]	; (1e3b8 <SystemInit+0x154>)
   1e286:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
   1e28a:	f8c2 0520 	str.w	r0, [r2, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   1e28e:	f8d3 0408 	ldr.w	r0, [r3, #1032]	; 0x408
   1e292:	f8c2 0524 	str.w	r0, [r2, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   1e296:	f8d3 040c 	ldr.w	r0, [r3, #1036]	; 0x40c
   1e29a:	f8c2 0528 	str.w	r0, [r2, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   1e29e:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
   1e2a2:	f8c2 052c 	str.w	r0, [r2, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   1e2a6:	f8d3 0414 	ldr.w	r0, [r3, #1044]	; 0x414
   1e2aa:	f8c2 0530 	str.w	r0, [r2, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   1e2ae:	f8d3 0418 	ldr.w	r0, [r3, #1048]	; 0x418
   1e2b2:	f8c2 0534 	str.w	r0, [r2, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   1e2b6:	f8d3 041c 	ldr.w	r0, [r3, #1052]	; 0x41c
   1e2ba:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   1e2be:	f8d3 0420 	ldr.w	r0, [r3, #1056]	; 0x420
   1e2c2:	f8c2 0544 	str.w	r0, [r2, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   1e2c6:	f8d3 0424 	ldr.w	r0, [r3, #1060]	; 0x424
   1e2ca:	f8c2 0548 	str.w	r0, [r2, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   1e2ce:	f8d3 0428 	ldr.w	r0, [r3, #1064]	; 0x428
   1e2d2:	f8c2 054c 	str.w	r0, [r2, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   1e2d6:	f8d3 042c 	ldr.w	r0, [r3, #1068]	; 0x42c
   1e2da:	f8c2 0550 	str.w	r0, [r2, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   1e2de:	f8d3 0430 	ldr.w	r0, [r3, #1072]	; 0x430
   1e2e2:	f8c2 0554 	str.w	r0, [r2, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   1e2e6:	f8d3 0434 	ldr.w	r0, [r3, #1076]	; 0x434
   1e2ea:	f8c2 0560 	str.w	r0, [r2, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   1e2ee:	f8d3 0438 	ldr.w	r0, [r3, #1080]	; 0x438
   1e2f2:	f8c2 0564 	str.w	r0, [r2, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   1e2f6:	f8d3 043c 	ldr.w	r0, [r3, #1084]	; 0x43c
   1e2fa:	f8c2 0568 	str.w	r0, [r2, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   1e2fe:	f8d3 0440 	ldr.w	r0, [r3, #1088]	; 0x440
   1e302:	f8c2 056c 	str.w	r0, [r2, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   1e306:	f8d3 3444 	ldr.w	r3, [r3, #1092]	; 0x444
   1e30a:	f8c2 3570 	str.w	r3, [r2, #1392]	; 0x570

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   1e30e:	f8d1 3400 	ldr.w	r3, [r1, #1024]	; 0x400
   1e312:	07db      	lsls	r3, r3, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   1e314:	bf44      	itt	mi
   1e316:	f06f 0301 	mvnmi.w	r3, #1
   1e31a:	f8c1 3400 	strmi.w	r3, [r1, #1024]	; 0x400

    /* Enable the FPU if the compiler used floating point unit instructions. __FPU_USED is a MACRO defined by the
     * compiler. Since the FPU consumes energy, remember to disable FPU use in the compiler if floating point unit
     * operations are not used in your code. */
    #if (__FPU_USED == 1)
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
   1e31e:	4a27      	ldr	r2, [pc, #156]	; (1e3bc <SystemInit+0x158>)
   1e320:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
   1e324:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
   1e328:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
   1e32c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1e330:	f3bf 8f6f 	isb	sy
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1e334:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                        return true;
                }
            }
        #endif
        #if defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)
            if (var1 == 0x0D)
   1e338:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   1e33c:	2a0d      	cmp	r2, #13
   1e33e:	d10a      	bne.n	1e356 <SystemInit+0xf2>
            {
                switch(var2)
   1e340:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
   1e344:	b13b      	cbz	r3, 1e356 <SystemInit+0xf2>
        #else
            if (nrf52_configuration_249())
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
   1e346:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   1e34a:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
   1e34e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1e352:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   1e356:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   1e35a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   1e35e:	2a00      	cmp	r2, #0
   1e360:	db03      	blt.n	1e36a <SystemInit+0x106>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   1e362:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   1e366:	2b00      	cmp	r3, #0
   1e368:	da22      	bge.n	1e3b0 <SystemInit+0x14c>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1e36a:	4915      	ldr	r1, [pc, #84]	; (1e3c0 <SystemInit+0x15c>)
   1e36c:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   1e36e:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1e372:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   1e376:	2412      	movs	r4, #18
    nvmc_wait();
   1e378:	f7ff ff6c 	bl	1e254 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   1e37c:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
   1e380:	f7ff ff68 	bl	1e254 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   1e384:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
   1e388:	f7ff ff64 	bl	1e254 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1e38c:	2300      	movs	r3, #0
   1e38e:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   1e392:	f7ff ff5f 	bl	1e254 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
   1e396:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   1e39a:	4908      	ldr	r1, [pc, #32]	; (1e3bc <SystemInit+0x158>)
   1e39c:	4b09      	ldr	r3, [pc, #36]	; (1e3c4 <SystemInit+0x160>)
   1e39e:	68ca      	ldr	r2, [r1, #12]
   1e3a0:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   1e3a4:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   1e3a6:	60cb      	str	r3, [r1, #12]
   1e3a8:	f3bf 8f4f 	dsb	sy
    __NOP();
   1e3ac:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   1e3ae:	e7fd      	b.n	1e3ac <SystemInit+0x148>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   1e3b0:	4b05      	ldr	r3, [pc, #20]	; (1e3c8 <SystemInit+0x164>)
   1e3b2:	4a06      	ldr	r2, [pc, #24]	; (1e3cc <SystemInit+0x168>)
   1e3b4:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
   1e3b6:	bd10      	pop	{r4, pc}
   1e3b8:	4000c000 	.word	0x4000c000
   1e3bc:	e000ed00 	.word	0xe000ed00
   1e3c0:	4001e000 	.word	0x4001e000
   1e3c4:	05fa0004 	.word	0x05fa0004
   1e3c8:	2000063c 	.word	0x2000063c
   1e3cc:	03d09000 	.word	0x03d09000

0001e3d0 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   1e3d0:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   1e3d2:	2501      	movs	r5, #1
        prev_mask = *p_mask;
   1e3d4:	6802      	ldr	r2, [r0, #0]
   1e3d6:	f3bf 8f5b 	dmb	ish
        idx = 31 - NRF_CLZ(prev_mask);
   1e3da:	fab2 f382 	clz	r3, r2
   1e3de:	f1c3 031f 	rsb	r3, r3, #31
   1e3e2:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
   1e3e4:	fa05 f403 	lsl.w	r4, r5, r3
   1e3e8:	ea22 0404 	bic.w	r4, r2, r4
   1e3ec:	e850 6f00 	ldrex	r6, [r0]
   1e3f0:	4296      	cmp	r6, r2
   1e3f2:	d104      	bne.n	1e3fe <nrfx_flag32_alloc+0x2e>
   1e3f4:	e840 4c00 	strex	ip, r4, [r0]
   1e3f8:	f1bc 0f00 	cmp.w	ip, #0
   1e3fc:	d1f6      	bne.n	1e3ec <nrfx_flag32_alloc+0x1c>
   1e3fe:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   1e402:	d1e7      	bne.n	1e3d4 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
   1e404:	4801      	ldr	r0, [pc, #4]	; (1e40c <nrfx_flag32_alloc+0x3c>)
    *p_flag = idx;
   1e406:	700b      	strb	r3, [r1, #0]
}
   1e408:	bd70      	pop	{r4, r5, r6, pc}
   1e40a:	bf00      	nop
   1e40c:	0bad0000 	.word	0x0bad0000

0001e410 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
   1e410:	b510      	push	{r4, lr}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   1e412:	6803      	ldr	r3, [r0, #0]
   1e414:	40cb      	lsrs	r3, r1
   1e416:	07db      	lsls	r3, r3, #31
   1e418:	d414      	bmi.n	1e444 <nrfx_flag32_free+0x34>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
   1e41a:	2301      	movs	r3, #1
   1e41c:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
   1e41e:	6802      	ldr	r2, [r0, #0]
   1e420:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
   1e424:	ea43 0102 	orr.w	r1, r3, r2
   1e428:	e850 4f00 	ldrex	r4, [r0]
   1e42c:	4294      	cmp	r4, r2
   1e42e:	d104      	bne.n	1e43a <nrfx_flag32_free+0x2a>
   1e430:	e840 1c00 	strex	ip, r1, [r0]
   1e434:	f1bc 0f00 	cmp.w	ip, #0
   1e438:	d1f6      	bne.n	1e428 <nrfx_flag32_free+0x18>
   1e43a:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   1e43e:	d1ee      	bne.n	1e41e <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
   1e440:	4801      	ldr	r0, [pc, #4]	; (1e448 <nrfx_flag32_free+0x38>)
}
   1e442:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1e444:	4801      	ldr	r0, [pc, #4]	; (1e44c <nrfx_flag32_free+0x3c>)
   1e446:	e7fc      	b.n	1e442 <nrfx_flag32_free+0x32>
   1e448:	0bad0000 	.word	0x0bad0000
   1e44c:	0bad0004 	.word	0x0bad0004

0001e450 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
   1e450:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
   1e452:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   1e456:	095b      	lsrs	r3, r3, #5
        case 0: return NRF_P0;
   1e458:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
   1e45a:	6002      	str	r2, [r0, #0]
}
   1e45c:	4802      	ldr	r0, [pc, #8]	; (1e468 <nrf_gpio_pin_port_decode+0x18>)
   1e45e:	bf18      	it	ne
   1e460:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
   1e464:	4770      	bx	lr
   1e466:	bf00      	nop
   1e468:	50000300 	.word	0x50000300

0001e46c <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   1e46c:	4b03      	ldr	r3, [pc, #12]	; (1e47c <pin_in_use_by_te+0x10>)
   1e46e:	3008      	adds	r0, #8
   1e470:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   1e474:	f3c0 1040 	ubfx	r0, r0, #5, #1
   1e478:	4770      	bx	lr
   1e47a:	bf00      	nop
   1e47c:	20000640 	.word	0x20000640

0001e480 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   1e480:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1e482:	f100 0308 	add.w	r3, r0, #8
   1e486:	4c0c      	ldr	r4, [pc, #48]	; (1e4b8 <call_handler+0x38>)
   1e488:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
   1e48c:	05da      	lsls	r2, r3, #23
{
   1e48e:	4605      	mov	r5, r0
   1e490:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1e492:	d507      	bpl.n	1e4a4 <call_handler+0x24>
   1e494:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
   1e498:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   1e49c:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
   1e4a0:	6852      	ldr	r2, [r2, #4]
   1e4a2:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
   1e4a4:	68a3      	ldr	r3, [r4, #8]
   1e4a6:	b12b      	cbz	r3, 1e4b4 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   1e4a8:	68e2      	ldr	r2, [r4, #12]
   1e4aa:	4631      	mov	r1, r6
   1e4ac:	4628      	mov	r0, r5
    }
}
   1e4ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   1e4b2:	4718      	bx	r3
}
   1e4b4:	bd70      	pop	{r4, r5, r6, pc}
   1e4b6:	bf00      	nop
   1e4b8:	20000640 	.word	0x20000640

0001e4bc <release_handler>:
{
   1e4bc:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1e4be:	4a13      	ldr	r2, [pc, #76]	; (1e50c <release_handler+0x50>)
   1e4c0:	3008      	adds	r0, #8
   1e4c2:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
   1e4c6:	05d9      	lsls	r1, r3, #23
   1e4c8:	d51c      	bpl.n	1e504 <release_handler+0x48>
   1e4ca:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   1e4ce:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   1e4d2:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   1e4d6:	f102 040e 	add.w	r4, r2, #14
   1e4da:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   1e4dc:	f834 3f02 	ldrh.w	r3, [r4, #2]!
   1e4e0:	f413 7f80 	tst.w	r3, #256	; 0x100
   1e4e4:	d003      	beq.n	1e4ee <release_handler+0x32>
   1e4e6:	f3c3 2343 	ubfx	r3, r3, #9, #4
   1e4ea:	4299      	cmp	r1, r3
   1e4ec:	d00a      	beq.n	1e504 <release_handler+0x48>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   1e4ee:	3001      	adds	r0, #1
   1e4f0:	282a      	cmp	r0, #42	; 0x2a
   1e4f2:	d1f3      	bne.n	1e4dc <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
   1e4f4:	2300      	movs	r3, #0
   1e4f6:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   1e4fa:	4805      	ldr	r0, [pc, #20]	; (1e510 <release_handler+0x54>)
}
   1e4fc:	f85d 4b04 	ldr.w	r4, [sp], #4
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   1e500:	f7ff bf86 	b.w	1e410 <nrfx_flag32_free>
}
   1e504:	f85d 4b04 	ldr.w	r4, [sp], #4
   1e508:	4770      	bx	lr
   1e50a:	bf00      	nop
   1e50c:	20000640 	.word	0x20000640
   1e510:	200006a8 	.word	0x200006a8

0001e514 <pin_handler_trigger_uninit>:
{
   1e514:	b538      	push	{r3, r4, r5, lr}
   1e516:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   1e518:	f7ff ffa8 	bl	1e46c <pin_in_use_by_te>
   1e51c:	4c09      	ldr	r4, [pc, #36]	; (1e544 <pin_handler_trigger_uninit+0x30>)
   1e51e:	f102 0508 	add.w	r5, r2, #8
   1e522:	b140      	cbz	r0, 1e536 <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1e524:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   1e528:	4907      	ldr	r1, [pc, #28]	; (1e548 <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   1e52a:	0b5b      	lsrs	r3, r3, #13
   1e52c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   1e530:	2000      	movs	r0, #0
   1e532:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
   1e536:	4610      	mov	r0, r2
   1e538:	f7ff ffc0 	bl	1e4bc <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   1e53c:	2300      	movs	r3, #0
   1e53e:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
   1e542:	bd38      	pop	{r3, r4, r5, pc}
   1e544:	20000640 	.word	0x20000640
   1e548:	40006000 	.word	0x40006000

0001e54c <nrfx_gpiote_input_configure>:
{
   1e54c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   1e550:	4604      	mov	r4, r0
   1e552:	4616      	mov	r6, r2
   1e554:	461d      	mov	r5, r3
    if (p_input_config)
   1e556:	b301      	cbz	r1, 1e59a <nrfx_gpiote_input_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1e558:	4f4e      	ldr	r7, [pc, #312]	; (1e694 <nrfx_gpiote_input_configure+0x148>)
   1e55a:	f100 0808 	add.w	r8, r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   1e55e:	f837 3018 	ldrh.w	r3, [r7, r8, lsl #1]
   1e562:	079b      	lsls	r3, r3, #30
   1e564:	d502      	bpl.n	1e56c <nrfx_gpiote_input_configure+0x20>
   1e566:	f7ff ff81 	bl	1e46c <pin_in_use_by_te>
   1e56a:	bb10      	cbnz	r0, 1e5b2 <nrfx_gpiote_input_configure+0x66>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   1e56c:	2300      	movs	r3, #0
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   1e56e:	e9cd 3300 	strd	r3, r3, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   1e572:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
   1e576:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   1e57a:	f10d 020f 	add.w	r2, sp, #15
   1e57e:	460b      	mov	r3, r1
   1e580:	4620      	mov	r0, r4
   1e582:	f10d 010e 	add.w	r1, sp, #14
   1e586:	f005 febf 	bl	24308 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   1e58a:	f837 3018 	ldrh.w	r3, [r7, r8, lsl #1]
   1e58e:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   1e592:	f043 0301 	orr.w	r3, r3, #1
   1e596:	f827 3018 	strh.w	r3, [r7, r8, lsl #1]
    if (p_trigger_config)
   1e59a:	b346      	cbz	r6, 1e5ee <nrfx_gpiote_input_configure+0xa2>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1e59c:	4b3d      	ldr	r3, [pc, #244]	; (1e694 <nrfx_gpiote_input_configure+0x148>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   1e59e:	f896 c000 	ldrb.w	ip, [r6]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   1e5a2:	6872      	ldr	r2, [r6, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1e5a4:	f104 0708 	add.w	r7, r4, #8
   1e5a8:	f833 1017 	ldrh.w	r1, [r3, r7, lsl #1]
        if (pin_is_output(pin))
   1e5ac:	0788      	lsls	r0, r1, #30
   1e5ae:	d502      	bpl.n	1e5b6 <nrfx_gpiote_input_configure+0x6a>
            if (use_evt)
   1e5b0:	b1aa      	cbz	r2, 1e5de <nrfx_gpiote_input_configure+0x92>
            return NRFX_ERROR_INVALID_PARAM;
   1e5b2:	4839      	ldr	r0, [pc, #228]	; (1e698 <nrfx_gpiote_input_configure+0x14c>)
   1e5b4:	e01d      	b.n	1e5f2 <nrfx_gpiote_input_configure+0xa6>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   1e5b6:	f021 0120 	bic.w	r1, r1, #32
   1e5ba:	04c9      	lsls	r1, r1, #19
   1e5bc:	0cc9      	lsrs	r1, r1, #19
   1e5be:	f823 1017 	strh.w	r1, [r3, r7, lsl #1]
            if (use_evt)
   1e5c2:	b162      	cbz	r2, 1e5de <nrfx_gpiote_input_configure+0x92>
                if (!edge)
   1e5c4:	f1bc 0f03 	cmp.w	ip, #3
   1e5c8:	d8f3      	bhi.n	1e5b2 <nrfx_gpiote_input_configure+0x66>
                uint8_t ch = *p_trigger_config->p_in_channel;
   1e5ca:	6872      	ldr	r2, [r6, #4]
   1e5cc:	7816      	ldrb	r6, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   1e5ce:	f1bc 0f00 	cmp.w	ip, #0
   1e5d2:	d111      	bne.n	1e5f8 <nrfx_gpiote_input_configure+0xac>
   1e5d4:	4a31      	ldr	r2, [pc, #196]	; (1e69c <nrfx_gpiote_input_configure+0x150>)
   1e5d6:	f506 76a2 	add.w	r6, r6, #324	; 0x144
   1e5da:	f842 c026 	str.w	ip, [r2, r6, lsl #2]
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   1e5de:	f833 2017 	ldrh.w	r2, [r3, r7, lsl #1]
   1e5e2:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   1e5e6:	ea42 028c 	orr.w	r2, r2, ip, lsl #2
   1e5ea:	f823 2017 	strh.w	r2, [r3, r7, lsl #1]
    if (p_handler_config)
   1e5ee:	bb45      	cbnz	r5, 1e642 <nrfx_gpiote_input_configure+0xf6>
        err = NRFX_SUCCESS;
   1e5f0:	482b      	ldr	r0, [pc, #172]	; (1e6a0 <nrfx_gpiote_input_configure+0x154>)
}
   1e5f2:	b004      	add	sp, #16
   1e5f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   1e5f8:	00b2      	lsls	r2, r6, #2
   1e5fa:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1e5fe:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   1e602:	ea41 3146 	orr.w	r1, r1, r6, lsl #13
   1e606:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   1e60a:	f020 0003 	bic.w	r0, r0, #3
   1e60e:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   1e612:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   1e616:	f420 304f 	bic.w	r0, r0, #211968	; 0x33c00
   1e61a:	f420 7040 	bic.w	r0, r0, #768	; 0x300
   1e61e:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1e622:	0220      	lsls	r0, r4, #8
   1e624:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
   1e628:	f400 507c 	and.w	r0, r0, #16128	; 0x3f00
   1e62c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   1e630:	ea40 000e 	orr.w	r0, r0, lr
   1e634:	f041 0120 	orr.w	r1, r1, #32
   1e638:	f823 1017 	strh.w	r1, [r3, r7, lsl #1]
   1e63c:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
   1e640:	e7cd      	b.n	1e5de <nrfx_gpiote_input_configure+0x92>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   1e642:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
   1e646:	4620      	mov	r0, r4
   1e648:	f7ff ff38 	bl	1e4bc <release_handler>
    if (!handler)
   1e64c:	2e00      	cmp	r6, #0
   1e64e:	d0cf      	beq.n	1e5f0 <nrfx_gpiote_input_configure+0xa4>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   1e650:	4d10      	ldr	r5, [pc, #64]	; (1e694 <nrfx_gpiote_input_configure+0x148>)
   1e652:	e9d5 2300 	ldrd	r2, r3, [r5]
   1e656:	4296      	cmp	r6, r2
   1e658:	d101      	bne.n	1e65e <nrfx_gpiote_input_configure+0x112>
   1e65a:	429f      	cmp	r7, r3
   1e65c:	d018      	beq.n	1e690 <nrfx_gpiote_input_configure+0x144>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   1e65e:	4811      	ldr	r0, [pc, #68]	; (1e6a4 <nrfx_gpiote_input_configure+0x158>)
   1e660:	f10d 010f 	add.w	r1, sp, #15
   1e664:	f7ff feb4 	bl	1e3d0 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   1e668:	4b0d      	ldr	r3, [pc, #52]	; (1e6a0 <nrfx_gpiote_input_configure+0x154>)
   1e66a:	4298      	cmp	r0, r3
   1e66c:	d1c1      	bne.n	1e5f2 <nrfx_gpiote_input_configure+0xa6>
        handler_id = (int32_t)id;
   1e66e:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
   1e672:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
   1e676:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   1e67a:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
   1e67c:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   1e67e:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
   1e682:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
   1e686:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   1e68a:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    return NRFX_SUCCESS;
   1e68e:	e7af      	b.n	1e5f0 <nrfx_gpiote_input_configure+0xa4>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   1e690:	2200      	movs	r2, #0
   1e692:	e7ee      	b.n	1e672 <nrfx_gpiote_input_configure+0x126>
   1e694:	20000640 	.word	0x20000640
   1e698:	0bad0004 	.word	0x0bad0004
   1e69c:	40006000 	.word	0x40006000
   1e6a0:	0bad0000 	.word	0x0bad0000
   1e6a4:	200006a8 	.word	0x200006a8

0001e6a8 <nrfx_gpiote_output_configure>:
{
   1e6a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e6aa:	4604      	mov	r4, r0
   1e6ac:	b085      	sub	sp, #20
   1e6ae:	4615      	mov	r5, r2
    if (p_config)
   1e6b0:	b319      	cbz	r1, 1e6fa <nrfx_gpiote_output_configure+0x52>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1e6b2:	4e33      	ldr	r6, [pc, #204]	; (1e780 <nrfx_gpiote_output_configure+0xd8>)
   1e6b4:	f100 0708 	add.w	r7, r0, #8
   1e6b8:	f836 2017 	ldrh.w	r2, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   1e6bc:	0793      	lsls	r3, r2, #30
   1e6be:	d403      	bmi.n	1e6c8 <nrfx_gpiote_output_configure+0x20>
   1e6c0:	f7ff fed4 	bl	1e46c <pin_in_use_by_te>
   1e6c4:	2800      	cmp	r0, #0
   1e6c6:	d158      	bne.n	1e77a <nrfx_gpiote_output_configure+0xd2>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   1e6c8:	f012 0f1c 	tst.w	r2, #28
   1e6cc:	d002      	beq.n	1e6d4 <nrfx_gpiote_output_configure+0x2c>
   1e6ce:	784b      	ldrb	r3, [r1, #1]
   1e6d0:	2b01      	cmp	r3, #1
   1e6d2:	d052      	beq.n	1e77a <nrfx_gpiote_output_configure+0xd2>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
   1e6d4:	2301      	movs	r3, #1
   1e6d6:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   1e6da:	2300      	movs	r3, #0
   1e6dc:	e9cd 1300 	strd	r1, r3, [sp]
   1e6e0:	1c4a      	adds	r2, r1, #1
   1e6e2:	1c8b      	adds	r3, r1, #2
   1e6e4:	4620      	mov	r0, r4
   1e6e6:	f10d 010f 	add.w	r1, sp, #15
   1e6ea:	f005 fe0d 	bl	24308 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   1e6ee:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
   1e6f2:	f043 0303 	orr.w	r3, r3, #3
   1e6f6:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
   1e6fa:	b915      	cbnz	r5, 1e702 <nrfx_gpiote_output_configure+0x5a>
    return NRFX_SUCCESS;
   1e6fc:	4821      	ldr	r0, [pc, #132]	; (1e784 <nrfx_gpiote_output_configure+0xdc>)
}
   1e6fe:	b005      	add	sp, #20
   1e700:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1e702:	4e1f      	ldr	r6, [pc, #124]	; (1e780 <nrfx_gpiote_output_configure+0xd8>)
   1e704:	f104 0708 	add.w	r7, r4, #8
   1e708:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
   1e70c:	0783      	lsls	r3, r0, #30
   1e70e:	d534      	bpl.n	1e77a <nrfx_gpiote_output_configure+0xd2>
        uint32_t ch = p_task_config->task_ch;
   1e710:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
   1e714:	4661      	mov	r1, ip
   1e716:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   1e718:	f020 0020 	bic.w	r0, r0, #32
   1e71c:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   1e720:	04c0      	lsls	r0, r0, #19
   1e722:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
   1e726:	0cc0      	lsrs	r0, r0, #19
   1e728:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   1e72c:	2300      	movs	r3, #0
   1e72e:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   1e732:	786a      	ldrb	r2, [r5, #1]
   1e734:	2a00      	cmp	r2, #0
   1e736:	d0e1      	beq.n	1e6fc <nrfx_gpiote_output_configure+0x54>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   1e738:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
   1e73c:	78ad      	ldrb	r5, [r5, #2]
   1e73e:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
   1e742:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   1e746:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1e74a:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
   1e74e:	0223      	lsls	r3, r4, #8
   1e750:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   1e754:	0412      	lsls	r2, r2, #16
   1e756:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1e75a:	ea43 030e 	orr.w	r3, r3, lr
   1e75e:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   1e760:	052a      	lsls	r2, r5, #20
   1e762:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   1e766:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1e76a:	4313      	orrs	r3, r2
   1e76c:	f040 0020 	orr.w	r0, r0, #32
   1e770:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   1e774:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   1e778:	e7c0      	b.n	1e6fc <nrfx_gpiote_output_configure+0x54>
{
   1e77a:	4803      	ldr	r0, [pc, #12]	; (1e788 <nrfx_gpiote_output_configure+0xe0>)
   1e77c:	e7bf      	b.n	1e6fe <nrfx_gpiote_output_configure+0x56>
   1e77e:	bf00      	nop
   1e780:	20000640 	.word	0x20000640
   1e784:	0bad0000 	.word	0x0bad0000
   1e788:	0bad0004 	.word	0x0bad0004

0001e78c <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   1e78c:	4b01      	ldr	r3, [pc, #4]	; (1e794 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
   1e78e:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
   1e792:	4770      	bx	lr
   1e794:	20000640 	.word	0x20000640

0001e798 <nrfx_gpiote_channel_get>:
{
   1e798:	b508      	push	{r3, lr}
   1e79a:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   1e79c:	f7ff fe66 	bl	1e46c <pin_in_use_by_te>
   1e7a0:	b138      	cbz	r0, 1e7b2 <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1e7a2:	4b05      	ldr	r3, [pc, #20]	; (1e7b8 <nrfx_gpiote_channel_get+0x20>)
        return NRFX_SUCCESS;
   1e7a4:	4805      	ldr	r0, [pc, #20]	; (1e7bc <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1e7a6:	3208      	adds	r2, #8
   1e7a8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   1e7ac:	0b5b      	lsrs	r3, r3, #13
   1e7ae:	700b      	strb	r3, [r1, #0]
}
   1e7b0:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1e7b2:	4803      	ldr	r0, [pc, #12]	; (1e7c0 <nrfx_gpiote_channel_get+0x28>)
   1e7b4:	e7fc      	b.n	1e7b0 <nrfx_gpiote_channel_get+0x18>
   1e7b6:	bf00      	nop
   1e7b8:	20000640 	.word	0x20000640
   1e7bc:	0bad0000 	.word	0x0bad0000
   1e7c0:	0bad0004 	.word	0x0bad0004

0001e7c4 <nrfx_gpiote_init>:
{
   1e7c4:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   1e7c6:	4c0f      	ldr	r4, [pc, #60]	; (1e804 <nrfx_gpiote_init+0x40>)
   1e7c8:	f894 506c 	ldrb.w	r5, [r4, #108]	; 0x6c
   1e7cc:	b9bd      	cbnz	r5, 1e7fe <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   1e7ce:	2254      	movs	r2, #84	; 0x54
   1e7d0:	4629      	mov	r1, r5
   1e7d2:	f104 0010 	add.w	r0, r4, #16
   1e7d6:	f006 fd04 	bl	251e2 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   1e7da:	2006      	movs	r0, #6
   1e7dc:	f7f7 fc84 	bl	160e8 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1e7e0:	4b09      	ldr	r3, [pc, #36]	; (1e808 <nrfx_gpiote_init+0x44>)
    return err_code;
   1e7e2:	480a      	ldr	r0, [pc, #40]	; (1e80c <nrfx_gpiote_init+0x48>)
   1e7e4:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
   1e7e8:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
   1e7ec:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   1e7f0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   1e7f4:	2301      	movs	r3, #1
   1e7f6:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   1e7fa:	66a3      	str	r3, [r4, #104]	; 0x68
}
   1e7fc:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
   1e7fe:	4804      	ldr	r0, [pc, #16]	; (1e810 <nrfx_gpiote_init+0x4c>)
   1e800:	e7fc      	b.n	1e7fc <nrfx_gpiote_init+0x38>
   1e802:	bf00      	nop
   1e804:	20000640 	.word	0x20000640
   1e808:	40006000 	.word	0x40006000
   1e80c:	0bad0000 	.word	0x0bad0000
   1e810:	0bad0005 	.word	0x0bad0005

0001e814 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   1e814:	4b03      	ldr	r3, [pc, #12]	; (1e824 <nrfx_gpiote_is_init+0x10>)
   1e816:	f893 006c 	ldrb.w	r0, [r3, #108]	; 0x6c
}
   1e81a:	3800      	subs	r0, #0
   1e81c:	bf18      	it	ne
   1e81e:	2001      	movne	r0, #1
   1e820:	4770      	bx	lr
   1e822:	bf00      	nop
   1e824:	20000640 	.word	0x20000640

0001e828 <nrfx_gpiote_channel_free>:
{
   1e828:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   1e82a:	4801      	ldr	r0, [pc, #4]	; (1e830 <nrfx_gpiote_channel_free+0x8>)
   1e82c:	f7ff bdf0 	b.w	1e410 <nrfx_flag32_free>
   1e830:	200006a4 	.word	0x200006a4

0001e834 <nrfx_gpiote_channel_alloc>:
{
   1e834:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   1e836:	4801      	ldr	r0, [pc, #4]	; (1e83c <nrfx_gpiote_channel_alloc+0x8>)
   1e838:	f7ff bdca 	b.w	1e3d0 <nrfx_flag32_alloc>
   1e83c:	200006a4 	.word	0x200006a4

0001e840 <nrfx_gpiote_trigger_enable>:
{
   1e840:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1e842:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1e844:	f7ff fe12 	bl	1e46c <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1e848:	f104 0208 	add.w	r2, r4, #8
   1e84c:	4b1e      	ldr	r3, [pc, #120]	; (1e8c8 <nrfx_gpiote_trigger_enable+0x88>)
   1e84e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1e852:	b1e8      	cbz	r0, 1e890 <nrfx_gpiote_trigger_enable+0x50>
   1e854:	f013 0502 	ands.w	r5, r3, #2
   1e858:	d11a      	bne.n	1e890 <nrfx_gpiote_trigger_enable+0x50>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1e85a:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   1e85c:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
   1e85e:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
   1e862:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
   1e866:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1e86a:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1e86e:	6005      	str	r5, [r0, #0]
   1e870:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   1e872:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   1e876:	f040 0001 	orr.w	r0, r0, #1
   1e87a:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
   1e87e:	b129      	cbz	r1, 1e88c <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   1e880:	2201      	movs	r2, #1
   1e882:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
   1e886:	4a11      	ldr	r2, [pc, #68]	; (1e8cc <nrfx_gpiote_trigger_enable+0x8c>)
   1e888:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   1e88c:	b003      	add	sp, #12
   1e88e:	bd30      	pop	{r4, r5, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1e890:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   1e894:	2b04      	cmp	r3, #4
   1e896:	d012      	beq.n	1e8be <nrfx_gpiote_trigger_enable+0x7e>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   1e898:	2b05      	cmp	r3, #5
   1e89a:	d012      	beq.n	1e8c2 <nrfx_gpiote_trigger_enable+0x82>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1e89c:	a801      	add	r0, sp, #4
   1e89e:	9401      	str	r4, [sp, #4]
   1e8a0:	f7ff fdd6 	bl	1e450 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   1e8a4:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   1e8a6:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   1e8aa:	40d9      	lsrs	r1, r3
   1e8ac:	f001 0101 	and.w	r1, r1, #1
   1e8b0:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   1e8b2:	4620      	mov	r0, r4
}
   1e8b4:	b003      	add	sp, #12
   1e8b6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   1e8ba:	f005 bd6e 	b.w	2439a <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   1e8be:	2103      	movs	r1, #3
   1e8c0:	e7f7      	b.n	1e8b2 <nrfx_gpiote_trigger_enable+0x72>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   1e8c2:	2102      	movs	r1, #2
   1e8c4:	e7f5      	b.n	1e8b2 <nrfx_gpiote_trigger_enable+0x72>
   1e8c6:	bf00      	nop
   1e8c8:	20000640 	.word	0x20000640
   1e8cc:	40006000 	.word	0x40006000

0001e8d0 <nrfx_gpiote_trigger_disable>:
{
   1e8d0:	b508      	push	{r3, lr}
   1e8d2:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1e8d4:	f7ff fdca 	bl	1e46c <pin_in_use_by_te>
   1e8d8:	b1c0      	cbz	r0, 1e90c <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1e8da:	f102 0108 	add.w	r1, r2, #8
   1e8de:	4b0e      	ldr	r3, [pc, #56]	; (1e918 <nrfx_gpiote_trigger_disable+0x48>)
   1e8e0:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1e8e4:	0799      	lsls	r1, r3, #30
   1e8e6:	d411      	bmi.n	1e90c <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1e8e8:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   1e8ea:	2201      	movs	r2, #1
   1e8ec:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
   1e8ee:	009b      	lsls	r3, r3, #2
   1e8f0:	490a      	ldr	r1, [pc, #40]	; (1e91c <nrfx_gpiote_trigger_disable+0x4c>)
   1e8f2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1e8f6:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   1e8fa:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   1e8fe:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   1e902:	f022 0203 	bic.w	r2, r2, #3
   1e906:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   1e90a:	bd08      	pop	{r3, pc}
   1e90c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   1e910:	2100      	movs	r1, #0
   1e912:	4610      	mov	r0, r2
   1e914:	f005 bd41 	b.w	2439a <nrf_gpio_cfg_sense_set>
   1e918:	20000640 	.word	0x20000640
   1e91c:	40006000 	.word	0x40006000

0001e920 <nrfx_gpiote_pin_uninit>:
{
   1e920:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   1e922:	4b0e      	ldr	r3, [pc, #56]	; (1e95c <nrfx_gpiote_pin_uninit+0x3c>)
   1e924:	f100 0208 	add.w	r2, r0, #8
{
   1e928:	4604      	mov	r4, r0
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   1e92a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
   1e92e:	07db      	lsls	r3, r3, #31
   1e930:	d511      	bpl.n	1e956 <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
   1e932:	f7ff ffcd 	bl	1e8d0 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   1e936:	4620      	mov	r0, r4
   1e938:	f7ff fdec 	bl	1e514 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1e93c:	a801      	add	r0, sp, #4
   1e93e:	9401      	str	r4, [sp, #4]
   1e940:	f7ff fd86 	bl	1e450 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   1e944:	9b01      	ldr	r3, [sp, #4]
   1e946:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1e94a:	2202      	movs	r2, #2
   1e94c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
   1e950:	4803      	ldr	r0, [pc, #12]	; (1e960 <nrfx_gpiote_pin_uninit+0x40>)
}
   1e952:	b002      	add	sp, #8
   1e954:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1e956:	4803      	ldr	r0, [pc, #12]	; (1e964 <nrfx_gpiote_pin_uninit+0x44>)
   1e958:	e7fb      	b.n	1e952 <nrfx_gpiote_pin_uninit+0x32>
   1e95a:	bf00      	nop
   1e95c:	20000640 	.word	0x20000640
   1e960:	0bad0000 	.word	0x0bad0000
   1e964:	0bad0004 	.word	0x0bad0004

0001e968 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
   1e968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e96c:	4b68      	ldr	r3, [pc, #416]	; (1eb10 <nrfx_gpiote_irq_handler+0x1a8>)
    return p_reg->INTENSET & mask;
   1e96e:	4869      	ldr	r0, [pc, #420]	; (1eb14 <nrfx_gpiote_irq_handler+0x1ac>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1e970:	4969      	ldr	r1, [pc, #420]	; (1eb18 <nrfx_gpiote_irq_handler+0x1b0>)
    uint32_t status = 0;
   1e972:	2600      	movs	r6, #0
{
   1e974:	b087      	sub	sp, #28
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   1e976:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1e978:	4634      	mov	r4, r6
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1e97a:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   1e97c:	b135      	cbz	r5, 1e98c <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
   1e97e:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
   1e982:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1e984:	bf1e      	ittt	ne
   1e986:	601c      	strne	r4, [r3, #0]
   1e988:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
   1e98a:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1e98c:	3304      	adds	r3, #4
   1e98e:	428b      	cmp	r3, r1
        }
        mask <<= 1;
   1e990:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1e994:	d1f1      	bne.n	1e97a <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1e996:	f8df 917c 	ldr.w	r9, [pc, #380]	; 1eb14 <nrfx_gpiote_irq_handler+0x1ac>
   1e99a:	f8d9 317c 	ldr.w	r3, [r9, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   1e99e:	2b00      	cmp	r3, #0
   1e9a0:	f000 8099 	beq.w	1ead6 <nrfx_gpiote_irq_handler+0x16e>
        *p_masks = gpio_regs[i]->LATCH;
   1e9a4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1e9a8:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
   1e9ac:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   1e9ae:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   1e9b2:	f8d3 2820 	ldr.w	r2, [r3, #2080]	; 0x820
   1e9b6:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   1e9b8:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   1e9bc:	f04f 0800 	mov.w	r8, #0
            while (latch[i])
   1e9c0:	f10d 0a10 	add.w	sl, sp, #16
   1e9c4:	ea4f 1348 	mov.w	r3, r8, lsl #5
   1e9c8:	9300      	str	r3, [sp, #0]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
   1e9ca:	f04f 0b01 	mov.w	fp, #1
   1e9ce:	e049      	b.n	1ea64 <nrfx_gpiote_irq_handler+0xfc>
                pin += 32 * i;
   1e9d0:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1e9d2:	4a52      	ldr	r2, [pc, #328]	; (1eb1c <nrfx_gpiote_irq_handler+0x1b4>)
                uint32_t pin = NRF_CTZ(latch[i]);
   1e9d4:	fa94 f4a4 	rbit	r4, r4
   1e9d8:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
   1e9dc:	441c      	add	r4, r3
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   1e9de:	08e0      	lsrs	r0, r4, #3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1e9e0:	f104 0308 	add.w	r3, r4, #8
   1e9e4:	9403      	str	r4, [sp, #12]
   1e9e6:	f832 7013 	ldrh.w	r7, [r2, r3, lsl #1]
    p_mask8[byte_idx] &= ~(1 << bit);
   1e9ea:	f81a 3000 	ldrb.w	r3, [sl, r0]
    bit = BITMASK_RELBIT_GET(bit);
   1e9ee:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   1e9f2:	fa0b f202 	lsl.w	r2, fp, r2
   1e9f6:	ea23 0302 	bic.w	r3, r3, r2
   1e9fa:	f80a 3000 	strb.w	r3, [sl, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1e9fe:	a803      	add	r0, sp, #12
   1ea00:	f7ff fd26 	bl	1e450 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1ea04:	9b03      	ldr	r3, [sp, #12]
   1ea06:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1ea0a:	08b9      	lsrs	r1, r7, #2
   1ea0c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   1ea10:	f3c7 0582 	ubfx	r5, r7, #2, #3
    if (is_level(trigger))
   1ea14:	074a      	lsls	r2, r1, #29
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1ea16:	462f      	mov	r7, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   1ea18:	f3c3 4301 	ubfx	r3, r3, #16, #2
    if (is_level(trigger))
   1ea1c:	d52c      	bpl.n	1ea78 <nrfx_gpiote_irq_handler+0x110>
        call_handler(pin, trigger);
   1ea1e:	4620      	mov	r0, r4
   1ea20:	4639      	mov	r1, r7
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1ea22:	b2dd      	uxtb	r5, r3
   1ea24:	f7ff fd2c 	bl	1e480 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1ea28:	a803      	add	r0, sp, #12
   1ea2a:	9403      	str	r4, [sp, #12]
   1ea2c:	f7ff fd10 	bl	1e450 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1ea30:	9b03      	ldr	r3, [sp, #12]
   1ea32:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1ea36:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
   1ea3a:	f3c3 4301 	ubfx	r3, r3, #16, #2
   1ea3e:	429d      	cmp	r5, r3
   1ea40:	d107      	bne.n	1ea52 <nrfx_gpiote_irq_handler+0xea>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   1ea42:	2100      	movs	r1, #0
   1ea44:	4620      	mov	r0, r4
   1ea46:	f005 fca8 	bl	2439a <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   1ea4a:	4629      	mov	r1, r5
   1ea4c:	4620      	mov	r0, r4
   1ea4e:	f005 fca4 	bl	2439a <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1ea52:	a803      	add	r0, sp, #12
   1ea54:	9403      	str	r4, [sp, #12]
   1ea56:	f7ff fcfb 	bl	1e450 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
   1ea5a:	9b03      	ldr	r3, [sp, #12]
   1ea5c:	fa0b f303 	lsl.w	r3, fp, r3
   1ea60:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
            while (latch[i])
   1ea64:	f85a 4028 	ldr.w	r4, [sl, r8, lsl #2]
   1ea68:	2c00      	cmp	r4, #0
   1ea6a:	d1b1      	bne.n	1e9d0 <nrfx_gpiote_irq_handler+0x68>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   1ea6c:	f1b8 0f00 	cmp.w	r8, #0
   1ea70:	d11d      	bne.n	1eaae <nrfx_gpiote_irq_handler+0x146>
   1ea72:	f04f 0801 	mov.w	r8, #1
   1ea76:	e7a5      	b.n	1e9c4 <nrfx_gpiote_irq_handler+0x5c>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   1ea78:	2b02      	cmp	r3, #2
   1ea7a:	d10c      	bne.n	1ea96 <nrfx_gpiote_irq_handler+0x12e>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   1ea7c:	2103      	movs	r1, #3
   1ea7e:	4620      	mov	r0, r4
   1ea80:	f005 fc8b 	bl	2439a <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   1ea84:	f005 0305 	and.w	r3, r5, #5
   1ea88:	2b01      	cmp	r3, #1
   1ea8a:	d1e2      	bne.n	1ea52 <nrfx_gpiote_irq_handler+0xea>
            call_handler(pin, trigger);
   1ea8c:	4639      	mov	r1, r7
   1ea8e:	4620      	mov	r0, r4
   1ea90:	f7ff fcf6 	bl	1e480 <call_handler>
   1ea94:	e7dd      	b.n	1ea52 <nrfx_gpiote_irq_handler+0xea>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   1ea96:	2102      	movs	r1, #2
   1ea98:	4620      	mov	r0, r4
   1ea9a:	9301      	str	r3, [sp, #4]
   1ea9c:	f005 fc7d 	bl	2439a <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   1eaa0:	2d03      	cmp	r5, #3
   1eaa2:	d0f3      	beq.n	1ea8c <nrfx_gpiote_irq_handler+0x124>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   1eaa4:	9b01      	ldr	r3, [sp, #4]
   1eaa6:	2b03      	cmp	r3, #3
   1eaa8:	d1d3      	bne.n	1ea52 <nrfx_gpiote_irq_handler+0xea>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   1eaaa:	2d02      	cmp	r5, #2
   1eaac:	e7ed      	b.n	1ea8a <nrfx_gpiote_irq_handler+0x122>
        *p_masks = gpio_regs[i]->LATCH;
   1eaae:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1eab2:	f8c9 417c 	str.w	r4, [r9, #380]	; 0x17c
   1eab6:	f8d9 317c 	ldr.w	r3, [r9, #380]	; 0x17c
   1eaba:	4919      	ldr	r1, [pc, #100]	; (1eb20 <nrfx_gpiote_irq_handler+0x1b8>)
   1eabc:	f8d2 3520 	ldr.w	r3, [r2, #1312]	; 0x520
   1eac0:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   1eac2:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   1eac6:	f8d1 2520 	ldr.w	r2, [r1, #1312]	; 0x520
   1eaca:	9205      	str	r2, [sp, #20]
        if (latch[port_idx])
   1eacc:	4313      	orrs	r3, r2
        gpio_regs[i]->LATCH = *p_masks;
   1eace:	f8c1 2520 	str.w	r2, [r1, #1312]	; 0x520
   1ead2:	f47f af73 	bne.w	1e9bc <nrfx_gpiote_irq_handler+0x54>
        mask &= ~NRFX_BIT(ch);
   1ead6:	2401      	movs	r4, #1
    while (mask)
   1ead8:	b916      	cbnz	r6, 1eae0 <nrfx_gpiote_irq_handler+0x178>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
   1eada:	b007      	add	sp, #28
   1eadc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
   1eae0:	fa96 f3a6 	rbit	r3, r6
   1eae4:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   1eae8:	fa04 f203 	lsl.w	r2, r4, r3
   1eaec:	009b      	lsls	r3, r3, #2
   1eaee:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1eaf2:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   1eaf6:	ea26 0602 	bic.w	r6, r6, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1eafa:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   1eafe:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   1eb02:	f3c0 2005 	ubfx	r0, r0, #8, #6
   1eb06:	f3c1 4101 	ubfx	r1, r1, #16, #2
   1eb0a:	f7ff fcb9 	bl	1e480 <call_handler>
   1eb0e:	e7e3      	b.n	1ead8 <nrfx_gpiote_irq_handler+0x170>
   1eb10:	40006100 	.word	0x40006100
   1eb14:	40006000 	.word	0x40006000
   1eb18:	40006120 	.word	0x40006120
   1eb1c:	20000640 	.word	0x20000640
   1eb20:	50000300 	.word	0x50000300

0001eb24 <twi_tx_start_transfer>:
    return true;
}

static nrfx_err_t twi_tx_start_transfer(NRF_TWI_Type        * p_twi,
                                        twi_control_block_t * p_cb)
{
   1eb24:	b513      	push	{r0, r1, r4, lr}
    nrfx_err_t ret_code = NRFX_SUCCESS;
    volatile int32_t hw_timeout;

    hw_timeout = HW_TIMEOUT;
   1eb26:	4b3b      	ldr	r3, [pc, #236]	; (1ec14 <twi_tx_start_transfer+0xf0>)
   1eb28:	9301      	str	r3, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1eb2a:	2300      	movs	r3, #0
   1eb2c:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
   1eb30:	f8d0 2104 	ldr.w	r2, [r0, #260]	; 0x104
   1eb34:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
   1eb38:	f8d0 2124 	ldr.w	r2, [r0, #292]	; 0x124
   1eb3c:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
   1eb40:	f8d0 211c 	ldr.w	r2, [r0, #284]	; 0x11c
   1eb44:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   1eb48:	f8d0 2108 	ldr.w	r2, [r0, #264]	; 0x108
}

NRF_STATIC_INLINE void nrf_twi_shorts_set(NRF_TWI_Type * p_reg,
                                          uint32_t       mask)
{
    p_reg->SHORTS = mask;
   1eb4c:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_ERROR);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_TXDSENT);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_RXDREADY);
    nrf_twi_shorts_set(p_twi, 0);

    p_cb->bytes_transferred = 0;
   1eb50:	634b      	str	r3, [r1, #52]	; 0x34
    p_cb->error             = false;
   1eb52:	f881 302f 	strb.w	r3, [r1, #47]	; 0x2f
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1eb56:	2301      	movs	r3, #1
   1eb58:	6203      	str	r3, [r0, #32]

    // In case TWI is suspended resume its operation.
    nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_RESUME);

    if (p_cb->prev_suspend != TWI_SUSPEND_TX)
   1eb5a:	f891 202d 	ldrb.w	r2, [r1, #45]	; 0x2d
   1eb5e:	429a      	cmp	r2, r3
   1eb60:	bf18      	it	ne
   1eb62:	6083      	strne	r3, [r0, #8]
    if (p_cb->bytes_transferred < p_cb->curr_length)
   1eb64:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   1eb66:	6a8a      	ldr	r2, [r1, #40]	; 0x28
   1eb68:	4293      	cmp	r3, r2
{
   1eb6a:	4604      	mov	r4, r0
    if (p_cb->bytes_transferred < p_cb->curr_length)
   1eb6c:	d20e      	bcs.n	1eb8c <twi_tx_start_transfer+0x68>
        nrf_twi_txd_set(p_twi, p_cb->p_curr_buf[p_cb->bytes_transferred]);
   1eb6e:	6a4a      	ldr	r2, [r1, #36]	; 0x24
    p_reg->TXD = data;
   1eb70:	5cd3      	ldrb	r3, [r2, r3]
   1eb72:	f8c0 351c 	str.w	r3, [r0, #1308]	; 0x51c
        nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_STARTTX);
    }

    (void)twi_send_byte(p_twi, p_cb);

    if (p_cb->handler)
   1eb76:	680b      	ldr	r3, [r1, #0]
   1eb78:	b303      	cbz	r3, 1ebbc <twi_tx_start_transfer+0x98>
    {
        p_cb->int_mask = NRF_TWI_INT_STOPPED_MASK   |
   1eb7a:	f240 2386 	movw	r3, #646	; 0x286
   1eb7e:	608b      	str	r3, [r1, #8]
                         NRF_TWI_INT_ERROR_MASK     |
                         NRF_TWI_INT_TXDSENT_MASK   |
                         NRF_TWI_INT_RXDREADY_MASK;

        nrf_twi_int_enable(p_twi, p_cb->int_mask);
   1eb80:	688b      	ldr	r3, [r1, #8]
    nrfx_err_t ret_code = NRFX_SUCCESS;
   1eb82:	4825      	ldr	r0, [pc, #148]	; (1ec18 <twi_tx_start_transfer+0xf4>)
    p_reg->INTENSET = mask;
   1eb84:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
            ret_code = NRFX_ERROR_INTERNAL;
        }

    }
    return ret_code;
}
   1eb88:	b002      	add	sp, #8
   1eb8a:	bd10      	pop	{r4, pc}
        if (p_cb->curr_tx_no_stop)
   1eb8c:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
   1eb90:	b113      	cbz	r3, 1eb98 <twi_tx_start_transfer+0x74>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1eb92:	2301      	movs	r3, #1
   1eb94:	61c3      	str	r3, [r0, #28]
            return false;
   1eb96:	e7ee      	b.n	1eb76 <twi_tx_start_transfer+0x52>
        else if(TWI_FLAG_SUSPEND(p_cb->flags))
   1eb98:	6a0b      	ldr	r3, [r1, #32]
   1eb9a:	f013 0f40 	tst.w	r3, #64	; 0x40
   1eb9e:	f04f 0301 	mov.w	r3, #1
   1eba2:	bf16      	itet	ne
   1eba4:	61c3      	strne	r3, [r0, #28]
   1eba6:	6143      	streq	r3, [r0, #20]
            p_cb->prev_suspend = TWI_SUSPEND_TX;
   1eba8:	f881 302d 	strbne.w	r3, [r1, #45]	; 0x2d
}
   1ebac:	e7e3      	b.n	1eb76 <twi_tx_start_transfer+0x52>
               twi_transfer(p_twi, p_cb))
   1ebae:	4620      	mov	r0, r4
   1ebb0:	f005 fc02 	bl	243b8 <twi_transfer>
        while ((hw_timeout > 0) &&
   1ebb4:	b128      	cbz	r0, 1ebc2 <twi_tx_start_transfer+0x9e>
            hw_timeout--;
   1ebb6:	9b01      	ldr	r3, [sp, #4]
   1ebb8:	3b01      	subs	r3, #1
   1ebba:	9301      	str	r3, [sp, #4]
        while ((hw_timeout > 0) &&
   1ebbc:	9b01      	ldr	r3, [sp, #4]
   1ebbe:	2b00      	cmp	r3, #0
   1ebc0:	dcf5      	bgt.n	1ebae <twi_tx_start_transfer+0x8a>
        if (p_cb->error)
   1ebc2:	f891 302f 	ldrb.w	r3, [r1, #47]	; 0x2f
   1ebc6:	b95b      	cbnz	r3, 1ebe0 <twi_tx_start_transfer+0xbc>
    nrfx_err_t ret_code = NRFX_SUCCESS;
   1ebc8:	4813      	ldr	r0, [pc, #76]	; (1ec18 <twi_tx_start_transfer+0xf4>)
        if (hw_timeout <= 0)
   1ebca:	9b01      	ldr	r3, [sp, #4]
   1ebcc:	2b00      	cmp	r3, #0
   1ebce:	dcdb      	bgt.n	1eb88 <twi_tx_start_transfer+0x64>
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
   1ebd0:	2300      	movs	r3, #0
   1ebd2:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
   1ebd6:	2305      	movs	r3, #5
            ret_code = NRFX_ERROR_INTERNAL;
   1ebd8:	4810      	ldr	r0, [pc, #64]	; (1ec1c <twi_tx_start_transfer+0xf8>)
   1ebda:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    return ret_code;
   1ebde:	e7d3      	b.n	1eb88 <twi_tx_start_transfer+0x64>
    uint32_t error_source = p_reg->ERRORSRC;
   1ebe0:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   1ebe4:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
            if (errorsrc)
   1ebe8:	b18b      	cbz	r3, 1ec0e <twi_tx_start_transfer+0xea>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
   1ebea:	4a0d      	ldr	r2, [pc, #52]	; (1ec20 <twi_tx_start_transfer+0xfc>)
   1ebec:	480b      	ldr	r0, [pc, #44]	; (1ec1c <twi_tx_start_transfer+0xf8>)
   1ebee:	f013 0f01 	tst.w	r3, #1
   1ebf2:	bf18      	it	ne
   1ebf4:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   1ebf6:	f013 0f02 	tst.w	r3, #2
   1ebfa:	f102 0201 	add.w	r2, r2, #1
   1ebfe:	bf18      	it	ne
   1ec00:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   1ec02:	f013 0f04 	tst.w	r3, #4
   1ec06:	4b07      	ldr	r3, [pc, #28]	; (1ec24 <twi_tx_start_transfer+0x100>)
   1ec08:	bf18      	it	ne
   1ec0a:	4618      	movne	r0, r3
   1ec0c:	e7dd      	b.n	1ebca <twi_tx_start_transfer+0xa6>
                ret_code = NRFX_ERROR_INTERNAL;
   1ec0e:	4803      	ldr	r0, [pc, #12]	; (1ec1c <twi_tx_start_transfer+0xf8>)
   1ec10:	e7db      	b.n	1ebca <twi_tx_start_transfer+0xa6>
   1ec12:	bf00      	nop
   1ec14:	000186a0 	.word	0x000186a0
   1ec18:	0bad0000 	.word	0x0bad0000
   1ec1c:	0bad0001 	.word	0x0bad0001
   1ec20:	0bae0000 	.word	0x0bae0000
   1ec24:	0bae0002 	.word	0x0bae0002

0001ec28 <twi_rx_start_transfer>:

static nrfx_err_t twi_rx_start_transfer(NRF_TWI_Type        * p_twi,
                                        twi_control_block_t * p_cb)
{
   1ec28:	b513      	push	{r0, r1, r4, lr}
    nrfx_err_t ret_code = NRFX_SUCCESS;
    volatile int32_t hw_timeout;

    hw_timeout = HW_TIMEOUT;
   1ec2a:	4b33      	ldr	r3, [pc, #204]	; (1ecf8 <twi_rx_start_transfer+0xd0>)
   1ec2c:	9301      	str	r3, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ec2e:	2300      	movs	r3, #0
   1ec30:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
   1ec34:	f8d0 2104 	ldr.w	r2, [r0, #260]	; 0x104
   1ec38:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
   1ec3c:	f8d0 2124 	ldr.w	r2, [r0, #292]	; 0x124
   1ec40:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
   1ec44:	f8d0 211c 	ldr.w	r2, [r0, #284]	; 0x11c
   1ec48:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   1ec4c:	f8d0 2108 	ldr.w	r2, [r0, #264]	; 0x108
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_STOPPED);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_ERROR);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_TXDSENT);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_RXDREADY);

    p_cb->bytes_transferred = 0;
   1ec50:	634b      	str	r3, [r1, #52]	; 0x34
    p_cb->error             = false;
   1ec52:	f881 302f 	strb.w	r3, [r1, #47]	; 0x2f

    if ((p_cb->curr_length == 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   1ec56:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   1ec58:	2b01      	cmp	r3, #1
{
   1ec5a:	4604      	mov	r4, r0
    if ((p_cb->curr_length == 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   1ec5c:	d117      	bne.n	1ec8e <twi_rx_start_transfer+0x66>
   1ec5e:	6a0b      	ldr	r3, [r1, #32]
   1ec60:	065b      	lsls	r3, r3, #25
   1ec62:	d414      	bmi.n	1ec8e <twi_rx_start_transfer+0x66>
    p_reg->SHORTS = mask;
   1ec64:	2302      	movs	r3, #2
   1ec66:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ec6a:	2301      	movs	r3, #1
   1ec6c:	6223      	str	r3, [r4, #32]
        nrf_twi_shorts_set(p_twi, NRF_TWI_SHORT_BB_SUSPEND_MASK);
    }
    // In case TWI is suspended resume its operation.
    nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_RESUME);

    if (p_cb->prev_suspend != TWI_SUSPEND_RX)
   1ec6e:	f891 202d 	ldrb.w	r2, [r1, #45]	; 0x2d
   1ec72:	2a02      	cmp	r2, #2
   1ec74:	bf18      	it	ne
   1ec76:	6023      	strne	r3, [r4, #0]
    {
        nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_STARTRX);
    }

    if (p_cb->handler)
   1ec78:	680b      	ldr	r3, [r1, #0]
   1ec7a:	b18b      	cbz	r3, 1eca0 <twi_rx_start_transfer+0x78>
    {
        p_cb->int_mask = NRF_TWI_INT_STOPPED_MASK   |
   1ec7c:	f240 2386 	movw	r3, #646	; 0x286
   1ec80:	608b      	str	r3, [r1, #8]
                        NRF_TWI_INT_ERROR_MASK     |
                        NRF_TWI_INT_TXDSENT_MASK   |
                        NRF_TWI_INT_RXDREADY_MASK;
        nrf_twi_int_enable(p_twi, p_cb->int_mask);
   1ec82:	688b      	ldr	r3, [r1, #8]
    nrfx_err_t ret_code = NRFX_SUCCESS;
   1ec84:	481d      	ldr	r0, [pc, #116]	; (1ecfc <twi_rx_start_transfer+0xd4>)
    p_reg->INTENSET = mask;
   1ec86:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
            nrf_twi_enable(p_twi);
            ret_code = NRFX_ERROR_INTERNAL;
        }
    }
    return ret_code;
}
   1ec8a:	b002      	add	sp, #8
   1ec8c:	bd10      	pop	{r4, pc}
    p_reg->SHORTS = mask;
   1ec8e:	2301      	movs	r3, #1
   1ec90:	e7e9      	b.n	1ec66 <twi_rx_start_transfer+0x3e>
               twi_transfer(p_twi, p_cb))
   1ec92:	4620      	mov	r0, r4
   1ec94:	f005 fb90 	bl	243b8 <twi_transfer>
        while ((hw_timeout > 0) &&
   1ec98:	b128      	cbz	r0, 1eca6 <twi_rx_start_transfer+0x7e>
               hw_timeout--;
   1ec9a:	9b01      	ldr	r3, [sp, #4]
   1ec9c:	3b01      	subs	r3, #1
   1ec9e:	9301      	str	r3, [sp, #4]
        while ((hw_timeout > 0) &&
   1eca0:	9b01      	ldr	r3, [sp, #4]
   1eca2:	2b00      	cmp	r3, #0
   1eca4:	dcf5      	bgt.n	1ec92 <twi_rx_start_transfer+0x6a>
        if (p_cb->error)
   1eca6:	f891 302f 	ldrb.w	r3, [r1, #47]	; 0x2f
   1ecaa:	b95b      	cbnz	r3, 1ecc4 <twi_rx_start_transfer+0x9c>
    nrfx_err_t ret_code = NRFX_SUCCESS;
   1ecac:	4813      	ldr	r0, [pc, #76]	; (1ecfc <twi_rx_start_transfer+0xd4>)
        if (hw_timeout <= 0)
   1ecae:	9b01      	ldr	r3, [sp, #4]
   1ecb0:	2b00      	cmp	r3, #0
   1ecb2:	dcea      	bgt.n	1ec8a <twi_rx_start_transfer+0x62>
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
   1ecb4:	2300      	movs	r3, #0
   1ecb6:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
   1ecba:	2305      	movs	r3, #5
            ret_code = NRFX_ERROR_INTERNAL;
   1ecbc:	4810      	ldr	r0, [pc, #64]	; (1ed00 <twi_rx_start_transfer+0xd8>)
   1ecbe:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    return ret_code;
   1ecc2:	e7e2      	b.n	1ec8a <twi_rx_start_transfer+0x62>
    uint32_t error_source = p_reg->ERRORSRC;
   1ecc4:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   1ecc8:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
            if (errorsrc)
   1eccc:	b18b      	cbz	r3, 1ecf2 <twi_rx_start_transfer+0xca>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
   1ecce:	4a0d      	ldr	r2, [pc, #52]	; (1ed04 <twi_rx_start_transfer+0xdc>)
   1ecd0:	480b      	ldr	r0, [pc, #44]	; (1ed00 <twi_rx_start_transfer+0xd8>)
   1ecd2:	f013 0f01 	tst.w	r3, #1
   1ecd6:	bf18      	it	ne
   1ecd8:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   1ecda:	f013 0f02 	tst.w	r3, #2
   1ecde:	f102 0201 	add.w	r2, r2, #1
   1ece2:	bf18      	it	ne
   1ece4:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   1ece6:	f013 0f04 	tst.w	r3, #4
   1ecea:	4b07      	ldr	r3, [pc, #28]	; (1ed08 <twi_rx_start_transfer+0xe0>)
   1ecec:	bf18      	it	ne
   1ecee:	4618      	movne	r0, r3
   1ecf0:	e7dd      	b.n	1ecae <twi_rx_start_transfer+0x86>
                ret_code = NRFX_ERROR_INTERNAL;
   1ecf2:	4803      	ldr	r0, [pc, #12]	; (1ed00 <twi_rx_start_transfer+0xd8>)
   1ecf4:	e7db      	b.n	1ecae <twi_rx_start_transfer+0x86>
   1ecf6:	bf00      	nop
   1ecf8:	000186a0 	.word	0x000186a0
   1ecfc:	0bad0000 	.word	0x0bad0000
   1ed00:	0bad0001 	.word	0x0bad0001
   1ed04:	0bae0000 	.word	0x0bae0000
   1ed08:	0bae0002 	.word	0x0bae0002

0001ed0c <nrfx_twi_init>:
{
   1ed0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    twi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   1ed10:	7907      	ldrb	r7, [r0, #4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   1ed12:	4d2b      	ldr	r5, [pc, #172]	; (1edc0 <nrfx_twi_init+0xb4>)
   1ed14:	f04f 0e3c 	mov.w	lr, #60	; 0x3c
   1ed18:	fb0e fe07 	mul.w	lr, lr, r7
   1ed1c:	eb05 040e 	add.w	r4, r5, lr
   1ed20:	f894 602e 	ldrb.w	r6, [r4, #46]	; 0x2e
   1ed24:	2e00      	cmp	r6, #0
   1ed26:	d149      	bne.n	1edbc <nrfx_twi_init+0xb0>
    NRF_TWI_Type * p_twi = p_instance->p_twi;
   1ed28:	f8d0 c000 	ldr.w	ip, [r0]
    p_cb->handler         = event_handler;
   1ed2c:	f845 200e 	str.w	r2, [r5, lr]
    p_cb->int_mask        = 0;
   1ed30:	60a6      	str	r6, [r4, #8]
    p_cb->p_context       = p_context;
   1ed32:	6063      	str	r3, [r4, #4]
    p_cb->prev_suspend    = TWI_NO_SUSPEND;
   1ed34:	f884 602d 	strb.w	r6, [r4, #45]	; 0x2d
    p_cb->repeated        = false;
   1ed38:	f884 6031 	strb.w	r6, [r4, #49]	; 0x31
    p_cb->busy            = false;
   1ed3c:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
   1ed40:	7b4b      	ldrb	r3, [r1, #13]
   1ed42:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    p_cb->skip_gpio_cfg   = p_config->skip_gpio_cfg;
   1ed46:	7b8b      	ldrb	r3, [r1, #14]
   1ed48:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    if (!p_config->skip_gpio_cfg)
   1ed4c:	b9e3      	cbnz	r3, 1ed88 <nrfx_twi_init+0x7c>
        TWI_PIN_INIT(p_config->scl);
   1ed4e:	680c      	ldr	r4, [r1, #0]
        case 0: return NRF_P0;
   1ed50:	4b1c      	ldr	r3, [pc, #112]	; (1edc4 <nrfx_twi_init+0xb8>)
    *p_pin = pin_number & 0x1F;
   1ed52:	f004 061f 	and.w	r6, r4, #31
    return pin_number >> 5;
   1ed56:	0964      	lsrs	r4, r4, #5
        case 0: return NRF_P0;
   1ed58:	2c01      	cmp	r4, #1
   1ed5a:	bf08      	it	eq
   1ed5c:	4698      	moveq	r8, r3
    reg->PIN_CNF[pin_number] = cnf;
   1ed5e:	f506 74e0 	add.w	r4, r6, #448	; 0x1c0
        case 0: return NRF_P0;
   1ed62:	bf18      	it	ne
   1ed64:	f04f 48a0 	movne.w	r8, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   1ed68:	f240 6e0c 	movw	lr, #1548	; 0x60c
   1ed6c:	f848 e024 	str.w	lr, [r8, r4, lsl #2]
        TWI_PIN_INIT(p_config->sda);
   1ed70:	684c      	ldr	r4, [r1, #4]
    *p_pin = pin_number & 0x1F;
   1ed72:	f004 061f 	and.w	r6, r4, #31
    return pin_number >> 5;
   1ed76:	0964      	lsrs	r4, r4, #5
        case 0: return NRF_P0;
   1ed78:	2c01      	cmp	r4, #1
   1ed7a:	bf18      	it	ne
   1ed7c:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   1ed80:	f506 74e0 	add.w	r4, r6, #448	; 0x1c0
   1ed84:	f843 e024 	str.w	lr, [r3, r4, lsl #2]
    if (!p_config->skip_psel_cfg)
   1ed88:	7bcb      	ldrb	r3, [r1, #15]
   1ed8a:	b92b      	cbnz	r3, 1ed98 <nrfx_twi_init+0x8c>
        nrf_twi_pins_set(p_twi, p_config->scl, p_config->sda);
   1ed8c:	e9d1 4300 	ldrd	r4, r3, [r1]
    p_reg->PSEL.SCL = scl_pin;
   1ed90:	f8cc 4508 	str.w	r4, [ip, #1288]	; 0x508
    p_reg->PSEL.SDA = sda_pin;
   1ed94:	f8cc 350c 	str.w	r3, [ip, #1292]	; 0x50c
        (nrf_twi_frequency_t)p_config->frequency);
   1ed98:	688b      	ldr	r3, [r1, #8]
    p_reg->FREQUENCY = frequency;
   1ed9a:	f8cc 3524 	str.w	r3, [ip, #1316]	; 0x524
    if (p_cb->handler)
   1ed9e:	b122      	cbz	r2, 1edaa <nrfx_twi_init+0x9e>
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
   1eda0:	6800      	ldr	r0, [r0, #0]
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_twi));
   1eda2:	f340 3007 	sbfx	r0, r0, #12, #8
   1eda6:	f7f7 f99f 	bl	160e8 <arch_irq_enable>
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   1edaa:	233c      	movs	r3, #60	; 0x3c
   1edac:	fb03 5507 	mla	r5, r3, r7, r5
    return err_code;
   1edb0:	4805      	ldr	r0, [pc, #20]	; (1edc8 <nrfx_twi_init+0xbc>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   1edb2:	2301      	movs	r3, #1
   1edb4:	f885 302e 	strb.w	r3, [r5, #46]	; 0x2e
}
   1edb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return err_code;
   1edbc:	4803      	ldr	r0, [pc, #12]	; (1edcc <nrfx_twi_init+0xc0>)
   1edbe:	e7fb      	b.n	1edb8 <nrfx_twi_init+0xac>
   1edc0:	20005230 	.word	0x20005230
   1edc4:	50000300 	.word	0x50000300
   1edc8:	0bad0000 	.word	0x0bad0000
   1edcc:	0bad0005 	.word	0x0bad0005

0001edd0 <nrfx_twi_enable>:
    NRF_TWI_Type * p_twi = p_instance->p_twi;
   1edd0:	6803      	ldr	r3, [r0, #0]
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1edd2:	7902      	ldrb	r2, [r0, #4]
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
   1edd4:	2105      	movs	r1, #5
   1edd6:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
   1edda:	4b04      	ldr	r3, [pc, #16]	; (1edec <nrfx_twi_enable+0x1c>)
   1eddc:	213c      	movs	r1, #60	; 0x3c
   1edde:	fb01 3302 	mla	r3, r1, r2, r3
   1ede2:	2202      	movs	r2, #2
   1ede4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
}
   1ede8:	4770      	bx	lr
   1edea:	bf00      	nop
   1edec:	20005230 	.word	0x20005230

0001edf0 <nrfx_twi_disable>:
    NRF_TWI_Type * p_twi = p_instance->p_twi;
   1edf0:	6803      	ldr	r3, [r0, #0]
    p_reg->INTENCLR = mask;
   1edf2:	4a0b      	ldr	r2, [pc, #44]	; (1ee20 <nrfx_twi_disable+0x30>)
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1edf4:	7901      	ldrb	r1, [r0, #4]
   1edf6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    p_reg->SHORTS &= ~(mask);
   1edfa:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   1edfe:	f022 0203 	bic.w	r2, r2, #3
   1ee02:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
   1ee06:	2200      	movs	r2, #0
   1ee08:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   1ee0c:	4b05      	ldr	r3, [pc, #20]	; (1ee24 <nrfx_twi_disable+0x34>)
   1ee0e:	203c      	movs	r0, #60	; 0x3c
   1ee10:	fb00 3301 	mla	r3, r0, r1, r3
   1ee14:	2101      	movs	r1, #1
   1ee16:	f883 102e 	strb.w	r1, [r3, #46]	; 0x2e
    p_cb->busy = false;
   1ee1a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
}
   1ee1e:	4770      	bx	lr
   1ee20:	00044286 	.word	0x00044286
   1ee24:	20005230 	.word	0x20005230

0001ee28 <nrfx_twi_xfer>:
}

nrfx_err_t nrfx_twi_xfer(nrfx_twi_t const *           p_instance,
                         nrfx_twi_xfer_desc_t const * p_xfer_desc,
                         uint32_t                     flags)
{
   1ee28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
   1ee2c:	4f31      	ldr	r7, [pc, #196]	; (1eef4 <nrfx_twi_xfer+0xcc>)

    nrfx_err_t err_code = NRFX_SUCCESS;
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1ee2e:	7904      	ldrb	r4, [r0, #4]
                           p_xfer_desc->primary_length * sizeof(p_xfer_desc->p_primary_buf[0]));
    NRFX_LOG_DEBUG("Secondary buffer data:");
    NRFX_LOG_HEXDUMP_DEBUG(p_xfer_desc->p_secondary_buf,
                           p_xfer_desc->secondary_length * sizeof(p_xfer_desc->p_secondary_buf[0]));

    err_code = twi_xfer((NRF_TWI_Type  *)p_instance->p_twi, p_cb, p_xfer_desc, flags);
   1ee30:	f8d0 9000 	ldr.w	r9, [r0]
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
   1ee34:	233c      	movs	r3, #60	; 0x3c
   1ee36:	fb03 7304 	mla	r3, r3, r4, r7
{
   1ee3a:	460d      	mov	r5, r1
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
   1ee3c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
   1ee40:	2b01      	cmp	r3, #1
{
   1ee42:	4694      	mov	ip, r2
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
   1ee44:	d104      	bne.n	1ee50 <nrfx_twi_xfer+0x28>
   1ee46:	780b      	ldrb	r3, [r1, #0]
   1ee48:	2b01      	cmp	r3, #1
   1ee4a:	d106      	bne.n	1ee5a <nrfx_twi_xfer+0x32>
        return NRFX_ERROR_INVALID_STATE;
   1ee4c:	482a      	ldr	r0, [pc, #168]	; (1eef8 <nrfx_twi_xfer+0xd0>)
    NRFX_LOG_WARNING("Function: %s, error code: %s.",
                     __func__,
                     NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   1ee4e:	e011      	b.n	1ee74 <nrfx_twi_xfer+0x4c>
    else if ((p_cb->prev_suspend == TWI_SUSPEND_RX) && (p_xfer_desc->type != NRFX_TWI_XFER_RX))
   1ee50:	2b02      	cmp	r3, #2
   1ee52:	d102      	bne.n	1ee5a <nrfx_twi_xfer+0x32>
   1ee54:	780b      	ldrb	r3, [r1, #0]
   1ee56:	2b01      	cmp	r3, #1
   1ee58:	d1f8      	bne.n	1ee4c <nrfx_twi_xfer+0x24>
    if (p_cb->busy)
   1ee5a:	263c      	movs	r6, #60	; 0x3c
    p_reg->INTENCLR = mask;
   1ee5c:	4b27      	ldr	r3, [pc, #156]	; (1eefc <nrfx_twi_xfer+0xd4>)
   1ee5e:	f8c9 3308 	str.w	r3, [r9, #776]	; 0x308
   1ee62:	fb06 7604 	mla	r6, r6, r4, r7
   1ee66:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
   1ee6a:	b12b      	cbz	r3, 1ee78 <nrfx_twi_xfer+0x50>
        nrf_twi_int_enable(p_twi, p_cb->int_mask);
   1ee6c:	68b3      	ldr	r3, [r6, #8]
        return err_code;
   1ee6e:	4824      	ldr	r0, [pc, #144]	; (1ef00 <nrfx_twi_xfer+0xd8>)
    p_reg->INTENSET = mask;
   1ee70:	f8c9 3304 	str.w	r3, [r9, #772]	; 0x304
}
   1ee74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        p_cb->busy = (TWI_FLAG_NO_HANDLER_IN_USE(flags)) ? false : true;
   1ee78:	f08c 0304 	eor.w	r3, ip, #4
   1ee7c:	f3c3 0380 	ubfx	r3, r3, #2, #1
   1ee80:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
    p_cb->flags       = flags;
   1ee84:	f8c6 c020 	str.w	ip, [r6, #32]
    p_cb->xfer_desc   = *p_xfer_desc;
   1ee88:	46a8      	mov	r8, r5
   1ee8a:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
   1ee8e:	f106 0e0c 	add.w	lr, r6, #12
   1ee92:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   1ee96:	f8d8 3000 	ldr.w	r3, [r8]
   1ee9a:	f8ce 3000 	str.w	r3, [lr]
    p_cb->curr_length = p_xfer_desc->primary_length;
   1ee9e:	686b      	ldr	r3, [r5, #4]
   1eea0:	62b3      	str	r3, [r6, #40]	; 0x28
    p_cb->p_curr_buf  = p_xfer_desc->p_primary_buf;
   1eea2:	68eb      	ldr	r3, [r5, #12]
   1eea4:	6273      	str	r3, [r6, #36]	; 0x24
    p_reg->ADDRESS = address;
   1eea6:	786b      	ldrb	r3, [r5, #1]
   1eea8:	f8c9 3588 	str.w	r3, [r9, #1416]	; 0x588
    if (p_xfer_desc->type != NRFX_TWI_XFER_RX)
   1eeac:	782b      	ldrb	r3, [r5, #0]
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1eeae:	ebc4 1a04 	rsb	sl, r4, r4, lsl #4
    if (p_xfer_desc->type != NRFX_TWI_XFER_RX)
   1eeb2:	2b01      	cmp	r3, #1
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1eeb4:	eb07 0a8a 	add.w	sl, r7, sl, lsl #2
    if (p_xfer_desc->type != NRFX_TWI_XFER_RX)
   1eeb8:	d017      	beq.n	1eeea <nrfx_twi_xfer+0xc2>
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
   1eeba:	b99b      	cbnz	r3, 1eee4 <nrfx_twi_xfer+0xbc>
   1eebc:	f3cc 1c40 	ubfx	ip, ip, #5, #1
        p_cb->curr_tx_no_stop = ((p_xfer_desc->type == NRFX_TWI_XFER_TX) &&
   1eec0:	233c      	movs	r3, #60	; 0x3c
   1eec2:	fb03 7304 	mla	r3, r3, r4, r7
        err_code = twi_tx_start_transfer(p_twi, p_cb);
   1eec6:	4651      	mov	r1, sl
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
   1eec8:	f883 c02c 	strb.w	ip, [r3, #44]	; 0x2c
        err_code = twi_tx_start_transfer(p_twi, p_cb);
   1eecc:	4648      	mov	r0, r9
   1eece:	f7ff fe29 	bl	1eb24 <twi_tx_start_transfer>
    if (p_cb->handler == NULL)
   1eed2:	233c      	movs	r3, #60	; 0x3c
   1eed4:	435c      	muls	r4, r3
   1eed6:	193a      	adds	r2, r7, r4
   1eed8:	593b      	ldr	r3, [r7, r4]
   1eeda:	2b00      	cmp	r3, #0
   1eedc:	d1ca      	bne.n	1ee74 <nrfx_twi_xfer+0x4c>
        p_cb->busy = false;
   1eede:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
   1eee2:	e7c7      	b.n	1ee74 <nrfx_twi_xfer+0x4c>
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
   1eee4:	f04f 0c01 	mov.w	ip, #1
   1eee8:	e7ea      	b.n	1eec0 <nrfx_twi_xfer+0x98>
        err_code = twi_rx_start_transfer(p_twi, p_cb);
   1eeea:	4651      	mov	r1, sl
   1eeec:	4648      	mov	r0, r9
   1eeee:	f7ff fe9b 	bl	1ec28 <twi_rx_start_transfer>
   1eef2:	e7ee      	b.n	1eed2 <nrfx_twi_xfer+0xaa>
   1eef4:	20005230 	.word	0x20005230
   1eef8:	0bad0005 	.word	0x0bad0005
   1eefc:	00044286 	.word	0x00044286
   1ef00:	0bad000b 	.word	0x0bad000b

0001ef04 <nrfx_twi_0_irq_handler>:

}

#if NRFX_CHECK(NRFX_TWI0_ENABLED)
void nrfx_twi_0_irq_handler(void)
{
   1ef04:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (twi_transfer(p_twi, p_cb))
   1ef06:	4c32      	ldr	r4, [pc, #200]	; (1efd0 <nrfx_twi_0_irq_handler+0xcc>)
   1ef08:	4832      	ldr	r0, [pc, #200]	; (1efd4 <nrfx_twi_0_irq_handler+0xd0>)
{
   1ef0a:	b087      	sub	sp, #28
    if (twi_transfer(p_twi, p_cb))
   1ef0c:	4621      	mov	r1, r4
   1ef0e:	f005 fa53 	bl	243b8 <twi_transfer>
   1ef12:	2800      	cmp	r0, #0
   1ef14:	d159      	bne.n	1efca <nrfx_twi_0_irq_handler+0xc6>
    if (!p_cb->error &&
   1ef16:	f894 702f 	ldrb.w	r7, [r4, #47]	; 0x2f
   1ef1a:	b9ff      	cbnz	r7, 1ef5c <nrfx_twi_0_irq_handler+0x58>
        ((p_cb->xfer_desc.type == NRFX_TWI_XFER_TXRX) ||
   1ef1c:	7b22      	ldrb	r2, [r4, #12]
    if (!p_cb->error &&
   1ef1e:	1e93      	subs	r3, r2, #2
   1ef20:	2b01      	cmp	r3, #1
   1ef22:	d81b      	bhi.n	1ef5c <nrfx_twi_0_irq_handler+0x58>
         (p_cb->xfer_desc.type == NRFX_TWI_XFER_TXTX)) &&
   1ef24:	6a60      	ldr	r0, [r4, #36]	; 0x24
   1ef26:	69a3      	ldr	r3, [r4, #24]
   1ef28:	4298      	cmp	r0, r3
   1ef2a:	d117      	bne.n	1ef5c <nrfx_twi_0_irq_handler+0x58>
        p_cb->p_curr_buf      = p_cb->xfer_desc.p_secondary_buf;
   1ef2c:	69e3      	ldr	r3, [r4, #28]
   1ef2e:	6263      	str	r3, [r4, #36]	; 0x24
        p_cb->curr_length     = p_cb->xfer_desc.secondary_length;
   1ef30:	6963      	ldr	r3, [r4, #20]
   1ef32:	62a3      	str	r3, [r4, #40]	; 0x28
        p_cb->curr_tx_no_stop = (p_cb->flags & NRFX_TWI_FLAG_TX_NO_STOP);
   1ef34:	6a23      	ldr	r3, [r4, #32]
            (void)twi_tx_start_transfer(p_twi, p_cb);
   1ef36:	4827      	ldr	r0, [pc, #156]	; (1efd4 <nrfx_twi_0_irq_handler+0xd0>)
        p_cb->prev_suspend    = TWI_NO_SUSPEND;
   1ef38:	f884 702d 	strb.w	r7, [r4, #45]	; 0x2d
        p_cb->curr_tx_no_stop = (p_cb->flags & NRFX_TWI_FLAG_TX_NO_STOP);
   1ef3c:	f3c3 1340 	ubfx	r3, r3, #5, #1
        if (p_cb->xfer_desc.type == NRFX_TWI_XFER_TXTX)
   1ef40:	2a03      	cmp	r2, #3
        p_cb->curr_tx_no_stop = (p_cb->flags & NRFX_TWI_FLAG_TX_NO_STOP);
   1ef42:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
        if (p_cb->xfer_desc.type == NRFX_TWI_XFER_TXTX)
   1ef46:	d104      	bne.n	1ef52 <nrfx_twi_0_irq_handler+0x4e>
    twi_irq_handler(NRF_TWI0, &m_cb[NRFX_TWI0_INST_IDX]);
}
   1ef48:	b007      	add	sp, #28
   1ef4a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            (void)twi_tx_start_transfer(p_twi, p_cb);
   1ef4e:	f7ff bde9 	b.w	1eb24 <twi_tx_start_transfer>
}
   1ef52:	b007      	add	sp, #28
   1ef54:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            (void)twi_rx_start_transfer(p_twi, p_cb);
   1ef58:	f7ff be66 	b.w	1ec28 <twi_rx_start_transfer>
        event.xfer_desc = p_cb->xfer_desc;
   1ef5c:	4e1e      	ldr	r6, [pc, #120]	; (1efd8 <nrfx_twi_0_irq_handler+0xd4>)
   1ef5e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1ef60:	ad01      	add	r5, sp, #4
   1ef62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1ef64:	6833      	ldr	r3, [r6, #0]
   1ef66:	602b      	str	r3, [r5, #0]
        if (p_cb->error)
   1ef68:	b347      	cbz	r7, 1efbc <nrfx_twi_0_irq_handler+0xb8>
    uint32_t error_source = p_reg->ERRORSRC;
   1ef6a:	4a1a      	ldr	r2, [pc, #104]	; (1efd4 <nrfx_twi_0_irq_handler+0xd0>)
   1ef6c:	f8d2 34c4 	ldr.w	r3, [r2, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   1ef70:	f8c2 34c4 	str.w	r3, [r2, #1220]	; 0x4c4
            if (errorsrc & NRF_TWI_ERROR_ADDRESS_NACK)
   1ef74:	f013 0102 	ands.w	r1, r3, #2
   1ef78:	d006      	beq.n	1ef88 <nrfx_twi_0_irq_handler+0x84>
                event.type = NRFX_TWI_EVT_ADDRESS_NACK;
   1ef7a:	2301      	movs	r3, #1
   1ef7c:	f88d 3000 	strb.w	r3, [sp]
        p_cb->busy = false;
   1ef80:	2300      	movs	r3, #0
   1ef82:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
        if (!(TWI_FLAG_NO_HANDLER_IN_USE(p_cb->flags)) || p_cb->error)
   1ef86:	e007      	b.n	1ef98 <nrfx_twi_0_irq_handler+0x94>
            else if (errorsrc & NRF_TWI_ERROR_DATA_NACK)
   1ef88:	f013 0204 	ands.w	r2, r3, #4
   1ef8c:	d009      	beq.n	1efa2 <nrfx_twi_0_irq_handler+0x9e>
                event.type = NRFX_TWI_EVT_DATA_NACK;
   1ef8e:	2302      	movs	r3, #2
   1ef90:	f88d 3000 	strb.w	r3, [sp]
        p_cb->busy = false;
   1ef94:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
            p_cb->handler(&event, p_cb->p_context);
   1ef98:	e9d4 3100 	ldrd	r3, r1, [r4]
   1ef9c:	4668      	mov	r0, sp
   1ef9e:	4798      	blx	r3
}
   1efa0:	e013      	b.n	1efca <nrfx_twi_0_irq_handler+0xc6>
            else if (errorsrc & NRF_TWI_ERROR_OVERRUN)
   1efa2:	f013 0301 	ands.w	r3, r3, #1
   1efa6:	d005      	beq.n	1efb4 <nrfx_twi_0_irq_handler+0xb0>
                event.type = NRFX_TWI_EVT_OVERRUN;
   1efa8:	2303      	movs	r3, #3
   1efaa:	f88d 3000 	strb.w	r3, [sp]
        p_cb->busy = false;
   1efae:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
        if (!(TWI_FLAG_NO_HANDLER_IN_USE(p_cb->flags)) || p_cb->error)
   1efb2:	e7f1      	b.n	1ef98 <nrfx_twi_0_irq_handler+0x94>
                event.type = NRFX_TWI_EVT_BUS_ERROR;
   1efb4:	2204      	movs	r2, #4
   1efb6:	f88d 2000 	strb.w	r2, [sp]
   1efba:	e7e2      	b.n	1ef82 <nrfx_twi_0_irq_handler+0x7e>
        if (!(TWI_FLAG_NO_HANDLER_IN_USE(p_cb->flags)) || p_cb->error)
   1efbc:	6a23      	ldr	r3, [r4, #32]
            event.type = NRFX_TWI_EVT_DONE;
   1efbe:	f88d 7000 	strb.w	r7, [sp]
        if (!(TWI_FLAG_NO_HANDLER_IN_USE(p_cb->flags)) || p_cb->error)
   1efc2:	075b      	lsls	r3, r3, #29
        p_cb->busy = false;
   1efc4:	f884 7030 	strb.w	r7, [r4, #48]	; 0x30
        if (!(TWI_FLAG_NO_HANDLER_IN_USE(p_cb->flags)) || p_cb->error)
   1efc8:	d5e6      	bpl.n	1ef98 <nrfx_twi_0_irq_handler+0x94>
}
   1efca:	b007      	add	sp, #28
   1efcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1efce:	bf00      	nop
   1efd0:	20005230 	.word	0x20005230
   1efd4:	40003000 	.word	0x40003000
   1efd8:	2000523c 	.word	0x2000523c

0001efdc <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
   1efdc:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
   1efde:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   1efe2:	095b      	lsrs	r3, r3, #5
        case 0: return NRF_P0;
   1efe4:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
   1efe6:	6002      	str	r2, [r0, #0]
}
   1efe8:	4802      	ldr	r0, [pc, #8]	; (1eff4 <nrf_gpio_pin_port_decode+0x18>)
   1efea:	bf18      	it	ne
   1efec:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
   1eff0:	4770      	bx	lr
   1eff2:	bf00      	nop
   1eff4:	50000300 	.word	0x50000300

0001eff8 <nrfx_twi_twim_bus_recover>:
                                                  NRF_GPIO_PIN_PULLUP,        \
                                                  NRF_GPIO_PIN_S0D1,          \
                                                  NRF_GPIO_PIN_NOSENSE)

nrfx_err_t nrfx_twi_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
   1eff8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1effa:	4606      	mov	r6, r0
    nrf_gpio_pin_set(scl_pin);
   1effc:	f005 fa74 	bl	244e8 <nrf_gpio_pin_set>
    nrf_gpio_pin_set(sda_pin);
   1f000:	4608      	mov	r0, r1
   1f002:	f005 fa71 	bl	244e8 <nrf_gpio_pin_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1f006:	a801      	add	r0, sp, #4
   1f008:	9601      	str	r6, [sp, #4]
   1f00a:	f7ff ffe7 	bl	1efdc <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   1f00e:	9b01      	ldr	r3, [sp, #4]
   1f010:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
{
   1f014:	460c      	mov	r4, r1
   1f016:	f240 610d 	movw	r1, #1549	; 0x60d
   1f01a:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1f01e:	a801      	add	r0, sp, #4
   1f020:	9401      	str	r4, [sp, #4]
   1f022:	f7ff ffdb 	bl	1efdc <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   1f026:	9b01      	ldr	r3, [sp, #4]
   1f028:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0

    TWI_TWIM_PIN_CONFIGURE(scl_pin);
    TWI_TWIM_PIN_CONFIGURE(sda_pin);
    NRFX_DELAY_US(4);
   1f02c:	2509      	movs	r5, #9
   1f02e:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
   1f032:	2004      	movs	r0, #4
   1f034:	f005 f966 	bl	24304 <nrfx_busy_wait>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   1f038:	2701      	movs	r7, #1
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1f03a:	a801      	add	r0, sp, #4
   1f03c:	9401      	str	r4, [sp, #4]
   1f03e:	f7ff ffcd 	bl	1efdc <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   1f042:	9a01      	ldr	r2, [sp, #4]
    return p_reg->IN;
   1f044:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   1f048:	40d3      	lsrs	r3, r2

    for (uint8_t i = 0; i < 9; i++)
    {
        if (nrf_gpio_pin_read(sda_pin))
   1f04a:	07db      	lsls	r3, r3, #31
   1f04c:	d415      	bmi.n	1f07a <nrfx_twi_twim_bus_recover+0x82>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1f04e:	a801      	add	r0, sp, #4
   1f050:	9601      	str	r6, [sp, #4]
   1f052:	f7ff ffc3 	bl	1efdc <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   1f056:	9b01      	ldr	r3, [sp, #4]
   1f058:	fa07 f303 	lsl.w	r3, r7, r3
    p_reg->OUTCLR = clr_mask;
   1f05c:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
        }
        else
        {
            // Pulse CLOCK signal
            nrf_gpio_pin_clear(scl_pin);
            NRFX_DELAY_US(4);
   1f060:	2004      	movs	r0, #4
   1f062:	f005 f94f 	bl	24304 <nrfx_busy_wait>
            nrf_gpio_pin_set(scl_pin);
   1f066:	4630      	mov	r0, r6
   1f068:	f005 fa3e 	bl	244e8 <nrf_gpio_pin_set>
    for (uint8_t i = 0; i < 9; i++)
   1f06c:	3d01      	subs	r5, #1
            NRFX_DELAY_US(4);
   1f06e:	2004      	movs	r0, #4
   1f070:	f005 f948 	bl	24304 <nrfx_busy_wait>
    for (uint8_t i = 0; i < 9; i++)
   1f074:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   1f078:	d1df      	bne.n	1f03a <nrfx_twi_twim_bus_recover+0x42>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1f07a:	a801      	add	r0, sp, #4
   1f07c:	9401      	str	r4, [sp, #4]
   1f07e:	f7ff ffad 	bl	1efdc <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   1f082:	9a01      	ldr	r2, [sp, #4]
   1f084:	2301      	movs	r3, #1
   1f086:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
   1f088:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
        }
    }

    // Generate a STOP condition on the bus
    nrf_gpio_pin_clear(sda_pin);
    NRFX_DELAY_US(4);
   1f08c:	2004      	movs	r0, #4
   1f08e:	f005 f939 	bl	24304 <nrfx_busy_wait>
    nrf_gpio_pin_set(sda_pin);
   1f092:	4620      	mov	r0, r4
   1f094:	f005 fa28 	bl	244e8 <nrf_gpio_pin_set>
    NRFX_DELAY_US(4);
   1f098:	2004      	movs	r0, #4
   1f09a:	f005 f933 	bl	24304 <nrfx_busy_wait>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1f09e:	a801      	add	r0, sp, #4
   1f0a0:	9401      	str	r4, [sp, #4]
   1f0a2:	f7ff ff9b 	bl	1efdc <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   1f0a6:	9a01      	ldr	r2, [sp, #4]
    return p_reg->IN;
   1f0a8:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
    }
    else
    {
        return NRFX_ERROR_INTERNAL;
    }
}
   1f0ac:	4803      	ldr	r0, [pc, #12]	; (1f0bc <nrfx_twi_twim_bus_recover+0xc4>)
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   1f0ae:	40d3      	lsrs	r3, r2
   1f0b0:	f003 0301 	and.w	r3, r3, #1
   1f0b4:	1ac0      	subs	r0, r0, r3
   1f0b6:	b003      	add	sp, #12
   1f0b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1f0ba:	bf00      	nop
   1f0bc:	0bad0001 	.word	0x0bad0001

0001f0c0 <_DoInit>:
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   1f0c0:	4b11      	ldr	r3, [pc, #68]	; (1f108 <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
   1f0c2:	4912      	ldr	r1, [pc, #72]	; (1f10c <_DoInit+0x4c>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   1f0c4:	2203      	movs	r2, #3
   1f0c6:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   1f0c8:	615a      	str	r2, [r3, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
   1f0ca:	4a11      	ldr	r2, [pc, #68]	; (1f110 <_DoInit+0x50>)
  p->aUp[0].sName         = "Terminal";
   1f0cc:	6199      	str	r1, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
   1f0ce:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
   1f0d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1f0d4:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
   1f0d6:	2200      	movs	r2, #0
   1f0d8:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   1f0da:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   1f0dc:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
   1f0de:	6619      	str	r1, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
   1f0e0:	490c      	ldr	r1, [pc, #48]	; (1f114 <_DoInit+0x54>)
   1f0e2:	6659      	str	r1, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
   1f0e4:	2110      	movs	r1, #16
   1f0e6:	6699      	str	r1, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
   1f0e8:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
   1f0ea:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   1f0ec:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
   1f0ee:	4a0a      	ldr	r2, [pc, #40]	; (1f118 <_DoInit+0x58>)
   1f0f0:	6812      	ldr	r2, [r2, #0]
   1f0f2:	f8c3 2007 	str.w	r2, [r3, #7]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
   1f0f6:	4a09      	ldr	r2, [pc, #36]	; (1f11c <_DoInit+0x5c>)
   1f0f8:	6810      	ldr	r0, [r2, #0]
   1f0fa:	8892      	ldrh	r2, [r2, #4]
   1f0fc:	809a      	strh	r2, [r3, #4]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
   1f0fe:	2220      	movs	r2, #32
  STRCPY((char*)&p->acID[0], "SEGGER");
   1f100:	6018      	str	r0, [r3, #0]
  p->acID[6] = ' ';
   1f102:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
   1f104:	4770      	bx	lr
   1f106:	bf00      	nop
   1f108:	2000526c 	.word	0x2000526c
   1f10c:	00027a38 	.word	0x00027a38
   1f110:	200055fa 	.word	0x200055fa
   1f114:	200055ea 	.word	0x200055ea
   1f118:	00027a41 	.word	0x00027a41
   1f11c:	00027a45 	.word	0x00027a45

0001f120 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   1f120:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
   1f124:	4f21      	ldr	r7, [pc, #132]	; (1f1ac <SEGGER_RTT_WriteSkipNoLock+0x8c>)
   1f126:	f04f 0b18 	mov.w	fp, #24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   1f12a:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
   1f12c:	fb0b 7200 	mla	r2, fp, r0, r7
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   1f130:	4606      	mov	r6, r0
  RdOff = pRing->RdOff;
   1f132:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
   1f134:	6a55      	ldr	r5, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   1f136:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   1f138:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   1f13a:	d831      	bhi.n	1f1a0 <SEGGER_RTT_WriteSkipNoLock+0x80>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
   1f13c:	f8d2 a020 	ldr.w	sl, [r2, #32]
   1f140:	ebaa 0905 	sub.w	r9, sl, r5
   1f144:	f109 32ff 	add.w	r2, r9, #4294967295
    if (Avail >= NumBytes) {                            // Case 1)?
   1f148:	4294      	cmp	r4, r2
   1f14a:	d811      	bhi.n	1f170 <SEGGER_RTT_WriteSkipNoLock+0x50>
CopyStraight:
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   1f14c:	2318      	movs	r3, #24
   1f14e:	fb06 3303 	mla	r3, r6, r3, r3
   1f152:	443b      	add	r3, r7
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1f154:	4622      	mov	r2, r4
   1f156:	6858      	ldr	r0, [r3, #4]
   1f158:	4641      	mov	r1, r8
   1f15a:	4428      	add	r0, r5
   1f15c:	f006 f833 	bl	251c6 <memcpy>
      memcpy((void*)pDst, pData, NumBytes);
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
   1f160:	442c      	add	r4, r5
      if (NumBytes) {
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
        memcpy((void*)pDst, pData + Rem, NumBytes);
      }
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = NumBytes;
   1f162:	2318      	movs	r3, #24
   1f164:	fb03 7306 	mla	r3, r3, r6, r7
      return 1;
   1f168:	2001      	movs	r0, #1
      pRing->WrOff = NumBytes;
   1f16a:	625c      	str	r4, [r3, #36]	; 0x24
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
   1f16c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
   1f170:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
   1f172:	429c      	cmp	r4, r3
   1f174:	d818      	bhi.n	1f1a8 <SEGGER_RTT_WriteSkipNoLock+0x88>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   1f176:	fb00 bb0b 	mla	fp, r0, fp, fp
   1f17a:	44bb      	add	fp, r7
   1f17c:	464a      	mov	r2, r9
   1f17e:	f8db 0004 	ldr.w	r0, [fp, #4]
   1f182:	442c      	add	r4, r5
   1f184:	4428      	add	r0, r5
   1f186:	f006 f81e 	bl	251c6 <memcpy>
      if (NumBytes) {
   1f18a:	ebb4 040a 	subs.w	r4, r4, sl
   1f18e:	d0e8      	beq.n	1f162 <SEGGER_RTT_WriteSkipNoLock+0x42>
   1f190:	f8db 0004 	ldr.w	r0, [fp, #4]
   1f194:	4622      	mov	r2, r4
   1f196:	eb08 0109 	add.w	r1, r8, r9
   1f19a:	f006 f814 	bl	251c6 <memcpy>
      return 1;
   1f19e:	e7e0      	b.n	1f162 <SEGGER_RTT_WriteSkipNoLock+0x42>
    Avail = RdOff - WrOff - 1u;
   1f1a0:	3b01      	subs	r3, #1
   1f1a2:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
   1f1a4:	42a3      	cmp	r3, r4
   1f1a6:	d2d1      	bcs.n	1f14c <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
   1f1a8:	2000      	movs	r0, #0
   1f1aa:	e7df      	b.n	1f16c <SEGGER_RTT_WriteSkipNoLock+0x4c>
   1f1ac:	2000526c 	.word	0x2000526c

0001f1b0 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   1f1b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
   1f1b2:	4b14      	ldr	r3, [pc, #80]	; (1f204 <SEGGER_RTT_WriteNoLock+0x54>)
   1f1b4:	2718      	movs	r7, #24
   1f1b6:	fb00 7507 	mla	r5, r0, r7, r7
   1f1ba:	441d      	add	r5, r3
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
   1f1bc:	fb07 3300 	mla	r3, r7, r0, r3
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   1f1c0:	460e      	mov	r6, r1
  switch (pRing->Flags) {
   1f1c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1f1c4:	2b01      	cmp	r3, #1
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   1f1c6:	4614      	mov	r4, r2
  switch (pRing->Flags) {
   1f1c8:	d00a      	beq.n	1f1e0 <SEGGER_RTT_WriteNoLock+0x30>
   1f1ca:	2b02      	cmp	r3, #2
   1f1cc:	d014      	beq.n	1f1f8 <SEGGER_RTT_WriteNoLock+0x48>
   1f1ce:	b923      	cbnz	r3, 1f1da <SEGGER_RTT_WriteNoLock+0x2a>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
   1f1d0:	4628      	mov	r0, r5
   1f1d2:	f005 f996 	bl	24502 <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
   1f1d6:	4284      	cmp	r4, r0
   1f1d8:	d908      	bls.n	1f1ec <SEGGER_RTT_WriteNoLock+0x3c>
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
    break;
  default:
    Status = 0u;
   1f1da:	2400      	movs	r4, #0
  }
  //
  // Finish up.
  //
  return Status;
}
   1f1dc:	4620      	mov	r0, r4
   1f1de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    Avail = _GetAvailWriteSpace(pRing);
   1f1e0:	4628      	mov	r0, r5
   1f1e2:	f005 f98e 	bl	24502 <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
   1f1e6:	4284      	cmp	r4, r0
   1f1e8:	bf28      	it	cs
   1f1ea:	4604      	movcs	r4, r0
    _WriteNoCheck(pRing, pData, Status);
   1f1ec:	4622      	mov	r2, r4
   1f1ee:	4631      	mov	r1, r6
   1f1f0:	4628      	mov	r0, r5
   1f1f2:	f005 f98f 	bl	24514 <_WriteNoCheck>
    break;
   1f1f6:	e7f1      	b.n	1f1dc <SEGGER_RTT_WriteNoLock+0x2c>
    Status = _WriteBlocking(pRing, pData, NumBytes);
   1f1f8:	4628      	mov	r0, r5
}
   1f1fa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Status = _WriteBlocking(pRing, pData, NumBytes);
   1f1fe:	f005 b9a6 	b.w	2454e <_WriteBlocking>
   1f202:	bf00      	nop
   1f204:	2000526c 	.word	0x2000526c

0001f208 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
   1f208:	4b03      	ldr	r3, [pc, #12]	; (1f218 <SEGGER_RTT_HasDataUp+0x10>)
   1f20a:	2218      	movs	r2, #24
   1f20c:	fb02 3300 	mla	r3, r2, r0, r3
   1f210:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
   1f212:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
   1f214:	1a80      	subs	r0, r0, r2
   1f216:	4770      	bx	lr
   1f218:	2000526c 	.word	0x2000526c

0001f21c <zephyr_rtt_mutex_lock>:
	return z_impl_k_mutex_lock(mutex, timeout);
   1f21c:	4803      	ldr	r0, [pc, #12]	; (1f22c <zephyr_rtt_mutex_lock+0x10>)
   1f21e:	f04f 32ff 	mov.w	r2, #4294967295
   1f222:	f04f 33ff 	mov.w	r3, #4294967295
   1f226:	f000 baa5 	b.w	1f774 <z_impl_k_mutex_lock>
   1f22a:	bf00      	nop
   1f22c:	20000830 	.word	0x20000830

0001f230 <zephyr_rtt_mutex_unlock>:
	return z_impl_k_mutex_unlock(mutex);
   1f230:	4801      	ldr	r0, [pc, #4]	; (1f238 <zephyr_rtt_mutex_unlock+0x8>)
   1f232:	f000 bb19 	b.w	1f868 <z_impl_k_mutex_unlock>
   1f236:	bf00      	nop
   1f238:	20000830 	.word	0x20000830

0001f23c <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   1f23c:	4b01      	ldr	r3, [pc, #4]	; (1f244 <z_impl_z_errno+0x8>)
   1f23e:	6898      	ldr	r0, [r3, #8]
}
   1f240:	3064      	adds	r0, #100	; 0x64
   1f242:	4770      	bx	lr
   1f244:	20005314 	.word	0x20005314

0001f248 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   1f248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1f24c:	b086      	sub	sp, #24
   1f24e:	4605      	mov	r5, r0
   1f250:	af00      	add	r7, sp, #0
   1f252:	460e      	mov	r6, r1
   1f254:	f04f 0340 	mov.w	r3, #64	; 0x40
   1f258:	f3ef 8811 	mrs	r8, BASEPRI
   1f25c:	f383 8812 	msr	BASEPRI_MAX, r3
   1f260:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   1f264:	f000 ffd4 	bl	20210 <z_impl_z_current_get>
   1f268:	2d04      	cmp	r5, #4
   1f26a:	bf96      	itet	ls
   1f26c:	4b2c      	ldrls	r3, [pc, #176]	; (1f320 <z_fatal_error+0xd8>)
   1f26e:	4b2d      	ldrhi	r3, [pc, #180]	; (1f324 <z_fatal_error+0xdc>)
   1f270:	f853 3025 	ldrls.w	r3, [r3, r5, lsl #2]
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   1f274:	46e9      	mov	r9, sp
   1f276:	b08a      	sub	sp, #40	; 0x28
   1f278:	4604      	mov	r4, r0
   1f27a:	466a      	mov	r2, sp
   1f27c:	492a      	ldr	r1, [pc, #168]	; (1f328 <z_fatal_error+0xe0>)
   1f27e:	61d3      	str	r3, [r2, #28]
   1f280:	f240 3301 	movw	r3, #769	; 0x301
   1f284:	8493      	strh	r3, [r2, #36]	; 0x24
   1f286:	f04f 0a00 	mov.w	sl, #0
   1f28a:	4b28      	ldr	r3, [pc, #160]	; (1f32c <z_fatal_error+0xe4>)
   1f28c:	f8c2 a020 	str.w	sl, [r2, #32]
   1f290:	e9c2 1505 	strd	r1, r5, [r2, #20]
   1f294:	f842 3f10 	str.w	r3, [r2, #16]!
   1f298:	4825      	ldr	r0, [pc, #148]	; (1f330 <z_fatal_error+0xe8>)
   1f29a:	4653      	mov	r3, sl
   1f29c:	f44f 5131 	mov.w	r1, #11328	; 0x2c40
   1f2a0:	f7f6 f9ae 	bl	15600 <z_impl_z_log_msg_static_create>
   1f2a4:	46cd      	mov	sp, r9
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   1f2a6:	b17e      	cbz	r6, 1f2c8 <z_fatal_error+0x80>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   1f2a8:	69f3      	ldr	r3, [r6, #28]
   1f2aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
   1f2ae:	b15b      	cbz	r3, 1f2c8 <z_fatal_error+0x80>
		LOG_ERR("Fault during interrupt handling\n");
   1f2b0:	4b20      	ldr	r3, [pc, #128]	; (1f334 <z_fatal_error+0xec>)
   1f2b2:	617b      	str	r3, [r7, #20]
   1f2b4:	2302      	movs	r3, #2
   1f2b6:	613b      	str	r3, [r7, #16]
   1f2b8:	481d      	ldr	r0, [pc, #116]	; (1f330 <z_fatal_error+0xe8>)
   1f2ba:	4653      	mov	r3, sl
   1f2bc:	f107 0210 	add.w	r2, r7, #16
   1f2c0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1f2c4:	f7f6 f99c 	bl	15600 <z_impl_z_log_msg_static_create>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   1f2c8:	b12c      	cbz	r4, 1f2d6 <z_fatal_error+0x8e>
   1f2ca:	4620      	mov	r0, r4
   1f2cc:	f005 fa3b 	bl	24746 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   1f2d0:	b108      	cbz	r0, 1f2d6 <z_fatal_error+0x8e>
   1f2d2:	7803      	ldrb	r3, [r0, #0]
   1f2d4:	b903      	cbnz	r3, 1f2d8 <z_fatal_error+0x90>
		thread_name = "unknown";
   1f2d6:	4818      	ldr	r0, [pc, #96]	; (1f338 <z_fatal_error+0xf0>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   1f2d8:	46e9      	mov	r9, sp
   1f2da:	b08a      	sub	sp, #40	; 0x28
   1f2dc:	466a      	mov	r2, sp
   1f2de:	4b17      	ldr	r3, [pc, #92]	; (1f33c <z_fatal_error+0xf4>)
   1f2e0:	61d0      	str	r0, [r2, #28]
   1f2e2:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1f2e6:	f240 3301 	movw	r3, #769	; 0x301
   1f2ea:	8413      	strh	r3, [r2, #32]
   1f2ec:	4b14      	ldr	r3, [pc, #80]	; (1f340 <z_fatal_error+0xf8>)
   1f2ee:	f842 3f10 	str.w	r3, [r2, #16]!
   1f2f2:	2300      	movs	r3, #0
   1f2f4:	480e      	ldr	r0, [pc, #56]	; (1f330 <z_fatal_error+0xe8>)
   1f2f6:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   1f2fa:	f7f6 f981 	bl	15600 <z_impl_z_log_msg_static_create>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
   1f2fe:	4631      	mov	r1, r6
   1f300:	46cd      	mov	sp, r9
   1f302:	4628      	mov	r0, r5
   1f304:	f7fd ffb2 	bl	1d26c <k_sys_fatal_error_handler>
	__asm__ volatile(
   1f308:	f388 8811 	msr	BASEPRI, r8
   1f30c:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   1f310:	4620      	mov	r0, r4
   1f312:	f7f7 fc1f 	bl	16b54 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   1f316:	3718      	adds	r7, #24
   1f318:	46bd      	mov	sp, r7
   1f31a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1f31e:	bf00      	nop
   1f320:	00025c10 	.word	0x00025c10
   1f324:	00027a4c 	.word	0x00027a4c
   1f328:	00027a62 	.word	0x00027a62
   1f32c:	01000005 	.word	0x01000005
   1f330:	0002562c 	.word	0x0002562c
   1f334:	00027a8a 	.word	0x00027a8a
   1f338:	00027a5a 	.word	0x00027a5a
   1f33c:	00027aab 	.word	0x00027aab
   1f340:	01000004 	.word	0x01000004

0001f344 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1f344:	4b0f      	ldr	r3, [pc, #60]	; (1f384 <z_sys_init_run_level+0x40>)
{
   1f346:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1f348:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   1f34c:	3001      	adds	r0, #1
   1f34e:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   1f352:	42a6      	cmp	r6, r4
   1f354:	d800      	bhi.n	1f358 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   1f356:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   1f358:	e9d4 3500 	ldrd	r3, r5, [r4]
   1f35c:	4628      	mov	r0, r5
   1f35e:	4798      	blx	r3
		if (dev != NULL) {
   1f360:	b16d      	cbz	r5, 1f37e <z_sys_init_run_level+0x3a>
			if (rc != 0) {
   1f362:	b138      	cbz	r0, 1f374 <z_sys_init_run_level+0x30>
				if (rc < 0) {
   1f364:	2800      	cmp	r0, #0
   1f366:	bfb8      	it	lt
   1f368:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
   1f36a:	68eb      	ldr	r3, [r5, #12]
				if (rc > UINT8_MAX) {
   1f36c:	28ff      	cmp	r0, #255	; 0xff
   1f36e:	bfa8      	it	ge
   1f370:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
   1f372:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   1f374:	68ea      	ldr	r2, [r5, #12]
   1f376:	7853      	ldrb	r3, [r2, #1]
   1f378:	f043 0301 	orr.w	r3, r3, #1
   1f37c:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1f37e:	3408      	adds	r4, #8
   1f380:	e7e7      	b.n	1f352 <z_sys_init_run_level+0xe>
   1f382:	bf00      	nop
   1f384:	00025c24 	.word	0x00025c24

0001f388 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   1f388:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   1f38a:	4b0a      	ldr	r3, [pc, #40]	; (1f3b4 <bg_thread_main+0x2c>)
   1f38c:	2201      	movs	r2, #1

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   1f38e:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
   1f390:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   1f392:	f7ff ffd7 	bl	1f344 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   1f396:	f001 fa67 	bl	20868 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
   1f39a:	2004      	movs	r0, #4
   1f39c:	f7ff ffd2 	bl	1f344 <z_sys_init_run_level>

	z_init_static_threads();
   1f3a0:	f000 f970 	bl	1f684 <z_init_static_threads>
	extern int main(void);
#else
	extern void main(void);
#endif

	(void)main();
   1f3a4:	f7f5 f888 	bl	144b8 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   1f3a8:	4a03      	ldr	r2, [pc, #12]	; (1f3b8 <bg_thread_main+0x30>)
   1f3aa:	7b13      	ldrb	r3, [r2, #12]
   1f3ac:	f023 0301 	bic.w	r3, r3, #1
   1f3b0:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   1f3b2:	bd08      	pop	{r3, pc}
   1f3b4:	200059fa 	.word	0x200059fa
   1f3b8:	20002e78 	.word	0x20002e78

0001f3bc <z_bss_zero>:
{
   1f3bc:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
   1f3be:	4803      	ldr	r0, [pc, #12]	; (1f3cc <z_bss_zero+0x10>)
   1f3c0:	4a03      	ldr	r2, [pc, #12]	; (1f3d0 <z_bss_zero+0x14>)
   1f3c2:	2100      	movs	r1, #0
   1f3c4:	1a12      	subs	r2, r2, r0
   1f3c6:	f005 f8ff 	bl	245c8 <z_early_memset>
}
   1f3ca:	bd08      	pop	{r3, pc}
   1f3cc:	20000998 	.word	0x20000998
   1f3d0:	200059fc 	.word	0x200059fc

0001f3d4 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
   1f3d4:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = &z_idle_threads[i];
   1f3d6:	4e16      	ldr	r6, [pc, #88]	; (1f430 <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   1f3d8:	4d16      	ldr	r5, [pc, #88]	; (1f434 <z_init_cpu+0x60>)
	z_setup_new_thread(thread, stack,
   1f3da:	4917      	ldr	r1, [pc, #92]	; (1f438 <z_init_cpu+0x64>)
	struct k_thread *thread = &z_idle_threads[i];
   1f3dc:	23c8      	movs	r3, #200	; 0xc8
{
   1f3de:	b086      	sub	sp, #24
	struct k_thread *thread = &z_idle_threads[i];
   1f3e0:	fb03 6600 	mla	r6, r3, r0, r6
	z_setup_new_thread(thread, stack,
   1f3e4:	2201      	movs	r2, #1
   1f3e6:	2300      	movs	r3, #0
   1f3e8:	e9cd 2304 	strd	r2, r3, [sp, #16]
   1f3ec:	220f      	movs	r2, #15
   1f3ee:	e9cd 3202 	strd	r3, r2, [sp, #8]
   1f3f2:	9301      	str	r3, [sp, #4]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   1f3f4:	231c      	movs	r3, #28
   1f3f6:	fb03 5500 	mla	r5, r3, r0, r5
{
   1f3fa:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
   1f3fc:	f44f 70c0 	mov.w	r0, #384	; 0x180
   1f400:	fb00 1104 	mla	r1, r0, r4, r1
   1f404:	4b0d      	ldr	r3, [pc, #52]	; (1f43c <z_init_cpu+0x68>)
   1f406:	9500      	str	r5, [sp, #0]
   1f408:	f44f 72a0 	mov.w	r2, #320	; 0x140
   1f40c:	4630      	mov	r0, r6
   1f40e:	f000 f8db 	bl	1f5c8 <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1f412:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   1f414:	4a0a      	ldr	r2, [pc, #40]	; (1f440 <z_init_cpu+0x6c>)
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
   1f416:	60ee      	str	r6, [r5, #12]
   1f418:	f023 0304 	bic.w	r3, r3, #4
   1f41c:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   1f41e:	f44f 6308 	mov.w	r3, #2176	; 0x880
   1f422:	fb04 3303 	mla	r3, r4, r3, r3
   1f426:	4413      	add	r3, r2
	_kernel.cpus[id].id = id;
   1f428:	752c      	strb	r4, [r5, #20]
	_kernel.cpus[id].irq_stack =
   1f42a:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
   1f42c:	b006      	add	sp, #24
   1f42e:	bd70      	pop	{r4, r5, r6, pc}
   1f430:	20002db0 	.word	0x20002db0
   1f434:	20005314 	.word	0x20005314
   1f438:	20009f80 	.word	0x20009f80
   1f43c:	0001f73d 	.word	0x0001f73d
   1f440:	20009700 	.word	0x20009700

0001f444 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   1f444:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   1f446:	2000      	movs	r0, #0
{
   1f448:	b0b8      	sub	sp, #224	; 0xe0
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   1f44a:	f7ff ff7b 	bl	1f344 <z_sys_init_run_level>
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   1f44e:	4b2e      	ldr	r3, [pc, #184]	; (1f508 <z_cstart+0xc4>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   1f450:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   1f454:	4d2d      	ldr	r5, [pc, #180]	; (1f50c <z_cstart+0xc8>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
   1f456:	4e2e      	ldr	r6, [pc, #184]	; (1f510 <z_cstart+0xcc>)
   1f458:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1f45a:	4f2e      	ldr	r7, [pc, #184]	; (1f514 <z_cstart+0xd0>)
   1f45c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   1f460:	616b      	str	r3, [r5, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1f462:	23e0      	movs	r3, #224	; 0xe0
   1f464:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   1f468:	2400      	movs	r4, #0
   1f46a:	2320      	movs	r3, #32
   1f46c:	77eb      	strb	r3, [r5, #31]
   1f46e:	762c      	strb	r4, [r5, #24]
   1f470:	766c      	strb	r4, [r5, #25]
   1f472:	76ac      	strb	r4, [r5, #26]
   1f474:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   1f478:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1f47a:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   1f47e:	626b      	str	r3, [r5, #36]	; 0x24
   1f480:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   1f484:	f7f7 fada 	bl	16a3c <z_arm_fault_init>
	z_arm_cpu_idle_init();
   1f488:	f7f6 fd5e 	bl	15f48 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   1f48c:	f04f 33ff 	mov.w	r3, #4294967295
   1f490:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   1f492:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   1f494:	f7f7 fc34 	bl	16d00 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   1f498:	f7f7 fb72 	bl	16b80 <z_arm_configure_static_mpu_regions>

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
   1f49c:	f7f5 ff40 	bl	15320 <log_core_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
   1f4a0:	f240 1301 	movw	r3, #257	; 0x101
   1f4a4:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   1f4a8:	ab06      	add	r3, sp, #24
   1f4aa:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
   1f4ac:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	dummy_thread->resource_pool = NULL;
   1f4b0:	9423      	str	r4, [sp, #140]	; 0x8c
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   1f4b2:	f005 f87d 	bl	245b0 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
   1f4b6:	2001      	movs	r0, #1
   1f4b8:	f7ff ff44 	bl	1f344 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   1f4bc:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
   1f4be:	4d16      	ldr	r5, [pc, #88]	; (1f518 <z_cstart+0xd4>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   1f4c0:	f7ff ff40 	bl	1f344 <z_sys_init_run_level>
	z_sched_init();
   1f4c4:	f000 fdfc 	bl	200c0 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1f4c8:	4b14      	ldr	r3, [pc, #80]	; (1f51c <z_cstart+0xd8>)
	_kernel.ready_q.cache = &z_main_thread;
   1f4ca:	6235      	str	r5, [r6, #32]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1f4cc:	9305      	str	r3, [sp, #20]
   1f4ce:	2301      	movs	r3, #1
   1f4d0:	4913      	ldr	r1, [pc, #76]	; (1f520 <z_cstart+0xdc>)
   1f4d2:	9400      	str	r4, [sp, #0]
   1f4d4:	e9cd 4303 	strd	r4, r3, [sp, #12]
   1f4d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1f4dc:	463b      	mov	r3, r7
   1f4de:	e9cd 4401 	strd	r4, r4, [sp, #4]
   1f4e2:	4628      	mov	r0, r5
   1f4e4:	f000 f870 	bl	1f5c8 <z_setup_new_thread>
   1f4e8:	7b6a      	ldrb	r2, [r5, #13]
   1f4ea:	4606      	mov	r6, r0
   1f4ec:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
   1f4f0:	4628      	mov	r0, r5
   1f4f2:	736a      	strb	r2, [r5, #13]
   1f4f4:	f005 fb4b 	bl	24b8e <z_ready_thread>
	z_init_cpu(0);
   1f4f8:	4620      	mov	r0, r4
   1f4fa:	f7ff ff6b 	bl	1f3d4 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   1f4fe:	463a      	mov	r2, r7
   1f500:	4631      	mov	r1, r6
   1f502:	4628      	mov	r0, r5
   1f504:	f7f6 ff70 	bl	163e8 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   1f508:	20009f80 	.word	0x20009f80
   1f50c:	e000ed00 	.word	0xe000ed00
   1f510:	20005314 	.word	0x20005314
   1f514:	0001f389 	.word	0x0001f389
   1f518:	20002e78 	.word	0x20002e78
   1f51c:	00027b0d 	.word	0x00027b0d
   1f520:	2000a100 	.word	0x2000a100

0001f524 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   1f524:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   1f526:	4c06      	ldr	r4, [pc, #24]	; (1f540 <statics_init+0x1c>)
   1f528:	4d06      	ldr	r5, [pc, #24]	; (1f544 <statics_init+0x20>)
   1f52a:	42ac      	cmp	r4, r5
   1f52c:	d301      	bcc.n	1f532 <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
   1f52e:	2000      	movs	r0, #0
   1f530:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   1f532:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   1f536:	4620      	mov	r0, r4
   1f538:	f005 f84a 	bl	245d0 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   1f53c:	3414      	adds	r4, #20
   1f53e:	e7f4      	b.n	1f52a <statics_init+0x6>
   1f540:	2000081c 	.word	0x2000081c
   1f544:	2000081c 	.word	0x2000081c

0001f548 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
   1f548:	b538      	push	{r3, r4, r5, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1f54a:	4c06      	ldr	r4, [pc, #24]	; (1f564 <init_mem_slab_module+0x1c>)
   1f54c:	4d06      	ldr	r5, [pc, #24]	; (1f568 <init_mem_slab_module+0x20>)
	int rc = 0;
   1f54e:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1f550:	42ac      	cmp	r4, r5
   1f552:	d300      	bcc.n	1f556 <init_mem_slab_module+0xe>
		z_object_init(slab);
	}

out:
	return rc;
}
   1f554:	bd38      	pop	{r3, r4, r5, pc}
		rc = create_free_list(slab);
   1f556:	4620      	mov	r0, r4
   1f558:	f005 f8ad 	bl	246b6 <create_free_list>
		if (rc < 0) {
   1f55c:	2800      	cmp	r0, #0
   1f55e:	dbf9      	blt.n	1f554 <init_mem_slab_module+0xc>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1f560:	341c      	adds	r4, #28
   1f562:	e7f5      	b.n	1f550 <init_mem_slab_module+0x8>
   1f564:	200007c8 	.word	0x200007c8
   1f568:	2000081c 	.word	0x2000081c

0001f56c <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   1f56c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1f56e:	460c      	mov	r4, r1
	__asm__ volatile(
   1f570:	f04f 0540 	mov.w	r5, #64	; 0x40
   1f574:	f3ef 8111 	mrs	r1, BASEPRI
   1f578:	f385 8812 	msr	BASEPRI_MAX, r5
   1f57c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   1f580:	6945      	ldr	r5, [r0, #20]
   1f582:	b15d      	cbz	r5, 1f59c <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
   1f584:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   1f586:	682b      	ldr	r3, [r5, #0]
   1f588:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   1f58a:	6983      	ldr	r3, [r0, #24]
   1f58c:	3301      	adds	r3, #1
   1f58e:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   1f590:	2000      	movs	r0, #0
	__asm__ volatile(
   1f592:	f381 8811 	msr	BASEPRI, r1
   1f596:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
   1f59a:	e011      	b.n	1f5c0 <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   1f59c:	ea52 0603 	orrs.w	r6, r2, r3
   1f5a0:	d103      	bne.n	1f5aa <k_mem_slab_alloc+0x3e>
		*mem = NULL;
   1f5a2:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
   1f5a4:	f06f 000b 	mvn.w	r0, #11
   1f5a8:	e7f3      	b.n	1f592 <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   1f5aa:	e9cd 2300 	strd	r2, r3, [sp]
   1f5ae:	4602      	mov	r2, r0
   1f5b0:	3008      	adds	r0, #8
   1f5b2:	f000 fc8f 	bl	1fed4 <z_pend_curr>
		if (result == 0) {
   1f5b6:	b918      	cbnz	r0, 1f5c0 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
   1f5b8:	4b02      	ldr	r3, [pc, #8]	; (1f5c4 <k_mem_slab_alloc+0x58>)
   1f5ba:	689b      	ldr	r3, [r3, #8]
   1f5bc:	695b      	ldr	r3, [r3, #20]
   1f5be:	6023      	str	r3, [r4, #0]
}
   1f5c0:	b002      	add	sp, #8
   1f5c2:	bd70      	pop	{r4, r5, r6, pc}
   1f5c4:	20005314 	.word	0x20005314

0001f5c8 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   1f5c8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   1f5cc:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   1f5ce:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   1f5d0:	2604      	movs	r6, #4
   1f5d2:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
   1f5d4:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   1f5d6:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   1f5d8:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
   1f5dc:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1f5de:	1dd6      	adds	r6, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
   1f5e0:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1f5e4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
   1f5e6:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1f5e8:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   1f5ec:	3740      	adds	r7, #64	; 0x40
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   1f5ee:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
   1f5f2:	e9c0 761a 	strd	r7, r6, [r0, #104]	; 0x68
	thread_base->pended_on = NULL;
   1f5f6:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
   1f5f8:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
   1f5fa:	6705      	str	r5, [r0, #112]	; 0x70
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1f5fc:	f106 0840 	add.w	r8, r6, #64	; 0x40
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1f600:	9202      	str	r2, [sp, #8]
   1f602:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1f604:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
   1f606:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1f608:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1f60a:	9200      	str	r2, [sp, #0]
   1f60c:	4642      	mov	r2, r8
{
   1f60e:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1f610:	f7f6 fe66 	bl	162e0 <arch_new_thread>
	if (!_current) {
   1f614:	4b04      	ldr	r3, [pc, #16]	; (1f628 <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
   1f616:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
   1f618:	689b      	ldr	r3, [r3, #8]
   1f61a:	b103      	cbz	r3, 1f61e <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
   1f61c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
   1f61e:	6763      	str	r3, [r4, #116]	; 0x74
}
   1f620:	4640      	mov	r0, r8
   1f622:	b004      	add	sp, #16
   1f624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f628:	20005314 	.word	0x20005314

0001f62c <z_impl_k_thread_create>:
{
   1f62c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f62e:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1f630:	2500      	movs	r5, #0
   1f632:	9505      	str	r5, [sp, #20]
   1f634:	9d10      	ldr	r5, [sp, #64]	; 0x40
   1f636:	9504      	str	r5, [sp, #16]
   1f638:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   1f63a:	9503      	str	r5, [sp, #12]
   1f63c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   1f63e:	9502      	str	r5, [sp, #8]
{
   1f640:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1f644:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   1f646:	9501      	str	r5, [sp, #4]
   1f648:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   1f64a:	9500      	str	r5, [sp, #0]
{
   1f64c:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1f64e:	f7ff ffbb 	bl	1f5c8 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   1f652:	f1b6 3fff 	cmp.w	r6, #4294967295
   1f656:	bf08      	it	eq
   1f658:	f1b7 3fff 	cmpeq.w	r7, #4294967295
   1f65c:	d005      	beq.n	1f66a <__kernel_ram_size+0x2>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1f65e:	ea56 0307 	orrs.w	r3, r6, r7
   1f662:	d105      	bne.n	1f670 <__kernel_ram_size+0x8>
	z_sched_start(thread);
   1f664:	4620      	mov	r0, r4
   1f666:	f000 fcab 	bl	1ffc0 <z_sched_start>
}
   1f66a:	4620      	mov	r0, r4
   1f66c:	b007      	add	sp, #28
   1f66e:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   1f670:	4903      	ldr	r1, [pc, #12]	; (1f680 <__kernel_ram_size+0x18>)
   1f672:	463a      	mov	r2, r7
   1f674:	4633      	mov	r3, r6
   1f676:	f104 0018 	add.w	r0, r4, #24
   1f67a:	f000 fea9 	bl	203d0 <z_add_timeout>
   1f67e:	e7f4      	b.n	1f66a <__kernel_ram_size+0x2>
   1f680:	00024afb 	.word	0x00024afb

0001f684 <z_init_static_threads>:
{
   1f684:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1f688:	4c29      	ldr	r4, [pc, #164]	; (1f730 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
   1f68a:	4d2a      	ldr	r5, [pc, #168]	; (1f734 <z_init_static_threads+0xb0>)
{
   1f68c:	b087      	sub	sp, #28
   1f68e:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
   1f690:	42ae      	cmp	r6, r5
   1f692:	f104 0430 	add.w	r4, r4, #48	; 0x30
   1f696:	d30f      	bcc.n	1f6b8 <z_init_static_threads+0x34>
	k_sched_lock();
   1f698:	f000 fce2 	bl	20060 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   1f69c:	4c24      	ldr	r4, [pc, #144]	; (1f730 <z_init_static_threads+0xac>)
   1f69e:	f8df 9098 	ldr.w	r9, [pc, #152]	; 1f738 <z_init_static_threads+0xb4>
			return ((t * to_hz + off) / from_hz);
   1f6a2:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   1f6a6:	f240 37e7 	movw	r7, #999	; 0x3e7
   1f6aa:	42ac      	cmp	r4, r5
   1f6ac:	d320      	bcc.n	1f6f0 <z_init_static_threads+0x6c>
}
   1f6ae:	b007      	add	sp, #28
   1f6b0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   1f6b4:	f000 bce8 	b.w	20088 <k_sched_unlock>
		z_setup_new_thread(
   1f6b8:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1f6bc:	9305      	str	r3, [sp, #20]
   1f6be:	f854 3c10 	ldr.w	r3, [r4, #-16]
   1f6c2:	9304      	str	r3, [sp, #16]
   1f6c4:	f854 3c14 	ldr.w	r3, [r4, #-20]
   1f6c8:	9303      	str	r3, [sp, #12]
   1f6ca:	f854 3c18 	ldr.w	r3, [r4, #-24]
   1f6ce:	9302      	str	r3, [sp, #8]
   1f6d0:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   1f6d4:	9301      	str	r3, [sp, #4]
   1f6d6:	f854 3c20 	ldr.w	r3, [r4, #-32]
   1f6da:	9300      	str	r3, [sp, #0]
   1f6dc:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   1f6e0:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   1f6e4:	f7ff ff70 	bl	1f5c8 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   1f6e8:	f854 3c30 	ldr.w	r3, [r4, #-48]
   1f6ec:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   1f6ee:	e7ce      	b.n	1f68e <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   1f6f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1f6f2:	1c5a      	adds	r2, r3, #1
   1f6f4:	d00d      	beq.n	1f712 <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
   1f6f6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1f6fa:	2100      	movs	r1, #0
   1f6fc:	4638      	mov	r0, r7
   1f6fe:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1f702:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   1f706:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1f70a:	d104      	bne.n	1f716 <z_init_static_threads+0x92>
	z_sched_start(thread);
   1f70c:	4640      	mov	r0, r8
   1f70e:	f000 fc57 	bl	1ffc0 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   1f712:	3430      	adds	r4, #48	; 0x30
   1f714:	e7c9      	b.n	1f6aa <z_init_static_threads+0x26>
   1f716:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1f71a:	2300      	movs	r3, #0
   1f71c:	f7e1 f9de 	bl	adc <__aeabi_uldivmod>
   1f720:	4602      	mov	r2, r0
   1f722:	460b      	mov	r3, r1
   1f724:	f108 0018 	add.w	r0, r8, #24
   1f728:	4649      	mov	r1, r9
   1f72a:	f000 fe51 	bl	203d0 <z_add_timeout>
   1f72e:	e7f0      	b.n	1f712 <z_init_static_threads+0x8e>
   1f730:	00025500 	.word	0x00025500
   1f734:	00025500 	.word	0x00025500
   1f738:	00024afb 	.word	0x00024afb

0001f73c <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   1f73c:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   1f73e:	4c0b      	ldr	r4, [pc, #44]	; (1f76c <idle+0x30>)
	return !z_sys_post_kernel;
   1f740:	4d0b      	ldr	r5, [pc, #44]	; (1f770 <idle+0x34>)
	__asm__ volatile(
   1f742:	f04f 0240 	mov.w	r2, #64	; 0x40
   1f746:	f3ef 8311 	mrs	r3, BASEPRI
   1f74a:	f382 8812 	msr	BASEPRI_MAX, r2
   1f74e:	f3bf 8f6f 	isb	sy
   1f752:	f005 fae2 	bl	24d1a <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   1f756:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
   1f758:	61e0      	str	r0, [r4, #28]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   1f75a:	b913      	cbnz	r3, 1f762 <idle+0x26>
	arch_cpu_idle();
   1f75c:	f7f6 fbfa 	bl	15f54 <arch_cpu_idle>
}
   1f760:	e7ef      	b.n	1f742 <idle+0x6>
   1f762:	f7f6 fac5 	bl	15cf0 <pm_system_suspend>
   1f766:	2800      	cmp	r0, #0
   1f768:	d1eb      	bne.n	1f742 <idle+0x6>
   1f76a:	e7f7      	b.n	1f75c <idle+0x20>
   1f76c:	20005314 	.word	0x20005314
   1f770:	200059fa 	.word	0x200059fa

0001f774 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   1f774:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1f778:	4604      	mov	r4, r0
   1f77a:	4617      	mov	r7, r2
   1f77c:	461e      	mov	r6, r3
   1f77e:	f04f 0340 	mov.w	r3, #64	; 0x40
   1f782:	f3ef 8811 	mrs	r8, BASEPRI
   1f786:	f383 8812 	msr	BASEPRI_MAX, r3
   1f78a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   1f78e:	68c3      	ldr	r3, [r0, #12]
   1f790:	4a33      	ldr	r2, [pc, #204]	; (1f860 <z_impl_k_mutex_lock+0xec>)
   1f792:	b17b      	cbz	r3, 1f7b4 <z_impl_k_mutex_lock+0x40>
   1f794:	6880      	ldr	r0, [r0, #8]
   1f796:	6891      	ldr	r1, [r2, #8]
   1f798:	4288      	cmp	r0, r1
   1f79a:	d019      	beq.n	1f7d0 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   1f79c:	ea57 0306 	orrs.w	r3, r7, r6
   1f7a0:	d118      	bne.n	1f7d4 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   1f7a2:	f388 8811 	msr	BASEPRI, r8
   1f7a6:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   1f7aa:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   1f7ae:	b002      	add	sp, #8
   1f7b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   1f7b4:	6891      	ldr	r1, [r2, #8]
   1f7b6:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   1f7ba:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
   1f7bc:	3301      	adds	r3, #1
   1f7be:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   1f7c0:	6893      	ldr	r3, [r2, #8]
   1f7c2:	60a3      	str	r3, [r4, #8]
   1f7c4:	f388 8811 	msr	BASEPRI, r8
   1f7c8:	f3bf 8f6f 	isb	sy
		return 0;
   1f7cc:	2000      	movs	r0, #0
   1f7ce:	e7ee      	b.n	1f7ae <z_impl_k_mutex_lock+0x3a>
					_current->base.prio :
   1f7d0:	6921      	ldr	r1, [r4, #16]
   1f7d2:	e7f2      	b.n	1f7ba <z_impl_k_mutex_lock+0x46>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   1f7d4:	f991 100e 	ldrsb.w	r1, [r1, #14]
   1f7d8:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   1f7dc:	4299      	cmp	r1, r3
   1f7de:	bfa8      	it	ge
   1f7e0:	4619      	movge	r1, r3
   1f7e2:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   1f7e6:	4291      	cmp	r1, r2
   1f7e8:	bfb8      	it	lt
   1f7ea:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   1f7ec:	428b      	cmp	r3, r1
   1f7ee:	dd2e      	ble.n	1f84e <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
   1f7f0:	f004 ffb4 	bl	2475c <adjust_owner_prio.isra.0>
   1f7f4:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   1f7f6:	e9cd 7600 	strd	r7, r6, [sp]
   1f7fa:	481a      	ldr	r0, [pc, #104]	; (1f864 <z_impl_k_mutex_lock+0xf0>)
   1f7fc:	4622      	mov	r2, r4
   1f7fe:	4641      	mov	r1, r8
   1f800:	f000 fb68 	bl	1fed4 <z_pend_curr>
	if (got_mutex == 0) {
   1f804:	2800      	cmp	r0, #0
   1f806:	d0e1      	beq.n	1f7cc <z_impl_k_mutex_lock+0x58>
	__asm__ volatile(
   1f808:	f04f 0340 	mov.w	r3, #64	; 0x40
   1f80c:	f3ef 8611 	mrs	r6, BASEPRI
   1f810:	f383 8812 	msr	BASEPRI_MAX, r3
   1f814:	f3bf 8f6f 	isb	sy
	if (likely(mutex->owner != NULL)) {
   1f818:	68a0      	ldr	r0, [r4, #8]
   1f81a:	b1d0      	cbz	r0, 1f852 <z_impl_k_mutex_lock+0xde>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   1f81c:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   1f81e:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1f820:	429c      	cmp	r4, r3
   1f822:	d00a      	beq.n	1f83a <z_impl_k_mutex_lock+0xc6>
   1f824:	b14b      	cbz	r3, 1f83a <z_impl_k_mutex_lock+0xc6>
   1f826:	f993 300e 	ldrsb.w	r3, [r3, #14]
   1f82a:	4299      	cmp	r1, r3
   1f82c:	bfa8      	it	ge
   1f82e:	4619      	movge	r1, r3
   1f830:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   1f834:	4299      	cmp	r1, r3
   1f836:	bfb8      	it	lt
   1f838:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
   1f83a:	f004 ff8f 	bl	2475c <adjust_owner_prio.isra.0>
   1f83e:	b140      	cbz	r0, 1f852 <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
   1f840:	4808      	ldr	r0, [pc, #32]	; (1f864 <z_impl_k_mutex_lock+0xf0>)
   1f842:	4631      	mov	r1, r6
   1f844:	f000 fbaa 	bl	1ff9c <z_reschedule>
	return -EAGAIN;
   1f848:	f06f 000a 	mvn.w	r0, #10
   1f84c:	e7af      	b.n	1f7ae <z_impl_k_mutex_lock+0x3a>
	bool resched = false;
   1f84e:	2500      	movs	r5, #0
   1f850:	e7d1      	b.n	1f7f6 <z_impl_k_mutex_lock+0x82>
	if (resched) {
   1f852:	2d00      	cmp	r5, #0
   1f854:	d1f4      	bne.n	1f840 <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
   1f856:	f386 8811 	msr	BASEPRI, r6
   1f85a:	f3bf 8f6f 	isb	sy
   1f85e:	e7f3      	b.n	1f848 <z_impl_k_mutex_lock+0xd4>
   1f860:	20005314 	.word	0x20005314
   1f864:	200059fb 	.word	0x200059fb

0001f868 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   1f868:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   1f86a:	6883      	ldr	r3, [r0, #8]
{
   1f86c:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   1f86e:	b36b      	cbz	r3, 1f8cc <z_impl_k_mutex_unlock+0x64>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   1f870:	4a19      	ldr	r2, [pc, #100]	; (1f8d8 <z_impl_k_mutex_unlock+0x70>)
   1f872:	6892      	ldr	r2, [r2, #8]
   1f874:	4293      	cmp	r3, r2
   1f876:	d12c      	bne.n	1f8d2 <z_impl_k_mutex_unlock+0x6a>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   1f878:	68c3      	ldr	r3, [r0, #12]
   1f87a:	2b01      	cmp	r3, #1
   1f87c:	d903      	bls.n	1f886 <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
   1f87e:	3b01      	subs	r3, #1
   1f880:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
   1f882:	2000      	movs	r0, #0
}
   1f884:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   1f886:	f04f 0340 	mov.w	r3, #64	; 0x40
   1f88a:	f3ef 8511 	mrs	r5, BASEPRI
   1f88e:	f383 8812 	msr	BASEPRI_MAX, r3
   1f892:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   1f896:	6901      	ldr	r1, [r0, #16]
   1f898:	6880      	ldr	r0, [r0, #8]
   1f89a:	f004 ff5f 	bl	2475c <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   1f89e:	4620      	mov	r0, r4
   1f8a0:	f005 f9ac 	bl	24bfc <z_unpend_first_thread>
	mutex->owner = new_owner;
   1f8a4:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   1f8a6:	b158      	cbz	r0, 1f8c0 <z_impl_k_mutex_unlock+0x58>
		mutex->owner_orig_prio = new_owner->base.prio;
   1f8a8:	f990 200e 	ldrsb.w	r2, [r0, #14]
   1f8ac:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   1f8ae:	2200      	movs	r2, #0
   1f8b0:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   1f8b2:	f005 f96c 	bl	24b8e <z_ready_thread>
		z_reschedule(&lock, key);
   1f8b6:	4809      	ldr	r0, [pc, #36]	; (1f8dc <z_impl_k_mutex_unlock+0x74>)
   1f8b8:	4629      	mov	r1, r5
   1f8ba:	f000 fb6f 	bl	1ff9c <z_reschedule>
   1f8be:	e7e0      	b.n	1f882 <z_impl_k_mutex_unlock+0x1a>
		mutex->lock_count = 0U;
   1f8c0:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   1f8c2:	f385 8811 	msr	BASEPRI, r5
   1f8c6:	f3bf 8f6f 	isb	sy
   1f8ca:	e7da      	b.n	1f882 <z_impl_k_mutex_unlock+0x1a>
		return -EINVAL;
   1f8cc:	f06f 0015 	mvn.w	r0, #21
   1f8d0:	e7d8      	b.n	1f884 <z_impl_k_mutex_unlock+0x1c>
		return -EPERM;
   1f8d2:	f04f 30ff 	mov.w	r0, #4294967295
   1f8d6:	e7d5      	b.n	1f884 <z_impl_k_mutex_unlock+0x1c>
   1f8d8:	20005314 	.word	0x20005314
   1f8dc:	200059fb 	.word	0x200059fb

0001f8e0 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   1f8e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1f8e2:	4611      	mov	r1, r2
	__asm__ volatile(
   1f8e4:	f04f 0240 	mov.w	r2, #64	; 0x40
   1f8e8:	f3ef 8511 	mrs	r5, BASEPRI
   1f8ec:	f382 8812 	msr	BASEPRI_MAX, r2
   1f8f0:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
   1f8f4:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   1f8f6:	b19c      	cbz	r4, 1f920 <z_impl_k_queue_get+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1f8f8:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1f8fa:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1f8fc:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1f900:	4294      	cmp	r4, r2
	list->head = node;
   1f902:	6003      	str	r3, [r0, #0]
	list->tail = node;
   1f904:	bf08      	it	eq
   1f906:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   1f908:	2101      	movs	r1, #1
   1f90a:	4620      	mov	r0, r4
   1f90c:	f004 ff94 	bl	24838 <z_queue_node_peek>
   1f910:	4604      	mov	r4, r0
	__asm__ volatile(
   1f912:	f385 8811 	msr	BASEPRI, r5
   1f916:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   1f91a:	4620      	mov	r0, r4
   1f91c:	b003      	add	sp, #12
   1f91e:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1f920:	ea51 0203 	orrs.w	r2, r1, r3
   1f924:	d0f5      	beq.n	1f912 <z_impl_k_queue_get+0x32>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1f926:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   1f92a:	e9cd 1300 	strd	r1, r3, [sp]
   1f92e:	4610      	mov	r0, r2
   1f930:	4629      	mov	r1, r5
   1f932:	f000 facf 	bl	1fed4 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   1f936:	2800      	cmp	r0, #0
   1f938:	d1ef      	bne.n	1f91a <z_impl_k_queue_get+0x3a>
   1f93a:	4b02      	ldr	r3, [pc, #8]	; (1f944 <z_impl_k_queue_get+0x64>)
   1f93c:	689b      	ldr	r3, [r3, #8]
   1f93e:	695c      	ldr	r4, [r3, #20]
   1f940:	e7eb      	b.n	1f91a <z_impl_k_queue_get+0x3a>
   1f942:	bf00      	nop
   1f944:	20005314 	.word	0x20005314

0001f948 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   1f948:	b538      	push	{r3, r4, r5, lr}
   1f94a:	4604      	mov	r4, r0
	__asm__ volatile(
   1f94c:	f04f 0340 	mov.w	r3, #64	; 0x40
   1f950:	f3ef 8511 	mrs	r5, BASEPRI
   1f954:	f383 8812 	msr	BASEPRI_MAX, r3
   1f958:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   1f95c:	f005 f94e 	bl	24bfc <z_unpend_first_thread>

	if (thread != NULL) {
   1f960:	b148      	cbz	r0, 1f976 <z_impl_k_sem_give+0x2e>
   1f962:	2200      	movs	r2, #0
   1f964:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   1f966:	f005 f912 	bl	24b8e <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   1f96a:	4629      	mov	r1, r5
   1f96c:	4808      	ldr	r0, [pc, #32]	; (1f990 <z_impl_k_sem_give+0x48>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   1f96e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   1f972:	f000 bb13 	b.w	1ff9c <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1f976:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   1f97a:	429a      	cmp	r2, r3
   1f97c:	bf18      	it	ne
   1f97e:	3301      	addne	r3, #1
   1f980:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   1f982:	2102      	movs	r1, #2
   1f984:	f104 0010 	add.w	r0, r4, #16
   1f988:	f005 fb88 	bl	2509c <z_handle_obj_poll_events>
}
   1f98c:	e7ed      	b.n	1f96a <z_impl_k_sem_give+0x22>
   1f98e:	bf00      	nop
   1f990:	200059fb 	.word	0x200059fb

0001f994 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   1f994:	b513      	push	{r0, r1, r4, lr}
   1f996:	f04f 0440 	mov.w	r4, #64	; 0x40
   1f99a:	f3ef 8111 	mrs	r1, BASEPRI
   1f99e:	f384 8812 	msr	BASEPRI_MAX, r4
   1f9a2:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   1f9a6:	6884      	ldr	r4, [r0, #8]
   1f9a8:	b144      	cbz	r4, 1f9bc <z_impl_k_sem_take+0x28>
		sem->count--;
   1f9aa:	3c01      	subs	r4, #1
   1f9ac:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
   1f9ae:	f381 8811 	msr	BASEPRI, r1
   1f9b2:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   1f9b6:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   1f9b8:	b002      	add	sp, #8
   1f9ba:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1f9bc:	ea52 0403 	orrs.w	r4, r2, r3
   1f9c0:	d106      	bne.n	1f9d0 <z_impl_k_sem_take+0x3c>
   1f9c2:	f381 8811 	msr	BASEPRI, r1
   1f9c6:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   1f9ca:	f06f 000f 	mvn.w	r0, #15
   1f9ce:	e7f3      	b.n	1f9b8 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   1f9d0:	e9cd 2300 	strd	r2, r3, [sp]
   1f9d4:	4602      	mov	r2, r0
   1f9d6:	4802      	ldr	r0, [pc, #8]	; (1f9e0 <z_impl_k_sem_take+0x4c>)
   1f9d8:	f000 fa7c 	bl	1fed4 <z_pend_curr>
	return ret;
   1f9dc:	e7ec      	b.n	1f9b8 <z_impl_k_sem_take+0x24>
   1f9de:	bf00      	nop
   1f9e0:	200059fb 	.word	0x200059fb

0001f9e4 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   1f9e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   1f9e6:	4b09      	ldr	r3, [pc, #36]	; (1fa0c <k_sys_work_q_init+0x28>)
   1f9e8:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   1f9ea:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
   1f9ec:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
   1f9ee:	9300      	str	r3, [sp, #0]
   1f9f0:	4907      	ldr	r1, [pc, #28]	; (1fa10 <k_sys_work_q_init+0x2c>)
   1f9f2:	4808      	ldr	r0, [pc, #32]	; (1fa14 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   1f9f4:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   1f9f8:	f04f 33ff 	mov.w	r3, #4294967295
   1f9fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1fa00:	f000 f888 	bl	1fb14 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   1fa04:	4620      	mov	r0, r4
   1fa06:	b004      	add	sp, #16
   1fa08:	bd10      	pop	{r4, pc}
   1fa0a:	bf00      	nop
   1fa0c:	00027b15 	.word	0x00027b15
   1fa10:	2000a580 	.word	0x2000a580
   1fa14:	20002f40 	.word	0x20002f40

0001fa18 <cancel_sync_locked>:
{
   1fa18:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   1fa1a:	68c3      	ldr	r3, [r0, #12]
   1fa1c:	f3c3 0640 	ubfx	r6, r3, #1, #1
	if (ret) {
   1fa20:	079b      	lsls	r3, r3, #30
{
   1fa22:	4605      	mov	r5, r0
   1fa24:	460c      	mov	r4, r1
	if (ret) {
   1fa26:	d50d      	bpl.n	1fa44 <cancel_sync_locked+0x2c>
	return z_impl_k_sem_init(sem, initial_count, limit);
   1fa28:	2201      	movs	r2, #1
   1fa2a:	2100      	movs	r1, #0
   1fa2c:	f104 0008 	add.w	r0, r4, #8
   1fa30:	f004 ff2f 	bl	24892 <z_impl_k_sem_init>
	parent->next = child;
   1fa34:	2300      	movs	r3, #0
   1fa36:	6023      	str	r3, [r4, #0]
	return list->tail;
   1fa38:	4b05      	ldr	r3, [pc, #20]	; (1fa50 <cancel_sync_locked+0x38>)
	canceler->work = work;
   1fa3a:	6065      	str	r5, [r4, #4]
   1fa3c:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   1fa3e:	b91a      	cbnz	r2, 1fa48 <cancel_sync_locked+0x30>
	list->head = node;
   1fa40:	e9c3 4400 	strd	r4, r4, [r3]
}
   1fa44:	4630      	mov	r0, r6
   1fa46:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   1fa48:	6014      	str	r4, [r2, #0]
	list->tail = node;
   1fa4a:	605c      	str	r4, [r3, #4]
}
   1fa4c:	e7fa      	b.n	1fa44 <cancel_sync_locked+0x2c>
   1fa4e:	bf00      	nop
   1fa50:	20005344 	.word	0x20005344

0001fa54 <submit_to_queue_locked>:
{
   1fa54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
   1fa56:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1fa58:	079a      	lsls	r2, r3, #30
{
   1fa5a:	4604      	mov	r4, r0
   1fa5c:	460f      	mov	r7, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1fa5e:	f3c3 0640 	ubfx	r6, r3, #1, #1
   1fa62:	d42c      	bmi.n	1fabe <submit_to_queue_locked+0x6a>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   1fa64:	075b      	lsls	r3, r3, #29
   1fa66:	d41a      	bmi.n	1fa9e <submit_to_queue_locked+0x4a>
		if (*queuep == NULL) {
   1fa68:	680b      	ldr	r3, [r1, #0]
   1fa6a:	b90b      	cbnz	r3, 1fa70 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   1fa6c:	6883      	ldr	r3, [r0, #8]
   1fa6e:	600b      	str	r3, [r1, #0]
	return (*flagp & BIT(bit)) != 0U;
   1fa70:	68e3      	ldr	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   1fa72:	07dd      	lsls	r5, r3, #31
			*queuep = work->queue;
   1fa74:	bf44      	itt	mi
   1fa76:	68a3      	ldrmi	r3, [r4, #8]
   1fa78:	603b      	strmi	r3, [r7, #0]
		int rc = queue_submit_locked(*queuep, work);
   1fa7a:	683d      	ldr	r5, [r7, #0]
			ret = 2;
   1fa7c:	bf4c      	ite	mi
   1fa7e:	2602      	movmi	r6, #2
		ret = 1;
   1fa80:	2601      	movpl	r6, #1
	if (queue == NULL) {
   1fa82:	2d00      	cmp	r5, #0
   1fa84:	d03a      	beq.n	1fafc <submit_to_queue_locked+0xa8>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   1fa86:	4b1f      	ldr	r3, [pc, #124]	; (1fb04 <submit_to_queue_locked+0xb0>)
   1fa88:	689b      	ldr	r3, [r3, #8]
   1fa8a:	42ab      	cmp	r3, r5
   1fa8c:	d00a      	beq.n	1faa4 <submit_to_queue_locked+0x50>
	return (*flagp & BIT(bit)) != 0U;
   1fa8e:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   1fa92:	07d8      	lsls	r0, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   1fa94:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   1fa98:	d414      	bmi.n	1fac4 <submit_to_queue_locked+0x70>
		ret = -EBUSY;
   1fa9a:	f06f 0612 	mvn.w	r6, #18
		*queuep = NULL;
   1fa9e:	2300      	movs	r3, #0
   1faa0:	603b      	str	r3, [r7, #0]
	return ret;
   1faa2:	e025      	b.n	1faf0 <submit_to_queue_locked+0x9c>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   1faa4:	f004 fe46 	bl	24734 <k_is_in_isr>
   1faa8:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
   1faac:	2800      	cmp	r0, #0
   1faae:	d1f0      	bne.n	1fa92 <submit_to_queue_locked+0x3e>
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   1fab0:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   1fab2:	f3c3 02c0 	ubfx	r2, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   1fab6:	d5f0      	bpl.n	1fa9a <submit_to_queue_locked+0x46>
	} else if (plugged && !draining) {
   1fab8:	b152      	cbz	r2, 1fad0 <submit_to_queue_locked+0x7c>
   1faba:	075b      	lsls	r3, r3, #29
   1fabc:	d408      	bmi.n	1fad0 <submit_to_queue_locked+0x7c>
		ret = -EBUSY;
   1fabe:	f06f 060f 	mvn.w	r6, #15
   1fac2:	e7ec      	b.n	1fa9e <submit_to_queue_locked+0x4a>
	} else if (draining && !chained) {
   1fac4:	2a00      	cmp	r2, #0
   1fac6:	d1fa      	bne.n	1fabe <submit_to_queue_locked+0x6a>
	return (*flagp & BIT(bit)) != 0U;
   1fac8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
	} else if (plugged && !draining) {
   1facc:	2b00      	cmp	r3, #0
   1face:	d1f6      	bne.n	1fabe <submit_to_queue_locked+0x6a>
	parent->next = child;
   1fad0:	2300      	movs	r3, #0
   1fad2:	6023      	str	r3, [r4, #0]
	return list->tail;
   1fad4:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
Z_GENLIST_APPEND(slist, snode)
   1fad8:	b963      	cbnz	r3, 1faf4 <submit_to_queue_locked+0xa0>
	list->head = node;
   1fada:	e9c5 4432 	strd	r4, r4, [r5, #200]	; 0xc8
		(void)notify_queue_locked(queue);
   1fade:	4628      	mov	r0, r5
   1fae0:	f004 ff00 	bl	248e4 <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
   1fae4:	68e3      	ldr	r3, [r4, #12]
   1fae6:	f043 0304 	orr.w	r3, r3, #4
   1faea:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   1faec:	683b      	ldr	r3, [r7, #0]
   1faee:	60a3      	str	r3, [r4, #8]
}
   1faf0:	4630      	mov	r0, r6
   1faf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   1faf4:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1faf6:	f8c5 40cc 	str.w	r4, [r5, #204]	; 0xcc
}
   1fafa:	e7f0      	b.n	1fade <submit_to_queue_locked+0x8a>
		return -EINVAL;
   1fafc:	f06f 0615 	mvn.w	r6, #21
   1fb00:	e7cd      	b.n	1fa9e <submit_to_queue_locked+0x4a>
   1fb02:	bf00      	nop
   1fb04:	20005314 	.word	0x20005314

0001fb08 <k_work_submit>:
{
   1fb08:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   1fb0a:	4801      	ldr	r0, [pc, #4]	; (1fb10 <k_work_submit+0x8>)
   1fb0c:	f004 bf70 	b.w	249f0 <k_work_submit_to_queue>
   1fb10:	20002f40 	.word	0x20002f40

0001fb14 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
   1fb14:	b5f0      	push	{r4, r5, r6, r7, lr}
   1fb16:	b089      	sub	sp, #36	; 0x24
   1fb18:	4604      	mov	r4, r0
	list->head = NULL;
   1fb1a:	2000      	movs	r0, #0
	list->tail = NULL;
   1fb1c:	e9c4 0032 	strd	r0, r0, [r4, #200]	; 0xc8
   1fb20:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   1fb22:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
	list->tail = (sys_dnode_t *)list;
   1fb26:	e9c4 0034 	strd	r0, r0, [r4, #208]	; 0xd0
   1fb2a:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
   1fb2e:	e9c4 0036 	strd	r0, r0, [r4, #216]	; 0xd8

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
   1fb32:	b31d      	cbz	r5, 1fb7c <k_work_queue_start+0x68>
   1fb34:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   1fb36:	2800      	cmp	r0, #0
   1fb38:	f240 1001 	movw	r0, #257	; 0x101
   1fb3c:	bf08      	it	eq
   1fb3e:	2001      	moveq	r0, #1
	*flagp = flags;
   1fb40:	f8c4 00e0 	str.w	r0, [r4, #224]	; 0xe0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1fb44:	2000      	movs	r0, #0
   1fb46:	f04f 36ff 	mov.w	r6, #4294967295
   1fb4a:	f04f 37ff 	mov.w	r7, #4294967295
   1fb4e:	e9cd 3003 	strd	r3, r0, [sp, #12]
   1fb52:	e9cd 0001 	strd	r0, r0, [sp, #4]
   1fb56:	e9cd 6706 	strd	r6, r7, [sp, #24]
   1fb5a:	4b09      	ldr	r3, [pc, #36]	; (1fb80 <k_work_queue_start+0x6c>)
   1fb5c:	9400      	str	r4, [sp, #0]
   1fb5e:	4620      	mov	r0, r4
   1fb60:	f7ff fd64 	bl	1f62c <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
   1fb64:	b125      	cbz	r5, 1fb70 <k_work_queue_start+0x5c>
   1fb66:	6829      	ldr	r1, [r5, #0]
   1fb68:	b111      	cbz	r1, 1fb70 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
   1fb6a:	4620      	mov	r0, r4
   1fb6c:	f004 fde8 	bl	24740 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   1fb70:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
   1fb72:	b009      	add	sp, #36	; 0x24
   1fb74:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   1fb78:	f004 bde7 	b.w	2474a <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   1fb7c:	2001      	movs	r0, #1
   1fb7e:	e7df      	b.n	1fb40 <k_work_queue_start+0x2c>
   1fb80:	000135b1 	.word	0x000135b1

0001fb84 <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   1fb84:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1fb86:	9001      	str	r0, [sp, #4]
   1fb88:	4608      	mov	r0, r1
	__asm__ volatile(
   1fb8a:	f04f 0140 	mov.w	r1, #64	; 0x40
   1fb8e:	f3ef 8411 	mrs	r4, BASEPRI
   1fb92:	f381 8812 	msr	BASEPRI_MAX, r1
   1fb96:	f3bf 8f6f 	isb	sy
	return *flagp;
   1fb9a:	68c1      	ldr	r1, [r0, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   1fb9c:	f011 0f0e 	tst.w	r1, #14
   1fba0:	d116      	bne.n	1fbd0 <k_work_schedule_for_queue+0x4c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1fba2:	ea53 0502 	orrs.w	r5, r3, r2
   1fba6:	d108      	bne.n	1fbba <k_work_schedule_for_queue+0x36>
		return submit_to_queue_locked(work, queuep);
   1fba8:	a901      	add	r1, sp, #4
   1fbaa:	f7ff ff53 	bl	1fa54 <submit_to_queue_locked>
	__asm__ volatile(
   1fbae:	f384 8811 	msr	BASEPRI, r4
   1fbb2:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   1fbb6:	b003      	add	sp, #12
   1fbb8:	bd30      	pop	{r4, r5, pc}
	*flagp |= BIT(bit);
   1fbba:	f041 0108 	orr.w	r1, r1, #8
   1fbbe:	60c1      	str	r1, [r0, #12]
	dwork->queue = *queuep;
   1fbc0:	9901      	ldr	r1, [sp, #4]
   1fbc2:	6281      	str	r1, [r0, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   1fbc4:	3010      	adds	r0, #16
   1fbc6:	4903      	ldr	r1, [pc, #12]	; (1fbd4 <k_work_schedule_for_queue+0x50>)
   1fbc8:	f000 fc02 	bl	203d0 <z_add_timeout>
	return ret;
   1fbcc:	2001      	movs	r0, #1
   1fbce:	e7ee      	b.n	1fbae <k_work_schedule_for_queue+0x2a>
	int ret = 0;
   1fbd0:	2000      	movs	r0, #0
   1fbd2:	e7ec      	b.n	1fbae <k_work_schedule_for_queue+0x2a>
   1fbd4:	00024959 	.word	0x00024959

0001fbd8 <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   1fbd8:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   1fbda:	4801      	ldr	r0, [pc, #4]	; (1fbe0 <k_work_schedule+0x8>)
   1fbdc:	f7ff bfd2 	b.w	1fb84 <k_work_schedule_for_queue>
   1fbe0:	20002f40 	.word	0x20002f40

0001fbe4 <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   1fbe4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1fbe6:	460c      	mov	r4, r1
   1fbe8:	9001      	str	r0, [sp, #4]
   1fbea:	4616      	mov	r6, r2
   1fbec:	461d      	mov	r5, r3
	__asm__ volatile(
   1fbee:	f04f 0340 	mov.w	r3, #64	; 0x40
   1fbf2:	f3ef 8711 	mrs	r7, BASEPRI
   1fbf6:	f383 8812 	msr	BASEPRI_MAX, r3
   1fbfa:	f3bf 8f6f 	isb	sy

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   1fbfe:	4608      	mov	r0, r1
   1fc00:	f004 fe62 	bl	248c8 <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1fc04:	ea55 0306 	orrs.w	r3, r5, r6
   1fc08:	d109      	bne.n	1fc1e <k_work_reschedule_for_queue+0x3a>
		return submit_to_queue_locked(work, queuep);
   1fc0a:	a901      	add	r1, sp, #4
   1fc0c:	4620      	mov	r0, r4
   1fc0e:	f7ff ff21 	bl	1fa54 <submit_to_queue_locked>
	__asm__ volatile(
   1fc12:	f387 8811 	msr	BASEPRI, r7
   1fc16:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   1fc1a:	b003      	add	sp, #12
   1fc1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   1fc1e:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   1fc20:	4906      	ldr	r1, [pc, #24]	; (1fc3c <k_work_reschedule_for_queue+0x58>)
	*flagp |= BIT(bit);
   1fc22:	f043 0308 	orr.w	r3, r3, #8
   1fc26:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   1fc28:	9b01      	ldr	r3, [sp, #4]
   1fc2a:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   1fc2c:	f104 0010 	add.w	r0, r4, #16
   1fc30:	4632      	mov	r2, r6
   1fc32:	462b      	mov	r3, r5
   1fc34:	f000 fbcc 	bl	203d0 <z_add_timeout>
	return ret;
   1fc38:	2001      	movs	r0, #1
   1fc3a:	e7ea      	b.n	1fc12 <k_work_reschedule_for_queue+0x2e>
   1fc3c:	00024959 	.word	0x00024959

0001fc40 <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   1fc40:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   1fc42:	4801      	ldr	r0, [pc, #4]	; (1fc48 <k_work_reschedule+0x8>)
   1fc44:	f7ff bfce 	b.w	1fbe4 <k_work_reschedule_for_queue>
   1fc48:	20002f40 	.word	0x20002f40

0001fc4c <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
   1fc4c:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
   1fc4e:	4d07      	ldr	r5, [pc, #28]	; (1fc6c <z_reset_time_slice+0x20>)
   1fc50:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
   1fc52:	b154      	cbz	r4, 1fc6a <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
   1fc54:	f7fd fab6 	bl	1d1c4 <sys_clock_elapsed>
   1fc58:	4b05      	ldr	r3, [pc, #20]	; (1fc70 <z_reset_time_slice+0x24>)
   1fc5a:	4404      	add	r4, r0
   1fc5c:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
   1fc5e:	6828      	ldr	r0, [r5, #0]
   1fc60:	2100      	movs	r1, #0
	}
}
   1fc62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
   1fc66:	f005 b868 	b.w	24d3a <z_set_timeout_expiry>
}
   1fc6a:	bd38      	pop	{r3, r4, r5, pc}
   1fc6c:	20005354 	.word	0x20005354
   1fc70:	20005314 	.word	0x20005314

0001fc74 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
   1fc74:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   1fc76:	4d0d      	ldr	r5, [pc, #52]	; (1fcac <update_cache+0x38>)
   1fc78:	462b      	mov	r3, r5
   1fc7a:	f853 4f24 	ldr.w	r4, [r3, #36]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1fc7e:	429c      	cmp	r4, r3
   1fc80:	d000      	beq.n	1fc84 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   1fc82:	b904      	cbnz	r4, 1fc86 <update_cache+0x12>
   1fc84:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
   1fc86:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
   1fc88:	b938      	cbnz	r0, 1fc9a <update_cache+0x26>
	if (z_is_thread_prevented_from_running(_current)) {
   1fc8a:	7b5a      	ldrb	r2, [r3, #13]
   1fc8c:	06d2      	lsls	r2, r2, #27
   1fc8e:	d104      	bne.n	1fc9a <update_cache+0x26>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   1fc90:	69a2      	ldr	r2, [r4, #24]
   1fc92:	b912      	cbnz	r2, 1fc9a <update_cache+0x26>
	if (is_preempt(_current) || is_metairq(thread)) {
   1fc94:	89da      	ldrh	r2, [r3, #14]
   1fc96:	2a7f      	cmp	r2, #127	; 0x7f
   1fc98:	d805      	bhi.n	1fca6 <update_cache+0x32>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
   1fc9a:	429c      	cmp	r4, r3
   1fc9c:	d002      	beq.n	1fca4 <update_cache+0x30>
			z_reset_time_slice(thread);
   1fc9e:	4620      	mov	r0, r4
   1fca0:	f7ff ffd4 	bl	1fc4c <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
   1fca4:	4623      	mov	r3, r4
   1fca6:	622b      	str	r3, [r5, #32]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
   1fca8:	bd38      	pop	{r3, r4, r5, pc}
   1fcaa:	bf00      	nop
   1fcac:	20005314 	.word	0x20005314

0001fcb0 <move_thread_to_end_of_prio_q>:
{
   1fcb0:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   1fcb2:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   1fcb6:	7b43      	ldrb	r3, [r0, #13]
   1fcb8:	2a00      	cmp	r2, #0
{
   1fcba:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   1fcbc:	da04      	bge.n	1fcc8 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1fcbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1fcc2:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
   1fcc4:	f004 fefe 	bl	24ac4 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   1fcc8:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
   1fcca:	4a15      	ldr	r2, [pc, #84]	; (1fd20 <move_thread_to_end_of_prio_q+0x70>)
   1fccc:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1fcd0:	4610      	mov	r0, r2
   1fcd2:	734b      	strb	r3, [r1, #13]
   1fcd4:	f850 3f24 	ldr.w	r3, [r0, #36]!
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   1fcd8:	6a94      	ldr	r4, [r2, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1fcda:	4283      	cmp	r3, r0
   1fcdc:	bf08      	it	eq
   1fcde:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1fce0:	b923      	cbnz	r3, 1fcec <move_thread_to_end_of_prio_q+0x3c>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
   1fce2:	e9c1 0400 	strd	r0, r4, [r1]

	tail->next = node;
   1fce6:	6021      	str	r1, [r4, #0]
	list->tail = node;
   1fce8:	6291      	str	r1, [r2, #40]	; 0x28
}
   1fcea:	e00c      	b.n	1fd06 <move_thread_to_end_of_prio_q+0x56>
	int32_t b1 = thread_1->base.prio;
   1fcec:	f991 500e 	ldrsb.w	r5, [r1, #14]
	int32_t b2 = thread_2->base.prio;
   1fcf0:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   1fcf4:	42b5      	cmp	r5, r6
   1fcf6:	d00e      	beq.n	1fd16 <move_thread_to_end_of_prio_q+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
   1fcf8:	42ae      	cmp	r6, r5
   1fcfa:	dd0c      	ble.n	1fd16 <move_thread_to_end_of_prio_q+0x66>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   1fcfc:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
   1fcfe:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
   1fd02:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   1fd04:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
   1fd06:	6890      	ldr	r0, [r2, #8]
   1fd08:	1a43      	subs	r3, r0, r1
   1fd0a:	4258      	negs	r0, r3
}
   1fd0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   1fd10:	4158      	adcs	r0, r3
   1fd12:	f7ff bfaf 	b.w	1fc74 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   1fd16:	429c      	cmp	r4, r3
   1fd18:	d0e3      	beq.n	1fce2 <move_thread_to_end_of_prio_q+0x32>
   1fd1a:	681b      	ldr	r3, [r3, #0]
   1fd1c:	e7e0      	b.n	1fce0 <move_thread_to_end_of_prio_q+0x30>
   1fd1e:	bf00      	nop
   1fd20:	20005314 	.word	0x20005314

0001fd24 <ready_thread>:
{
   1fd24:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   1fd26:	f990 300d 	ldrsb.w	r3, [r0, #13]
   1fd2a:	7b42      	ldrb	r2, [r0, #13]
   1fd2c:	2b00      	cmp	r3, #0
   1fd2e:	db29      	blt.n	1fd84 <ready_thread+0x60>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1fd30:	06d3      	lsls	r3, r2, #27
   1fd32:	d127      	bne.n	1fd84 <ready_thread+0x60>
	return node->next != NULL;
   1fd34:	6983      	ldr	r3, [r0, #24]
   1fd36:	bb2b      	cbnz	r3, 1fd84 <ready_thread+0x60>
	return list->head == list;
   1fd38:	4913      	ldr	r1, [pc, #76]	; (1fd88 <ready_thread+0x64>)
	thread->base.thread_state |= _THREAD_QUEUED;
   1fd3a:	f062 027f 	orn	r2, r2, #127	; 0x7f
   1fd3e:	7342      	strb	r2, [r0, #13]
   1fd40:	460a      	mov	r2, r1
   1fd42:	f852 4f24 	ldr.w	r4, [r2, #36]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1fd46:	4294      	cmp	r4, r2
   1fd48:	bf18      	it	ne
   1fd4a:	4623      	movne	r3, r4
	return (node == list->tail) ? NULL : node->next;
   1fd4c:	6a8c      	ldr	r4, [r1, #40]	; 0x28
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1fd4e:	b923      	cbnz	r3, 1fd5a <ready_thread+0x36>
	node->prev = tail;
   1fd50:	e9c0 2400 	strd	r2, r4, [r0]
	tail->next = node;
   1fd54:	6020      	str	r0, [r4, #0]
	list->tail = node;
   1fd56:	6288      	str	r0, [r1, #40]	; 0x28
}
   1fd58:	e00c      	b.n	1fd74 <ready_thread+0x50>
	int32_t b1 = thread_1->base.prio;
   1fd5a:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   1fd5e:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   1fd62:	42b5      	cmp	r5, r6
   1fd64:	d00a      	beq.n	1fd7c <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
   1fd66:	42ae      	cmp	r6, r5
   1fd68:	dd08      	ble.n	1fd7c <ready_thread+0x58>
	sys_dnode_t *const prev = successor->prev;
   1fd6a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1fd6c:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   1fd70:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   1fd72:	6058      	str	r0, [r3, #4]
}
   1fd74:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   1fd76:	2000      	movs	r0, #0
   1fd78:	f7ff bf7c 	b.w	1fc74 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   1fd7c:	42a3      	cmp	r3, r4
   1fd7e:	d0e7      	beq.n	1fd50 <ready_thread+0x2c>
   1fd80:	681b      	ldr	r3, [r3, #0]
   1fd82:	e7e4      	b.n	1fd4e <ready_thread+0x2a>
}
   1fd84:	bc70      	pop	{r4, r5, r6}
   1fd86:	4770      	bx	lr
   1fd88:	20005314 	.word	0x20005314

0001fd8c <unready_thread>:
{
   1fd8c:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   1fd8e:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   1fd92:	7b43      	ldrb	r3, [r0, #13]
   1fd94:	2a00      	cmp	r2, #0
{
   1fd96:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   1fd98:	da04      	bge.n	1fda4 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1fd9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1fd9e:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1fda0:	f004 fe90 	bl	24ac4 <sys_dlist_remove>
	update_cache(thread == _current);
   1fda4:	4b04      	ldr	r3, [pc, #16]	; (1fdb8 <unready_thread+0x2c>)
   1fda6:	6898      	ldr	r0, [r3, #8]
   1fda8:	1a43      	subs	r3, r0, r1
   1fdaa:	4258      	negs	r0, r3
   1fdac:	4158      	adcs	r0, r3
}
   1fdae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   1fdb2:	f7ff bf5f 	b.w	1fc74 <update_cache>
   1fdb6:	bf00      	nop
   1fdb8:	20005314 	.word	0x20005314

0001fdbc <pend_locked>:
{
   1fdbc:	b570      	push	{r4, r5, r6, lr}
   1fdbe:	4615      	mov	r5, r2
   1fdc0:	461c      	mov	r4, r3
   1fdc2:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
   1fdc4:	f004 febb 	bl	24b3e <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1fdc8:	f1b4 3fff 	cmp.w	r4, #4294967295
   1fdcc:	bf08      	it	eq
   1fdce:	f1b5 3fff 	cmpeq.w	r5, #4294967295
   1fdd2:	d008      	beq.n	1fde6 <pend_locked+0x2a>
   1fdd4:	462a      	mov	r2, r5
   1fdd6:	4623      	mov	r3, r4
   1fdd8:	f106 0018 	add.w	r0, r6, #24
   1fddc:	4902      	ldr	r1, [pc, #8]	; (1fde8 <pend_locked+0x2c>)
}
   1fdde:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1fde2:	f000 baf5 	b.w	203d0 <z_add_timeout>
   1fde6:	bd70      	pop	{r4, r5, r6, pc}
   1fde8:	00024afb 	.word	0x00024afb

0001fdec <k_sched_time_slice_set>:
{
   1fdec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1fdee:	4604      	mov	r4, r0
   1fdf0:	460d      	mov	r5, r1
	__asm__ volatile(
   1fdf2:	f04f 0340 	mov.w	r3, #64	; 0x40
   1fdf6:	f3ef 8711 	mrs	r7, BASEPRI
   1fdfa:	f383 8812 	msr	BASEPRI_MAX, r3
   1fdfe:	f3bf 8f6f 	isb	sy
			return (uint32_t)((t * to_hz + off) / from_hz);
   1fe02:	2600      	movs	r6, #0
   1fe04:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
   1fe08:	f240 30e7 	movw	r0, #999	; 0x3e7
   1fe0c:	4631      	mov	r1, r6
   1fe0e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1fe12:	2300      	movs	r3, #0
   1fe14:	fbe4 010c 	umlal	r0, r1, r4, ip
   1fe18:	f7e0 fe60 	bl	adc <__aeabi_uldivmod>
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   1fe1c:	42b4      	cmp	r4, r6
   1fe1e:	dd02      	ble.n	1fe26 <k_sched_time_slice_set+0x3a>
			slice_ticks = MAX(2, slice_ticks);
   1fe20:	2802      	cmp	r0, #2
   1fe22:	bfb8      	it	lt
   1fe24:	2002      	movlt	r0, #2
		slice_ticks = k_ms_to_ticks_ceil32(slice);
   1fe26:	4a07      	ldr	r2, [pc, #28]	; (1fe44 <k_sched_time_slice_set+0x58>)
		_current_cpu->slice_ticks = 0;
   1fe28:	4b07      	ldr	r3, [pc, #28]	; (1fe48 <k_sched_time_slice_set+0x5c>)
		slice_ticks = k_ms_to_ticks_ceil32(slice);
   1fe2a:	6010      	str	r0, [r2, #0]
		slice_max_prio = prio;
   1fe2c:	4a07      	ldr	r2, [pc, #28]	; (1fe4c <k_sched_time_slice_set+0x60>)
		z_reset_time_slice(_current);
   1fe2e:	6898      	ldr	r0, [r3, #8]
		_current_cpu->slice_ticks = 0;
   1fe30:	611e      	str	r6, [r3, #16]
		slice_max_prio = prio;
   1fe32:	6015      	str	r5, [r2, #0]
		z_reset_time_slice(_current);
   1fe34:	f7ff ff0a 	bl	1fc4c <z_reset_time_slice>
	__asm__ volatile(
   1fe38:	f387 8811 	msr	BASEPRI, r7
   1fe3c:	f3bf 8f6f 	isb	sy
}
   1fe40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1fe42:	bf00      	nop
   1fe44:	20005354 	.word	0x20005354
   1fe48:	20005314 	.word	0x20005314
   1fe4c:	20005350 	.word	0x20005350

0001fe50 <z_time_slice>:
{
   1fe50:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1fe52:	f04f 0340 	mov.w	r3, #64	; 0x40
   1fe56:	f3ef 8511 	mrs	r5, BASEPRI
   1fe5a:	f383 8812 	msr	BASEPRI_MAX, r3
   1fe5e:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   1fe62:	4b17      	ldr	r3, [pc, #92]	; (1fec0 <z_time_slice+0x70>)
   1fe64:	4a17      	ldr	r2, [pc, #92]	; (1fec4 <z_time_slice+0x74>)
   1fe66:	689c      	ldr	r4, [r3, #8]
   1fe68:	6811      	ldr	r1, [r2, #0]
   1fe6a:	428c      	cmp	r4, r1
   1fe6c:	d107      	bne.n	1fe7e <z_time_slice+0x2e>
	z_reset_time_slice(curr);
   1fe6e:	4620      	mov	r0, r4
   1fe70:	f7ff feec 	bl	1fc4c <z_reset_time_slice>
	__asm__ volatile(
   1fe74:	f385 8811 	msr	BASEPRI, r5
   1fe78:	f3bf 8f6f 	isb	sy
}
   1fe7c:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
   1fe7e:	2100      	movs	r1, #0
   1fe80:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
   1fe82:	4a11      	ldr	r2, [pc, #68]	; (1fec8 <z_time_slice+0x78>)
	if (slice_time(_current) && sliceable(_current)) {
   1fe84:	6812      	ldr	r2, [r2, #0]
   1fe86:	b1c2      	cbz	r2, 1feba <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   1fe88:	89e2      	ldrh	r2, [r4, #14]
   1fe8a:	2a7f      	cmp	r2, #127	; 0x7f
   1fe8c:	d815      	bhi.n	1feba <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
   1fe8e:	7b62      	ldrb	r2, [r4, #13]
   1fe90:	06d2      	lsls	r2, r2, #27
   1fe92:	d112      	bne.n	1feba <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   1fe94:	4a0d      	ldr	r2, [pc, #52]	; (1fecc <z_time_slice+0x7c>)
   1fe96:	f994 100e 	ldrsb.w	r1, [r4, #14]
   1fe9a:	6812      	ldr	r2, [r2, #0]
   1fe9c:	4291      	cmp	r1, r2
   1fe9e:	db0c      	blt.n	1feba <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   1fea0:	4a0b      	ldr	r2, [pc, #44]	; (1fed0 <z_time_slice+0x80>)
   1fea2:	4294      	cmp	r4, r2
   1fea4:	d009      	beq.n	1feba <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
   1fea6:	691a      	ldr	r2, [r3, #16]
   1fea8:	4282      	cmp	r2, r0
   1feaa:	dc03      	bgt.n	1feb4 <z_time_slice+0x64>
		move_thread_to_end_of_prio_q(curr);
   1feac:	4620      	mov	r0, r4
   1feae:	f7ff feff 	bl	1fcb0 <move_thread_to_end_of_prio_q>
   1feb2:	e7dc      	b.n	1fe6e <z_time_slice+0x1e>
			_current_cpu->slice_ticks -= ticks;
   1feb4:	1a12      	subs	r2, r2, r0
		_current_cpu->slice_ticks = 0;
   1feb6:	611a      	str	r2, [r3, #16]
   1feb8:	e7dc      	b.n	1fe74 <z_time_slice+0x24>
   1feba:	2200      	movs	r2, #0
   1febc:	e7fb      	b.n	1feb6 <z_time_slice+0x66>
   1febe:	bf00      	nop
   1fec0:	20005314 	.word	0x20005314
   1fec4:	2000534c 	.word	0x2000534c
   1fec8:	20005354 	.word	0x20005354
   1fecc:	20005350 	.word	0x20005350
   1fed0:	20002db0 	.word	0x20002db0

0001fed4 <z_pend_curr>:
{
   1fed4:	b570      	push	{r4, r5, r6, lr}
	pending_current = _current;
   1fed6:	480c      	ldr	r0, [pc, #48]	; (1ff08 <z_pend_curr+0x34>)
   1fed8:	4d0c      	ldr	r5, [pc, #48]	; (1ff0c <z_pend_curr+0x38>)
   1feda:	6886      	ldr	r6, [r0, #8]
   1fedc:	602e      	str	r6, [r5, #0]
{
   1fede:	460c      	mov	r4, r1
   1fee0:	4611      	mov	r1, r2
   1fee2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
	__asm__ volatile(
   1fee6:	f04f 0640 	mov.w	r6, #64	; 0x40
   1feea:	f3ef 8511 	mrs	r5, BASEPRI
   1feee:	f386 8812 	msr	BASEPRI_MAX, r6
   1fef2:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
   1fef6:	6880      	ldr	r0, [r0, #8]
   1fef8:	f7ff ff60 	bl	1fdbc <pend_locked>
	ret = arch_swap(key);
   1fefc:	4620      	mov	r0, r4
}
   1fefe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1ff02:	f7f6 b97b 	b.w	161fc <arch_swap>
   1ff06:	bf00      	nop
   1ff08:	20005314 	.word	0x20005314
   1ff0c:	2000534c 	.word	0x2000534c

0001ff10 <z_set_prio>:
{
   1ff10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ff12:	4604      	mov	r4, r0
   1ff14:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ff18:	f3ef 8611 	mrs	r6, BASEPRI
   1ff1c:	f383 8812 	msr	BASEPRI_MAX, r3
   1ff20:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
   1ff24:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1ff26:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
   1ff28:	b249      	sxtb	r1, r1
   1ff2a:	d119      	bne.n	1ff60 <z_set_prio+0x50>
	return node->next != NULL;
   1ff2c:	6985      	ldr	r5, [r0, #24]
   1ff2e:	b9bd      	cbnz	r5, 1ff60 <z_set_prio+0x50>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1ff30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1ff34:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1ff36:	f004 fdc5 	bl	24ac4 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   1ff3a:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
   1ff3c:	4a16      	ldr	r2, [pc, #88]	; (1ff98 <z_set_prio+0x88>)
				thread->base.prio = prio;
   1ff3e:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   1ff40:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1ff44:	7343      	strb	r3, [r0, #13]
   1ff46:	4613      	mov	r3, r2
   1ff48:	f853 0f24 	ldr.w	r0, [r3, #36]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1ff4c:	4298      	cmp	r0, r3
   1ff4e:	bf18      	it	ne
   1ff50:	4605      	movne	r5, r0
	return (node == list->tail) ? NULL : node->next;
   1ff52:	6a90      	ldr	r0, [r2, #40]	; 0x28
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1ff54:	b95d      	cbnz	r5, 1ff6e <z_set_prio+0x5e>
	node->prev = tail;
   1ff56:	e9c4 3000 	strd	r3, r0, [r4]
	tail->next = node;
   1ff5a:	6004      	str	r4, [r0, #0]
	list->tail = node;
   1ff5c:	6294      	str	r4, [r2, #40]	; 0x28
}
   1ff5e:	e011      	b.n	1ff84 <z_set_prio+0x74>
			thread->base.prio = prio;
   1ff60:	73a1      	strb	r1, [r4, #14]
   1ff62:	2000      	movs	r0, #0
	__asm__ volatile(
   1ff64:	f386 8811 	msr	BASEPRI, r6
   1ff68:	f3bf 8f6f 	isb	sy
}
   1ff6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int32_t b2 = thread_2->base.prio;
   1ff6e:	f995 700e 	ldrsb.w	r7, [r5, #14]
	if (b1 != b2) {
   1ff72:	42b9      	cmp	r1, r7
   1ff74:	d00b      	beq.n	1ff8e <z_set_prio+0x7e>
		if (z_sched_prio_cmp(thread, t) > 0) {
   1ff76:	428f      	cmp	r7, r1
   1ff78:	dd09      	ble.n	1ff8e <z_set_prio+0x7e>
	sys_dnode_t *const prev = successor->prev;
   1ff7a:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
   1ff7c:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
   1ff80:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   1ff82:	606c      	str	r4, [r5, #4]
			update_cache(1);
   1ff84:	2001      	movs	r0, #1
   1ff86:	f7ff fe75 	bl	1fc74 <update_cache>
   1ff8a:	2001      	movs	r0, #1
   1ff8c:	e7ea      	b.n	1ff64 <z_set_prio+0x54>
	return (node == list->tail) ? NULL : node->next;
   1ff8e:	42a8      	cmp	r0, r5
   1ff90:	d0e1      	beq.n	1ff56 <z_set_prio+0x46>
   1ff92:	682d      	ldr	r5, [r5, #0]
   1ff94:	e7de      	b.n	1ff54 <z_set_prio+0x44>
   1ff96:	bf00      	nop
   1ff98:	20005314 	.word	0x20005314

0001ff9c <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1ff9c:	b949      	cbnz	r1, 1ffb2 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1ff9e:	f3ef 8005 	mrs	r0, IPSR
   1ffa2:	b930      	cbnz	r0, 1ffb2 <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
   1ffa4:	4b05      	ldr	r3, [pc, #20]	; (1ffbc <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
   1ffa6:	6a1a      	ldr	r2, [r3, #32]
   1ffa8:	689b      	ldr	r3, [r3, #8]
   1ffaa:	429a      	cmp	r2, r3
   1ffac:	d001      	beq.n	1ffb2 <z_reschedule+0x16>
   1ffae:	f7f6 b925 	b.w	161fc <arch_swap>
   1ffb2:	f381 8811 	msr	BASEPRI, r1
   1ffb6:	f3bf 8f6f 	isb	sy
}
   1ffba:	4770      	bx	lr
   1ffbc:	20005314 	.word	0x20005314

0001ffc0 <z_sched_start>:
{
   1ffc0:	b510      	push	{r4, lr}
	__asm__ volatile(
   1ffc2:	f04f 0240 	mov.w	r2, #64	; 0x40
   1ffc6:	f3ef 8411 	mrs	r4, BASEPRI
   1ffca:	f382 8812 	msr	BASEPRI_MAX, r2
   1ffce:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   1ffd2:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
   1ffd4:	0751      	lsls	r1, r2, #29
   1ffd6:	d404      	bmi.n	1ffe2 <z_sched_start+0x22>
	__asm__ volatile(
   1ffd8:	f384 8811 	msr	BASEPRI, r4
   1ffdc:	f3bf 8f6f 	isb	sy
}
   1ffe0:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1ffe2:	f022 0204 	bic.w	r2, r2, #4
   1ffe6:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   1ffe8:	f7ff fe9c 	bl	1fd24 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   1ffec:	4621      	mov	r1, r4
   1ffee:	4802      	ldr	r0, [pc, #8]	; (1fff8 <z_sched_start+0x38>)
}
   1fff0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   1fff4:	f7ff bfd2 	b.w	1ff9c <z_reschedule>
   1fff8:	200059fb 	.word	0x200059fb

0001fffc <z_impl_k_thread_suspend>:
{
   1fffc:	b570      	push	{r4, r5, r6, lr}
   1fffe:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   20000:	3018      	adds	r0, #24
   20002:	f004 fe74 	bl	24cee <z_abort_timeout>
	__asm__ volatile(
   20006:	f04f 0340 	mov.w	r3, #64	; 0x40
   2000a:	f3ef 8611 	mrs	r6, BASEPRI
   2000e:	f383 8812 	msr	BASEPRI_MAX, r3
   20012:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   20016:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
   2001a:	7b63      	ldrb	r3, [r4, #13]
   2001c:	2a00      	cmp	r2, #0
   2001e:	da05      	bge.n	2002c <CONFIG_PM_SRAM_SIZE+0x2c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   20020:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   20024:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   20026:	4620      	mov	r0, r4
   20028:	f004 fd4c 	bl	24ac4 <sys_dlist_remove>
		update_cache(thread == _current);
   2002c:	4d0b      	ldr	r5, [pc, #44]	; (2005c <CONFIG_PM_SRAM_SIZE+0x5c>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   2002e:	7b63      	ldrb	r3, [r4, #13]
   20030:	68a8      	ldr	r0, [r5, #8]
   20032:	f043 0310 	orr.w	r3, r3, #16
   20036:	7363      	strb	r3, [r4, #13]
   20038:	1b03      	subs	r3, r0, r4
   2003a:	4258      	negs	r0, r3
   2003c:	4158      	adcs	r0, r3
   2003e:	f7ff fe19 	bl	1fc74 <update_cache>
	__asm__ volatile(
   20042:	f386 8811 	msr	BASEPRI, r6
   20046:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   2004a:	68ab      	ldr	r3, [r5, #8]
   2004c:	42a3      	cmp	r3, r4
   2004e:	d103      	bne.n	20058 <CONFIG_PM_SRAM_SIZE+0x58>
}
   20050:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   20054:	f004 be0e 	b.w	24c74 <z_reschedule_unlocked>
}
   20058:	bd70      	pop	{r4, r5, r6, pc}
   2005a:	bf00      	nop
   2005c:	20005314 	.word	0x20005314

00020060 <k_sched_lock>:
	__asm__ volatile(
   20060:	f04f 0340 	mov.w	r3, #64	; 0x40
   20064:	f3ef 8111 	mrs	r1, BASEPRI
   20068:	f383 8812 	msr	BASEPRI_MAX, r3
   2006c:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   20070:	4b04      	ldr	r3, [pc, #16]	; (20084 <k_sched_lock+0x24>)
   20072:	689a      	ldr	r2, [r3, #8]
   20074:	7bd3      	ldrb	r3, [r2, #15]
   20076:	3b01      	subs	r3, #1
   20078:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   2007a:	f381 8811 	msr	BASEPRI, r1
   2007e:	f3bf 8f6f 	isb	sy
}
   20082:	4770      	bx	lr
   20084:	20005314 	.word	0x20005314

00020088 <k_sched_unlock>:
{
   20088:	b510      	push	{r4, lr}
	__asm__ volatile(
   2008a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2008e:	f3ef 8411 	mrs	r4, BASEPRI
   20092:	f383 8812 	msr	BASEPRI_MAX, r3
   20096:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   2009a:	4b08      	ldr	r3, [pc, #32]	; (200bc <k_sched_unlock+0x34>)
   2009c:	689a      	ldr	r2, [r3, #8]
   2009e:	7bd3      	ldrb	r3, [r2, #15]
   200a0:	3301      	adds	r3, #1
   200a2:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   200a4:	2000      	movs	r0, #0
   200a6:	f7ff fde5 	bl	1fc74 <update_cache>
	__asm__ volatile(
   200aa:	f384 8811 	msr	BASEPRI, r4
   200ae:	f3bf 8f6f 	isb	sy
}
   200b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   200b6:	f004 bddd 	b.w	24c74 <z_reschedule_unlocked>
   200ba:	bf00      	nop
   200bc:	20005314 	.word	0x20005314

000200c0 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   200c0:	4b04      	ldr	r3, [pc, #16]	; (200d4 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   200c2:	2100      	movs	r1, #0
   200c4:	f103 0224 	add.w	r2, r3, #36	; 0x24
	list->tail = (sys_dnode_t *)list;
   200c8:	e9c3 2209 	strd	r2, r2, [r3, #36]	; 0x24
   200cc:	4608      	mov	r0, r1
   200ce:	f7ff be8d 	b.w	1fdec <k_sched_time_slice_set>
   200d2:	bf00      	nop
   200d4:	20005314 	.word	0x20005314

000200d8 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
   200d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   200da:	f04f 0340 	mov.w	r3, #64	; 0x40
   200de:	f3ef 8511 	mrs	r5, BASEPRI
   200e2:	f383 8812 	msr	BASEPRI_MAX, r3
   200e6:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   200ea:	4919      	ldr	r1, [pc, #100]	; (20150 <z_impl_k_yield+0x78>)
   200ec:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   200ee:	7b43      	ldrb	r3, [r0, #13]
   200f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   200f4:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   200f6:	f004 fce5 	bl	24ac4 <sys_dlist_remove>
	}
	queue_thread(_current);
   200fa:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   200fc:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
   200fe:	4608      	mov	r0, r1
   20100:	f062 027f 	orn	r2, r2, #127	; 0x7f
   20104:	735a      	strb	r2, [r3, #13]
   20106:	f850 2f24 	ldr.w	r2, [r0, #36]!
	return (node == list->tail) ? NULL : node->next;
   2010a:	6a8c      	ldr	r4, [r1, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2010c:	4282      	cmp	r2, r0
   2010e:	bf08      	it	eq
   20110:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   20112:	b922      	cbnz	r2, 2011e <z_impl_k_yield+0x46>
	node->prev = tail;
   20114:	e9c3 0400 	strd	r0, r4, [r3]
	tail->next = node;
   20118:	6023      	str	r3, [r4, #0]
	list->tail = node;
   2011a:	628b      	str	r3, [r1, #40]	; 0x28
}
   2011c:	e00c      	b.n	20138 <z_impl_k_yield+0x60>
	int32_t b1 = thread_1->base.prio;
   2011e:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
   20122:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
   20126:	42be      	cmp	r6, r7
   20128:	d00e      	beq.n	20148 <z_impl_k_yield+0x70>
		if (z_sched_prio_cmp(thread, t) > 0) {
   2012a:	42b7      	cmp	r7, r6
   2012c:	dd0c      	ble.n	20148 <z_impl_k_yield+0x70>
	sys_dnode_t *const prev = successor->prev;
   2012e:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   20130:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
   20134:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   20136:	6053      	str	r3, [r2, #4]
	update_cache(1);
   20138:	2001      	movs	r0, #1
   2013a:	f7ff fd9b 	bl	1fc74 <update_cache>
   2013e:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
   20140:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   20144:	f7f6 b85a 	b.w	161fc <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   20148:	42a2      	cmp	r2, r4
   2014a:	d0e3      	beq.n	20114 <z_impl_k_yield+0x3c>
   2014c:	6812      	ldr	r2, [r2, #0]
   2014e:	e7e0      	b.n	20112 <z_impl_k_yield+0x3a>
   20150:	20005314 	.word	0x20005314

00020154 <z_tick_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	LOG_DBG("thread %p for %lu ticks", _current, (unsigned long)ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   20154:	ea50 0301 	orrs.w	r3, r0, r1
{
   20158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2015c:	4605      	mov	r5, r0
   2015e:	460e      	mov	r6, r1
	if (ticks == 0) {
   20160:	d103      	bne.n	2016a <z_tick_sleep+0x16>
	z_impl_k_yield();
   20162:	f7ff ffb9 	bl	200d8 <z_impl_k_yield>
		k_yield();
		return 0;
   20166:	2000      	movs	r0, #0
   20168:	e02c      	b.n	201c4 <z_tick_sleep+0x70>
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
	if (Z_TICK_ABS(ticks) <= 0) {
   2016a:	1c83      	adds	r3, r0, #2
   2016c:	f171 33ff 	sbcs.w	r3, r1, #4294967295
   20170:	db2a      	blt.n	201c8 <z_tick_sleep+0x74>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   20172:	f004 fdfe 	bl	24d72 <sys_clock_tick_get_32>
   20176:	182c      	adds	r4, r5, r0
   20178:	f04f 0340 	mov.w	r3, #64	; 0x40
   2017c:	f3ef 8811 	mrs	r8, BASEPRI
   20180:	f383 8812 	msr	BASEPRI_MAX, r3
   20184:	f3bf 8f6f 	isb	sy
	}

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
   20188:	4f11      	ldr	r7, [pc, #68]	; (201d0 <z_tick_sleep+0x7c>)
   2018a:	4b12      	ldr	r3, [pc, #72]	; (201d4 <z_tick_sleep+0x80>)
   2018c:	68b8      	ldr	r0, [r7, #8]
   2018e:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
   20190:	f7ff fdfc 	bl	1fd8c <unready_thread>
	z_add_thread_timeout(_current, timeout);
   20194:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   20196:	4910      	ldr	r1, [pc, #64]	; (201d8 <z_tick_sleep+0x84>)
   20198:	462a      	mov	r2, r5
   2019a:	4633      	mov	r3, r6
   2019c:	3018      	adds	r0, #24
   2019e:	f000 f917 	bl	203d0 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   201a2:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
   201a4:	7b53      	ldrb	r3, [r2, #13]
   201a6:	f043 0310 	orr.w	r3, r3, #16
   201aa:	7353      	strb	r3, [r2, #13]
   201ac:	4640      	mov	r0, r8
   201ae:	f7f6 f825 	bl	161fc <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   201b2:	f004 fdde 	bl	24d72 <sys_clock_tick_get_32>
   201b6:	1a20      	subs	r0, r4, r0
   201b8:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   201bc:	2801      	cmp	r0, #1
   201be:	f173 0300 	sbcs.w	r3, r3, #0
   201c2:	dbd0      	blt.n	20166 <z_tick_sleep+0x12>
		return ticks;
	}
#endif

	return 0;
}
   201c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   201c8:	f06f 0401 	mvn.w	r4, #1
   201cc:	1a24      	subs	r4, r4, r0
   201ce:	e7d3      	b.n	20178 <z_tick_sleep+0x24>
   201d0:	20005314 	.word	0x20005314
   201d4:	2000534c 	.word	0x2000534c
   201d8:	00024afb 	.word	0x00024afb

000201dc <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   201dc:	f1b1 3fff 	cmp.w	r1, #4294967295
   201e0:	bf08      	it	eq
   201e2:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   201e6:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   201e8:	d106      	bne.n	201f8 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
   201ea:	4b08      	ldr	r3, [pc, #32]	; (2020c <z_impl_k_sleep+0x30>)
   201ec:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   201ee:	f7ff ff05 	bl	1fffc <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   201f2:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   201f6:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   201f8:	f7ff ffac 	bl	20154 <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
   201fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   20200:	fb80 0303 	smull	r0, r3, r0, r3
   20204:	0bc0      	lsrs	r0, r0, #15
   20206:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   2020a:	e7f4      	b.n	201f6 <z_impl_k_sleep+0x1a>
   2020c:	20005314 	.word	0x20005314

00020210 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   20210:	4b01      	ldr	r3, [pc, #4]	; (20218 <z_impl_z_current_get+0x8>)
   20212:	6898      	ldr	r0, [r3, #8]
   20214:	4770      	bx	lr
   20216:	bf00      	nop
   20218:	20005314 	.word	0x20005314

0002021c <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   2021c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20220:	4604      	mov	r4, r0
   20222:	f04f 0340 	mov.w	r3, #64	; 0x40
   20226:	f3ef 8611 	mrs	r6, BASEPRI
   2022a:	f383 8812 	msr	BASEPRI_MAX, r3
   2022e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
   20232:	7b03      	ldrb	r3, [r0, #12]
   20234:	07d9      	lsls	r1, r3, #31
   20236:	d50b      	bpl.n	20250 <z_thread_abort+0x34>
	__asm__ volatile(
   20238:	f386 8811 	msr	BASEPRI, r6
   2023c:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
   20240:	4040      	eors	r0, r0
   20242:	f380 8811 	msr	BASEPRI, r0
   20246:	f04f 0004 	mov.w	r0, #4
   2024a:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   2024c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   20250:	7b43      	ldrb	r3, [r0, #13]
   20252:	071a      	lsls	r2, r3, #28
   20254:	d504      	bpl.n	20260 <z_thread_abort+0x44>
   20256:	f386 8811 	msr	BASEPRI, r6
   2025a:	f3bf 8f6f 	isb	sy
   2025e:	e7f5      	b.n	2024c <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   20260:	f023 0220 	bic.w	r2, r3, #32
   20264:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   20268:	09d2      	lsrs	r2, r2, #7
   2026a:	d120      	bne.n	202ae <z_thread_abort+0x92>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   2026c:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
   2026e:	68a3      	ldr	r3, [r4, #8]
   20270:	b113      	cbz	r3, 20278 <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
   20272:	4620      	mov	r0, r4
   20274:	f004 fc2e 	bl	24ad4 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   20278:	f104 0018 	add.w	r0, r4, #24
   2027c:	f004 fd37 	bl	24cee <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   20280:	f104 0758 	add.w	r7, r4, #88	; 0x58
   20284:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
   20288:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2028a:	42bd      	cmp	r5, r7
   2028c:	d000      	beq.n	20290 <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   2028e:	b9b5      	cbnz	r5, 202be <z_thread_abort+0xa2>
		update_cache(1);
   20290:	2001      	movs	r0, #1
   20292:	f7ff fcef 	bl	1fc74 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   20296:	4b10      	ldr	r3, [pc, #64]	; (202d8 <z_thread_abort+0xbc>)
   20298:	689b      	ldr	r3, [r3, #8]
   2029a:	42a3      	cmp	r3, r4
   2029c:	d1db      	bne.n	20256 <z_thread_abort+0x3a>
   2029e:	f3ef 8305 	mrs	r3, IPSR
   202a2:	2b00      	cmp	r3, #0
   202a4:	d1d7      	bne.n	20256 <z_thread_abort+0x3a>
   202a6:	4630      	mov	r0, r6
   202a8:	f7f5 ffa8 	bl	161fc <arch_swap>
	return ret;
   202ac:	e7d3      	b.n	20256 <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   202ae:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   202b2:	f043 0308 	orr.w	r3, r3, #8
   202b6:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   202b8:	f004 fc04 	bl	24ac4 <sys_dlist_remove>
}
   202bc:	e7d7      	b.n	2026e <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
   202be:	4628      	mov	r0, r5
   202c0:	f004 fc08 	bl	24ad4 <unpend_thread_no_timeout>
   202c4:	f105 0018 	add.w	r0, r5, #24
   202c8:	f004 fd11 	bl	24cee <z_abort_timeout>
   202cc:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
		ready_thread(thread);
   202d0:	4628      	mov	r0, r5
   202d2:	f7ff fd27 	bl	1fd24 <ready_thread>
   202d6:	e7d7      	b.n	20288 <z_thread_abort+0x6c>
   202d8:	20005314 	.word	0x20005314

000202dc <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   202dc:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   202de:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   202e2:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   202e4:	e9cd 6700 	strd	r6, r7, [sp]
   202e8:	f7ff fdf4 	bl	1fed4 <z_pend_curr>

	if (data != NULL) {
   202ec:	b11c      	cbz	r4, 202f6 <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   202ee:	4b03      	ldr	r3, [pc, #12]	; (202fc <z_sched_wait+0x20>)
   202f0:	689b      	ldr	r3, [r3, #8]
   202f2:	695b      	ldr	r3, [r3, #20]
   202f4:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   202f6:	b002      	add	sp, #8
   202f8:	bdd0      	pop	{r4, r6, r7, pc}
   202fa:	bf00      	nop
   202fc:	20005314 	.word	0x20005314

00020300 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   20300:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
   20302:	4806      	ldr	r0, [pc, #24]	; (2031c <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
   20304:	4a06      	ldr	r2, [pc, #24]	; (20320 <z_data_copy+0x20>)
   20306:	4907      	ldr	r1, [pc, #28]	; (20324 <z_data_copy+0x24>)
   20308:	1a12      	subs	r2, r2, r0
   2030a:	f004 f95f 	bl	245cc <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   2030e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
   20312:	4a05      	ldr	r2, [pc, #20]	; (20328 <z_data_copy+0x28>)
   20314:	4905      	ldr	r1, [pc, #20]	; (2032c <z_data_copy+0x2c>)
   20316:	4806      	ldr	r0, [pc, #24]	; (20330 <z_data_copy+0x30>)
   20318:	f004 b958 	b.w	245cc <z_early_memcpy>
   2031c:	20000000 	.word	0x20000000
   20320:	20000994 	.word	0x20000994
   20324:	00027c50 	.word	0x00027c50
   20328:	00000000 	.word	0x00000000
   2032c:	00027c50 	.word	0x00027c50
   20330:	20000000 	.word	0x20000000

00020334 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   20334:	4b03      	ldr	r3, [pc, #12]	; (20344 <elapsed+0x10>)
   20336:	681b      	ldr	r3, [r3, #0]
   20338:	b90b      	cbnz	r3, 2033e <elapsed+0xa>
   2033a:	f7fc bf43 	b.w	1d1c4 <sys_clock_elapsed>
}
   2033e:	2000      	movs	r0, #0
   20340:	4770      	bx	lr
   20342:	bf00      	nop
   20344:	20005358 	.word	0x20005358

00020348 <next_timeout>:

static int32_t next_timeout(void)
{
   20348:	b510      	push	{r4, lr}
	return list->head == list;
   2034a:	4b11      	ldr	r3, [pc, #68]	; (20390 <next_timeout+0x48>)
   2034c:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2034e:	429c      	cmp	r4, r3
   20350:	d10a      	bne.n	20368 <next_timeout+0x20>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   20352:	f7ff ffef 	bl	20334 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
   20356:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   2035a:	4b0e      	ldr	r3, [pc, #56]	; (20394 <next_timeout+0x4c>)
   2035c:	691b      	ldr	r3, [r3, #16]
   2035e:	b113      	cbz	r3, 20366 <next_timeout+0x1e>
   20360:	4298      	cmp	r0, r3
   20362:	bfa8      	it	ge
   20364:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   20366:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
   20368:	f7ff ffe4 	bl	20334 <elapsed>
	if ((to == NULL) ||
   2036c:	2c00      	cmp	r4, #0
   2036e:	d0f2      	beq.n	20356 <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   20370:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   20374:	1a1b      	subs	r3, r3, r0
   20376:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
   2037a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   2037e:	f172 0100 	sbcs.w	r1, r2, #0
   20382:	dae8      	bge.n	20356 <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
   20384:	2a00      	cmp	r2, #0
   20386:	bfac      	ite	ge
   20388:	4618      	movge	r0, r3
   2038a:	2000      	movlt	r0, #0
   2038c:	e7e5      	b.n	2035a <next_timeout+0x12>
   2038e:	bf00      	nop
   20390:	200006b0 	.word	0x200006b0
   20394:	20005314 	.word	0x20005314

00020398 <remove_timeout>:
{
   20398:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2039a:	b170      	cbz	r0, 203ba <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   2039c:	4b0b      	ldr	r3, [pc, #44]	; (203cc <remove_timeout+0x34>)
   2039e:	685b      	ldr	r3, [r3, #4]
   203a0:	4298      	cmp	r0, r3
   203a2:	d00a      	beq.n	203ba <remove_timeout+0x22>
   203a4:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
   203a6:	b143      	cbz	r3, 203ba <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   203a8:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   203ac:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   203b0:	1912      	adds	r2, r2, r4
   203b2:	eb41 0105 	adc.w	r1, r1, r5
   203b6:	e9c3 2104 	strd	r2, r1, [r3, #16]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
   203ba:	e9d0 3200 	ldrd	r3, r2, [r0]

	prev->next = next;
   203be:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   203c0:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   203c2:	2300      	movs	r3, #0
	node->prev = NULL;
   203c4:	e9c0 3300 	strd	r3, r3, [r0]
}
   203c8:	bd30      	pop	{r4, r5, pc}
   203ca:	bf00      	nop
   203cc:	200006b0 	.word	0x200006b0

000203d0 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   203d0:	f1b3 3fff 	cmp.w	r3, #4294967295
   203d4:	bf08      	it	eq
   203d6:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   203da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   203dc:	4604      	mov	r4, r0
   203de:	461d      	mov	r5, r3
   203e0:	4616      	mov	r6, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   203e2:	d061      	beq.n	204a8 <z_add_timeout+0xd8>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   203e4:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
   203e6:	f04f 0340 	mov.w	r3, #64	; 0x40
   203ea:	f3ef 8711 	mrs	r7, BASEPRI
   203ee:	f383 8812 	msr	BASEPRI_MAX, r3
   203f2:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   203f6:	3201      	adds	r2, #1
   203f8:	f175 33ff 	sbcs.w	r3, r5, #4294967295
   203fc:	da24      	bge.n	20448 <z_add_timeout+0x78>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   203fe:	4930      	ldr	r1, [pc, #192]	; (204c0 <z_add_timeout+0xf0>)
   20400:	e9d1 2000 	ldrd	r2, r0, [r1]
   20404:	f06f 0301 	mvn.w	r3, #1
   20408:	1a9b      	subs	r3, r3, r2
   2040a:	f04f 32ff 	mov.w	r2, #4294967295
   2040e:	eb62 0000 	sbc.w	r0, r2, r0
   20412:	1b9e      	subs	r6, r3, r6
   20414:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
   20418:	2e01      	cmp	r6, #1
   2041a:	f170 0300 	sbcs.w	r3, r0, #0
   2041e:	da01      	bge.n	20424 <z_add_timeout+0x54>
   20420:	2601      	movs	r6, #1
   20422:	2000      	movs	r0, #0
   20424:	e9c4 6004 	strd	r6, r0, [r4, #16]
	return list->head == list;
   20428:	4e26      	ldr	r6, [pc, #152]	; (204c4 <z_add_timeout+0xf4>)
   2042a:	f8d6 c000 	ldr.w	ip, [r6]
	return (node == list->tail) ? NULL : node->next;
   2042e:	6875      	ldr	r5, [r6, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   20430:	45b4      	cmp	ip, r6
   20432:	bf08      	it	eq
   20434:	f04f 0c00 	moveq.w	ip, #0
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
   20438:	f1bc 0f00 	cmp.w	ip, #0
   2043c:	d10d      	bne.n	2045a <z_add_timeout+0x8a>
	node->prev = tail;
   2043e:	e9c4 6500 	strd	r6, r5, [r4]
	tail->next = node;
   20442:	602c      	str	r4, [r5, #0]
	list->tail = node;
   20444:	6074      	str	r4, [r6, #4]
}
   20446:	e01c      	b.n	20482 <z_add_timeout+0xb2>
			to->dticks = timeout.ticks + 1 + elapsed();
   20448:	f7ff ff74 	bl	20334 <elapsed>
   2044c:	3601      	adds	r6, #1
   2044e:	f145 0500 	adc.w	r5, r5, #0
   20452:	1836      	adds	r6, r6, r0
   20454:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
   20458:	e7e4      	b.n	20424 <z_add_timeout+0x54>
			if (t->dticks > to->dticks) {
   2045a:	e9dc 2004 	ldrd	r2, r0, [ip, #16]
   2045e:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
   20462:	4293      	cmp	r3, r2
   20464:	eb71 0e00 	sbcs.w	lr, r1, r0
   20468:	da1f      	bge.n	204aa <z_add_timeout+0xda>
				t->dticks -= to->dticks;
   2046a:	1ad2      	subs	r2, r2, r3
	sys_dnode_t *const prev = successor->prev;
   2046c:	f8dc 3004 	ldr.w	r3, [ip, #4]
   20470:	eb60 0001 	sbc.w	r0, r0, r1
   20474:	e9cc 2004 	strd	r2, r0, [ip, #16]
	node->next = successor;
   20478:	e9c4 c300 	strd	ip, r3, [r4]
	prev->next = node;
   2047c:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   2047e:	f8cc 4004 	str.w	r4, [ip, #4]
	return list->head == list;
   20482:	6833      	ldr	r3, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   20484:	42b3      	cmp	r3, r6
   20486:	d00b      	beq.n	204a0 <z_add_timeout+0xd0>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   20488:	429c      	cmp	r4, r3
   2048a:	d109      	bne.n	204a0 <z_add_timeout+0xd0>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   2048c:	f7ff ff5c 	bl	20348 <next_timeout>

			if (next_time == 0 ||
   20490:	b118      	cbz	r0, 2049a <z_add_timeout+0xca>
			    _current_cpu->slice_ticks != next_time) {
   20492:	4b0d      	ldr	r3, [pc, #52]	; (204c8 <z_add_timeout+0xf8>)
			if (next_time == 0 ||
   20494:	691b      	ldr	r3, [r3, #16]
   20496:	4283      	cmp	r3, r0
   20498:	d002      	beq.n	204a0 <z_add_timeout+0xd0>
				sys_clock_set_timeout(next_time, false);
   2049a:	2100      	movs	r1, #0
   2049c:	f7fc fe60 	bl	1d160 <sys_clock_set_timeout>
	__asm__ volatile(
   204a0:	f387 8811 	msr	BASEPRI, r7
   204a4:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   204a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
   204aa:	1a9b      	subs	r3, r3, r2
   204ac:	eb61 0100 	sbc.w	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
   204b0:	45ac      	cmp	ip, r5
   204b2:	e9c4 3104 	strd	r3, r1, [r4, #16]
   204b6:	d0c2      	beq.n	2043e <z_add_timeout+0x6e>
   204b8:	f8dc c000 	ldr.w	ip, [ip]
   204bc:	e7bc      	b.n	20438 <z_add_timeout+0x68>
   204be:	bf00      	nop
   204c0:	20003028 	.word	0x20003028
   204c4:	200006b0 	.word	0x200006b0
   204c8:	20005314 	.word	0x20005314

000204cc <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
   204cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   204d0:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   204d2:	f7ff fcbd 	bl	1fe50 <z_time_slice>
	__asm__ volatile(
   204d6:	f04f 0340 	mov.w	r3, #64	; 0x40
   204da:	f3ef 8611 	mrs	r6, BASEPRI
   204de:	f383 8812 	msr	BASEPRI_MAX, r3
   204e2:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
   204e6:	4f23      	ldr	r7, [pc, #140]	; (20574 <sys_clock_announce+0xa8>)
	return list->head == list;
   204e8:	f8df 8090 	ldr.w	r8, [pc, #144]	; 2057c <sys_clock_announce+0xb0>
   204ec:	f8d8 0000 	ldr.w	r0, [r8]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   204f0:	4a21      	ldr	r2, [pc, #132]	; (20578 <sys_clock_announce+0xac>)
	announce_remaining = ticks;
   204f2:	603c      	str	r4, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   204f4:	4540      	cmp	r0, r8
		curr_tick += dt;
   204f6:	e9d2 3e00 	ldrd	r3, lr, [r2]
   204fa:	ea4f 71e4 	mov.w	r1, r4, asr #31
   204fe:	d00b      	beq.n	20518 <sys_clock_announce+0x4c>
	while (first() != NULL && first()->dticks <= announce_remaining) {
   20500:	b150      	cbz	r0, 20518 <sys_clock_announce+0x4c>
   20502:	e9d0 5c04 	ldrd	r5, ip, [r0, #16]
   20506:	42ac      	cmp	r4, r5
   20508:	eb71 090c 	sbcs.w	r9, r1, ip
   2050c:	da16      	bge.n	2053c <sys_clock_announce+0x70>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   2050e:	1b2d      	subs	r5, r5, r4
   20510:	eb6c 0c01 	sbc.w	ip, ip, r1
   20514:	e9c0 5c04 	strd	r5, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
   20518:	18e3      	adds	r3, r4, r3
   2051a:	eb4e 0101 	adc.w	r1, lr, r1
	announce_remaining = 0;
   2051e:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   20520:	e9c2 3100 	strd	r3, r1, [r2]
	announce_remaining = 0;
   20524:	603c      	str	r4, [r7, #0]

	sys_clock_set_timeout(next_timeout(), false);
   20526:	f7ff ff0f 	bl	20348 <next_timeout>
   2052a:	4621      	mov	r1, r4
   2052c:	f7fc fe18 	bl	1d160 <sys_clock_set_timeout>
	__asm__ volatile(
   20530:	f386 8811 	msr	BASEPRI, r6
   20534:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   20538:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
   2053c:	18eb      	adds	r3, r5, r3
   2053e:	eb4e 71e5 	adc.w	r1, lr, r5, asr #31
   20542:	e9c2 3100 	strd	r3, r1, [r2]
		t->dticks = 0;
   20546:	2200      	movs	r2, #0
   20548:	2300      	movs	r3, #0
   2054a:	e9c0 2304 	strd	r2, r3, [r0, #16]
		remove_timeout(t);
   2054e:	f7ff ff23 	bl	20398 <remove_timeout>
   20552:	f386 8811 	msr	BASEPRI, r6
   20556:	f3bf 8f6f 	isb	sy
		t->fn(t);
   2055a:	6883      	ldr	r3, [r0, #8]
   2055c:	4798      	blx	r3
	__asm__ volatile(
   2055e:	f04f 0340 	mov.w	r3, #64	; 0x40
   20562:	f3ef 8611 	mrs	r6, BASEPRI
   20566:	f383 8812 	msr	BASEPRI_MAX, r3
   2056a:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
   2056e:	683c      	ldr	r4, [r7, #0]
   20570:	1b64      	subs	r4, r4, r5
   20572:	e7bb      	b.n	204ec <sys_clock_announce+0x20>
   20574:	20005358 	.word	0x20005358
   20578:	20003028 	.word	0x20003028
   2057c:	200006b0 	.word	0x200006b0

00020580 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   20580:	b510      	push	{r4, lr}
   20582:	f04f 0340 	mov.w	r3, #64	; 0x40
   20586:	f3ef 8411 	mrs	r4, BASEPRI
   2058a:	f383 8812 	msr	BASEPRI_MAX, r3
   2058e:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
   20592:	f7ff fecf 	bl	20334 <elapsed>
   20596:	4a06      	ldr	r2, [pc, #24]	; (205b0 <sys_clock_tick_get+0x30>)
   20598:	4603      	mov	r3, r0
   2059a:	e9d2 0100 	ldrd	r0, r1, [r2]
   2059e:	1818      	adds	r0, r3, r0
   205a0:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
	__asm__ volatile(
   205a4:	f384 8811 	msr	BASEPRI, r4
   205a8:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   205ac:	bd10      	pop	{r4, pc}
   205ae:	bf00      	nop
   205b0:	20003028 	.word	0x20003028

000205b4 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   205b4:	b570      	push	{r4, r5, r6, lr}
   205b6:	4604      	mov	r4, r0
	__asm__ volatile(
   205b8:	f04f 0340 	mov.w	r3, #64	; 0x40
   205bc:	f3ef 8511 	mrs	r5, BASEPRI
   205c0:	f383 8812 	msr	BASEPRI_MAX, r3
   205c4:	f3bf 8f6f 	isb	sy

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   205c8:	e9d0 320a 	ldrd	r3, r2, [r0, #40]	; 0x28
   205cc:	3301      	adds	r3, #1
   205ce:	f142 0200 	adc.w	r2, r2, #0
   205d2:	2b02      	cmp	r3, #2
   205d4:	f172 0200 	sbcs.w	r2, r2, #0
   205d8:	d322      	bcc.n	20620 <z_timer_expiration_handler+0x6c>
	return z_impl_k_uptime_ticks();
   205da:	f004 fbce 	bl	24d7a <z_impl_k_uptime_ticks>
		 * we "should" have run.  Requires absolute timeouts.
		 * (Note offset by one: we're nominally at the
		 * beginning of a tick, so need to defeat the "round
		 * down" behavior on timeout addition).
		 */
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
   205de:	e9d4 320a 	ldrd	r3, r2, [r4, #40]	; 0x28
   205e2:	3001      	adds	r0, #1
   205e4:	f141 0100 	adc.w	r1, r1, #0
   205e8:	18c0      	adds	r0, r0, r3
   205ea:	eb41 0102 	adc.w	r1, r1, r2
   205ee:	2801      	cmp	r0, #1
   205f0:	f171 0100 	sbcs.w	r1, r1, #0
   205f4:	db32      	blt.n	2065c <z_timer_expiration_handler+0xa8>
   205f6:	f004 fbc0 	bl	24d7a <z_impl_k_uptime_ticks>
   205fa:	3001      	adds	r0, #1
   205fc:	f141 0300 	adc.w	r3, r1, #0
   20600:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	; 0x28
   20604:	1880      	adds	r0, r0, r2
   20606:	f06f 0201 	mvn.w	r2, #1
   2060a:	eb43 0301 	adc.w	r3, r3, r1
   2060e:	1a12      	subs	r2, r2, r0
   20610:	f04f 31ff 	mov.w	r1, #4294967295
   20614:	eb61 0303 	sbc.w	r3, r1, r3
					   + timer->period.ticks);
#endif
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   20618:	491a      	ldr	r1, [pc, #104]	; (20684 <z_timer_expiration_handler+0xd0>)
   2061a:	4620      	mov	r0, r4
   2061c:	f7ff fed8 	bl	203d0 <z_add_timeout>
			      next);
	}

	/* update timer's status */
	timer->status += 1U;
   20620:	6b23      	ldr	r3, [r4, #48]	; 0x30
   20622:	3301      	adds	r3, #1
   20624:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   20626:	6a23      	ldr	r3, [r4, #32]
   20628:	b173      	cbz	r3, 20648 <z_timer_expiration_handler+0x94>
	__asm__ volatile(
   2062a:	f385 8811 	msr	BASEPRI, r5
   2062e:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
   20632:	6a23      	ldr	r3, [r4, #32]
   20634:	4620      	mov	r0, r4
   20636:	4798      	blx	r3
	__asm__ volatile(
   20638:	f04f 0340 	mov.w	r3, #64	; 0x40
   2063c:	f3ef 8511 	mrs	r5, BASEPRI
   20640:	f383 8812 	msr	BASEPRI_MAX, r3
   20644:	f3bf 8f6f 	isb	sy
	return list->head == list;
   20648:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2064c:	42a6      	cmp	r6, r4
   2064e:	d000      	beq.n	20652 <z_timer_expiration_handler+0x9e>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   20650:	b94e      	cbnz	r6, 20666 <z_timer_expiration_handler+0xb2>
	__asm__ volatile(
   20652:	f385 8811 	msr	BASEPRI, r5
   20656:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
   2065a:	bd70      	pop	{r4, r5, r6, pc}
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
   2065c:	f06f 0201 	mvn.w	r2, #1
   20660:	f04f 33ff 	mov.w	r3, #4294967295
   20664:	e7d8      	b.n	20618 <z_timer_expiration_handler+0x64>
	z_unpend_thread_no_timeout(thread);
   20666:	4630      	mov	r0, r6
   20668:	f004 faa1 	bl	24bae <z_unpend_thread_no_timeout>
   2066c:	2300      	movs	r3, #0
   2066e:	67f3      	str	r3, [r6, #124]	; 0x7c
   20670:	f385 8811 	msr	BASEPRI, r5
   20674:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
   20678:	4630      	mov	r0, r6
}
   2067a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
   2067e:	f004 ba86 	b.w	24b8e <z_ready_thread>
   20682:	bf00      	nop
   20684:	000205b5 	.word	0x000205b5

00020688 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   20688:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer, duration, period);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   2068c:	f1b3 3fff 	cmp.w	r3, #4294967295
   20690:	bf08      	it	eq
   20692:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   20696:	4605      	mov	r5, r0
   20698:	4614      	mov	r4, r2
   2069a:	e9dd 6008 	ldrd	r6, r0, [sp, #32]
   2069e:	4619      	mov	r1, r3
   206a0:	4691      	mov	r9, r2
   206a2:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   206a4:	d037      	beq.n	20716 <z_impl_k_timer_start+0x8e>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   206a6:	f1b0 3fff 	cmp.w	r0, #4294967295
   206aa:	bf08      	it	eq
   206ac:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   206b0:	4637      	mov	r7, r6
   206b2:	4682      	mov	sl, r0
   206b4:	d011      	beq.n	206da <z_impl_k_timer_start+0x52>
   206b6:	ea50 0306 	orrs.w	r3, r0, r6
   206ba:	d00e      	beq.n	206da <z_impl_k_timer_start+0x52>
   206bc:	1c72      	adds	r2, r6, #1
   206be:	f170 33ff 	sbcs.w	r3, r0, #4294967295
   206c2:	db0a      	blt.n	206da <z_impl_k_timer_start+0x52>
	    Z_TICK_ABS(period.ticks) < 0) {
		period.ticks = MAX(period.ticks - 1, 1);
   206c4:	2e02      	cmp	r6, #2
   206c6:	4684      	mov	ip, r0
   206c8:	f170 0000 	sbcs.w	r0, r0, #0
   206cc:	bfbc      	itt	lt
   206ce:	2702      	movlt	r7, #2
   206d0:	f04f 0c00 	movlt.w	ip, #0
   206d4:	3f01      	subs	r7, #1
   206d6:	f14c 3aff 	adc.w	sl, ip, #4294967295
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   206da:	1c63      	adds	r3, r4, #1
   206dc:	f171 33ff 	sbcs.w	r3, r1, #4294967295
   206e0:	db0a      	blt.n	206f8 <z_impl_k_timer_start+0x70>
		duration.ticks = MAX(duration.ticks - 1, 0);
   206e2:	2c01      	cmp	r4, #1
   206e4:	f171 0300 	sbcs.w	r3, r1, #0
   206e8:	4622      	mov	r2, r4
   206ea:	bfbc      	itt	lt
   206ec:	2201      	movlt	r2, #1
   206ee:	2100      	movlt	r1, #0
   206f0:	f112 39ff 	adds.w	r9, r2, #4294967295
   206f4:	f141 38ff 	adc.w	r8, r1, #4294967295
	}

	(void)z_abort_timeout(&timer->timeout);
   206f8:	4628      	mov	r0, r5
   206fa:	f004 faf8 	bl	24cee <z_abort_timeout>
	timer->period = period;
   206fe:	e9c5 7a0a 	strd	r7, sl, [r5, #40]	; 0x28
	timer->status = 0U;
   20702:	2300      	movs	r3, #0
   20704:	632b      	str	r3, [r5, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   20706:	464a      	mov	r2, r9
   20708:	4643      	mov	r3, r8
   2070a:	4628      	mov	r0, r5
   2070c:	4903      	ldr	r1, [pc, #12]	; (2071c <z_impl_k_timer_start+0x94>)
		     duration);
}
   2070e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   20712:	f7ff be5d 	b.w	203d0 <z_add_timeout>
}
   20716:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2071a:	bf00      	nop
   2071c:	000205b5 	.word	0x000205b5

00020720 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   20720:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   20724:	461d      	mov	r5, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   20726:	4b29      	ldr	r3, [pc, #164]	; (207cc <z_impl_k_poll+0xac>)
   20728:	689f      	ldr	r7, [r3, #8]

	poller->is_polling = true;
   2072a:	2301      	movs	r3, #1
   2072c:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	poller->mode = MODE_POLL;
   20730:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   20734:	ea52 0305 	orrs.w	r3, r2, r5
{
   20738:	4616      	mov	r6, r2
	events_registered = register_events(events, num_events, poller,
   2073a:	bf0c      	ite	eq
   2073c:	2301      	moveq	r3, #1
   2073e:	2300      	movne	r3, #0
   20740:	f107 0260 	add.w	r2, r7, #96	; 0x60
{
   20744:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
   20746:	f004 fb9a 	bl	24e7e <register_events>
   2074a:	4681      	mov	r9, r0
	__asm__ volatile(
   2074c:	f04f 0340 	mov.w	r3, #64	; 0x40
   20750:	f3ef 8a11 	mrs	sl, BASEPRI
   20754:	f383 8812 	msr	BASEPRI_MAX, r3
   20758:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   2075c:	f897 4060 	ldrb.w	r4, [r7, #96]	; 0x60
   20760:	b964      	cbnz	r4, 2077c <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
   20762:	4601      	mov	r1, r0
   20764:	4652      	mov	r2, sl
   20766:	4640      	mov	r0, r8
   20768:	f004 fc5a 	bl	25020 <clear_event_registrations>
	__asm__ volatile(
   2076c:	f38a 8811 	msr	BASEPRI, sl
   20770:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   20774:	4620      	mov	r0, r4
   20776:	b002      	add	sp, #8
   20778:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
   2077c:	2300      	movs	r3, #0
   2077e:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   20782:	ea56 0305 	orrs.w	r3, r6, r5
   20786:	d106      	bne.n	20796 <z_impl_k_poll+0x76>
   20788:	f38a 8811 	msr	BASEPRI, sl
   2078c:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   20790:	f06f 040a 	mvn.w	r4, #10
   20794:	e7ee      	b.n	20774 <z_impl_k_poll+0x54>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   20796:	e9cd 6500 	strd	r6, r5, [sp]
   2079a:	4a0d      	ldr	r2, [pc, #52]	; (207d0 <z_impl_k_poll+0xb0>)
   2079c:	480d      	ldr	r0, [pc, #52]	; (207d4 <z_impl_k_poll+0xb4>)
   2079e:	4651      	mov	r1, sl
   207a0:	f7ff fb98 	bl	1fed4 <z_pend_curr>
   207a4:	4604      	mov	r4, r0
	__asm__ volatile(
   207a6:	f04f 0340 	mov.w	r3, #64	; 0x40
   207aa:	f3ef 8511 	mrs	r5, BASEPRI
   207ae:	f383 8812 	msr	BASEPRI_MAX, r3
   207b2:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
   207b6:	462a      	mov	r2, r5
   207b8:	4649      	mov	r1, r9
   207ba:	4640      	mov	r0, r8
   207bc:	f004 fc30 	bl	25020 <clear_event_registrations>
	__asm__ volatile(
   207c0:	f385 8811 	msr	BASEPRI, r5
   207c4:	f3bf 8f6f 	isb	sy
	return swap_rc;
   207c8:	e7d4      	b.n	20774 <z_impl_k_poll+0x54>
   207ca:	bf00      	nop
   207cc:	20005314 	.word	0x20005314
   207d0:	200006b8 	.word	0x200006b8
   207d4:	200059fb 	.word	0x200059fb

000207d8 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   207d8:	b538      	push	{r3, r4, r5, lr}
   207da:	4603      	mov	r3, r0
	__asm__ volatile(
   207dc:	f04f 0240 	mov.w	r2, #64	; 0x40
   207e0:	f3ef 8511 	mrs	r5, BASEPRI
   207e4:	f382 8812 	msr	BASEPRI_MAX, r2
   207e8:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   207ec:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
   207ee:	2101      	movs	r1, #1
   207f0:	6081      	str	r1, [r0, #8]
	return list->head == list;
   207f2:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   207f4:	4283      	cmp	r3, r0
   207f6:	d106      	bne.n	20806 <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   207f8:	f385 8811 	msr	BASEPRI, r5
   207fc:	f3bf 8f6f 	isb	sy
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
   20800:	2400      	movs	r4, #0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
	return rc;
}
   20802:	4620      	mov	r0, r4
   20804:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const next = node->next;
   20806:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   2080a:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2080c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2080e:	2300      	movs	r3, #0
	node->prev = NULL;
   20810:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   20814:	f004 fbaa 	bl	24f6c <signal_poll_event>
	z_reschedule(&lock, key);
   20818:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   2081a:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   2081c:	4801      	ldr	r0, [pc, #4]	; (20824 <z_impl_k_poll_signal_raise+0x4c>)
   2081e:	f7ff fbbd 	bl	1ff9c <z_reschedule>
	return rc;
   20822:	e7ee      	b.n	20802 <z_impl_k_poll_signal_raise+0x2a>
   20824:	200059fb 	.word	0x200059fb

00020828 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   20828:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2082a:	4606      	mov	r6, r0
   2082c:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   2082e:	f003 ff81 	bl	24734 <k_is_in_isr>
   20832:	b978      	cbnz	r0, 20854 <z_thread_aligned_alloc+0x2c>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   20834:	4b0b      	ldr	r3, [pc, #44]	; (20864 <z_thread_aligned_alloc+0x3c>)
   20836:	689b      	ldr	r3, [r3, #8]
   20838:	6f5c      	ldr	r4, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   2083a:	b17c      	cbz	r4, 2085c <z_thread_aligned_alloc+0x34>
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   2083c:	1d2a      	adds	r2, r5, #4
   2083e:	d209      	bcs.n	20854 <z_thread_aligned_alloc+0x2c>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   20840:	2000      	movs	r0, #0
   20842:	2100      	movs	r1, #0
   20844:	e9cd 0100 	strd	r0, r1, [sp]
   20848:	f046 0104 	orr.w	r1, r6, #4
   2084c:	4620      	mov	r0, r4
   2084e:	f003 fec8 	bl	245e2 <k_heap_aligned_alloc>
	if (mem == NULL) {
   20852:	b908      	cbnz	r0, 20858 <z_thread_aligned_alloc+0x30>
		ret = z_heap_aligned_alloc(heap, align, size);
	} else {
		ret = NULL;
   20854:	2400      	movs	r4, #0
	}

	return ret;
   20856:	e001      	b.n	2085c <z_thread_aligned_alloc+0x34>
	*heap_ref = heap;
   20858:	6004      	str	r4, [r0, #0]
	mem = ++heap_ref;
   2085a:	1d04      	adds	r4, r0, #4
}
   2085c:	4620      	mov	r0, r4
   2085e:	b002      	add	sp, #8
   20860:	bd70      	pop	{r4, r5, r6, pc}
   20862:	bf00      	nop
   20864:	20005314 	.word	0x20005314

00020868 <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
   20868:	4801      	ldr	r0, [pc, #4]	; (20870 <boot_banner+0x8>)
   2086a:	f000 bf82 	b.w	21772 <printk>
   2086e:	bf00      	nop
   20870:	00027b1e 	.word	0x00027b1e

00020874 <ocrypto_ecdh_p256_public_key>:
   20874:	b530      	push	{r4, r5, lr}
   20876:	b099      	sub	sp, #100	; 0x64
   20878:	4605      	mov	r5, r0
   2087a:	4668      	mov	r0, sp
   2087c:	f000 f828 	bl	208d0 <ocrypto_sc_p256_from32bytes>
   20880:	4669      	mov	r1, sp
   20882:	4604      	mov	r4, r0
   20884:	a808      	add	r0, sp, #32
   20886:	f000 fa53 	bl	20d30 <ocrypto_curve_p256_scalarmult_base>
   2088a:	a908      	add	r1, sp, #32
   2088c:	4304      	orrs	r4, r0
   2088e:	4628      	mov	r0, r5
   20890:	f000 f98a 	bl	20ba8 <ocrypto_curve_p256_to64bytes>
   20894:	4620      	mov	r0, r4
   20896:	b019      	add	sp, #100	; 0x64
   20898:	bd30      	pop	{r4, r5, pc}
   2089a:	bf00      	nop

0002089c <ocrypto_ecdh_p256_common_secret>:
   2089c:	b570      	push	{r4, r5, r6, lr}
   2089e:	b098      	sub	sp, #96	; 0x60
   208a0:	4605      	mov	r5, r0
   208a2:	4668      	mov	r0, sp
   208a4:	4616      	mov	r6, r2
   208a6:	f000 f813 	bl	208d0 <ocrypto_sc_p256_from32bytes>
   208aa:	4631      	mov	r1, r6
   208ac:	4604      	mov	r4, r0
   208ae:	a808      	add	r0, sp, #32
   208b0:	f000 f946 	bl	20b40 <ocrypto_curve_p256_from64bytes>
   208b4:	a908      	add	r1, sp, #32
   208b6:	466a      	mov	r2, sp
   208b8:	4304      	orrs	r4, r0
   208ba:	4608      	mov	r0, r1
   208bc:	f000 f982 	bl	20bc4 <ocrypto_curve_p256_scalarmult>
   208c0:	a908      	add	r1, sp, #32
   208c2:	4304      	orrs	r4, r0
   208c4:	4628      	mov	r0, r5
   208c6:	f000 f96d 	bl	20ba4 <ocrypto_curve_p256_to32bytes>
   208ca:	4620      	mov	r0, r4
   208cc:	b018      	add	sp, #96	; 0x60
   208ce:	bd70      	pop	{r4, r5, r6, pc}

000208d0 <ocrypto_sc_p256_from32bytes>:
   208d0:	b570      	push	{r4, r5, r6, lr}
   208d2:	680b      	ldr	r3, [r1, #0]
   208d4:	4e12      	ldr	r6, [pc, #72]	; (20920 <ocrypto_sc_p256_from32bytes+0x50>)
   208d6:	ba1b      	rev	r3, r3
   208d8:	61c3      	str	r3, [r0, #28]
   208da:	684b      	ldr	r3, [r1, #4]
   208dc:	ba1b      	rev	r3, r3
   208de:	6183      	str	r3, [r0, #24]
   208e0:	688b      	ldr	r3, [r1, #8]
   208e2:	ba1b      	rev	r3, r3
   208e4:	6143      	str	r3, [r0, #20]
   208e6:	68cb      	ldr	r3, [r1, #12]
   208e8:	ba1b      	rev	r3, r3
   208ea:	6103      	str	r3, [r0, #16]
   208ec:	690b      	ldr	r3, [r1, #16]
   208ee:	ba1b      	rev	r3, r3
   208f0:	60c3      	str	r3, [r0, #12]
   208f2:	694b      	ldr	r3, [r1, #20]
   208f4:	ba1b      	rev	r3, r3
   208f6:	6083      	str	r3, [r0, #8]
   208f8:	698b      	ldr	r3, [r1, #24]
   208fa:	ba1b      	rev	r3, r3
   208fc:	6043      	str	r3, [r0, #4]
   208fe:	69cb      	ldr	r3, [r1, #28]
   20900:	ba1b      	rev	r3, r3
   20902:	4632      	mov	r2, r6
   20904:	6003      	str	r3, [r0, #0]
   20906:	4601      	mov	r1, r0
   20908:	4604      	mov	r4, r0
   2090a:	f7e0 f921 	bl	b50 <ocrypto_bigint_sub256>
   2090e:	4631      	mov	r1, r6
   20910:	4605      	mov	r5, r0
   20912:	4602      	mov	r2, r0
   20914:	4620      	mov	r0, r4
   20916:	f7e0 f93b 	bl	b90 <ocrypto_bigint_cadd256>
   2091a:	1e68      	subs	r0, r5, #1
   2091c:	bd70      	pop	{r4, r5, r6, pc}
   2091e:	bf00      	nop
   20920:	00025c3c 	.word	0x00025c3c

00020924 <p256_zdblu>:
   20924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20928:	b088      	sub	sp, #32
   2092a:	460c      	mov	r4, r1
   2092c:	4606      	mov	r6, r0
   2092e:	f102 0120 	add.w	r1, r2, #32
   20932:	4668      	mov	r0, sp
   20934:	f106 0720 	add.w	r7, r6, #32
   20938:	4690      	mov	r8, r2
   2093a:	f7e0 fc1f 	bl	117c <ocrypto_mod_p256_sqr>
   2093e:	466a      	mov	r2, sp
   20940:	4669      	mov	r1, sp
   20942:	4668      	mov	r0, sp
   20944:	f7e0 fb2c 	bl	fa0 <ocrypto_mod_p256_add>
   20948:	4669      	mov	r1, sp
   2094a:	4638      	mov	r0, r7
   2094c:	f7e0 fc16 	bl	117c <ocrypto_mod_p256_sqr>
   20950:	463a      	mov	r2, r7
   20952:	4639      	mov	r1, r7
   20954:	4638      	mov	r0, r7
   20956:	f104 0520 	add.w	r5, r4, #32
   2095a:	f7e0 fb21 	bl	fa0 <ocrypto_mod_p256_add>
   2095e:	466a      	mov	r2, sp
   20960:	4669      	mov	r1, sp
   20962:	4668      	mov	r0, sp
   20964:	f7e0 fb1c 	bl	fa0 <ocrypto_mod_p256_add>
   20968:	4641      	mov	r1, r8
   2096a:	4628      	mov	r0, r5
   2096c:	f7e0 fc06 	bl	117c <ocrypto_mod_p256_sqr>
   20970:	466a      	mov	r2, sp
   20972:	4641      	mov	r1, r8
   20974:	4630      	mov	r0, r6
   20976:	f7e0 fbe9 	bl	114c <ocrypto_mod_p256_mul>
   2097a:	462a      	mov	r2, r5
   2097c:	4629      	mov	r1, r5
   2097e:	4668      	mov	r0, sp
   20980:	f7e0 fb0e 	bl	fa0 <ocrypto_mod_p256_add>
   20984:	462a      	mov	r2, r5
   20986:	4669      	mov	r1, sp
   20988:	4668      	mov	r0, sp
   2098a:	f7e0 fb09 	bl	fa0 <ocrypto_mod_p256_add>
   2098e:	4a12      	ldr	r2, [pc, #72]	; (209d8 <p256_zdblu+0xb4>)
   20990:	4669      	mov	r1, sp
   20992:	4668      	mov	r0, sp
   20994:	f7e0 fb04 	bl	fa0 <ocrypto_mod_p256_add>
   20998:	4669      	mov	r1, sp
   2099a:	4620      	mov	r0, r4
   2099c:	f7e0 fbee 	bl	117c <ocrypto_mod_p256_sqr>
   209a0:	4632      	mov	r2, r6
   209a2:	4621      	mov	r1, r4
   209a4:	4620      	mov	r0, r4
   209a6:	f7e0 fb39 	bl	101c <ocrypto_mod_p256_sub>
   209aa:	4632      	mov	r2, r6
   209ac:	4621      	mov	r1, r4
   209ae:	4620      	mov	r0, r4
   209b0:	f7e0 fb34 	bl	101c <ocrypto_mod_p256_sub>
   209b4:	4622      	mov	r2, r4
   209b6:	4631      	mov	r1, r6
   209b8:	4628      	mov	r0, r5
   209ba:	f7e0 fb2f 	bl	101c <ocrypto_mod_p256_sub>
   209be:	466a      	mov	r2, sp
   209c0:	4629      	mov	r1, r5
   209c2:	4628      	mov	r0, r5
   209c4:	f7e0 fbc2 	bl	114c <ocrypto_mod_p256_mul>
   209c8:	463a      	mov	r2, r7
   209ca:	4629      	mov	r1, r5
   209cc:	4628      	mov	r0, r5
   209ce:	f7e0 fb25 	bl	101c <ocrypto_mod_p256_sub>
   209d2:	b008      	add	sp, #32
   209d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   209d8:	00025cdc 	.word	0x00025cdc

000209dc <p256_zaddc>:
   209dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   209de:	b099      	sub	sp, #100	; 0x64
   209e0:	4604      	mov	r4, r0
   209e2:	460d      	mov	r5, r1
   209e4:	460a      	mov	r2, r1
   209e6:	4601      	mov	r1, r0
   209e8:	4668      	mov	r0, sp
   209ea:	f7e0 fb17 	bl	101c <ocrypto_mod_p256_sub>
   209ee:	4669      	mov	r1, sp
   209f0:	4668      	mov	r0, sp
   209f2:	f7e0 fbc3 	bl	117c <ocrypto_mod_p256_sqr>
   209f6:	466a      	mov	r2, sp
   209f8:	4621      	mov	r1, r4
   209fa:	a808      	add	r0, sp, #32
   209fc:	f105 0620 	add.w	r6, r5, #32
   20a00:	f104 0720 	add.w	r7, r4, #32
   20a04:	f7e0 fba2 	bl	114c <ocrypto_mod_p256_mul>
   20a08:	466a      	mov	r2, sp
   20a0a:	4629      	mov	r1, r5
   20a0c:	4668      	mov	r0, sp
   20a0e:	f7e0 fb9d 	bl	114c <ocrypto_mod_p256_mul>
   20a12:	4632      	mov	r2, r6
   20a14:	4639      	mov	r1, r7
   20a16:	a810      	add	r0, sp, #64	; 0x40
   20a18:	f7e0 fac2 	bl	fa0 <ocrypto_mod_p256_add>
   20a1c:	4632      	mov	r2, r6
   20a1e:	4639      	mov	r1, r7
   20a20:	4630      	mov	r0, r6
   20a22:	f7e0 fafb 	bl	101c <ocrypto_mod_p256_sub>
   20a26:	4631      	mov	r1, r6
   20a28:	4628      	mov	r0, r5
   20a2a:	f7e0 fba7 	bl	117c <ocrypto_mod_p256_sqr>
   20a2e:	466a      	mov	r2, sp
   20a30:	a908      	add	r1, sp, #32
   20a32:	4620      	mov	r0, r4
   20a34:	f7e0 fab4 	bl	fa0 <ocrypto_mod_p256_add>
   20a38:	4622      	mov	r2, r4
   20a3a:	4629      	mov	r1, r5
   20a3c:	4628      	mov	r0, r5
   20a3e:	f7e0 faed 	bl	101c <ocrypto_mod_p256_sub>
   20a42:	466a      	mov	r2, sp
   20a44:	a908      	add	r1, sp, #32
   20a46:	4668      	mov	r0, sp
   20a48:	f7e0 fae8 	bl	101c <ocrypto_mod_p256_sub>
   20a4c:	466a      	mov	r2, sp
   20a4e:	4639      	mov	r1, r7
   20a50:	4638      	mov	r0, r7
   20a52:	f7e0 fb7b 	bl	114c <ocrypto_mod_p256_mul>
   20a56:	462a      	mov	r2, r5
   20a58:	a908      	add	r1, sp, #32
   20a5a:	4668      	mov	r0, sp
   20a5c:	f7e0 fade 	bl	101c <ocrypto_mod_p256_sub>
   20a60:	466a      	mov	r2, sp
   20a62:	4631      	mov	r1, r6
   20a64:	4630      	mov	r0, r6
   20a66:	f7e0 fb71 	bl	114c <ocrypto_mod_p256_mul>
   20a6a:	463a      	mov	r2, r7
   20a6c:	4631      	mov	r1, r6
   20a6e:	4630      	mov	r0, r6
   20a70:	f7e0 fad4 	bl	101c <ocrypto_mod_p256_sub>
   20a74:	a910      	add	r1, sp, #64	; 0x40
   20a76:	4668      	mov	r0, sp
   20a78:	f7e0 fb80 	bl	117c <ocrypto_mod_p256_sqr>
   20a7c:	4622      	mov	r2, r4
   20a7e:	4669      	mov	r1, sp
   20a80:	4620      	mov	r0, r4
   20a82:	f7e0 facb 	bl	101c <ocrypto_mod_p256_sub>
   20a86:	a908      	add	r1, sp, #32
   20a88:	4622      	mov	r2, r4
   20a8a:	4608      	mov	r0, r1
   20a8c:	f7e0 fac6 	bl	101c <ocrypto_mod_p256_sub>
   20a90:	a910      	add	r1, sp, #64	; 0x40
   20a92:	aa08      	add	r2, sp, #32
   20a94:	4608      	mov	r0, r1
   20a96:	f7e0 fb59 	bl	114c <ocrypto_mod_p256_mul>
   20a9a:	463a      	mov	r2, r7
   20a9c:	a910      	add	r1, sp, #64	; 0x40
   20a9e:	4638      	mov	r0, r7
   20aa0:	f7e0 fabc 	bl	101c <ocrypto_mod_p256_sub>
   20aa4:	b019      	add	sp, #100	; 0x64
   20aa6:	bdf0      	pop	{r4, r5, r6, r7, pc}

00020aa8 <p256_zaddu>:
   20aa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20aac:	b088      	sub	sp, #32
   20aae:	460c      	mov	r4, r1
   20ab0:	4605      	mov	r5, r0
   20ab2:	4690      	mov	r8, r2
   20ab4:	460a      	mov	r2, r1
   20ab6:	4601      	mov	r1, r0
   20ab8:	4668      	mov	r0, sp
   20aba:	f7e0 faaf 	bl	101c <ocrypto_mod_p256_sub>
   20abe:	4669      	mov	r1, sp
   20ac0:	4668      	mov	r0, sp
   20ac2:	f7e0 fb5b 	bl	117c <ocrypto_mod_p256_sqr>
   20ac6:	466a      	mov	r2, sp
   20ac8:	4629      	mov	r1, r5
   20aca:	4628      	mov	r0, r5
   20acc:	f104 0620 	add.w	r6, r4, #32
   20ad0:	f7e0 fb3c 	bl	114c <ocrypto_mod_p256_mul>
   20ad4:	f105 0720 	add.w	r7, r5, #32
   20ad8:	466a      	mov	r2, sp
   20ada:	4621      	mov	r1, r4
   20adc:	4668      	mov	r0, sp
   20ade:	f7e0 fb35 	bl	114c <ocrypto_mod_p256_mul>
   20ae2:	4632      	mov	r2, r6
   20ae4:	4639      	mov	r1, r7
   20ae6:	4630      	mov	r0, r6
   20ae8:	f7e0 fa98 	bl	101c <ocrypto_mod_p256_sub>
   20aec:	4631      	mov	r1, r6
   20aee:	4620      	mov	r0, r4
   20af0:	f7e0 fb44 	bl	117c <ocrypto_mod_p256_sqr>
   20af4:	462a      	mov	r2, r5
   20af6:	4621      	mov	r1, r4
   20af8:	4620      	mov	r0, r4
   20afa:	f7e0 fa8f 	bl	101c <ocrypto_mod_p256_sub>
   20afe:	466a      	mov	r2, sp
   20b00:	4621      	mov	r1, r4
   20b02:	4620      	mov	r0, r4
   20b04:	f7e0 fa8a 	bl	101c <ocrypto_mod_p256_sub>
   20b08:	466a      	mov	r2, sp
   20b0a:	4629      	mov	r1, r5
   20b0c:	4640      	mov	r0, r8
   20b0e:	f7e0 fa85 	bl	101c <ocrypto_mod_p256_sub>
   20b12:	4642      	mov	r2, r8
   20b14:	4639      	mov	r1, r7
   20b16:	4638      	mov	r0, r7
   20b18:	f7e0 fb18 	bl	114c <ocrypto_mod_p256_mul>
   20b1c:	4622      	mov	r2, r4
   20b1e:	4629      	mov	r1, r5
   20b20:	4668      	mov	r0, sp
   20b22:	f7e0 fa7b 	bl	101c <ocrypto_mod_p256_sub>
   20b26:	466a      	mov	r2, sp
   20b28:	4631      	mov	r1, r6
   20b2a:	4630      	mov	r0, r6
   20b2c:	f7e0 fb0e 	bl	114c <ocrypto_mod_p256_mul>
   20b30:	463a      	mov	r2, r7
   20b32:	4631      	mov	r1, r6
   20b34:	4630      	mov	r0, r6
   20b36:	f7e0 fa71 	bl	101c <ocrypto_mod_p256_sub>
   20b3a:	b008      	add	sp, #32
   20b3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00020b40 <ocrypto_curve_p256_from64bytes>:
   20b40:	b570      	push	{r4, r5, r6, lr}
   20b42:	f100 0620 	add.w	r6, r0, #32
   20b46:	b090      	sub	sp, #64	; 0x40
   20b48:	460d      	mov	r5, r1
   20b4a:	4604      	mov	r4, r0
   20b4c:	f000 f914 	bl	20d78 <ocrypto_mod_p256_from_bytes>
   20b50:	f105 0120 	add.w	r1, r5, #32
   20b54:	4630      	mov	r0, r6
   20b56:	f000 f90f 	bl	20d78 <ocrypto_mod_p256_from_bytes>
   20b5a:	4621      	mov	r1, r4
   20b5c:	a808      	add	r0, sp, #32
   20b5e:	f7e0 fb0d 	bl	117c <ocrypto_mod_p256_sqr>
   20b62:	a908      	add	r1, sp, #32
   20b64:	4608      	mov	r0, r1
   20b66:	4a0d      	ldr	r2, [pc, #52]	; (20b9c <ocrypto_curve_p256_from64bytes+0x5c>)
   20b68:	f7e0 fa1a 	bl	fa0 <ocrypto_mod_p256_add>
   20b6c:	a908      	add	r1, sp, #32
   20b6e:	4622      	mov	r2, r4
   20b70:	4608      	mov	r0, r1
   20b72:	f7e0 faeb 	bl	114c <ocrypto_mod_p256_mul>
   20b76:	a908      	add	r1, sp, #32
   20b78:	4a09      	ldr	r2, [pc, #36]	; (20ba0 <ocrypto_curve_p256_from64bytes+0x60>)
   20b7a:	4608      	mov	r0, r1
   20b7c:	f7e0 fa10 	bl	fa0 <ocrypto_mod_p256_add>
   20b80:	4631      	mov	r1, r6
   20b82:	4668      	mov	r0, sp
   20b84:	f7e0 fafa 	bl	117c <ocrypto_mod_p256_sqr>
   20b88:	2220      	movs	r2, #32
   20b8a:	4669      	mov	r1, sp
   20b8c:	eb0d 0002 	add.w	r0, sp, r2
   20b90:	f7e0 f9d8 	bl	f44 <ocrypto_constant_time_equal>
   20b94:	3801      	subs	r0, #1
   20b96:	b010      	add	sp, #64	; 0x40
   20b98:	bd70      	pop	{r4, r5, r6, pc}
   20b9a:	bf00      	nop
   20b9c:	00025cdc 	.word	0x00025cdc
   20ba0:	00025cfc 	.word	0x00025cfc

00020ba4 <ocrypto_curve_p256_to32bytes>:
   20ba4:	f000 b902 	b.w	20dac <ocrypto_mod_p256_to_bytes>

00020ba8 <ocrypto_curve_p256_to64bytes>:
   20ba8:	b538      	push	{r3, r4, r5, lr}
   20baa:	4604      	mov	r4, r0
   20bac:	460d      	mov	r5, r1
   20bae:	f000 f8fd 	bl	20dac <ocrypto_mod_p256_to_bytes>
   20bb2:	f105 0120 	add.w	r1, r5, #32
   20bb6:	f104 0020 	add.w	r0, r4, #32
   20bba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   20bbe:	f000 b8f5 	b.w	20dac <ocrypto_mod_p256_to_bytes>
   20bc2:	bf00      	nop

00020bc4 <ocrypto_curve_p256_scalarmult>:
   20bc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   20bc8:	4613      	mov	r3, r2
   20bca:	b0bb      	sub	sp, #236	; 0xec
   20bcc:	4a54      	ldr	r2, [pc, #336]	; (20d20 <ocrypto_curve_p256_scalarmult+0x15c>)
   20bce:	4688      	mov	r8, r1
   20bd0:	4607      	mov	r7, r0
   20bd2:	4619      	mov	r1, r3
   20bd4:	a812      	add	r0, sp, #72	; 0x48
   20bd6:	f7df ffbb 	bl	b50 <ocrypto_bigint_sub256>
   20bda:	4952      	ldr	r1, [pc, #328]	; (20d24 <ocrypto_curve_p256_scalarmult+0x160>)
   20bdc:	4602      	mov	r2, r0
   20bde:	a812      	add	r0, sp, #72	; 0x48
   20be0:	f7df ffd6 	bl	b90 <ocrypto_bigint_cadd256>
   20be4:	9d19      	ldr	r5, [sp, #100]	; 0x64
   20be6:	494e      	ldr	r1, [pc, #312]	; (20d20 <ocrypto_curve_p256_scalarmult+0x15c>)
   20be8:	ea00 75d5 	and.w	r5, r0, r5, lsr #31
   20bec:	4606      	mov	r6, r0
   20bee:	f1c5 0201 	rsb	r2, r5, #1
   20bf2:	a812      	add	r0, sp, #72	; 0x48
   20bf4:	f7df ffcc 	bl	b90 <ocrypto_bigint_cadd256>
   20bf8:	9b19      	ldr	r3, [sp, #100]	; 0x64
   20bfa:	4642      	mov	r2, r8
   20bfc:	ea6f 0903 	mvn.w	r9, r3
   20c00:	a92a      	add	r1, sp, #168	; 0xa8
   20c02:	a81a      	add	r0, sp, #104	; 0x68
   20c04:	f7ff fe8e 	bl	20924 <p256_zdblu>
   20c08:	ea4f 79d9 	mov.w	r9, r9, lsr #31
   20c0c:	a922      	add	r1, sp, #136	; 0x88
   20c0e:	f1c9 0201 	rsb	r2, r9, #1
   20c12:	4608      	mov	r0, r1
   20c14:	f000 f892 	bl	20d3c <ocrypto_mod_p256_cneg>
   20c18:	f1c6 0601 	rsb	r6, r6, #1
   20c1c:	24fe      	movs	r4, #254	; 0xfe
   20c1e:	aa02      	add	r2, sp, #8
   20c20:	a91a      	add	r1, sp, #104	; 0x68
   20c22:	a82a      	add	r0, sp, #168	; 0xa8
   20c24:	f7ff ff40 	bl	20aa8 <p256_zaddu>
   20c28:	1162      	asrs	r2, r4, #5
   20c2a:	ab3a      	add	r3, sp, #232	; 0xe8
   20c2c:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   20c30:	f004 011f 	and.w	r1, r4, #31
   20c34:	f852 3ca0 	ldr.w	r3, [r2, #-160]
   20c38:	40cb      	lsrs	r3, r1
   20c3a:	464a      	mov	r2, r9
   20c3c:	f003 0901 	and.w	r9, r3, #1
   20c40:	ea89 0202 	eor.w	r2, r9, r2
   20c44:	a92a      	add	r1, sp, #168	; 0xa8
   20c46:	a81a      	add	r0, sp, #104	; 0x68
   20c48:	9201      	str	r2, [sp, #4]
   20c4a:	f7df fffd 	bl	c48 <ocrypto_bigint_cswap256>
   20c4e:	9a01      	ldr	r2, [sp, #4]
   20c50:	a932      	add	r1, sp, #200	; 0xc8
   20c52:	a822      	add	r0, sp, #136	; 0x88
   20c54:	f7df fff8 	bl	c48 <ocrypto_bigint_cswap256>
   20c58:	3c01      	subs	r4, #1
   20c5a:	a92a      	add	r1, sp, #168	; 0xa8
   20c5c:	a81a      	add	r0, sp, #104	; 0x68
   20c5e:	f7ff febd 	bl	209dc <p256_zaddc>
   20c62:	1c63      	adds	r3, r4, #1
   20c64:	d1db      	bne.n	20c1e <ocrypto_curve_p256_scalarmult+0x5a>
   20c66:	f1c9 0201 	rsb	r2, r9, #1
   20c6a:	a922      	add	r1, sp, #136	; 0x88
   20c6c:	a80a      	add	r0, sp, #40	; 0x28
   20c6e:	f000 f865 	bl	20d3c <ocrypto_mod_p256_cneg>
   20c72:	ea85 0509 	eor.w	r5, r5, r9
   20c76:	aa02      	add	r2, sp, #8
   20c78:	a91a      	add	r1, sp, #104	; 0x68
   20c7a:	a82a      	add	r0, sp, #168	; 0xa8
   20c7c:	f7ff ff14 	bl	20aa8 <p256_zaddu>
   20c80:	a92a      	add	r1, sp, #168	; 0xa8
   20c82:	462a      	mov	r2, r5
   20c84:	a81a      	add	r0, sp, #104	; 0x68
   20c86:	f7df ffdf 	bl	c48 <ocrypto_bigint_cswap256>
   20c8a:	462a      	mov	r2, r5
   20c8c:	a932      	add	r1, sp, #200	; 0xc8
   20c8e:	a822      	add	r0, sp, #136	; 0x88
   20c90:	f7df ffda 	bl	c48 <ocrypto_bigint_cswap256>
   20c94:	a90a      	add	r1, sp, #40	; 0x28
   20c96:	aa02      	add	r2, sp, #8
   20c98:	4608      	mov	r0, r1
   20c9a:	f7e0 fa57 	bl	114c <ocrypto_mod_p256_mul>
   20c9e:	a90a      	add	r1, sp, #40	; 0x28
   20ca0:	4608      	mov	r0, r1
   20ca2:	f000 f89d 	bl	20de0 <ocrypto_mod_p256_inv>
   20ca6:	a90a      	add	r1, sp, #40	; 0x28
   20ca8:	f107 0420 	add.w	r4, r7, #32
   20cac:	f108 0220 	add.w	r2, r8, #32
   20cb0:	4608      	mov	r0, r1
   20cb2:	f7e0 fa4b 	bl	114c <ocrypto_mod_p256_mul>
   20cb6:	a922      	add	r1, sp, #136	; 0x88
   20cb8:	aa0a      	add	r2, sp, #40	; 0x28
   20cba:	4620      	mov	r0, r4
   20cbc:	f7e0 fa46 	bl	114c <ocrypto_mod_p256_mul>
   20cc0:	aa0a      	add	r2, sp, #40	; 0x28
   20cc2:	a91a      	add	r1, sp, #104	; 0x68
   20cc4:	a802      	add	r0, sp, #8
   20cc6:	f7e0 fa41 	bl	114c <ocrypto_mod_p256_mul>
   20cca:	a902      	add	r1, sp, #8
   20ccc:	4608      	mov	r0, r1
   20cce:	f7e0 fa55 	bl	117c <ocrypto_mod_p256_sqr>
   20cd2:	aa1a      	add	r2, sp, #104	; 0x68
   20cd4:	a902      	add	r1, sp, #8
   20cd6:	a80a      	add	r0, sp, #40	; 0x28
   20cd8:	f7e0 fa38 	bl	114c <ocrypto_mod_p256_mul>
   20cdc:	4621      	mov	r1, r4
   20cde:	a802      	add	r0, sp, #8
   20ce0:	f7e0 fa4c 	bl	117c <ocrypto_mod_p256_sqr>
   20ce4:	aa0a      	add	r2, sp, #40	; 0x28
   20ce6:	a902      	add	r1, sp, #8
   20ce8:	4610      	mov	r0, r2
   20cea:	f7e0 f997 	bl	101c <ocrypto_mod_p256_sub>
   20cee:	4a0e      	ldr	r2, [pc, #56]	; (20d28 <ocrypto_curve_p256_scalarmult+0x164>)
   20cf0:	a90a      	add	r1, sp, #40	; 0x28
   20cf2:	a802      	add	r0, sp, #8
   20cf4:	f7e0 f992 	bl	101c <ocrypto_mod_p256_sub>
   20cf8:	4620      	mov	r0, r4
   20cfa:	2120      	movs	r1, #32
   20cfc:	f7e0 f936 	bl	f6c <ocrypto_constant_time_is_zero>
   20d00:	a90a      	add	r1, sp, #40	; 0x28
   20d02:	4243      	negs	r3, r0
   20d04:	4602      	mov	r2, r0
   20d06:	a802      	add	r0, sp, #8
   20d08:	431e      	orrs	r6, r3
   20d0a:	f7df ff9d 	bl	c48 <ocrypto_bigint_cswap256>
   20d0e:	4638      	mov	r0, r7
   20d10:	4a06      	ldr	r2, [pc, #24]	; (20d2c <ocrypto_curve_p256_scalarmult+0x168>)
   20d12:	a902      	add	r1, sp, #8
   20d14:	f7e0 fa1a 	bl	114c <ocrypto_mod_p256_mul>
   20d18:	4630      	mov	r0, r6
   20d1a:	b03b      	add	sp, #236	; 0xec
   20d1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   20d20:	00025d1c 	.word	0x00025d1c
   20d24:	00025c9c 	.word	0x00025c9c
   20d28:	00025cfc 	.word	0x00025cfc
   20d2c:	00025cbc 	.word	0x00025cbc

00020d30 <ocrypto_curve_p256_scalarmult_base>:
   20d30:	460a      	mov	r2, r1
   20d32:	4901      	ldr	r1, [pc, #4]	; (20d38 <ocrypto_curve_p256_scalarmult_base+0x8>)
   20d34:	f7ff bf46 	b.w	20bc4 <ocrypto_curve_p256_scalarmult>
   20d38:	00025c5c 	.word	0x00025c5c

00020d3c <ocrypto_mod_p256_cneg>:
   20d3c:	b570      	push	{r4, r5, r6, lr}
   20d3e:	b088      	sub	sp, #32
   20d40:	4604      	mov	r4, r0
   20d42:	460d      	mov	r5, r1
   20d44:	4616      	mov	r6, r2
   20d46:	2100      	movs	r1, #0
   20d48:	2220      	movs	r2, #32
   20d4a:	4668      	mov	r0, sp
   20d4c:	f004 fa49 	bl	251e2 <memset>
   20d50:	2300      	movs	r3, #0
   20d52:	4629      	mov	r1, r5
   20d54:	2220      	movs	r2, #32
   20d56:	4620      	mov	r0, r4
   20d58:	9300      	str	r3, [sp, #0]
   20d5a:	f004 fa34 	bl	251c6 <memcpy>
   20d5e:	462a      	mov	r2, r5
   20d60:	4669      	mov	r1, sp
   20d62:	4668      	mov	r0, sp
   20d64:	f7e0 f95a 	bl	101c <ocrypto_mod_p256_sub>
   20d68:	4632      	mov	r2, r6
   20d6a:	4669      	mov	r1, sp
   20d6c:	4620      	mov	r0, r4
   20d6e:	f7df ff6b 	bl	c48 <ocrypto_bigint_cswap256>
   20d72:	b008      	add	sp, #32
   20d74:	bd70      	pop	{r4, r5, r6, pc}
   20d76:	bf00      	nop

00020d78 <ocrypto_mod_p256_from_bytes>:
   20d78:	680b      	ldr	r3, [r1, #0]
   20d7a:	ba1b      	rev	r3, r3
   20d7c:	61c3      	str	r3, [r0, #28]
   20d7e:	684b      	ldr	r3, [r1, #4]
   20d80:	ba1b      	rev	r3, r3
   20d82:	6183      	str	r3, [r0, #24]
   20d84:	688b      	ldr	r3, [r1, #8]
   20d86:	ba1b      	rev	r3, r3
   20d88:	6143      	str	r3, [r0, #20]
   20d8a:	68cb      	ldr	r3, [r1, #12]
   20d8c:	ba1b      	rev	r3, r3
   20d8e:	6103      	str	r3, [r0, #16]
   20d90:	690b      	ldr	r3, [r1, #16]
   20d92:	ba1b      	rev	r3, r3
   20d94:	60c3      	str	r3, [r0, #12]
   20d96:	694b      	ldr	r3, [r1, #20]
   20d98:	ba1b      	rev	r3, r3
   20d9a:	6083      	str	r3, [r0, #8]
   20d9c:	698b      	ldr	r3, [r1, #24]
   20d9e:	ba1b      	rev	r3, r3
   20da0:	6043      	str	r3, [r0, #4]
   20da2:	69cb      	ldr	r3, [r1, #28]
   20da4:	ba1b      	rev	r3, r3
   20da6:	6003      	str	r3, [r0, #0]
   20da8:	4770      	bx	lr
   20daa:	bf00      	nop

00020dac <ocrypto_mod_p256_to_bytes>:
   20dac:	69cb      	ldr	r3, [r1, #28]
   20dae:	ba1b      	rev	r3, r3
   20db0:	6003      	str	r3, [r0, #0]
   20db2:	698b      	ldr	r3, [r1, #24]
   20db4:	ba1b      	rev	r3, r3
   20db6:	6043      	str	r3, [r0, #4]
   20db8:	694b      	ldr	r3, [r1, #20]
   20dba:	ba1b      	rev	r3, r3
   20dbc:	6083      	str	r3, [r0, #8]
   20dbe:	690b      	ldr	r3, [r1, #16]
   20dc0:	ba1b      	rev	r3, r3
   20dc2:	60c3      	str	r3, [r0, #12]
   20dc4:	68cb      	ldr	r3, [r1, #12]
   20dc6:	ba1b      	rev	r3, r3
   20dc8:	6103      	str	r3, [r0, #16]
   20dca:	688b      	ldr	r3, [r1, #8]
   20dcc:	ba1b      	rev	r3, r3
   20dce:	6143      	str	r3, [r0, #20]
   20dd0:	684b      	ldr	r3, [r1, #4]
   20dd2:	ba1b      	rev	r3, r3
   20dd4:	6183      	str	r3, [r0, #24]
   20dd6:	680b      	ldr	r3, [r1, #0]
   20dd8:	ba1b      	rev	r3, r3
   20dda:	61c3      	str	r3, [r0, #28]
   20ddc:	4770      	bx	lr
   20dde:	bf00      	nop

00020de0 <ocrypto_mod_p256_inv>:
   20de0:	b570      	push	{r4, r5, r6, lr}
   20de2:	b098      	sub	sp, #96	; 0x60
   20de4:	460d      	mov	r5, r1
   20de6:	4606      	mov	r6, r0
   20de8:	a810      	add	r0, sp, #64	; 0x40
   20dea:	f7e0 f9c7 	bl	117c <ocrypto_mod_p256_sqr>
   20dee:	462a      	mov	r2, r5
   20df0:	a910      	add	r1, sp, #64	; 0x40
   20df2:	4668      	mov	r0, sp
   20df4:	f7e0 f9aa 	bl	114c <ocrypto_mod_p256_mul>
   20df8:	4669      	mov	r1, sp
   20dfa:	a810      	add	r0, sp, #64	; 0x40
   20dfc:	f7e0 f9be 	bl	117c <ocrypto_mod_p256_sqr>
   20e00:	a910      	add	r1, sp, #64	; 0x40
   20e02:	4608      	mov	r0, r1
   20e04:	f7e0 f9ba 	bl	117c <ocrypto_mod_p256_sqr>
   20e08:	466a      	mov	r2, sp
   20e0a:	a910      	add	r1, sp, #64	; 0x40
   20e0c:	a808      	add	r0, sp, #32
   20e0e:	f7e0 f99d 	bl	114c <ocrypto_mod_p256_mul>
   20e12:	a908      	add	r1, sp, #32
   20e14:	a810      	add	r0, sp, #64	; 0x40
   20e16:	f7e0 f9b1 	bl	117c <ocrypto_mod_p256_sqr>
   20e1a:	a910      	add	r1, sp, #64	; 0x40
   20e1c:	4608      	mov	r0, r1
   20e1e:	f7e0 f9ad 	bl	117c <ocrypto_mod_p256_sqr>
   20e22:	a910      	add	r1, sp, #64	; 0x40
   20e24:	4608      	mov	r0, r1
   20e26:	f7e0 f9a9 	bl	117c <ocrypto_mod_p256_sqr>
   20e2a:	a910      	add	r1, sp, #64	; 0x40
   20e2c:	4608      	mov	r0, r1
   20e2e:	f7e0 f9a5 	bl	117c <ocrypto_mod_p256_sqr>
   20e32:	a910      	add	r1, sp, #64	; 0x40
   20e34:	aa08      	add	r2, sp, #32
   20e36:	4608      	mov	r0, r1
   20e38:	f7e0 f988 	bl	114c <ocrypto_mod_p256_mul>
   20e3c:	a910      	add	r1, sp, #64	; 0x40
   20e3e:	4608      	mov	r0, r1
   20e40:	f7e0 f99c 	bl	117c <ocrypto_mod_p256_sqr>
   20e44:	a910      	add	r1, sp, #64	; 0x40
   20e46:	4608      	mov	r0, r1
   20e48:	f7e0 f998 	bl	117c <ocrypto_mod_p256_sqr>
   20e4c:	a910      	add	r1, sp, #64	; 0x40
   20e4e:	466a      	mov	r2, sp
   20e50:	a808      	add	r0, sp, #32
   20e52:	f7e0 f97b 	bl	114c <ocrypto_mod_p256_mul>
   20e56:	2405      	movs	r4, #5
   20e58:	a908      	add	r1, sp, #32
   20e5a:	a810      	add	r0, sp, #64	; 0x40
   20e5c:	f7e0 f98e 	bl	117c <ocrypto_mod_p256_sqr>
   20e60:	a910      	add	r1, sp, #64	; 0x40
   20e62:	4608      	mov	r0, r1
   20e64:	f7e0 f98a 	bl	117c <ocrypto_mod_p256_sqr>
   20e68:	3c01      	subs	r4, #1
   20e6a:	a910      	add	r1, sp, #64	; 0x40
   20e6c:	d1f5      	bne.n	20e5a <ocrypto_mod_p256_inv+0x7a>
   20e6e:	aa08      	add	r2, sp, #32
   20e70:	4608      	mov	r0, r1
   20e72:	f7e0 f96b 	bl	114c <ocrypto_mod_p256_mul>
   20e76:	2405      	movs	r4, #5
   20e78:	a910      	add	r1, sp, #64	; 0x40
   20e7a:	4608      	mov	r0, r1
   20e7c:	f7e0 f97e 	bl	117c <ocrypto_mod_p256_sqr>
   20e80:	a910      	add	r1, sp, #64	; 0x40
   20e82:	4608      	mov	r0, r1
   20e84:	f7e0 f97a 	bl	117c <ocrypto_mod_p256_sqr>
   20e88:	3c01      	subs	r4, #1
   20e8a:	d1f5      	bne.n	20e78 <ocrypto_mod_p256_inv+0x98>
   20e8c:	a910      	add	r1, sp, #64	; 0x40
   20e8e:	aa08      	add	r2, sp, #32
   20e90:	4608      	mov	r0, r1
   20e92:	f7e0 f95b 	bl	114c <ocrypto_mod_p256_mul>
   20e96:	a910      	add	r1, sp, #64	; 0x40
   20e98:	a808      	add	r0, sp, #32
   20e9a:	f7e0 f96f 	bl	117c <ocrypto_mod_p256_sqr>
   20e9e:	a908      	add	r1, sp, #32
   20ea0:	4608      	mov	r0, r1
   20ea2:	f7e0 f96b 	bl	117c <ocrypto_mod_p256_sqr>
   20ea6:	a908      	add	r1, sp, #32
   20ea8:	466a      	mov	r2, sp
   20eaa:	4668      	mov	r0, sp
   20eac:	f7e0 f94e 	bl	114c <ocrypto_mod_p256_mul>
   20eb0:	2410      	movs	r4, #16
   20eb2:	4669      	mov	r1, sp
   20eb4:	a810      	add	r0, sp, #64	; 0x40
   20eb6:	f7e0 f961 	bl	117c <ocrypto_mod_p256_sqr>
   20eba:	a910      	add	r1, sp, #64	; 0x40
   20ebc:	4608      	mov	r0, r1
   20ebe:	f7e0 f95d 	bl	117c <ocrypto_mod_p256_sqr>
   20ec2:	3c01      	subs	r4, #1
   20ec4:	a910      	add	r1, sp, #64	; 0x40
   20ec6:	d1f5      	bne.n	20eb4 <ocrypto_mod_p256_inv+0xd4>
   20ec8:	462a      	mov	r2, r5
   20eca:	4608      	mov	r0, r1
   20ecc:	f7e0 f93e 	bl	114c <ocrypto_mod_p256_mul>
   20ed0:	2440      	movs	r4, #64	; 0x40
   20ed2:	a910      	add	r1, sp, #64	; 0x40
   20ed4:	4608      	mov	r0, r1
   20ed6:	f7e0 f951 	bl	117c <ocrypto_mod_p256_sqr>
   20eda:	a910      	add	r1, sp, #64	; 0x40
   20edc:	4608      	mov	r0, r1
   20ede:	f7e0 f94d 	bl	117c <ocrypto_mod_p256_sqr>
   20ee2:	3c01      	subs	r4, #1
   20ee4:	d1f5      	bne.n	20ed2 <ocrypto_mod_p256_inv+0xf2>
   20ee6:	a910      	add	r1, sp, #64	; 0x40
   20ee8:	466a      	mov	r2, sp
   20eea:	4608      	mov	r0, r1
   20eec:	f7e0 f92e 	bl	114c <ocrypto_mod_p256_mul>
   20ef0:	2410      	movs	r4, #16
   20ef2:	a910      	add	r1, sp, #64	; 0x40
   20ef4:	4608      	mov	r0, r1
   20ef6:	f7e0 f941 	bl	117c <ocrypto_mod_p256_sqr>
   20efa:	a910      	add	r1, sp, #64	; 0x40
   20efc:	4608      	mov	r0, r1
   20efe:	f7e0 f93d 	bl	117c <ocrypto_mod_p256_sqr>
   20f02:	3c01      	subs	r4, #1
   20f04:	d1f5      	bne.n	20ef2 <ocrypto_mod_p256_inv+0x112>
   20f06:	a910      	add	r1, sp, #64	; 0x40
   20f08:	466a      	mov	r2, sp
   20f0a:	4608      	mov	r0, r1
   20f0c:	f7e0 f91e 	bl	114c <ocrypto_mod_p256_mul>
   20f10:	2410      	movs	r4, #16
   20f12:	a910      	add	r1, sp, #64	; 0x40
   20f14:	4608      	mov	r0, r1
   20f16:	f7e0 f931 	bl	117c <ocrypto_mod_p256_sqr>
   20f1a:	a910      	add	r1, sp, #64	; 0x40
   20f1c:	4608      	mov	r0, r1
   20f1e:	f7e0 f92d 	bl	117c <ocrypto_mod_p256_sqr>
   20f22:	3c01      	subs	r4, #1
   20f24:	d1f5      	bne.n	20f12 <ocrypto_mod_p256_inv+0x132>
   20f26:	a910      	add	r1, sp, #64	; 0x40
   20f28:	aa08      	add	r2, sp, #32
   20f2a:	4608      	mov	r0, r1
   20f2c:	f7e0 f90e 	bl	114c <ocrypto_mod_p256_mul>
   20f30:	462a      	mov	r2, r5
   20f32:	a910      	add	r1, sp, #64	; 0x40
   20f34:	4630      	mov	r0, r6
   20f36:	f7e0 f909 	bl	114c <ocrypto_mod_p256_mul>
   20f3a:	b018      	add	sp, #96	; 0x60
   20f3c:	bd70      	pop	{r4, r5, r6, pc}
   20f3e:	bf00      	nop

00020f40 <__fpclassifyd>:
   20f40:	ec53 2b10 	vmov	r2, r3, d0
   20f44:	2b00      	cmp	r3, #0
   20f46:	b510      	push	{r4, lr}
   20f48:	4610      	mov	r0, r2
   20f4a:	d104      	bne.n	20f56 <__fpclassifyd+0x16>
   20f4c:	2800      	cmp	r0, #0
   20f4e:	bf14      	ite	ne
   20f50:	2003      	movne	r0, #3
   20f52:	2002      	moveq	r0, #2
   20f54:	bd10      	pop	{r4, pc}
   20f56:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   20f5a:	d0f7      	beq.n	20f4c <__fpclassifyd+0xc>
   20f5c:	4a0a      	ldr	r2, [pc, #40]	; (20f88 <__fpclassifyd+0x48>)
   20f5e:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
   20f62:	f5a1 1480 	sub.w	r4, r1, #1048576	; 0x100000
   20f66:	4294      	cmp	r4, r2
   20f68:	d908      	bls.n	20f7c <__fpclassifyd+0x3c>
   20f6a:	4a08      	ldr	r2, [pc, #32]	; (20f8c <__fpclassifyd+0x4c>)
   20f6c:	4213      	tst	r3, r2
   20f6e:	d007      	beq.n	20f80 <__fpclassifyd+0x40>
   20f70:	4291      	cmp	r1, r2
   20f72:	d107      	bne.n	20f84 <__fpclassifyd+0x44>
   20f74:	fab0 f080 	clz	r0, r0
   20f78:	0940      	lsrs	r0, r0, #5
   20f7a:	e7eb      	b.n	20f54 <__fpclassifyd+0x14>
   20f7c:	2004      	movs	r0, #4
   20f7e:	e7e9      	b.n	20f54 <__fpclassifyd+0x14>
   20f80:	2003      	movs	r0, #3
   20f82:	e7e7      	b.n	20f54 <__fpclassifyd+0x14>
   20f84:	2000      	movs	r0, #0
   20f86:	e7e5      	b.n	20f54 <__fpclassifyd+0x14>
   20f88:	7fdfffff 	.word	0x7fdfffff
   20f8c:	7ff00000 	.word	0x7ff00000

00020f90 <round>:
   20f90:	ec51 0b10 	vmov	r0, r1, d0
   20f94:	b570      	push	{r4, r5, r6, lr}
   20f96:	f3c1 540a 	ubfx	r4, r1, #20, #11
   20f9a:	f2a4 32ff 	subw	r2, r4, #1023	; 0x3ff
   20f9e:	2a13      	cmp	r2, #19
   20fa0:	460b      	mov	r3, r1
   20fa2:	4605      	mov	r5, r0
   20fa4:	dc1b      	bgt.n	20fde <round+0x4e>
   20fa6:	2a00      	cmp	r2, #0
   20fa8:	da0b      	bge.n	20fc2 <round+0x32>
   20faa:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
   20fae:	3201      	adds	r2, #1
   20fb0:	bf04      	itt	eq
   20fb2:	f043 537f 	orreq.w	r3, r3, #1069547520	; 0x3fc00000
   20fb6:	f443 1340 	orreq.w	r3, r3, #3145728	; 0x300000
   20fba:	2200      	movs	r2, #0
   20fbc:	4619      	mov	r1, r3
   20fbe:	4610      	mov	r0, r2
   20fc0:	e015      	b.n	20fee <round+0x5e>
   20fc2:	4c15      	ldr	r4, [pc, #84]	; (21018 <round+0x88>)
   20fc4:	4114      	asrs	r4, r2
   20fc6:	ea04 0601 	and.w	r6, r4, r1
   20fca:	4306      	orrs	r6, r0
   20fcc:	d00f      	beq.n	20fee <round+0x5e>
   20fce:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   20fd2:	fa41 f202 	asr.w	r2, r1, r2
   20fd6:	4413      	add	r3, r2
   20fd8:	ea23 0304 	bic.w	r3, r3, r4
   20fdc:	e7ed      	b.n	20fba <round+0x2a>
   20fde:	2a33      	cmp	r2, #51	; 0x33
   20fe0:	dd08      	ble.n	20ff4 <round+0x64>
   20fe2:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   20fe6:	d102      	bne.n	20fee <round+0x5e>
   20fe8:	4602      	mov	r2, r0
   20fea:	f7df f88f 	bl	10c <__adddf3>
   20fee:	ec41 0b10 	vmov	d0, r0, r1
   20ff2:	bd70      	pop	{r4, r5, r6, pc}
   20ff4:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
   20ff8:	f04f 34ff 	mov.w	r4, #4294967295
   20ffc:	40f4      	lsrs	r4, r6
   20ffe:	4204      	tst	r4, r0
   21000:	d0f5      	beq.n	20fee <round+0x5e>
   21002:	f1c2 0133 	rsb	r1, r2, #51	; 0x33
   21006:	2201      	movs	r2, #1
   21008:	408a      	lsls	r2, r1
   2100a:	1952      	adds	r2, r2, r5
   2100c:	bf28      	it	cs
   2100e:	3301      	addcs	r3, #1
   21010:	ea22 0204 	bic.w	r2, r2, r4
   21014:	e7d2      	b.n	20fbc <round+0x2c>
   21016:	bf00      	nop
   21018:	000fffff 	.word	0x000fffff

0002101c <pow>:
   2101c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   21020:	ec59 8b10 	vmov	r8, r9, d0
   21024:	ec57 6b11 	vmov	r6, r7, d1
   21028:	f7f2 fb62 	bl	136f0 <__ieee754_pow>
   2102c:	4b4f      	ldr	r3, [pc, #316]	; (2116c <pow+0x150>)
   2102e:	f993 3000 	ldrsb.w	r3, [r3]
   21032:	3301      	adds	r3, #1
   21034:	ec55 4b10 	vmov	r4, r5, d0
   21038:	d015      	beq.n	21066 <pow+0x4a>
   2103a:	4632      	mov	r2, r6
   2103c:	463b      	mov	r3, r7
   2103e:	4630      	mov	r0, r6
   21040:	4639      	mov	r1, r7
   21042:	f7e0 f8b3 	bl	11ac <__aeabi_dcmpun>
   21046:	b970      	cbnz	r0, 21066 <pow+0x4a>
   21048:	4642      	mov	r2, r8
   2104a:	464b      	mov	r3, r9
   2104c:	4640      	mov	r0, r8
   2104e:	4649      	mov	r1, r9
   21050:	f7e0 f8ac 	bl	11ac <__aeabi_dcmpun>
   21054:	2200      	movs	r2, #0
   21056:	2300      	movs	r3, #0
   21058:	b148      	cbz	r0, 2106e <pow+0x52>
   2105a:	4630      	mov	r0, r6
   2105c:	4639      	mov	r1, r7
   2105e:	f7df fc73 	bl	948 <__aeabi_dcmpeq>
   21062:	2800      	cmp	r0, #0
   21064:	d17e      	bne.n	21164 <pow+0x148>
   21066:	ec45 4b10 	vmov	d0, r4, r5
   2106a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2106e:	4640      	mov	r0, r8
   21070:	4649      	mov	r1, r9
   21072:	f7df fc69 	bl	948 <__aeabi_dcmpeq>
   21076:	b1e0      	cbz	r0, 210b2 <pow+0x96>
   21078:	2200      	movs	r2, #0
   2107a:	2300      	movs	r3, #0
   2107c:	4630      	mov	r0, r6
   2107e:	4639      	mov	r1, r7
   21080:	f7df fc62 	bl	948 <__aeabi_dcmpeq>
   21084:	2800      	cmp	r0, #0
   21086:	d16d      	bne.n	21164 <pow+0x148>
   21088:	ec47 6b10 	vmov	d0, r6, r7
   2108c:	f004 f880 	bl	25190 <finite>
   21090:	2800      	cmp	r0, #0
   21092:	d0e8      	beq.n	21066 <pow+0x4a>
   21094:	2200      	movs	r2, #0
   21096:	2300      	movs	r3, #0
   21098:	4630      	mov	r0, r6
   2109a:	4639      	mov	r1, r7
   2109c:	f7df fc5e 	bl	95c <__aeabi_dcmplt>
   210a0:	2800      	cmp	r0, #0
   210a2:	d0e0      	beq.n	21066 <pow+0x4a>
   210a4:	f001 fb75 	bl	22792 <__errno>
   210a8:	2321      	movs	r3, #33	; 0x21
   210aa:	6003      	str	r3, [r0, #0]
   210ac:	4d30      	ldr	r5, [pc, #192]	; (21170 <pow+0x154>)
   210ae:	2400      	movs	r4, #0
   210b0:	e7d9      	b.n	21066 <pow+0x4a>
   210b2:	ec45 4b10 	vmov	d0, r4, r5
   210b6:	f004 f86b 	bl	25190 <finite>
   210ba:	bbc0      	cbnz	r0, 2112e <pow+0x112>
   210bc:	ec49 8b10 	vmov	d0, r8, r9
   210c0:	f004 f866 	bl	25190 <finite>
   210c4:	b398      	cbz	r0, 2112e <pow+0x112>
   210c6:	ec47 6b10 	vmov	d0, r6, r7
   210ca:	f004 f861 	bl	25190 <finite>
   210ce:	b370      	cbz	r0, 2112e <pow+0x112>
   210d0:	4622      	mov	r2, r4
   210d2:	462b      	mov	r3, r5
   210d4:	4620      	mov	r0, r4
   210d6:	4629      	mov	r1, r5
   210d8:	f7e0 f868 	bl	11ac <__aeabi_dcmpun>
   210dc:	b160      	cbz	r0, 210f8 <pow+0xdc>
   210de:	f001 fb58 	bl	22792 <__errno>
   210e2:	2321      	movs	r3, #33	; 0x21
   210e4:	6003      	str	r3, [r0, #0]
   210e6:	2200      	movs	r2, #0
   210e8:	2300      	movs	r3, #0
   210ea:	4610      	mov	r0, r2
   210ec:	4619      	mov	r1, r3
   210ee:	f7df faed 	bl	6cc <__aeabi_ddiv>
   210f2:	4604      	mov	r4, r0
   210f4:	460d      	mov	r5, r1
   210f6:	e7b6      	b.n	21066 <pow+0x4a>
   210f8:	f001 fb4b 	bl	22792 <__errno>
   210fc:	2322      	movs	r3, #34	; 0x22
   210fe:	6003      	str	r3, [r0, #0]
   21100:	2200      	movs	r2, #0
   21102:	2300      	movs	r3, #0
   21104:	4640      	mov	r0, r8
   21106:	4649      	mov	r1, r9
   21108:	f7df fc28 	bl	95c <__aeabi_dcmplt>
   2110c:	b910      	cbnz	r0, 21114 <pow+0xf8>
   2110e:	4d19      	ldr	r5, [pc, #100]	; (21174 <pow+0x158>)
   21110:	2400      	movs	r4, #0
   21112:	e7a8      	b.n	21066 <pow+0x4a>
   21114:	ec47 6b10 	vmov	d0, r6, r7
   21118:	f000 f91c 	bl	21354 <rint>
   2111c:	4632      	mov	r2, r6
   2111e:	ec51 0b10 	vmov	r0, r1, d0
   21122:	463b      	mov	r3, r7
   21124:	f7df fc10 	bl	948 <__aeabi_dcmpeq>
   21128:	2800      	cmp	r0, #0
   2112a:	d1f0      	bne.n	2110e <pow+0xf2>
   2112c:	e7be      	b.n	210ac <pow+0x90>
   2112e:	2200      	movs	r2, #0
   21130:	2300      	movs	r3, #0
   21132:	4620      	mov	r0, r4
   21134:	4629      	mov	r1, r5
   21136:	f7df fc07 	bl	948 <__aeabi_dcmpeq>
   2113a:	2800      	cmp	r0, #0
   2113c:	d093      	beq.n	21066 <pow+0x4a>
   2113e:	ec49 8b10 	vmov	d0, r8, r9
   21142:	f004 f825 	bl	25190 <finite>
   21146:	2800      	cmp	r0, #0
   21148:	d08d      	beq.n	21066 <pow+0x4a>
   2114a:	ec47 6b10 	vmov	d0, r6, r7
   2114e:	f004 f81f 	bl	25190 <finite>
   21152:	2800      	cmp	r0, #0
   21154:	d087      	beq.n	21066 <pow+0x4a>
   21156:	f001 fb1c 	bl	22792 <__errno>
   2115a:	2322      	movs	r3, #34	; 0x22
   2115c:	6003      	str	r3, [r0, #0]
   2115e:	2400      	movs	r4, #0
   21160:	2500      	movs	r5, #0
   21162:	e780      	b.n	21066 <pow+0x4a>
   21164:	4d04      	ldr	r5, [pc, #16]	; (21178 <pow+0x15c>)
   21166:	2400      	movs	r4, #0
   21168:	e77d      	b.n	21066 <pow+0x4a>
   2116a:	bf00      	nop
   2116c:	20000777 	.word	0x20000777
   21170:	fff00000 	.word	0xfff00000
   21174:	7ff00000 	.word	0x7ff00000
   21178:	3ff00000 	.word	0x3ff00000

0002117c <sqrt>:
   2117c:	b538      	push	{r3, r4, r5, lr}
   2117e:	ed2d 8b02 	vpush	{d8}
   21182:	ec55 4b10 	vmov	r4, r5, d0
   21186:	f000 f82d 	bl	211e4 <__ieee754_sqrt>
   2118a:	4b15      	ldr	r3, [pc, #84]	; (211e0 <sqrt+0x64>)
   2118c:	eeb0 8a40 	vmov.f32	s16, s0
   21190:	eef0 8a60 	vmov.f32	s17, s1
   21194:	f993 3000 	ldrsb.w	r3, [r3]
   21198:	3301      	adds	r3, #1
   2119a:	d019      	beq.n	211d0 <sqrt+0x54>
   2119c:	4622      	mov	r2, r4
   2119e:	462b      	mov	r3, r5
   211a0:	4620      	mov	r0, r4
   211a2:	4629      	mov	r1, r5
   211a4:	f7e0 f802 	bl	11ac <__aeabi_dcmpun>
   211a8:	b990      	cbnz	r0, 211d0 <sqrt+0x54>
   211aa:	2200      	movs	r2, #0
   211ac:	2300      	movs	r3, #0
   211ae:	4620      	mov	r0, r4
   211b0:	4629      	mov	r1, r5
   211b2:	f7df fbd3 	bl	95c <__aeabi_dcmplt>
   211b6:	b158      	cbz	r0, 211d0 <sqrt+0x54>
   211b8:	f001 faeb 	bl	22792 <__errno>
   211bc:	2321      	movs	r3, #33	; 0x21
   211be:	6003      	str	r3, [r0, #0]
   211c0:	2200      	movs	r2, #0
   211c2:	2300      	movs	r3, #0
   211c4:	4610      	mov	r0, r2
   211c6:	4619      	mov	r1, r3
   211c8:	f7df fa80 	bl	6cc <__aeabi_ddiv>
   211cc:	ec41 0b18 	vmov	d8, r0, r1
   211d0:	eeb0 0a48 	vmov.f32	s0, s16
   211d4:	eef0 0a68 	vmov.f32	s1, s17
   211d8:	ecbd 8b02 	vpop	{d8}
   211dc:	bd38      	pop	{r3, r4, r5, pc}
   211de:	bf00      	nop
   211e0:	20000777 	.word	0x20000777

000211e4 <__ieee754_sqrt>:
   211e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   211e8:	4a59      	ldr	r2, [pc, #356]	; (21350 <__ieee754_sqrt+0x16c>)
   211ea:	ec55 4b10 	vmov	r4, r5, d0
   211ee:	43aa      	bics	r2, r5
   211f0:	462b      	mov	r3, r5
   211f2:	4620      	mov	r0, r4
   211f4:	d10f      	bne.n	21216 <__ieee754_sqrt+0x32>
   211f6:	4622      	mov	r2, r4
   211f8:	4629      	mov	r1, r5
   211fa:	f7df f93d 	bl	478 <__aeabi_dmul>
   211fe:	4602      	mov	r2, r0
   21200:	460b      	mov	r3, r1
   21202:	4620      	mov	r0, r4
   21204:	4629      	mov	r1, r5
   21206:	f7de ff81 	bl	10c <__adddf3>
   2120a:	4604      	mov	r4, r0
   2120c:	460d      	mov	r5, r1
   2120e:	ec45 4b10 	vmov	d0, r4, r5
   21212:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21216:	2d00      	cmp	r5, #0
   21218:	dc0d      	bgt.n	21236 <__ieee754_sqrt+0x52>
   2121a:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
   2121e:	4322      	orrs	r2, r4
   21220:	d0f5      	beq.n	2120e <__ieee754_sqrt+0x2a>
   21222:	b195      	cbz	r5, 2124a <__ieee754_sqrt+0x66>
   21224:	4622      	mov	r2, r4
   21226:	4629      	mov	r1, r5
   21228:	f7de ff6e 	bl	108 <__aeabi_dsub>
   2122c:	4602      	mov	r2, r0
   2122e:	460b      	mov	r3, r1
   21230:	f7df fa4c 	bl	6cc <__aeabi_ddiv>
   21234:	e7e9      	b.n	2120a <__ieee754_sqrt+0x26>
   21236:	152a      	asrs	r2, r5, #20
   21238:	d115      	bne.n	21266 <__ieee754_sqrt+0x82>
   2123a:	2100      	movs	r1, #0
   2123c:	e009      	b.n	21252 <__ieee754_sqrt+0x6e>
   2123e:	0ac3      	lsrs	r3, r0, #11
   21240:	3a15      	subs	r2, #21
   21242:	0540      	lsls	r0, r0, #21
   21244:	2b00      	cmp	r3, #0
   21246:	d0fa      	beq.n	2123e <__ieee754_sqrt+0x5a>
   21248:	e7f7      	b.n	2123a <__ieee754_sqrt+0x56>
   2124a:	462a      	mov	r2, r5
   2124c:	e7fa      	b.n	21244 <__ieee754_sqrt+0x60>
   2124e:	005b      	lsls	r3, r3, #1
   21250:	3101      	adds	r1, #1
   21252:	02dd      	lsls	r5, r3, #11
   21254:	d5fb      	bpl.n	2124e <__ieee754_sqrt+0x6a>
   21256:	1e4c      	subs	r4, r1, #1
   21258:	1b12      	subs	r2, r2, r4
   2125a:	f1c1 0420 	rsb	r4, r1, #32
   2125e:	fa20 f404 	lsr.w	r4, r0, r4
   21262:	4323      	orrs	r3, r4
   21264:	4088      	lsls	r0, r1
   21266:	f3c3 0313 	ubfx	r3, r3, #0, #20
   2126a:	07d4      	lsls	r4, r2, #31
   2126c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   21270:	bf5c      	itt	pl
   21272:	005b      	lslpl	r3, r3, #1
   21274:	eb03 73d0 	addpl.w	r3, r3, r0, lsr #31
   21278:	f2a2 35ff 	subw	r5, r2, #1023	; 0x3ff
   2127c:	bf58      	it	pl
   2127e:	0040      	lslpl	r0, r0, #1
   21280:	005b      	lsls	r3, r3, #1
   21282:	2600      	movs	r6, #0
   21284:	106d      	asrs	r5, r5, #1
   21286:	eb03 73d0 	add.w	r3, r3, r0, lsr #31
   2128a:	0047      	lsls	r7, r0, #1
   2128c:	f04f 0e16 	mov.w	lr, #22
   21290:	46b0      	mov	r8, r6
   21292:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   21296:	eb08 0102 	add.w	r1, r8, r2
   2129a:	4299      	cmp	r1, r3
   2129c:	bfde      	ittt	le
   2129e:	1a5b      	suble	r3, r3, r1
   212a0:	eb02 0801 	addle.w	r8, r2, r1
   212a4:	18b6      	addle	r6, r6, r2
   212a6:	005b      	lsls	r3, r3, #1
   212a8:	f1be 0e01 	subs.w	lr, lr, #1
   212ac:	eb03 73d7 	add.w	r3, r3, r7, lsr #31
   212b0:	ea4f 0252 	mov.w	r2, r2, lsr #1
   212b4:	ea4f 0747 	mov.w	r7, r7, lsl #1
   212b8:	d1ed      	bne.n	21296 <__ieee754_sqrt+0xb2>
   212ba:	46f4      	mov	ip, lr
   212bc:	2020      	movs	r0, #32
   212be:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
   212c2:	4598      	cmp	r8, r3
   212c4:	eb01 020e 	add.w	r2, r1, lr
   212c8:	db2f      	blt.n	2132a <__ieee754_sqrt+0x146>
   212ca:	d10b      	bne.n	212e4 <__ieee754_sqrt+0x100>
   212cc:	42ba      	cmp	r2, r7
   212ce:	d809      	bhi.n	212e4 <__ieee754_sqrt+0x100>
   212d0:	2a00      	cmp	r2, #0
   212d2:	eb01 0e02 	add.w	lr, r1, r2
   212d6:	da02      	bge.n	212de <__ieee754_sqrt+0xfa>
   212d8:	f1be 0f00 	cmp.w	lr, #0
   212dc:	da2c      	bge.n	21338 <__ieee754_sqrt+0x154>
   212de:	2300      	movs	r3, #0
   212e0:	1abf      	subs	r7, r7, r2
   212e2:	448c      	add	ip, r1
   212e4:	005b      	lsls	r3, r3, #1
   212e6:	3801      	subs	r0, #1
   212e8:	eb03 73d7 	add.w	r3, r3, r7, lsr #31
   212ec:	ea4f 0151 	mov.w	r1, r1, lsr #1
   212f0:	ea4f 0747 	mov.w	r7, r7, lsl #1
   212f4:	d1e5      	bne.n	212c2 <__ieee754_sqrt+0xde>
   212f6:	433b      	orrs	r3, r7
   212f8:	d008      	beq.n	2130c <__ieee754_sqrt+0x128>
   212fa:	f1bc 3fff 	cmp.w	ip, #4294967295
   212fe:	bf13      	iteet	ne
   21300:	f10c 0301 	addne.w	r3, ip, #1
   21304:	3601      	addeq	r6, #1
   21306:	4684      	moveq	ip, r0
   21308:	f023 0c01 	bicne.w	ip, r3, #1
   2130c:	1072      	asrs	r2, r6, #1
   2130e:	ea4f 035c 	mov.w	r3, ip, lsr #1
   21312:	07f1      	lsls	r1, r6, #31
   21314:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
   21318:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
   2131c:	bf48      	it	mi
   2131e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
   21322:	eb02 5105 	add.w	r1, r2, r5, lsl #20
   21326:	4618      	mov	r0, r3
   21328:	e76f      	b.n	2120a <__ieee754_sqrt+0x26>
   2132a:	2a00      	cmp	r2, #0
   2132c:	eb01 0e02 	add.w	lr, r1, r2
   21330:	da0b      	bge.n	2134a <__ieee754_sqrt+0x166>
   21332:	f1be 0f00 	cmp.w	lr, #0
   21336:	db08      	blt.n	2134a <__ieee754_sqrt+0x166>
   21338:	f108 0401 	add.w	r4, r8, #1
   2133c:	42ba      	cmp	r2, r7
   2133e:	eba3 0308 	sub.w	r3, r3, r8
   21342:	d900      	bls.n	21346 <__ieee754_sqrt+0x162>
   21344:	3b01      	subs	r3, #1
   21346:	46a0      	mov	r8, r4
   21348:	e7ca      	b.n	212e0 <__ieee754_sqrt+0xfc>
   2134a:	4644      	mov	r4, r8
   2134c:	e7f6      	b.n	2133c <__ieee754_sqrt+0x158>
   2134e:	bf00      	nop
   21350:	7ff00000 	.word	0x7ff00000

00021354 <rint>:
   21354:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   21356:	ec53 2b10 	vmov	r2, r3, d0
   2135a:	f3c3 500a 	ubfx	r0, r3, #20, #11
   2135e:	f2a0 35ff 	subw	r5, r0, #1023	; 0x3ff
   21362:	2d13      	cmp	r5, #19
   21364:	461c      	mov	r4, r3
   21366:	4611      	mov	r1, r2
   21368:	ea4f 76d3 	mov.w	r6, r3, lsr #31
   2136c:	dc5b      	bgt.n	21426 <rint+0xd2>
   2136e:	2d00      	cmp	r5, #0
   21370:	da2f      	bge.n	213d2 <rint+0x7e>
   21372:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   21376:	4310      	orrs	r0, r2
   21378:	d027      	beq.n	213ca <rint+0x76>
   2137a:	f3c3 0513 	ubfx	r5, r3, #0, #20
   2137e:	4315      	orrs	r5, r2
   21380:	426b      	negs	r3, r5
   21382:	432b      	orrs	r3, r5
   21384:	4610      	mov	r0, r2
   21386:	0b1b      	lsrs	r3, r3, #12
   21388:	0c62      	lsrs	r2, r4, #17
   2138a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
   2138e:	0452      	lsls	r2, r2, #17
   21390:	ea43 0102 	orr.w	r1, r3, r2
   21394:	460b      	mov	r3, r1
   21396:	4933      	ldr	r1, [pc, #204]	; (21464 <rint+0x110>)
   21398:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
   2139c:	e9d1 6700 	ldrd	r6, r7, [r1]
   213a0:	4602      	mov	r2, r0
   213a2:	4639      	mov	r1, r7
   213a4:	4630      	mov	r0, r6
   213a6:	f7de feb1 	bl	10c <__adddf3>
   213aa:	e9cd 0100 	strd	r0, r1, [sp]
   213ae:	463b      	mov	r3, r7
   213b0:	4632      	mov	r2, r6
   213b2:	e9dd 0100 	ldrd	r0, r1, [sp]
   213b6:	f7de fea7 	bl	108 <__aeabi_dsub>
   213ba:	f004 4400 	and.w	r4, r4, #2147483648	; 0x80000000
   213be:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   213c2:	ea44 0703 	orr.w	r7, r4, r3
   213c6:	4602      	mov	r2, r0
   213c8:	463b      	mov	r3, r7
   213ca:	ec43 2b10 	vmov	d0, r2, r3
   213ce:	b003      	add	sp, #12
   213d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   213d2:	4825      	ldr	r0, [pc, #148]	; (21468 <rint+0x114>)
   213d4:	4128      	asrs	r0, r5
   213d6:	ea00 0703 	and.w	r7, r0, r3
   213da:	4317      	orrs	r7, r2
   213dc:	d0f5      	beq.n	213ca <rint+0x76>
   213de:	0843      	lsrs	r3, r0, #1
   213e0:	ea04 0050 	and.w	r0, r4, r0, lsr #1
   213e4:	4301      	orrs	r1, r0
   213e6:	d00a      	beq.n	213fe <rint+0xaa>
   213e8:	f1a5 0213 	sub.w	r2, r5, #19
   213ec:	ea24 0303 	bic.w	r3, r4, r3
   213f0:	4251      	negs	r1, r2
   213f2:	f44f 2480 	mov.w	r4, #262144	; 0x40000
   213f6:	4151      	adcs	r1, r2
   213f8:	412c      	asrs	r4, r5
   213fa:	07c9      	lsls	r1, r1, #31
   213fc:	431c      	orrs	r4, r3
   213fe:	460a      	mov	r2, r1
   21400:	4918      	ldr	r1, [pc, #96]	; (21464 <rint+0x110>)
   21402:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
   21406:	4623      	mov	r3, r4
   21408:	e9d1 4500 	ldrd	r4, r5, [r1]
   2140c:	4620      	mov	r0, r4
   2140e:	4629      	mov	r1, r5
   21410:	f7de fe7c 	bl	10c <__adddf3>
   21414:	e9cd 0100 	strd	r0, r1, [sp]
   21418:	e9dd 0100 	ldrd	r0, r1, [sp]
   2141c:	4622      	mov	r2, r4
   2141e:	462b      	mov	r3, r5
   21420:	f7de fe72 	bl	108 <__aeabi_dsub>
   21424:	e008      	b.n	21438 <rint+0xe4>
   21426:	2d33      	cmp	r5, #51	; 0x33
   21428:	dd09      	ble.n	2143e <rint+0xea>
   2142a:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   2142e:	d1cc      	bne.n	213ca <rint+0x76>
   21430:	4610      	mov	r0, r2
   21432:	4619      	mov	r1, r3
   21434:	f7de fe6a 	bl	10c <__adddf3>
   21438:	4602      	mov	r2, r0
   2143a:	460b      	mov	r3, r1
   2143c:	e7c5      	b.n	213ca <rint+0x76>
   2143e:	f2a0 4513 	subw	r5, r0, #1043	; 0x413
   21442:	f04f 30ff 	mov.w	r0, #4294967295
   21446:	40e8      	lsrs	r0, r5
   21448:	4202      	tst	r2, r0
   2144a:	d0be      	beq.n	213ca <rint+0x76>
   2144c:	0843      	lsrs	r3, r0, #1
   2144e:	ea11 0050 	ands.w	r0, r1, r0, lsr #1
   21452:	bf1f      	itttt	ne
   21454:	ea21 0303 	bicne.w	r3, r1, r3
   21458:	f04f 4180 	movne.w	r1, #1073741824	; 0x40000000
   2145c:	4129      	asrne	r1, r5
   2145e:	4319      	orrne	r1, r3
   21460:	e7cd      	b.n	213fe <rint+0xaa>
   21462:	bf00      	nop
   21464:	000256e8 	.word	0x000256e8
   21468:	000fffff 	.word	0x000fffff

0002146c <CheckAdjacentPixels>:
 static int CheckAdjacentPixels(uint16_t pix1, uint16_t pix2)
 {
     
     int pixPosDif;
     uint16_t lp1 = pix1 >> 5;
     uint16_t lp2 = pix2 >> 5;
   2146c:	094a      	lsrs	r2, r1, #5
     uint16_t cp1 = pix1 - (lp1 << 5);
     uint16_t cp2 = pix2 - (lp2 << 5);
     
     pixPosDif = lp1 - lp2;
   2146e:	ebc2 1350 	rsb	r3, r2, r0, lsr #5
     if(pixPosDif > -2 && pixPosDif < 2)
   21472:	3301      	adds	r3, #1
   21474:	2b02      	cmp	r3, #2
 {
   21476:	b510      	push	{r4, lr}
     uint16_t lp1 = pix1 >> 5;
   21478:	ea4f 1450 	mov.w	r4, r0, lsr #5
     if(pixPosDif > -2 && pixPosDif < 2)
   2147c:	d80d      	bhi.n	2149a <CheckAdjacentPixels+0x2e>
     uint16_t cp1 = pix1 - (lp1 << 5);
   2147e:	eba0 1044 	sub.w	r0, r0, r4, lsl #5
     uint16_t cp2 = pix2 - (lp2 << 5);
   21482:	eba1 1142 	sub.w	r1, r1, r2, lsl #5
     {
        pixPosDif = cp1 - cp2;
   21486:	b280      	uxth	r0, r0
   21488:	b289      	uxth	r1, r1
   2148a:	1a40      	subs	r0, r0, r1
        if(pixPosDif > -2 && pixPosDif < 2)
   2148c:	3001      	adds	r0, #1
        {
            return -6;
   2148e:	2802      	cmp	r0, #2
   21490:	bf8c      	ite	hi
   21492:	2000      	movhi	r0, #0
   21494:	f06f 0005 	mvnls.w	r0, #5
        }

     } 
      
     return 0;    
 }
   21498:	bd10      	pop	{r4, pc}
     return 0;    
   2149a:	2000      	movs	r0, #0
   2149c:	e7fc      	b.n	21498 <CheckAdjacentPixels+0x2c>

0002149e <MLX90640_DumpEE>:
{
   2149e:	460b      	mov	r3, r1
     return MLX90640_I2CRead(slaveAddr, MLX90640_EEPROM_START_ADDRESS, MLX90640_EEPROM_DUMP_NUM, eeData);
   214a0:	f44f 7250 	mov.w	r2, #832	; 0x340
   214a4:	f44f 5110 	mov.w	r1, #9216	; 0x2400
   214a8:	f7f2 bed0 	b.w	1424c <MLX90640_I2CRead>

000214ac <MLX90640_SynchFrame>:
{
   214ac:	b513      	push	{r0, r1, r4, lr}
    error = MLX90640_I2CWrite(slaveAddr, MLX90640_STATUS_REG, MLX90640_INIT_STATUS_VALUE);
   214ae:	2230      	movs	r2, #48	; 0x30
   214b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
{
   214b4:	4604      	mov	r4, r0
    error = MLX90640_I2CWrite(slaveAddr, MLX90640_STATUS_REG, MLX90640_INIT_STATUS_VALUE);
   214b6:	f7f2 ff19 	bl	142ec <MLX90640_I2CWrite>
    if(error == -MLX90640_I2C_NACK_ERROR)
   214ba:	1c42      	adds	r2, r0, #1
   214bc:	d00c      	beq.n	214d8 <MLX90640_SynchFrame+0x2c>
        error = MLX90640_I2CRead(slaveAddr, MLX90640_STATUS_REG, 1, &statusRegister);
   214be:	f10d 0306 	add.w	r3, sp, #6
   214c2:	2201      	movs	r2, #1
   214c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   214c8:	4620      	mov	r0, r4
   214ca:	f7f2 febf 	bl	1424c <MLX90640_I2CRead>
        if(error != MLX90640_NO_ERROR)
   214ce:	b918      	cbnz	r0, 214d8 <MLX90640_SynchFrame+0x2c>
        dataReady = MLX90640_GET_DATA_READY(statusRegister); 
   214d0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    while(dataReady == 0)
   214d4:	071b      	lsls	r3, r3, #28
   214d6:	d5f2      	bpl.n	214be <MLX90640_SynchFrame+0x12>
}
   214d8:	b002      	add	sp, #8
   214da:	bd10      	pop	{r4, pc}

000214dc <MLX90640_GetFrameData>:
{
   214dc:	b570      	push	{r4, r5, r6, lr}
   214de:	4606      	mov	r6, r0
   214e0:	b0a2      	sub	sp, #136	; 0x88
   214e2:	460c      	mov	r4, r1
        error = MLX90640_I2CRead(slaveAddr, MLX90640_STATUS_REG, 1, &statusRegister);
   214e4:	f10d 0306 	add.w	r3, sp, #6
   214e8:	2201      	movs	r2, #1
   214ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   214ee:	4630      	mov	r0, r6
   214f0:	f7f2 feac 	bl	1424c <MLX90640_I2CRead>
        if(error != MLX90640_NO_ERROR)
   214f4:	2800      	cmp	r0, #0
   214f6:	f040 8097 	bne.w	21628 <MLX90640_GetFrameData+0x14c>
        dataReady = MLX90640_GET_DATA_READY(statusRegister); 
   214fa:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    while(dataReady == 0)
   214fe:	071a      	lsls	r2, r3, #28
   21500:	d5f0      	bpl.n	214e4 <MLX90640_GetFrameData+0x8>
    error = MLX90640_I2CWrite(slaveAddr, MLX90640_STATUS_REG, MLX90640_INIT_STATUS_VALUE);
   21502:	2230      	movs	r2, #48	; 0x30
   21504:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   21508:	4630      	mov	r0, r6
   2150a:	f7f2 feef 	bl	142ec <MLX90640_I2CWrite>
    if(error == -MLX90640_I2C_NACK_ERROR)
   2150e:	1c43      	adds	r3, r0, #1
   21510:	f000 808a 	beq.w	21628 <MLX90640_GetFrameData+0x14c>
    error = MLX90640_I2CRead(slaveAddr, MLX90640_PIXEL_DATA_START_ADDRESS, MLX90640_PIXEL_NUM, frameData); 
   21514:	4623      	mov	r3, r4
   21516:	f44f 7240 	mov.w	r2, #768	; 0x300
   2151a:	f44f 6180 	mov.w	r1, #1024	; 0x400
   2151e:	4630      	mov	r0, r6
   21520:	f7f2 fe94 	bl	1424c <MLX90640_I2CRead>
    if(error != MLX90640_NO_ERROR)
   21524:	2800      	cmp	r0, #0
   21526:	d17f      	bne.n	21628 <MLX90640_GetFrameData+0x14c>
    error = MLX90640_I2CRead(slaveAddr, MLX90640_AUX_DATA_START_ADDRESS, MLX90640_AUX_NUM, data); 
   21528:	ad02      	add	r5, sp, #8
   2152a:	462b      	mov	r3, r5
   2152c:	2240      	movs	r2, #64	; 0x40
   2152e:	f44f 61e0 	mov.w	r1, #1792	; 0x700
   21532:	4630      	mov	r0, r6
   21534:	f7f2 fe8a 	bl	1424c <MLX90640_I2CRead>
    if(error != MLX90640_NO_ERROR)
   21538:	2800      	cmp	r0, #0
   2153a:	d175      	bne.n	21628 <MLX90640_GetFrameData+0x14c>
    error = MLX90640_I2CRead(slaveAddr, MLX90640_CTRL_REG, 1, &controlRegister1);
   2153c:	ab01      	add	r3, sp, #4
   2153e:	2201      	movs	r2, #1
   21540:	f248 010d 	movw	r1, #32781	; 0x800d
   21544:	4630      	mov	r0, r6
   21546:	f7f2 fe81 	bl	1424c <MLX90640_I2CRead>
    frameData[832] = controlRegister1;
   2154a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   2154e:	f8a4 3680 	strh.w	r3, [r4, #1664]	; 0x680
    frameData[833] = MLX90640_GET_FRAME(statusRegister);
   21552:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   21556:	f003 0301 	and.w	r3, r3, #1
   2155a:	f8a4 3682 	strh.w	r3, [r4, #1666]	; 0x682
    if(error != MLX90640_NO_ERROR)
   2155e:	2800      	cmp	r0, #0
   21560:	d162      	bne.n	21628 <MLX90640_GetFrameData+0x14c>
    if(auxData[0] == 0x7FFF) return -MLX90640_FRAME_DATA_ERROR;    
   21562:	f8bd 2008 	ldrh.w	r2, [sp, #8]
   21566:	f647 73ff 	movw	r3, #32767	; 0x7fff
   2156a:	429a      	cmp	r2, r3
   2156c:	d047      	beq.n	215fe <MLX90640_GetFrameData+0x122>
    for(int i=8; i<19; i++)
   2156e:	2208      	movs	r2, #8
        if(auxData[i] == 0x7FFF) return -MLX90640_FRAME_DATA_ERROR;
   21570:	f835 1012 	ldrh.w	r1, [r5, r2, lsl #1]
   21574:	4299      	cmp	r1, r3
   21576:	d042      	beq.n	215fe <MLX90640_GetFrameData+0x122>
    for(int i=8; i<19; i++)
   21578:	3201      	adds	r2, #1
   2157a:	2a13      	cmp	r2, #19
   2157c:	d1f8      	bne.n	21570 <MLX90640_GetFrameData+0x94>
        if(auxData[i] == 0x7FFF) return -MLX90640_FRAME_DATA_ERROR;
   2157e:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
   21582:	429a      	cmp	r2, r3
   21584:	d03b      	beq.n	215fe <MLX90640_GetFrameData+0x122>
   21586:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
   2158a:	429a      	cmp	r2, r3
   2158c:	d037      	beq.n	215fe <MLX90640_GetFrameData+0x122>
   2158e:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
   21592:	429a      	cmp	r2, r3
   21594:	d033      	beq.n	215fe <MLX90640_GetFrameData+0x122>
    for(int i=24; i<33; i++)
   21596:	2318      	movs	r3, #24
        if(auxData[i] == 0x7FFF) return -MLX90640_FRAME_DATA_ERROR;
   21598:	f647 72ff 	movw	r2, #32767	; 0x7fff
   2159c:	f835 1013 	ldrh.w	r1, [r5, r3, lsl #1]
   215a0:	4291      	cmp	r1, r2
   215a2:	d02c      	beq.n	215fe <MLX90640_GetFrameData+0x122>
    for(int i=24; i<33; i++)
   215a4:	3301      	adds	r3, #1
   215a6:	2b21      	cmp	r3, #33	; 0x21
   215a8:	d1f8      	bne.n	2159c <MLX90640_GetFrameData+0xc0>
    for(int i=40; i<51; i++)
   215aa:	2228      	movs	r2, #40	; 0x28
        if(auxData[i] == 0x7FFF) return -MLX90640_FRAME_DATA_ERROR;
   215ac:	f647 73ff 	movw	r3, #32767	; 0x7fff
   215b0:	f835 1012 	ldrh.w	r1, [r5, r2, lsl #1]
   215b4:	4299      	cmp	r1, r3
   215b6:	d022      	beq.n	215fe <MLX90640_GetFrameData+0x122>
    for(int i=40; i<51; i++)
   215b8:	3201      	adds	r2, #1
   215ba:	2a33      	cmp	r2, #51	; 0x33
   215bc:	d1f8      	bne.n	215b0 <MLX90640_GetFrameData+0xd4>
        if(auxData[i] == 0x7FFF) return -MLX90640_FRAME_DATA_ERROR;
   215be:	f8bd 2070 	ldrh.w	r2, [sp, #112]	; 0x70
   215c2:	429a      	cmp	r2, r3
   215c4:	d01b      	beq.n	215fe <MLX90640_GetFrameData+0x122>
   215c6:	f8bd 2072 	ldrh.w	r2, [sp, #114]	; 0x72
   215ca:	429a      	cmp	r2, r3
   215cc:	d017      	beq.n	215fe <MLX90640_GetFrameData+0x122>
   215ce:	f8bd 2074 	ldrh.w	r2, [sp, #116]	; 0x74
   215d2:	429a      	cmp	r2, r3
   215d4:	d013      	beq.n	215fe <MLX90640_GetFrameData+0x122>
    for(int i=56; i<64; i++)
   215d6:	2338      	movs	r3, #56	; 0x38
        if(auxData[i] == 0x7FFF) return -MLX90640_FRAME_DATA_ERROR;
   215d8:	f647 72ff 	movw	r2, #32767	; 0x7fff
   215dc:	f835 1013 	ldrh.w	r1, [r5, r3, lsl #1]
   215e0:	4291      	cmp	r1, r2
   215e2:	d00c      	beq.n	215fe <MLX90640_GetFrameData+0x122>
    for(int i=56; i<64; i++)
   215e4:	3301      	adds	r3, #1
   215e6:	2b40      	cmp	r3, #64	; 0x40
   215e8:	d1f8      	bne.n	215dc <MLX90640_GetFrameData+0x100>
    if(error == MLX90640_NO_ERROR)
   215ea:	f204 53fe 	addw	r3, r4, #1534	; 0x5fe
   215ee:	f204 627e 	addw	r2, r4, #1662	; 0x67e
            frameData[cnt+MLX90640_PIXEL_NUM] = data[cnt];
   215f2:	f835 1b02 	ldrh.w	r1, [r5], #2
   215f6:	f823 1f02 	strh.w	r1, [r3, #2]!
        for(cnt=0; cnt<MLX90640_AUX_NUM; cnt++)
   215fa:	4293      	cmp	r3, r2
   215fc:	d1f9      	bne.n	215f2 <MLX90640_GetFrameData+0x116>
    for(int i=56; i<64; i++)
   215fe:	2300      	movs	r3, #0
        if((frameData[i] == 0x7FFF) && (line%2 == frameData[833])) return -MLX90640_FRAME_DATA_ERROR;
   21600:	f647 71ff 	movw	r1, #32767	; 0x7fff
   21604:	019a      	lsls	r2, r3, #6
   21606:	5aa2      	ldrh	r2, [r4, r2]
   21608:	428a      	cmp	r2, r1
   2160a:	d105      	bne.n	21618 <MLX90640_GetFrameData+0x13c>
   2160c:	f8b4 0682 	ldrh.w	r0, [r4, #1666]	; 0x682
   21610:	f003 0201 	and.w	r2, r3, #1
   21614:	4282      	cmp	r2, r0
   21616:	d005      	beq.n	21624 <MLX90640_GetFrameData+0x148>
    for(int i=0; i<MLX90640_PIXEL_NUM; i+=MLX90640_LINE_SIZE)
   21618:	3301      	adds	r3, #1
   2161a:	2b18      	cmp	r3, #24
   2161c:	d1f2      	bne.n	21604 <MLX90640_GetFrameData+0x128>
    return frameData[833];    
   2161e:	f8b4 0682 	ldrh.w	r0, [r4, #1666]	; 0x682
   21622:	e001      	b.n	21628 <MLX90640_GetFrameData+0x14c>
        if((frameData[i] == 0x7FFF) && (line%2 == frameData[833])) return -MLX90640_FRAME_DATA_ERROR;
   21624:	f06f 0007 	mvn.w	r0, #7
}
   21628:	b022      	add	sp, #136	; 0x88
   2162a:	bd70      	pop	{r4, r5, r6, pc}

0002162c <MLX90640_SetRefreshRate>:
{
   2162c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2162e:	460c      	mov	r4, r1
    error = MLX90640_I2CRead(slaveAddr, MLX90640_CTRL_REG, 1, &controlRegister1);
   21630:	f10d 0306 	add.w	r3, sp, #6
   21634:	2201      	movs	r2, #1
   21636:	f248 010d 	movw	r1, #32781	; 0x800d
{
   2163a:	4605      	mov	r5, r0
    error = MLX90640_I2CRead(slaveAddr, MLX90640_CTRL_REG, 1, &controlRegister1);
   2163c:	f7f2 fe06 	bl	1424c <MLX90640_I2CRead>
    if(error == MLX90640_NO_ERROR)
   21640:	b968      	cbnz	r0, 2165e <MLX90640_SetRefreshRate+0x32>
        value = (controlRegister1 & MLX90640_CTRL_REFRESH_MASK) | value;
   21642:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    value = ((uint16_t)refreshRate << MLX90640_CTRL_REFRESH_SHIFT);
   21646:	01e2      	lsls	r2, r4, #7
    value &= ~MLX90640_CTRL_REFRESH_MASK;
   21648:	f402 7260 	and.w	r2, r2, #896	; 0x380
        value = (controlRegister1 & MLX90640_CTRL_REFRESH_MASK) | value;
   2164c:	f423 7360 	bic.w	r3, r3, #896	; 0x380
   21650:	431a      	orrs	r2, r3
        error = MLX90640_I2CWrite(slaveAddr, MLX90640_CTRL_REG, value);
   21652:	b292      	uxth	r2, r2
   21654:	f248 010d 	movw	r1, #32781	; 0x800d
   21658:	4628      	mov	r0, r5
   2165a:	f7f2 fe47 	bl	142ec <MLX90640_I2CWrite>
}
   2165e:	b003      	add	sp, #12
   21660:	bd30      	pop	{r4, r5, pc}

00021662 <z_log_msg_static_create.constprop.0>:
   21662:	2300      	movs	r3, #0
   21664:	f7f3 bfcc 	b.w	15600 <z_impl_z_log_msg_static_create>

00021668 <cbpprintf_external>:
{
   21668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2166c:	4606      	mov	r6, r0
   2166e:	460d      	mov	r5, r1
   21670:	4617      	mov	r7, r2
	if (buf == NULL) {
   21672:	4698      	mov	r8, r3
   21674:	b32b      	cbz	r3, 216c2 <cbpprintf_external+0x5a>
	args_size = hdr->hdr.desc.len * sizeof(int);
   21676:	f898 4000 	ldrb.w	r4, [r8]
	s_nbr     = hdr->hdr.desc.str_cnt;
   2167a:	f893 9001 	ldrb.w	r9, [r3, #1]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   2167e:	78db      	ldrb	r3, [r3, #3]
	args_size = hdr->hdr.desc.len * sizeof(int);
   21680:	00a4      	lsls	r4, r4, #2
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   21682:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	ros_nbr   = hdr->hdr.desc.ro_str_cnt;
   21686:	f898 3002 	ldrb.w	r3, [r8, #2]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   2168a:	441c      	add	r4, r3
   2168c:	4444      	add	r4, r8
	for (i = 0; i < s_nbr; i++) {
   2168e:	f04f 0a00 	mov.w	sl, #0
   21692:	45ca      	cmp	sl, r9
   21694:	d309      	bcc.n	216aa <cbpprintf_external+0x42>
	return formatter(out, ctx, fmt, u.ap);
   21696:	f8d8 2004 	ldr.w	r2, [r8, #4]
   2169a:	f108 0308 	add.w	r3, r8, #8
   2169e:	4639      	mov	r1, r7
   216a0:	4630      	mov	r0, r6
   216a2:	46ac      	mov	ip, r5
}
   216a4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return formatter(out, ctx, fmt, u.ap);
   216a8:	4760      	bx	ip
		ps = (char **)(buf + s_idx * sizeof(int));
   216aa:	f814 3b01 	ldrb.w	r3, [r4], #1
		*ps = s;
   216ae:	f848 4023 	str.w	r4, [r8, r3, lsl #2]
		s += strlen(s) + 1;
   216b2:	4620      	mov	r0, r4
   216b4:	f7eb fa5c 	bl	cb70 <strlen>
   216b8:	3001      	adds	r0, #1
   216ba:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
   216bc:	f10a 0a01 	add.w	sl, sl, #1
   216c0:	e7e7      	b.n	21692 <cbpprintf_external+0x2a>
}
   216c2:	f06f 0015 	mvn.w	r0, #21
   216c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000216ca <is_ptr>:
{
   216ca:	b570      	push	{r4, r5, r6, lr}
	int cnt = 0;
   216cc:	2500      	movs	r5, #0
{
   216ce:	4602      	mov	r2, r0
	bool mod = false;
   216d0:	4628      	mov	r0, r5
	while ((c = *fmt++) != '\0') {
   216d2:	4614      	mov	r4, r2
   216d4:	f814 3b01 	ldrb.w	r3, [r4], #1
   216d8:	b90b      	cbnz	r3, 216de <is_ptr+0x14>
					return false;
   216da:	4618      	mov	r0, r3
   216dc:	e009      	b.n	216f2 <is_ptr+0x28>
		if (mod) {
   216de:	b198      	cbz	r0, 21708 <is_ptr+0x3e>
			if (cnt == n) {
   216e0:	428d      	cmp	r5, r1
   216e2:	d107      	bne.n	216f4 <is_ptr+0x2a>
				if (c == 'p') {
   216e4:	2b70      	cmp	r3, #112	; 0x70
   216e6:	d004      	beq.n	216f2 <is_ptr+0x28>
				} else if (is_fmt_spec(c)) {
   216e8:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
   216ec:	2a3a      	cmp	r2, #58	; 0x3a
   216ee:	d80b      	bhi.n	21708 <is_ptr+0x3e>
					return false;
   216f0:	2000      	movs	r0, #0
}
   216f2:	bd70      	pop	{r4, r5, r6, pc}
			} else if (is_fmt_spec(c)) {
   216f4:	f1a3 0640 	sub.w	r6, r3, #64	; 0x40
   216f8:	2e3a      	cmp	r6, #58	; 0x3a
   216fa:	d805      	bhi.n	21708 <is_ptr+0x3e>
	while ((c = *fmt++) != '\0') {
   216fc:	7853      	ldrb	r3, [r2, #1]
				cnt++;
   216fe:	3501      	adds	r5, #1
	while ((c = *fmt++) != '\0') {
   21700:	1c94      	adds	r4, r2, #2
   21702:	2b00      	cmp	r3, #0
   21704:	d0e9      	beq.n	216da <is_ptr+0x10>
   21706:	2000      	movs	r0, #0
		if (c == '%') {
   21708:	2b25      	cmp	r3, #37	; 0x25
			mod = !mod;
   2170a:	bf08      	it	eq
   2170c:	f080 0001 	eoreq.w	r0, r0, #1
	while ((c = *fmt++) != '\0') {
   21710:	4622      	mov	r2, r4
   21712:	e7de      	b.n	216d2 <is_ptr+0x8>

00021714 <char2hex>:
#include <errno.h>
#include <zephyr/sys/util.h>

int char2hex(char c, uint8_t *x)
{
	if (c >= '0' && c <= '9') {
   21714:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   21718:	b2db      	uxtb	r3, r3
   2171a:	2b09      	cmp	r3, #9
   2171c:	d802      	bhi.n	21724 <char2hex+0x10>
		*x = c - '0';
   2171e:	700b      	strb	r3, [r1, #0]
		*x = c - 'A' + 10;
	} else {
		return -EINVAL;
	}

	return 0;
   21720:	2000      	movs	r0, #0
   21722:	4770      	bx	lr
	} else if (c >= 'a' && c <= 'f') {
   21724:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   21728:	2b05      	cmp	r3, #5
   2172a:	d802      	bhi.n	21732 <char2hex+0x1e>
		*x = c - 'a' + 10;
   2172c:	3857      	subs	r0, #87	; 0x57
		*x = c - 'A' + 10;
   2172e:	b2c3      	uxtb	r3, r0
   21730:	e7f5      	b.n	2171e <char2hex+0xa>
	} else if (c >= 'A' && c <= 'F') {
   21732:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   21736:	2b05      	cmp	r3, #5
   21738:	d801      	bhi.n	2173e <char2hex+0x2a>
		*x = c - 'A' + 10;
   2173a:	3837      	subs	r0, #55	; 0x37
   2173c:	e7f7      	b.n	2172e <char2hex+0x1a>
		return -EINVAL;
   2173e:	f06f 0015 	mvn.w	r0, #21
}
   21742:	4770      	bx	lr

00021744 <arch_printk_char_out>:
}
   21744:	2000      	movs	r0, #0
   21746:	4770      	bx	lr

00021748 <str_out>:
{
   21748:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   2174a:	688a      	ldr	r2, [r1, #8]
   2174c:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
   2174e:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   21750:	b114      	cbz	r4, 21758 <str_out+0x10>
   21752:	684b      	ldr	r3, [r1, #4]
   21754:	4293      	cmp	r3, r2
   21756:	dc01      	bgt.n	2175c <str_out+0x14>
		ctx->count++;
   21758:	608d      	str	r5, [r1, #8]
}
   2175a:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   2175c:	3b01      	subs	r3, #1
   2175e:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   21760:	bf08      	it	eq
   21762:	2200      	moveq	r2, #0
   21764:	608d      	str	r5, [r1, #8]
   21766:	bf0c      	ite	eq
   21768:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   2176a:	54a0      	strbne	r0, [r4, r2]
   2176c:	e7f5      	b.n	2175a <str_out+0x12>

0002176e <vprintk>:
		z_log_vprintk(fmt, ap);
   2176e:	f000 bd42 	b.w	221f6 <z_log_vprintk>

00021772 <printk>:
{
   21772:	b40f      	push	{r0, r1, r2, r3}
   21774:	b507      	push	{r0, r1, r2, lr}
   21776:	a904      	add	r1, sp, #16
   21778:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   2177c:	9101      	str	r1, [sp, #4]
		z_log_vprintk(fmt, ap);
   2177e:	f000 fd3a 	bl	221f6 <z_log_vprintk>
}
   21782:	b003      	add	sp, #12
   21784:	f85d eb04 	ldr.w	lr, [sp], #4
   21788:	b004      	add	sp, #16
   2178a:	4770      	bx	lr

0002178c <snprintk>:
{
   2178c:	b40c      	push	{r2, r3}
   2178e:	b507      	push	{r0, r1, r2, lr}
   21790:	ab04      	add	r3, sp, #16
   21792:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   21796:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   21798:	f7f3 fb18 	bl	14dcc <vsnprintk>
}
   2179c:	b003      	add	sp, #12
   2179e:	f85d eb04 	ldr.w	lr, [sp], #4
   217a2:	b002      	add	sp, #8
   217a4:	4770      	bx	lr

000217a6 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   217a6:	4604      	mov	r4, r0
   217a8:	b508      	push	{r3, lr}
   217aa:	4608      	mov	r0, r1
   217ac:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   217ae:	461a      	mov	r2, r3
   217b0:	47a0      	blx	r4
	return z_impl_z_current_get();
   217b2:	f7fe fd2d 	bl	20210 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   217b6:	f7f5 f9cd 	bl	16b54 <z_impl_k_thread_abort>

000217ba <chunk_size>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   217ba:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   217be:	8840      	ldrh	r0, [r0, #2]
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
}
   217c0:	0840      	lsrs	r0, r0, #1
   217c2:	4770      	bx	lr

000217c4 <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
   217c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   217c6:	4603      	mov	r3, r0
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
   217c8:	f7ff fff7 	bl	217ba <chunk_size>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   217cc:	fab0 f080 	clz	r0, r0
   217d0:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   217d4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
	void *cmem = &buf[c];
   217d8:	00ca      	lsls	r2, r1, #3
   217da:	f8dc 6010 	ldr.w	r6, [ip, #16]
		((uint16_t *)cmem)[f] = val;
   217de:	1d17      	adds	r7, r2, #4
{
   217e0:	460c      	mov	r4, r1
   217e2:	3206      	adds	r2, #6
   217e4:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
   217e6:	b956      	cbnz	r6, 217fe <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   217e8:	2101      	movs	r1, #1
   217ea:	fa01 f000 	lsl.w	r0, r1, r0
   217ee:	68d9      	ldr	r1, [r3, #12]
   217f0:	4301      	orrs	r1, r0
   217f2:	60d9      	str	r1, [r3, #12]
		b->next = c;
   217f4:	f8cc 4010 	str.w	r4, [ip, #16]
   217f8:	53dd      	strh	r5, [r3, r7]
   217fa:	529d      	strh	r5, [r3, r2]
		free_list_add_bidx(h, c, bidx);
	}
}
   217fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   217fe:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   21800:	3104      	adds	r1, #4
   21802:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   21804:	53d8      	strh	r0, [r3, r7]
   21806:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   2180a:	529e      	strh	r6, [r3, r2]
   2180c:	80c5      	strh	r5, [r0, #6]
   2180e:	525d      	strh	r5, [r3, r1]
   21810:	e7f4      	b.n	217fc <free_list_add+0x38>

00021812 <free_list_remove_bidx>:
{
   21812:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
   21814:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   21818:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
   2181a:	4299      	cmp	r1, r3
   2181c:	f102 0104 	add.w	r1, r2, #4
   21820:	d10a      	bne.n	21838 <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
   21822:	2301      	movs	r3, #1
   21824:	fa03 f202 	lsl.w	r2, r3, r2
   21828:	68c3      	ldr	r3, [r0, #12]
   2182a:	ea23 0302 	bic.w	r3, r3, r2
   2182e:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   21830:	2300      	movs	r3, #0
   21832:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   21836:	bd10      	pop	{r4, pc}
   21838:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
   2183a:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
   2183e:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   21842:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   21846:	80cb      	strh	r3, [r1, #6]
   21848:	8082      	strh	r2, [r0, #4]
}
   2184a:	e7f4      	b.n	21836 <free_list_remove_bidx+0x24>

0002184c <free_list_remove>:
{
   2184c:	b508      	push	{r3, lr}
   2184e:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   21850:	f7ff ffb3 	bl	217ba <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   21854:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
   21858:	f1c2 021f 	rsb	r2, r2, #31
   2185c:	4618      	mov	r0, r3
}
   2185e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
   21862:	f7ff bfd6 	b.w	21812 <free_list_remove_bidx>

00021866 <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   21866:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2186a:	fab1 f581 	clz	r5, r1
   2186e:	f1c5 091f 	rsb	r9, r5, #31
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   21872:	eb00 0889 	add.w	r8, r0, r9, lsl #2
{
   21876:	4603      	mov	r3, r0
	if (b->next) {
   21878:	f8d8 2010 	ldr.w	r2, [r8, #16]
{
   2187c:	460e      	mov	r6, r1
	if (b->next) {
   2187e:	b1c2      	cbz	r2, 218b2 <alloc_chunk+0x4c>
   21880:	2703      	movs	r7, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
   21882:	f8d8 4010 	ldr.w	r4, [r8, #16]
			if (chunk_size(h, c) >= sz) {
   21886:	4618      	mov	r0, r3
   21888:	4621      	mov	r1, r4
   2188a:	f7ff ff96 	bl	217ba <chunk_size>
   2188e:	42b0      	cmp	r0, r6
   21890:	d306      	bcc.n	218a0 <alloc_chunk+0x3a>
				free_list_remove_bidx(h, c, bi);
   21892:	464a      	mov	r2, r9

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
   21894:	4618      	mov	r0, r3
   21896:	f7ff ffbc 	bl	21812 <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   2189a:	4620      	mov	r0, r4
   2189c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
   218a0:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
		} while (--i && b->next != first);
   218a4:	3f01      	subs	r7, #1
   218a6:	88e0      	ldrh	r0, [r4, #6]
			b->next = next_free_chunk(h, c);
   218a8:	f8c8 0010 	str.w	r0, [r8, #16]
		} while (--i && b->next != first);
   218ac:	d001      	beq.n	218b2 <alloc_chunk+0x4c>
   218ae:	4282      	cmp	r2, r0
   218b0:	d1e7      	bne.n	21882 <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   218b2:	f1c5 0220 	rsb	r2, r5, #32
   218b6:	f04f 34ff 	mov.w	r4, #4294967295
   218ba:	4094      	lsls	r4, r2
   218bc:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
   218be:	4014      	ands	r4, r2
   218c0:	d0eb      	beq.n	2189a <alloc_chunk+0x34>
		int minbucket = __builtin_ctz(bmask);
   218c2:	fa94 f2a4 	rbit	r2, r4
   218c6:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   218ca:	1d11      	adds	r1, r2, #4
   218cc:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   218d0:	4621      	mov	r1, r4
   218d2:	e7df      	b.n	21894 <alloc_chunk+0x2e>

000218d4 <merge_chunks>:
{
   218d4:	b538      	push	{r3, r4, r5, lr}
   218d6:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   218d8:	f7ff ff6f 	bl	217ba <chunk_size>
{
   218dc:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   218de:	4604      	mov	r4, r0
   218e0:	4611      	mov	r1, r2
   218e2:	4618      	mov	r0, r3
   218e4:	f7ff ff69 	bl	217ba <chunk_size>
		((uint16_t *)cmem)[f] = val;
   218e8:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   218ec:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   218ee:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
   218f0:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
   218f2:	4618      	mov	r0, r3
   218f4:	f7ff ff61 	bl	217ba <chunk_size>
	void *cmem = &buf[c];
   218f8:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   218fa:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
   218fe:	bd38      	pop	{r3, r4, r5, pc}

00021900 <split_chunks>:
{
   21900:	b538      	push	{r3, r4, r5, lr}
   21902:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
   21904:	f7ff ff59 	bl	217ba <chunk_size>
{
   21908:	460c      	mov	r4, r1
	chunksz_t rsz = sz0 - lsz;
   2190a:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
   2190c:	1a51      	subs	r1, r2, r1
   2190e:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunksz_t rsz = sz0 - lsz;
   21912:	4405      	add	r5, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   21914:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
   21916:	8060      	strh	r0, [r4, #2]
   21918:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2191c:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   2191e:	8044      	strh	r4, [r0, #2]
   21920:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
   21924:	4618      	mov	r0, r3
   21926:	4611      	mov	r1, r2
   21928:	f7ff ff47 	bl	217ba <chunk_size>
	void *cmem = &buf[c];
   2192c:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   2192e:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
   21932:	bd38      	pop	{r3, r4, r5, pc}

00021934 <free_chunk>:
{
   21934:	b538      	push	{r3, r4, r5, lr}
   21936:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   21938:	f7ff ff3f 	bl	217ba <chunk_size>
   2193c:	460c      	mov	r4, r1
   2193e:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
   21940:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   21944:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   21946:	07da      	lsls	r2, r3, #31
   21948:	d40a      	bmi.n	21960 <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
   2194a:	4628      	mov	r0, r5
   2194c:	f7ff ff7e 	bl	2184c <free_list_remove>
	return c + chunk_size(h, c);
   21950:	4621      	mov	r1, r4
   21952:	4628      	mov	r0, r5
   21954:	f7ff ff31 	bl	217ba <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   21958:	1822      	adds	r2, r4, r0
   2195a:	4628      	mov	r0, r5
   2195c:	f7ff ffba 	bl	218d4 <merge_chunks>
		return ((uint16_t *)cmem)[f];
   21960:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   21964:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
   21966:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   2196a:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   2196c:	07db      	lsls	r3, r3, #31
   2196e:	d40c      	bmi.n	2198a <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
   21970:	4628      	mov	r0, r5
   21972:	f7ff ff6b 	bl	2184c <free_list_remove>
		return ((uint16_t *)cmem)[f];
   21976:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
   2197a:	4622      	mov	r2, r4
   2197c:	1a61      	subs	r1, r4, r1
   2197e:	4628      	mov	r0, r5
   21980:	f7ff ffa8 	bl	218d4 <merge_chunks>
   21984:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   21988:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
   2198a:	4621      	mov	r1, r4
   2198c:	4628      	mov	r0, r5
}
   2198e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
   21992:	f7ff bf17 	b.w	217c4 <free_list_add>

00021996 <sys_heap_free>:
	if (mem == NULL) {
   21996:	b161      	cbz	r1, 219b2 <sys_heap_free+0x1c>
   21998:	6800      	ldr	r0, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   2199a:	3904      	subs	r1, #4
   2199c:	1a09      	subs	r1, r1, r0
	void *cmem = &buf[c];
   2199e:	f021 0307 	bic.w	r3, r1, #7
   219a2:	4403      	add	r3, r0
	free_chunk(h, c);
   219a4:	08c9      	lsrs	r1, r1, #3
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   219a6:	885a      	ldrh	r2, [r3, #2]
   219a8:	f022 0201 	bic.w	r2, r2, #1
   219ac:	805a      	strh	r2, [r3, #2]
   219ae:	f7ff bfc1 	b.w	21934 <free_chunk>
}
   219b2:	4770      	bx	lr

000219b4 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   219b4:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   219b6:	6805      	ldr	r5, [r0, #0]
	void *mem;

	if (bytes == 0U || size_too_big(h, bytes)) {
   219b8:	b909      	cbnz	r1, 219be <sys_heap_alloc+0xa>
		return NULL;
   219ba:	2000      	movs	r0, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
   219bc:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   219be:	68ab      	ldr	r3, [r5, #8]
   219c0:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   219c4:	d9f9      	bls.n	219ba <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   219c6:	310b      	adds	r1, #11
   219c8:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   219ca:	4621      	mov	r1, r4
   219cc:	4628      	mov	r0, r5
   219ce:	f7ff ff4a 	bl	21866 <alloc_chunk>
	if (c == 0U) {
   219d2:	4606      	mov	r6, r0
   219d4:	2800      	cmp	r0, #0
   219d6:	d0f0      	beq.n	219ba <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   219d8:	4601      	mov	r1, r0
   219da:	4628      	mov	r0, r5
   219dc:	f7ff feed 	bl	217ba <chunk_size>
   219e0:	42a0      	cmp	r0, r4
   219e2:	d907      	bls.n	219f4 <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
   219e4:	1932      	adds	r2, r6, r4
   219e6:	4628      	mov	r0, r5
   219e8:	f7ff ff8a 	bl	21900 <split_chunks>
		free_list_add(h, c + chunk_sz);
   219ec:	4611      	mov	r1, r2
   219ee:	4628      	mov	r0, r5
   219f0:	f7ff fee8 	bl	217c4 <free_list_add>
	void *cmem = &buf[c];
   219f4:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   219f8:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   219fa:	8853      	ldrh	r3, [r2, #2]
   219fc:	f043 0301 	orr.w	r3, r3, #1
   21a00:	8053      	strh	r3, [r2, #2]
   21a02:	3004      	adds	r0, #4
	return mem;
   21a04:	e7da      	b.n	219bc <sys_heap_alloc+0x8>

00021a06 <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   21a06:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   21a0a:	f101 39ff 	add.w	r9, r1, #4294967295
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
	if (align != rew) {
   21a0e:	ea19 0901 	ands.w	r9, r9, r1
	struct z_heap *h = heap->heap;
   21a12:	6806      	ldr	r6, [r0, #0]
{
   21a14:	460f      	mov	r7, r1
   21a16:	4614      	mov	r4, r2
	if (align != rew) {
   21a18:	d00c      	beq.n	21a34 <sys_heap_aligned_alloc+0x2e>
	rew = align & -align;
   21a1a:	424b      	negs	r3, r1
   21a1c:	400b      	ands	r3, r1
		align -= rew;
		gap = MIN(rew, chunk_header_bytes(h));
   21a1e:	2b04      	cmp	r3, #4
   21a20:	461a      	mov	r2, r3
   21a22:	464f      	mov	r7, r9
   21a24:	bf28      	it	cs
   21a26:	2204      	movcs	r2, #4
	rew = align & -align;
   21a28:	4699      	mov	r9, r3
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   21a2a:	b964      	cbnz	r4, 21a46 <sys_heap_aligned_alloc+0x40>
		return NULL;
   21a2c:	2500      	movs	r5, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
   21a2e:	4628      	mov	r0, r5
   21a30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
   21a34:	2904      	cmp	r1, #4
   21a36:	d804      	bhi.n	21a42 <sys_heap_aligned_alloc+0x3c>
}
   21a38:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
   21a3c:	4611      	mov	r1, r2
   21a3e:	f7ff bfb9 	b.w	219b4 <sys_heap_alloc>
		gap = chunk_header_bytes(h);
   21a42:	2204      	movs	r2, #4
   21a44:	e7f1      	b.n	21a2a <sys_heap_aligned_alloc+0x24>
	if (bytes == 0 || size_too_big(h, bytes)) {
   21a46:	68b3      	ldr	r3, [r6, #8]
   21a48:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   21a4c:	d9ee      	bls.n	21a2c <sys_heap_aligned_alloc+0x26>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   21a4e:	f104 010b 	add.w	r1, r4, #11
   21a52:	4439      	add	r1, r7
   21a54:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   21a56:	08c9      	lsrs	r1, r1, #3
   21a58:	4630      	mov	r0, r6
   21a5a:	f7ff ff04 	bl	21866 <alloc_chunk>
	if (c0 == 0) {
   21a5e:	4680      	mov	r8, r0
   21a60:	2800      	cmp	r0, #0
   21a62:	d0e3      	beq.n	21a2c <sys_heap_aligned_alloc+0x26>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   21a64:	f109 0504 	add.w	r5, r9, #4
   21a68:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
   21a6c:	1e7b      	subs	r3, r7, #1
   21a6e:	4435      	add	r5, r6
   21a70:	441d      	add	r5, r3
   21a72:	427f      	negs	r7, r7
   21a74:	403d      	ands	r5, r7
   21a76:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   21a7a:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   21a7c:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   21a7e:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   21a80:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   21a82:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   21a86:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   21a88:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   21a8c:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   21a90:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   21a94:	d208      	bcs.n	21aa8 <sys_heap_aligned_alloc+0xa2>
		split_chunks(h, c0, c);
   21a96:	4601      	mov	r1, r0
   21a98:	463a      	mov	r2, r7
   21a9a:	4630      	mov	r0, r6
   21a9c:	f7ff ff30 	bl	21900 <split_chunks>
		free_list_add(h, c0);
   21aa0:	4641      	mov	r1, r8
   21aa2:	4630      	mov	r0, r6
   21aa4:	f7ff fe8e 	bl	217c4 <free_list_add>
	return c + chunk_size(h, c);
   21aa8:	4639      	mov	r1, r7
   21aaa:	4630      	mov	r0, r6
   21aac:	f7ff fe85 	bl	217ba <chunk_size>
   21ab0:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   21ab2:	4284      	cmp	r4, r0
   21ab4:	d207      	bcs.n	21ac6 <sys_heap_aligned_alloc+0xc0>
		split_chunks(h, c, c_end);
   21ab6:	4630      	mov	r0, r6
   21ab8:	4622      	mov	r2, r4
   21aba:	f7ff ff21 	bl	21900 <split_chunks>
		free_list_add(h, c_end);
   21abe:	4621      	mov	r1, r4
   21ac0:	4630      	mov	r0, r6
   21ac2:	f7ff fe7f 	bl	217c4 <free_list_add>
	void *cmem = &buf[c];
   21ac6:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   21aca:	8873      	ldrh	r3, [r6, #2]
   21acc:	f043 0301 	orr.w	r3, r3, #1
   21ad0:	8073      	strh	r3, [r6, #2]
   21ad2:	e7ac      	b.n	21a2e <sys_heap_aligned_alloc+0x28>

00021ad4 <sys_heap_init>:
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   21ad4:	3a04      	subs	r2, #4
{
   21ad6:	b4f0      	push	{r4, r5, r6, r7}
   21ad8:	4604      	mov	r4, r0

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   21ada:	1dc8      	adds	r0, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   21adc:	4411      	add	r1, r2
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   21ade:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   21ae2:	f021 0107 	bic.w	r1, r1, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   21ae6:	1a0e      	subs	r6, r1, r0
   21ae8:	08f3      	lsrs	r3, r6, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
   21aea:	6020      	str	r0, [r4, #0]
	return 31 - __builtin_clz(usable_sz);
   21aec:	fab3 f283 	clz	r2, r3
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
   21af0:	4604      	mov	r4, r0
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   21af2:	f1c2 0524 	rsb	r5, r2, #36	; 0x24
	h->avail_buckets = 0;
   21af6:	2700      	movs	r7, #0
	h->end_chunk = heap_sz;
   21af8:	6083      	str	r3, [r0, #8]
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   21afa:	00ad      	lsls	r5, r5, #2
	h->avail_buckets = 0;
   21afc:	f844 7f0c 	str.w	r7, [r4, #12]!
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   21b00:	3507      	adds	r5, #7
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   21b02:	f1c2 0220 	rsb	r2, r2, #32
   21b06:	08e9      	lsrs	r1, r5, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   21b08:	eb04 0282 	add.w	r2, r4, r2, lsl #2
		h->buckets[i].next = 0;
   21b0c:	f844 7f04 	str.w	r7, [r4, #4]!
	for (int i = 0; i < nb_buckets; i++) {
   21b10:	4294      	cmp	r4, r2
   21b12:	d1fb      	bne.n	21b0c <sys_heap_init+0x38>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   21b14:	004a      	lsls	r2, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   21b16:	f042 0201 	orr.w	r2, r2, #1
   21b1a:	8042      	strh	r2, [r0, #2]
		((uint16_t *)cmem)[f] = val;
   21b1c:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   21b20:	1a5a      	subs	r2, r3, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   21b22:	0055      	lsls	r5, r2, #1
		((uint16_t *)cmem)[f] = val;
   21b24:	8007      	strh	r7, [r0, #0]
   21b26:	8065      	strh	r5, [r4, #2]
   21b28:	1984      	adds	r4, r0, r6
   21b2a:	f820 1031 	strh.w	r1, [r0, r1, lsl #3]
	void *cmem = &buf[c];
   21b2e:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
		((uint16_t *)cmem)[f] = val;
   21b32:	8067      	strh	r7, [r4, #2]
   21b34:	5382      	strh	r2, [r0, r6]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   21b36:	885a      	ldrh	r2, [r3, #2]
   21b38:	f042 0201 	orr.w	r2, r2, #1
   21b3c:	805a      	strh	r2, [r3, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
   21b3e:	bcf0      	pop	{r4, r5, r6, r7}
	free_list_add(h, chunk0_size);
   21b40:	f7ff be40 	b.w	217c4 <free_list_add>

00021b44 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   21b44:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   21b46:	f013 0307 	ands.w	r3, r3, #7
   21b4a:	d105      	bne.n	21b58 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   21b4c:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   21b4e:	2b00      	cmp	r3, #0
   21b50:	bf0c      	ite	eq
   21b52:	2000      	moveq	r0, #0
   21b54:	2003      	movne	r0, #3
   21b56:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   21b58:	2b02      	cmp	r3, #2
   21b5a:	d105      	bne.n	21b68 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   21b5c:	8b40      	ldrh	r0, [r0, #26]
   21b5e:	fab0 f080 	clz	r0, r0
   21b62:	0940      	lsrs	r0, r0, #5
   21b64:	0080      	lsls	r0, r0, #2
   21b66:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   21b68:	2b01      	cmp	r3, #1
   21b6a:	d105      	bne.n	21b78 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   21b6c:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   21b6e:	2b00      	cmp	r3, #0
   21b70:	bf0c      	ite	eq
   21b72:	2000      	moveq	r0, #0
   21b74:	2005      	movne	r0, #5
   21b76:	4770      	bx	lr
	int evt = EVT_NOP;
   21b78:	2000      	movs	r0, #0
}
   21b7a:	4770      	bx	lr

00021b7c <validate_args>:
{
   21b7c:	b510      	push	{r4, lr}
   21b7e:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   21b80:	b100      	cbz	r0, 21b84 <validate_args+0x8>
   21b82:	b911      	cbnz	r1, 21b8a <validate_args+0xe>
		return -EINVAL;
   21b84:	f06f 0015 	mvn.w	r0, #21
}
   21b88:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
   21b8a:	1d08      	adds	r0, r1, #4
   21b8c:	f000 f896 	bl	21cbc <sys_notify_validate>
	if ((rv == 0)
   21b90:	2800      	cmp	r0, #0
   21b92:	d1f9      	bne.n	21b88 <validate_args+0xc>
	    && ((cli->notify.flags
   21b94:	68a3      	ldr	r3, [r4, #8]
   21b96:	2b03      	cmp	r3, #3
   21b98:	d9f6      	bls.n	21b88 <validate_args+0xc>
   21b9a:	e7f3      	b.n	21b84 <validate_args+0x8>

00021b9c <notify_one>:
{
   21b9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21ba0:	460d      	mov	r5, r1
   21ba2:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   21ba4:	4619      	mov	r1, r3
   21ba6:	1d28      	adds	r0, r5, #4
{
   21ba8:	4690      	mov	r8, r2
   21baa:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   21bac:	f000 f89a 	bl	21ce4 <sys_notify_finalize>
	if (cb) {
   21bb0:	4604      	mov	r4, r0
   21bb2:	b138      	cbz	r0, 21bc4 <notify_one+0x28>
		cb(mgr, cli, state, res);
   21bb4:	4633      	mov	r3, r6
   21bb6:	4642      	mov	r2, r8
   21bb8:	4629      	mov	r1, r5
   21bba:	4638      	mov	r0, r7
   21bbc:	46a4      	mov	ip, r4
}
   21bbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   21bc2:	4760      	bx	ip
}
   21bc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00021bc8 <transition_complete>:
{
   21bc8:	b410      	push	{r4}
	__asm__ volatile(
   21bca:	f04f 0440 	mov.w	r4, #64	; 0x40
   21bce:	f3ef 8211 	mrs	r2, BASEPRI
   21bd2:	f384 8812 	msr	BASEPRI_MAX, r4
   21bd6:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   21bda:	6141      	str	r1, [r0, #20]
}
   21bdc:	f85d 4b04 	ldr.w	r4, [sp], #4
	process_event(mgr, EVT_COMPLETE, key);
   21be0:	2101      	movs	r1, #1
   21be2:	f7f3 b909 	b.w	14df8 <process_event>

00021be6 <onoff_manager_init>:
{
   21be6:	b538      	push	{r3, r4, r5, lr}
   21be8:	460c      	mov	r4, r1
	if ((mgr == NULL)
   21bea:	4605      	mov	r5, r0
   21bec:	b158      	cbz	r0, 21c06 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   21bee:	b151      	cbz	r1, 21c06 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   21bf0:	680b      	ldr	r3, [r1, #0]
   21bf2:	b143      	cbz	r3, 21c06 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   21bf4:	684b      	ldr	r3, [r1, #4]
   21bf6:	b133      	cbz	r3, 21c06 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   21bf8:	221c      	movs	r2, #28
   21bfa:	2100      	movs	r1, #0
   21bfc:	f003 faf1 	bl	251e2 <memset>
   21c00:	612c      	str	r4, [r5, #16]
	return 0;
   21c02:	2000      	movs	r0, #0
}
   21c04:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   21c06:	f06f 0015 	mvn.w	r0, #21
   21c0a:	e7fb      	b.n	21c04 <onoff_manager_init+0x1e>

00021c0c <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   21c0c:	b570      	push	{r4, r5, r6, lr}
   21c0e:	4605      	mov	r5, r0
   21c10:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   21c12:	f7ff ffb3 	bl	21b7c <validate_args>

	if (rv < 0) {
   21c16:	1e04      	subs	r4, r0, #0
   21c18:	db15      	blt.n	21c46 <onoff_request+0x3a>
   21c1a:	f04f 0340 	mov.w	r3, #64	; 0x40
   21c1e:	f3ef 8211 	mrs	r2, BASEPRI
   21c22:	f383 8812 	msr	BASEPRI_MAX, r3
   21c26:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   21c2a:	8b6b      	ldrh	r3, [r5, #26]
   21c2c:	8b2c      	ldrh	r4, [r5, #24]
   21c2e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   21c32:	428b      	cmp	r3, r1
   21c34:	f004 0407 	and.w	r4, r4, #7
   21c38:	d107      	bne.n	21c4a <onoff_request+0x3e>
	__asm__ volatile(
   21c3a:	f382 8811 	msr	BASEPRI, r2
   21c3e:	f3bf 8f6f 	isb	sy
		rv = -EAGAIN;
   21c42:	f06f 040a 	mvn.w	r4, #10
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
   21c46:	4620      	mov	r0, r4
   21c48:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
   21c4a:	2c02      	cmp	r4, #2
   21c4c:	d10c      	bne.n	21c68 <onoff_request+0x5c>
		mgr->refs += 1U;
   21c4e:	3301      	adds	r3, #1
   21c50:	836b      	strh	r3, [r5, #26]
   21c52:	f382 8811 	msr	BASEPRI, r2
   21c56:	f3bf 8f6f 	isb	sy
			notify_one(mgr, cli, state, 0);
   21c5a:	2300      	movs	r3, #0
   21c5c:	4622      	mov	r2, r4
   21c5e:	4631      	mov	r1, r6
   21c60:	4628      	mov	r0, r5
   21c62:	f7ff ff9b 	bl	21b9c <notify_one>
   21c66:	e7ee      	b.n	21c46 <onoff_request+0x3a>
	} else if ((state == ONOFF_STATE_OFF)
   21c68:	2c06      	cmp	r4, #6
   21c6a:	d814      	bhi.n	21c96 <onoff_request+0x8a>
   21c6c:	e8df f004 	tbb	[pc, r4]
   21c70:	13131304 	.word	0x13131304
   21c74:	1a04      	.short	0x1a04
   21c76:	04          	.byte	0x04
   21c77:	00          	.byte	0x00
	parent->next = child;
   21c78:	2300      	movs	r3, #0
   21c7a:	6033      	str	r3, [r6, #0]
	return list->tail;
   21c7c:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
   21c7e:	b93b      	cbnz	r3, 21c90 <onoff_request+0x84>
	list->head = node;
   21c80:	e9c5 6600 	strd	r6, r6, [r5]
	if (start) {
   21c84:	b9ac      	cbnz	r4, 21cb2 <onoff_request+0xa6>
		process_event(mgr, EVT_RECHECK, key);
   21c86:	2102      	movs	r1, #2
   21c88:	4628      	mov	r0, r5
   21c8a:	f7f3 f8b5 	bl	14df8 <process_event>
   21c8e:	e7da      	b.n	21c46 <onoff_request+0x3a>
	parent->next = child;
   21c90:	601e      	str	r6, [r3, #0]
	list->tail = node;
   21c92:	606e      	str	r6, [r5, #4]
}
   21c94:	e7f6      	b.n	21c84 <onoff_request+0x78>
   21c96:	f382 8811 	msr	BASEPRI, r2
   21c9a:	f3bf 8f6f 	isb	sy
		rv = -EIO;
   21c9e:	f06f 0404 	mvn.w	r4, #4
   21ca2:	e7d0      	b.n	21c46 <onoff_request+0x3a>
   21ca4:	f382 8811 	msr	BASEPRI, r2
   21ca8:	f3bf 8f6f 	isb	sy
   21cac:	f06f 0485 	mvn.w	r4, #133	; 0x85
   21cb0:	e7c9      	b.n	21c46 <onoff_request+0x3a>
   21cb2:	f382 8811 	msr	BASEPRI, r2
   21cb6:	f3bf 8f6f 	isb	sy
		if (notify) {
   21cba:	e7c4      	b.n	21c46 <onoff_request+0x3a>

00021cbc <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   21cbc:	4603      	mov	r3, r0
   21cbe:	b140      	cbz	r0, 21cd2 <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   21cc0:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   21cc2:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   21cc6:	2a02      	cmp	r2, #2
   21cc8:	d006      	beq.n	21cd8 <sys_notify_validate+0x1c>
   21cca:	2a03      	cmp	r2, #3
   21ccc:	d004      	beq.n	21cd8 <sys_notify_validate+0x1c>
   21cce:	2a01      	cmp	r2, #1
   21cd0:	d005      	beq.n	21cde <sys_notify_validate+0x22>
   21cd2:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   21cd6:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   21cd8:	681a      	ldr	r2, [r3, #0]
   21cda:	2a00      	cmp	r2, #0
   21cdc:	d0f9      	beq.n	21cd2 <sys_notify_validate+0x16>
		notify->result = 0;
   21cde:	2000      	movs	r0, #0
   21ce0:	6098      	str	r0, [r3, #8]
   21ce2:	4770      	bx	lr

00021ce4 <sys_notify_finalize>:

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   21ce4:	b510      	push	{r4, lr}
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   21ce6:	6842      	ldr	r2, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
   21ce8:	6081      	str	r1, [r0, #8]
	return method & SYS_NOTIFY_METHOD_MASK;
   21cea:	f002 0203 	and.w	r2, r2, #3
	switch (method) {
   21cee:	2a02      	cmp	r2, #2
{
   21cf0:	4603      	mov	r3, r0
	switch (method) {
   21cf2:	f04f 0400 	mov.w	r4, #0
   21cf6:	d007      	beq.n	21d08 <sys_notify_finalize+0x24>
   21cf8:	2a03      	cmp	r2, #3
   21cfa:	d002      	beq.n	21d02 <sys_notify_finalize+0x1e>
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   21cfc:	605c      	str	r4, [r3, #4]
	sys_notify_generic_callback rv = NULL;
   21cfe:	2000      	movs	r0, #0
   21d00:	e001      	b.n	21d06 <sys_notify_finalize+0x22>
		rv = notify->method.callback;
   21d02:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   21d04:	605c      	str	r4, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   21d06:	bd10      	pop	{r4, pc}
		sig = notify->method.signal;
   21d08:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   21d0a:	605c      	str	r4, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   21d0c:	2800      	cmp	r0, #0
   21d0e:	d0f6      	beq.n	21cfe <sys_notify_finalize+0x1a>
	return z_impl_k_poll_signal_raise(sig, result);
   21d10:	f7fe fd62 	bl	207d8 <z_impl_k_poll_signal_raise>
   21d14:	e7f3      	b.n	21cfe <sys_notify_finalize+0x1a>

00021d16 <_ldiv5>:
	uint32_t v_lo = *v;
   21d16:	e9d0 2100 	ldrd	r2, r1, [r0]
{
   21d1a:	b530      	push	{r4, r5, lr}
	__asm__ ("" : "+r" (m));
   21d1c:	f04f 3333 	mov.w	r3, #858993459	; 0x33333333
	result += (uint64_t)v_lo * m;
   21d20:	fba2 2403 	umull	r2, r4, r2, r3
   21d24:	18d5      	adds	r5, r2, r3
   21d26:	eb43 0504 	adc.w	r5, r3, r4
	result += (uint64_t)v_hi * m;
   21d2a:	fba1 1303 	umull	r1, r3, r1, r3
   21d2e:	1852      	adds	r2, r2, r1
   21d30:	eb44 0403 	adc.w	r4, r4, r3
   21d34:	1952      	adds	r2, r2, r5
   21d36:	f144 0200 	adc.w	r2, r4, #0
	result += (uint64_t)v_hi * m;
   21d3a:	1889      	adds	r1, r1, r2
   21d3c:	f143 0300 	adc.w	r3, r3, #0
	*v = result;
   21d40:	e9c0 1300 	strd	r1, r3, [r0]
}
   21d44:	bd30      	pop	{r4, r5, pc}

00021d46 <_get_digit>:
{
   21d46:	b510      	push	{r4, lr}
	if (*digit_count > 0) {
   21d48:	680a      	ldr	r2, [r1, #0]
   21d4a:	2a00      	cmp	r2, #0
{
   21d4c:	4603      	mov	r3, r0
	if (*digit_count > 0) {
   21d4e:	dd0f      	ble.n	21d70 <_get_digit+0x2a>
		--*digit_count;
   21d50:	3a01      	subs	r2, #1
   21d52:	600a      	str	r2, [r1, #0]
		*fr *= 10U;
   21d54:	681a      	ldr	r2, [r3, #0]
   21d56:	6844      	ldr	r4, [r0, #4]
   21d58:	200a      	movs	r0, #10
   21d5a:	fba2 1200 	umull	r1, r2, r2, r0
   21d5e:	fb00 2204 	mla	r2, r0, r4, r2
		rval = ((*fr >> 60) & 0xF) + '0';
   21d62:	0f10      	lsrs	r0, r2, #28
		*fr &= (BIT64(60) - 1U);
   21d64:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
   21d68:	e9c3 1200 	strd	r1, r2, [r3]
		rval = ((*fr >> 60) & 0xF) + '0';
   21d6c:	3030      	adds	r0, #48	; 0x30
}
   21d6e:	bd10      	pop	{r4, pc}
		rval = '0';
   21d70:	2030      	movs	r0, #48	; 0x30
   21d72:	e7fc      	b.n	21d6e <_get_digit+0x28>

00021d74 <outs>:
{
   21d74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21d78:	4607      	mov	r7, r0
   21d7a:	4688      	mov	r8, r1
   21d7c:	4615      	mov	r5, r2
   21d7e:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   21d80:	4614      	mov	r4, r2
   21d82:	42b4      	cmp	r4, r6
   21d84:	d305      	bcc.n	21d92 <outs+0x1e>
   21d86:	b10e      	cbz	r6, 21d8c <outs+0x18>
	return (int)count;
   21d88:	1b60      	subs	r0, r4, r5
   21d8a:	e008      	b.n	21d9e <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   21d8c:	7823      	ldrb	r3, [r4, #0]
   21d8e:	2b00      	cmp	r3, #0
   21d90:	d0fa      	beq.n	21d88 <outs+0x14>
		int rc = out((int)*sp++, ctx);
   21d92:	f814 0b01 	ldrb.w	r0, [r4], #1
   21d96:	4641      	mov	r1, r8
   21d98:	47b8      	blx	r7
		if (rc < 0) {
   21d9a:	2800      	cmp	r0, #0
   21d9c:	daf1      	bge.n	21d82 <outs+0xe>
}
   21d9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00021da2 <assert_print>:

	k_panic();
}

void assert_print(const char *fmt, ...)
{
   21da2:	b40f      	push	{r0, r1, r2, r3}
   21da4:	b507      	push	{r0, r1, r2, lr}
   21da6:	a904      	add	r1, sp, #16
   21da8:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   21dac:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
   21dae:	f7ff fcde 	bl	2176e <vprintk>

	va_end(ap);
}
   21db2:	b003      	add	sp, #12
   21db4:	f85d eb04 	ldr.w	lr, [sp], #4
   21db8:	b004      	add	sp, #16
   21dba:	4770      	bx	lr

00021dbc <free_space>:
	ARG_UNUSED(err);
}

static inline bool free_space(struct mpsc_pbuf_buffer *buffer, uint32_t *res)
{
	if (buffer->rd_idx > buffer->tmp_wr_idx) {
   21dbc:	68c3      	ldr	r3, [r0, #12]
   21dbe:	6802      	ldr	r2, [r0, #0]
   21dc0:	4293      	cmp	r3, r2
   21dc2:	d904      	bls.n	21dce <free_space+0x12>
		*res =  buffer->rd_idx - buffer->tmp_wr_idx - 1;
   21dc4:	3b01      	subs	r3, #1
   21dc6:	1a9a      	subs	r2, r3, r2

		return false;
   21dc8:	2000      	movs	r0, #0
	} else if (!buffer->rd_idx) {
		*res = buffer->size - buffer->tmp_wr_idx - 1;
   21dca:	600a      	str	r2, [r1, #0]
	}

	*res = buffer->size - buffer->tmp_wr_idx;

	return true;
}
   21dcc:	4770      	bx	lr
		*res = buffer->size - buffer->tmp_wr_idx - 1;
   21dce:	6a00      	ldr	r0, [r0, #32]
	} else if (!buffer->rd_idx) {
   21dd0:	b913      	cbnz	r3, 21dd8 <free_space+0x1c>
		*res = buffer->size - buffer->tmp_wr_idx - 1;
   21dd2:	3801      	subs	r0, #1
   21dd4:	1a82      	subs	r2, r0, r2
		return false;
   21dd6:	e7f7      	b.n	21dc8 <free_space+0xc>
	*res = buffer->size - buffer->tmp_wr_idx;
   21dd8:	1a82      	subs	r2, r0, r2
	return true;
   21dda:	2001      	movs	r0, #1
   21ddc:	e7f5      	b.n	21dca <free_space+0xe>

00021dde <get_usage>:

	return true;
}

static inline uint32_t get_usage(struct mpsc_pbuf_buffer *buffer)
{
   21dde:	b513      	push	{r0, r1, r4, lr}
	uint32_t f;

	if (free_space(buffer, &f)) {
   21de0:	a901      	add	r1, sp, #4
{
   21de2:	4604      	mov	r4, r0
	if (free_space(buffer, &f)) {
   21de4:	f7ff ffea 	bl	21dbc <free_space>
   21de8:	b120      	cbz	r0, 21df4 <get_usage+0x16>
		f += (buffer->rd_idx - 1);
   21dea:	9b01      	ldr	r3, [sp, #4]
   21dec:	68e2      	ldr	r2, [r4, #12]
   21dee:	3b01      	subs	r3, #1
   21df0:	4413      	add	r3, r2
   21df2:	9301      	str	r3, [sp, #4]
	}

	return buffer->size - 1 - f;
   21df4:	6a20      	ldr	r0, [r4, #32]
   21df6:	9b01      	ldr	r3, [sp, #4]
   21df8:	1ac0      	subs	r0, r0, r3
}
   21dfa:	3801      	subs	r0, #1
   21dfc:	b002      	add	sp, #8
   21dfe:	bd10      	pop	{r4, pc}

00021e00 <idx_inc>:
	return !item->hdr.valid && !item->hdr.busy;
}

static inline uint32_t idx_inc(struct mpsc_pbuf_buffer *buffer,
				uint32_t idx, uint32_t val)
{
   21e00:	b510      	push	{r4, lr}
   21e02:	4604      	mov	r4, r0
	uint32_t i = idx + val;
   21e04:	1888      	adds	r0, r1, r2

	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   21e06:	6922      	ldr	r2, [r4, #16]
		return i & (buffer->size - 1);
   21e08:	6a23      	ldr	r3, [r4, #32]
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   21e0a:	07d2      	lsls	r2, r2, #31
   21e0c:	d502      	bpl.n	21e14 <idx_inc+0x14>
		return i & (buffer->size - 1);
   21e0e:	3b01      	subs	r3, #1
   21e10:	4018      	ands	r0, r3
	}

	return (i >= buffer->size) ? i - buffer->size : i;
}
   21e12:	bd10      	pop	{r4, pc}
	return (i >= buffer->size) ? i - buffer->size : i;
   21e14:	4298      	cmp	r0, r3
   21e16:	bf28      	it	cs
   21e18:	1ac0      	subcs	r0, r0, r3
   21e1a:	e7fa      	b.n	21e12 <idx_inc+0x12>

00021e1c <add_skip_item>:

	return 0;
}

static void add_skip_item(struct mpsc_pbuf_buffer *buffer, uint32_t wlen)
{
   21e1c:	b538      	push	{r3, r4, r5, lr}
   21e1e:	460d      	mov	r5, r1
	union mpsc_pbuf_generic skip = {
		.skip = { .valid = 0, .busy = 1, .len = wlen }
	};

	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   21e20:	69c2      	ldr	r2, [r0, #28]
	union mpsc_pbuf_generic skip = {
   21e22:	008b      	lsls	r3, r1, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   21e24:	6801      	ldr	r1, [r0, #0]
	union mpsc_pbuf_generic skip = {
   21e26:	f043 0302 	orr.w	r3, r3, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   21e2a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   21e2e:	462a      	mov	r2, r5
   21e30:	6801      	ldr	r1, [r0, #0]
{
   21e32:	4604      	mov	r4, r0
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   21e34:	f7ff ffe4 	bl	21e00 <idx_inc>
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   21e38:	6861      	ldr	r1, [r4, #4]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   21e3a:	6020      	str	r0, [r4, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   21e3c:	462a      	mov	r2, r5
   21e3e:	4620      	mov	r0, r4
   21e40:	f7ff ffde 	bl	21e00 <idx_inc>
   21e44:	6060      	str	r0, [r4, #4]
}
   21e46:	bd38      	pop	{r3, r4, r5, pc}

00021e48 <max_utilization_update>:
{
   21e48:	b538      	push	{r3, r4, r5, lr}
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
   21e4a:	6903      	ldr	r3, [r0, #16]
   21e4c:	075b      	lsls	r3, r3, #29
{
   21e4e:	4604      	mov	r4, r0
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
   21e50:	d506      	bpl.n	21e60 <max_utilization_update+0x18>
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
   21e52:	6a45      	ldr	r5, [r0, #36]	; 0x24
   21e54:	f7ff ffc3 	bl	21dde <get_usage>
   21e58:	4285      	cmp	r5, r0
   21e5a:	bf2c      	ite	cs
   21e5c:	6265      	strcs	r5, [r4, #36]	; 0x24
   21e5e:	6260      	strcc	r0, [r4, #36]	; 0x24
}
   21e60:	bd38      	pop	{r3, r4, r5, pc}

00021e62 <drop_item_locked>:
 */
static union mpsc_pbuf_generic *drop_item_locked(struct mpsc_pbuf_buffer *buffer,
						 uint32_t free_wlen,
						 bool allow_drop,
						 bool *user_packet)
{
   21e62:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21e66:	461f      	mov	r7, r3
	union mpsc_pbuf_generic *item;
	uint32_t rd_wlen;
	uint32_t skip_wlen;

	*user_packet = false;
   21e68:	2300      	movs	r3, #0
   21e6a:	703b      	strb	r3, [r7, #0]
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
   21e6c:	f8d0 a00c 	ldr.w	sl, [r0, #12]
   21e70:	f8d0 901c 	ldr.w	r9, [r0, #28]
	if (item->hdr.busy && !item->hdr.valid) {
   21e74:	f819 302a 	ldrb.w	r3, [r9, sl, lsl #2]
   21e78:	f003 0303 	and.w	r3, r3, #3
   21e7c:	2b02      	cmp	r3, #2
{
   21e7e:	4604      	mov	r4, r0
   21e80:	468b      	mov	fp, r1
   21e82:	4690      	mov	r8, r2
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
   21e84:	eb09 068a 	add.w	r6, r9, sl, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
   21e88:	d103      	bne.n	21e92 <drop_item_locked+0x30>
		return item->skip.len;
   21e8a:	f859 502a 	ldr.w	r5, [r9, sl, lsl #2]
	skip_wlen = get_skip(item);

	rd_wlen = skip_wlen ? skip_wlen : buffer->get_wlen(item);
   21e8e:	08ad      	lsrs	r5, r5, #2
   21e90:	d12e      	bne.n	21ef0 <drop_item_locked+0x8e>
   21e92:	69a3      	ldr	r3, [r4, #24]
   21e94:	4630      	mov	r0, r6
   21e96:	4798      	blx	r3
   21e98:	4605      	mov	r5, r0
	if (skip_wlen) {
		allow_drop = true;
	} else if (allow_drop) {
   21e9a:	f1b8 0f00 	cmp.w	r8, #0
   21e9e:	d038      	beq.n	21f12 <drop_item_locked+0xb0>
		if (item->hdr.busy) {
   21ea0:	f819 302a 	ldrb.w	r3, [r9, sl, lsl #2]
   21ea4:	079b      	lsls	r3, r3, #30
   21ea6:	d531      	bpl.n	21f0c <drop_item_locked+0xaa>
			/* item is currently processed and cannot be overwritten. */
			add_skip_item(buffer, free_wlen + 1);
   21ea8:	f10b 0101 	add.w	r1, fp, #1
   21eac:	4620      	mov	r0, r4
   21eae:	f7ff ffb5 	bl	21e1c <add_skip_item>
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
   21eb2:	6861      	ldr	r1, [r4, #4]
   21eb4:	462a      	mov	r2, r5
   21eb6:	4620      	mov	r0, r4
   21eb8:	f7ff ffa2 	bl	21e00 <idx_inc>
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
   21ebc:	6821      	ldr	r1, [r4, #0]
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
   21ebe:	6060      	str	r0, [r4, #4]
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
   21ec0:	462a      	mov	r2, r5
   21ec2:	4620      	mov	r0, r4
   21ec4:	f7ff ff9c 	bl	21e00 <idx_inc>

			/* Get next itme followed the busy one. */
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
   21ec8:	462a      	mov	r2, r5
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
   21eca:	6020      	str	r0, [r4, #0]
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
   21ecc:	68e1      	ldr	r1, [r4, #12]
   21ece:	4620      	mov	r0, r4
   21ed0:	f7ff ff96 	bl	21e00 <idx_inc>

			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
   21ed4:	69e3      	ldr	r3, [r4, #28]
	if (item->hdr.busy && !item->hdr.valid) {
   21ed6:	f813 2020 	ldrb.w	r2, [r3, r0, lsl #2]
   21eda:	f002 0203 	and.w	r2, r2, #3
   21ede:	2a02      	cmp	r2, #2
			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
   21ee0:	eb03 0680 	add.w	r6, r3, r0, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
   21ee4:	d10e      	bne.n	21f04 <drop_item_locked+0xa2>
		return item->skip.len;
   21ee6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
			skip_wlen = get_skip(item);
			if (skip_wlen) {
   21eea:	089b      	lsrs	r3, r3, #2
   21eec:	d00a      	beq.n	21f04 <drop_item_locked+0xa2>
				rd_wlen += skip_wlen;
   21eee:	441d      	add	r5, r3
	} else {
		item = NULL;
	}

	if (allow_drop) {
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
   21ef0:	68e1      	ldr	r1, [r4, #12]
   21ef2:	462a      	mov	r2, r5
   21ef4:	4620      	mov	r0, r4
   21ef6:	f7ff ff83 	bl	21e00 <idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
   21efa:	e9c4 0002 	strd	r0, r0, [r4, #8]
	}

	return item;
}
   21efe:	4630      	mov	r0, r6
   21f00:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				rd_wlen += buffer->get_wlen(item);
   21f04:	69a3      	ldr	r3, [r4, #24]
   21f06:	4630      	mov	r0, r6
   21f08:	4798      	blx	r3
   21f0a:	4405      	add	r5, r0
			*user_packet = true;
   21f0c:	2301      	movs	r3, #1
   21f0e:	703b      	strb	r3, [r7, #0]
	if (allow_drop) {
   21f10:	e7ee      	b.n	21ef0 <drop_item_locked+0x8e>
		item = NULL;
   21f12:	4646      	mov	r6, r8
	return item;
   21f14:	e7f3      	b.n	21efe <drop_item_locked+0x9c>

00021f16 <mpsc_pbuf_init>:
{
   21f16:	b538      	push	{r3, r4, r5, lr}
   21f18:	460d      	mov	r5, r1
   21f1a:	4604      	mov	r4, r0
__ssp_bos_icheck3(memset, void *, int)
   21f1c:	221c      	movs	r2, #28
   21f1e:	2100      	movs	r1, #0
   21f20:	f003 f95f 	bl	251e2 <memset>
	buffer->get_wlen = cfg->get_wlen;
   21f24:	68eb      	ldr	r3, [r5, #12]
   21f26:	61a3      	str	r3, [r4, #24]
	buffer->notify_drop = cfg->notify_drop;
   21f28:	68ab      	ldr	r3, [r5, #8]
   21f2a:	6163      	str	r3, [r4, #20]
	buffer->buf = cfg->buf;
   21f2c:	682b      	ldr	r3, [r5, #0]
   21f2e:	61e3      	str	r3, [r4, #28]
	buffer->size = cfg->size;
   21f30:	686b      	ldr	r3, [r5, #4]
   21f32:	6223      	str	r3, [r4, #32]
	buffer->max_usage = 0;
   21f34:	2200      	movs	r2, #0
   21f36:	6262      	str	r2, [r4, #36]	; 0x24
	buffer->flags = cfg->flags;
   21f38:	692a      	ldr	r2, [r5, #16]
 * @param x value to check
 * @return true if @p x is a power of two, false otherwise
 */
static inline bool is_power_of_two(unsigned int x)
{
	return (x != 0U) && ((x & (x - 1U)) == 0U);
   21f3a:	b123      	cbz	r3, 21f46 <mpsc_pbuf_init+0x30>
   21f3c:	1e59      	subs	r1, r3, #1
   21f3e:	4219      	tst	r1, r3
		buffer->flags |= MPSC_PBUF_SIZE_POW2;
   21f40:	bf08      	it	eq
   21f42:	f042 0201 	orreq.w	r2, r2, #1
	buffer->flags = cfg->flags;
   21f46:	6122      	str	r2, [r4, #16]
	return z_impl_k_sem_init(sem, initial_count, limit);
   21f48:	2201      	movs	r2, #1
   21f4a:	f104 0028 	add.w	r0, r4, #40	; 0x28
   21f4e:	2100      	movs	r1, #0
}
   21f50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   21f54:	f002 bc9d 	b.w	24892 <z_impl_k_sem_init>

00021f58 <mpsc_pbuf_alloc>:

}

union mpsc_pbuf_generic *mpsc_pbuf_alloc(struct mpsc_pbuf_buffer *buffer,
					 size_t wlen, k_timeout_t timeout)
{
   21f58:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   21f5c:	4698      	mov	r8, r3
	uint32_t free_wlen;
	bool valid_drop;

	MPSC_PBUF_DBG(buffer, "alloc %d words, ", (int)wlen);

	if (wlen > (buffer->size - 1)) {
   21f5e:	6a03      	ldr	r3, [r0, #32]
   21f60:	3b01      	subs	r3, #1
   21f62:	428b      	cmp	r3, r1
{
   21f64:	4604      	mov	r4, r0
   21f66:	460e      	mov	r6, r1
   21f68:	4617      	mov	r7, r2
	if (wlen > (buffer->size - 1)) {
   21f6a:	d351      	bcc.n	22010 <mpsc_pbuf_alloc+0xb8>
	union mpsc_pbuf_generic *dropped_item = NULL;
   21f6c:	2500      	movs	r5, #0
	__asm__ volatile(
   21f6e:	f04f 0340 	mov.w	r3, #64	; 0x40
   21f72:	f3ef 8911 	mrs	r9, BASEPRI
   21f76:	f383 8812 	msr	BASEPRI_MAX, r3
   21f7a:	f3bf 8f6f 	isb	sy
		k_spinlock_key_t key;
		bool wrap;

		cont = false;
		key = k_spin_lock(&buffer->lock);
		wrap = free_space(buffer, &free_wlen);
   21f7e:	a901      	add	r1, sp, #4
   21f80:	4620      	mov	r0, r4
   21f82:	f7ff ff1b 	bl	21dbc <free_space>

		if (free_wlen >= wlen) {
   21f86:	f8dd a004 	ldr.w	sl, [sp, #4]
   21f8a:	45b2      	cmp	sl, r6
   21f8c:	d317      	bcc.n	21fbe <mpsc_pbuf_alloc+0x66>
			item =
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
   21f8e:	6822      	ldr	r2, [r4, #0]
			item =
   21f90:	69e3      	ldr	r3, [r4, #28]
			item->hdr.valid = 0;
   21f92:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
   21f96:	f021 0103 	bic.w	r1, r1, #3
   21f9a:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
			item =
   21f9e:	eb03 0582 	add.w	r5, r3, r2, lsl #2
			item->hdr.busy = 0;
			buffer->tmp_wr_idx = idx_inc(buffer,
   21fa2:	6821      	ldr	r1, [r4, #0]
   21fa4:	4632      	mov	r2, r6
   21fa6:	4620      	mov	r0, r4
   21fa8:	f7ff ff2a 	bl	21e00 <idx_inc>
   21fac:	6020      	str	r0, [r4, #0]
	__asm__ volatile(
   21fae:	f389 8811 	msr	BASEPRI, r9
   21fb2:	f3bf 8f6f 	isb	sy
		/* During test fill with 0's to simplify message comparison */
		memset(item, 0, sizeof(int) * wlen);
	}

	return item;
}
   21fb6:	4628      	mov	r0, r5
   21fb8:	b002      	add	sp, #8
   21fba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		} else if (wrap) {
   21fbe:	b150      	cbz	r0, 21fd6 <mpsc_pbuf_alloc+0x7e>
			add_skip_item(buffer, free_wlen);
   21fc0:	4651      	mov	r1, sl
   21fc2:	4620      	mov	r0, r4
   21fc4:	f7ff ff2a 	bl	21e1c <add_skip_item>
   21fc8:	f389 8811 	msr	BASEPRI, r9
   21fcc:	f3bf 8f6f 	isb	sy
		if (cont && dropped_item && valid_drop) {
   21fd0:	2d00      	cmp	r5, #0
   21fd2:	d0cb      	beq.n	21f6c <mpsc_pbuf_alloc+0x14>
   21fd4:	e033      	b.n	2203e <mpsc_pbuf_alloc+0xe6>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   21fd6:	ea57 0308 	orrs.w	r3, r7, r8
   21fda:	d020      	beq.n	2201e <mpsc_pbuf_alloc+0xc6>
			   !k_is_in_isr()) {
   21fdc:	f002 fbaa 	bl	24734 <k_is_in_isr>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   21fe0:	b9e8      	cbnz	r0, 2201e <mpsc_pbuf_alloc+0xc6>
   21fe2:	f389 8811 	msr	BASEPRI, r9
   21fe6:	f3bf 8f6f 	isb	sy
	return z_impl_k_sem_take(sem, timeout);
   21fea:	463a      	mov	r2, r7
   21fec:	4643      	mov	r3, r8
   21fee:	f104 0028 	add.w	r0, r4, #40	; 0x28
   21ff2:	f7fd fccf 	bl	1f994 <z_impl_k_sem_take>
	__asm__ volatile(
   21ff6:	f04f 0240 	mov.w	r2, #64	; 0x40
   21ffa:	f3ef 8311 	mrs	r3, BASEPRI
   21ffe:	f382 8812 	msr	BASEPRI_MAX, r2
   22002:	f3bf 8f6f 	isb	sy
			if (err == 0) {
   22006:	b128      	cbz	r0, 22014 <mpsc_pbuf_alloc+0xbc>
	__asm__ volatile(
   22008:	f383 8811 	msr	BASEPRI, r3
   2200c:	f3bf 8f6f 	isb	sy
		return NULL;
   22010:	2500      	movs	r5, #0
   22012:	e7d0      	b.n	21fb6 <mpsc_pbuf_alloc+0x5e>
   22014:	f383 8811 	msr	BASEPRI, r3
   22018:	f3bf 8f6f 	isb	sy
		if (cont && dropped_item && valid_drop) {
   2201c:	e7d8      	b.n	21fd0 <mpsc_pbuf_alloc+0x78>
			bool user_drop = buffer->flags & MPSC_PBUF_MODE_OVERWRITE;
   2201e:	6922      	ldr	r2, [r4, #16]
			dropped_item = drop_item_locked(buffer, free_wlen,
   22020:	f10d 0303 	add.w	r3, sp, #3
   22024:	f3c2 0240 	ubfx	r2, r2, #1, #1
   22028:	4651      	mov	r1, sl
   2202a:	4620      	mov	r0, r4
   2202c:	f7ff ff19 	bl	21e62 <drop_item_locked>
   22030:	4605      	mov	r5, r0
   22032:	f389 8811 	msr	BASEPRI, r9
   22036:	f3bf 8f6f 	isb	sy
		if (cont && dropped_item && valid_drop) {
   2203a:	2800      	cmp	r0, #0
   2203c:	d0e8      	beq.n	22010 <mpsc_pbuf_alloc+0xb8>
   2203e:	f89d 3003 	ldrb.w	r3, [sp, #3]
   22042:	2b00      	cmp	r3, #0
   22044:	d093      	beq.n	21f6e <mpsc_pbuf_alloc+0x16>
			if (buffer->notify_drop) {
   22046:	6963      	ldr	r3, [r4, #20]
   22048:	2b00      	cmp	r3, #0
   2204a:	d08f      	beq.n	21f6c <mpsc_pbuf_alloc+0x14>
				buffer->notify_drop(buffer, dropped_item);
   2204c:	4629      	mov	r1, r5
   2204e:	4620      	mov	r0, r4
   22050:	4798      	blx	r3
   22052:	e78b      	b.n	21f6c <mpsc_pbuf_alloc+0x14>

00022054 <mpsc_pbuf_commit>:

void mpsc_pbuf_commit(struct mpsc_pbuf_buffer *buffer,
		       union mpsc_pbuf_generic *item)
{
   22054:	b570      	push	{r4, r5, r6, lr}
   22056:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
   22058:	6983      	ldr	r3, [r0, #24]
   2205a:	4608      	mov	r0, r1
{
   2205c:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
   2205e:	4798      	blx	r3
   22060:	4602      	mov	r2, r0
	__asm__ volatile(
   22062:	f04f 0340 	mov.w	r3, #64	; 0x40
   22066:	f3ef 8611 	mrs	r6, BASEPRI
   2206a:	f383 8812 	msr	BASEPRI_MAX, r3
   2206e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&buffer->lock);

	item->hdr.valid = 1;
   22072:	782b      	ldrb	r3, [r5, #0]
   22074:	f043 0301 	orr.w	r3, r3, #1
   22078:	702b      	strb	r3, [r5, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   2207a:	6861      	ldr	r1, [r4, #4]
   2207c:	4620      	mov	r0, r4
   2207e:	f7ff febf 	bl	21e00 <idx_inc>
   22082:	6060      	str	r0, [r4, #4]
	max_utilization_update(buffer);
   22084:	4620      	mov	r0, r4
   22086:	f7ff fedf 	bl	21e48 <max_utilization_update>
	__asm__ volatile(
   2208a:	f386 8811 	msr	BASEPRI, r6
   2208e:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&buffer->lock, key);
	MPSC_PBUF_DBG(buffer, "committed %p ", item);
}
   22092:	bd70      	pop	{r4, r5, r6, pc}

00022094 <mpsc_pbuf_claim>:
		}
	} while (cont);
}

const union mpsc_pbuf_generic *mpsc_pbuf_claim(struct mpsc_pbuf_buffer *buffer)
{
   22094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22096:	4604      	mov	r4, r0
	__asm__ volatile(
   22098:	f04f 0340 	mov.w	r3, #64	; 0x40
   2209c:	f3ef 8611 	mrs	r6, BASEPRI
   220a0:	f383 8812 	msr	BASEPRI_MAX, r3
   220a4:	f3bf 8f6f 	isb	sy
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
   220a8:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   220ac:	4293      	cmp	r3, r2
	*res = buffer->size - buffer->tmp_rd_idx;
   220ae:	bf88      	it	hi
   220b0:	6a22      	ldrhi	r2, [r4, #32]

		cont = false;
		key = k_spin_lock(&buffer->lock);
		(void)available(buffer, &a);
		item = (union mpsc_pbuf_generic *)
			&buffer->buf[buffer->tmp_rd_idx];
   220b2:	69e1      	ldr	r1, [r4, #28]
	*res = buffer->size - buffer->tmp_rd_idx;
   220b4:	1ad2      	subs	r2, r2, r3

		if (!a || is_invalid(item)) {
   220b6:	b132      	cbz	r2, 220c6 <mpsc_pbuf_claim+0x32>
	return !item->hdr.valid && !item->hdr.busy;
   220b8:	f811 2023 	ldrb.w	r2, [r1, r3, lsl #2]
		if (!a || is_invalid(item)) {
   220bc:	f012 0003 	ands.w	r0, r2, #3
		item = (union mpsc_pbuf_generic *)
   220c0:	eb01 0783 	add.w	r7, r1, r3, lsl #2
		if (!a || is_invalid(item)) {
   220c4:	d105      	bne.n	220d2 <mpsc_pbuf_claim+0x3e>
	__asm__ volatile(
   220c6:	f386 8811 	msr	BASEPRI, r6
   220ca:	f3bf 8f6f 	isb	sy
			item = NULL;
   220ce:	2700      	movs	r7, #0
			MPSC_PBUF_DBG(buffer, "claimed: %p ", item);
		}
		k_spin_unlock(&buffer->lock, key);
	} while (cont);

	return item;
   220d0:	e02e      	b.n	22130 <mpsc_pbuf_claim+0x9c>
	if (item->hdr.busy && !item->hdr.valid) {
   220d2:	2802      	cmp	r0, #2
   220d4:	d103      	bne.n	220de <mpsc_pbuf_claim+0x4a>
		return item->skip.len;
   220d6:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
			if (skip || !is_valid(item)) {
   220da:	08ad      	lsrs	r5, r5, #2
   220dc:	d105      	bne.n	220ea <mpsc_pbuf_claim+0x56>
   220de:	07d0      	lsls	r0, r2, #31
   220e0:	d414      	bmi.n	2210c <mpsc_pbuf_claim+0x78>
					skip ? skip : buffer->get_wlen(item);
   220e2:	69a3      	ldr	r3, [r4, #24]
   220e4:	4638      	mov	r0, r7
   220e6:	4798      	blx	r3
   220e8:	4605      	mov	r5, r0
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
   220ea:	68a1      	ldr	r1, [r4, #8]
   220ec:	462a      	mov	r2, r5
   220ee:	4620      	mov	r0, r4
   220f0:	f7ff fe86 	bl	21e00 <idx_inc>
					idx_inc(buffer, buffer->rd_idx, inc);
   220f4:	68e1      	ldr	r1, [r4, #12]
				buffer->tmp_rd_idx =
   220f6:	60a0      	str	r0, [r4, #8]
					idx_inc(buffer, buffer->rd_idx, inc);
   220f8:	462a      	mov	r2, r5
   220fa:	4620      	mov	r0, r4
   220fc:	f7ff fe80 	bl	21e00 <idx_inc>
				buffer->rd_idx =
   22100:	60e0      	str	r0, [r4, #12]
   22102:	f386 8811 	msr	BASEPRI, r6
   22106:	f3bf 8f6f 	isb	sy
	} while (cont);
   2210a:	e7c5      	b.n	22098 <mpsc_pbuf_claim+0x4>
				item->hdr.busy = 1;
   2210c:	f042 0202 	orr.w	r2, r2, #2
   22110:	f801 2023 	strb.w	r2, [r1, r3, lsl #2]
					idx_inc(buffer, buffer->tmp_rd_idx,
   22114:	4638      	mov	r0, r7
   22116:	69a3      	ldr	r3, [r4, #24]
   22118:	68a5      	ldr	r5, [r4, #8]
   2211a:	4798      	blx	r3
   2211c:	4629      	mov	r1, r5
   2211e:	4602      	mov	r2, r0
   22120:	4620      	mov	r0, r4
   22122:	f7ff fe6d 	bl	21e00 <idx_inc>
				buffer->tmp_rd_idx =
   22126:	60a0      	str	r0, [r4, #8]
   22128:	f386 8811 	msr	BASEPRI, r6
   2212c:	f3bf 8f6f 	isb	sy
}
   22130:	4638      	mov	r0, r7
   22132:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00022134 <mpsc_pbuf_free>:

void mpsc_pbuf_free(struct mpsc_pbuf_buffer *buffer,
		     const union mpsc_pbuf_generic *item)
{
   22134:	b570      	push	{r4, r5, r6, lr}
   22136:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
   22138:	6983      	ldr	r3, [r0, #24]
   2213a:	4608      	mov	r0, r1
{
   2213c:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
   2213e:	4798      	blx	r3
   22140:	4602      	mov	r2, r0
	__asm__ volatile(
   22142:	f04f 0340 	mov.w	r3, #64	; 0x40
   22146:	f3ef 8611 	mrs	r6, BASEPRI
   2214a:	f383 8812 	msr	BASEPRI_MAX, r3
   2214e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
	union mpsc_pbuf_generic *witem = (union mpsc_pbuf_generic *)item;

	witem->hdr.valid = 0;
   22152:	782b      	ldrb	r3, [r5, #0]
   22154:	f36f 0300 	bfc	r3, #0, #1
   22158:	702b      	strb	r3, [r5, #0]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
   2215a:	6923      	ldr	r3, [r4, #16]
   2215c:	079b      	lsls	r3, r3, #30
   2215e:	d505      	bpl.n	2216c <mpsc_pbuf_free+0x38>
		 ((uint32_t *)item == &buffer->buf[buffer->rd_idx])) {
   22160:	68e1      	ldr	r1, [r4, #12]
   22162:	69e3      	ldr	r3, [r4, #28]
   22164:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
   22168:	429d      	cmp	r5, r3
   2216a:	d112      	bne.n	22192 <mpsc_pbuf_free+0x5e>
		witem->hdr.busy = 0;
   2216c:	782b      	ldrb	r3, [r5, #0]
   2216e:	f36f 0341 	bfc	r3, #1, #1
   22172:	702b      	strb	r3, [r5, #0]
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
   22174:	68e1      	ldr	r1, [r4, #12]
   22176:	4620      	mov	r0, r4
   22178:	f7ff fe42 	bl	21e00 <idx_inc>
   2217c:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   2217e:	f386 8811 	msr	BASEPRI, r6
   22182:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   22186:	f104 0028 	add.w	r0, r4, #40	; 0x28
	}
	MPSC_PBUF_DBG(buffer, "freed: %p ", item);

	k_spin_unlock(&buffer->lock, key);
	k_sem_give(&buffer->sem);
}
   2218a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2218e:	f7fd bbdb 	b.w	1f948 <z_impl_k_sem_give>
		witem->skip.len = wlen;
   22192:	682b      	ldr	r3, [r5, #0]
   22194:	f360 039f 	bfi	r3, r0, #2, #30
   22198:	602b      	str	r3, [r5, #0]
   2219a:	e7f0      	b.n	2217e <mpsc_pbuf_free+0x4a>

0002219c <mpsc_pbuf_is_pending>:
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
   2219c:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
   221a0:	4293      	cmp	r3, r2
	*res = buffer->size - buffer->tmp_rd_idx;
   221a2:	bf88      	it	hi
   221a4:	6a02      	ldrhi	r2, [r0, #32]
   221a6:	1ad3      	subs	r3, r2, r3
	uint32_t a;

	(void)available(buffer, &a);

	return a ? true : false;
}
   221a8:	1e18      	subs	r0, r3, #0
   221aa:	bf18      	it	ne
   221ac:	2001      	movne	r0, #1
   221ae:	4770      	bx	lr

000221b0 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   221b0:	4770      	bx	lr

000221b2 <log_msg_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG2_LOG;
   221b2:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
   221b4:	075b      	lsls	r3, r3, #29
   221b6:	d40b      	bmi.n	221d0 <log_msg_generic_get_wlen+0x1e>
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
   221b8:	6803      	ldr	r3, [r0, #0]
   221ba:	8842      	ldrh	r2, [r0, #2]
   221bc:	f3c3 2349 	ubfx	r3, r3, #9, #10
   221c0:	f3c2 02cb 	ubfx	r2, r2, #3, #12
   221c4:	1898      	adds	r0, r3, r2
   221c6:	3017      	adds	r0, #23
   221c8:	f020 0007 	bic.w	r0, r0, #7
   221cc:	0880      	lsrs	r0, r0, #2
		return log_msg_get_total_wlen(msg->hdr.desc);
   221ce:	4770      	bx	lr
	return 0;
   221d0:	2000      	movs	r0, #0
}
   221d2:	4770      	bx	lr

000221d4 <dummy_timestamp>:
}
   221d4:	2000      	movs	r0, #0
   221d6:	4770      	bx	lr

000221d8 <default_get_timestamp>:
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
   221d8:	f001 bfd6 	b.w	24188 <sys_clock_cycle_get_32>

000221dc <atomic_inc>:
{
   221dc:	4603      	mov	r3, r0
}
   221de:	f3bf 8f5b 	dmb	ish
   221e2:	e853 0f00 	ldrex	r0, [r3]
   221e6:	1c42      	adds	r2, r0, #1
   221e8:	e843 2100 	strex	r1, r2, [r3]
   221ec:	2900      	cmp	r1, #0
   221ee:	d1f8      	bne.n	221e2 <atomic_inc+0x6>
   221f0:	f3bf 8f5b 	dmb	ish
   221f4:	4770      	bx	lr

000221f6 <z_log_vprintk>:
{
   221f6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
   221f8:	2300      	movs	r3, #0
   221fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
   221fe:	e9cd 3300 	strd	r3, r3, [sp]
   22202:	461a      	mov	r2, r3
   22204:	4619      	mov	r1, r3
   22206:	4618      	mov	r0, r3
   22208:	f7f3 fa4e 	bl	156a8 <z_impl_z_log_msg_runtime_vcreate>
}
   2220c:	b005      	add	sp, #20
   2220e:	f85d fb04 	ldr.w	pc, [sp], #4

00022212 <z_log_notify_drop>:
				     const union mpsc_pbuf_generic *item)
{
	ARG_UNUSED(buffer);
	ARG_UNUSED(item);

	z_log_dropped(true);
   22212:	2001      	movs	r0, #1
   22214:	f7f3 b834 	b.w	15280 <z_log_dropped>

00022218 <z_log_get_tag>:
}
   22218:	2000      	movs	r0, #0
   2221a:	4770      	bx	lr

0002221c <z_cbprintf_cpy>:
{
   2221c:	b570      	push	{r4, r5, r6, lr}
	if ((desc->size - desc->off) < len) {
   2221e:	e9d2 3601 	ldrd	r3, r6, [r2, #4]
   22222:	1b9b      	subs	r3, r3, r6
   22224:	428b      	cmp	r3, r1
{
   22226:	460c      	mov	r4, r1
   22228:	4615      	mov	r5, r2
	if ((desc->size - desc->off) < len) {
   2222a:	d30a      	bcc.n	22242 <z_cbprintf_cpy+0x26>
	memcpy(&((uint8_t *)desc->buf)[desc->off], buf, len);
   2222c:	6813      	ldr	r3, [r2, #0]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2222e:	460a      	mov	r2, r1
   22230:	4601      	mov	r1, r0
   22232:	1998      	adds	r0, r3, r6
   22234:	f002 ffc7 	bl	251c6 <memcpy>
	desc->off += len;
   22238:	68ab      	ldr	r3, [r5, #8]
   2223a:	4423      	add	r3, r4
   2223c:	60ab      	str	r3, [r5, #8]
	return len;
   2223e:	4620      	mov	r0, r4
}
   22240:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOSPC;
   22242:	f06f 001b 	mvn.w	r0, #27
   22246:	e7fb      	b.n	22240 <z_cbprintf_cpy+0x24>

00022248 <z_log_msg_finalize>:
{
   22248:	b570      	push	{r4, r5, r6, lr}
   2224a:	460e      	mov	r6, r1
   2224c:	4615      	mov	r5, r2
   2224e:	4619      	mov	r1, r3
   22250:	f3c2 42cb 	ubfx	r2, r2, #19, #12
	if (!msg) {
   22254:	4604      	mov	r4, r0
   22256:	b918      	cbnz	r0, 22260 <z_log_msg_finalize+0x18>
}
   22258:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_log_dropped(false);
   2225c:	f7f3 b810 	b.w	15280 <z_log_dropped>
	if (data) {
   22260:	b12b      	cbz	r3, 2226e <z_log_msg_finalize+0x26>
		uint8_t *d = msg->data + desc.package_len;
   22262:	3010      	adds	r0, #16
   22264:	f3c5 2349 	ubfx	r3, r5, #9, #10
   22268:	4418      	add	r0, r3
   2226a:	f002 ffac 	bl	251c6 <memcpy>
	msg->hdr.source = source;
   2226e:	e9c4 5600 	strd	r5, r6, [r4]
	z_log_msg_commit(msg);
   22272:	4620      	mov	r0, r4
}
   22274:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_msg_commit(msg);
   22278:	f7f3 b98e 	b.w	15598 <z_log_msg_commit>

0002227c <buffer_write>:
{
   2227c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2227e:	4606      	mov	r6, r0
   22280:	460d      	mov	r5, r1
   22282:	4614      	mov	r4, r2
   22284:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   22286:	4621      	mov	r1, r4
   22288:	4628      	mov	r0, r5
   2228a:	463a      	mov	r2, r7
   2228c:	47b0      	blx	r6
	} while (len != 0);
   2228e:	1a24      	subs	r4, r4, r0
		buf += processed;
   22290:	4405      	add	r5, r0
	} while (len != 0);
   22292:	d1f8      	bne.n	22286 <buffer_write+0xa>
}
   22294:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00022296 <cbvprintf>:
{
   22296:	b513      	push	{r0, r1, r4, lr}
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   22298:	2400      	movs	r4, #0
   2229a:	9400      	str	r4, [sp, #0]
   2229c:	f7f0 fb1c 	bl	128d8 <z_cbvprintf_impl>
}
   222a0:	b002      	add	sp, #8
   222a2:	bd10      	pop	{r4, pc}

000222a4 <log_output_flush>:
{
   222a4:	b510      	push	{r4, lr}
		     output->control_block->offset,
   222a6:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
   222a8:	6881      	ldr	r1, [r0, #8]
{
   222aa:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
   222ac:	e9d2 2300 	ldrd	r2, r3, [r2]
   222b0:	6800      	ldr	r0, [r0, #0]
   222b2:	f7ff ffe3 	bl	2227c <buffer_write>
	output->control_block->offset = 0;
   222b6:	6863      	ldr	r3, [r4, #4]
   222b8:	2200      	movs	r2, #0
   222ba:	601a      	str	r2, [r3, #0]
}
   222bc:	bd10      	pop	{r4, pc}

000222be <out_func>:
{
   222be:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
   222c0:	684b      	ldr	r3, [r1, #4]
   222c2:	681a      	ldr	r2, [r3, #0]
   222c4:	68cb      	ldr	r3, [r1, #12]
   222c6:	429a      	cmp	r2, r3
{
   222c8:	4605      	mov	r5, r0
   222ca:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   222cc:	d102      	bne.n	222d4 <out_func+0x16>
		log_output_flush(out_ctx);
   222ce:	4608      	mov	r0, r1
   222d0:	f7ff ffe8 	bl	222a4 <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   222d4:	6863      	ldr	r3, [r4, #4]
   222d6:	f3bf 8f5b 	dmb	ish
   222da:	e853 2f00 	ldrex	r2, [r3]
   222de:	1c51      	adds	r1, r2, #1
   222e0:	e843 1000 	strex	r0, r1, [r3]
   222e4:	2800      	cmp	r0, #0
   222e6:	d1f8      	bne.n	222da <out_func+0x1c>
   222e8:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
   222ec:	68a3      	ldr	r3, [r4, #8]
   222ee:	549d      	strb	r5, [r3, r2]
}
   222f0:	2000      	movs	r0, #0
   222f2:	bd38      	pop	{r3, r4, r5, pc}

000222f4 <cr_out_func>:
	if (c == '\n') {
   222f4:	280a      	cmp	r0, #10
{
   222f6:	b538      	push	{r3, r4, r5, lr}
   222f8:	4604      	mov	r4, r0
   222fa:	460d      	mov	r5, r1
	if (c == '\n') {
   222fc:	d102      	bne.n	22304 <cr_out_func+0x10>
		out_func((int)'\r', ctx);
   222fe:	200d      	movs	r0, #13
   22300:	f7ff ffdd 	bl	222be <out_func>
	out_func(c, ctx);
   22304:	4629      	mov	r1, r5
   22306:	4620      	mov	r0, r4
   22308:	f7ff ffd9 	bl	222be <out_func>
}
   2230c:	2000      	movs	r0, #0
   2230e:	bd38      	pop	{r3, r4, r5, pc}

00022310 <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   22310:	b538      	push	{r3, r4, r5, lr}
   22312:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   22314:	42ab      	cmp	r3, r5
{
   22316:	4611      	mov	r1, r2
   22318:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   2231a:	d804      	bhi.n	22326 <_copy+0x16>
   2231c:	461a      	mov	r2, r3
   2231e:	f002 ff52 	bl	251c6 <memcpy>
		(void)memcpy(to, from, from_len);
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   22322:	4620      	mov	r0, r4
   22324:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   22326:	2400      	movs	r4, #0
   22328:	e7fb      	b.n	22322 <_copy+0x12>

0002232a <_set>:
__ssp_bos_icheck3(memset, void *, int)
   2232a:	f002 bf5a 	b.w	251e2 <memset>

0002232e <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   2232e:	09c3      	lsrs	r3, r0, #7
   22330:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   22334:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   22338:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   2233c:	b2c0      	uxtb	r0, r0
   2233e:	4770      	bx	lr

00022340 <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   22340:	78cb      	ldrb	r3, [r1, #3]
   22342:	7802      	ldrb	r2, [r0, #0]
   22344:	4053      	eors	r3, r2
   22346:	7003      	strb	r3, [r0, #0]
   22348:	884b      	ldrh	r3, [r1, #2]
   2234a:	7842      	ldrb	r2, [r0, #1]
   2234c:	4053      	eors	r3, r2
   2234e:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   22350:	680a      	ldr	r2, [r1, #0]
   22352:	7883      	ldrb	r3, [r0, #2]
   22354:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   22358:	7083      	strb	r3, [r0, #2]
   2235a:	680a      	ldr	r2, [r1, #0]
   2235c:	78c3      	ldrb	r3, [r0, #3]
   2235e:	4053      	eors	r3, r2
   22360:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   22362:	79cb      	ldrb	r3, [r1, #7]
   22364:	7902      	ldrb	r2, [r0, #4]
   22366:	4053      	eors	r3, r2
   22368:	7103      	strb	r3, [r0, #4]
   2236a:	88cb      	ldrh	r3, [r1, #6]
   2236c:	7942      	ldrb	r2, [r0, #5]
   2236e:	4053      	eors	r3, r2
   22370:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   22372:	684a      	ldr	r2, [r1, #4]
   22374:	7983      	ldrb	r3, [r0, #6]
   22376:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   2237a:	7183      	strb	r3, [r0, #6]
   2237c:	684a      	ldr	r2, [r1, #4]
   2237e:	79c3      	ldrb	r3, [r0, #7]
   22380:	4053      	eors	r3, r2
   22382:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   22384:	7acb      	ldrb	r3, [r1, #11]
   22386:	7a02      	ldrb	r2, [r0, #8]
   22388:	4053      	eors	r3, r2
   2238a:	7203      	strb	r3, [r0, #8]
   2238c:	7a42      	ldrb	r2, [r0, #9]
   2238e:	894b      	ldrh	r3, [r1, #10]
   22390:	4053      	eors	r3, r2
   22392:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   22394:	688a      	ldr	r2, [r1, #8]
   22396:	7a83      	ldrb	r3, [r0, #10]
   22398:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   2239c:	7283      	strb	r3, [r0, #10]
   2239e:	688a      	ldr	r2, [r1, #8]
   223a0:	7ac3      	ldrb	r3, [r0, #11]
   223a2:	4053      	eors	r3, r2
   223a4:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   223a6:	7bcb      	ldrb	r3, [r1, #15]
   223a8:	7b02      	ldrb	r2, [r0, #12]
   223aa:	4053      	eors	r3, r2
   223ac:	7303      	strb	r3, [r0, #12]
   223ae:	89cb      	ldrh	r3, [r1, #14]
   223b0:	7b42      	ldrb	r2, [r0, #13]
   223b2:	4053      	eors	r3, r2
   223b4:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   223b6:	68ca      	ldr	r2, [r1, #12]
   223b8:	7b83      	ldrb	r3, [r0, #14]
   223ba:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   223be:	7383      	strb	r3, [r0, #14]
   223c0:	68ca      	ldr	r2, [r1, #12]
   223c2:	7bc3      	ldrb	r3, [r0, #15]
   223c4:	4053      	eors	r3, r2
   223c6:	73c3      	strb	r3, [r0, #15]
}
   223c8:	4770      	bx	lr

000223ca <shift_rows>:
/*
 * This shift_rows also implements the matrix flip required for mix_columns, but
 * performs it here to reduce the number of memory operations.
 */
static inline void shift_rows(uint8_t *s)
{
   223ca:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t t[Nb * Nk];

	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   223cc:	7802      	ldrb	r2, [r0, #0]
   223ce:	f88d 2000 	strb.w	r2, [sp]
   223d2:	7942      	ldrb	r2, [r0, #5]
   223d4:	f88d 2001 	strb.w	r2, [sp, #1]
   223d8:	7a82      	ldrb	r2, [r0, #10]
   223da:	f88d 2002 	strb.w	r2, [sp, #2]
   223de:	7bc2      	ldrb	r2, [r0, #15]
   223e0:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   223e4:	7902      	ldrb	r2, [r0, #4]
   223e6:	f88d 2004 	strb.w	r2, [sp, #4]
   223ea:	7a42      	ldrb	r2, [r0, #9]
   223ec:	f88d 2005 	strb.w	r2, [sp, #5]
   223f0:	7b82      	ldrb	r2, [r0, #14]
   223f2:	f88d 2006 	strb.w	r2, [sp, #6]
   223f6:	78c2      	ldrb	r2, [r0, #3]
   223f8:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   223fc:	7a02      	ldrb	r2, [r0, #8]
   223fe:	f88d 2008 	strb.w	r2, [sp, #8]
   22402:	7b42      	ldrb	r2, [r0, #13]
   22404:	f88d 2009 	strb.w	r2, [sp, #9]
   22408:	7882      	ldrb	r2, [r0, #2]
   2240a:	f88d 200a 	strb.w	r2, [sp, #10]
   2240e:	79c2      	ldrb	r2, [r0, #7]
   22410:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   22414:	7b02      	ldrb	r2, [r0, #12]
   22416:	f88d 200c 	strb.w	r2, [sp, #12]
   2241a:	7842      	ldrb	r2, [r0, #1]
   2241c:	7ac3      	ldrb	r3, [r0, #11]
   2241e:	f88d 200d 	strb.w	r2, [sp, #13]
   22422:	7982      	ldrb	r2, [r0, #6]
   22424:	f88d 200e 	strb.w	r2, [sp, #14]
   22428:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   2242c:	2310      	movs	r3, #16
   2242e:	466a      	mov	r2, sp
   22430:	4619      	mov	r1, r3
   22432:	f7ff ff6d 	bl	22310 <_copy>
}
   22436:	b005      	add	sp, #20
   22438:	f85d fb04 	ldr.w	pc, [sp], #4

0002243c <mult_row_column>:
{
   2243c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2243e:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   22440:	7808      	ldrb	r0, [r1, #0]
{
   22442:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   22444:	f7ff ff73 	bl	2232e <_double_byte>
   22448:	4605      	mov	r5, r0
   2244a:	7860      	ldrb	r0, [r4, #1]
   2244c:	f7ff ff6f 	bl	2232e <_double_byte>
   22450:	78a2      	ldrb	r2, [r4, #2]
   22452:	7863      	ldrb	r3, [r4, #1]
   22454:	4053      	eors	r3, r2
   22456:	78e2      	ldrb	r2, [r4, #3]
   22458:	4053      	eors	r3, r2
   2245a:	405d      	eors	r5, r3
   2245c:	4068      	eors	r0, r5
   2245e:	7030      	strb	r0, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   22460:	7860      	ldrb	r0, [r4, #1]
   22462:	7827      	ldrb	r7, [r4, #0]
   22464:	f7ff ff63 	bl	2232e <_double_byte>
   22468:	4605      	mov	r5, r0
   2246a:	78a0      	ldrb	r0, [r4, #2]
   2246c:	f7ff ff5f 	bl	2232e <_double_byte>
   22470:	78a3      	ldrb	r3, [r4, #2]
   22472:	405f      	eors	r7, r3
   22474:	78e3      	ldrb	r3, [r4, #3]
   22476:	405f      	eors	r7, r3
   22478:	407d      	eors	r5, r7
   2247a:	4068      	eors	r0, r5
   2247c:	7070      	strb	r0, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   2247e:	7863      	ldrb	r3, [r4, #1]
   22480:	7827      	ldrb	r7, [r4, #0]
   22482:	78a0      	ldrb	r0, [r4, #2]
   22484:	405f      	eors	r7, r3
   22486:	f7ff ff52 	bl	2232e <_double_byte>
   2248a:	4605      	mov	r5, r0
   2248c:	78e0      	ldrb	r0, [r4, #3]
   2248e:	f7ff ff4e 	bl	2232e <_double_byte>
   22492:	78e3      	ldrb	r3, [r4, #3]
   22494:	405f      	eors	r7, r3
   22496:	407d      	eors	r5, r7
   22498:	4068      	eors	r0, r5
   2249a:	70b0      	strb	r0, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   2249c:	7820      	ldrb	r0, [r4, #0]
   2249e:	f7ff ff46 	bl	2232e <_double_byte>
   224a2:	7862      	ldrb	r2, [r4, #1]
   224a4:	7823      	ldrb	r3, [r4, #0]
   224a6:	4053      	eors	r3, r2
   224a8:	78a2      	ldrb	r2, [r4, #2]
   224aa:	4053      	eors	r3, r2
   224ac:	ea80 0503 	eor.w	r5, r0, r3
   224b0:	78e0      	ldrb	r0, [r4, #3]
   224b2:	f7ff ff3c 	bl	2232e <_double_byte>
   224b6:	b2ed      	uxtb	r5, r5
   224b8:	4045      	eors	r5, r0
   224ba:	70f5      	strb	r5, [r6, #3]
}
   224bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000224be <tc_aes_encrypt>:

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   224be:	b570      	push	{r4, r5, r6, lr}
   224c0:	4614      	mov	r4, r2
   224c2:	b088      	sub	sp, #32
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   224c4:	4605      	mov	r5, r0
   224c6:	2800      	cmp	r0, #0
   224c8:	d049      	beq.n	2255e <tc_aes_encrypt+0xa0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   224ca:	2900      	cmp	r1, #0
   224cc:	d049      	beq.n	22562 <tc_aes_encrypt+0xa4>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   224ce:	2a00      	cmp	r2, #0
   224d0:	d049      	beq.n	22566 <tc_aes_encrypt+0xa8>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   224d2:	2310      	movs	r3, #16
   224d4:	460a      	mov	r2, r1
   224d6:	4668      	mov	r0, sp
   224d8:	4619      	mov	r1, r3
   224da:	f7ff ff19 	bl	22310 <_copy>
	add_round_key(state, s->words);
   224de:	4621      	mov	r1, r4
   224e0:	4668      	mov	r0, sp
   224e2:	f7ff ff2d 	bl	22340 <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   224e6:	3410      	adds	r4, #16
   224e8:	f101 06a0 	add.w	r6, r1, #160	; 0xa0
		sub_bytes(state);
   224ec:	4668      	mov	r0, sp
   224ee:	f7f3 fccd 	bl	15e8c <sub_bytes>
		shift_rows(state);
   224f2:	4668      	mov	r0, sp
   224f4:	f7ff ff69 	bl	223ca <shift_rows>
	mult_row_column(t, s);
   224f8:	4669      	mov	r1, sp
   224fa:	a804      	add	r0, sp, #16
   224fc:	f7ff ff9e 	bl	2243c <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   22500:	a901      	add	r1, sp, #4
   22502:	a805      	add	r0, sp, #20
   22504:	f7ff ff9a 	bl	2243c <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   22508:	a902      	add	r1, sp, #8
   2250a:	a806      	add	r0, sp, #24
   2250c:	f7ff ff96 	bl	2243c <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   22510:	a903      	add	r1, sp, #12
   22512:	a807      	add	r0, sp, #28
   22514:	f7ff ff92 	bl	2243c <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   22518:	2310      	movs	r3, #16
   2251a:	4619      	mov	r1, r3
   2251c:	eb0d 0203 	add.w	r2, sp, r3
   22520:	4668      	mov	r0, sp
   22522:	f7ff fef5 	bl	22310 <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   22526:	4621      	mov	r1, r4
   22528:	4668      	mov	r0, sp
	for (i = 0; i < (Nr - 1); ++i) {
   2252a:	3410      	adds	r4, #16
		add_round_key(state, s->words + Nb*(i+1));
   2252c:	f7ff ff08 	bl	22340 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   22530:	42b4      	cmp	r4, r6
   22532:	d1db      	bne.n	224ec <tc_aes_encrypt+0x2e>
	}

	sub_bytes(state);
   22534:	f7f3 fcaa 	bl	15e8c <sub_bytes>
	shift_rows(state);
   22538:	4668      	mov	r0, sp
   2253a:	f7ff ff46 	bl	223ca <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   2253e:	4621      	mov	r1, r4
   22540:	4668      	mov	r0, sp
   22542:	f7ff fefd 	bl	22340 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   22546:	2310      	movs	r3, #16
   22548:	4619      	mov	r1, r3
   2254a:	466a      	mov	r2, sp
   2254c:	4628      	mov	r0, r5
   2254e:	f7ff fedf 	bl	22310 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   22552:	4668      	mov	r0, sp
   22554:	2210      	movs	r2, #16
   22556:	2100      	movs	r1, #0
   22558:	f7ff fee7 	bl	2232a <_set>

	return TC_CRYPTO_SUCCESS;
   2255c:	2001      	movs	r0, #1
}
   2255e:	b008      	add	sp, #32
   22560:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   22562:	4608      	mov	r0, r1
   22564:	e7fb      	b.n	2255e <tc_aes_encrypt+0xa0>
   22566:	4610      	mov	r0, r2
   22568:	e7f9      	b.n	2255e <tc_aes_encrypt+0xa0>

0002256a <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   2256a:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   2256c:	460a      	mov	r2, r1

	out += (TC_AES_BLOCK_SIZE - 1);
   2256e:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   22570:	f912 3b10 	ldrsb.w	r3, [r2], #16
   22574:	2b00      	cmp	r3, #0
   22576:	bfac      	ite	ge
   22578:	2300      	movge	r3, #0
   2257a:	2387      	movlt	r3, #135	; 0x87
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   2257c:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   22580:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   22584:	428a      	cmp	r2, r1
		*out-- = (*x << 1) ^ carry;
   22586:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   2258a:	d002      	beq.n	22592 <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   2258c:	7813      	ldrb	r3, [r2, #0]
   2258e:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   22590:	e7f4      	b.n	2257c <gf_double+0x12>
	}
}
   22592:	bd10      	pop	{r4, pc}

00022594 <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   22594:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   22596:	b120      	cbz	r0, 225a2 <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   22598:	2258      	movs	r2, #88	; 0x58
   2259a:	2100      	movs	r1, #0
   2259c:	f7ff fec5 	bl	2232a <_set>
   225a0:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   225a2:	bd08      	pop	{r3, pc}

000225a4 <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   225a4:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   225a6:	4604      	mov	r4, r0
   225a8:	b188      	cbz	r0, 225ce <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   225aa:	2210      	movs	r2, #16
   225ac:	2100      	movs	r1, #0
   225ae:	f7ff febc 	bl	2232a <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   225b2:	2210      	movs	r2, #16
   225b4:	f104 0030 	add.w	r0, r4, #48	; 0x30
   225b8:	2100      	movs	r1, #0
   225ba:	f7ff feb6 	bl	2232a <_set>
	s->leftover_offset = 0;
   225be:	2300      	movs	r3, #0
   225c0:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   225c2:	2200      	movs	r2, #0
   225c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   225c8:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
   225cc:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   225ce:	bd10      	pop	{r4, pc}

000225d0 <tc_cmac_setup>:
{
   225d0:	b570      	push	{r4, r5, r6, lr}
   225d2:	4604      	mov	r4, r0
   225d4:	460d      	mov	r5, r1
   225d6:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   225d8:	b310      	cbz	r0, 22620 <tc_cmac_setup+0x50>
   225da:	b311      	cbz	r1, 22622 <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   225dc:	2258      	movs	r2, #88	; 0x58
   225de:	2100      	movs	r1, #0
   225e0:	f7ff fea3 	bl	2232a <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   225e4:	4629      	mov	r1, r5
	s->sched = sched;
   225e6:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   225e8:	4630      	mov	r0, r6
   225ea:	f7f3 fc5b 	bl	15ea4 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   225ee:	2210      	movs	r2, #16
   225f0:	2100      	movs	r1, #0
   225f2:	4620      	mov	r0, r4
   225f4:	f7ff fe99 	bl	2232a <_set>
	gf_double (s->K1, s->iv);
   225f8:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   225fc:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   225fe:	4621      	mov	r1, r4
   22600:	4620      	mov	r0, r4
   22602:	f7ff ff5c 	bl	224be <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   22606:	4621      	mov	r1, r4
   22608:	4628      	mov	r0, r5
   2260a:	f7ff ffae 	bl	2256a <gf_double>
	gf_double (s->K2, s->K1);
   2260e:	4629      	mov	r1, r5
   22610:	f104 0020 	add.w	r0, r4, #32
   22614:	f7ff ffa9 	bl	2256a <gf_double>
	tc_cmac_init(s);
   22618:	4620      	mov	r0, r4
   2261a:	f7ff ffc3 	bl	225a4 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   2261e:	2001      	movs	r0, #1
}
   22620:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   22622:	4608      	mov	r0, r1
   22624:	e7fc      	b.n	22620 <tc_cmac_setup+0x50>

00022626 <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   22626:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2262a:	460e      	mov	r6, r1
   2262c:	4615      	mov	r5, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   2262e:	4604      	mov	r4, r0
   22630:	2800      	cmp	r0, #0
   22632:	d060      	beq.n	226f6 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   22634:	b1fa      	cbz	r2, 22676 <tc_cmac_update+0x50>
		return  TC_CRYPTO_SUCCESS;
	}
	if (data == (const uint8_t *) 0) {
   22636:	2900      	cmp	r1, #0
   22638:	d05d      	beq.n	226f6 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}

	if (s->countdown == 0) {
   2263a:	e9d0 3214 	ldrd	r3, r2, [r0, #80]	; 0x50
   2263e:	ea53 0102 	orrs.w	r1, r3, r2
   22642:	d058      	beq.n	226f6 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}

	s->countdown--;
   22644:	3b01      	subs	r3, #1

	if (s->leftover_offset > 0) {
   22646:	f8d0 8044 	ldr.w	r8, [r0, #68]	; 0x44
	s->countdown--;
   2264a:	f142 32ff 	adc.w	r2, r2, #4294967295
   2264e:	e9c0 3214 	strd	r3, r2, [r0, #80]	; 0x50
	if (s->leftover_offset > 0) {
   22652:	f1b8 0f00 	cmp.w	r8, #0
   22656:	d02c      	beq.n	226b2 <tc_cmac_update+0x8c>
		/* last data added to s didn't end on a TC_AES_BLOCK_SIZE byte boundary */
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   22658:	f1c8 0710 	rsb	r7, r8, #16

		if (data_length < remaining_space) {
			/* still not enough data to encrypt this time either */
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   2265c:	f108 0030 	add.w	r0, r8, #48	; 0x30
		if (data_length < remaining_space) {
   22660:	42bd      	cmp	r5, r7
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   22662:	4420      	add	r0, r4
		if (data_length < remaining_space) {
   22664:	d20a      	bcs.n	2267c <tc_cmac_update+0x56>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   22666:	462b      	mov	r3, r5
   22668:	4632      	mov	r2, r6
   2266a:	4629      	mov	r1, r5
   2266c:	f7ff fe50 	bl	22310 <_copy>
			s->leftover_offset += data_length;
   22670:	6c63      	ldr	r3, [r4, #68]	; 0x44
   22672:	442b      	add	r3, r5
   22674:	6463      	str	r3, [r4, #68]	; 0x44
		return  TC_CRYPTO_SUCCESS;
   22676:	2001      	movs	r0, #1
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
}
   22678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		_copy(&s->leftover[s->leftover_offset],
   2267c:	463b      	mov	r3, r7
   2267e:	4632      	mov	r2, r6
   22680:	4639      	mov	r1, r7
   22682:	f7ff fe45 	bl	22310 <_copy>
		data_length -= remaining_space;
   22686:	3d10      	subs	r5, #16
		s->leftover_offset = 0;
   22688:	2300      	movs	r3, #0
   2268a:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   2268c:	4445      	add	r5, r8
		data += remaining_space;
   2268e:	443e      	add	r6, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   22690:	1e63      	subs	r3, r4, #1
   22692:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   22696:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   2269a:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2269e:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   226a0:	ea82 0200 	eor.w	r2, r2, r0
   226a4:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   226a6:	d1f6      	bne.n	22696 <tc_cmac_update+0x70>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   226a8:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   226aa:	4621      	mov	r1, r4
   226ac:	4620      	mov	r0, r4
   226ae:	f7ff ff06 	bl	224be <tc_aes_encrypt>
   226b2:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   226b6:	2d10      	cmp	r5, #16
   226b8:	d80a      	bhi.n	226d0 <tc_cmac_update+0xaa>
	if (data_length > 0) {
   226ba:	2d00      	cmp	r5, #0
   226bc:	d0db      	beq.n	22676 <tc_cmac_update+0x50>
		_copy(s->leftover, data_length, data, data_length);
   226be:	462b      	mov	r3, r5
   226c0:	4632      	mov	r2, r6
   226c2:	4629      	mov	r1, r5
   226c4:	f104 0030 	add.w	r0, r4, #48	; 0x30
   226c8:	f7ff fe22 	bl	22310 <_copy>
		s->leftover_offset = data_length;
   226cc:	6465      	str	r5, [r4, #68]	; 0x44
   226ce:	e7d2      	b.n	22676 <tc_cmac_update+0x50>
   226d0:	1e63      	subs	r3, r4, #1
   226d2:	1e71      	subs	r1, r6, #1
			s->iv[i] ^= data[i];
   226d4:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   226d8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   226dc:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   226de:	ea82 0200 	eor.w	r2, r2, r0
   226e2:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   226e4:	d1f6      	bne.n	226d4 <tc_cmac_update+0xae>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   226e6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   226e8:	4621      	mov	r1, r4
   226ea:	4620      	mov	r0, r4
   226ec:	f7ff fee7 	bl	224be <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   226f0:	3610      	adds	r6, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   226f2:	3d10      	subs	r5, #16
   226f4:	e7df      	b.n	226b6 <tc_cmac_update+0x90>
		return TC_CRYPTO_FAIL;
   226f6:	2000      	movs	r0, #0
   226f8:	e7be      	b.n	22678 <tc_cmac_update+0x52>

000226fa <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   226fa:	b570      	push	{r4, r5, r6, lr}
   226fc:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   226fe:	4605      	mov	r5, r0
   22700:	b1e8      	cbz	r0, 2273e <tc_cmac_final+0x44>
   22702:	b369      	cbz	r1, 22760 <tc_cmac_final+0x66>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   22704:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   22706:	2a10      	cmp	r2, #16
   22708:	d11a      	bne.n	22740 <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   2270a:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2270c:	1e63      	subs	r3, r4, #1
   2270e:	3901      	subs	r1, #1
   22710:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   22714:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   22718:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
   2271c:	4072      	eors	r2, r6
   2271e:	f811 6f01 	ldrb.w	r6, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   22722:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   22724:	ea82 0206 	eor.w	r2, r2, r6
   22728:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2272a:	d1f3      	bne.n	22714 <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   2272c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2272e:	4621      	mov	r1, r4
   22730:	4628      	mov	r0, r5
   22732:	f7ff fec4 	bl	224be <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   22736:	4620      	mov	r0, r4
   22738:	f7ff ff2c 	bl	22594 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   2273c:	2001      	movs	r0, #1
}
   2273e:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   22740:	f102 0030 	add.w	r0, r2, #48	; 0x30
   22744:	2100      	movs	r1, #0
   22746:	f1c2 0210 	rsb	r2, r2, #16
   2274a:	4420      	add	r0, r4
   2274c:	f7ff fded 	bl	2232a <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   22750:	6c63      	ldr	r3, [r4, #68]	; 0x44
   22752:	4423      	add	r3, r4
   22754:	2280      	movs	r2, #128	; 0x80
   22756:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   2275a:	f104 0120 	add.w	r1, r4, #32
   2275e:	e7d5      	b.n	2270c <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   22760:	4608      	mov	r0, r1
   22762:	e7ec      	b.n	2273e <tc_cmac_final+0x44>

00022764 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
   22764:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   22766:	6800      	ldr	r0, [r0, #0]
   22768:	f7f3 bc0e 	b.w	15f88 <z_arm_fatal_error>

0002276c <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   2276c:	2100      	movs	r1, #0
   2276e:	2001      	movs	r0, #1
   22770:	f7f3 bc0a 	b.w	15f88 <z_arm_fatal_error>

00022774 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   22774:	b508      	push	{r3, lr}
	handler();
   22776:	f7f3 fd0f 	bl	16198 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   2277a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   2277e:	f7f3 be77 	b.w	16470 <z_arm_exc_exit>

00022782 <z_log_msg_static_create.constprop.0>:
	z_impl_z_log_msg_static_create(source, desc, package, data);
   22782:	2300      	movs	r3, #0
   22784:	f7f2 bf3c 	b.w	15600 <z_impl_z_log_msg_static_create>

00022788 <malloc_prepare>:
}
   22788:	2000      	movs	r0, #0
   2278a:	4770      	bx	lr

0002278c <_stdout_hook_default>:
}
   2278c:	f04f 30ff 	mov.w	r0, #4294967295
   22790:	4770      	bx	lr

00022792 <__errno>:
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   22792:	f7fc bd53 	b.w	1f23c <z_impl_z_errno>

00022796 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
   22796:	2806      	cmp	r0, #6
   22798:	d108      	bne.n	227ac <pm_state_set+0x16>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   2279a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2279e:	2201      	movs	r2, #1
   227a0:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   227a4:	f3bf 8f4f 	dsb	sy
        __WFE();
   227a8:	bf20      	wfe
    while (true)
   227aa:	e7fd      	b.n	227a8 <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
   227ac:	4770      	bx	lr

000227ae <pm_state_exit_post_ops>:
   227ae:	2300      	movs	r3, #0
   227b0:	f383 8811 	msr	BASEPRI, r3
   227b4:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   227b8:	4770      	bx	lr

000227ba <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   227ba:	b510      	push	{r4, lr}
   227bc:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   227be:	7801      	ldrb	r1, [r0, #0]
   227c0:	7822      	ldrb	r2, [r4, #0]
   227c2:	428a      	cmp	r2, r1
{
   227c4:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   227c6:	d00f      	beq.n	227e8 <bt_uuid_cmp+0x2e>
	uuid_to_uuid128(u1, &uuid1);
   227c8:	4669      	mov	r1, sp
   227ca:	f7f4 fb89 	bl	16ee0 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   227ce:	a905      	add	r1, sp, #20
   227d0:	4620      	mov	r0, r4
   227d2:	f7f4 fb85 	bl	16ee0 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   227d6:	2210      	movs	r2, #16
   227d8:	f10d 0115 	add.w	r1, sp, #21
   227dc:	f10d 0001 	add.w	r0, sp, #1
   227e0:	f002 fce1 	bl	251a6 <memcmp>
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
}
   227e4:	b00a      	add	sp, #40	; 0x28
   227e6:	bd10      	pop	{r4, pc}
	switch (u1->type) {
   227e8:	2a01      	cmp	r2, #1
   227ea:	d006      	beq.n	227fa <bt_uuid_cmp+0x40>
   227ec:	2a02      	cmp	r2, #2
   227ee:	d007      	beq.n	22800 <bt_uuid_cmp+0x46>
   227f0:	b972      	cbnz	r2, 22810 <bt_uuid_cmp+0x56>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   227f2:	8840      	ldrh	r0, [r0, #2]
   227f4:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   227f6:	1ac0      	subs	r0, r0, r3
   227f8:	e7f4      	b.n	227e4 <bt_uuid_cmp+0x2a>
   227fa:	6840      	ldr	r0, [r0, #4]
   227fc:	6863      	ldr	r3, [r4, #4]
   227fe:	e7fa      	b.n	227f6 <bt_uuid_cmp+0x3c>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   22800:	2210      	movs	r2, #16
   22802:	1c61      	adds	r1, r4, #1
   22804:	3001      	adds	r0, #1
}
   22806:	b00a      	add	sp, #40	; 0x28
   22808:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   2280c:	f002 bccb 	b.w	251a6 <memcmp>
	switch (u1->type) {
   22810:	f06f 0015 	mvn.w	r0, #21
   22814:	e7e6      	b.n	227e4 <bt_uuid_cmp+0x2a>

00022816 <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   22816:	2a04      	cmp	r2, #4
   22818:	d00a      	beq.n	22830 <bt_uuid_create+0x1a>
   2281a:	2a10      	cmp	r2, #16
   2281c:	d00d      	beq.n	2283a <bt_uuid_create+0x24>
   2281e:	2a02      	cmp	r2, #2
   22820:	f04f 0300 	mov.w	r3, #0
   22824:	d115      	bne.n	22852 <bt_uuid_create+0x3c>
	case BT_UUID_SIZE_16:
		uuid->type = BT_UUID_TYPE_16;
   22826:	7003      	strb	r3, [r0, #0]
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   22828:	880b      	ldrh	r3, [r1, #0]
   2282a:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   2282c:	2001      	movs	r0, #1
   2282e:	4770      	bx	lr
		uuid->type = BT_UUID_TYPE_32;
   22830:	2301      	movs	r3, #1
   22832:	7003      	strb	r3, [r0, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   22834:	680b      	ldr	r3, [r1, #0]
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   22836:	6043      	str	r3, [r0, #4]
		break;
   22838:	e7f8      	b.n	2282c <bt_uuid_create+0x16>
		uuid->type = BT_UUID_TYPE_128;
   2283a:	2302      	movs	r3, #2
   2283c:	f800 3b01 	strb.w	r3, [r0], #1
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   22840:	f101 0310 	add.w	r3, r1, #16
   22844:	f851 2b04 	ldr.w	r2, [r1], #4
   22848:	f840 2b04 	str.w	r2, [r0], #4
   2284c:	4299      	cmp	r1, r3
   2284e:	d1f9      	bne.n	22844 <bt_uuid_create+0x2e>
   22850:	e7ec      	b.n	2282c <bt_uuid_create+0x16>
	switch (data_len) {
   22852:	4618      	mov	r0, r3
}
   22854:	4770      	bx	lr

00022856 <bt_addr_le_create_static>:
	addr->type = BT_ADDR_LE_RANDOM;
   22856:	2301      	movs	r3, #1
{
   22858:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   2285a:	2106      	movs	r1, #6
{
   2285c:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   2285e:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   22862:	f7fb fac9 	bl	1ddf8 <bt_rand>
	if (err) {
   22866:	b918      	cbnz	r0, 22870 <bt_addr_le_create_static+0x1a>
	BT_ADDR_SET_STATIC(&addr->a);
   22868:	79a3      	ldrb	r3, [r4, #6]
   2286a:	f063 033f 	orn	r3, r3, #63	; 0x3f
   2286e:	71a3      	strb	r3, [r4, #6]
}
   22870:	bd10      	pop	{r4, pc}

00022872 <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   22872:	280f      	cmp	r0, #15
   22874:	d807      	bhi.n	22886 <bt_hci_evt_get_flags+0x14>
   22876:	280d      	cmp	r0, #13
   22878:	d80b      	bhi.n	22892 <bt_hci_evt_get_flags+0x20>
#endif /* CONFIG_BT_CONN ||  CONFIG_BT_ISO */
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
   2287a:	2805      	cmp	r0, #5
   2287c:	bf08      	it	eq
   2287e:	2003      	moveq	r0, #3
   22880:	bf18      	it	ne
   22882:	2002      	movne	r0, #2
   22884:	4770      	bx	lr
	switch (evt) {
   22886:	2813      	cmp	r0, #19
   22888:	d003      	beq.n	22892 <bt_hci_evt_get_flags+0x20>
		return BT_HCI_EVT_FLAG_RECV;
   2288a:	281a      	cmp	r0, #26
   2288c:	bf08      	it	eq
   2288e:	2001      	moveq	r0, #1
   22890:	e7f6      	b.n	22880 <bt_hci_evt_get_flags+0xe>
	switch (evt) {
   22892:	2001      	movs	r0, #1
	}
}
   22894:	4770      	bx	lr

00022896 <hci_vendor_event>:
}
   22896:	4770      	bx	lr

00022898 <atomic_or>:
{
   22898:	b510      	push	{r4, lr}
   2289a:	4603      	mov	r3, r0
}
   2289c:	f3bf 8f5b 	dmb	ish
   228a0:	e853 0f00 	ldrex	r0, [r3]
   228a4:	ea40 0201 	orr.w	r2, r0, r1
   228a8:	e843 2400 	strex	r4, r2, [r3]
   228ac:	2c00      	cmp	r4, #0
   228ae:	d1f7      	bne.n	228a0 <atomic_or+0x8>
   228b0:	f3bf 8f5b 	dmb	ish
   228b4:	bd10      	pop	{r4, pc}

000228b6 <bt_addr_copy>:
   228b6:	680b      	ldr	r3, [r1, #0]
   228b8:	6003      	str	r3, [r0, #0]
   228ba:	888b      	ldrh	r3, [r1, #4]
   228bc:	8083      	strh	r3, [r0, #4]
}
   228be:	4770      	bx	lr

000228c0 <bt_addr_le_copy>:
   228c0:	680b      	ldr	r3, [r1, #0]
   228c2:	6003      	str	r3, [r0, #0]
   228c4:	888b      	ldrh	r3, [r1, #4]
   228c6:	8083      	strh	r3, [r0, #4]
   228c8:	798b      	ldrb	r3, [r1, #6]
   228ca:	7183      	strb	r3, [r0, #6]
}
   228cc:	4770      	bx	lr

000228ce <z_log_msg_static_create.constprop.0>:
   228ce:	2300      	movs	r3, #0
   228d0:	f7f2 be96 	b.w	15600 <z_impl_z_log_msg_static_create>

000228d4 <atomic_and.isra.0>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   228d4:	f3bf 8f5b 	dmb	ish
   228d8:	e850 3f00 	ldrex	r3, [r0]
   228dc:	400b      	ands	r3, r1
   228de:	e840 3200 	strex	r2, r3, [r0]
   228e2:	2a00      	cmp	r2, #0
   228e4:	d1f8      	bne.n	228d8 <atomic_and.isra.0+0x4>
   228e6:	f3bf 8f5b 	dmb	ish
}
   228ea:	4770      	bx	lr

000228ec <bt_hci_disconnect>:
{
   228ec:	b570      	push	{r4, r5, r6, lr}
   228ee:	4606      	mov	r6, r0
   228f0:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   228f2:	f240 4006 	movw	r0, #1030	; 0x406
   228f6:	2103      	movs	r1, #3
   228f8:	f7f5 f84a 	bl	17990 <bt_hci_cmd_create>
	if (!buf) {
   228fc:	4604      	mov	r4, r0
   228fe:	b168      	cbz	r0, 2291c <bt_hci_disconnect+0x30>
   22900:	2103      	movs	r1, #3
   22902:	300c      	adds	r0, #12
   22904:	f001 fafa 	bl	23efc <net_buf_simple_add>
	disconn->handle = sys_cpu_to_le16(handle);
   22908:	8006      	strh	r6, [r0, #0]
	disconn->reason = reason;
   2290a:	7085      	strb	r5, [r0, #2]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   2290c:	4621      	mov	r1, r4
   2290e:	2200      	movs	r2, #0
}
   22910:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   22914:	f240 4006 	movw	r0, #1030	; 0x406
   22918:	f7f5 b874 	b.w	17a04 <bt_hci_cmd_send_sync>
}
   2291c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   22920:	bd70      	pop	{r4, r5, r6, pc}

00022922 <bt_le_set_data_len>:
{
   22922:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22924:	4607      	mov	r7, r0
   22926:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   22928:	f242 0022 	movw	r0, #8226	; 0x2022
   2292c:	2106      	movs	r1, #6
{
   2292e:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   22930:	f7f5 f82e 	bl	17990 <bt_hci_cmd_create>
	if (!buf) {
   22934:	4604      	mov	r4, r0
   22936:	b178      	cbz	r0, 22958 <bt_le_set_data_len+0x36>
   22938:	2106      	movs	r1, #6
   2293a:	300c      	adds	r0, #12
   2293c:	f001 fade 	bl	23efc <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   22940:	883b      	ldrh	r3, [r7, #0]
   22942:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   22944:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   22946:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   22948:	4621      	mov	r1, r4
   2294a:	2200      	movs	r2, #0
}
   2294c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   22950:	f242 0022 	movw	r0, #8226	; 0x2022
   22954:	f7f5 b856 	b.w	17a04 <bt_hci_cmd_send_sync>
}
   22958:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2295c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002295e <bt_le_set_phy>:
{
   2295e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   22962:	4681      	mov	r9, r0
   22964:	4688      	mov	r8, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   22966:	f242 0032 	movw	r0, #8242	; 0x2032
   2296a:	2107      	movs	r1, #7
{
   2296c:	f89d a020 	ldrb.w	sl, [sp, #32]
   22970:	4617      	mov	r7, r2
   22972:	461e      	mov	r6, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   22974:	f7f5 f80c 	bl	17990 <bt_hci_cmd_create>
	if (!buf) {
   22978:	4605      	mov	r5, r0
   2297a:	b1a0      	cbz	r0, 229a6 <bt_le_set_phy+0x48>
   2297c:	2107      	movs	r1, #7
   2297e:	300c      	adds	r0, #12
   22980:	f001 fabc 	bl	23efc <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   22984:	f8b9 3000 	ldrh.w	r3, [r9]
   22988:	8003      	strh	r3, [r0, #0]
	cp->all_phys = all_phys;
   2298a:	f880 8002 	strb.w	r8, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   2298e:	70c7      	strb	r7, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   22990:	7106      	strb	r6, [r0, #4]
	cp->phy_opts = phy_opts;
   22992:	f8a0 a005 	strh.w	sl, [r0, #5]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   22996:	4629      	mov	r1, r5
   22998:	2200      	movs	r2, #0
}
   2299a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   2299e:	f242 0032 	movw	r0, #8242	; 0x2032
   229a2:	f7f5 b82f 	b.w	17a04 <bt_hci_cmd_send_sync>
}
   229a6:	f06f 0068 	mvn.w	r0, #104	; 0x68
   229aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000229ae <le_enh_conn_complete>:
	bt_hci_le_enh_conn_complete(evt);
   229ae:	68c0      	ldr	r0, [r0, #12]
   229b0:	f7f5 b8f8 	b.w	17ba4 <bt_hci_le_enh_conn_complete>

000229b4 <bt_le_conn_params_valid>:
{
   229b4:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   229b6:	8803      	ldrh	r3, [r0, #0]
   229b8:	8842      	ldrh	r2, [r0, #2]
   229ba:	4293      	cmp	r3, r2
   229bc:	d819      	bhi.n	229f2 <bt_le_conn_params_valid+0x3e>
   229be:	2b05      	cmp	r3, #5
   229c0:	d917      	bls.n	229f2 <bt_le_conn_params_valid+0x3e>
	    param->interval_min < 6 || param->interval_max > 3200) {
   229c2:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
   229c6:	d814      	bhi.n	229f2 <bt_le_conn_params_valid+0x3e>
	if (param->latency > 499) {
   229c8:	8883      	ldrh	r3, [r0, #4]
   229ca:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   229ce:	d210      	bcs.n	229f2 <bt_le_conn_params_valid+0x3e>
	if (param->timeout < 10 || param->timeout > 3200 ||
   229d0:	88c0      	ldrh	r0, [r0, #6]
   229d2:	f1a0 010a 	sub.w	r1, r0, #10
   229d6:	b289      	uxth	r1, r1
   229d8:	f640 4476 	movw	r4, #3190	; 0xc76
   229dc:	42a1      	cmp	r1, r4
   229de:	d808      	bhi.n	229f2 <bt_le_conn_params_valid+0x3e>
	     ((1U + param->latency) * param->interval_max))) {
   229e0:	3301      	adds	r3, #1
   229e2:	b29b      	uxth	r3, r3
   229e4:	4353      	muls	r3, r2
	if (param->timeout < 10 || param->timeout > 3200 ||
   229e6:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   229ea:	bf34      	ite	cc
   229ec:	2001      	movcc	r0, #1
   229ee:	2000      	movcs	r0, #0
}
   229f0:	bd10      	pop	{r4, pc}
		return false;
   229f2:	2000      	movs	r0, #0
   229f4:	e7fc      	b.n	229f0 <bt_le_conn_params_valid+0x3c>

000229f6 <le_conn_param_neg_reply>:
{
   229f6:	b570      	push	{r4, r5, r6, lr}
   229f8:	4606      	mov	r6, r0
   229fa:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   229fc:	f242 0021 	movw	r0, #8225	; 0x2021
   22a00:	2103      	movs	r1, #3
   22a02:	f7f4 ffc5 	bl	17990 <bt_hci_cmd_create>
	if (!buf) {
   22a06:	4604      	mov	r4, r0
   22a08:	b918      	cbnz	r0, 22a12 <le_conn_param_neg_reply+0x1c>
}
   22a0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   22a0e:	f7f4 bbcd 	b.w	171ac <le_conn_param_neg_reply.part.0>
   22a12:	2103      	movs	r1, #3
   22a14:	300c      	adds	r0, #12
   22a16:	f001 fa71 	bl	23efc <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(handle);
   22a1a:	8006      	strh	r6, [r0, #0]
	cp->reason = sys_cpu_to_le16(reason);
   22a1c:	7085      	strb	r5, [r0, #2]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   22a1e:	4621      	mov	r1, r4
   22a20:	f242 0021 	movw	r0, #8225	; 0x2021
}
   22a24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   22a28:	f7f5 ba6a 	b.w	17f00 <bt_hci_cmd_send>

00022a2c <bt_get_appearance>:
#if defined(CONFIG_BT_DEVICE_APPEARANCE_DYNAMIC)
	return bt_dev.appearance;
#else
	return CONFIG_BT_DEVICE_APPEARANCE;
#endif
}
   22a2c:	f240 5052 	movw	r0, #1362	; 0x552
   22a30:	4770      	bx	lr

00022a32 <bt_addr_le_is_bonded>:
		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
	} else {
		return false;
	}
}
   22a32:	2000      	movs	r0, #0
   22a34:	4770      	bx	lr

00022a36 <bt_addr_le_eq>:
{
   22a36:	b508      	push	{r3, lr}
	return memcmp(a, b, sizeof(*a));
   22a38:	2207      	movs	r2, #7
   22a3a:	f002 fbb4 	bl	251a6 <memcmp>
}
   22a3e:	fab0 f080 	clz	r0, r0
   22a42:	0940      	lsrs	r0, r0, #5
   22a44:	bd08      	pop	{r3, pc}

00022a46 <bt_addr_copy>:
   22a46:	680b      	ldr	r3, [r1, #0]
   22a48:	6003      	str	r3, [r0, #0]
   22a4a:	888b      	ldrh	r3, [r1, #4]
   22a4c:	8083      	strh	r3, [r0, #4]
}
   22a4e:	4770      	bx	lr

00022a50 <bt_addr_le_copy>:
   22a50:	680b      	ldr	r3, [r1, #0]
   22a52:	6003      	str	r3, [r0, #0]
   22a54:	888b      	ldrh	r3, [r1, #4]
   22a56:	8083      	strh	r3, [r0, #4]
   22a58:	798b      	ldrb	r3, [r1, #6]
   22a5a:	7183      	strb	r3, [r0, #6]
}
   22a5c:	4770      	bx	lr

00022a5e <z_log_msg_static_create.constprop.0>:
   22a5e:	2300      	movs	r3, #0
   22a60:	f7f2 bdce 	b.w	15600 <z_impl_z_log_msg_static_create>

00022a64 <bt_lookup_id_addr>:
	return addr;
   22a64:	2800      	cmp	r0, #0
}
   22a66:	bf0c      	ite	eq
   22a68:	4608      	moveq	r0, r1
   22a6a:	2000      	movne	r0, #0
   22a6c:	4770      	bx	lr

00022a6e <bt_id_set_adv_random_addr>:
	CHECKIF(adv == NULL || addr == NULL) {
   22a6e:	b118      	cbz	r0, 22a78 <bt_id_set_adv_random_addr+0xa>
   22a70:	b111      	cbz	r1, 22a78 <bt_id_set_adv_random_addr+0xa>
		return set_random_address(addr);
   22a72:	4608      	mov	r0, r1
   22a74:	f7f5 bf6e 	b.w	18954 <set_random_address>
}
   22a78:	f06f 0015 	mvn.w	r0, #21
   22a7c:	4770      	bx	lr

00022a7e <bt_id_set_adv_private_addr>:
{
   22a7e:	b513      	push	{r0, r1, r4, lr}
	CHECKIF(adv == NULL) {
   22a80:	4604      	mov	r4, r0
   22a82:	b180      	cbz	r0, 22aa6 <bt_id_set_adv_private_addr+0x28>
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   22a84:	2106      	movs	r1, #6
   22a86:	4668      	mov	r0, sp
   22a88:	f7fb f9b6 	bl	1ddf8 <bt_rand>
	if (err) {
   22a8c:	b948      	cbnz	r0, 22aa2 <bt_id_set_adv_private_addr+0x24>
	BT_ADDR_SET_NRPA(&nrpa);
   22a8e:	f89d 3005 	ldrb.w	r3, [sp, #5]
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   22a92:	4669      	mov	r1, sp
	BT_ADDR_SET_NRPA(&nrpa);
   22a94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   22a98:	4620      	mov	r0, r4
	BT_ADDR_SET_NRPA(&nrpa);
   22a9a:	f88d 3005 	strb.w	r3, [sp, #5]
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   22a9e:	f7ff ffe6 	bl	22a6e <bt_id_set_adv_random_addr>
}
   22aa2:	b002      	add	sp, #8
   22aa4:	bd10      	pop	{r4, pc}
		return -EINVAL;
   22aa6:	f06f 0015 	mvn.w	r0, #21
   22aaa:	e7fa      	b.n	22aa2 <bt_id_set_adv_private_addr+0x24>

00022aac <bt_id_adv_random_addr_check>:
}
   22aac:	3800      	subs	r0, #0
   22aae:	bf18      	it	ne
   22ab0:	2001      	movne	r0, #1
   22ab2:	4770      	bx	lr

00022ab4 <get_adv_channel_map>:
{
   22ab4:	4603      	mov	r3, r0
		channel_map &= ~0x01;
   22ab6:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   22aba:	bf0c      	ite	eq
   22abc:	2007      	moveq	r0, #7
   22abe:	2006      	movne	r0, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   22ac0:	03da      	lsls	r2, r3, #15
		channel_map &= ~0x02;
   22ac2:	bf48      	it	mi
   22ac4:	f000 0005 	andmi.w	r0, r0, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   22ac8:	039b      	lsls	r3, r3, #14
		channel_map &= ~0x04;
   22aca:	bf48      	it	mi
   22acc:	f000 00fb 	andmi.w	r0, r0, #251	; 0xfb
}
   22ad0:	4770      	bx	lr

00022ad2 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   22ad2:	f3bf 8f5b 	dmb	ish
   22ad6:	6800      	ldr	r0, [r0, #0]
   22ad8:	f3bf 8f5b 	dmb	ish
}
   22adc:	4770      	bx	lr

00022ade <atomic_and>:
{
   22ade:	b510      	push	{r4, lr}
   22ae0:	4603      	mov	r3, r0
}
   22ae2:	f3bf 8f5b 	dmb	ish
   22ae6:	e853 0f00 	ldrex	r0, [r3]
   22aea:	ea00 0201 	and.w	r2, r0, r1
   22aee:	e843 2400 	strex	r4, r2, [r3]
   22af2:	2c00      	cmp	r4, #0
   22af4:	d1f7      	bne.n	22ae6 <atomic_and+0x8>
   22af6:	f3bf 8f5b 	dmb	ish
   22afa:	bd10      	pop	{r4, pc}

00022afc <bt_addr_le_copy>:
   22afc:	680b      	ldr	r3, [r1, #0]
   22afe:	6003      	str	r3, [r0, #0]
   22b00:	888b      	ldrh	r3, [r1, #4]
   22b02:	8083      	strh	r3, [r0, #4]
   22b04:	798b      	ldrb	r3, [r1, #6]
   22b06:	7183      	strb	r3, [r0, #6]
   22b08:	4770      	bx	lr

00022b0a <atomic_set_bit_to>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   22b0a:	2301      	movs	r3, #1
{
   22b0c:	b410      	push	{r4}
	atomic_val_t mask = ATOMIC_MASK(bit);
   22b0e:	fa03 f101 	lsl.w	r1, r3, r1
{
   22b12:	4604      	mov	r4, r0
	if (val) {
   22b14:	b16a      	cbz	r2, 22b32 <atomic_set_bit_to+0x28>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   22b16:	f3bf 8f5b 	dmb	ish
   22b1a:	e854 3f00 	ldrex	r3, [r4]
   22b1e:	430b      	orrs	r3, r1
   22b20:	e844 3200 	strex	r2, r3, [r4]
   22b24:	2a00      	cmp	r2, #0
   22b26:	d1f8      	bne.n	22b1a <atomic_set_bit_to+0x10>
   22b28:	f3bf 8f5b 	dmb	ish
	}
}
   22b2c:	f85d 4b04 	ldr.w	r4, [sp], #4
   22b30:	4770      	bx	lr
   22b32:	f85d 4b04 	ldr.w	r4, [sp], #4
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   22b36:	43c9      	mvns	r1, r1
   22b38:	f7ff bfd1 	b.w	22ade <atomic_and>

00022b3c <le_adv_update.constprop.0>:
static int le_adv_update(struct bt_le_ext_adv *adv,
   22b3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22b40:	b087      	sub	sp, #28
   22b42:	4605      	mov	r5, r0
   22b44:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
   22b48:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
   22b4c:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
   22b50:	460c      	mov	r4, r1
   22b52:	4690      	mov	r8, r2
	struct bt_ad d[2] = {};
   22b54:	2100      	movs	r1, #0
   22b56:	2210      	movs	r2, #16
   22b58:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
   22b5a:	461f      	mov	r7, r3
	struct bt_ad d[2] = {};
   22b5c:	f002 fb41 	bl	251e2 <memset>
	if (name_type != ADV_NAME_TYPE_NONE) {
   22b60:	b9ee      	cbnz	r6, 22b9e <le_adv_update.constprop.0+0x62>
		d[0].len = ad_len;
   22b62:	e9cd 4802 	strd	r4, r8, [sp, #8]
		d_len = 1;
   22b66:	2201      	movs	r2, #1
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   22b68:	a902      	add	r1, sp, #8
   22b6a:	f242 0008 	movw	r0, #8200	; 0x2008
   22b6e:	f7f6 f8cf 	bl	18d10 <hci_set_ad>
		if (err) {
   22b72:	4604      	mov	r4, r0
   22b74:	b978      	cbnz	r0, 22b96 <le_adv_update.constprop.0+0x5a>
	if (scannable) {
   22b76:	f1ba 0f00 	cmp.w	sl, #0
   22b7a:	d13e      	bne.n	22bfa <le_adv_update.constprop.0+0xbe>
   22b7c:	3510      	adds	r5, #16
   22b7e:	f3bf 8f5b 	dmb	ish
   22b82:	e855 3f00 	ldrex	r3, [r5]
   22b86:	f043 0304 	orr.w	r3, r3, #4
   22b8a:	e845 3200 	strex	r2, r3, [r5]
   22b8e:	2a00      	cmp	r2, #0
   22b90:	d1f7      	bne.n	22b82 <le_adv_update.constprop.0+0x46>
   22b92:	f3bf 8f5b 	dmb	ish
}
   22b96:	4620      	mov	r0, r4
   22b98:	b007      	add	sp, #28
   22b9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const char *name = bt_get_name();
   22b9e:	f7f5 fe8f 	bl	188c0 <bt_get_name>
   22ba2:	4683      	mov	fp, r0
		if ((ad && ad_has_name(ad, ad_len)) ||
   22ba4:	b9e4      	cbnz	r4, 22be0 <le_adv_update.constprop.0+0xa4>
   22ba6:	bb37      	cbnz	r7, 22bf6 <le_adv_update.constprop.0+0xba>
		data = (struct bt_data)BT_DATA(
   22ba8:	4658      	mov	r0, fp
   22baa:	f7e9 ffe1 	bl	cb70 <strlen>
   22bae:	2309      	movs	r3, #9
		if (name_type == ADV_NAME_TYPE_AD) {
   22bb0:	2e01      	cmp	r6, #1
		d[0].data = ad;
   22bb2:	e9cd b401 	strd	fp, r4, [sp, #4]
		data = (struct bt_data)BT_DATA(
   22bb6:	f88d 3000 	strb.w	r3, [sp]
   22bba:	f88d 0001 	strb.w	r0, [sp, #1]
		d[0].len = ad_len;
   22bbe:	f8cd 800c 	str.w	r8, [sp, #12]
		if (name_type == ADV_NAME_TYPE_AD) {
   22bc2:	d1d0      	bne.n	22b66 <le_adv_update.constprop.0+0x2a>
			d[1].data = &data;
   22bc4:	f8cd d010 	str.w	sp, [sp, #16]
			d[1].len = 1;
   22bc8:	9605      	str	r6, [sp, #20]
			d_len = 2;
   22bca:	2202      	movs	r2, #2
   22bcc:	e7cc      	b.n	22b68 <le_adv_update.constprop.0+0x2c>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   22bce:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
   22bd2:	3a08      	subs	r2, #8
   22bd4:	2a01      	cmp	r2, #1
   22bd6:	d925      	bls.n	22c24 <le_adv_update.constprop.0+0xe8>
	for (i = 0; i < ad_len; i++) {
   22bd8:	3301      	adds	r3, #1
   22bda:	4598      	cmp	r8, r3
   22bdc:	d1f7      	bne.n	22bce <le_adv_update.constprop.0+0x92>
   22bde:	e7e2      	b.n	22ba6 <le_adv_update.constprop.0+0x6a>
   22be0:	2300      	movs	r3, #0
   22be2:	e7fa      	b.n	22bda <le_adv_update.constprop.0+0x9e>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   22be4:	f817 2033 	ldrb.w	r2, [r7, r3, lsl #3]
   22be8:	3a08      	subs	r2, #8
   22bea:	2a01      	cmp	r2, #1
   22bec:	d91a      	bls.n	22c24 <le_adv_update.constprop.0+0xe8>
	for (i = 0; i < ad_len; i++) {
   22bee:	3301      	adds	r3, #1
   22bf0:	4599      	cmp	r9, r3
   22bf2:	d1f7      	bne.n	22be4 <le_adv_update.constprop.0+0xa8>
   22bf4:	e7d8      	b.n	22ba8 <le_adv_update.constprop.0+0x6c>
   22bf6:	2300      	movs	r3, #0
   22bf8:	e7fa      	b.n	22bf0 <le_adv_update.constprop.0+0xb4>
		if (name_type == ADV_NAME_TYPE_SD) {
   22bfa:	2e02      	cmp	r6, #2
   22bfc:	f04f 0201 	mov.w	r2, #1
			d[1].len = 1;
   22c00:	bf08      	it	eq
   22c02:	9205      	streq	r2, [sp, #20]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   22c04:	a902      	add	r1, sp, #8
			d_len = 2;
   22c06:	bf08      	it	eq
   22c08:	4632      	moveq	r2, r6
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   22c0a:	f242 0009 	movw	r0, #8201	; 0x2009
			d[1].data = &data;
   22c0e:	bf08      	it	eq
   22c10:	f8cd d010 	streq.w	sp, [sp, #16]
		d[0].len = sd_len;
   22c14:	e9cd 7902 	strd	r7, r9, [sp, #8]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   22c18:	f7f6 f87a 	bl	18d10 <hci_set_ad>
		if (err) {
   22c1c:	2800      	cmp	r0, #0
   22c1e:	d0ad      	beq.n	22b7c <le_adv_update.constprop.0+0x40>
   22c20:	4604      	mov	r4, r0
   22c22:	e7b8      	b.n	22b96 <le_adv_update.constprop.0+0x5a>
			return -EINVAL;
   22c24:	f06f 0415 	mvn.w	r4, #21
   22c28:	e7b5      	b.n	22b96 <le_adv_update.constprop.0+0x5a>

00022c2a <get_adv_name_type_param>:
	if (param->options & BT_LE_ADV_OPT_USE_NAME) {
   22c2a:	6843      	ldr	r3, [r0, #4]
   22c2c:	f013 0008 	ands.w	r0, r3, #8
   22c30:	d00a      	beq.n	22c48 <get_adv_name_type_param+0x1e>
		if (param->options & BT_LE_ADV_OPT_FORCE_NAME_IN_AD) {
   22c32:	035a      	lsls	r2, r3, #13
   22c34:	d407      	bmi.n	22c46 <get_adv_name_type_param+0x1c>
		if ((param->options & BT_LE_ADV_OPT_EXT_ADV) &&
   22c36:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
			return ADV_NAME_TYPE_AD;
   22c3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   22c3e:	bf14      	ite	ne
   22c40:	2002      	movne	r0, #2
   22c42:	2001      	moveq	r0, #1
   22c44:	4770      	bx	lr
   22c46:	2001      	movs	r0, #1
}
   22c48:	4770      	bx	lr

00022c4a <bt_le_adv_set_enable_legacy>:
{
   22c4a:	b570      	push	{r4, r5, r6, lr}
   22c4c:	4606      	mov	r6, r0
   22c4e:	b086      	sub	sp, #24
   22c50:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   22c52:	f242 000a 	movw	r0, #8202	; 0x200a
   22c56:	2101      	movs	r1, #1
   22c58:	f7f4 fe9a 	bl	17990 <bt_hci_cmd_create>
	if (!buf) {
   22c5c:	4604      	mov	r4, r0
   22c5e:	b1b0      	cbz	r0, 22c8e <bt_le_adv_set_enable_legacy+0x44>
	return net_buf_simple_add_u8(&buf->b, val);
   22c60:	300c      	adds	r0, #12
	if (enable) {
   22c62:	b195      	cbz	r5, 22c8a <bt_le_adv_set_enable_legacy+0x40>
   22c64:	2101      	movs	r1, #1
   22c66:	f001 f958 	bl	23f1a <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(buf, &state, adv->flags, BT_ADV_ENABLED, enable);
   22c6a:	f106 0210 	add.w	r2, r6, #16
   22c6e:	a903      	add	r1, sp, #12
   22c70:	4620      	mov	r0, r4
   22c72:	9500      	str	r5, [sp, #0]
   22c74:	2307      	movs	r3, #7
   22c76:	f7f4 fe79 	bl	1796c <bt_hci_cmd_state_set_init>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
   22c7a:	2200      	movs	r2, #0
   22c7c:	4621      	mov	r1, r4
   22c7e:	f242 000a 	movw	r0, #8202	; 0x200a
   22c82:	f7f4 febf 	bl	17a04 <bt_hci_cmd_send_sync>
}
   22c86:	b006      	add	sp, #24
   22c88:	bd70      	pop	{r4, r5, r6, pc}
   22c8a:	4629      	mov	r1, r5
   22c8c:	e7eb      	b.n	22c66 <bt_le_adv_set_enable_legacy+0x1c>
		return -ENOBUFS;
   22c8e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   22c92:	e7f8      	b.n	22c86 <bt_le_adv_set_enable_legacy+0x3c>

00022c94 <bt_le_lim_adv_cancel_timeout>:
	return k_work_cancel_delayable(&adv->lim_adv_timeout_work);
   22c94:	3018      	adds	r0, #24
   22c96:	f001 bed0 	b.w	24a3a <k_work_cancel_delayable>

00022c9a <z_log_msg_static_create.constprop.0>:
   22c9a:	2300      	movs	r3, #0
   22c9c:	f7f2 bcb0 	b.w	15600 <z_impl_z_log_msg_static_create>

00022ca0 <tx_complete_work>:
	tx_notify(conn);
   22ca0:	3828      	subs	r0, #40	; 0x28
   22ca2:	f7f6 bb59 	b.w	19358 <tx_notify>

00022ca6 <bt_conn_reset_rx_state>:
{
   22ca6:	b510      	push	{r4, lr}
   22ca8:	4604      	mov	r4, r0
	if (!conn->rx) {
   22caa:	6900      	ldr	r0, [r0, #16]
   22cac:	b118      	cbz	r0, 22cb6 <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   22cae:	f7f9 fac1 	bl	1c234 <net_buf_unref>
	conn->rx = NULL;
   22cb2:	2300      	movs	r3, #0
   22cb4:	6123      	str	r3, [r4, #16]
}
   22cb6:	bd10      	pop	{r4, pc}

00022cb8 <conn_cleanup>:
{
   22cb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22cbc:	4604      	mov	r4, r0
		tx_data(buf)->tx = NULL;
   22cbe:	2700      	movs	r7, #0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   22cc0:	f104 0638 	add.w	r6, r4, #56	; 0x38
   22cc4:	2300      	movs	r3, #0
   22cc6:	2200      	movs	r2, #0
   22cc8:	4630      	mov	r0, r6
   22cca:	f001 f8bc 	bl	23e46 <net_buf_get>
   22cce:	4603      	mov	r3, r0
   22cd0:	b950      	cbnz	r0, 22ce8 <conn_cleanup+0x30>
	bt_conn_reset_rx_state(conn);
   22cd2:	4620      	mov	r0, r4
   22cd4:	f7ff ffe7 	bl	22ca6 <bt_conn_reset_rx_state>
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   22cd8:	f104 0058 	add.w	r0, r4, #88	; 0x58
   22cdc:	2200      	movs	r2, #0
}
   22cde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   22ce2:	2300      	movs	r3, #0
   22ce4:	f7fc bfac 	b.w	1fc40 <k_work_reschedule>
		struct bt_conn_tx *tx = tx_data(buf)->tx;
   22ce8:	699d      	ldr	r5, [r3, #24]
		tx_data(buf)->tx = NULL;
   22cea:	619f      	str	r7, [r3, #24]
		net_buf_unref(buf);
   22cec:	f7f9 faa2 	bl	1c234 <net_buf_unref>
		if (tx) {
   22cf0:	2d00      	cmp	r5, #0
   22cf2:	d0e7      	beq.n	22cc4 <conn_cleanup+0xc>
			conn_tx_destroy(conn, tx);
   22cf4:	4629      	mov	r1, r5
   22cf6:	4620      	mov	r0, r4
   22cf8:	f7f6 fb5e 	bl	193b8 <conn_tx_destroy>
   22cfc:	e7e0      	b.n	22cc0 <conn_cleanup+0x8>

00022cfe <bt_conn_ref>:
{
   22cfe:	b510      	push	{r4, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   22d00:	f3bf 8f5b 	dmb	ish
   22d04:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
   22d08:	f3bf 8f5b 	dmb	ish
		old = atomic_get(&conn->ref);
   22d0c:	f100 02bc 	add.w	r2, r0, #188	; 0xbc
		if (!old) {
   22d10:	b17b      	cbz	r3, 22d32 <bt_conn_ref+0x34>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   22d12:	f3bf 8f5b 	dmb	ish
	} while (!atomic_cas(&conn->ref, old, old + 1));
   22d16:	1c59      	adds	r1, r3, #1
   22d18:	e852 4f00 	ldrex	r4, [r2]
   22d1c:	429c      	cmp	r4, r3
   22d1e:	d104      	bne.n	22d2a <bt_conn_ref+0x2c>
   22d20:	e842 1c00 	strex	ip, r1, [r2]
   22d24:	f1bc 0f00 	cmp.w	ip, #0
   22d28:	d1f6      	bne.n	22d18 <bt_conn_ref+0x1a>
   22d2a:	f3bf 8f5b 	dmb	ish
   22d2e:	d1e7      	bne.n	22d00 <bt_conn_ref+0x2>
}
   22d30:	bd10      	pop	{r4, pc}
			return NULL;
   22d32:	4618      	mov	r0, r3
   22d34:	e7fc      	b.n	22d30 <bt_conn_ref+0x32>

00022d36 <bt_conn_unref>:
	old = atomic_dec(&conn->ref);
   22d36:	f100 03bc 	add.w	r3, r0, #188	; 0xbc
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   22d3a:	f3bf 8f5b 	dmb	ish
   22d3e:	e853 1f00 	ldrex	r1, [r3]
   22d42:	3901      	subs	r1, #1
   22d44:	e843 1200 	strex	r2, r1, [r3]
   22d48:	2a00      	cmp	r2, #0
   22d4a:	d1f8      	bne.n	22d3e <bt_conn_unref+0x8>
   22d4c:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->type == BT_CONN_TYPE_LE &&
   22d50:	8842      	ldrh	r2, [r0, #2]
   22d52:	f240 1301 	movw	r3, #257	; 0x101
   22d56:	429a      	cmp	r2, r3
   22d58:	d108      	bne.n	22d6c <bt_conn_unref+0x36>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   22d5a:	f3bf 8f5b 	dmb	ish
   22d5e:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
   22d62:	f3bf 8f5b 	dmb	ish
	    conn->role == BT_CONN_ROLE_PERIPHERAL && atomic_get(&conn->ref) == 0) {
   22d66:	b90b      	cbnz	r3, 22d6c <bt_conn_unref+0x36>
		bt_le_adv_resume();
   22d68:	f7f6 ba80 	b.w	1926c <bt_le_adv_resume>
}
   22d6c:	4770      	bx	lr

00022d6e <conn_lookup_handle>:
{
   22d6e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   22d72:	4607      	mov	r7, r0
   22d74:	460e      	mov	r6, r1
   22d76:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   22d78:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   22d7a:	f04f 09c0 	mov.w	r9, #192	; 0xc0
	for (i = 0; i < size; i++) {
   22d7e:	42b4      	cmp	r4, r6
   22d80:	d103      	bne.n	22d8a <conn_lookup_handle+0x1c>
	return NULL;
   22d82:	2300      	movs	r3, #0
}
   22d84:	4618      	mov	r0, r3
   22d86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   22d8a:	fb09 7004 	mla	r0, r9, r4, r7
   22d8e:	f7ff ffb6 	bl	22cfe <bt_conn_ref>
   22d92:	4603      	mov	r3, r0
		if (!conn) {
   22d94:	b158      	cbz	r0, 22dae <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   22d96:	7a85      	ldrb	r5, [r0, #10]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   22d98:	2d01      	cmp	r5, #1
   22d9a:	d002      	beq.n	22da2 <conn_lookup_handle+0x34>
   22d9c:	3d07      	subs	r5, #7
   22d9e:	2d01      	cmp	r5, #1
   22da0:	d803      	bhi.n	22daa <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   22da2:	881a      	ldrh	r2, [r3, #0]
   22da4:	4542      	cmp	r2, r8
   22da6:	d0ed      	beq.n	22d84 <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   22da8:	4618      	mov	r0, r3
   22daa:	f7ff ffc4 	bl	22d36 <bt_conn_unref>
	for (i = 0; i < size; i++) {
   22dae:	3401      	adds	r4, #1
   22db0:	e7e5      	b.n	22d7e <conn_lookup_handle+0x10>

00022db2 <bt_conn_connected>:
{
   22db2:	b510      	push	{r4, lr}
   22db4:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   22db6:	f7f7 f94b 	bl	1a050 <bt_l2cap_connected>
	notify_connected(conn);
   22dba:	4620      	mov	r0, r4
}
   22dbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	notify_connected(conn);
   22dc0:	f7f6 ba98 	b.w	192f4 <notify_connected>

00022dc4 <bt_conn_get_security>:
}
   22dc4:	2001      	movs	r0, #1
   22dc6:	4770      	bx	lr

00022dc8 <bt_conn_is_peer_addr_le>:
{
   22dc8:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   22dca:	7a03      	ldrb	r3, [r0, #8]
   22dcc:	428b      	cmp	r3, r1
{
   22dce:	4604      	mov	r4, r0
   22dd0:	4615      	mov	r5, r2
	if (id != conn->id) {
   22dd2:	d115      	bne.n	22e00 <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   22dd4:	f100 0188 	add.w	r1, r0, #136	; 0x88
   22dd8:	2207      	movs	r2, #7
   22dda:	4628      	mov	r0, r5
   22ddc:	f002 f9e3 	bl	251a6 <memcmp>
	if (bt_addr_le_eq(peer, &conn->le.dst)) {
   22de0:	b180      	cbz	r0, 22e04 <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   22de2:	78e3      	ldrb	r3, [r4, #3]
   22de4:	2207      	movs	r2, #7
   22de6:	b943      	cbnz	r3, 22dfa <bt_conn_is_peer_addr_le+0x32>
   22de8:	f104 0196 	add.w	r1, r4, #150	; 0x96
   22dec:	4628      	mov	r0, r5
   22dee:	f002 f9da 	bl	251a6 <memcmp>
	return bt_addr_le_cmp(a, b) == 0;
   22df2:	fab0 f080 	clz	r0, r0
   22df6:	0940      	lsrs	r0, r0, #5
}
   22df8:	bd38      	pop	{r3, r4, r5, pc}
	return memcmp(a, b, sizeof(*a));
   22dfa:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   22dfe:	e7f5      	b.n	22dec <bt_conn_is_peer_addr_le+0x24>
		return false;
   22e00:	2000      	movs	r0, #0
   22e02:	e7f9      	b.n	22df8 <bt_conn_is_peer_addr_le+0x30>
		return true;
   22e04:	2001      	movs	r0, #1
   22e06:	e7f7      	b.n	22df8 <bt_conn_is_peer_addr_le+0x30>

00022e08 <bt_conn_le_conn_update>:
{
   22e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22e0a:	4607      	mov	r7, r0
   22e0c:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   22e0e:	f242 0013 	movw	r0, #8211	; 0x2013
   22e12:	210e      	movs	r1, #14
   22e14:	f7f4 fdbc 	bl	17990 <bt_hci_cmd_create>
	if (!buf) {
   22e18:	4606      	mov	r6, r0
   22e1a:	b1d0      	cbz	r0, 22e52 <bt_conn_le_conn_update+0x4a>
	return net_buf_simple_add(&buf->b, len);
   22e1c:	210e      	movs	r1, #14
   22e1e:	300c      	adds	r0, #12
   22e20:	f001 f86c 	bl	23efc <net_buf_simple_add>
__ssp_bos_icheck3(memset, void *, int)
   22e24:	220e      	movs	r2, #14
   22e26:	4604      	mov	r4, r0
   22e28:	2100      	movs	r1, #0
   22e2a:	f002 f9da 	bl	251e2 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   22e2e:	883b      	ldrh	r3, [r7, #0]
   22e30:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   22e32:	882b      	ldrh	r3, [r5, #0]
   22e34:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   22e36:	886b      	ldrh	r3, [r5, #2]
   22e38:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   22e3a:	88ab      	ldrh	r3, [r5, #4]
   22e3c:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   22e3e:	88eb      	ldrh	r3, [r5, #6]
   22e40:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   22e42:	4631      	mov	r1, r6
   22e44:	2200      	movs	r2, #0
}
   22e46:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   22e4a:	f242 0013 	movw	r0, #8211	; 0x2013
   22e4e:	f7f4 bdd9 	b.w	17a04 <bt_hci_cmd_send_sync>
}
   22e52:	f06f 0068 	mvn.w	r0, #104	; 0x68
   22e56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00022e58 <l2cap_connected>:
}
   22e58:	4770      	bx	lr

00022e5a <z_log_msg_static_create.constprop.0>:
   22e5a:	2300      	movs	r3, #0
   22e5c:	f7f2 bbd0 	b.w	15600 <z_impl_z_log_msg_static_create>

00022e60 <l2cap_create_le_sig_pdu.constprop.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   22e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22e62:	4605      	mov	r5, r0
   22e64:	460f      	mov	r7, r1
   22e66:	4616      	mov	r6, r2
	return bt_conn_create_pdu_timeout(pool,
   22e68:	2300      	movs	r3, #0
   22e6a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   22e6e:	2104      	movs	r1, #4
   22e70:	2000      	movs	r0, #0
   22e72:	f7f6 fdef 	bl	19a54 <bt_conn_create_pdu_timeout>
	if (!buf) {
   22e76:	4604      	mov	r4, r0
   22e78:	b920      	cbnz	r0, 22e84 <l2cap_create_le_sig_pdu.constprop.0+0x24>
   22e7a:	4628      	mov	r0, r5
}
   22e7c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   22e80:	f7f7 b8aa 	b.w	19fd8 <l2cap_create_le_sig_pdu.part.0>
   22e84:	2104      	movs	r1, #4
   22e86:	300c      	adds	r0, #12
   22e88:	f001 f838 	bl	23efc <net_buf_simple_add>
	hdr->code = code;
   22e8c:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
   22e8e:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   22e90:	8046      	strh	r6, [r0, #2]
}
   22e92:	4620      	mov	r0, r4
   22e94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00022e96 <l2cap_disconnected>:
static void l2cap_disconnected(struct bt_l2cap_chan *chan)
   22e96:	4770      	bx	lr

00022e98 <bt_l2cap_chan_del>:
{
   22e98:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   22e9a:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   22e9e:	4604      	mov	r4, r0
	if (!chan->conn) {
   22ea0:	b123      	cbz	r3, 22eac <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   22ea2:	686b      	ldr	r3, [r5, #4]
   22ea4:	b103      	cbz	r3, 22ea8 <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   22ea6:	4798      	blx	r3
	chan->conn = NULL;
   22ea8:	2300      	movs	r3, #0
   22eaa:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   22eac:	68e3      	ldr	r3, [r4, #12]
   22eae:	b10b      	cbz	r3, 22eb4 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   22eb0:	4620      	mov	r0, r4
   22eb2:	4798      	blx	r3
	if (ops->released) {
   22eb4:	6a2b      	ldr	r3, [r5, #32]
   22eb6:	b11b      	cbz	r3, 22ec0 <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   22eb8:	4620      	mov	r0, r4
}
   22eba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   22ebe:	4718      	bx	r3
}
   22ec0:	bd70      	pop	{r4, r5, r6, pc}

00022ec2 <bt_l2cap_disconnected>:
{
   22ec2:	b538      	push	{r3, r4, r5, lr}
	return list->head;
   22ec4:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   22ec6:	b130      	cbz	r0, 22ed6 <bt_l2cap_disconnected+0x14>
	return node->next;
   22ec8:	f850 4908 	ldr.w	r4, [r0], #-8
   22ecc:	b104      	cbz	r4, 22ed0 <bt_l2cap_disconnected+0xe>
   22ece:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   22ed0:	f7ff ffe2 	bl	22e98 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   22ed4:	b904      	cbnz	r4, 22ed8 <bt_l2cap_disconnected+0x16>
}
   22ed6:	bd38      	pop	{r3, r4, r5, pc}
   22ed8:	68a5      	ldr	r5, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   22eda:	b12d      	cbz	r5, 22ee8 <bt_l2cap_disconnected+0x26>
		bt_l2cap_chan_del(chan);
   22edc:	4620      	mov	r0, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   22ede:	3d08      	subs	r5, #8
		bt_l2cap_chan_del(chan);
   22ee0:	f7ff ffda 	bl	22e98 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   22ee4:	462c      	mov	r4, r5
   22ee6:	e7f7      	b.n	22ed8 <bt_l2cap_disconnected+0x16>
		bt_l2cap_chan_del(chan);
   22ee8:	4620      	mov	r0, r4
}
   22eea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_l2cap_chan_del(chan);
   22eee:	f7ff bfd3 	b.w	22e98 <bt_l2cap_chan_del>

00022ef2 <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   22ef2:	3104      	adds	r1, #4
   22ef4:	f7f6 bdae 	b.w	19a54 <bt_conn_create_pdu_timeout>

00022ef8 <bt_l2cap_send_cb>:
{
   22ef8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22efc:	4614      	mov	r4, r2
   22efe:	4605      	mov	r5, r0
   22f00:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   22f02:	f102 000c 	add.w	r0, r2, #12
   22f06:	2104      	movs	r1, #4
   22f08:	461e      	mov	r6, r3
   22f0a:	f8dd 8018 	ldr.w	r8, [sp, #24]
   22f0e:	f001 f80c 	bl	23f2a <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   22f12:	8a22      	ldrh	r2, [r4, #16]
	hdr->cid = sys_cpu_to_le16(cid);
   22f14:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   22f16:	3a04      	subs	r2, #4
   22f18:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   22f1a:	4643      	mov	r3, r8
   22f1c:	4632      	mov	r2, r6
   22f1e:	4621      	mov	r1, r4
   22f20:	4628      	mov	r0, r5
}
   22f22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   22f26:	f7f6 bbe1 	b.w	196ec <bt_conn_send_cb>

00022f2a <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   22f2a:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   22f2c:	b130      	cbz	r0, 22f3c <bt_l2cap_le_lookup_rx_cid+0x12>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   22f2e:	8983      	ldrh	r3, [r0, #12]
   22f30:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   22f32:	f1a0 0008 	sub.w	r0, r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   22f36:	d001      	beq.n	22f3c <bt_l2cap_le_lookup_rx_cid+0x12>
	return node->next;
   22f38:	6880      	ldr	r0, [r0, #8]
   22f3a:	e7f7      	b.n	22f2c <bt_l2cap_le_lookup_rx_cid+0x2>
}
   22f3c:	4770      	bx	lr

00022f3e <bt_l2cap_init>:
		(void)memset(&l2cap_tx_meta_data_storage[i], 0,
					sizeof(l2cap_tx_meta_data_storage[i]));
		k_fifo_put(&free_l2cap_tx_meta_data, &l2cap_tx_meta_data_storage[i]);
	}
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}
   22f3e:	4770      	bx	lr

00022f40 <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   22f40:	4603      	mov	r3, r0
	return list->head;
   22f42:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   22f44:	b128      	cbz	r0, 22f52 <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   22f46:	6859      	ldr	r1, [r3, #4]
	return node->next;
   22f48:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   22f4a:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   22f4c:	4288      	cmp	r0, r1
	list->tail = node;
   22f4e:	bf08      	it	eq
   22f50:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   22f52:	4770      	bx	lr

00022f54 <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   22f54:	4603      	mov	r3, r0
	size_t bytes = 0;
   22f56:	2000      	movs	r0, #0

	while (buf) {
   22f58:	b903      	cbnz	r3, 22f5c <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   22f5a:	4770      	bx	lr
		bytes += buf->len;
   22f5c:	8a1a      	ldrh	r2, [r3, #16]
		buf = buf->frags;
   22f5e:	685b      	ldr	r3, [r3, #4]
		bytes += buf->len;
   22f60:	4410      	add	r0, r2
		buf = buf->frags;
   22f62:	e7f9      	b.n	22f58 <net_buf_frags_len+0x4>

00022f64 <attr_read_type_cb>:
{
   22f64:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   22f66:	68d4      	ldr	r4, [r2, #12]
   22f68:	7823      	ldrb	r3, [r4, #0]
   22f6a:	3102      	adds	r1, #2
   22f6c:	b913      	cbnz	r3, 22f74 <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   22f6e:	7021      	strb	r1, [r4, #0]
	return true;
   22f70:	2001      	movs	r0, #1
}
   22f72:	bd10      	pop	{r4, pc}
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   22f74:	428b      	cmp	r3, r1
   22f76:	d0fb      	beq.n	22f70 <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   22f78:	8a03      	ldrh	r3, [r0, #16]
   22f7a:	3b02      	subs	r3, #2
   22f7c:	8203      	strh	r3, [r0, #16]
		data->item = NULL;
   22f7e:	2000      	movs	r0, #0
   22f80:	6110      	str	r0, [r2, #16]
		return false;
   22f82:	e7f6      	b.n	22f72 <attr_read_type_cb+0xe>

00022f84 <att_prepare_write_req>:
}
   22f84:	2006      	movs	r0, #6
   22f86:	4770      	bx	lr

00022f88 <atomic_test_bit>:
   22f88:	f3bf 8f5b 	dmb	ish
   22f8c:	6800      	ldr	r0, [r0, #0]
   22f8e:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   22f92:	4108      	asrs	r0, r1
}
   22f94:	f000 0001 	and.w	r0, r0, #1
   22f98:	4770      	bx	lr

00022f9a <write_cb>:
{
   22f9a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   22f9c:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   22f9e:	4601      	mov	r1, r0
{
   22fa0:	4605      	mov	r5, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   22fa2:	f44f 7295 	mov.w	r2, #298	; 0x12a
   22fa6:	6820      	ldr	r0, [r4, #0]
   22fa8:	f000 fe28 	bl	23bfc <bt_gatt_check_perm>
   22fac:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   22fae:	bb00      	cbnz	r0, 22ff2 <write_cb+0x58>
	if (!data->req) {
   22fb0:	7a23      	ldrb	r3, [r4, #8]
   22fb2:	b1b3      	cbz	r3, 22fe2 <write_cb+0x48>
	} else if (data->req == BT_ATT_OP_EXEC_WRITE_REQ) {
   22fb4:	f1a3 0218 	sub.w	r2, r3, #24
   22fb8:	4253      	negs	r3, r2
   22fba:	4153      	adcs	r3, r2
   22fbc:	009b      	lsls	r3, r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   22fbe:	9301      	str	r3, [sp, #4]
   22fc0:	8a63      	ldrh	r3, [r4, #18]
   22fc2:	9300      	str	r3, [sp, #0]
   22fc4:	68ae      	ldr	r6, [r5, #8]
   22fc6:	8a23      	ldrh	r3, [r4, #16]
   22fc8:	68e2      	ldr	r2, [r4, #12]
   22fca:	6820      	ldr	r0, [r4, #0]
   22fcc:	4629      	mov	r1, r5
   22fce:	47b0      	blx	r6
	if (write < 0 || write != data->len) {
   22fd0:	2800      	cmp	r0, #0
   22fd2:	db08      	blt.n	22fe6 <write_cb+0x4c>
   22fd4:	8a23      	ldrh	r3, [r4, #16]
   22fd6:	4298      	cmp	r0, r3
   22fd8:	d10e      	bne.n	22ff8 <write_cb+0x5e>
	data->err = 0U;
   22fda:	2300      	movs	r3, #0
   22fdc:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   22fde:	2001      	movs	r0, #1
   22fe0:	e008      	b.n	22ff4 <write_cb+0x5a>
		flags |= BT_GATT_WRITE_FLAG_CMD;
   22fe2:	2302      	movs	r3, #2
   22fe4:	e7eb      	b.n	22fbe <write_cb+0x24>
	if (err < 0 && err >= -0xff) {
   22fe6:	f110 0fff 	cmn.w	r0, #255	; 0xff
   22fea:	d305      	bcc.n	22ff8 <write_cb+0x5e>
		return -err;
   22fec:	4240      	negs	r0, r0
   22fee:	b2c0      	uxtb	r0, r0
		data->err = err_to_att(write);
   22ff0:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   22ff2:	2000      	movs	r0, #0
}
   22ff4:	b002      	add	sp, #8
   22ff6:	bd70      	pop	{r4, r5, r6, pc}
	return BT_ATT_ERR_UNLIKELY;
   22ff8:	200e      	movs	r0, #14
   22ffa:	e7f9      	b.n	22ff0 <write_cb+0x56>

00022ffc <bt_gatt_foreach_attr>:
{
   22ffc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   22ffe:	e9cd 2301 	strd	r2, r3, [sp, #4]
   23002:	2300      	movs	r3, #0
   23004:	9300      	str	r3, [sp, #0]
   23006:	461a      	mov	r2, r3
   23008:	f7f8 fbe0 	bl	1b7cc <bt_gatt_foreach_attr_type>
}
   2300c:	b005      	add	sp, #20
   2300e:	f85d fb04 	ldr.w	pc, [sp], #4

00023012 <att_chan_mtu_updated>:
{
   23012:	b470      	push	{r4, r5, r6}
	struct bt_att *att = updated_chan->att;
   23014:	6805      	ldr	r5, [r0, #0]
	return list->head;
   23016:	6a6a      	ldr	r2, [r5, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   23018:	b352      	cbz	r2, 23070 <att_chan_mtu_updated+0x5e>
	return node->next;
   2301a:	6813      	ldr	r3, [r2, #0]
   2301c:	b103      	cbz	r3, 23020 <att_chan_mtu_updated+0xe>
   2301e:	3be0      	subs	r3, #224	; 0xe0
   23020:	f1a2 04e0 	sub.w	r4, r2, #224	; 0xe0
   23024:	2200      	movs	r2, #0
   23026:	4611      	mov	r1, r2
   23028:	e000      	b.n	2302c <att_chan_mtu_updated+0x1a>
   2302a:	3be0      	subs	r3, #224	; 0xe0
		if (chan == updated_chan) {
   2302c:	4284      	cmp	r4, r0
   2302e:	d007      	beq.n	23040 <att_chan_mtu_updated+0x2e>
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   23030:	8d66      	ldrh	r6, [r4, #42]	; 0x2a
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   23032:	8b64      	ldrh	r4, [r4, #26]
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   23034:	42b1      	cmp	r1, r6
   23036:	bf38      	it	cc
   23038:	4631      	movcc	r1, r6
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   2303a:	42a2      	cmp	r2, r4
   2303c:	bf38      	it	cc
   2303e:	4622      	movcc	r2, r4
   23040:	461c      	mov	r4, r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   23042:	b12b      	cbz	r3, 23050 <att_chan_mtu_updated+0x3e>
   23044:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   23048:	2b00      	cmp	r3, #0
   2304a:	d1ee      	bne.n	2302a <att_chan_mtu_updated+0x18>
		if (chan == updated_chan) {
   2304c:	4284      	cmp	r4, r0
   2304e:	d1ef      	bne.n	23030 <att_chan_mtu_updated+0x1e>
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   23050:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
	    (updated_chan->chan.rx.mtu > max_rx)) {
   23052:	8b40      	ldrh	r0, [r0, #26]
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   23054:	428b      	cmp	r3, r1
   23056:	d801      	bhi.n	2305c <att_chan_mtu_updated+0x4a>
   23058:	4290      	cmp	r0, r2
   2305a:	d90b      	bls.n	23074 <att_chan_mtu_updated+0x62>
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   2305c:	4282      	cmp	r2, r0
   2305e:	bf38      	it	cc
   23060:	4602      	movcc	r2, r0
   23062:	4299      	cmp	r1, r3
   23064:	6828      	ldr	r0, [r5, #0]
   23066:	bf38      	it	cc
   23068:	4619      	movcc	r1, r3
}
   2306a:	bc70      	pop	{r4, r5, r6}
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   2306c:	f7f8 bfc2 	b.w	1bff4 <bt_gatt_att_max_mtu_changed>
   23070:	4611      	mov	r1, r2
   23072:	e7ed      	b.n	23050 <att_chan_mtu_updated+0x3e>
}
   23074:	bc70      	pop	{r4, r5, r6}
   23076:	4770      	bx	lr

00023078 <attr_read_group_cb>:
	if (!data->rsp->len) {
   23078:	68d0      	ldr	r0, [r2, #12]
   2307a:	7803      	ldrb	r3, [r0, #0]
   2307c:	3104      	adds	r1, #4
   2307e:	b913      	cbnz	r3, 23086 <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   23080:	7001      	strb	r1, [r0, #0]
	return true;
   23082:	2001      	movs	r0, #1
   23084:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   23086:	428b      	cmp	r3, r1
   23088:	d0fb      	beq.n	23082 <attr_read_group_cb+0xa>
		data->buf->len -= sizeof(*data->group);
   2308a:	6891      	ldr	r1, [r2, #8]
   2308c:	8a0b      	ldrh	r3, [r1, #16]
		data->group = NULL;
   2308e:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   23090:	3b04      	subs	r3, #4
   23092:	820b      	strh	r3, [r1, #16]
		data->group = NULL;
   23094:	6110      	str	r0, [r2, #16]
}
   23096:	4770      	bx	lr

00023098 <find_info_cb>:
{
   23098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   2309a:	6893      	ldr	r3, [r2, #8]
	struct bt_att_chan *chan = data->chan;
   2309c:	6816      	ldr	r6, [r2, #0]
{
   2309e:	4605      	mov	r5, r0
   230a0:	460f      	mov	r7, r1
   230a2:	4614      	mov	r4, r2
	if (!data->rsp) {
   230a4:	b963      	cbnz	r3, 230c0 <find_info_cb+0x28>
	return net_buf_simple_add(&buf->b, len);
   230a6:	6850      	ldr	r0, [r2, #4]
   230a8:	2101      	movs	r1, #1
   230aa:	300c      	adds	r0, #12
   230ac:	f000 ff26 	bl	23efc <net_buf_simple_add>
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   230b0:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   230b2:	682b      	ldr	r3, [r5, #0]
   230b4:	781b      	ldrb	r3, [r3, #0]
   230b6:	2b00      	cmp	r3, #0
   230b8:	bf14      	ite	ne
   230ba:	2302      	movne	r3, #2
   230bc:	2301      	moveq	r3, #1
   230be:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   230c0:	68a3      	ldr	r3, [r4, #8]
   230c2:	781b      	ldrb	r3, [r3, #0]
   230c4:	2b01      	cmp	r3, #1
   230c6:	d003      	beq.n	230d0 <find_info_cb+0x38>
   230c8:	2b02      	cmp	r3, #2
   230ca:	d019      	beq.n	23100 <find_info_cb+0x68>
   230cc:	2000      	movs	r0, #0
   230ce:	e016      	b.n	230fe <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   230d0:	682b      	ldr	r3, [r5, #0]
   230d2:	781b      	ldrb	r3, [r3, #0]
   230d4:	2b00      	cmp	r3, #0
   230d6:	d1f9      	bne.n	230cc <find_info_cb+0x34>
   230d8:	6860      	ldr	r0, [r4, #4]
   230da:	2104      	movs	r1, #4
   230dc:	300c      	adds	r0, #12
   230de:	f000 ff0d 	bl	23efc <net_buf_simple_add>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   230e2:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(handle);
   230e4:	8007      	strh	r7, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   230e6:	682a      	ldr	r2, [r5, #0]
   230e8:	68e3      	ldr	r3, [r4, #12]
   230ea:	8852      	ldrh	r2, [r2, #2]
   230ec:	805a      	strh	r2, [r3, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   230ee:	6863      	ldr	r3, [r4, #4]
   230f0:	8d70      	ldrh	r0, [r6, #42]	; 0x2a
   230f2:	8a1b      	ldrh	r3, [r3, #16]
   230f4:	1ac0      	subs	r0, r0, r3
   230f6:	2804      	cmp	r0, #4
		if (chan->chan.tx.mtu - data->buf->len >
   230f8:	bf94      	ite	ls
   230fa:	2000      	movls	r0, #0
   230fc:	2001      	movhi	r0, #1
}
   230fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   23100:	682b      	ldr	r3, [r5, #0]
   23102:	781b      	ldrb	r3, [r3, #0]
   23104:	2b02      	cmp	r3, #2
   23106:	d1e1      	bne.n	230cc <find_info_cb+0x34>
   23108:	6860      	ldr	r0, [r4, #4]
   2310a:	2112      	movs	r1, #18
   2310c:	300c      	adds	r0, #12
   2310e:	f000 fef5 	bl	23efc <net_buf_simple_add>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   23112:	60e0      	str	r0, [r4, #12]
		data->info128->handle = sys_cpu_to_le16(handle);
   23114:	8007      	strh	r7, [r0, #0]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   23116:	682b      	ldr	r3, [r5, #0]
   23118:	68e2      	ldr	r2, [r4, #12]
   2311a:	1c59      	adds	r1, r3, #1
   2311c:	3202      	adds	r2, #2
   2311e:	3311      	adds	r3, #17
   23120:	f851 0b04 	ldr.w	r0, [r1], #4
   23124:	f842 0b04 	str.w	r0, [r2], #4
   23128:	4299      	cmp	r1, r3
   2312a:	d1f9      	bne.n	23120 <find_info_cb+0x88>
		if (chan->chan.tx.mtu - data->buf->len >
   2312c:	6863      	ldr	r3, [r4, #4]
   2312e:	8d70      	ldrh	r0, [r6, #42]	; 0x2a
   23130:	8a1b      	ldrh	r3, [r3, #16]
   23132:	1ac0      	subs	r0, r0, r3
   23134:	2812      	cmp	r0, #18
   23136:	e7df      	b.n	230f8 <find_info_cb+0x60>

00023138 <z_log_msg_static_create.constprop.0>:
   23138:	2300      	movs	r3, #0
   2313a:	f7f2 ba61 	b.w	15600 <z_impl_z_log_msg_static_create>

0002313e <chan_req_send>:
{
   2313e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23140:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   23142:	6888      	ldr	r0, [r1, #8]
   23144:	f7ff ff06 	bl	22f54 <net_buf_frags_len>
   23148:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
   2314a:	4283      	cmp	r3, r0
{
   2314c:	460c      	mov	r4, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   2314e:	d30d      	bcc.n	2316c <chan_req_send+0x2e>
	chan->req = req;
   23150:	f8c5 1094 	str.w	r1, [r5, #148]	; 0x94
	buf = req->buf;
   23154:	688f      	ldr	r7, [r1, #8]
	req->buf = NULL;
   23156:	2600      	movs	r6, #0
   23158:	608e      	str	r6, [r1, #8]
	return chan_send(chan, buf);
   2315a:	4628      	mov	r0, r5
   2315c:	4639      	mov	r1, r7
   2315e:	f7f7 f9bf 	bl	1a4e0 <chan_send>
	if (err) {
   23162:	b110      	cbz	r0, 2316a <chan_req_send+0x2c>
		req->buf = buf;
   23164:	60a7      	str	r7, [r4, #8]
		chan->req = NULL;
   23166:	f8c5 6094 	str.w	r6, [r5, #148]	; 0x94
}
   2316a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EMSGSIZE;
   2316c:	f06f 0079 	mvn.w	r0, #121	; 0x79
   23170:	e7fb      	b.n	2316a <chan_req_send+0x2c>

00023172 <process_queue>:
{
   23172:	b570      	push	{r4, r5, r6, lr}
		return net_buf_get(fifo, K_NO_WAIT);
   23174:	2200      	movs	r2, #0
{
   23176:	4604      	mov	r4, r0
		return net_buf_get(fifo, K_NO_WAIT);
   23178:	2300      	movs	r3, #0
   2317a:	4608      	mov	r0, r1
{
   2317c:	460e      	mov	r6, r1
		return net_buf_get(fifo, K_NO_WAIT);
   2317e:	f000 fe62 	bl	23e46 <net_buf_get>
	if (buf) {
   23182:	4605      	mov	r5, r0
   23184:	b158      	cbz	r0, 2319e <process_queue+0x2c>
	return chan_send(chan, buf);
   23186:	4601      	mov	r1, r0
   23188:	4620      	mov	r0, r4
   2318a:	f7f7 f9a9 	bl	1a4e0 <chan_send>
		if (err) {
   2318e:	4604      	mov	r4, r0
   23190:	b118      	cbz	r0, 2319a <process_queue+0x28>
			k_queue_prepend(&queue->_queue, buf);
   23192:	4629      	mov	r1, r5
   23194:	4630      	mov	r0, r6
   23196:	f001 fb72 	bl	2487e <k_queue_prepend>
}
   2319a:	4620      	mov	r0, r4
   2319c:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   2319e:	f06f 0401 	mvn.w	r4, #1
   231a2:	e7fa      	b.n	2319a <process_queue+0x28>

000231a4 <bt_att_chan_send_rsp>:
{
   231a4:	b538      	push	{r3, r4, r5, lr}
   231a6:	4604      	mov	r4, r0
   231a8:	460d      	mov	r5, r1
	err = chan_send(chan, buf);
   231aa:	f7f7 f999 	bl	1a4e0 <chan_send>
	if (err) {
   231ae:	b130      	cbz	r0, 231be <bt_att_chan_send_rsp+0x1a>
		net_buf_put(&chan->tx_queue, buf);
   231b0:	4629      	mov	r1, r5
   231b2:	f104 0098 	add.w	r0, r4, #152	; 0x98
}
   231b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   231ba:	f000 be77 	b.w	23eac <net_buf_put>
}
   231be:	bd38      	pop	{r3, r4, r5, pc}

000231c0 <att_chan_read>:
{
   231c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   231c4:	4680      	mov	r8, r0
   231c6:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   231c8:	4610      	mov	r0, r2
{
   231ca:	4699      	mov	r9, r3
   231cc:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   231ce:	f7ff fec1 	bl	22f54 <net_buf_frags_len>
   231d2:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
   231d6:	4283      	cmp	r3, r0
{
   231d8:	468b      	mov	fp, r1
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   231da:	d97a      	bls.n	232d2 <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   231dc:	f8d8 3004 	ldr.w	r3, [r8, #4]
   231e0:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   231e2:	4630      	mov	r0, r6
   231e4:	f000 fe68 	bl	23eb8 <net_buf_frag_last>
	size_t len, total = 0;
   231e8:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   231ec:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   231ee:	4630      	mov	r0, r6
   231f0:	f7ff feb0 	bl	22f54 <net_buf_frags_len>
   231f4:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
	return net_buf_simple_tailroom(&buf->b);
   231f8:	f105 070c 	add.w	r7, r5, #12
   231fc:	1a24      	subs	r4, r4, r0
   231fe:	4638      	mov	r0, r7
   23200:	f000 feb7 	bl	23f72 <net_buf_simple_tailroom>
   23204:	4284      	cmp	r4, r0
   23206:	d211      	bcs.n	2322c <att_chan_read+0x6c>
   23208:	4630      	mov	r0, r6
   2320a:	f7ff fea3 	bl	22f54 <net_buf_frags_len>
   2320e:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   23212:	1a24      	subs	r4, r4, r0
		if (!len) {
   23214:	bb34      	cbnz	r4, 23264 <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   23216:	7ab0      	ldrb	r0, [r6, #10]
   23218:	f7f8 ff4a 	bl	1c0b0 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   2321c:	2200      	movs	r2, #0
   2321e:	2300      	movs	r3, #0
   23220:	f000 fe0c 	bl	23e3c <net_buf_alloc_fixed>
			if (!frag) {
   23224:	4605      	mov	r5, r0
   23226:	b930      	cbnz	r0, 23236 <att_chan_read+0x76>
	return total;
   23228:	4657      	mov	r7, sl
   2322a:	e02c      	b.n	23286 <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   2322c:	4638      	mov	r0, r7
   2322e:	f000 fea0 	bl	23f72 <net_buf_simple_tailroom>
   23232:	4604      	mov	r4, r0
   23234:	e7ee      	b.n	23214 <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   23236:	4601      	mov	r1, r0
   23238:	4630      	mov	r0, r6
   2323a:	f000 fe4e 	bl	23eda <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   2323e:	4630      	mov	r0, r6
   23240:	f7ff fe88 	bl	22f54 <net_buf_frags_len>
   23244:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   23248:	f105 070c 	add.w	r7, r5, #12
   2324c:	1a24      	subs	r4, r4, r0
   2324e:	4638      	mov	r0, r7
   23250:	f000 fe8f 	bl	23f72 <net_buf_simple_tailroom>
   23254:	4284      	cmp	r4, r0
   23256:	d21a      	bcs.n	2328e <att_chan_read+0xce>
   23258:	4630      	mov	r0, r6
   2325a:	f7ff fe7b 	bl	22f54 <net_buf_frags_len>
   2325e:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   23262:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   23264:	68e9      	ldr	r1, [r5, #12]
   23266:	8a2a      	ldrh	r2, [r5, #16]
   23268:	f8cd 9000 	str.w	r9, [sp]
   2326c:	f8db 7004 	ldr.w	r7, [fp, #4]
   23270:	9803      	ldr	r0, [sp, #12]
   23272:	440a      	add	r2, r1
   23274:	b2a3      	uxth	r3, r4
   23276:	4659      	mov	r1, fp
   23278:	47b8      	blx	r7
		if (read < 0) {
   2327a:	1e07      	subs	r7, r0, #0
   2327c:	da0c      	bge.n	23298 <att_chan_read+0xd8>
				return total;
   2327e:	f1ba 0f00 	cmp.w	sl, #0
   23282:	bf18      	it	ne
   23284:	4657      	movne	r7, sl
}
   23286:	4638      	mov	r0, r7
   23288:	b005      	add	sp, #20
   2328a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2328e:	4638      	mov	r0, r7
   23290:	f000 fe6f 	bl	23f72 <net_buf_simple_tailroom>
   23294:	4604      	mov	r4, r0
   23296:	e7e5      	b.n	23264 <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   23298:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2329a:	b993      	cbnz	r3, 232c2 <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   2329c:	4639      	mov	r1, r7
   2329e:	f105 000c 	add.w	r0, r5, #12
   232a2:	f000 fe2b 	bl	23efc <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   232a6:	4630      	mov	r0, r6
   232a8:	f7ff fe54 	bl	22f54 <net_buf_frags_len>
   232ac:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
		offset += read;
   232b0:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   232b2:	4283      	cmp	r3, r0
		total += read;
   232b4:	44ba      	add	sl, r7
		offset += read;
   232b6:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   232ba:	d9b5      	bls.n	23228 <att_chan_read+0x68>
   232bc:	42a7      	cmp	r7, r4
   232be:	d096      	beq.n	231ee <att_chan_read+0x2e>
   232c0:	e7b2      	b.n	23228 <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   232c2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   232c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   232c6:	4639      	mov	r1, r7
   232c8:	4628      	mov	r0, r5
   232ca:	4798      	blx	r3
   232cc:	2800      	cmp	r0, #0
   232ce:	d1e5      	bne.n	2329c <att_chan_read+0xdc>
   232d0:	e7aa      	b.n	23228 <att_chan_read+0x68>
		return 0;
   232d2:	2700      	movs	r7, #0
   232d4:	e7d7      	b.n	23286 <att_chan_read+0xc6>

000232d6 <sys_slist_find_and_remove.isra.0>:
	return list->head;
   232d6:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   232d8:	2200      	movs	r2, #0
   232da:	b903      	cbnz	r3, 232de <sys_slist_find_and_remove.isra.0+0x8>
   232dc:	4770      	bx	lr
   232de:	428b      	cmp	r3, r1
   232e0:	d10f      	bne.n	23302 <sys_slist_find_and_remove.isra.0+0x2c>
	return node->next;
   232e2:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   232e4:	b93a      	cbnz	r2, 232f6 <sys_slist_find_and_remove.isra.0+0x20>
   232e6:	6842      	ldr	r2, [r0, #4]
	list->head = node;
   232e8:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   232ea:	4291      	cmp	r1, r2
   232ec:	d100      	bne.n	232f0 <sys_slist_find_and_remove.isra.0+0x1a>
	list->tail = node;
   232ee:	6043      	str	r3, [r0, #4]
	parent->next = child;
   232f0:	2300      	movs	r3, #0
   232f2:	600b      	str	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   232f4:	4770      	bx	lr
	parent->next = child;
   232f6:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   232f8:	6843      	ldr	r3, [r0, #4]
   232fa:	4299      	cmp	r1, r3
	list->tail = node;
   232fc:	bf08      	it	eq
   232fe:	6042      	streq	r2, [r0, #4]
}
   23300:	e7f6      	b.n	232f0 <sys_slist_find_and_remove.isra.0+0x1a>
	return node->next;
   23302:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   23304:	681b      	ldr	r3, [r3, #0]
   23306:	e7e8      	b.n	232da <sys_slist_find_and_remove.isra.0+0x4>

00023308 <att_exec_write_req>:
static uint8_t att_exec_write_req(struct bt_att_chan *chan, struct net_buf *buf)
   23308:	2006      	movs	r0, #6
   2330a:	4770      	bx	lr

0002330c <atomic_test_and_set_bit>:
{
   2330c:	b510      	push	{r4, lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   2330e:	2301      	movs	r3, #1
   23310:	fa03 f101 	lsl.w	r1, r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   23314:	f3bf 8f5b 	dmb	ish
   23318:	e850 3f00 	ldrex	r3, [r0]
   2331c:	ea43 0201 	orr.w	r2, r3, r1
   23320:	e840 2400 	strex	r4, r2, [r0]
   23324:	2c00      	cmp	r4, #0
   23326:	d1f7      	bne.n	23318 <atomic_test_and_set_bit+0xc>
   23328:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   2332c:	4219      	tst	r1, r3
}
   2332e:	bf14      	ite	ne
   23330:	2001      	movne	r0, #1
   23332:	2000      	moveq	r0, #0
   23334:	bd10      	pop	{r4, pc}

00023336 <read_cb>:
{
   23336:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_att_chan *chan = data->chan;
   23338:	6816      	ldr	r6, [r2, #0]
{
   2333a:	4605      	mov	r5, r0
	data->err = 0x00;
   2333c:	2300      	movs	r3, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   2333e:	6870      	ldr	r0, [r6, #4]
	data->err = 0x00;
   23340:	7313      	strb	r3, [r2, #12]
{
   23342:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   23344:	4629      	mov	r1, r5
   23346:	2295      	movs	r2, #149	; 0x95
   23348:	f000 fc58 	bl	23bfc <bt_gatt_check_perm>
   2334c:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   2334e:	b980      	cbnz	r0, 23372 <read_cb+0x3c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   23350:	e9cd 0000 	strd	r0, r0, [sp]
   23354:	4629      	mov	r1, r5
   23356:	88a3      	ldrh	r3, [r4, #4]
   23358:	68a2      	ldr	r2, [r4, #8]
   2335a:	4630      	mov	r0, r6
   2335c:	f7ff ff30 	bl	231c0 <att_chan_read>
	if (ret < 0) {
   23360:	2800      	cmp	r0, #0
   23362:	da09      	bge.n	23378 <read_cb+0x42>
	if (err < 0 && err >= -0xff) {
   23364:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
   23368:	bf26      	itte	cs
   2336a:	4240      	negcs	r0, r0
   2336c:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
   2336e:	200e      	movcc	r0, #14
		data->err = err_to_att(ret);
   23370:	7320      	strb	r0, [r4, #12]
		return BT_GATT_ITER_STOP;
   23372:	2000      	movs	r0, #0
}
   23374:	b002      	add	sp, #8
   23376:	bd70      	pop	{r4, r5, r6, pc}
	return BT_GATT_ITER_CONTINUE;
   23378:	2001      	movs	r0, #1
   2337a:	e7fb      	b.n	23374 <read_cb+0x3e>

0002337c <read_vl_cb>:
{
   2337c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_att_chan *chan = data->chan;
   23380:	f8d2 8000 	ldr.w	r8, [r2]
{
   23384:	4606      	mov	r6, r0
	data->err = 0x00;
   23386:	2300      	movs	r3, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   23388:	f8d8 0004 	ldr.w	r0, [r8, #4]
	data->err = 0x00;
   2338c:	7313      	strb	r3, [r2, #12]
{
   2338e:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   23390:	4631      	mov	r1, r6
   23392:	2295      	movs	r2, #149	; 0x95
   23394:	f000 fc32 	bl	23bfc <bt_gatt_check_perm>
   23398:	4605      	mov	r5, r0
   2339a:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   2339c:	b9e0      	cbnz	r0, 233d8 <read_vl_cb+0x5c>
	if (chan->chan.tx.mtu - data->buf->len < 2) {
   2339e:	68a0      	ldr	r0, [r4, #8]
   233a0:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
   233a4:	8a02      	ldrh	r2, [r0, #16]
   233a6:	1a9b      	subs	r3, r3, r2
   233a8:	2b01      	cmp	r3, #1
   233aa:	dd15      	ble.n	233d8 <read_vl_cb+0x5c>
   233ac:	2102      	movs	r1, #2
   233ae:	300c      	adds	r0, #12
   233b0:	f000 fda4 	bl	23efc <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   233b4:	e9cd 5500 	strd	r5, r5, [sp]
   233b8:	4607      	mov	r7, r0
   233ba:	88a3      	ldrh	r3, [r4, #4]
   233bc:	68a2      	ldr	r2, [r4, #8]
   233be:	4631      	mov	r1, r6
   233c0:	4640      	mov	r0, r8
   233c2:	f7ff fefd 	bl	231c0 <att_chan_read>
	if (read < 0) {
   233c6:	1e03      	subs	r3, r0, #0
   233c8:	da0a      	bge.n	233e0 <read_vl_cb+0x64>
	if (err < 0 && err >= -0xff) {
   233ca:	f113 0fff 	cmn.w	r3, #255	; 0xff
		return -err;
   233ce:	bf26      	itte	cs
   233d0:	425b      	negcs	r3, r3
   233d2:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
   233d4:	230e      	movcc	r3, #14
		data->err = err_to_att(read);
   233d6:	7323      	strb	r3, [r4, #12]
		return BT_GATT_ITER_STOP;
   233d8:	2000      	movs	r0, #0
}
   233da:	b002      	add	sp, #8
   233dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	rsp->len = read;
   233e0:	803b      	strh	r3, [r7, #0]
	return BT_GATT_ITER_CONTINUE;
   233e2:	2001      	movs	r0, #1
   233e4:	e7f9      	b.n	233da <read_vl_cb+0x5e>

000233e6 <bt_att_sent>:
{
   233e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   233e8:	4605      	mov	r5, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   233ea:	1f07      	subs	r7, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   233ec:	f100 038c 	add.w	r3, r0, #140	; 0x8c
	struct bt_att *att = chan->att;
   233f0:	f850 4c04 	ldr.w	r4, [r0, #-4]
   233f4:	f3bf 8f5b 	dmb	ish
   233f8:	e853 1f00 	ldrex	r1, [r3]
   233fc:	f021 0110 	bic.w	r1, r1, #16
   23400:	e843 1200 	strex	r2, r1, [r3]
   23404:	2a00      	cmp	r2, #0
   23406:	d1f7      	bne.n	233f8 <bt_att_sent+0x12>
   23408:	f3bf 8f5b 	dmb	ish
	if (!att) {
   2340c:	b30c      	cbz	r4, 23452 <bt_att_sent+0x6c>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   2340e:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
   23412:	b98b      	cbnz	r3, 23438 <bt_att_sent+0x52>
   23414:	6863      	ldr	r3, [r4, #4]
   23416:	b17b      	cbz	r3, 23438 <bt_att_sent+0x52>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   23418:	1d20      	adds	r0, r4, #4
   2341a:	f7ff fd91 	bl	22f40 <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2341e:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   23420:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   23422:	4638      	mov	r0, r7
   23424:	f7ff fe8b 	bl	2313e <chan_req_send>
   23428:	2800      	cmp	r0, #0
   2342a:	da12      	bge.n	23452 <bt_att_sent+0x6c>
	return list->head;
   2342c:	6863      	ldr	r3, [r4, #4]
	parent->next = child;
   2342e:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   23430:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   23432:	6066      	str	r6, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   23434:	b903      	cbnz	r3, 23438 <bt_att_sent+0x52>
	list->tail = node;
   23436:	60a6      	str	r6, [r4, #8]
	err = process_queue(chan, &chan->tx_queue);
   23438:	f105 0194 	add.w	r1, r5, #148	; 0x94
   2343c:	4638      	mov	r0, r7
   2343e:	f7ff fe98 	bl	23172 <process_queue>
	if (!err) {
   23442:	b130      	cbz	r0, 23452 <bt_att_sent+0x6c>
	(void)process_queue(chan, &att->tx_queue);
   23444:	f104 010c 	add.w	r1, r4, #12
   23448:	4638      	mov	r0, r7
}
   2344a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	(void)process_queue(chan, &att->tx_queue);
   2344e:	f7ff be90 	b.w	23172 <process_queue>
}
   23452:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00023454 <att_req_send_process>:
{
   23454:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return list->head;
   23458:	6a44      	ldr	r4, [r0, #36]	; 0x24
   2345a:	4680      	mov	r8, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2345c:	2c00      	cmp	r4, #0
   2345e:	d03b      	beq.n	234d8 <att_req_send_process+0x84>
	return node->next;
   23460:	f854 69e0 	ldr.w	r6, [r4], #-224
   23464:	b106      	cbz	r6, 23468 <att_req_send_process+0x14>
   23466:	3ee0      	subs	r6, #224	; 0xe0
{
   23468:	2300      	movs	r3, #0
   2346a:	461d      	mov	r5, r3
		req = get_first_req_matching_chan(&att->reqs, chan);
   2346c:	f108 0704 	add.w	r7, r8, #4
   23470:	e013      	b.n	2349a <att_req_send_process+0x46>
		if (!req && prev &&
   23472:	b1c3      	cbz	r3, 234a6 <att_req_send_process+0x52>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   23474:	2103      	movs	r1, #3
   23476:	f104 0090 	add.w	r0, r4, #144	; 0x90
   2347a:	f7ff fd85 	bl	22f88 <atomic_test_bit>
   2347e:	4602      	mov	r2, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   23480:	f103 0090 	add.w	r0, r3, #144	; 0x90
   23484:	f7ff fd80 	bl	22f88 <atomic_test_bit>
		if (!req && prev &&
   23488:	4282      	cmp	r2, r0
   2348a:	d10c      	bne.n	234a6 <att_req_send_process+0x52>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2348c:	b326      	cbz	r6, 234d8 <att_req_send_process+0x84>
   2348e:	f8d6 20e0 	ldr.w	r2, [r6, #224]	; 0xe0
   23492:	b102      	cbz	r2, 23496 <att_req_send_process+0x42>
   23494:	3ae0      	subs	r2, #224	; 0xe0
{
   23496:	4634      	mov	r4, r6
   23498:	4616      	mov	r6, r2
		if (chan->req) {
   2349a:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
   2349e:	2a00      	cmp	r2, #0
   234a0:	d1f4      	bne.n	2348c <att_req_send_process+0x38>
		if (!req && prev &&
   234a2:	2d00      	cmp	r5, #0
   234a4:	d0e5      	beq.n	23472 <att_req_send_process+0x1e>
	sys_snode_t *node = sys_slist_get(reqs);
   234a6:	4638      	mov	r0, r7
   234a8:	f7ff fd4a 	bl	22f40 <sys_slist_get>
	if (node) {
   234ac:	4605      	mov	r5, r0
   234ae:	b908      	cbnz	r0, 234b4 <att_req_send_process+0x60>
   234b0:	4623      	mov	r3, r4
   234b2:	e7eb      	b.n	2348c <att_req_send_process+0x38>
	return chan_req_send(chan, req);
   234b4:	4601      	mov	r1, r0
   234b6:	4620      	mov	r0, r4
   234b8:	f7ff fe41 	bl	2313e <chan_req_send>
		if (bt_att_chan_req_send(chan, req) >= 0) {
   234bc:	2800      	cmp	r0, #0
   234be:	da0b      	bge.n	234d8 <att_req_send_process+0x84>
	return list->head;
   234c0:	f8d8 3004 	ldr.w	r3, [r8, #4]
	parent->next = child;
   234c4:	602b      	str	r3, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
   234c6:	f8d8 3008 	ldr.w	r3, [r8, #8]
	list->head = node;
   234ca:	f8c8 5004 	str.w	r5, [r8, #4]
Z_GENLIST_PREPEND(slist, snode)
   234ce:	2b00      	cmp	r3, #0
   234d0:	d1ee      	bne.n	234b0 <att_req_send_process+0x5c>
	list->tail = node;
   234d2:	f8c8 5008 	str.w	r5, [r8, #8]
}
   234d6:	e7eb      	b.n	234b0 <att_req_send_process+0x5c>
}
   234d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000234dc <bt_att_status>:
{
   234dc:	b538      	push	{r3, r4, r5, lr}
   234de:	4605      	mov	r5, r0
   234e0:	4608      	mov	r0, r1
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   234e2:	2100      	movs	r1, #0
   234e4:	f7ff fd50 	bl	22f88 <atomic_test_bit>
   234e8:	b1c0      	cbz	r0, 2351c <bt_att_status+0x40>
	if (!chan->att) {
   234ea:	f855 0c04 	ldr.w	r0, [r5, #-4]
   234ee:	b1a8      	cbz	r0, 2351c <bt_att_status+0x40>
	if (chan->req) {
   234f0:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
   234f4:	b993      	cbnz	r3, 2351c <bt_att_status+0x40>
	node = sys_slist_get(&chan->att->reqs);
   234f6:	3004      	adds	r0, #4
   234f8:	f7ff fd22 	bl	22f40 <sys_slist_get>
	if (!node) {
   234fc:	4604      	mov	r4, r0
   234fe:	b168      	cbz	r0, 2351c <bt_att_status+0x40>
	return chan_req_send(chan, req);
   23500:	4601      	mov	r1, r0
   23502:	1f28      	subs	r0, r5, #4
   23504:	f7ff fe1b 	bl	2313e <chan_req_send>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   23508:	2800      	cmp	r0, #0
   2350a:	da07      	bge.n	2351c <bt_att_status+0x40>
	sys_slist_prepend(&chan->att->reqs, node);
   2350c:	f855 3c04 	ldr.w	r3, [r5, #-4]
	return list->head;
   23510:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   23512:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   23514:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   23516:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   23518:	b902      	cbnz	r2, 2351c <bt_att_status+0x40>
	list->tail = node;
   2351a:	609c      	str	r4, [r3, #8]
}
   2351c:	bd38      	pop	{r3, r4, r5, pc}

0002351e <att_sent>:
	struct bt_att_chan *att_chan = data->att_chan;
   2351e:	6808      	ldr	r0, [r1, #0]
	if (chan->ops->sent) {
   23520:	6883      	ldr	r3, [r0, #8]
   23522:	699b      	ldr	r3, [r3, #24]
   23524:	b10b      	cbz	r3, 2352a <att_sent+0xc>
		chan->ops->sent(chan);
   23526:	3004      	adds	r0, #4
   23528:	4718      	bx	r3
}
   2352a:	4770      	bx	lr

0002352c <att_unknown>:
{
   2352c:	b510      	push	{r4, lr}
   2352e:	460c      	mov	r4, r1
	if (!err) {
   23530:	b90a      	cbnz	r2, 23536 <att_unknown+0xa>
		att_sent(conn, user_data);
   23532:	f7ff fff4 	bl	2351e <att_sent>
	tx_meta_data_free(user_data);
   23536:	4620      	mov	r0, r4
}
   23538:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(user_data);
   2353c:	f7f6 bf02 	b.w	1a344 <tx_meta_data_free>

00023540 <att_tx_complete>:
{
   23540:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   23544:	4606      	mov	r6, r0
   23546:	460d      	mov	r5, r1
	if (!err) {
   23548:	4614      	mov	r4, r2
   2354a:	b122      	cbz	r2, 23556 <att_tx_complete+0x16>
}
   2354c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	tx_meta_data_free(data);
   23550:	4608      	mov	r0, r1
   23552:	f7f6 bef7 	b.w	1a344 <tx_meta_data_free>
		att_sent(conn, user_data);
   23556:	f7ff ffe2 	bl	2351e <att_sent>
	bt_gatt_complete_func_t func = data->func;
   2355a:	68af      	ldr	r7, [r5, #8]
	uint16_t attr_count = data->attr_count;
   2355c:	f8b5 8004 	ldrh.w	r8, [r5, #4]
	void *ud = data->user_data;
   23560:	f8d5 900c 	ldr.w	r9, [r5, #12]
	tx_meta_data_free(data);
   23564:	4628      	mov	r0, r5
   23566:	f7f6 feed 	bl	1a344 <tx_meta_data_free>
	if (!err && func) {
   2356a:	b92f      	cbnz	r7, 23578 <att_tx_complete+0x38>
}
   2356c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			func(conn, ud);
   23570:	4649      	mov	r1, r9
   23572:	4630      	mov	r0, r6
   23574:	47b8      	blx	r7
		for (uint16_t i = 0; i < attr_count; i++) {
   23576:	3401      	adds	r4, #1
   23578:	b2a3      	uxth	r3, r4
   2357a:	4543      	cmp	r3, r8
   2357c:	d3f8      	bcc.n	23570 <att_tx_complete+0x30>
   2357e:	e7f5      	b.n	2356c <att_tx_complete+0x2c>

00023580 <att_req_sent>:
{
   23580:	b510      	push	{r4, lr}
   23582:	460c      	mov	r4, r1
	if (!err) {
   23584:	b90a      	cbnz	r2, 2358a <att_req_sent+0xa>
		att_sent(conn, user_data);
   23586:	f7ff ffca 	bl	2351e <att_sent>
	struct bt_att_chan *chan = data->att_chan;
   2358a:	6820      	ldr	r0, [r4, #0]
	if (chan->req) {
   2358c:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
   23590:	b12b      	cbz	r3, 2359e <att_req_sent+0x1e>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   23592:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   23596:	2300      	movs	r3, #0
   23598:	30b0      	adds	r0, #176	; 0xb0
   2359a:	f7fc fb51 	bl	1fc40 <k_work_reschedule>
	tx_meta_data_free(user_data);
   2359e:	4620      	mov	r0, r4
}
   235a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(user_data);
   235a4:	f7f6 bece 	b.w	1a344 <tx_meta_data_free>

000235a8 <att_cfm_sent>:
{
   235a8:	b510      	push	{r4, lr}
   235aa:	460c      	mov	r4, r1
	if (!err) {
   235ac:	b90a      	cbnz	r2, 235b2 <att_cfm_sent+0xa>
		att_sent(conn, user_data);
   235ae:	f7ff ffb6 	bl	2351e <att_sent>
   235b2:	6823      	ldr	r3, [r4, #0]
   235b4:	f3bf 8f5b 	dmb	ish
   235b8:	3390      	adds	r3, #144	; 0x90
   235ba:	e853 1f00 	ldrex	r1, [r3]
   235be:	f021 0102 	bic.w	r1, r1, #2
   235c2:	e843 1200 	strex	r2, r1, [r3]
   235c6:	2a00      	cmp	r2, #0
   235c8:	d1f7      	bne.n	235ba <att_cfm_sent+0x12>
   235ca:	f3bf 8f5b 	dmb	ish
	tx_meta_data_free(data);
   235ce:	4620      	mov	r0, r4
}
   235d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(data);
   235d4:	f7f6 beb6 	b.w	1a344 <tx_meta_data_free>

000235d8 <att_rsp_sent>:
{
   235d8:	b510      	push	{r4, lr}
   235da:	460c      	mov	r4, r1
	if (!err) {
   235dc:	b90a      	cbnz	r2, 235e2 <att_rsp_sent+0xa>
		att_sent(conn, user_data);
   235de:	f7ff ff9e 	bl	2351e <att_sent>
   235e2:	6823      	ldr	r3, [r4, #0]
   235e4:	f3bf 8f5b 	dmb	ish
   235e8:	3390      	adds	r3, #144	; 0x90
   235ea:	e853 1f00 	ldrex	r1, [r3]
   235ee:	f021 0101 	bic.w	r1, r1, #1
   235f2:	e843 1200 	strex	r2, r1, [r3]
   235f6:	2a00      	cmp	r2, #0
   235f8:	d1f7      	bne.n	235ea <att_rsp_sent+0x12>
   235fa:	f3bf 8f5b 	dmb	ish
	tx_meta_data_free(data);
   235fe:	4620      	mov	r0, r4
}
   23600:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(data);
   23604:	f7f6 be9e 	b.w	1a344 <tx_meta_data_free>

00023608 <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   23608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2360c:	4688      	mov	r8, r1
   2360e:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   23610:	2101      	movs	r1, #1
   23612:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   23614:	4605      	mov	r5, r0
   23616:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   23618:	f7f7 f940 	bl	1a89c <bt_att_chan_create_pdu>
	if (!buf) {
   2361c:	4604      	mov	r4, r0
   2361e:	b170      	cbz	r0, 2363e <send_err_rsp.part.0+0x36>
   23620:	2104      	movs	r1, #4
   23622:	300c      	adds	r0, #12
   23624:	f000 fc6a 	bl	23efc <net_buf_simple_add>
	rsp->request = req;
   23628:	f880 8000 	strb.w	r8, [r0]
	rsp->handle = sys_cpu_to_le16(handle);
   2362c:	f8a0 7001 	strh.w	r7, [r0, #1]
	rsp->error = err;
   23630:	70c6      	strb	r6, [r0, #3]
	bt_att_chan_send_rsp(chan, buf);
   23632:	4621      	mov	r1, r4
   23634:	4628      	mov	r0, r5
}
   23636:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf);
   2363a:	f7ff bdb3 	b.w	231a4 <bt_att_chan_send_rsp>
}
   2363e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00023642 <att_write_req>:
{
   23642:	b537      	push	{r0, r1, r2, r4, r5, lr}
   23644:	460c      	mov	r4, r1
   23646:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   23648:	f101 000c 	add.w	r0, r1, #12
   2364c:	f000 fc85 	bl	23f5a <net_buf_simple_pull_le16>
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   23650:	8a22      	ldrh	r2, [r4, #16]
   23652:	9201      	str	r2, [sp, #4]
   23654:	68e2      	ldr	r2, [r4, #12]
   23656:	9200      	str	r2, [sp, #0]
   23658:	4603      	mov	r3, r0
   2365a:	2213      	movs	r2, #19
   2365c:	2112      	movs	r1, #18
   2365e:	4628      	mov	r0, r5
   23660:	f7f7 fa36 	bl	1aad0 <att_write_rsp.constprop.0>
}
   23664:	b003      	add	sp, #12
   23666:	bd30      	pop	{r4, r5, pc}

00023668 <att_write_cmd>:
{
   23668:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2366a:	460c      	mov	r4, r1
   2366c:	4605      	mov	r5, r0
   2366e:	f101 000c 	add.w	r0, r1, #12
   23672:	f000 fc72 	bl	23f5a <net_buf_simple_pull_le16>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   23676:	8a22      	ldrh	r2, [r4, #16]
   23678:	9201      	str	r2, [sp, #4]
   2367a:	68e2      	ldr	r2, [r4, #12]
   2367c:	9200      	str	r2, [sp, #0]
   2367e:	2200      	movs	r2, #0
   23680:	4603      	mov	r3, r0
   23682:	4611      	mov	r1, r2
   23684:	4628      	mov	r0, r5
   23686:	f7f7 fa23 	bl	1aad0 <att_write_rsp.constprop.0>
}
   2368a:	b003      	add	sp, #12
   2368c:	bd30      	pop	{r4, r5, pc}

0002368e <att_read_blob_req>:
{
   2368e:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   23690:	68ca      	ldr	r2, [r1, #12]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   23692:	8813      	ldrh	r3, [r2, #0]
   23694:	8852      	ldrh	r2, [r2, #2]
   23696:	9200      	str	r2, [sp, #0]
   23698:	210c      	movs	r1, #12
   2369a:	220d      	movs	r2, #13
   2369c:	f7f7 fbde 	bl	1ae5c <att_read_rsp>
}
   236a0:	b003      	add	sp, #12
   236a2:	f85d fb04 	ldr.w	pc, [sp], #4

000236a6 <att_read_req>:
{
   236a6:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
   236a8:	68cb      	ldr	r3, [r1, #12]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   236aa:	2200      	movs	r2, #0
   236ac:	881b      	ldrh	r3, [r3, #0]
   236ae:	9200      	str	r2, [sp, #0]
   236b0:	210a      	movs	r1, #10
   236b2:	220b      	movs	r2, #11
   236b4:	f7f7 fbd2 	bl	1ae5c <att_read_rsp>
}
   236b8:	b003      	add	sp, #12
   236ba:	f85d fb04 	ldr.w	pc, [sp], #4

000236be <att_mtu_req>:
{
   236be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   236c0:	4605      	mov	r5, r0
	struct bt_conn *conn = chan->att->conn;
   236c2:	f850 2b90 	ldr.w	r2, [r0], #144
{
   236c6:	460b      	mov	r3, r1
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   236c8:	2103      	movs	r1, #3
	struct bt_conn *conn = chan->att->conn;
   236ca:	6817      	ldr	r7, [r2, #0]
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   236cc:	f7ff fc5c 	bl	22f88 <atomic_test_bit>
   236d0:	4604      	mov	r4, r0
   236d2:	b9f8      	cbnz	r0, 23714 <att_mtu_req+0x56>
	mtu_client = sys_le16_to_cpu(req->mtu);
   236d4:	68db      	ldr	r3, [r3, #12]
   236d6:	881e      	ldrh	r6, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   236d8:	2e16      	cmp	r6, #22
   236da:	d91d      	bls.n	23718 <att_mtu_req+0x5a>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   236dc:	4638      	mov	r0, r7
   236de:	2202      	movs	r2, #2
   236e0:	f7f7 fa5a 	bl	1ab98 <bt_att_create_pdu>
	if (!pdu) {
   236e4:	4607      	mov	r7, r0
   236e6:	b1c8      	cbz	r0, 2371c <att_mtu_req+0x5e>
	return net_buf_simple_add(&buf->b, len);
   236e8:	2102      	movs	r1, #2
   236ea:	300c      	adds	r0, #12
   236ec:	f000 fc06 	bl	23efc <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   236f0:	f06f 0308 	mvn.w	r3, #8
   236f4:	7003      	strb	r3, [r0, #0]
   236f6:	7044      	strb	r4, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu);
   236f8:	4639      	mov	r1, r7
   236fa:	4628      	mov	r0, r5
   236fc:	f7ff fd52 	bl	231a4 <bt_att_chan_send_rsp>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   23700:	2ef7      	cmp	r6, #247	; 0xf7
   23702:	bf28      	it	cs
   23704:	26f7      	movcs	r6, #247	; 0xf7
	att_chan_mtu_updated(chan);
   23706:	4628      	mov	r0, r5
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   23708:	836e      	strh	r6, [r5, #26]
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   2370a:	856e      	strh	r6, [r5, #42]	; 0x2a
	att_chan_mtu_updated(chan);
   2370c:	f7ff fc81 	bl	23012 <att_chan_mtu_updated>
	return 0;
   23710:	4620      	mov	r0, r4
}
   23712:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   23714:	2006      	movs	r0, #6
   23716:	e7fc      	b.n	23712 <att_mtu_req+0x54>
		return BT_ATT_ERR_INVALID_PDU;
   23718:	2004      	movs	r0, #4
   2371a:	e7fa      	b.n	23712 <att_mtu_req+0x54>
		return BT_ATT_ERR_UNLIKELY;
   2371c:	200e      	movs	r0, #14
   2371e:	e7f8      	b.n	23712 <att_mtu_req+0x54>

00023720 <att_confirm>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   23720:	8a0a      	ldrh	r2, [r1, #16]
   23722:	68c9      	ldr	r1, [r1, #12]
   23724:	2300      	movs	r3, #0
   23726:	f7f7 bd47 	b.w	1b1b8 <att_handle_rsp>

0002372a <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf)
{
   2372a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2372c:	460d      	mov	r5, r1
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(buf);

	att = att_get(conn);
   2372e:	f7f6 ff35 	bl	1a59c <att_get>
	if (!att) {
   23732:	4604      	mov	r4, r0
   23734:	b940      	cbnz	r0, 23748 <bt_att_send+0x1e>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   23736:	69a8      	ldr	r0, [r5, #24]
   23738:	f7f6 fe04 	bl	1a344 <tx_meta_data_free>
		net_buf_unref(buf);
   2373c:	4628      	mov	r0, r5
   2373e:	f7f8 fd79 	bl	1c234 <net_buf_unref>
		return -ENOTCONN;
   23742:	f06f 007f 	mvn.w	r0, #127	; 0x7f

	net_buf_put(&att->tx_queue, buf);
	att_send_process(att);

	return 0;
}
   23746:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_put(&att->tx_queue, buf);
   23748:	f100 060c 	add.w	r6, r0, #12
   2374c:	4629      	mov	r1, r5
   2374e:	4630      	mov	r0, r6
   23750:	f000 fbac 	bl	23eac <net_buf_put>
	return list->head;
   23754:	6a65      	ldr	r5, [r4, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   23756:	b14d      	cbz	r5, 2376c <bt_att_send+0x42>
	return node->next;
   23758:	f855 49e0 	ldr.w	r4, [r5], #-224
   2375c:	b104      	cbz	r4, 23760 <bt_att_send+0x36>
   2375e:	3ce0      	subs	r4, #224	; 0xe0
		err = process_queue(chan, &att->tx_queue);
   23760:	4631      	mov	r1, r6
   23762:	4628      	mov	r0, r5
   23764:	f7ff fd05 	bl	23172 <process_queue>
		if (!err) {
   23768:	4603      	mov	r3, r0
   2376a:	b980      	cbnz	r0, 2378e <bt_att_send+0x64>
	return 0;
   2376c:	2000      	movs	r0, #0
   2376e:	e7ea      	b.n	23746 <bt_att_send+0x1c>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   23770:	2103      	movs	r1, #3
   23772:	f104 0090 	add.w	r0, r4, #144	; 0x90
   23776:	f7ff fc07 	bl	22f88 <atomic_test_bit>
   2377a:	4607      	mov	r7, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   2377c:	f105 0090 	add.w	r0, r5, #144	; 0x90
   23780:	f7ff fc02 	bl	22f88 <atomic_test_bit>
		if (err == -ENOENT && prev &&
   23784:	4287      	cmp	r7, r0
   23786:	f06f 0301 	mvn.w	r3, #1
   2378a:	d107      	bne.n	2379c <bt_att_send+0x72>
   2378c:	4614      	mov	r4, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2378e:	2c00      	cmp	r4, #0
   23790:	d0ec      	beq.n	2376c <bt_att_send+0x42>
   23792:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
   23796:	b922      	cbnz	r2, 237a2 <bt_att_send+0x78>
		if (err == -ENOENT && prev &&
   23798:	3302      	adds	r3, #2
   2379a:	d0e9      	beq.n	23770 <bt_att_send+0x46>
{
   2379c:	4625      	mov	r5, r4
   2379e:	4614      	mov	r4, r2
   237a0:	e7de      	b.n	23760 <bt_att_send+0x36>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   237a2:	3ae0      	subs	r2, #224	; 0xe0
   237a4:	e7f8      	b.n	23798 <bt_att_send+0x6e>

000237a6 <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   237a6:	b510      	push	{r4, lr}
   237a8:	460c      	mov	r4, r1
	LOG_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(req);

	att = att_get(conn);
   237aa:	f7f6 fef7 	bl	1a59c <att_get>
	if (!att) {
   237ae:	b160      	cbz	r0, 237ca <bt_att_req_send+0x24>
	parent->next = child;
   237b0:	2300      	movs	r3, #0
   237b2:	6023      	str	r3, [r4, #0]
	return list->tail;
   237b4:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   237b6:	b92b      	cbnz	r3, 237c4 <bt_att_req_send+0x1e>
	list->head = node;
   237b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
		return -ENOTCONN;
	}

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);
   237bc:	f7ff fe4a 	bl	23454 <att_req_send_process>

	return 0;
   237c0:	2000      	movs	r0, #0
}
   237c2:	bd10      	pop	{r4, pc}
	parent->next = child;
   237c4:	601c      	str	r4, [r3, #0]
	list->tail = node;
   237c6:	6084      	str	r4, [r0, #8]
}
   237c8:	e7f8      	b.n	237bc <bt_att_req_send+0x16>
		return -ENOTCONN;
   237ca:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   237ce:	e7f8      	b.n	237c2 <bt_att_req_send+0x1c>

000237d0 <bt_att_fixed_chan_only>:
#if defined(CONFIG_BT_EATT)
	return bt_eatt_count(conn) == 0;
#else
	return true;
#endif /* CONFIG_BT_EATT */
}
   237d0:	2001      	movs	r0, #1
   237d2:	4770      	bx	lr

000237d4 <bt_att_clear_out_of_sync_sent>:

void bt_att_clear_out_of_sync_sent(struct bt_conn *conn)
{
   237d4:	b508      	push	{r3, lr}
	struct bt_att *att = att_get(conn);
   237d6:	f7f6 fee1 	bl	1a59c <att_get>
	struct bt_att_chan *chan;

	if (!att) {
   237da:	b198      	cbz	r0, 23804 <bt_att_clear_out_of_sync_sent+0x30>
	return list->head;
   237dc:	6a43      	ldr	r3, [r0, #36]	; 0x24
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   237de:	b18b      	cbz	r3, 23804 <bt_att_clear_out_of_sync_sent+0x30>
   237e0:	f3bf 8f5b 	dmb	ish
   237e4:	3be0      	subs	r3, #224	; 0xe0
   237e6:	f103 0290 	add.w	r2, r3, #144	; 0x90
   237ea:	e852 0f00 	ldrex	r0, [r2]
   237ee:	f020 0020 	bic.w	r0, r0, #32
   237f2:	e842 0100 	strex	r1, r0, [r2]
   237f6:	2900      	cmp	r1, #0
   237f8:	d1f7      	bne.n	237ea <bt_att_clear_out_of_sync_sent+0x16>
   237fa:	f3bf 8f5b 	dmb	ish
	return node->next;
   237fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   23802:	e7ec      	b.n	237de <bt_att_clear_out_of_sync_sent+0xa>
		atomic_clear_bit(chan->flags, ATT_OUT_OF_SYNC_SENT);
	}
}
   23804:	bd08      	pop	{r3, pc}

00023806 <bt_att_out_of_sync_sent_on_fixed>:

bool bt_att_out_of_sync_sent_on_fixed(struct bt_conn *conn)
{
   23806:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *l2cap_chan;
	struct bt_att_chan *att_chan;

	l2cap_chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   23808:	2104      	movs	r1, #4
   2380a:	f7ff fb8e 	bl	22f2a <bt_l2cap_le_lookup_rx_cid>
	if (!l2cap_chan) {
   2380e:	b128      	cbz	r0, 2381c <bt_att_out_of_sync_sent_on_fixed+0x16>
		return false;
	}

	att_chan = ATT_CHAN(l2cap_chan);
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
}
   23810:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
   23814:	2105      	movs	r1, #5
   23816:	308c      	adds	r0, #140	; 0x8c
   23818:	f7ff bbb6 	b.w	22f88 <atomic_test_bit>
}
   2381c:	bd08      	pop	{r3, pc}

0002381e <bt_att_set_tx_meta_data>:

void bt_att_set_tx_meta_data(struct net_buf *buf, bt_gatt_complete_func_t func, void *user_data,
			     enum bt_att_chan_opt chan_opt)
{
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   2381e:	6980      	ldr	r0, [r0, #24]

	data->func = func;
	data->user_data = user_data;
   23820:	e9c0 1202 	strd	r1, r2, [r0, #8]
	data->attr_count = 1;
   23824:	2201      	movs	r2, #1
   23826:	8082      	strh	r2, [r0, #4]
	data->chan_opt = chan_opt;
   23828:	7403      	strb	r3, [r0, #16]
}
   2382a:	4770      	bx	lr

0002382c <find_next>:
	*next = (struct bt_gatt_attr *)attr;
   2382c:	6010      	str	r0, [r2, #0]
}
   2382e:	2000      	movs	r0, #0
   23830:	4770      	bx	lr

00023832 <gatt_ccc_changed>:
{
   23832:	460b      	mov	r3, r1
		if (ccc->cfg[i].value > value) {
   23834:	8909      	ldrh	r1, [r1, #8]
	if (value != ccc->value) {
   23836:	895a      	ldrh	r2, [r3, #10]
   23838:	428a      	cmp	r2, r1
   2383a:	d003      	beq.n	23844 <gatt_ccc_changed+0x12>
		ccc->value = value;
   2383c:	8159      	strh	r1, [r3, #10]
		if (ccc->cfg_changed) {
   2383e:	68db      	ldr	r3, [r3, #12]
   23840:	b103      	cbz	r3, 23844 <gatt_ccc_changed+0x12>
			ccc->cfg_changed(attr, value);
   23842:	4718      	bx	r3
}
   23844:	4770      	bx	lr

00023846 <gatt_indicate_rsp>:
{
   23846:	b510      	push	{r4, lr}
   23848:	9c02      	ldr	r4, [sp, #8]
	if (params->func) {
   2384a:	68a3      	ldr	r3, [r4, #8]
{
   2384c:	460a      	mov	r2, r1
	if (params->func) {
   2384e:	b10b      	cbz	r3, 23854 <gatt_indicate_rsp+0xe>
		params->func(conn, params, err);
   23850:	4621      	mov	r1, r4
   23852:	4798      	blx	r3
	params->_ref--;
   23854:	7da3      	ldrb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   23856:	68e2      	ldr	r2, [r4, #12]
	params->_ref--;
   23858:	3b01      	subs	r3, #1
   2385a:	b2db      	uxtb	r3, r3
   2385c:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   2385e:	b122      	cbz	r2, 2386a <gatt_indicate_rsp+0x24>
   23860:	b91b      	cbnz	r3, 2386a <gatt_indicate_rsp+0x24>
		params->destroy(params);
   23862:	4620      	mov	r0, r4
}
   23864:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   23868:	4710      	bx	r2
}
   2386a:	bd10      	pop	{r4, pc}

0002386c <match_uuid>:
	data->attr = attr;
   2386c:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   2386e:	8091      	strh	r1, [r2, #4]
}
   23870:	2000      	movs	r0, #0
   23872:	4770      	bx	lr

00023874 <gen_hash_m>:
{
   23874:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   23876:	6807      	ldr	r7, [r0, #0]
   23878:	783d      	ldrb	r5, [r7, #0]
{
   2387a:	b089      	sub	sp, #36	; 0x24
   2387c:	4606      	mov	r6, r0
   2387e:	4614      	mov	r4, r2
	if (attr->uuid->type != BT_UUID_TYPE_16)
   23880:	b9dd      	cbnz	r5, 238ba <gen_hash_m+0x46>
	switch (u16->val) {
   23882:	887b      	ldrh	r3, [r7, #2]
   23884:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   23888:	d004      	beq.n	23894 <gen_hash_m+0x20>
   2388a:	d810      	bhi.n	238ae <gen_hash_m+0x3a>
   2388c:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   23890:	2b03      	cmp	r3, #3
   23892:	d812      	bhi.n	238ba <gen_hash_m+0x46>
		value = sys_cpu_to_le16(handle);
   23894:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   23898:	2202      	movs	r2, #2
   2389a:	f10d 010a 	add.w	r1, sp, #10
   2389e:	4620      	mov	r0, r4
   238a0:	f7fe fec1 	bl	22626 <tc_cmac_update>
   238a4:	b968      	cbnz	r0, 238c2 <gen_hash_m+0x4e>
			return BT_GATT_ITER_STOP;
   238a6:	f06f 0215 	mvn.w	r2, #21
			state->err = -EINVAL;
   238aa:	65a2      	str	r2, [r4, #88]	; 0x58
   238ac:	e006      	b.n	238bc <gen_hash_m+0x48>
	switch (u16->val) {
   238ae:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   238b2:	33ff      	adds	r3, #255	; 0xff
   238b4:	b29b      	uxth	r3, r3
   238b6:	2b04      	cmp	r3, #4
   238b8:	d91e      	bls.n	238f8 <gen_hash_m+0x84>
			return BT_GATT_ITER_STOP;
   238ba:	2501      	movs	r5, #1
}
   238bc:	4628      	mov	r0, r5
   238be:	b009      	add	sp, #36	; 0x24
   238c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		value = sys_cpu_to_le16(u16->val);
   238c2:	887b      	ldrh	r3, [r7, #2]
   238c4:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   238c8:	2202      	movs	r2, #2
   238ca:	f10d 010a 	add.w	r1, sp, #10
   238ce:	4620      	mov	r0, r4
   238d0:	f7fe fea9 	bl	22626 <tc_cmac_update>
   238d4:	2800      	cmp	r0, #0
   238d6:	d0e6      	beq.n	238a6 <gen_hash_m+0x32>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   238d8:	2000      	movs	r0, #0
   238da:	9000      	str	r0, [sp, #0]
   238dc:	aa03      	add	r2, sp, #12
   238de:	6877      	ldr	r7, [r6, #4]
   238e0:	2313      	movs	r3, #19
   238e2:	4631      	mov	r1, r6
   238e4:	47b8      	blx	r7
		if (len < 0) {
   238e6:	1e02      	subs	r2, r0, #0
   238e8:	dbdf      	blt.n	238aa <gen_hash_m+0x36>
		if (tc_cmac_update(&state->state, data, len) ==
   238ea:	a903      	add	r1, sp, #12
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   238ec:	4620      	mov	r0, r4
   238ee:	f7fe fe9a 	bl	22626 <tc_cmac_update>
   238f2:	2800      	cmp	r0, #0
   238f4:	d1e1      	bne.n	238ba <gen_hash_m+0x46>
   238f6:	e7d6      	b.n	238a6 <gen_hash_m+0x32>
		value = sys_cpu_to_le16(handle);
   238f8:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   238fc:	2202      	movs	r2, #2
   238fe:	f10d 010a 	add.w	r1, sp, #10
   23902:	4620      	mov	r0, r4
   23904:	f7fe fe8f 	bl	22626 <tc_cmac_update>
   23908:	2800      	cmp	r0, #0
   2390a:	d0cc      	beq.n	238a6 <gen_hash_m+0x32>
		value = sys_cpu_to_le16(u16->val);
   2390c:	887b      	ldrh	r3, [r7, #2]
   2390e:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   23912:	2202      	movs	r2, #2
   23914:	f10d 010a 	add.w	r1, sp, #10
   23918:	e7e8      	b.n	238ec <gen_hash_m+0x78>

0002391a <bt_addr_le_eq>:
{
   2391a:	b508      	push	{r3, lr}
	return memcmp(a, b, sizeof(*a));
   2391c:	2207      	movs	r2, #7
   2391e:	f001 fc42 	bl	251a6 <memcmp>
}
   23922:	fab0 f080 	clz	r0, r0
   23926:	0940      	lsrs	r0, r0, #5
   23928:	bd08      	pop	{r3, pc}

0002392a <write_name>:
{
   2392a:	b570      	push	{r4, r5, r6, lr}
   2392c:	b088      	sub	sp, #32
	char value[CONFIG_BT_DEVICE_NAME_MAX] = {};
   2392e:	2100      	movs	r1, #0
{
   23930:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
	char value[CONFIG_BT_DEVICE_NAME_MAX] = {};
   23934:	9101      	str	r1, [sp, #4]
{
   23936:	4616      	mov	r6, r2
	char value[CONFIG_BT_DEVICE_NAME_MAX] = {};
   23938:	a802      	add	r0, sp, #8
   2393a:	2218      	movs	r2, #24
{
   2393c:	461c      	mov	r4, r3
	char value[CONFIG_BT_DEVICE_NAME_MAX] = {};
   2393e:	f001 fc50 	bl	251e2 <memset>
	if (offset >= sizeof(value)) {
   23942:	2d1b      	cmp	r5, #27
   23944:	d80d      	bhi.n	23962 <write_name+0x38>
	if (offset + len >= sizeof(value)) {
   23946:	4425      	add	r5, r4
   23948:	2d1b      	cmp	r5, #27
   2394a:	dc0d      	bgt.n	23968 <write_name+0x3e>
	memcpy(value, buf, len);
   2394c:	4622      	mov	r2, r4
   2394e:	4631      	mov	r1, r6
   23950:	a801      	add	r0, sp, #4
   23952:	f001 fc38 	bl	251c6 <memcpy>
	bt_set_name(value);
   23956:	a801      	add	r0, sp, #4
   23958:	f7f4 fee6 	bl	18728 <bt_set_name>
}
   2395c:	4620      	mov	r0, r4
   2395e:	b008      	add	sp, #32
   23960:	bd70      	pop	{r4, r5, r6, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   23962:	f06f 0406 	mvn.w	r4, #6
   23966:	e7f9      	b.n	2395c <write_name+0x32>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   23968:	f06f 040c 	mvn.w	r4, #12
   2396c:	e7f6      	b.n	2395c <write_name+0x32>

0002396e <bt_addr_le_copy>:
   2396e:	680b      	ldr	r3, [r1, #0]
   23970:	6003      	str	r3, [r0, #0]
   23972:	888b      	ldrh	r3, [r1, #4]
   23974:	8083      	strh	r3, [r0, #4]
   23976:	798b      	ldrb	r3, [r1, #6]
   23978:	7183      	strb	r3, [r0, #6]
}
   2397a:	4770      	bx	lr

0002397c <clear_sc_cfg>:
__ssp_bos_icheck3(memset, void *, int)
   2397c:	2300      	movs	r3, #0
   2397e:	6003      	str	r3, [r0, #0]
   23980:	6043      	str	r3, [r0, #4]
   23982:	6083      	str	r3, [r0, #8]
}
   23984:	4770      	bx	lr

00023986 <bt_gatt_attr_read.constprop.0>:
ssize_t bt_gatt_attr_read(struct bt_conn *conn, const struct bt_gatt_attr *attr,
   23986:	b538      	push	{r3, r4, r5, lr}
   23988:	f8bd 4010 	ldrh.w	r4, [sp, #16]
	if (offset > value_len) {
   2398c:	4294      	cmp	r4, r2
ssize_t bt_gatt_attr_read(struct bt_conn *conn, const struct bt_gatt_attr *attr,
   2398e:	4615      	mov	r5, r2
	if (offset > value_len) {
   23990:	d30a      	bcc.n	239a8 <bt_gatt_attr_read.constprop.0+0x22>
	len = MIN(buf_len, value_len - offset);
   23992:	1aa4      	subs	r4, r4, r2
   23994:	428c      	cmp	r4, r1
   23996:	bfa8      	it	ge
   23998:	460c      	movge	r4, r1
   2399a:	b2a4      	uxth	r4, r4
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2399c:	4622      	mov	r2, r4
   2399e:	1959      	adds	r1, r3, r5
   239a0:	f001 fc11 	bl	251c6 <memcpy>
}
   239a4:	4620      	mov	r0, r4
   239a6:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   239a8:	f06f 0406 	mvn.w	r4, #6
   239ac:	e7fa      	b.n	239a4 <bt_gatt_attr_read.constprop.0+0x1e>

000239ae <bt_gatt_attr_read_ccc>:
{
   239ae:	b530      	push	{r4, r5, lr}
   239b0:	b085      	sub	sp, #20
	cfg = find_ccc_cfg(conn, ccc);
   239b2:	68c9      	ldr	r1, [r1, #12]
{
   239b4:	4614      	mov	r4, r2
   239b6:	461d      	mov	r5, r3
	cfg = find_ccc_cfg(conn, ccc);
   239b8:	f7f7 fcea 	bl	1b390 <find_ccc_cfg>
	if (cfg) {
   239bc:	b100      	cbz	r0, 239c0 <bt_gatt_attr_read_ccc+0x12>
		value = sys_cpu_to_le16(cfg->value);
   239be:	8900      	ldrh	r0, [r0, #8]
   239c0:	f8ad 000e 	strh.w	r0, [sp, #14]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   239c4:	2302      	movs	r3, #2
   239c6:	9300      	str	r3, [sp, #0]
   239c8:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   239cc:	f10d 030e 	add.w	r3, sp, #14
   239d0:	4629      	mov	r1, r5
   239d2:	4620      	mov	r0, r4
   239d4:	f7ff ffd7 	bl	23986 <bt_gatt_attr_read.constprop.0>
}
   239d8:	b005      	add	sp, #20
   239da:	bd30      	pop	{r4, r5, pc}

000239dc <bt_gatt_attr_read_service>:
{
   239dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   239de:	460c      	mov	r4, r1
   239e0:	4619      	mov	r1, r3
	struct bt_uuid *uuid = attr->user_data;
   239e2:	68e3      	ldr	r3, [r4, #12]
	if (uuid->type == BT_UUID_TYPE_16) {
   239e4:	781c      	ldrb	r4, [r3, #0]
{
   239e6:	4610      	mov	r0, r2
   239e8:	f8bd 2018 	ldrh.w	r2, [sp, #24]
	if (uuid->type == BT_UUID_TYPE_16) {
   239ec:	b13c      	cbz	r4, 239fe <bt_gatt_attr_read_service+0x22>
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
   239ee:	2410      	movs	r4, #16
   239f0:	3301      	adds	r3, #1
   239f2:	9406      	str	r4, [sp, #24]
}
   239f4:	b004      	add	sp, #16
   239f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
   239fa:	f7ff bfc4 	b.w	23986 <bt_gatt_attr_read.constprop.0>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   239fe:	885b      	ldrh	r3, [r3, #2]
   23a00:	f8ad 300e 	strh.w	r3, [sp, #14]
		return bt_gatt_attr_read(conn, attr, buf, len, offset,
   23a04:	2302      	movs	r3, #2
   23a06:	9300      	str	r3, [sp, #0]
   23a08:	f10d 030e 	add.w	r3, sp, #14
   23a0c:	f7ff ffbb 	bl	23986 <bt_gatt_attr_read.constprop.0>
}
   23a10:	b004      	add	sp, #16
   23a12:	bd10      	pop	{r4, pc}

00023a14 <cf_read>:
{
   23a14:	b530      	push	{r4, r5, lr}
   23a16:	b085      	sub	sp, #20
   23a18:	461d      	mov	r5, r3
	uint8_t data[1] = {};
   23a1a:	2300      	movs	r3, #0
{
   23a1c:	4614      	mov	r4, r2
	uint8_t data[1] = {};
   23a1e:	f88d 300c 	strb.w	r3, [sp, #12]
	cfg = find_cf_cfg(conn);
   23a22:	f7f7 fc8d 	bl	1b340 <find_cf_cfg>
	if (cfg) {
   23a26:	b110      	cbz	r0, 23a2e <cf_read+0x1a>
		memcpy(data, cfg->data, sizeof(data));
   23a28:	7a03      	ldrb	r3, [r0, #8]
   23a2a:	f88d 300c 	strb.w	r3, [sp, #12]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   23a2e:	2301      	movs	r3, #1
   23a30:	9300      	str	r3, [sp, #0]
   23a32:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   23a36:	ab03      	add	r3, sp, #12
   23a38:	4629      	mov	r1, r5
   23a3a:	4620      	mov	r0, r4
   23a3c:	f7ff ffa3 	bl	23986 <bt_gatt_attr_read.constprop.0>
}
   23a40:	b005      	add	sp, #20
   23a42:	bd30      	pop	{r4, r5, pc}

00023a44 <read_name>:
{
   23a44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23a48:	4614      	mov	r4, r2
   23a4a:	461d      	mov	r5, r3
   23a4c:	f8bd 7018 	ldrh.w	r7, [sp, #24]
	const char *name = bt_get_name();
   23a50:	f7f4 ff36 	bl	188c0 <bt_get_name>
   23a54:	4606      	mov	r6, r0
				 strlen(name));
   23a56:	f7e9 f88b 	bl	cb70 <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   23a5a:	b280      	uxth	r0, r0
   23a5c:	9006      	str	r0, [sp, #24]
   23a5e:	4633      	mov	r3, r6
   23a60:	463a      	mov	r2, r7
   23a62:	4629      	mov	r1, r5
   23a64:	4620      	mov	r0, r4
}
   23a66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   23a6a:	f7ff bf8c 	b.w	23986 <bt_gatt_attr_read.constprop.0>

00023a6e <read_appearance>:
{
   23a6e:	b530      	push	{r4, r5, lr}
   23a70:	b085      	sub	sp, #20
   23a72:	4614      	mov	r4, r2
   23a74:	461d      	mov	r5, r3
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   23a76:	f7fe ffd9 	bl	22a2c <bt_get_appearance>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   23a7a:	2302      	movs	r3, #2
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   23a7c:	f8ad 000e 	strh.w	r0, [sp, #14]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   23a80:	9300      	str	r3, [sp, #0]
   23a82:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   23a86:	f10d 030e 	add.w	r3, sp, #14
   23a8a:	4629      	mov	r1, r5
   23a8c:	4620      	mov	r0, r4
   23a8e:	f7ff ff7a 	bl	23986 <bt_gatt_attr_read.constprop.0>
}
   23a92:	b005      	add	sp, #20
   23a94:	bd30      	pop	{r4, r5, pc}

00023a96 <read_ppcp>:
{
   23a96:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   23a98:	4619      	mov	r1, r3
   23a9a:	4610      	mov	r0, r2
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   23a9c:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
   23aa0:	f04f 1206 	mov.w	r2, #393222	; 0x60006
   23aa4:	e9cd 2302 	strd	r2, r3, [sp, #8]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   23aa8:	2308      	movs	r3, #8
   23aaa:	9300      	str	r3, [sp, #0]
   23aac:	f8bd 2018 	ldrh.w	r2, [sp, #24]
   23ab0:	446b      	add	r3, sp
   23ab2:	f7ff ff68 	bl	23986 <bt_gatt_attr_read.constprop.0>
}
   23ab6:	b005      	add	sp, #20
   23ab8:	f85d fb04 	ldr.w	pc, [sp], #4

00023abc <z_log_msg_static_create.constprop.0>:
   23abc:	2300      	movs	r3, #0
   23abe:	f7f1 bd9f 	b.w	15600 <z_impl_z_log_msg_static_create>

00023ac2 <sc_clear>:
{
   23ac2:	b538      	push	{r3, r4, r5, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   23ac4:	f100 0588 	add.w	r5, r0, #136	; 0x88
{
   23ac8:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   23aca:	4629      	mov	r1, r5
   23acc:	7a00      	ldrb	r0, [r0, #8]
   23ace:	f7fe ffb0 	bl	22a32 <bt_addr_le_is_bonded>
   23ad2:	7a20      	ldrb	r0, [r4, #8]
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   23ad4:	4629      	mov	r1, r5
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
   23ad6:	f7f7 fc4b 	bl	1b370 <find_sc_cfg>
		if (cfg) {
   23ada:	b118      	cbz	r0, 23ae4 <sc_clear+0x22>
}
   23adc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			clear_sc_cfg(cfg);
   23ae0:	f7ff bf4c 	b.w	2397c <clear_sc_cfg>
}
   23ae4:	bd38      	pop	{r3, r4, r5, pc}

00023ae6 <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   23ae6:	2a02      	cmp	r2, #2
{
   23ae8:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   23aea:	d108      	bne.n	23afe <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   23aec:	2300      	movs	r3, #0
   23aee:	f100 0188 	add.w	r1, r0, #136	; 0x88
   23af2:	461a      	mov	r2, r3
   23af4:	7a00      	ldrb	r0, [r0, #8]
   23af6:	f7f7 fcd9 	bl	1b4ac <sc_save>
}
   23afa:	2002      	movs	r0, #2
   23afc:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   23afe:	f7ff ffe0 	bl	23ac2 <sc_clear>
   23b02:	e7fa      	b.n	23afa <sc_ccc_cfg_write+0x14>

00023b04 <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   23b04:	2301      	movs	r3, #1
   23b06:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   23b08:	f3bf 8f5b 	dmb	ish
   23b0c:	e850 2f00 	ldrex	r2, [r0]
   23b10:	431a      	orrs	r2, r3
   23b12:	e840 2100 	strex	r1, r2, [r0]
   23b16:	2900      	cmp	r1, #0
   23b18:	d1f8      	bne.n	23b0c <atomic_set_bit+0x8>
   23b1a:	f3bf 8f5b 	dmb	ish
}
   23b1e:	4770      	bx	lr

00023b20 <sc_restore_rsp>:
{
   23b20:	b538      	push	{r3, r4, r5, lr}
   23b22:	4604      	mov	r4, r0
   23b24:	4615      	mov	r5, r2
	if (bt_att_fixed_chan_only(conn)) {
   23b26:	f7ff fe53 	bl	237d0 <bt_att_fixed_chan_only>
   23b2a:	b150      	cbz	r0, 23b42 <sc_restore_rsp+0x22>
		cfg = find_cf_cfg(conn);
   23b2c:	4620      	mov	r0, r4
   23b2e:	f7f7 fc07 	bl	1b340 <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   23b32:	b130      	cbz	r0, 23b42 <sc_restore_rsp+0x22>
   23b34:	7a03      	ldrb	r3, [r0, #8]
   23b36:	07db      	lsls	r3, r3, #31
   23b38:	d503      	bpl.n	23b42 <sc_restore_rsp+0x22>
			atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   23b3a:	2100      	movs	r1, #0
   23b3c:	300c      	adds	r0, #12
   23b3e:	f7ff ffe1 	bl	23b04 <atomic_set_bit>
	if (!err && IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
   23b42:	b935      	cbnz	r5, 23b52 <sc_restore_rsp+0x32>
		struct gatt_sc_cfg *sc_cfg = find_sc_cfg(conn->id, &conn->le.dst);
   23b44:	7a20      	ldrb	r0, [r4, #8]
   23b46:	f104 0188 	add.w	r1, r4, #136	; 0x88
   23b4a:	f7f7 fc11 	bl	1b370 <find_sc_cfg>
		if (sc_cfg) {
   23b4e:	b100      	cbz	r0, 23b52 <sc_restore_rsp+0x32>
__ssp_bos_icheck3(memset, void *, int)
   23b50:	6085      	str	r5, [r0, #8]
}
   23b52:	bd38      	pop	{r3, r4, r5, pc}

00023b54 <bt_gatt_attr_value_handle>:
{
   23b54:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   23b56:	4604      	mov	r4, r0
   23b58:	b910      	cbnz	r0, 23b60 <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   23b5a:	2000      	movs	r0, #0
}
   23b5c:	b002      	add	sp, #8
   23b5e:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   23b60:	2300      	movs	r3, #0
   23b62:	f88d 3004 	strb.w	r3, [sp, #4]
   23b66:	6800      	ldr	r0, [r0, #0]
   23b68:	f642 0303 	movw	r3, #10243	; 0x2803
   23b6c:	a901      	add	r1, sp, #4
   23b6e:	f8ad 3006 	strh.w	r3, [sp, #6]
   23b72:	f7fe fe22 	bl	227ba <bt_uuid_cmp>
   23b76:	2800      	cmp	r0, #0
   23b78:	d1ef      	bne.n	23b5a <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   23b7a:	68e3      	ldr	r3, [r4, #12]
   23b7c:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   23b7e:	2800      	cmp	r0, #0
   23b80:	d1ec      	bne.n	23b5c <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   23b82:	4620      	mov	r0, r4
   23b84:	f7f7 fdf2 	bl	1b76c <bt_gatt_attr_get_handle>
   23b88:	3001      	adds	r0, #1
   23b8a:	b280      	uxth	r0, r0
	return handle;
   23b8c:	e7e6      	b.n	23b5c <bt_gatt_attr_value_handle+0x8>

00023b8e <bt_gatt_attr_read_chrc>:
{
   23b8e:	b570      	push	{r4, r5, r6, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   23b90:	68cc      	ldr	r4, [r1, #12]
{
   23b92:	b088      	sub	sp, #32
   23b94:	4608      	mov	r0, r1
   23b96:	461e      	mov	r6, r3
	pdu.properties = chrc->properties;
   23b98:	79a3      	ldrb	r3, [r4, #6]
   23b9a:	f88d 300c 	strb.w	r3, [sp, #12]
{
   23b9e:	4615      	mov	r5, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   23ba0:	f7ff ffd8 	bl	23b54 <bt_gatt_attr_value_handle>
   23ba4:	f8ad 000d 	strh.w	r0, [sp, #13]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   23ba8:	6824      	ldr	r4, [r4, #0]
   23baa:	7823      	ldrb	r3, [r4, #0]
   23bac:	b96b      	cbnz	r3, 23bca <bt_gatt_attr_read_chrc+0x3c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   23bae:	8863      	ldrh	r3, [r4, #2]
   23bb0:	f8ad 300f 	strh.w	r3, [sp, #15]
		value_len += 2U;
   23bb4:	2305      	movs	r3, #5
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   23bb6:	9300      	str	r3, [sp, #0]
   23bb8:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
   23bbc:	ab03      	add	r3, sp, #12
   23bbe:	4631      	mov	r1, r6
   23bc0:	4628      	mov	r0, r5
   23bc2:	f7ff fee0 	bl	23986 <bt_gatt_attr_read.constprop.0>
}
   23bc6:	b008      	add	sp, #32
   23bc8:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   23bca:	1c63      	adds	r3, r4, #1
   23bcc:	f10d 020f 	add.w	r2, sp, #15
   23bd0:	3411      	adds	r4, #17
   23bd2:	f853 1b04 	ldr.w	r1, [r3], #4
   23bd6:	f842 1b04 	str.w	r1, [r2], #4
   23bda:	42a3      	cmp	r3, r4
   23bdc:	d1f9      	bne.n	23bd2 <bt_gatt_attr_read_chrc+0x44>
		value_len += 16U;
   23bde:	2313      	movs	r3, #19
   23be0:	e7e9      	b.n	23bb6 <bt_gatt_attr_read_chrc+0x28>

00023be2 <bt_gatt_foreach_attr>:
{
   23be2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   23be4:	e9cd 2301 	strd	r2, r3, [sp, #4]
   23be8:	2300      	movs	r3, #0
   23bea:	9300      	str	r3, [sp, #0]
   23bec:	461a      	mov	r2, r3
   23bee:	f7f7 fded 	bl	1b7cc <bt_gatt_foreach_attr_type>
}
   23bf2:	b005      	add	sp, #20
   23bf4:	f85d fb04 	ldr.w	pc, [sp], #4

00023bf8 <db_hash_process>:
	db_hash_gen(true);
   23bf8:	f7f7 be42 	b.w	1b880 <db_hash_gen.constprop.0>

00023bfc <bt_gatt_check_perm>:
{
   23bfc:	b510      	push	{r4, lr}
	if ((mask & BT_GATT_PERM_READ) &&
   23bfe:	07d4      	lsls	r4, r2, #31
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   23c00:	8a4b      	ldrh	r3, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   23c02:	d504      	bpl.n	23c0e <bt_gatt_check_perm+0x12>
   23c04:	f013 0f95 	tst.w	r3, #149	; 0x95
   23c08:	d01d      	beq.n	23c46 <bt_gatt_check_perm+0x4a>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   23c0a:	684c      	ldr	r4, [r1, #4]
   23c0c:	b1dc      	cbz	r4, 23c46 <bt_gatt_check_perm+0x4a>
	if ((mask & BT_GATT_PERM_WRITE) &&
   23c0e:	0794      	lsls	r4, r2, #30
   23c10:	d504      	bpl.n	23c1c <bt_gatt_check_perm+0x20>
   23c12:	f413 7f95 	tst.w	r3, #298	; 0x12a
   23c16:	d018      	beq.n	23c4a <bt_gatt_check_perm+0x4e>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   23c18:	6889      	ldr	r1, [r1, #8]
   23c1a:	b1b1      	cbz	r1, 23c4a <bt_gatt_check_perm+0x4e>
	mask &= attr->perm;
   23c1c:	ea02 0403 	and.w	r4, r2, r3
	if (mask & BT_GATT_PERM_LESC_MASK) {
   23c20:	f414 7fc0 	tst.w	r4, #384	; 0x180
   23c24:	d001      	beq.n	23c2a <bt_gatt_check_perm+0x2e>
			return BT_ATT_ERR_AUTHENTICATION;
   23c26:	2005      	movs	r0, #5
}
   23c28:	bd10      	pop	{r4, pc}
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   23c2a:	f014 0f30 	tst.w	r4, #48	; 0x30
   23c2e:	d105      	bne.n	23c3c <bt_gatt_check_perm+0x40>
	return 0;
   23c30:	f014 0f0c 	tst.w	r4, #12
   23c34:	bf14      	ite	ne
   23c36:	200f      	movne	r0, #15
   23c38:	2000      	moveq	r0, #0
   23c3a:	e7f5      	b.n	23c28 <bt_gatt_check_perm+0x2c>
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   23c3c:	f7ff f8c2 	bl	22dc4 <bt_conn_get_security>
   23c40:	2802      	cmp	r0, #2
   23c42:	d8f5      	bhi.n	23c30 <bt_gatt_check_perm+0x34>
   23c44:	e7ef      	b.n	23c26 <bt_gatt_check_perm+0x2a>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   23c46:	2002      	movs	r0, #2
   23c48:	e7ee      	b.n	23c28 <bt_gatt_check_perm+0x2c>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   23c4a:	2003      	movs	r0, #3
   23c4c:	e7ec      	b.n	23c28 <bt_gatt_check_perm+0x2c>

00023c4e <bt_gatt_is_subscribed>:
{
   23c4e:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   23c52:	7a83      	ldrb	r3, [r0, #10]
   23c54:	2b07      	cmp	r3, #7
{
   23c56:	4605      	mov	r5, r0
   23c58:	460c      	mov	r4, r1
   23c5a:	4617      	mov	r7, r2
	if (conn->state != BT_CONN_CONNECTED) {
   23c5c:	d110      	bne.n	23c80 <bt_gatt_is_subscribed+0x32>
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
   23c5e:	2300      	movs	r3, #0
   23c60:	f88d 300c 	strb.w	r3, [sp, #12]
   23c64:	6820      	ldr	r0, [r4, #0]
   23c66:	f642 0303 	movw	r3, #10243	; 0x2803
   23c6a:	a903      	add	r1, sp, #12
   23c6c:	f8ad 300e 	strh.w	r3, [sp, #14]
   23c70:	f7fe fda3 	bl	227ba <bt_uuid_cmp>
   23c74:	b960      	cbnz	r0, 23c90 <bt_gatt_is_subscribed+0x42>
		if (!(chrc->properties &
   23c76:	68e3      	ldr	r3, [r4, #12]
   23c78:	799b      	ldrb	r3, [r3, #6]
   23c7a:	f013 0f30 	tst.w	r3, #48	; 0x30
   23c7e:	d103      	bne.n	23c88 <bt_gatt_is_subscribed+0x3a>
		return false;
   23c80:	2000      	movs	r0, #0
}
   23c82:	b004      	add	sp, #16
   23c84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		attr = bt_gatt_attr_next(attr);
   23c88:	4620      	mov	r0, r4
   23c8a:	f7f7 fe81 	bl	1b990 <bt_gatt_attr_next>
   23c8e:	4604      	mov	r4, r0
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   23c90:	2300      	movs	r3, #0
   23c92:	6820      	ldr	r0, [r4, #0]
   23c94:	f88d 300c 	strb.w	r3, [sp, #12]
   23c98:	a903      	add	r1, sp, #12
   23c9a:	f642 1302 	movw	r3, #10498	; 0x2902
   23c9e:	f8ad 300e 	strh.w	r3, [sp, #14]
   23ca2:	f7fe fd8a 	bl	227ba <bt_uuid_cmp>
   23ca6:	b118      	cbz	r0, 23cb0 <bt_gatt_is_subscribed+0x62>
		attr = bt_gatt_attr_next(attr);
   23ca8:	4620      	mov	r0, r4
   23caa:	f7f7 fe71 	bl	1b990 <bt_gatt_attr_next>
   23cae:	4604      	mov	r4, r0
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   23cb0:	2600      	movs	r6, #0
   23cb2:	f642 1802 	movw	r8, #10498	; 0x2902
   23cb6:	6820      	ldr	r0, [r4, #0]
   23cb8:	f88d 6000 	strb.w	r6, [sp]
   23cbc:	4669      	mov	r1, sp
   23cbe:	f8ad 8002 	strh.w	r8, [sp, #2]
   23cc2:	f7fe fd7a 	bl	227ba <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   23cc6:	b9d8      	cbnz	r0, 23d00 <bt_gatt_is_subscribed+0xb2>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   23cc8:	2300      	movs	r3, #0
   23cca:	6820      	ldr	r0, [r4, #0]
   23ccc:	f88d 300c 	strb.w	r3, [sp, #12]
   23cd0:	a903      	add	r1, sp, #12
   23cd2:	f642 1302 	movw	r3, #10498	; 0x2902
   23cd6:	f8ad 300e 	strh.w	r3, [sp, #14]
   23cda:	f7fe fd6e 	bl	227ba <bt_uuid_cmp>
   23cde:	2800      	cmp	r0, #0
   23ce0:	d1ce      	bne.n	23c80 <bt_gatt_is_subscribed+0x32>
	ccc = attr->user_data;
   23ce2:	68e4      	ldr	r4, [r4, #12]
		if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer) &&
   23ce4:	4622      	mov	r2, r4
   23ce6:	4628      	mov	r0, r5
   23ce8:	f812 1b01 	ldrb.w	r1, [r2], #1
   23cec:	f7ff f86c 	bl	22dc8 <bt_conn_is_peer_addr_le>
   23cf0:	2800      	cmp	r0, #0
   23cf2:	d0c5      	beq.n	23c80 <bt_gatt_is_subscribed+0x32>
   23cf4:	8923      	ldrh	r3, [r4, #8]
   23cf6:	421f      	tst	r7, r3
   23cf8:	bf14      	ite	ne
   23cfa:	2001      	movne	r0, #1
   23cfc:	2000      	moveq	r0, #0
   23cfe:	e7c0      	b.n	23c82 <bt_gatt_is_subscribed+0x34>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   23d00:	6820      	ldr	r0, [r4, #0]
   23d02:	f88d 6004 	strb.w	r6, [sp, #4]
   23d06:	f642 0303 	movw	r3, #10243	; 0x2803
   23d0a:	a901      	add	r1, sp, #4
   23d0c:	f8ad 3006 	strh.w	r3, [sp, #6]
   23d10:	f7fe fd53 	bl	227ba <bt_uuid_cmp>
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   23d14:	2800      	cmp	r0, #0
   23d16:	d0d7      	beq.n	23cc8 <bt_gatt_is_subscribed+0x7a>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   23d18:	6820      	ldr	r0, [r4, #0]
   23d1a:	f88d 6008 	strb.w	r6, [sp, #8]
   23d1e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   23d22:	a902      	add	r1, sp, #8
   23d24:	f8ad 300a 	strh.w	r3, [sp, #10]
   23d28:	f7fe fd47 	bl	227ba <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   23d2c:	2800      	cmp	r0, #0
   23d2e:	d0cb      	beq.n	23cc8 <bt_gatt_is_subscribed+0x7a>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   23d30:	6820      	ldr	r0, [r4, #0]
   23d32:	f88d 600c 	strb.w	r6, [sp, #12]
   23d36:	f642 0301 	movw	r3, #10241	; 0x2801
   23d3a:	a903      	add	r1, sp, #12
   23d3c:	f8ad 300e 	strh.w	r3, [sp, #14]
   23d40:	f7fe fd3b 	bl	227ba <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   23d44:	2800      	cmp	r0, #0
   23d46:	d0bf      	beq.n	23cc8 <bt_gatt_is_subscribed+0x7a>
		attr = bt_gatt_attr_next(attr);
   23d48:	4620      	mov	r0, r4
   23d4a:	f7f7 fe21 	bl	1b990 <bt_gatt_attr_next>
		if (!attr) {
   23d4e:	4604      	mov	r4, r0
   23d50:	2800      	cmp	r0, #0
   23d52:	d1b0      	bne.n	23cb6 <bt_gatt_is_subscribed+0x68>
   23d54:	e794      	b.n	23c80 <bt_gatt_is_subscribed+0x32>

00023d56 <bt_gatt_change_aware>:
{
   23d56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23d58:	4606      	mov	r6, r0
   23d5a:	460f      	mov	r7, r1
	cfg = find_cf_cfg(conn);
   23d5c:	f7f7 faf0 	bl	1b340 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   23d60:	b318      	cbz	r0, 23daa <bt_gatt_change_aware+0x54>
   23d62:	7a03      	ldrb	r3, [r0, #8]
   23d64:	07db      	lsls	r3, r3, #31
   23d66:	d520      	bpl.n	23daa <bt_gatt_change_aware+0x54>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   23d68:	f3bf 8f5b 	dmb	ish
   23d6c:	68c5      	ldr	r5, [r0, #12]
   23d6e:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   23d72:	f015 0501 	ands.w	r5, r5, #1
   23d76:	f100 040c 	add.w	r4, r0, #12
   23d7a:	d116      	bne.n	23daa <bt_gatt_change_aware+0x54>
	if (!req) {
   23d7c:	b1b7      	cbz	r7, 23dac <bt_gatt_change_aware+0x56>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   23d7e:	f3bf 8f5b 	dmb	ish
   23d82:	e854 1f00 	ldrex	r1, [r4]
   23d86:	f021 0302 	bic.w	r3, r1, #2
   23d8a:	e844 3200 	strex	r2, r3, [r4]
   23d8e:	2a00      	cmp	r2, #0
   23d90:	d1f7      	bne.n	23d82 <bt_gatt_change_aware+0x2c>
   23d92:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   23d96:	f011 0702 	ands.w	r7, r1, #2
		bt_att_clear_out_of_sync_sent(conn);
   23d9a:	4630      	mov	r0, r6
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   23d9c:	d008      	beq.n	23db0 <bt_gatt_change_aware+0x5a>
		bt_att_clear_out_of_sync_sent(conn);
   23d9e:	f7ff fd19 	bl	237d4 <bt_att_clear_out_of_sync_sent>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   23da2:	4629      	mov	r1, r5
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   23da4:	4620      	mov	r0, r4
   23da6:	f7ff fead 	bl	23b04 <atomic_set_bit>
		return true;
   23daa:	2501      	movs	r5, #1
}
   23dac:	4628      	mov	r0, r5
   23dae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (bt_att_fixed_chan_only(conn) && bt_att_out_of_sync_sent_on_fixed(conn)) {
   23db0:	f7ff fd0e 	bl	237d0 <bt_att_fixed_chan_only>
   23db4:	2800      	cmp	r0, #0
   23db6:	d0f9      	beq.n	23dac <bt_gatt_change_aware+0x56>
   23db8:	4630      	mov	r0, r6
   23dba:	f7ff fd24 	bl	23806 <bt_att_out_of_sync_sent_on_fixed>
   23dbe:	2800      	cmp	r0, #0
   23dc0:	d0f4      	beq.n	23dac <bt_gatt_change_aware+0x56>
   23dc2:	f3bf 8f5b 	dmb	ish
   23dc6:	e854 3f00 	ldrex	r3, [r4]
   23dca:	f023 0302 	bic.w	r3, r3, #2
   23dce:	e844 3200 	strex	r2, r3, [r4]
   23dd2:	2a00      	cmp	r2, #0
   23dd4:	d1f7      	bne.n	23dc6 <bt_gatt_change_aware+0x70>
   23dd6:	f3bf 8f5b 	dmb	ish
		bt_att_clear_out_of_sync_sent(conn);
   23dda:	4630      	mov	r0, r6
   23ddc:	f7ff fcfa 	bl	237d4 <bt_att_clear_out_of_sync_sent>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   23de0:	4639      	mov	r1, r7
   23de2:	e7df      	b.n	23da4 <bt_gatt_change_aware+0x4e>

00023de4 <bt_smp_recv>:
{
   23de4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	buf = bt_l2cap_create_pdu(NULL, 0);
   23de6:	2100      	movs	r1, #0
   23de8:	f04f 32ff 	mov.w	r2, #4294967295
   23dec:	f04f 33ff 	mov.w	r3, #4294967295
	struct bt_conn *conn = chan->conn;
   23df0:	6807      	ldr	r7, [r0, #0]
	buf = bt_l2cap_create_pdu(NULL, 0);
   23df2:	4608      	mov	r0, r1
   23df4:	f7ff f87d 	bl	22ef2 <bt_l2cap_create_pdu_timeout>
   23df8:	f100 060c 	add.w	r6, r0, #12
   23dfc:	4604      	mov	r4, r0
   23dfe:	2101      	movs	r1, #1
   23e00:	4630      	mov	r0, r6
   23e02:	f000 f87b 	bl	23efc <net_buf_simple_add>
	hdr->code = BT_SMP_CMD_PAIRING_FAIL;
   23e06:	2505      	movs	r5, #5
   23e08:	7005      	strb	r5, [r0, #0]
   23e0a:	2101      	movs	r1, #1
   23e0c:	4630      	mov	r0, r6
   23e0e:	f000 f875 	bl	23efc <net_buf_simple_add>
   23e12:	2300      	movs	r3, #0
	rsp->reason = BT_SMP_ERR_PAIRING_NOTSUPP;
   23e14:	7005      	strb	r5, [r0, #0]
   23e16:	4622      	mov	r2, r4
   23e18:	9300      	str	r3, [sp, #0]
   23e1a:	2106      	movs	r1, #6
   23e1c:	4638      	mov	r0, r7
   23e1e:	f7ff f86b 	bl	22ef8 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, BT_L2CAP_CID_SMP, buf)) {
   23e22:	b110      	cbz	r0, 23e2a <bt_smp_recv+0x46>
		net_buf_unref(buf);
   23e24:	4620      	mov	r0, r4
   23e26:	f7f8 fa05 	bl	1c234 <net_buf_unref>
}
   23e2a:	2000      	movs	r0, #0
   23e2c:	b003      	add	sp, #12
   23e2e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00023e30 <bt_smp_sign>:
int bt_smp_sign(struct bt_conn *conn, struct net_buf *buf)
   23e30:	f06f 0085 	mvn.w	r0, #133	; 0x85
   23e34:	4770      	bx	lr

00023e36 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_fixed_chan, BT_L2CAP_CID_SMP, bt_smp_accept, NULL);

int bt_smp_init(void)
{
	return 0;
}
   23e36:	2000      	movs	r0, #0
   23e38:	4770      	bx	lr

00023e3a <fixed_data_unref>:
}
   23e3a:	4770      	bx	lr

00023e3c <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   23e3c:	6a41      	ldr	r1, [r0, #36]	; 0x24
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   23e3e:	6849      	ldr	r1, [r1, #4]
   23e40:	6809      	ldr	r1, [r1, #0]
   23e42:	f7f8 b965 	b.w	1c110 <net_buf_alloc_len>

00023e46 <net_buf_get>:
	return z_impl_k_queue_get(queue, timeout);
   23e46:	f7fb bd4b 	b.w	1f8e0 <z_impl_k_queue_get>

00023e4a <net_buf_simple_reserve>:
	buf->data = buf->__buf + reserve;
   23e4a:	6883      	ldr	r3, [r0, #8]
   23e4c:	440b      	add	r3, r1
   23e4e:	6003      	str	r3, [r0, #0]
}
   23e50:	4770      	bx	lr

00023e52 <net_buf_slist_put>:
	__asm__ volatile(
   23e52:	f04f 0340 	mov.w	r3, #64	; 0x40
   23e56:	f3ef 8211 	mrs	r2, BASEPRI
   23e5a:	f383 8812 	msr	BASEPRI_MAX, r3
   23e5e:	f3bf 8f6f 	isb	sy
	parent->next = child;
   23e62:	2300      	movs	r3, #0
   23e64:	600b      	str	r3, [r1, #0]
	return list->tail;
   23e66:	6843      	ldr	r3, [r0, #4]
Z_GENLIST_APPEND(slist, snode)
   23e68:	b933      	cbnz	r3, 23e78 <net_buf_slist_put+0x26>
	list->head = node;
   23e6a:	e9c0 1100 	strd	r1, r1, [r0]
	__asm__ volatile(
   23e6e:	f382 8811 	msr	BASEPRI, r2
   23e72:	f3bf 8f6f 	isb	sy
}
   23e76:	4770      	bx	lr
	parent->next = child;
   23e78:	6019      	str	r1, [r3, #0]
	list->tail = node;
   23e7a:	6041      	str	r1, [r0, #4]
}
   23e7c:	e7f7      	b.n	23e6e <net_buf_slist_put+0x1c>

00023e7e <net_buf_slist_get>:
{
   23e7e:	b510      	push	{r4, lr}
   23e80:	4603      	mov	r3, r0
	__asm__ volatile(
   23e82:	f04f 0240 	mov.w	r2, #64	; 0x40
   23e86:	f3ef 8111 	mrs	r1, BASEPRI
   23e8a:	f382 8812 	msr	BASEPRI_MAX, r2
   23e8e:	f3bf 8f6f 	isb	sy
	return list->head;
   23e92:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   23e94:	b128      	cbz	r0, 23ea2 <net_buf_slist_get+0x24>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   23e96:	685c      	ldr	r4, [r3, #4]
	return node->next;
   23e98:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   23e9a:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   23e9c:	42a0      	cmp	r0, r4
	list->tail = node;
   23e9e:	bf08      	it	eq
   23ea0:	605a      	streq	r2, [r3, #4]
	__asm__ volatile(
   23ea2:	f381 8811 	msr	BASEPRI, r1
   23ea6:	f3bf 8f6f 	isb	sy
}
   23eaa:	bd10      	pop	{r4, pc}

00023eac <net_buf_put>:
	k_fifo_put(fifo, buf);
   23eac:	f000 bcdc 	b.w	24868 <k_queue_append>

00023eb0 <net_buf_ref>:
{
	__ASSERT_NO_MSG(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   23eb0:	7a02      	ldrb	r2, [r0, #8]
   23eb2:	3201      	adds	r2, #1
   23eb4:	7202      	strb	r2, [r0, #8]
	return buf;
}
   23eb6:	4770      	bx	lr

00023eb8 <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   23eb8:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf);

	while (buf->frags) {
   23eba:	4618      	mov	r0, r3
   23ebc:	685b      	ldr	r3, [r3, #4]
   23ebe:	2b00      	cmp	r3, #0
   23ec0:	d1fb      	bne.n	23eba <net_buf_frag_last+0x2>
		buf = buf->frags;
	}

	return buf;
}
   23ec2:	4770      	bx	lr

00023ec4 <net_buf_frag_insert>:
void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
	__ASSERT_NO_MSG(parent);
	__ASSERT_NO_MSG(frag);

	if (parent->frags) {
   23ec4:	6842      	ldr	r2, [r0, #4]
{
   23ec6:	b510      	push	{r4, lr}
	if (parent->frags) {
   23ec8:	b12a      	cbz	r2, 23ed6 <net_buf_frag_insert+0x12>
   23eca:	460b      	mov	r3, r1
	while (buf->frags) {
   23ecc:	461c      	mov	r4, r3
   23ece:	685b      	ldr	r3, [r3, #4]
   23ed0:	2b00      	cmp	r3, #0
   23ed2:	d1fb      	bne.n	23ecc <net_buf_frag_insert+0x8>
		net_buf_frag_last(frag)->frags = parent->frags;
   23ed4:	6062      	str	r2, [r4, #4]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   23ed6:	6041      	str	r1, [r0, #4]
}
   23ed8:	bd10      	pop	{r4, pc}

00023eda <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   23eda:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(frag);

	if (!head) {
   23edc:	4604      	mov	r4, r0
   23ede:	b920      	cbnz	r0, 23eea <net_buf_frag_add+0x10>
	buf->ref++;
   23ee0:	7a0b      	ldrb	r3, [r1, #8]
   23ee2:	3301      	adds	r3, #1
   23ee4:	720b      	strb	r3, [r1, #8]
		return net_buf_ref(frag);
   23ee6:	4608      	mov	r0, r1
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   23ee8:	bd10      	pop	{r4, pc}
   23eea:	4603      	mov	r3, r0
	while (buf->frags) {
   23eec:	4618      	mov	r0, r3
   23eee:	685b      	ldr	r3, [r3, #4]
   23ef0:	2b00      	cmp	r3, #0
   23ef2:	d1fb      	bne.n	23eec <net_buf_frag_add+0x12>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   23ef4:	f7ff ffe6 	bl	23ec4 <net_buf_frag_insert>
   23ef8:	4620      	mov	r0, r4
   23efa:	e7f5      	b.n	23ee8 <net_buf_frag_add+0xe>

00023efc <net_buf_simple_add>:
	return buf->data + buf->len;
   23efc:	8883      	ldrh	r3, [r0, #4]
   23efe:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   23f00:	4419      	add	r1, r3
   23f02:	8081      	strh	r1, [r0, #4]
	return tail;
}
   23f04:	18d0      	adds	r0, r2, r3
   23f06:	4770      	bx	lr

00023f08 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   23f08:	b430      	push	{r4, r5}
   23f0a:	8884      	ldrh	r4, [r0, #4]
   23f0c:	6805      	ldr	r5, [r0, #0]
	buf->len += len;
   23f0e:	18a3      	adds	r3, r4, r2
   23f10:	8083      	strh	r3, [r0, #4]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   23f12:	1928      	adds	r0, r5, r4
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
}
   23f14:	bc30      	pop	{r4, r5}
   23f16:	f001 b956 	b.w	251c6 <memcpy>

00023f1a <net_buf_simple_add_u8>:

uint8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, uint8_t val)
{
   23f1a:	b510      	push	{r4, lr}
   23f1c:	8883      	ldrh	r3, [r0, #4]
   23f1e:	6802      	ldr	r2, [r0, #0]
	buf->len += len;
   23f20:	1c5c      	adds	r4, r3, #1
   23f22:	8084      	strh	r4, [r0, #4]
	uint8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   23f24:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   23f26:	18d0      	adds	r0, r2, r3
   23f28:	bd10      	pop	{r4, pc}

00023f2a <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   23f2a:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   23f2c:	6800      	ldr	r0, [r0, #0]
	buf->len += len;
   23f2e:	889a      	ldrh	r2, [r3, #4]
	buf->data -= len;
   23f30:	1a40      	subs	r0, r0, r1
	buf->len += len;
   23f32:	4411      	add	r1, r2
	buf->data -= len;
   23f34:	6018      	str	r0, [r3, #0]
	buf->len += len;
   23f36:	8099      	strh	r1, [r3, #4]
	return buf->data;
}
   23f38:	4770      	bx	lr

00023f3a <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   23f3a:	8882      	ldrh	r2, [r0, #4]
   23f3c:	1a52      	subs	r2, r2, r1
{
   23f3e:	4603      	mov	r3, r0
	buf->len -= len;
   23f40:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   23f42:	6800      	ldr	r0, [r0, #0]
   23f44:	4408      	add	r0, r1
   23f46:	6018      	str	r0, [r3, #0]
}
   23f48:	4770      	bx	lr

00023f4a <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   23f4a:	4603      	mov	r3, r0
	void *data = buf->data;
   23f4c:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   23f4e:	889a      	ldrh	r2, [r3, #4]
   23f50:	1a52      	subs	r2, r2, r1
	buf->data += len;
   23f52:	4401      	add	r1, r0
	buf->len -= len;
   23f54:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   23f56:	6019      	str	r1, [r3, #0]

	return data;
}
   23f58:	4770      	bx	lr

00023f5a <net_buf_simple_pull_le16>:

	return val;
}

uint16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   23f5a:	b510      	push	{r4, lr}
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
   23f5c:	6803      	ldr	r3, [r0, #0]
   23f5e:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   23f60:	2102      	movs	r1, #2
   23f62:	f7ff ffea 	bl	23f3a <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   23f66:	4620      	mov	r0, r4
   23f68:	bd10      	pop	{r4, pc}

00023f6a <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   23f6a:	6802      	ldr	r2, [r0, #0]
   23f6c:	6880      	ldr	r0, [r0, #8]
}
   23f6e:	1a10      	subs	r0, r2, r0
   23f70:	4770      	bx	lr

00023f72 <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   23f72:	8883      	ldrh	r3, [r0, #4]
   23f74:	88c2      	ldrh	r2, [r0, #6]
	return buf->data - buf->__buf;
   23f76:	6881      	ldr	r1, [r0, #8]
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   23f78:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   23f7a:	6803      	ldr	r3, [r0, #0]
   23f7c:	1a5b      	subs	r3, r3, r1
}
   23f7e:	1ad0      	subs	r0, r2, r3
   23f80:	4770      	bx	lr

00023f82 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   23f82:	6903      	ldr	r3, [r0, #16]
   23f84:	b2c9      	uxtb	r1, r1
   23f86:	220c      	movs	r2, #12
   23f88:	fb01 3302 	mla	r3, r1, r2, r3
   23f8c:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
   23f8e:	f000 0007 	and.w	r0, r0, #7
   23f92:	4770      	bx	lr

00023f94 <set_on_state>:
	__asm__ volatile(
   23f94:	f04f 0340 	mov.w	r3, #64	; 0x40
   23f98:	f3ef 8211 	mrs	r2, BASEPRI
   23f9c:	f383 8812 	msr	BASEPRI_MAX, r3
   23fa0:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   23fa4:	6803      	ldr	r3, [r0, #0]
   23fa6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   23faa:	f043 0302 	orr.w	r3, r3, #2
   23fae:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   23fb0:	f382 8811 	msr	BASEPRI, r2
   23fb4:	f3bf 8f6f 	isb	sy
}
   23fb8:	4770      	bx	lr

00023fba <stop>:
{
   23fba:	b570      	push	{r4, r5, r6, lr}
   23fbc:	b2c9      	uxtb	r1, r1
	struct nrf_clock_control_data *data = dev->data;
   23fbe:	6903      	ldr	r3, [r0, #16]
	__asm__ volatile(
   23fc0:	f04f 0440 	mov.w	r4, #64	; 0x40
   23fc4:	f3ef 8511 	mrs	r5, BASEPRI
   23fc8:	f384 8812 	msr	BASEPRI_MAX, r4
   23fcc:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   23fd0:	260c      	movs	r6, #12
   23fd2:	fb06 3401 	mla	r4, r6, r1, r3
   23fd6:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   23fd8:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
   23fdc:	d008      	beq.n	23ff0 <stop+0x36>
   23fde:	42a2      	cmp	r2, r4
   23fe0:	d006      	beq.n	23ff0 <stop+0x36>
	__asm__ volatile(
   23fe2:	f385 8811 	msr	BASEPRI, r5
   23fe6:	f3bf 8f6f 	isb	sy
		err = -EPERM;
   23fea:	f04f 30ff 	mov.w	r0, #4294967295
}
   23fee:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
   23ff0:	4371      	muls	r1, r6
   23ff2:	440b      	add	r3, r1
   23ff4:	2201      	movs	r2, #1
   23ff6:	641a      	str	r2, [r3, #64]	; 0x40
   23ff8:	f385 8811 	msr	BASEPRI, r5
   23ffc:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
   24000:	6843      	ldr	r3, [r0, #4]
   24002:	440b      	add	r3, r1
   24004:	685b      	ldr	r3, [r3, #4]
   24006:	4798      	blx	r3
	return 0;
   24008:	2000      	movs	r0, #0
   2400a:	e7f0      	b.n	23fee <stop+0x34>

0002400c <api_stop>:
	return stop(dev, subsys, CTX_API);
   2400c:	2280      	movs	r2, #128	; 0x80
   2400e:	f7ff bfd4 	b.w	23fba <stop>

00024012 <async_start>:
{
   24012:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24014:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   24016:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
   24018:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   2401a:	f04f 0540 	mov.w	r5, #64	; 0x40
   2401e:	f3ef 8611 	mrs	r6, BASEPRI
   24022:	f385 8812 	msr	BASEPRI_MAX, r5
   24026:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   2402a:	250c      	movs	r5, #12
   2402c:	4369      	muls	r1, r5
   2402e:	440c      	add	r4, r1
   24030:	6c25      	ldr	r5, [r4, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   24032:	f005 0c07 	and.w	ip, r5, #7
   24036:	f1bc 0f01 	cmp.w	ip, #1
   2403a:	d10b      	bne.n	24054 <async_start+0x42>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   2403c:	6427      	str	r7, [r4, #64]	; 0x40
	__asm__ volatile(
   2403e:	f386 8811 	msr	BASEPRI, r6
   24042:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
   24046:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   2404a:	6843      	ldr	r3, [r0, #4]
   2404c:	585b      	ldr	r3, [r3, r1]
   2404e:	4798      	blx	r3
	return 0;
   24050:	2000      	movs	r0, #0
}
   24052:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   24054:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
   24058:	42af      	cmp	r7, r5
   2405a:	f386 8811 	msr	BASEPRI, r6
   2405e:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
   24062:	bf0c      	ite	eq
   24064:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
   24068:	f04f 30ff 	movne.w	r0, #4294967295
   2406c:	e7f1      	b.n	24052 <async_start+0x40>

0002406e <api_start>:
{
   2406e:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   24070:	2480      	movs	r4, #128	; 0x80
   24072:	9400      	str	r4, [sp, #0]
   24074:	f7ff ffcd 	bl	24012 <async_start>
}
   24078:	b002      	add	sp, #8
   2407a:	bd10      	pop	{r4, pc}

0002407c <onoff_started_callback>:
{
   2407c:	b410      	push	{r4}
	return &data->mgr[type];
   2407e:	6900      	ldr	r0, [r0, #16]
   24080:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   24082:	241c      	movs	r4, #28
   24084:	fb03 0004 	mla	r0, r3, r4, r0
   24088:	2100      	movs	r1, #0
}
   2408a:	f85d 4b04 	ldr.w	r4, [sp], #4
	notify(mgr, 0);
   2408e:	4710      	bx	r2

00024090 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   24090:	2000      	movs	r0, #0
   24092:	f7fa b8c7 	b.w	1e224 <nrfx_clock_start>

00024096 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   24096:	2000      	movs	r0, #0
   24098:	f000 b92b 	b.w	242f2 <nrfx_clock_stop>

0002409c <blocking_start_callback>:
{
   2409c:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   2409e:	f7fb bc53 	b.w	1f948 <z_impl_k_sem_give>

000240a2 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   240a2:	6843      	ldr	r3, [r0, #4]
   240a4:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   240a6:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   240aa:	600b      	str	r3, [r1, #0]
}
   240ac:	2000      	movs	r0, #0
   240ae:	4770      	bx	lr

000240b0 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   240b0:	6843      	ldr	r3, [r0, #4]
   240b2:	685b      	ldr	r3, [r3, #4]
	const uint32_t set_mask = value & mask;
   240b4:	ea02 0001 	and.w	r0, r2, r1
	const uint32_t clear_mask = (~set_mask) & mask;
   240b8:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
   240bc:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
   240c0:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
   240c4:	2000      	movs	r0, #0
   240c6:	4770      	bx	lr

000240c8 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   240c8:	6843      	ldr	r3, [r0, #4]
   240ca:	685b      	ldr	r3, [r3, #4]
}
   240cc:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   240ce:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   240d2:	4770      	bx	lr

000240d4 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   240d4:	6843      	ldr	r3, [r0, #4]
   240d6:	685b      	ldr	r3, [r3, #4]
}
   240d8:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   240da:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   240de:	4770      	bx	lr

000240e0 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   240e0:	6843      	ldr	r3, [r0, #4]
   240e2:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   240e4:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	const uint32_t set_mask = value & mask;
   240e8:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
   240ec:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
   240ee:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
   240f2:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
   240f6:	2000      	movs	r0, #0
   240f8:	4770      	bx	lr

000240fa <gpio_nrfx_manage_callback>:
{
   240fa:	b510      	push	{r4, lr}
	return port->data;
   240fc:	6903      	ldr	r3, [r0, #16]
	return list->head;
   240fe:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
   24100:	b1f8      	cbz	r0, 24142 <gpio_nrfx_manage_callback+0x48>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   24102:	4288      	cmp	r0, r1
   24104:	d119      	bne.n	2413a <gpio_nrfx_manage_callback+0x40>
Z_GENLIST_REMOVE(slist, snode)
   24106:	689c      	ldr	r4, [r3, #8]
	return node->next;
   24108:	6808      	ldr	r0, [r1, #0]
	list->head = node;
   2410a:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   2410c:	42a1      	cmp	r1, r4
   2410e:	d100      	bne.n	24112 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
   24110:	6098      	str	r0, [r3, #8]
	parent->next = child;
   24112:	2000      	movs	r0, #0
   24114:	6008      	str	r0, [r1, #0]
	if (set) {
   24116:	b12a      	cbz	r2, 24124 <gpio_nrfx_manage_callback+0x2a>
	return list->head;
   24118:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   2411a:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   2411c:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   2411e:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   24120:	b902      	cbnz	r2, 24124 <gpio_nrfx_manage_callback+0x2a>
	list->tail = node;
   24122:	6099      	str	r1, [r3, #8]
	return 0;
   24124:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   24126:	e010      	b.n	2414a <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   24128:	4281      	cmp	r1, r0
   2412a:	d106      	bne.n	2413a <gpio_nrfx_manage_callback+0x40>
	return node->next;
   2412c:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
   2412e:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   24130:	6898      	ldr	r0, [r3, #8]
   24132:	4281      	cmp	r1, r0
   24134:	d1ed      	bne.n	24112 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
   24136:	609c      	str	r4, [r3, #8]
}
   24138:	e7eb      	b.n	24112 <gpio_nrfx_manage_callback+0x18>
	return node->next;
   2413a:	4604      	mov	r4, r0
   2413c:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2413e:	2800      	cmp	r0, #0
   24140:	d1f2      	bne.n	24128 <gpio_nrfx_manage_callback+0x2e>
			if (!set) {
   24142:	2a00      	cmp	r2, #0
   24144:	d1e8      	bne.n	24118 <gpio_nrfx_manage_callback+0x1e>
				return -EINVAL;
   24146:	f06f 0015 	mvn.w	r0, #21
}
   2414a:	bd10      	pop	{r4, pc}

0002414c <entropy_bt_init>:

static int entropy_bt_init(const struct device *dev)
{
	/* Nothing to do */
	return 0;
}
   2414c:	2000      	movs	r0, #0
   2414e:	4770      	bx	lr

00024150 <entropy_bt_get_entropy>:

static int entropy_bt_get_entropy(const struct device *dev,
				  uint8_t *buffer, uint16_t length)
{
   24150:	b538      	push	{r3, r4, r5, lr}
   24152:	460c      	mov	r4, r1
   24154:	4615      	mov	r5, r2
	if (!bt_is_ready()) {
   24156:	f7f4 fadb 	bl	18710 <bt_is_ready>
   2415a:	b128      	cbz	r0, 24168 <entropy_bt_get_entropy+0x18>
		return -EAGAIN;
	}

	return bt_hci_le_rand(buffer, length);
   2415c:	4629      	mov	r1, r5
   2415e:	4620      	mov	r0, r4
}
   24160:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_le_rand(buffer, length);
   24164:	f7f3 bcf2 	b.w	17b4c <bt_hci_le_rand>
}
   24168:	f06f 000a 	mvn.w	r0, #10
   2416c:	bd38      	pop	{r3, r4, r5, pc}

0002416e <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   2416e:	4770      	bx	lr

00024170 <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   24170:	f100 0350 	add.w	r3, r0, #80	; 0x50
   24174:	009b      	lsls	r3, r3, #2
   24176:	b29b      	uxth	r3, r3
   24178:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   2417c:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   24180:	2200      	movs	r2, #0
   24182:	601a      	str	r2, [r3, #0]
   24184:	681b      	ldr	r3, [r3, #0]
}
   24186:	4770      	bx	lr

00024188 <sys_clock_cycle_get_32>:
{
   24188:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
   2418a:	f7f8 fe97 	bl	1cebc <z_nrf_rtc_timer_read>
}
   2418e:	bd08      	pop	{r3, pc}

00024190 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
   24190:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
   24192:	6843      	ldr	r3, [r0, #4]
   24194:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
   24196:	7a05      	ldrb	r5, [r0, #8]
   24198:	6844      	ldr	r4, [r0, #4]
   2419a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   2419e:	42a3      	cmp	r3, r4
   241a0:	d302      	bcc.n	241a8 <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
   241a2:	f06f 0001 	mvn.w	r0, #1
}
   241a6:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
   241a8:	795c      	ldrb	r4, [r3, #5]
   241aa:	428c      	cmp	r4, r1
   241ac:	d001      	beq.n	241b2 <pinctrl_lookup_state+0x22>
		(*state)++;
   241ae:	3308      	adds	r3, #8
   241b0:	e7f0      	b.n	24194 <pinctrl_lookup_state+0x4>
			return 0;
   241b2:	2000      	movs	r0, #0
   241b4:	e7f7      	b.n	241a6 <pinctrl_lookup_state+0x16>

000241b6 <hci_driver_close>:
{
   241b6:	b510      	push	{r4, lr}
		hci_ecdh_uninit();
   241b8:	f7f9 ff64 	bl	1e084 <hci_ecdh_uninit>
	err = MULTITHREADING_LOCK_ACQUIRE();
   241bc:	f04f 30ff 	mov.w	r0, #4294967295
   241c0:	f04f 31ff 	mov.w	r1, #4294967295
   241c4:	f7f9 f844 	bl	1d250 <multithreading_lock_acquire>
	if (err) {
   241c8:	4604      	mov	r4, r0
   241ca:	b920      	cbnz	r0, 241d6 <hci_driver_close+0x20>
	err = sdc_disable();
   241cc:	f7dd f894 	bl	12f8 <sdc_disable>
	if (err) {
   241d0:	4604      	mov	r4, r0
	MULTITHREADING_LOCK_RELEASE();
   241d2:	f7f9 f845 	bl	1d260 <multithreading_lock_release>
}
   241d6:	4620      	mov	r0, r4
   241d8:	bd10      	pop	{r4, pc}

000241da <rand_prio_high_vector_get>:
static uint8_t rand_prio_high_vector_get(uint8_t *p_buff, uint8_t length)
   241da:	f7f9 b881 	b.w	1d2e0 <rand_prio_low_vector_get>

000241de <hci_driver_send>:
{
   241de:	b538      	push	{r3, r4, r5, lr}
	if (!buf->len) {
   241e0:	8a03      	ldrh	r3, [r0, #16]
{
   241e2:	4605      	mov	r5, r0
	if (!buf->len) {
   241e4:	b373      	cbz	r3, 24244 <hci_driver_send+0x66>
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   241e6:	7e03      	ldrb	r3, [r0, #24]
	switch (type) {
   241e8:	b1a3      	cbz	r3, 24214 <hci_driver_send+0x36>
   241ea:	2b02      	cmp	r3, #2
   241ec:	d12a      	bne.n	24244 <hci_driver_send+0x66>
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   241ee:	f04f 30ff 	mov.w	r0, #4294967295
   241f2:	f04f 31ff 	mov.w	r1, #4294967295
   241f6:	f7f9 f82b 	bl	1d250 <multithreading_lock_acquire>
	if (!errcode) {
   241fa:	4604      	mov	r4, r0
   241fc:	b940      	cbnz	r0, 24210 <hci_driver_send+0x32>
		errcode = sdc_hci_data_put(acl->data);
   241fe:	68e8      	ldr	r0, [r5, #12]
   24200:	f7e8 ff91 	bl	d126 <sdc_hci_data_put>
   24204:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   24206:	f7f9 f82b 	bl	1d260 <multithreading_lock_release>
		if (errcode) {
   2420a:	b1b4      	cbz	r4, 2423a <hci_driver_send+0x5c>
			receive_signal_raise();
   2420c:	f7f9 f87c 	bl	1d308 <receive_signal_raise>
}
   24210:	4620      	mov	r0, r4
   24212:	bd38      	pop	{r3, r4, r5, pc}
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   24214:	f04f 30ff 	mov.w	r0, #4294967295
   24218:	f04f 31ff 	mov.w	r1, #4294967295
   2421c:	f7f9 f818 	bl	1d250 <multithreading_lock_acquire>
	if (!errcode) {
   24220:	4604      	mov	r4, r0
   24222:	2800      	cmp	r0, #0
   24224:	d1f4      	bne.n	24210 <hci_driver_send+0x32>
		errcode = hci_internal_cmd_put(cmd->data);
   24226:	68e8      	ldr	r0, [r5, #12]
   24228:	f7f9 f9fe 	bl	1d628 <hci_internal_cmd_put>
   2422c:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   2422e:	f7f9 f817 	bl	1d260 <multithreading_lock_release>
	if (errcode) {
   24232:	2c00      	cmp	r4, #0
   24234:	d1ec      	bne.n	24210 <hci_driver_send+0x32>
	receive_signal_raise();
   24236:	f7f9 f867 	bl	1d308 <receive_signal_raise>
		net_buf_unref(buf);
   2423a:	4628      	mov	r0, r5
   2423c:	f7f7 fffa 	bl	1c234 <net_buf_unref>
   24240:	2400      	movs	r4, #0
   24242:	e7e5      	b.n	24210 <hci_driver_send+0x32>
	switch (type) {
   24244:	f06f 0415 	mvn.w	r4, #21
   24248:	e7e2      	b.n	24210 <hci_driver_send+0x32>

0002424a <receive_work_handler>:
	hci_driver_receive_process();
   2424a:	f7f9 b971 	b.w	1d530 <hci_driver_receive_process>

0002424e <sys_memcpy_swap.constprop.0>:
	for (; length > 0; length--) {
   2424e:	f101 0320 	add.w	r3, r1, #32
   24252:	3801      	subs	r0, #1
		*pdst++ = *psrc--;
   24254:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   24258:	f800 2f01 	strb.w	r2, [r0, #1]!
	for (; length > 0; length--) {
   2425c:	428b      	cmp	r3, r1
   2425e:	d1f9      	bne.n	24254 <sys_memcpy_swap.constprop.0+0x6>
}
   24260:	4770      	bx	lr

00024262 <hci_cmd_le_generate_dhkey>:

uint8_t hci_cmd_le_generate_dhkey(struct bt_hci_cp_le_generate_dhkey *p_params)
{
	return cmd_le_generate_dhkey(p_params->key,
   24262:	2100      	movs	r1, #0
   24264:	f7f9 bf30 	b.w	1e0c8 <cmd_le_generate_dhkey>

00024268 <hci_cmd_le_generate_dhkey_v2>:
				     BT_HCI_LE_KEY_TYPE_GENERATED);
}

uint8_t hci_cmd_le_generate_dhkey_v2(struct bt_hci_cp_le_generate_dhkey_v2 *p_params)
{
	if (p_params->key_type > BT_HCI_LE_KEY_TYPE_DEBUG) {
   24268:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
   2426c:	2901      	cmp	r1, #1
   2426e:	d801      	bhi.n	24274 <hci_cmd_le_generate_dhkey_v2+0xc>
		return BT_HCI_ERR_INVALID_PARAM;
	}

	return cmd_le_generate_dhkey(p_params->key, p_params->key_type);
   24270:	f7f9 bf2a 	b.w	1e0c8 <cmd_le_generate_dhkey>
}
   24274:	2012      	movs	r0, #18
   24276:	4770      	bx	lr

00024278 <mpsl_timer0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   24278:	4668      	mov	r0, sp
   2427a:	f020 0107 	bic.w	r1, r0, #7
   2427e:	468d      	mov	sp, r1
   24280:	b501      	push	{r0, lr}
	MPSL_IRQ_TIMER0_Handler();
   24282:	f7e7 f949 	bl	b518 <MPSL_IRQ_TIMER0_Handler>
	ISR_DIRECT_PM();
   24286:	f7f1 ff79 	bl	1617c <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   2428a:	f7f2 f8f1 	bl	16470 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   2428e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   24292:	4685      	mov	sp, r0
   24294:	4770      	bx	lr

00024296 <mpsl_low_prio_work_handler>:
{
   24296:	b508      	push	{r3, lr}
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   24298:	f04f 31ff 	mov.w	r1, #4294967295
   2429c:	f04f 30ff 	mov.w	r0, #4294967295
   242a0:	f7f8 ffd6 	bl	1d250 <multithreading_lock_acquire>
	mpsl_low_priority_process();
   242a4:	f7ec fd0c 	bl	10cc0 <mpsl_low_priority_process>
}
   242a8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	MULTITHREADING_LOCK_RELEASE();
   242ac:	f7f8 bfd8 	b.w	1d260 <multithreading_lock_release>

000242b0 <mpsl_rtc0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   242b0:	4668      	mov	r0, sp
   242b2:	f020 0107 	bic.w	r1, r0, #7
   242b6:	468d      	mov	sp, r1
   242b8:	b501      	push	{r0, lr}
	MPSL_IRQ_RTC0_Handler();
   242ba:	f7e7 f8a3 	bl	b404 <MPSL_IRQ_RTC0_Handler>
	ISR_DIRECT_PM();
   242be:	f7f1 ff5d 	bl	1617c <_arch_isr_direct_pm>
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   242c2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   242c6:	4685      	mov	sp, r0
   242c8:	4770      	bx	lr

000242ca <mpsl_radio_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   242ca:	4668      	mov	r0, sp
   242cc:	f020 0107 	bic.w	r1, r0, #7
   242d0:	468d      	mov	sp, r1
   242d2:	b501      	push	{r0, lr}
	MPSL_IRQ_RADIO_Handler();
   242d4:	f7e4 fe00 	bl	8ed8 <MPSL_IRQ_RADIO_Handler>
	ISR_DIRECT_PM();
   242d8:	f7f1 ff50 	bl	1617c <_arch_isr_direct_pm>
   242dc:	f7f2 f8c8 	bl	16470 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   242e0:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   242e4:	4685      	mov	sp, r0
   242e6:	4770      	bx	lr

000242e8 <mpsl_fem_api_init>:

#include <mpsl_fem_init.h>
#include <zephyr/device.h>

static int mpsl_fem_api_init(const struct device *dev)
{
   242e8:	b508      	push	{r3, lr}
	ARG_UNUSED(dev);

	mpsl_fem_init();
   242ea:	f7ec feb0 	bl	1104e <mpsl_fem_init>

	return 0;
}
   242ee:	2000      	movs	r0, #0
   242f0:	bd08      	pop	{r3, pc}

000242f2 <nrfx_clock_stop>:
	switch (domain) {
   242f2:	2801      	cmp	r0, #1
   242f4:	d101      	bne.n	242fa <nrfx_clock_stop+0x8>
		mpsl_clock_hfclk_release();
   242f6:	f7e7 bf89 	b.w	c20c <mpsl_clock_hfclk_release>
}
   242fa:	4770      	bx	lr

000242fc <nrfx_clock_enable>:
}
   242fc:	4770      	bx	lr

000242fe <nrfx_power_clock_irq_handler>:


void nrfx_clock_irq_handler(void)
{
	MPSL_IRQ_CLOCK_Handler();
   242fe:	f7e7 bd8f 	b.w	be20 <MPSL_IRQ_CLOCK_Handler>

00024302 <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   24302:	4700      	bx	r0

00024304 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   24304:	f000 bd3b 	b.w	24d7e <z_impl_k_busy_wait>

00024308 <nrf_gpio_reconfigure>:
{
   24308:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2430a:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2430c:	a801      	add	r0, sp, #4
{
   2430e:	e9dd 4708 	ldrd	r4, r7, [sp, #32]
   24312:	4616      	mov	r6, r2
   24314:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   24316:	f7fa f89b 	bl	1e450 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   2431a:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   2431c:	f1b6 0c00 	subs.w	ip, r6, #0
   24320:	bf18      	it	ne
   24322:	f04f 0c01 	movne.w	ip, #1
   24326:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   2432a:	1e0b      	subs	r3, r1, #0
   2432c:	bf18      	it	ne
   2432e:	2301      	movne	r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   24330:	2d00      	cmp	r5, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   24332:	ea43 034c 	orr.w	r3, r3, ip, lsl #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   24336:	bf14      	ite	ne
   24338:	f04f 0c0c 	movne.w	ip, #12
   2433c:	f04f 0c00 	moveq.w	ip, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   24340:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   24342:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   24346:	bf14      	ite	ne
   24348:	f44f 6ce0 	movne.w	ip, #1792	; 0x700
   2434c:	f04f 0c00 	moveq.w	ip, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   24350:	2f00      	cmp	r7, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   24352:	ea43 030c 	orr.w	r3, r3, ip
    uint32_t cnf = reg->PIN_CNF[pin_number];
   24356:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   2435a:	bf14      	ite	ne
   2435c:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
   24360:	f04f 0c00 	moveq.w	ip, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   24364:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
   24368:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   2436c:	b101      	cbz	r1, 24370 <nrf_gpio_reconfigure+0x68>
   2436e:	7809      	ldrb	r1, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   24370:	b10e      	cbz	r6, 24376 <nrf_gpio_reconfigure+0x6e>
   24372:	7836      	ldrb	r6, [r6, #0]
   24374:	0076      	lsls	r6, r6, #1
   24376:	4319      	orrs	r1, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   24378:	b10d      	cbz	r5, 2437e <nrf_gpio_reconfigure+0x76>
   2437a:	782d      	ldrb	r5, [r5, #0]
   2437c:	00ad      	lsls	r5, r5, #2
   2437e:	4331      	orrs	r1, r6
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   24380:	b10c      	cbz	r4, 24386 <nrf_gpio_reconfigure+0x7e>
   24382:	7824      	ldrb	r4, [r4, #0]
   24384:	0224      	lsls	r4, r4, #8
   24386:	4329      	orrs	r1, r5
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   24388:	b10f      	cbz	r7, 2438e <nrf_gpio_reconfigure+0x86>
   2438a:	783f      	ldrb	r7, [r7, #0]
   2438c:	043f      	lsls	r7, r7, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   2438e:	430c      	orrs	r4, r1
   24390:	433c      	orrs	r4, r7
    reg->PIN_CNF[pin_number] = cnf;
   24392:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
   24396:	b003      	add	sp, #12
   24398:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002439a <nrf_gpio_cfg_sense_set>:
{
   2439a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   2439c:	f10d 030f 	add.w	r3, sp, #15
   243a0:	9301      	str	r3, [sp, #4]
   243a2:	2300      	movs	r3, #0
{
   243a4:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   243a8:	9300      	str	r3, [sp, #0]
   243aa:	461a      	mov	r2, r3
   243ac:	4619      	mov	r1, r3
   243ae:	f7ff ffab 	bl	24308 <nrf_gpio_reconfigure>
}
   243b2:	b005      	add	sp, #20
   243b4:	f85d fb04 	ldr.w	pc, [sp], #4

000243b8 <twi_transfer>:
{
   243b8:	b530      	push	{r4, r5, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   243ba:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_STOPPED))
   243be:	b12b      	cbz	r3, 243cc <twi_transfer+0x14>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   243c0:	2300      	movs	r3, #0
   243c2:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
   243c6:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
        stopped = true;
   243ca:	2301      	movs	r3, #1
    if (p_cb->error)
   243cc:	f891 202f 	ldrb.w	r2, [r1, #47]	; 0x2f
   243d0:	b322      	cbz	r2, 2441c <twi_transfer+0x64>
   243d2:	2200      	movs	r2, #0
   243d4:	f8c0 2124 	str.w	r2, [r0, #292]	; 0x124
   243d8:	f8d0 4124 	ldr.w	r4, [r0, #292]	; 0x124
   243dc:	f8c0 211c 	str.w	r2, [r0, #284]	; 0x11c
   243e0:	f8d0 411c 	ldr.w	r4, [r0, #284]	; 0x11c
   243e4:	f8c0 2108 	str.w	r2, [r0, #264]	; 0x108
   243e8:	f8d0 2108 	ldr.w	r2, [r0, #264]	; 0x108
    if (stopped)
   243ec:	2b00      	cmp	r3, #0
   243ee:	d079      	beq.n	244e4 <twi_transfer+0x12c>
        p_cb->prev_suspend = TWI_NO_SUSPEND;
   243f0:	2200      	movs	r2, #0
   243f2:	f881 202d 	strb.w	r2, [r1, #45]	; 0x2d
        if (!p_cb->error)
   243f6:	f891 202f 	ldrb.w	r2, [r1, #47]	; 0x2f
   243fa:	2a00      	cmp	r2, #0
   243fc:	d137      	bne.n	2446e <twi_transfer+0xb6>
    if (p_cb->bytes_transferred != p_cb->curr_length)
   243fe:	6b4d      	ldr	r5, [r1, #52]	; 0x34
   24400:	6a8c      	ldr	r4, [r1, #40]	; 0x28
   24402:	42a5      	cmp	r5, r4
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
   24404:	bf1f      	itttt	ne
   24406:	2305      	movne	r3, #5
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
   24408:	f8c0 2500 	strne.w	r2, [r0, #1280]	; 0x500
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
   2440c:	f8c0 3500 	strne.w	r3, [r0, #1280]	; 0x500
        return false;
   24410:	4613      	movne	r3, r2
            p_cb->error = !xfer_completeness_check(p_twi, p_cb);
   24412:	f083 0301 	eor.w	r3, r3, #1
   24416:	f881 302f 	strb.w	r3, [r1, #47]	; 0x2f
   2441a:	e028      	b.n	2446e <twi_transfer+0xb6>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2441c:	f8d0 4124 	ldr.w	r4, [r0, #292]	; 0x124
    else if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
   24420:	b114      	cbz	r4, 24428 <twi_transfer+0x70>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   24422:	f8c0 2124 	str.w	r2, [r0, #292]	; 0x124
   24426:	e00e      	b.n	24446 <twi_transfer+0x8e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   24428:	f8d0 211c 	ldr.w	r2, [r0, #284]	; 0x11c
        if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_TXDSENT))
   2442c:	b36a      	cbz	r2, 2448a <twi_transfer+0xd2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2442e:	f8c0 411c 	str.w	r4, [r0, #284]	; 0x11c
   24432:	f8d0 211c 	ldr.w	r2, [r0, #284]	; 0x11c
            ++(p_cb->bytes_transferred);
   24436:	6b4a      	ldr	r2, [r1, #52]	; 0x34
   24438:	3201      	adds	r2, #1
   2443a:	634a      	str	r2, [r1, #52]	; 0x34
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2443c:	f8d0 5124 	ldr.w	r5, [r0, #292]	; 0x124
            if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
   24440:	b145      	cbz	r5, 24454 <twi_transfer+0x9c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   24442:	f8c0 4124 	str.w	r4, [r0, #292]	; 0x124
   24446:	f8d0 2124 	ldr.w	r2, [r0, #292]	; 0x124
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2444a:	2201      	movs	r2, #1
   2444c:	6142      	str	r2, [r0, #20]
                p_cb->error = true;
   2444e:	f881 202f 	strb.w	r2, [r1, #47]	; 0x2f
   24452:	e7cb      	b.n	243ec <twi_transfer+0x34>
    if (p_cb->bytes_transferred < p_cb->curr_length)
   24454:	6a8c      	ldr	r4, [r1, #40]	; 0x28
   24456:	42a2      	cmp	r2, r4
   24458:	d204      	bcs.n	24464 <twi_transfer+0xac>
        nrf_twi_txd_set(p_twi, p_cb->p_curr_buf[p_cb->bytes_transferred]);
   2445a:	6a4c      	ldr	r4, [r1, #36]	; 0x24
    p_reg->TXD = data;
   2445c:	5ca2      	ldrb	r2, [r4, r2]
   2445e:	f8c0 251c 	str.w	r2, [r0, #1308]	; 0x51c
   24462:	e7c3      	b.n	243ec <twi_transfer+0x34>
        if (p_cb->curr_tx_no_stop)
   24464:	f891 202c 	ldrb.w	r2, [r1, #44]	; 0x2c
   24468:	b11a      	cbz	r2, 24472 <twi_transfer+0xba>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2446a:	2301      	movs	r3, #1
   2446c:	61c3      	str	r3, [r0, #28]
                    return false;
   2446e:	2000      	movs	r0, #0
}
   24470:	bd30      	pop	{r4, r5, pc}
        else if(TWI_FLAG_SUSPEND(p_cb->flags))
   24472:	6a0a      	ldr	r2, [r1, #32]
   24474:	f012 0f40 	tst.w	r2, #64	; 0x40
   24478:	f04f 0201 	mov.w	r2, #1
   2447c:	d003      	beq.n	24486 <twi_transfer+0xce>
   2447e:	61c2      	str	r2, [r0, #28]
            p_cb->prev_suspend = TWI_SUSPEND_TX;
   24480:	f881 202d 	strb.w	r2, [r1, #45]	; 0x2d
            return false;
   24484:	e7f3      	b.n	2446e <twi_transfer+0xb6>
   24486:	6142      	str	r2, [r0, #20]
   24488:	e7b0      	b.n	243ec <twi_transfer+0x34>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2448a:	f8d0 4108 	ldr.w	r4, [r0, #264]	; 0x108
        else if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_RXDREADY))
   2448e:	2c00      	cmp	r4, #0
   24490:	d0ac      	beq.n	243ec <twi_transfer+0x34>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   24492:	f8c0 2108 	str.w	r2, [r0, #264]	; 0x108
   24496:	f8d0 4108 	ldr.w	r4, [r0, #264]	; 0x108
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2449a:	f8d0 4124 	ldr.w	r4, [r0, #292]	; 0x124
            if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
   2449e:	2c00      	cmp	r4, #0
   244a0:	d1bf      	bne.n	24422 <twi_transfer+0x6a>
    if (p_cb->bytes_transferred < p_cb->curr_length)
   244a2:	6b4a      	ldr	r2, [r1, #52]	; 0x34
   244a4:	6a8c      	ldr	r4, [r1, #40]	; 0x28
   244a6:	42a2      	cmp	r2, r4
   244a8:	d2a0      	bcs.n	243ec <twi_transfer+0x34>
        p_cb->p_curr_buf[p_cb->bytes_transferred] = nrf_twi_rxd_get(p_twi);
   244aa:	6a4c      	ldr	r4, [r1, #36]	; 0x24
    return (uint8_t)p_reg->RXD;
   244ac:	f8d0 5518 	ldr.w	r5, [r0, #1304]	; 0x518
   244b0:	54a5      	strb	r5, [r4, r2]
        ++(p_cb->bytes_transferred);
   244b2:	6b4a      	ldr	r2, [r1, #52]	; 0x34
        if ((p_cb->bytes_transferred == p_cb->curr_length - 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   244b4:	6a8c      	ldr	r4, [r1, #40]	; 0x28
        ++(p_cb->bytes_transferred);
   244b6:	3201      	adds	r2, #1
        if ((p_cb->bytes_transferred == p_cb->curr_length - 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   244b8:	1e65      	subs	r5, r4, #1
   244ba:	42aa      	cmp	r2, r5
        ++(p_cb->bytes_transferred);
   244bc:	634a      	str	r2, [r1, #52]	; 0x34
        if ((p_cb->bytes_transferred == p_cb->curr_length - 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   244be:	d108      	bne.n	244d2 <twi_transfer+0x11a>
   244c0:	6a0a      	ldr	r2, [r1, #32]
   244c2:	0654      	lsls	r4, r2, #25
   244c4:	d402      	bmi.n	244cc <twi_transfer+0x114>
    p_reg->SHORTS = mask;
   244c6:	2202      	movs	r2, #2
   244c8:	f8c0 2200 	str.w	r2, [r0, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   244cc:	2201      	movs	r2, #1
   244ce:	6202      	str	r2, [r0, #32]
   244d0:	e78c      	b.n	243ec <twi_transfer+0x34>
        else if (p_cb->bytes_transferred == p_cb->curr_length && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   244d2:	42a2      	cmp	r2, r4
   244d4:	d1fa      	bne.n	244cc <twi_transfer+0x114>
   244d6:	6a0a      	ldr	r2, [r1, #32]
   244d8:	0652      	lsls	r2, r2, #25
   244da:	d587      	bpl.n	243ec <twi_transfer+0x34>
            p_cb->prev_suspend = TWI_SUSPEND_RX;
   244dc:	2302      	movs	r3, #2
   244de:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
            return false;
   244e2:	e7c4      	b.n	2446e <twi_transfer+0xb6>
    return true;
   244e4:	2001      	movs	r0, #1
   244e6:	e7c3      	b.n	24470 <twi_transfer+0xb8>

000244e8 <nrf_gpio_pin_set>:
{
   244e8:	b507      	push	{r0, r1, r2, lr}
   244ea:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   244ec:	a801      	add	r0, sp, #4
   244ee:	f7fa fd75 	bl	1efdc <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   244f2:	9a01      	ldr	r2, [sp, #4]
   244f4:	2301      	movs	r3, #1
   244f6:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   244f8:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
}
   244fc:	b003      	add	sp, #12
   244fe:	f85d fb04 	ldr.w	pc, [sp], #4

00024502 <_GetAvailWriteSpace>:
  RdOff = pRing->RdOff;
   24502:	6903      	ldr	r3, [r0, #16]
  WrOff = pRing->WrOff;
   24504:	68c2      	ldr	r2, [r0, #12]
  if (RdOff <= WrOff) {
   24506:	4293      	cmp	r3, r2
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
   24508:	bf9c      	itt	ls
   2450a:	6881      	ldrls	r1, [r0, #8]
   2450c:	185b      	addls	r3, r3, r1
    r = RdOff - WrOff - 1u;
   2450e:	3b01      	subs	r3, #1
   24510:	1a98      	subs	r0, r3, r2
}
   24512:	4770      	bx	lr

00024514 <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   24514:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   24518:	4604      	mov	r4, r0
  Rem = pRing->SizeOfBuffer - WrOff;
   2451a:	e9d0 8002 	ldrd	r8, r0, [r0, #8]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   2451e:	6867      	ldr	r7, [r4, #4]
  Rem = pRing->SizeOfBuffer - WrOff;
   24520:	eba8 0600 	sub.w	r6, r8, r0
  if (Rem > NumBytes) {
   24524:	4296      	cmp	r6, r2
    pRing->WrOff = WrOff + NumBytes;
   24526:	eb00 0502 	add.w	r5, r0, r2
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   2452a:	4689      	mov	r9, r1
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   2452c:	4438      	add	r0, r7
  if (Rem > NumBytes) {
   2452e:	d904      	bls.n	2453a <_WriteNoCheck+0x26>
   24530:	f000 fe49 	bl	251c6 <memcpy>
    pRing->WrOff = WrOff + NumBytes;
   24534:	60e5      	str	r5, [r4, #12]
}
   24536:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2453a:	4632      	mov	r2, r6
    NumBytesAtOnce = NumBytes - Rem;
   2453c:	eba5 0508 	sub.w	r5, r5, r8
   24540:	f000 fe41 	bl	251c6 <memcpy>
   24544:	6860      	ldr	r0, [r4, #4]
   24546:	462a      	mov	r2, r5
   24548:	eb09 0106 	add.w	r1, r9, r6
   2454c:	e7f0      	b.n	24530 <_WriteNoCheck+0x1c>

0002454e <_WriteBlocking>:
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
   2454e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  WrOff = pRing->WrOff;
   24552:	68c5      	ldr	r5, [r0, #12]
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
   24554:	4606      	mov	r6, r0
   24556:	4689      	mov	r9, r1
   24558:	4617      	mov	r7, r2
  NumBytesWritten = 0u;
   2455a:	f04f 0800 	mov.w	r8, #0
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
   2455e:	6933      	ldr	r3, [r6, #16]
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
   24560:	68b4      	ldr	r4, [r6, #8]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   24562:	6870      	ldr	r0, [r6, #4]
    if (RdOff > WrOff) {
   24564:	429d      	cmp	r5, r3
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
   24566:	bf28      	it	cs
   24568:	191b      	addcs	r3, r3, r4
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
   2456a:	1b64      	subs	r4, r4, r5
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
   2456c:	42bc      	cmp	r4, r7
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
   2456e:	f103 33ff 	add.w	r3, r3, #4294967295
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
   24572:	bf28      	it	cs
   24574:	463c      	movcs	r4, r7
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
   24576:	1b5b      	subs	r3, r3, r5
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
   24578:	429c      	cmp	r4, r3
   2457a:	bf28      	it	cs
   2457c:	461c      	movcs	r4, r3
   2457e:	4649      	mov	r1, r9
   24580:	4428      	add	r0, r5
   24582:	4622      	mov	r2, r4
   24584:	f000 fe1f 	bl	251c6 <memcpy>
    if (WrOff == pRing->SizeOfBuffer) {
   24588:	68b3      	ldr	r3, [r6, #8]
    WrOff           += NumBytesToWrite;
   2458a:	4425      	add	r5, r4
      WrOff = 0u;
   2458c:	42ab      	cmp	r3, r5
   2458e:	bf08      	it	eq
   24590:	2500      	moveq	r5, #0
  } while (NumBytes);
   24592:	1b3f      	subs	r7, r7, r4
    NumBytesWritten += NumBytesToWrite;
   24594:	44a0      	add	r8, r4
    pBuffer         += NumBytesToWrite;
   24596:	44a1      	add	r9, r4
    pRing->WrOff = WrOff;
   24598:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
   2459a:	d1e0      	bne.n	2455e <_WriteBlocking+0x10>
}
   2459c:	4640      	mov	r0, r8
   2459e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000245a2 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   245a2:	f7fa bd8d 	b.w	1f0c0 <_DoInit>

000245a6 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   245a6:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   245a8:	f7ff fffb 	bl	245a2 <SEGGER_RTT_Init>

	return 0;
}
   245ac:	2000      	movs	r0, #0
   245ae:	bd08      	pop	{r3, pc}

000245b0 <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
   245b0:	4770      	bx	lr

000245b2 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   245b2:	b140      	cbz	r0, 245c6 <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   245b4:	68c3      	ldr	r3, [r0, #12]
   245b6:	7858      	ldrb	r0, [r3, #1]
   245b8:	f010 0001 	ands.w	r0, r0, #1
   245bc:	bf1e      	ittt	ne
   245be:	7818      	ldrbne	r0, [r3, #0]
   245c0:	fab0 f080 	clzne	r0, r0
   245c4:	0940      	lsrne	r0, r0, #5
}
   245c6:	4770      	bx	lr

000245c8 <z_early_memset>:
__ssp_bos_icheck3(memset, void *, int)
   245c8:	f000 be0b 	b.w	251e2 <memset>

000245cc <z_early_memcpy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   245cc:	f000 bdfb 	b.w	251c6 <memcpy>

000245d0 <k_heap_init>:
{
   245d0:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   245d2:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   245d6:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   245da:	f85d 4b04 	ldr.w	r4, [sp], #4
	sys_heap_init(&h->heap, mem, bytes);
   245de:	f7fd ba79 	b.w	21ad4 <sys_heap_init>

000245e2 <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   245e2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   245e6:	b085      	sub	sp, #20
   245e8:	e9dd a40e 	ldrd	sl, r4, [sp, #56]	; 0x38
   245ec:	4607      	mov	r7, r0
   245ee:	4688      	mov	r8, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   245f0:	4650      	mov	r0, sl
   245f2:	4621      	mov	r1, r4
{
   245f4:	4691      	mov	r9, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   245f6:	f000 fbc6 	bl	24d86 <sys_clock_timeout_end_calc>
	void *ret = NULL;

	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   245fa:	f1b4 3fff 	cmp.w	r4, #4294967295
   245fe:	bf08      	it	eq
   24600:	f1ba 3fff 	cmpeq.w	sl, #4294967295
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   24604:	4605      	mov	r5, r0
   24606:	460e      	mov	r6, r1
	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   24608:	bf04      	itt	eq
   2460a:	f04f 35ff 	moveq.w	r5, #4294967295
   2460e:	f06f 4600 	mvneq.w	r6, #2147483648	; 0x80000000

	k_spinlock_key_t key = k_spin_lock(&h->lock);
   24612:	f107 0a14 	add.w	sl, r7, #20
	__asm__ volatile(
   24616:	f04f 0340 	mov.w	r3, #64	; 0x40
   2461a:	f3ef 8411 	mrs	r4, BASEPRI
   2461e:	f383 8812 	msr	BASEPRI_MAX, r3
   24622:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   24626:	f107 0b0c 	add.w	fp, r7, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   2462a:	464a      	mov	r2, r9
   2462c:	4641      	mov	r1, r8
   2462e:	4638      	mov	r0, r7
   24630:	f7fd f9e9 	bl	21a06 <sys_heap_aligned_alloc>
   24634:	9003      	str	r0, [sp, #12]
		now = sys_clock_tick_get();
   24636:	f7fb ffa3 	bl	20580 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   2463a:	9b03      	ldr	r3, [sp, #12]
   2463c:	b13b      	cbz	r3, 2464e <k_heap_aligned_alloc+0x6c>
	__asm__ volatile(
   2463e:	f384 8811 	msr	BASEPRI, r4
   24642:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   24646:	4618      	mov	r0, r3
   24648:	b005      	add	sp, #20
   2464a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
   2464e:	1a28      	subs	r0, r5, r0
   24650:	eb66 0101 	sbc.w	r1, r6, r1
   24654:	2801      	cmp	r0, #1
   24656:	f171 0200 	sbcs.w	r2, r1, #0
   2465a:	dbf0      	blt.n	2463e <k_heap_aligned_alloc+0x5c>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   2465c:	e9cd 0100 	strd	r0, r1, [sp]
   24660:	465a      	mov	r2, fp
   24662:	4621      	mov	r1, r4
   24664:	4650      	mov	r0, sl
   24666:	f7fb fc35 	bl	1fed4 <z_pend_curr>
	__asm__ volatile(
   2466a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2466e:	f3ef 8411 	mrs	r4, BASEPRI
   24672:	f383 8812 	msr	BASEPRI_MAX, r3
   24676:	f3bf 8f6f 	isb	sy
	return k;
   2467a:	e7d6      	b.n	2462a <k_heap_aligned_alloc+0x48>

0002467c <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   2467c:	b538      	push	{r3, r4, r5, lr}
   2467e:	4604      	mov	r4, r0
   24680:	f04f 0340 	mov.w	r3, #64	; 0x40
   24684:	f3ef 8511 	mrs	r5, BASEPRI
   24688:	f383 8812 	msr	BASEPRI_MAX, r3
   2468c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   24690:	f7fd f981 	bl	21996 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   24694:	f104 000c 	add.w	r0, r4, #12
   24698:	f000 faf6 	bl	24c88 <z_unpend_all>
   2469c:	b130      	cbz	r0, 246ac <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   2469e:	4629      	mov	r1, r5
   246a0:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   246a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   246a8:	f7fb bc78 	b.w	1ff9c <z_reschedule>
	__asm__ volatile(
   246ac:	f385 8811 	msr	BASEPRI, r5
   246b0:	f3bf 8f6f 	isb	sy
}
   246b4:	bd38      	pop	{r3, r4, r5, pc}

000246b6 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   246b6:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
   246ba:	4313      	orrs	r3, r2
   246bc:	f013 0303 	ands.w	r3, r3, #3
   246c0:	d10c      	bne.n	246dc <create_free_list+0x26>
	slab->free_list = NULL;
   246c2:	6143      	str	r3, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   246c4:	6881      	ldr	r1, [r0, #8]
   246c6:	4299      	cmp	r1, r3
   246c8:	d801      	bhi.n	246ce <create_free_list+0x18>
	return 0;
   246ca:	2000      	movs	r0, #0
   246cc:	4770      	bx	lr
		*(char **)p = slab->free_list;
   246ce:	6941      	ldr	r1, [r0, #20]
   246d0:	6011      	str	r1, [r2, #0]
		p += slab->block_size;
   246d2:	68c1      	ldr	r1, [r0, #12]
		slab->free_list = p;
   246d4:	6142      	str	r2, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   246d6:	3301      	adds	r3, #1
		p += slab->block_size;
   246d8:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   246da:	e7f3      	b.n	246c4 <create_free_list+0xe>
		return -EINVAL;
   246dc:	f06f 0015 	mvn.w	r0, #21
}
   246e0:	4770      	bx	lr

000246e2 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   246e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   246e4:	4604      	mov	r4, r0
   246e6:	460d      	mov	r5, r1
	__asm__ volatile(
   246e8:	f04f 0340 	mov.w	r3, #64	; 0x40
   246ec:	f3ef 8611 	mrs	r6, BASEPRI
   246f0:	f383 8812 	msr	BASEPRI_MAX, r3
   246f4:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   246f8:	6947      	ldr	r7, [r0, #20]
   246fa:	b977      	cbnz	r7, 2471a <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   246fc:	f000 fa7e 	bl	24bfc <z_unpend_first_thread>

		if (pending_thread != NULL) {
   24700:	b158      	cbz	r0, 2471a <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   24702:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   24704:	6142      	str	r2, [r0, #20]
   24706:	67c7      	str	r7, [r0, #124]	; 0x7c
			z_ready_thread(pending_thread);
   24708:	f000 fa41 	bl	24b8e <z_ready_thread>
			z_reschedule(&slab->lock, key);
   2470c:	4631      	mov	r1, r6
   2470e:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   24712:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
   24716:	f7fb bc41 	b.w	1ff9c <z_reschedule>
	**(char ***) mem = slab->free_list;
   2471a:	682b      	ldr	r3, [r5, #0]
   2471c:	6962      	ldr	r2, [r4, #20]
   2471e:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   24720:	682b      	ldr	r3, [r5, #0]
   24722:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   24724:	69a3      	ldr	r3, [r4, #24]
   24726:	3b01      	subs	r3, #1
   24728:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   2472a:	f386 8811 	msr	BASEPRI, r6
   2472e:	f3bf 8f6f 	isb	sy
}
   24732:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00024734 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   24734:	f3ef 8005 	mrs	r0, IPSR
}
   24738:	3800      	subs	r0, #0
   2473a:	bf18      	it	ne
   2473c:	2001      	movne	r0, #1
   2473e:	4770      	bx	lr

00024740 <z_impl_k_thread_name_set>:
}
   24740:	f06f 0057 	mvn.w	r0, #87	; 0x57
   24744:	4770      	bx	lr

00024746 <k_thread_name_get>:
}
   24746:	2000      	movs	r0, #0
   24748:	4770      	bx	lr

0002474a <z_impl_k_thread_start>:
	z_sched_start(thread);
   2474a:	f7fb bc39 	b.w	1ffc0 <z_sched_start>

0002474e <z_pm_save_idle_exit>:
{
   2474e:	b508      	push	{r3, lr}
	pm_system_resume();
   24750:	f7f1 fa92 	bl	15c78 <pm_system_resume>
}
   24754:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   24758:	f7ff bd09 	b.w	2416e <sys_clock_idle_exit>

0002475c <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   2475c:	f990 300e 	ldrsb.w	r3, [r0, #14]
   24760:	428b      	cmp	r3, r1
   24762:	d001      	beq.n	24768 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   24764:	f7fb bbd4 	b.w	1ff10 <z_set_prio>
}
   24768:	2000      	movs	r0, #0
   2476a:	4770      	bx	lr

0002476c <queue_insert>:
{
   2476c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   24770:	4699      	mov	r9, r3
   24772:	4604      	mov	r4, r0
   24774:	f89d 3020 	ldrb.w	r3, [sp, #32]
   24778:	460d      	mov	r5, r1
   2477a:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   2477c:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   24780:	f04f 0240 	mov.w	r2, #64	; 0x40
   24784:	f3ef 8711 	mrs	r7, BASEPRI
   24788:	f382 8812 	msr	BASEPRI_MAX, r2
   2478c:	f3bf 8f6f 	isb	sy
	if (is_append) {
   24790:	b103      	cbz	r3, 24794 <queue_insert+0x28>
	return list->tail;
   24792:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   24794:	4630      	mov	r0, r6
   24796:	f000 fa31 	bl	24bfc <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   2479a:	b158      	cbz	r0, 247b4 <queue_insert+0x48>
   2479c:	2300      	movs	r3, #0
   2479e:	67c3      	str	r3, [r0, #124]	; 0x7c
   247a0:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   247a4:	f000 f9f3 	bl	24b8e <z_ready_thread>
	z_reschedule(&queue->lock, key);
   247a8:	4630      	mov	r0, r6
   247aa:	4639      	mov	r1, r7
   247ac:	f7fb fbf6 	bl	1ff9c <z_reschedule>
		return 0;
   247b0:	2000      	movs	r0, #0
   247b2:	e00c      	b.n	247ce <queue_insert+0x62>
	if (alloc) {
   247b4:	f1b9 0f00 	cmp.w	r9, #0
   247b8:	d01b      	beq.n	247f2 <queue_insert+0x86>
	return z_thread_aligned_alloc(0, size);
   247ba:	2108      	movs	r1, #8
   247bc:	f7fc f834 	bl	20828 <z_thread_aligned_alloc>
		if (anode == NULL) {
   247c0:	b938      	cbnz	r0, 247d2 <queue_insert+0x66>
	__asm__ volatile(
   247c2:	f387 8811 	msr	BASEPRI, r7
   247c6:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   247ca:	f06f 000b 	mvn.w	r0, #11
}
   247ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   247d2:	2201      	movs	r2, #1
		anode->data = data;
   247d4:	f8c0 8004 	str.w	r8, [r0, #4]
   247d8:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   247da:	6801      	ldr	r1, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   247dc:	f001 0103 	and.w	r1, r1, #3
Z_GENLIST_INSERT(sflist, sfnode)
   247e0:	b95d      	cbnz	r5, 247fa <queue_insert+0x8e>
	parent->next_and_flags = cur_flags | (unative_t)child;
   247e2:	6822      	ldr	r2, [r4, #0]
   247e4:	430a      	orrs	r2, r1
   247e6:	6002      	str	r2, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   247e8:	6862      	ldr	r2, [r4, #4]
	list->head = node;
   247ea:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   247ec:	b96a      	cbnz	r2, 2480a <queue_insert+0x9e>
	list->tail = node;
   247ee:	6060      	str	r0, [r4, #4]
}
   247f0:	e00b      	b.n	2480a <queue_insert+0x9e>
	node->next_and_flags = flags;
   247f2:	f8c8 9000 	str.w	r9, [r8]
}
   247f6:	4640      	mov	r0, r8
   247f8:	e7ef      	b.n	247da <queue_insert+0x6e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   247fa:	682a      	ldr	r2, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   247fc:	2a03      	cmp	r2, #3
   247fe:	d810      	bhi.n	24822 <queue_insert+0xb6>
	parent->next_and_flags = cur_flags | (unative_t)child;
   24800:	6001      	str	r1, [r0, #0]
	return list->tail;
   24802:	6861      	ldr	r1, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   24804:	b939      	cbnz	r1, 24816 <queue_insert+0xaa>
	list->head = node;
   24806:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   2480a:	2104      	movs	r1, #4
   2480c:	f104 0010 	add.w	r0, r4, #16
   24810:	f000 fc44 	bl	2509c <z_handle_obj_poll_events>
   24814:	e7c8      	b.n	247a8 <queue_insert+0x3c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   24816:	680a      	ldr	r2, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   24818:	f002 0203 	and.w	r2, r2, #3
   2481c:	4302      	orrs	r2, r0
   2481e:	600a      	str	r2, [r1, #0]
   24820:	e7e5      	b.n	247ee <queue_insert+0x82>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   24822:	f022 0203 	bic.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   24826:	430a      	orrs	r2, r1
   24828:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2482a:	682a      	ldr	r2, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2482c:	f002 0203 	and.w	r2, r2, #3
   24830:	ea40 0302 	orr.w	r3, r0, r2
   24834:	602b      	str	r3, [r5, #0]
}
   24836:	e7e8      	b.n	2480a <queue_insert+0x9e>

00024838 <z_queue_node_peek>:
{
   24838:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   2483a:	4604      	mov	r4, r0
   2483c:	b130      	cbz	r0, 2484c <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2483e:	6802      	ldr	r2, [r0, #0]
   24840:	0793      	lsls	r3, r2, #30
   24842:	d003      	beq.n	2484c <z_queue_node_peek+0x14>
		ret = anode->data;
   24844:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   24846:	b109      	cbz	r1, 2484c <z_queue_node_peek+0x14>
			k_free(anode);
   24848:	f000 fc3e 	bl	250c8 <k_free>
}
   2484c:	4620      	mov	r0, r4
   2484e:	bd10      	pop	{r4, pc}

00024850 <z_impl_k_queue_init>:
	list->head = NULL;
   24850:	2300      	movs	r3, #0
	list->tail = NULL;
   24852:	e9c0 3300 	strd	r3, r3, [r0]
   24856:	f100 0308 	add.w	r3, r0, #8
   2485a:	e9c0 3302 	strd	r3, r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   2485e:	f100 0310 	add.w	r3, r0, #16
   24862:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   24866:	4770      	bx	lr

00024868 <k_queue_append>:
{
   24868:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   2486a:	2301      	movs	r3, #1
   2486c:	9300      	str	r3, [sp, #0]
   2486e:	2300      	movs	r3, #0
{
   24870:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   24872:	4619      	mov	r1, r3
   24874:	f7ff ff7a 	bl	2476c <queue_insert>
}
   24878:	b003      	add	sp, #12
   2487a:	f85d fb04 	ldr.w	pc, [sp], #4

0002487e <k_queue_prepend>:
{
   2487e:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, false);
   24880:	2300      	movs	r3, #0
{
   24882:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   24884:	9300      	str	r3, [sp, #0]
   24886:	4619      	mov	r1, r3
   24888:	f7ff ff70 	bl	2476c <queue_insert>
}
   2488c:	b003      	add	sp, #12
   2488e:	f85d fb04 	ldr.w	pc, [sp], #4

00024892 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   24892:	b15a      	cbz	r2, 248ac <z_impl_k_sem_init+0x1a>
   24894:	428a      	cmp	r2, r1
   24896:	d309      	bcc.n	248ac <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   24898:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   2489c:	e9c0 1202 	strd	r1, r2, [r0, #8]
   248a0:	e9c0 0000 	strd	r0, r0, [r0]
   248a4:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   248a8:	2000      	movs	r0, #0
   248aa:	4770      	bx	lr
		return -EINVAL;
   248ac:	f06f 0015 	mvn.w	r0, #21
}
   248b0:	4770      	bx	lr

000248b2 <flag_test_and_clear>:
	return (*flagp & BIT(bit)) != 0U;
   248b2:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
   248b4:	2301      	movs	r3, #1
   248b6:	408b      	lsls	r3, r1
   248b8:	ea22 0303 	bic.w	r3, r2, r3
   248bc:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
   248be:	fa22 f001 	lsr.w	r0, r2, r1
}
   248c2:	f000 0001 	and.w	r0, r0, #1
   248c6:	4770      	bx	lr

000248c8 <unschedule_locked>:
{
   248c8:	b538      	push	{r3, r4, r5, lr}
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   248ca:	2103      	movs	r1, #3
{
   248cc:	4605      	mov	r5, r0
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   248ce:	300c      	adds	r0, #12
   248d0:	f7ff ffef 	bl	248b2 <flag_test_and_clear>
   248d4:	4604      	mov	r4, r0
   248d6:	b118      	cbz	r0, 248e0 <unschedule_locked+0x18>
		z_abort_timeout(&dwork->timeout);
   248d8:	f105 0010 	add.w	r0, r5, #16
   248dc:	f000 fa07 	bl	24cee <z_abort_timeout>
}
   248e0:	4620      	mov	r0, r4
   248e2:	bd38      	pop	{r3, r4, r5, pc}

000248e4 <notify_queue_locked.isra.0>:
	if (queue != NULL) {
   248e4:	b120      	cbz	r0, 248f0 <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   248e6:	2200      	movs	r2, #0
   248e8:	4611      	mov	r1, r2
   248ea:	30d0      	adds	r0, #208	; 0xd0
   248ec:	f000 b9dc 	b.w	24ca8 <z_sched_wake>
}
   248f0:	4770      	bx	lr

000248f2 <cancel_async_locked>:
{
   248f2:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   248f4:	68c3      	ldr	r3, [r0, #12]
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   248f6:	f3c3 0640 	ubfx	r6, r3, #1, #1
   248fa:	079b      	lsls	r3, r3, #30
{
   248fc:	4604      	mov	r4, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   248fe:	d416      	bmi.n	2492e <cancel_async_locked+0x3c>
		queue_remove_locked(work->queue, work);
   24900:	6885      	ldr	r5, [r0, #8]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   24902:	2102      	movs	r1, #2
   24904:	300c      	adds	r0, #12
   24906:	f7ff ffd4 	bl	248b2 <flag_test_and_clear>
   2490a:	b180      	cbz	r0, 2492e <cancel_async_locked+0x3c>
	return list->head;
   2490c:	f8d5 20c8 	ldr.w	r2, [r5, #200]	; 0xc8
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   24910:	b16a      	cbz	r2, 2492e <cancel_async_locked+0x3c>
   24912:	4294      	cmp	r4, r2
   24914:	d11d      	bne.n	24952 <cancel_async_locked+0x60>
	return node->next;
   24916:	6822      	ldr	r2, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   24918:	b99e      	cbnz	r6, 24942 <cancel_async_locked+0x50>
   2491a:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
	list->head = node;
   2491e:	f8c5 20c8 	str.w	r2, [r5, #200]	; 0xc8
Z_GENLIST_REMOVE(slist, snode)
   24922:	429c      	cmp	r4, r3
   24924:	d101      	bne.n	2492a <cancel_async_locked+0x38>
	list->tail = node;
   24926:	f8c5 20cc 	str.w	r2, [r5, #204]	; 0xcc
	parent->next = child;
   2492a:	2300      	movs	r3, #0
   2492c:	6023      	str	r3, [r4, #0]
	return *flagp;
   2492e:	68e3      	ldr	r3, [r4, #12]
	if (ret != 0) {
   24930:	f013 000f 	ands.w	r0, r3, #15
	*flagp |= BIT(bit);
   24934:	bf1e      	ittt	ne
   24936:	f043 0302 	orrne.w	r3, r3, #2
   2493a:	60e3      	strne	r3, [r4, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   2493c:	f040 0002 	orrne.w	r0, r0, #2
}
   24940:	bd70      	pop	{r4, r5, r6, pc}
   24942:	6032      	str	r2, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   24944:	f8d5 20cc 	ldr.w	r2, [r5, #204]	; 0xcc
   24948:	4294      	cmp	r4, r2
	list->tail = node;
   2494a:	bf08      	it	eq
   2494c:	f8c5 60cc 	streq.w	r6, [r5, #204]	; 0xcc
}
   24950:	e7eb      	b.n	2492a <cancel_async_locked+0x38>
	return node->next;
   24952:	4616      	mov	r6, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   24954:	6812      	ldr	r2, [r2, #0]
   24956:	e7db      	b.n	24910 <cancel_async_locked+0x1e>

00024958 <work_timeout>:
{
   24958:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2495a:	4604      	mov	r4, r0
	__asm__ volatile(
   2495c:	f04f 0340 	mov.w	r3, #64	; 0x40
   24960:	f3ef 8511 	mrs	r5, BASEPRI
   24964:	f383 8812 	msr	BASEPRI_MAX, r3
   24968:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
   2496c:	2300      	movs	r3, #0
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   2496e:	f1a0 0610 	sub.w	r6, r0, #16
   24972:	2103      	movs	r1, #3
   24974:	3804      	subs	r0, #4
	struct k_work_q *queue = NULL;
   24976:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   24978:	f7ff ff9b 	bl	248b2 <flag_test_and_clear>
   2497c:	b128      	cbz	r0, 2498a <work_timeout+0x32>
		queue = dw->queue;
   2497e:	69a3      	ldr	r3, [r4, #24]
   24980:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   24982:	a901      	add	r1, sp, #4
   24984:	4630      	mov	r0, r6
   24986:	f7fb f865 	bl	1fa54 <submit_to_queue_locked>
	__asm__ volatile(
   2498a:	f385 8811 	msr	BASEPRI, r5
   2498e:	f3bf 8f6f 	isb	sy
}
   24992:	b002      	add	sp, #8
   24994:	bd70      	pop	{r4, r5, r6, pc}

00024996 <k_work_init>:
{
   24996:	b538      	push	{r3, r4, r5, lr}
   24998:	4604      	mov	r4, r0
   2499a:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   2499c:	2210      	movs	r2, #16
   2499e:	2100      	movs	r1, #0
   249a0:	f000 fc1f 	bl	251e2 <memset>
   249a4:	6065      	str	r5, [r4, #4]
}
   249a6:	bd38      	pop	{r3, r4, r5, pc}

000249a8 <k_work_busy_get>:
	__asm__ volatile(
   249a8:	f04f 0240 	mov.w	r2, #64	; 0x40
   249ac:	f3ef 8311 	mrs	r3, BASEPRI
   249b0:	f382 8812 	msr	BASEPRI_MAX, r2
   249b4:	f3bf 8f6f 	isb	sy
	return flags_get(&work->flags) & K_WORK_MASK;
   249b8:	68c0      	ldr	r0, [r0, #12]
   249ba:	f000 000f 	and.w	r0, r0, #15
	__asm__ volatile(
   249be:	f383 8811 	msr	BASEPRI, r3
   249c2:	f3bf 8f6f 	isb	sy
}
   249c6:	4770      	bx	lr

000249c8 <z_work_submit_to_queue>:
{
   249c8:	b513      	push	{r0, r1, r4, lr}
   249ca:	9001      	str	r0, [sp, #4]
   249cc:	4608      	mov	r0, r1
	__asm__ volatile(
   249ce:	f04f 0340 	mov.w	r3, #64	; 0x40
   249d2:	f3ef 8411 	mrs	r4, BASEPRI
   249d6:	f383 8812 	msr	BASEPRI_MAX, r3
   249da:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   249de:	a901      	add	r1, sp, #4
   249e0:	f7fb f838 	bl	1fa54 <submit_to_queue_locked>
	__asm__ volatile(
   249e4:	f384 8811 	msr	BASEPRI, r4
   249e8:	f3bf 8f6f 	isb	sy
}
   249ec:	b002      	add	sp, #8
   249ee:	bd10      	pop	{r4, pc}

000249f0 <k_work_submit_to_queue>:
{
   249f0:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
   249f2:	f7ff ffe9 	bl	249c8 <z_work_submit_to_queue>
	if (ret > 0) {
   249f6:	1e04      	subs	r4, r0, #0
   249f8:	dd09      	ble.n	24a0e <k_work_submit_to_queue+0x1e>
	__asm__ volatile(
   249fa:	f04f 0340 	mov.w	r3, #64	; 0x40
   249fe:	f3ef 8011 	mrs	r0, BASEPRI
   24a02:	f383 8812 	msr	BASEPRI_MAX, r3
   24a06:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   24a0a:	f000 f927 	bl	24c5c <z_reschedule_irqlock>
}
   24a0e:	4620      	mov	r0, r4
   24a10:	bd10      	pop	{r4, pc}

00024a12 <k_work_queue_init>:
{
   24a12:	b508      	push	{r3, lr}
	*queue = (struct k_work_q) {
   24a14:	22e8      	movs	r2, #232	; 0xe8
   24a16:	2100      	movs	r1, #0
   24a18:	f000 fbe3 	bl	251e2 <memset>
}
   24a1c:	bd08      	pop	{r3, pc}

00024a1e <k_work_init_delayable>:
{
   24a1e:	b538      	push	{r3, r4, r5, lr}
	*dwork = (struct k_work_delayable){
   24a20:	2230      	movs	r2, #48	; 0x30
{
   24a22:	4604      	mov	r4, r0
   24a24:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
   24a26:	2100      	movs	r1, #0
   24a28:	f000 fbdb 	bl	251e2 <memset>
   24a2c:	f44f 7380 	mov.w	r3, #256	; 0x100
   24a30:	6065      	str	r5, [r4, #4]
   24a32:	60e3      	str	r3, [r4, #12]
}
   24a34:	bd38      	pop	{r3, r4, r5, pc}

00024a36 <k_work_delayable_busy_get>:
int k_work_delayable_busy_get(const struct k_work_delayable *dwork)
   24a36:	f7ff bfb7 	b.w	249a8 <k_work_busy_get>

00024a3a <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   24a3a:	b538      	push	{r3, r4, r5, lr}
   24a3c:	4604      	mov	r4, r0
   24a3e:	f04f 0340 	mov.w	r3, #64	; 0x40
   24a42:	f3ef 8511 	mrs	r5, BASEPRI
   24a46:	f383 8812 	msr	BASEPRI_MAX, r3
   24a4a:	f3bf 8f6f 	isb	sy
	(void)unschedule_locked(dwork);
   24a4e:	f7ff ff3b 	bl	248c8 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   24a52:	4620      	mov	r0, r4
   24a54:	f7ff ff4d 	bl	248f2 <cancel_async_locked>
	__asm__ volatile(
   24a58:	f385 8811 	msr	BASEPRI, r5
   24a5c:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   24a60:	bd38      	pop	{r3, r4, r5, pc}

00024a62 <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   24a62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24a64:	4604      	mov	r4, r0
   24a66:	460d      	mov	r5, r1
	__asm__ volatile(
   24a68:	f04f 0340 	mov.w	r3, #64	; 0x40
   24a6c:	f3ef 8611 	mrs	r6, BASEPRI
   24a70:	f383 8812 	msr	BASEPRI_MAX, r3
   24a74:	f3bf 8f6f 	isb	sy
	return *flagp;
   24a78:	68c3      	ldr	r3, [r0, #12]
   24a7a:	f003 030f 	and.w	r3, r3, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   24a7e:	2b00      	cmp	r3, #0
   24a80:	bf14      	ite	ne
   24a82:	2701      	movne	r7, #1
   24a84:	2700      	moveq	r7, #0
	bool need_wait = false;

	if (pending) {
   24a86:	d105      	bne.n	24a94 <k_work_cancel_delayable_sync+0x32>
	__asm__ volatile(
   24a88:	f386 8811 	msr	BASEPRI, r6
   24a8c:	f3bf 8f6f 	isb	sy
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   24a90:	4638      	mov	r0, r7
   24a92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	(void)unschedule_locked(dwork);
   24a94:	f7ff ff18 	bl	248c8 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   24a98:	4620      	mov	r0, r4
   24a9a:	f7ff ff2a 	bl	248f2 <cancel_async_locked>
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   24a9e:	4629      	mov	r1, r5
   24aa0:	4620      	mov	r0, r4
   24aa2:	f7fa ffb9 	bl	1fa18 <cancel_sync_locked>
   24aa6:	f386 8811 	msr	BASEPRI, r6
   24aaa:	f3bf 8f6f 	isb	sy
	if (need_wait) {
   24aae:	2800      	cmp	r0, #0
   24ab0:	d0ee      	beq.n	24a90 <k_work_cancel_delayable_sync+0x2e>
	return z_impl_k_sem_take(sem, timeout);
   24ab2:	f04f 32ff 	mov.w	r2, #4294967295
   24ab6:	f04f 33ff 	mov.w	r3, #4294967295
   24aba:	f105 0008 	add.w	r0, r5, #8
   24abe:	f7fa ff69 	bl	1f994 <z_impl_k_sem_take>
   24ac2:	e7e5      	b.n	24a90 <k_work_cancel_delayable_sync+0x2e>

00024ac4 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
   24ac4:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   24ac8:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   24aca:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   24acc:	2300      	movs	r3, #0
	node->prev = NULL;
   24ace:	e9c0 3300 	strd	r3, r3, [r0]
}
   24ad2:	4770      	bx	lr

00024ad4 <unpend_thread_no_timeout>:
{
   24ad4:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
   24ad6:	f7ff fff5 	bl	24ac4 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   24ada:	7b43      	ldrb	r3, [r0, #13]
   24adc:	f023 0302 	bic.w	r3, r3, #2
   24ae0:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
   24ae2:	2300      	movs	r3, #0
   24ae4:	6083      	str	r3, [r0, #8]
}
   24ae6:	bd08      	pop	{r3, pc}

00024ae8 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   24ae8:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   24aec:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   24af0:	4283      	cmp	r3, r0
		return b2 - b1;
   24af2:	bf14      	ite	ne
   24af4:	1ac0      	subne	r0, r0, r3
	return 0;
   24af6:	2000      	moveq	r0, #0
}
   24af8:	4770      	bx	lr

00024afa <z_thread_timeout>:
{
   24afa:	b510      	push	{r4, lr}
   24afc:	4601      	mov	r1, r0
	__asm__ volatile(
   24afe:	f04f 0340 	mov.w	r3, #64	; 0x40
   24b02:	f3ef 8411 	mrs	r4, BASEPRI
   24b06:	f383 8812 	msr	BASEPRI_MAX, r3
   24b0a:	f3bf 8f6f 	isb	sy
		if (!killed) {
   24b0e:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
   24b12:	f013 0f28 	tst.w	r3, #40	; 0x28
   24b16:	d10d      	bne.n	24b34 <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
   24b18:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   24b1c:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
   24b1e:	b10b      	cbz	r3, 24b24 <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
   24b20:	f7ff ffd8 	bl	24ad4 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   24b24:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
   24b28:	f023 0314 	bic.w	r3, r3, #20
   24b2c:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
   24b30:	f7fb f8f8 	bl	1fd24 <ready_thread>
	__asm__ volatile(
   24b34:	f384 8811 	msr	BASEPRI, r4
   24b38:	f3bf 8f6f 	isb	sy
}
   24b3c:	bd10      	pop	{r4, pc}

00024b3e <add_to_waitq_locked>:
{
   24b3e:	b538      	push	{r3, r4, r5, lr}
   24b40:	4604      	mov	r4, r0
   24b42:	460d      	mov	r5, r1
	unready_thread(thread);
   24b44:	f7fb f922 	bl	1fd8c <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   24b48:	7b63      	ldrb	r3, [r4, #13]
   24b4a:	f043 0302 	orr.w	r3, r3, #2
   24b4e:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   24b50:	b1e5      	cbz	r5, 24b8c <add_to_waitq_locked+0x4e>
		thread->base.pended_on = wait_q;
   24b52:	60a5      	str	r5, [r4, #8]
	return list->head == list;
   24b54:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   24b56:	429d      	cmp	r5, r3
   24b58:	d109      	bne.n	24b6e <add_to_waitq_locked+0x30>
	sys_dnode_t *const tail = list->tail;
   24b5a:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   24b5c:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   24b60:	601c      	str	r4, [r3, #0]
	list->tail = node;
   24b62:	606c      	str	r4, [r5, #4]
}
   24b64:	e012      	b.n	24b8c <add_to_waitq_locked+0x4e>
	return (node == list->tail) ? NULL : node->next;
   24b66:	686a      	ldr	r2, [r5, #4]
   24b68:	4293      	cmp	r3, r2
   24b6a:	d0f6      	beq.n	24b5a <add_to_waitq_locked+0x1c>
   24b6c:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   24b6e:	2b00      	cmp	r3, #0
   24b70:	d0f3      	beq.n	24b5a <add_to_waitq_locked+0x1c>
	int32_t b1 = thread_1->base.prio;
   24b72:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   24b76:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   24b7a:	428a      	cmp	r2, r1
   24b7c:	d0f3      	beq.n	24b66 <add_to_waitq_locked+0x28>
		if (z_sched_prio_cmp(thread, t) > 0) {
   24b7e:	4291      	cmp	r1, r2
   24b80:	ddf1      	ble.n	24b66 <add_to_waitq_locked+0x28>
	sys_dnode_t *const prev = successor->prev;
   24b82:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   24b84:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   24b88:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   24b8a:	605c      	str	r4, [r3, #4]
}
   24b8c:	bd38      	pop	{r3, r4, r5, pc}

00024b8e <z_ready_thread>:
{
   24b8e:	b510      	push	{r4, lr}
	__asm__ volatile(
   24b90:	f04f 0340 	mov.w	r3, #64	; 0x40
   24b94:	f3ef 8411 	mrs	r4, BASEPRI
   24b98:	f383 8812 	msr	BASEPRI_MAX, r3
   24b9c:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
   24ba0:	f7fb f8c0 	bl	1fd24 <ready_thread>
	__asm__ volatile(
   24ba4:	f384 8811 	msr	BASEPRI, r4
   24ba8:	f3bf 8f6f 	isb	sy
}
   24bac:	bd10      	pop	{r4, pc}

00024bae <z_unpend_thread_no_timeout>:
{
   24bae:	b508      	push	{r3, lr}
	__asm__ volatile(
   24bb0:	f04f 0340 	mov.w	r3, #64	; 0x40
   24bb4:	f3ef 8111 	mrs	r1, BASEPRI
   24bb8:	f383 8812 	msr	BASEPRI_MAX, r3
   24bbc:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   24bc0:	f7ff ff88 	bl	24ad4 <unpend_thread_no_timeout>
	__asm__ volatile(
   24bc4:	f381 8811 	msr	BASEPRI, r1
   24bc8:	f3bf 8f6f 	isb	sy
}
   24bcc:	bd08      	pop	{r3, pc}

00024bce <z_unpend1_no_timeout>:
{
   24bce:	b508      	push	{r3, lr}
   24bd0:	4603      	mov	r3, r0
	__asm__ volatile(
   24bd2:	f04f 0240 	mov.w	r2, #64	; 0x40
   24bd6:	f3ef 8111 	mrs	r1, BASEPRI
   24bda:	f382 8812 	msr	BASEPRI_MAX, r2
   24bde:	f3bf 8f6f 	isb	sy
	return list->head == list;
   24be2:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   24be4:	4283      	cmp	r3, r0
   24be6:	d007      	beq.n	24bf8 <z_unpend1_no_timeout+0x2a>
		if (thread != NULL) {
   24be8:	b108      	cbz	r0, 24bee <z_unpend1_no_timeout+0x20>
			unpend_thread_no_timeout(thread);
   24bea:	f7ff ff73 	bl	24ad4 <unpend_thread_no_timeout>
	__asm__ volatile(
   24bee:	f381 8811 	msr	BASEPRI, r1
   24bf2:	f3bf 8f6f 	isb	sy
}
   24bf6:	bd08      	pop	{r3, pc}
   24bf8:	2000      	movs	r0, #0
   24bfa:	e7f8      	b.n	24bee <z_unpend1_no_timeout+0x20>

00024bfc <z_unpend_first_thread>:
{
   24bfc:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   24bfe:	f04f 0340 	mov.w	r3, #64	; 0x40
   24c02:	f3ef 8511 	mrs	r5, BASEPRI
   24c06:	f383 8812 	msr	BASEPRI_MAX, r3
   24c0a:	f3bf 8f6f 	isb	sy
	return list->head == list;
   24c0e:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   24c10:	42a0      	cmp	r0, r4
   24c12:	d00d      	beq.n	24c30 <z_unpend_first_thread+0x34>
		if (thread != NULL) {
   24c14:	b134      	cbz	r4, 24c24 <z_unpend_first_thread+0x28>
			unpend_thread_no_timeout(thread);
   24c16:	4620      	mov	r0, r4
   24c18:	f7ff ff5c 	bl	24ad4 <unpend_thread_no_timeout>
   24c1c:	f104 0018 	add.w	r0, r4, #24
   24c20:	f000 f865 	bl	24cee <z_abort_timeout>
	__asm__ volatile(
   24c24:	f385 8811 	msr	BASEPRI, r5
   24c28:	f3bf 8f6f 	isb	sy
}
   24c2c:	4620      	mov	r0, r4
   24c2e:	bd38      	pop	{r3, r4, r5, pc}
   24c30:	2400      	movs	r4, #0
   24c32:	e7f7      	b.n	24c24 <z_unpend_first_thread+0x28>

00024c34 <z_unpend_thread>:
{
   24c34:	b510      	push	{r4, lr}
	__asm__ volatile(
   24c36:	f04f 0340 	mov.w	r3, #64	; 0x40
   24c3a:	f3ef 8411 	mrs	r4, BASEPRI
   24c3e:	f383 8812 	msr	BASEPRI_MAX, r3
   24c42:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   24c46:	f7ff ff45 	bl	24ad4 <unpend_thread_no_timeout>
	__asm__ volatile(
   24c4a:	f384 8811 	msr	BASEPRI, r4
   24c4e:	f3bf 8f6f 	isb	sy
}
   24c52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   24c56:	3018      	adds	r0, #24
   24c58:	f000 b849 	b.w	24cee <z_abort_timeout>

00024c5c <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   24c5c:	4603      	mov	r3, r0
   24c5e:	b920      	cbnz	r0, 24c6a <z_reschedule_irqlock+0xe>
   24c60:	f3ef 8205 	mrs	r2, IPSR
   24c64:	b90a      	cbnz	r2, 24c6a <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
   24c66:	f7f1 bac9 	b.w	161fc <arch_swap>
   24c6a:	f383 8811 	msr	BASEPRI, r3
   24c6e:	f3bf 8f6f 	isb	sy
}
   24c72:	4770      	bx	lr

00024c74 <z_reschedule_unlocked>:
	__asm__ volatile(
   24c74:	f04f 0340 	mov.w	r3, #64	; 0x40
   24c78:	f3ef 8011 	mrs	r0, BASEPRI
   24c7c:	f383 8812 	msr	BASEPRI_MAX, r3
   24c80:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   24c84:	f7ff bfea 	b.w	24c5c <z_reschedule_irqlock>

00024c88 <z_unpend_all>:
{
   24c88:	b538      	push	{r3, r4, r5, lr}
   24c8a:	4605      	mov	r5, r0
	int need_sched = 0;
   24c8c:	2000      	movs	r0, #0
	return list->head == list;
   24c8e:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   24c90:	42a5      	cmp	r5, r4
   24c92:	d000      	beq.n	24c96 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   24c94:	b904      	cbnz	r4, 24c98 <z_unpend_all+0x10>
}
   24c96:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   24c98:	4620      	mov	r0, r4
   24c9a:	f7ff ffcb 	bl	24c34 <z_unpend_thread>
		z_ready_thread(thread);
   24c9e:	4620      	mov	r0, r4
   24ca0:	f7ff ff75 	bl	24b8e <z_ready_thread>
		need_sched = 1;
   24ca4:	2001      	movs	r0, #1
   24ca6:	e7f2      	b.n	24c8e <z_unpend_all+0x6>

00024ca8 <z_sched_wake>:
{
   24ca8:	b538      	push	{r3, r4, r5, lr}
   24caa:	f04f 0340 	mov.w	r3, #64	; 0x40
   24cae:	f3ef 8511 	mrs	r5, BASEPRI
   24cb2:	f383 8812 	msr	BASEPRI_MAX, r3
   24cb6:	f3bf 8f6f 	isb	sy
	return list->head == list;
   24cba:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   24cbc:	42a0      	cmp	r0, r4
   24cbe:	d012      	beq.n	24ce6 <z_sched_wake+0x3e>
		if (thread != NULL) {
   24cc0:	b19c      	cbz	r4, 24cea <z_sched_wake+0x42>
   24cc2:	67e1      	str	r1, [r4, #124]	; 0x7c
	thread->base.swap_data = data;
   24cc4:	6162      	str	r2, [r4, #20]
			unpend_thread_no_timeout(thread);
   24cc6:	4620      	mov	r0, r4
   24cc8:	f7ff ff04 	bl	24ad4 <unpend_thread_no_timeout>
   24ccc:	f104 0018 	add.w	r0, r4, #24
   24cd0:	f000 f80d 	bl	24cee <z_abort_timeout>
			ready_thread(thread);
   24cd4:	4620      	mov	r0, r4
   24cd6:	f7fb f825 	bl	1fd24 <ready_thread>
			ret = true;
   24cda:	2001      	movs	r0, #1
	__asm__ volatile(
   24cdc:	f385 8811 	msr	BASEPRI, r5
   24ce0:	f3bf 8f6f 	isb	sy
}
   24ce4:	bd38      	pop	{r3, r4, r5, pc}
	bool ret = false;
   24ce6:	2000      	movs	r0, #0
   24ce8:	e7f8      	b.n	24cdc <z_sched_wake+0x34>
   24cea:	4620      	mov	r0, r4
   24cec:	e7f6      	b.n	24cdc <z_sched_wake+0x34>

00024cee <z_abort_timeout>:
{
   24cee:	b510      	push	{r4, lr}
	__asm__ volatile(
   24cf0:	f04f 0240 	mov.w	r2, #64	; 0x40
   24cf4:	f3ef 8411 	mrs	r4, BASEPRI
   24cf8:	f382 8812 	msr	BASEPRI_MAX, r2
   24cfc:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   24d00:	6803      	ldr	r3, [r0, #0]
   24d02:	b13b      	cbz	r3, 24d14 <z_abort_timeout+0x26>
			remove_timeout(to);
   24d04:	f7fb fb48 	bl	20398 <remove_timeout>
			ret = 0;
   24d08:	2000      	movs	r0, #0
	__asm__ volatile(
   24d0a:	f384 8811 	msr	BASEPRI, r4
   24d0e:	f3bf 8f6f 	isb	sy
}
   24d12:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   24d14:	f06f 0015 	mvn.w	r0, #21
   24d18:	e7f7      	b.n	24d0a <z_abort_timeout+0x1c>

00024d1a <z_get_next_timeout_expiry>:
{
   24d1a:	b510      	push	{r4, lr}
	__asm__ volatile(
   24d1c:	f04f 0340 	mov.w	r3, #64	; 0x40
   24d20:	f3ef 8411 	mrs	r4, BASEPRI
   24d24:	f383 8812 	msr	BASEPRI_MAX, r3
   24d28:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   24d2c:	f7fb fb0c 	bl	20348 <next_timeout>
	__asm__ volatile(
   24d30:	f384 8811 	msr	BASEPRI, r4
   24d34:	f3bf 8f6f 	isb	sy
}
   24d38:	bd10      	pop	{r4, pc}

00024d3a <z_set_timeout_expiry>:
{
   24d3a:	b570      	push	{r4, r5, r6, lr}
   24d3c:	4604      	mov	r4, r0
   24d3e:	460d      	mov	r5, r1
	__asm__ volatile(
   24d40:	f04f 0340 	mov.w	r3, #64	; 0x40
   24d44:	f3ef 8611 	mrs	r6, BASEPRI
   24d48:	f383 8812 	msr	BASEPRI_MAX, r3
   24d4c:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   24d50:	f7fb fafa 	bl	20348 <next_timeout>
			      || (ticks <= next_to);
   24d54:	2801      	cmp	r0, #1
   24d56:	dd07      	ble.n	24d68 <z_set_timeout_expiry+0x2e>
   24d58:	42a0      	cmp	r0, r4
   24d5a:	db05      	blt.n	24d68 <z_set_timeout_expiry+0x2e>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   24d5c:	42a0      	cmp	r0, r4
   24d5e:	4629      	mov	r1, r5
   24d60:	bfa8      	it	ge
   24d62:	4620      	movge	r0, r4
   24d64:	f7f8 f9fc 	bl	1d160 <sys_clock_set_timeout>
	__asm__ volatile(
   24d68:	f386 8811 	msr	BASEPRI, r6
   24d6c:	f3bf 8f6f 	isb	sy
}
   24d70:	bd70      	pop	{r4, r5, r6, pc}

00024d72 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   24d72:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   24d74:	f7fb fc04 	bl	20580 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   24d78:	bd08      	pop	{r3, pc}

00024d7a <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   24d7a:	f7fb bc01 	b.w	20580 <sys_clock_tick_get>

00024d7e <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   24d7e:	b108      	cbz	r0, 24d84 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   24d80:	f7f2 b822 	b.w	16dc8 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   24d84:	4770      	bx	lr

00024d86 <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   24d86:	f1b1 3fff 	cmp.w	r1, #4294967295
   24d8a:	bf08      	it	eq
   24d8c:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   24d90:	b538      	push	{r3, r4, r5, lr}
   24d92:	460c      	mov	r4, r1
   24d94:	4605      	mov	r5, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   24d96:	d014      	beq.n	24dc2 <sys_clock_timeout_end_calc+0x3c>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   24d98:	4308      	orrs	r0, r1
   24d9a:	d103      	bne.n	24da4 <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   24d9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   24da0:	f7fb bbee 	b.w	20580 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   24da4:	f06f 0001 	mvn.w	r0, #1
   24da8:	1b40      	subs	r0, r0, r5
   24daa:	f04f 33ff 	mov.w	r3, #4294967295
   24dae:	eb63 0101 	sbc.w	r1, r3, r1
   24db2:	2900      	cmp	r1, #0
   24db4:	da04      	bge.n	24dc0 <sys_clock_timeout_end_calc+0x3a>
		return sys_clock_tick_get() + MAX(1, dt);
   24db6:	f7fb fbe3 	bl	20580 <sys_clock_tick_get>
   24dba:	1940      	adds	r0, r0, r5
   24dbc:	eb41 0104 	adc.w	r1, r1, r4
}
   24dc0:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   24dc2:	f04f 30ff 	mov.w	r0, #4294967295
   24dc6:	4601      	mov	r1, r0
   24dc8:	e7fa      	b.n	24dc0 <sys_clock_timeout_end_calc+0x3a>

00024dca <k_timer_init>:
	timer->status = 0U;
   24dca:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   24dcc:	e9c0 1208 	strd	r1, r2, [r0, #32]
   24dd0:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
   24dd4:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   24dd8:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   24ddc:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   24dde:	6343      	str	r3, [r0, #52]	; 0x34
}
   24de0:	4770      	bx	lr

00024de2 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   24de2:	b510      	push	{r4, lr}
   24de4:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
   24de6:	f7ff ff82 	bl	24cee <z_abort_timeout>

	if (inactive) {
   24dea:	b9b0      	cbnz	r0, 24e1a <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
   24dec:	6a63      	ldr	r3, [r4, #36]	; 0x24
   24dee:	b10b      	cbz	r3, 24df4 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   24df0:	4620      	mov	r0, r4
   24df2:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   24df4:	f104 0018 	add.w	r0, r4, #24
   24df8:	f7ff fee9 	bl	24bce <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   24dfc:	b168      	cbz	r0, 24e1a <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
   24dfe:	f7ff fec6 	bl	24b8e <z_ready_thread>
	__asm__ volatile(
   24e02:	f04f 0340 	mov.w	r3, #64	; 0x40
   24e06:	f3ef 8011 	mrs	r0, BASEPRI
   24e0a:	f383 8812 	msr	BASEPRI_MAX, r3
   24e0e:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
   24e12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   24e16:	f7ff bf21 	b.w	24c5c <z_reschedule_irqlock>
   24e1a:	bd10      	pop	{r4, pc}

00024e1c <add_event>:
{
   24e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24e1e:	460d      	mov	r5, r1
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   24e20:	e9d0 1300 	ldrd	r1, r3, [r0]
   24e24:	4288      	cmp	r0, r1
   24e26:	4604      	mov	r4, r0
   24e28:	d105      	bne.n	24e36 <add_event+0x1a>
	sys_dnode_t *const tail = list->tail;
   24e2a:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   24e2c:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   24e30:	601d      	str	r5, [r3, #0]
	list->tail = node;
   24e32:	6065      	str	r5, [r4, #4]
   24e34:	e01d      	b.n	24e72 <add_event+0x56>
	if ((pending == NULL) ||
   24e36:	2b00      	cmp	r3, #0
   24e38:	d0f7      	beq.n	24e2a <add_event+0xe>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   24e3a:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   24e3c:	b100      	cbz	r0, 24e40 <add_event+0x24>
   24e3e:	3860      	subs	r0, #96	; 0x60
   24e40:	f1a2 0760 	sub.w	r7, r2, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   24e44:	4639      	mov	r1, r7
   24e46:	f7ff fe4f 	bl	24ae8 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   24e4a:	2800      	cmp	r0, #0
   24e4c:	dced      	bgt.n	24e2a <add_event+0xe>
	return list->head == list;
   24e4e:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   24e50:	42b4      	cmp	r4, r6
   24e52:	d0ea      	beq.n	24e2a <add_event+0xe>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   24e54:	2e00      	cmp	r6, #0
   24e56:	d0e8      	beq.n	24e2a <add_event+0xe>
		if (z_sched_prio_cmp(poller_thread(poller),
   24e58:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   24e5a:	b101      	cbz	r1, 24e5e <add_event+0x42>
   24e5c:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   24e5e:	4638      	mov	r0, r7
   24e60:	f7ff fe42 	bl	24ae8 <z_sched_prio_cmp>
   24e64:	2800      	cmp	r0, #0
   24e66:	dd05      	ble.n	24e74 <add_event+0x58>
	sys_dnode_t *const prev = successor->prev;
   24e68:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   24e6a:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   24e6e:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   24e70:	6075      	str	r5, [r6, #4]
}
   24e72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   24e74:	6863      	ldr	r3, [r4, #4]
   24e76:	429e      	cmp	r6, r3
   24e78:	d0d7      	beq.n	24e2a <add_event+0xe>
   24e7a:	6836      	ldr	r6, [r6, #0]
   24e7c:	e7ea      	b.n	24e54 <add_event+0x38>

00024e7e <register_events>:
{
   24e7e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   24e82:	2500      	movs	r5, #0
{
   24e84:	468b      	mov	fp, r1
   24e86:	4614      	mov	r4, r2
   24e88:	461f      	mov	r7, r3
   24e8a:	4682      	mov	sl, r0
	int events_registered = 0;
   24e8c:	462e      	mov	r6, r5
	event->poller = NULL;
   24e8e:	46a8      	mov	r8, r5
	for (int ii = 0; ii < num_events; ii++) {
   24e90:	455d      	cmp	r5, fp
   24e92:	db02      	blt.n	24e9a <register_events+0x1c>
}
   24e94:	4630      	mov	r0, r6
   24e96:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24e9a:	f04f 0340 	mov.w	r3, #64	; 0x40
   24e9e:	f3ef 8911 	mrs	r9, BASEPRI
   24ea2:	f383 8812 	msr	BASEPRI_MAX, r3
   24ea6:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   24eaa:	f89a 300d 	ldrb.w	r3, [sl, #13]
   24eae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   24eb2:	3b01      	subs	r3, #1
   24eb4:	2b07      	cmp	r3, #7
   24eb6:	d80f      	bhi.n	24ed8 <register_events+0x5a>
   24eb8:	e8df f003 	tbb	[pc, r3]
   24ebc:	0a0e041e 	.word	0x0a0e041e
   24ec0:	250e0e0e 	.word	0x250e0e0e
		if (k_sem_count_get(event->sem) > 0U) {
   24ec4:	f8da 3010 	ldr.w	r3, [sl, #16]
   24ec8:	689b      	ldr	r3, [r3, #8]
   24eca:	b12b      	cbz	r3, 24ed8 <register_events+0x5a>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   24ecc:	2302      	movs	r3, #2
   24ece:	e020      	b.n	24f12 <register_events+0x94>
		if (!k_queue_is_empty(event->queue)) {
   24ed0:	f8da 3010 	ldr.w	r3, [sl, #16]
   24ed4:	681b      	ldr	r3, [r3, #0]
   24ed6:	bb8b      	cbnz	r3, 24f3c <register_events+0xbe>
		} else if (!just_check && poller->is_polling) {
   24ed8:	bb47      	cbnz	r7, 24f2c <register_events+0xae>
   24eda:	7823      	ldrb	r3, [r4, #0]
   24edc:	b333      	cbz	r3, 24f2c <register_events+0xae>
	switch (event->type) {
   24ede:	f89a 300d 	ldrb.w	r3, [sl, #13]
   24ee2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   24ee6:	3b01      	subs	r3, #1
   24ee8:	2b07      	cmp	r3, #7
   24eea:	d830      	bhi.n	24f4e <register_events+0xd0>
   24eec:	e8df f003 	tbb	[pc, r3]
   24ef0:	282f2833 	.word	0x282f2833
   24ef4:	382f2f2f 	.word	0x382f2f2f
		if (event->signal->signaled != 0U) {
   24ef8:	f8da 3010 	ldr.w	r3, [sl, #16]
   24efc:	689b      	ldr	r3, [r3, #8]
   24efe:	2b00      	cmp	r3, #0
   24f00:	d0ea      	beq.n	24ed8 <register_events+0x5a>
			*state = K_POLL_STATE_SIGNALED;
   24f02:	2301      	movs	r3, #1
   24f04:	e005      	b.n	24f12 <register_events+0x94>
		if (event->msgq->used_msgs > 0) {
   24f06:	f8da 3010 	ldr.w	r3, [sl, #16]
   24f0a:	6a1b      	ldr	r3, [r3, #32]
   24f0c:	2b00      	cmp	r3, #0
   24f0e:	d0e3      	beq.n	24ed8 <register_events+0x5a>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   24f10:	2310      	movs	r3, #16
	event->state |= state;
   24f12:	f8da 200c 	ldr.w	r2, [sl, #12]
	event->poller = NULL;
   24f16:	f8ca 8008 	str.w	r8, [sl, #8]
	event->state |= state;
   24f1a:	f3c2 3186 	ubfx	r1, r2, #14, #7
   24f1e:	430b      	orrs	r3, r1
   24f20:	f363 3294 	bfi	r2, r3, #14, #7
   24f24:	f8ca 200c 	str.w	r2, [sl, #12]
			poller->is_polling = false;
   24f28:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
   24f2c:	f389 8811 	msr	BASEPRI, r9
   24f30:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   24f34:	3501      	adds	r5, #1
   24f36:	f10a 0a14 	add.w	sl, sl, #20
   24f3a:	e7a9      	b.n	24e90 <register_events+0x12>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   24f3c:	2304      	movs	r3, #4
   24f3e:	e7e8      	b.n	24f12 <register_events+0x94>
		add_event(&event->queue->poll_events, event, poller);
   24f40:	f8da 0010 	ldr.w	r0, [sl, #16]
   24f44:	4622      	mov	r2, r4
   24f46:	4651      	mov	r1, sl
   24f48:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
   24f4a:	f7ff ff67 	bl	24e1c <add_event>
	event->poller = poller;
   24f4e:	f8ca 4008 	str.w	r4, [sl, #8]
			events_registered += 1;
   24f52:	3601      	adds	r6, #1
   24f54:	e7ea      	b.n	24f2c <register_events+0xae>
		add_event(&event->signal->poll_events, event, poller);
   24f56:	f8da 0010 	ldr.w	r0, [sl, #16]
   24f5a:	4622      	mov	r2, r4
   24f5c:	4651      	mov	r1, sl
   24f5e:	e7f4      	b.n	24f4a <register_events+0xcc>
		add_event(&event->msgq->poll_events, event, poller);
   24f60:	f8da 0010 	ldr.w	r0, [sl, #16]
   24f64:	4622      	mov	r2, r4
   24f66:	4651      	mov	r1, sl
   24f68:	3024      	adds	r0, #36	; 0x24
   24f6a:	e7ee      	b.n	24f4a <register_events+0xcc>

00024f6c <signal_poll_event>:
{
   24f6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   24f70:	6884      	ldr	r4, [r0, #8]
{
   24f72:	4605      	mov	r5, r0
   24f74:	460e      	mov	r6, r1
	if (poller != NULL) {
   24f76:	b144      	cbz	r4, 24f8a <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   24f78:	7863      	ldrb	r3, [r4, #1]
   24f7a:	2b01      	cmp	r3, #1
   24f7c:	d12e      	bne.n	24fdc <signal_poll_event+0x70>
	if (!z_is_thread_pending(thread)) {
   24f7e:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   24f82:	f013 0302 	ands.w	r3, r3, #2
   24f86:	d10a      	bne.n	24f9e <signal_poll_event+0x32>
		poller->is_polling = false;
   24f88:	7023      	strb	r3, [r4, #0]
	event->state |= state;
   24f8a:	68eb      	ldr	r3, [r5, #12]
   24f8c:	f3c3 3286 	ubfx	r2, r3, #14, #7
   24f90:	4316      	orrs	r6, r2
	event->poller = NULL;
   24f92:	2000      	movs	r0, #0
	event->state |= state;
   24f94:	f366 3394 	bfi	r3, r6, #14, #7
	event->poller = NULL;
   24f98:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   24f9a:	60eb      	str	r3, [r5, #12]
	return retcode;
   24f9c:	e03e      	b.n	2501c <signal_poll_event+0xb0>
	if (z_is_thread_timeout_expired(thread)) {
   24f9e:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   24fa2:	f1b3 3fff 	cmp.w	r3, #4294967295
   24fa6:	bf08      	it	eq
   24fa8:	f112 0f02 	cmneq.w	r2, #2
   24fac:	d032      	beq.n	25014 <signal_poll_event+0xa8>
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   24fae:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   24fb2:	4640      	mov	r0, r8
   24fb4:	f7ff fe3e 	bl	24c34 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   24fb8:	2e08      	cmp	r6, #8
   24fba:	bf0c      	ite	eq
   24fbc:	f06f 0303 	mvneq.w	r3, #3
   24fc0:	2300      	movne	r3, #0
   24fc2:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   24fc4:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   24fc8:	06db      	lsls	r3, r3, #27
   24fca:	d109      	bne.n	24fe0 <signal_poll_event+0x74>
   24fcc:	f854 7c48 	ldr.w	r7, [r4, #-72]
   24fd0:	b937      	cbnz	r7, 24fe0 <signal_poll_event+0x74>
	z_ready_thread(thread);
   24fd2:	4640      	mov	r0, r8
   24fd4:	f7ff fddb 	bl	24b8e <z_ready_thread>
		poller->is_polling = false;
   24fd8:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   24fda:	e7d6      	b.n	24f8a <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   24fdc:	2b02      	cmp	r3, #2
   24fde:	d001      	beq.n	24fe4 <signal_poll_event+0x78>
		poller->is_polling = false;
   24fe0:	2300      	movs	r3, #0
   24fe2:	e7d1      	b.n	24f88 <signal_poll_event+0x1c>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   24fe4:	7823      	ldrb	r3, [r4, #0]
   24fe6:	2b00      	cmp	r3, #0
   24fe8:	d0cf      	beq.n	24f8a <signal_poll_event+0x1e>
   24fea:	f854 7c04 	ldr.w	r7, [r4, #-4]
   24fee:	2f00      	cmp	r7, #0
   24ff0:	d0f2      	beq.n	24fd8 <signal_poll_event+0x6c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   24ff2:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   24ff6:	f1a4 0914 	sub.w	r9, r4, #20
   24ffa:	f104 0014 	add.w	r0, r4, #20
   24ffe:	f7ff fe76 	bl	24cee <z_abort_timeout>
		twork->poll_result = 0;
   25002:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		z_work_submit_to_queue(work_q, &twork->work);
   25006:	4649      	mov	r1, r9
   25008:	4638      	mov	r0, r7
   2500a:	f7ff fcdd 	bl	249c8 <z_work_submit_to_queue>
		poller->is_polling = false;
   2500e:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   25012:	e7ba      	b.n	24f8a <signal_poll_event+0x1e>
		poller->is_polling = false;
   25014:	2300      	movs	r3, #0
   25016:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
   25018:	f06f 000a 	mvn.w	r0, #10
}
   2501c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00025020 <clear_event_registrations>:
	while (num_events--) {
   25020:	2314      	movs	r3, #20
{
   25022:	b5f0      	push	{r4, r5, r6, r7, lr}
   25024:	fb03 0001 	mla	r0, r3, r1, r0
	event->poller = NULL;
   25028:	2400      	movs	r4, #0
	switch (event->type) {
   2502a:	f44f 768b 	mov.w	r6, #278	; 0x116
	while (num_events--) {
   2502e:	b901      	cbnz	r1, 25032 <clear_event_registrations+0x12>
}
   25030:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (event->type) {
   25032:	f810 3c07 	ldrb.w	r3, [r0, #-7]
	event->poller = NULL;
   25036:	f840 4c0c 	str.w	r4, [r0, #-12]
	switch (event->type) {
   2503a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   2503e:	2b08      	cmp	r3, #8
   25040:	f1a0 0714 	sub.w	r7, r0, #20
   25044:	d80c      	bhi.n	25060 <clear_event_registrations+0x40>
   25046:	fa26 f303 	lsr.w	r3, r6, r3
   2504a:	07db      	lsls	r3, r3, #31
   2504c:	d508      	bpl.n	25060 <clear_event_registrations+0x40>
	return node->next != NULL;
   2504e:	f850 3c14 	ldr.w	r3, [r0, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   25052:	b12b      	cbz	r3, 25060 <clear_event_registrations+0x40>
	sys_dnode_t *const prev = node->prev;
   25054:	f850 5c10 	ldr.w	r5, [r0, #-16]
	prev->next = next;
   25058:	602b      	str	r3, [r5, #0]
	next->prev = prev;
   2505a:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   2505c:	e940 4405 	strd	r4, r4, [r0, #-20]
   25060:	f382 8811 	msr	BASEPRI, r2
   25064:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   25068:	f04f 0340 	mov.w	r3, #64	; 0x40
   2506c:	f3ef 8211 	mrs	r2, BASEPRI
   25070:	f383 8812 	msr	BASEPRI_MAX, r3
   25074:	f3bf 8f6f 	isb	sy
   25078:	3901      	subs	r1, #1
   2507a:	4638      	mov	r0, r7
   2507c:	e7d7      	b.n	2502e <clear_event_registrations+0xe>

0002507e <k_poll_event_init>:
{
   2507e:	b510      	push	{r4, lr}
	event->type = type;
   25080:	0552      	lsls	r2, r2, #21
   25082:	0209      	lsls	r1, r1, #8
   25084:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
   25088:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
   2508c:	430a      	orrs	r2, r1
   2508e:	7b01      	ldrb	r1, [r0, #12]
	event->poller = NULL;
   25090:	2400      	movs	r4, #0
	event->type = type;
   25092:	430a      	orrs	r2, r1
	event->obj = obj;
   25094:	e9c0 2303 	strd	r2, r3, [r0, #12]
	event->poller = NULL;
   25098:	6084      	str	r4, [r0, #8]
}
   2509a:	bd10      	pop	{r4, pc}

0002509c <z_handle_obj_poll_events>:
{
   2509c:	4603      	mov	r3, r0
	return list->head == list;
   2509e:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   250a0:	4283      	cmp	r3, r0
   250a2:	d008      	beq.n	250b6 <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   250a4:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   250a8:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   250aa:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   250ac:	2300      	movs	r3, #0
	node->prev = NULL;
   250ae:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   250b2:	f7ff bf5b 	b.w	24f6c <signal_poll_event>
}
   250b6:	4770      	bx	lr

000250b8 <z_impl_k_poll_signal_init>:
	sig->signaled = 0U;
   250b8:	2300      	movs	r3, #0
	list->tail = (sys_dnode_t *)list;
   250ba:	e9c0 0000 	strd	r0, r0, [r0]
   250be:	6083      	str	r3, [r0, #8]
}
   250c0:	4770      	bx	lr

000250c2 <z_impl_k_poll_signal_reset>:
	sig->signaled = 0U;
   250c2:	2300      	movs	r3, #0
   250c4:	6083      	str	r3, [r0, #8]
}
   250c6:	4770      	bx	lr

000250c8 <k_free>:
	if (ptr != NULL) {
   250c8:	b120      	cbz	r0, 250d4 <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   250ca:	1f01      	subs	r1, r0, #4
   250cc:	f850 0c04 	ldr.w	r0, [r0, #-4]
   250d0:	f7ff bad4 	b.w	2467c <k_heap_free>
}
   250d4:	4770      	bx	lr

000250d6 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   250d6:	4770      	bx	lr

000250d8 <fabs>:
   250d8:	ec51 0b10 	vmov	r0, r1, d0
   250dc:	4602      	mov	r2, r0
   250de:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   250e2:	ec43 2b10 	vmov	d0, r2, r3
   250e6:	4770      	bx	lr

000250e8 <fmax>:
   250e8:	b508      	push	{r3, lr}
   250ea:	ed2d 8b04 	vpush	{d8-d9}
   250ee:	eeb0 8a40 	vmov.f32	s16, s0
   250f2:	eef0 8a60 	vmov.f32	s17, s1
   250f6:	eeb0 9a41 	vmov.f32	s18, s2
   250fa:	eef0 9a61 	vmov.f32	s19, s3
   250fe:	f7fb ff1f 	bl	20f40 <__fpclassifyd>
   25102:	b950      	cbnz	r0, 2511a <fmax+0x32>
   25104:	eeb0 8a49 	vmov.f32	s16, s18
   25108:	eef0 8a69 	vmov.f32	s17, s19
   2510c:	eeb0 0a48 	vmov.f32	s0, s16
   25110:	eef0 0a68 	vmov.f32	s1, s17
   25114:	ecbd 8b04 	vpop	{d8-d9}
   25118:	bd08      	pop	{r3, pc}
   2511a:	eeb0 0a49 	vmov.f32	s0, s18
   2511e:	eef0 0a69 	vmov.f32	s1, s19
   25122:	f7fb ff0d 	bl	20f40 <__fpclassifyd>
   25126:	2800      	cmp	r0, #0
   25128:	d0f0      	beq.n	2510c <fmax+0x24>
   2512a:	ec53 2b19 	vmov	r2, r3, d9
   2512e:	ec51 0b18 	vmov	r0, r1, d8
   25132:	f7db fc31 	bl	998 <__aeabi_dcmpgt>
   25136:	2800      	cmp	r0, #0
   25138:	d0e4      	beq.n	25104 <fmax+0x1c>
   2513a:	e7e7      	b.n	2510c <fmax+0x24>

0002513c <fmin>:
   2513c:	b508      	push	{r3, lr}
   2513e:	ed2d 8b04 	vpush	{d8-d9}
   25142:	eeb0 8a40 	vmov.f32	s16, s0
   25146:	eef0 8a60 	vmov.f32	s17, s1
   2514a:	eeb0 9a41 	vmov.f32	s18, s2
   2514e:	eef0 9a61 	vmov.f32	s19, s3
   25152:	f7fb fef5 	bl	20f40 <__fpclassifyd>
   25156:	b950      	cbnz	r0, 2516e <fmin+0x32>
   25158:	eeb0 8a49 	vmov.f32	s16, s18
   2515c:	eef0 8a69 	vmov.f32	s17, s19
   25160:	eeb0 0a48 	vmov.f32	s0, s16
   25164:	eef0 0a68 	vmov.f32	s1, s17
   25168:	ecbd 8b04 	vpop	{d8-d9}
   2516c:	bd08      	pop	{r3, pc}
   2516e:	eeb0 0a49 	vmov.f32	s0, s18
   25172:	eef0 0a69 	vmov.f32	s1, s19
   25176:	f7fb fee3 	bl	20f40 <__fpclassifyd>
   2517a:	2800      	cmp	r0, #0
   2517c:	d0f0      	beq.n	25160 <fmin+0x24>
   2517e:	ec53 2b19 	vmov	r2, r3, d9
   25182:	ec51 0b18 	vmov	r0, r1, d8
   25186:	f7db fbe9 	bl	95c <__aeabi_dcmplt>
   2518a:	2800      	cmp	r0, #0
   2518c:	d0e4      	beq.n	25158 <fmin+0x1c>
   2518e:	e7e7      	b.n	25160 <fmin+0x24>

00025190 <finite>:
   25190:	b082      	sub	sp, #8
   25192:	ed8d 0b00 	vstr	d0, [sp]
   25196:	9801      	ldr	r0, [sp, #4]
   25198:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
   2519c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
   251a0:	0fc0      	lsrs	r0, r0, #31
   251a2:	b002      	add	sp, #8
   251a4:	4770      	bx	lr

000251a6 <memcmp>:
   251a6:	b510      	push	{r4, lr}
   251a8:	3901      	subs	r1, #1
   251aa:	4402      	add	r2, r0
   251ac:	4290      	cmp	r0, r2
   251ae:	d101      	bne.n	251b4 <memcmp+0xe>
   251b0:	2000      	movs	r0, #0
   251b2:	e005      	b.n	251c0 <memcmp+0x1a>
   251b4:	7803      	ldrb	r3, [r0, #0]
   251b6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   251ba:	42a3      	cmp	r3, r4
   251bc:	d001      	beq.n	251c2 <memcmp+0x1c>
   251be:	1b18      	subs	r0, r3, r4
   251c0:	bd10      	pop	{r4, pc}
   251c2:	3001      	adds	r0, #1
   251c4:	e7f2      	b.n	251ac <memcmp+0x6>

000251c6 <memcpy>:
   251c6:	440a      	add	r2, r1
   251c8:	4291      	cmp	r1, r2
   251ca:	f100 33ff 	add.w	r3, r0, #4294967295
   251ce:	d100      	bne.n	251d2 <memcpy+0xc>
   251d0:	4770      	bx	lr
   251d2:	b510      	push	{r4, lr}
   251d4:	f811 4b01 	ldrb.w	r4, [r1], #1
   251d8:	f803 4f01 	strb.w	r4, [r3, #1]!
   251dc:	4291      	cmp	r1, r2
   251de:	d1f9      	bne.n	251d4 <memcpy+0xe>
   251e0:	bd10      	pop	{r4, pc}

000251e2 <memset>:
   251e2:	4402      	add	r2, r0
   251e4:	4603      	mov	r3, r0
   251e6:	4293      	cmp	r3, r2
   251e8:	d100      	bne.n	251ec <memset+0xa>
   251ea:	4770      	bx	lr
   251ec:	f803 1b01 	strb.w	r1, [r3], #1
   251f0:	e7f9      	b.n	251e6 <memset+0x4>

000251f2 <strcpy>:
   251f2:	4603      	mov	r3, r0
   251f4:	f811 2b01 	ldrb.w	r2, [r1], #1
   251f8:	f803 2b01 	strb.w	r2, [r3], #1
   251fc:	2a00      	cmp	r2, #0
   251fe:	d1f9      	bne.n	251f4 <strcpy+0x2>
   25200:	4770      	bx	lr

00025202 <strncpy>:
   25202:	b510      	push	{r4, lr}
   25204:	3901      	subs	r1, #1
   25206:	4603      	mov	r3, r0
   25208:	b132      	cbz	r2, 25218 <strncpy+0x16>
   2520a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   2520e:	f803 4b01 	strb.w	r4, [r3], #1
   25212:	3a01      	subs	r2, #1
   25214:	2c00      	cmp	r4, #0
   25216:	d1f7      	bne.n	25208 <strncpy+0x6>
   25218:	441a      	add	r2, r3
   2521a:	2100      	movs	r1, #0
   2521c:	4293      	cmp	r3, r2
   2521e:	d100      	bne.n	25222 <strncpy+0x20>
   25220:	bd10      	pop	{r4, pc}
   25222:	f803 1b01 	strb.w	r1, [r3], #1
   25226:	e7f9      	b.n	2521c <strncpy+0x1a>

00025228 <strnlen>:
   25228:	b510      	push	{r4, lr}
   2522a:	4602      	mov	r2, r0
   2522c:	4401      	add	r1, r0
   2522e:	428a      	cmp	r2, r1
   25230:	4613      	mov	r3, r2
   25232:	d003      	beq.n	2523c <strnlen+0x14>
   25234:	781c      	ldrb	r4, [r3, #0]
   25236:	3201      	adds	r2, #1
   25238:	2c00      	cmp	r4, #0
   2523a:	d1f8      	bne.n	2522e <strnlen+0x6>
   2523c:	1a18      	subs	r0, r3, r0
   2523e:	bd10      	pop	{r4, pc}
