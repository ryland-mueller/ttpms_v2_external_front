
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
   0:	00 16 00 20 b9 13 00 00 d5 47 00 00 71 13 00 00     ... .....G..q...
	const char *s;
	bool parsing = false;
	/* Flag indicates that rw strings are stored as array with positions,
	 * instead of appending them to the package.
	 */
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
  10:	71 13 00 00 71 13 00 00 71 13 00 00 00 00 00 00     q...q...q.......
	...

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
  2c:	cd 0f 00 00 71 13 00 00 00 00 00 00 75 0f 00 00     ....q.......u...
	unsigned int s_ro_cnt = 0; /* number of ro strings */
  3c:	71 13 00 00                                         q...

00000040 <_irq_vector_table>:
	unsigned int s_rw_cnt = 0; /* number of rw strings */
  40:	a5 10 00 00 a5 10 00 00 a5 10 00 00 a5 10 00 00     ................

		/* copy va_list data over to our buffer */
		if (is_str_arg) {
			s = va_arg(ap, char *);
process_string:
			if (buf0 != NULL) {
  50:	a5 10 00 00 a5 10 00 00 a5 10 00 00 a5 10 00 00     ................
			}

			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);

			if (is_ro && !do_ro) {
  60:	a5 10 00 00 a5 10 00 00 a5 10 00 00 a5 10 00 00     ................
				 * In the do_ro case we must consider
				 * room for possible STR_POS_RO_FLAG.
				 * Otherwise the index range is 8 bits
				 * and any overflow is caught later.
				 */
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
  70:	a5 10 00 00 a5 10 00 00 a5 10 00 00 a5 10 00 00     ................
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
					__ASSERT(false, "str_ptr_pos[] too small");
					return -EINVAL;
				}

				if (buf0 != NULL) {
  80:	a5 10 00 00 a5 10 00 00 a5 10 00 00 a5 10 00 00     ................
					/*
					 * Remember string pointer location.
					 * We will append non-ro strings later.
					 */
					str_ptr_pos[s_idx] = s_ptr_idx;
  90:	a5 10 00 00 a5 10 00 00 a5 10 00 00 a5 10 00 00     ................
					str_ptr_arg[s_idx] = arg_idx;
					if (is_ro) {
						/* flag read-only string. */
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
  a0:	a5 10 00 00 a5 10 00 00 a5 10 00 00 a5 10 00 00     ................
					 * and size of the pointer position prefix.
					 */
					len += strlen(s) + 1 + 1;
				}

				s_idx++;
  b0:	a5 10 00 00 a5 10 00 00 a5 10 00 00 a5 10 00 00     ................
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
  c0:	a5 10 00 00 a5 10 00 00 a5 10 00 00 a5 10 00 00     ................
				parsing = false;
  d0:	a5 10 00 00 a5 10 00 00 a5 10 00 00 a5 10 00 00     ................
					arg_idx++;
  e0:	a5 10 00 00 a5 10 00 00 a5 10 00 00 a5 10 00 00     ................
			switch (*fmt) {
  f0:	a5 10 00 00 a5 10 00 00 a5 10 00 00 a5 10 00 00     ................

Disassembly of section text:

00000100 <__aeabi_uldivmod>:
     100:	b953      	cbnz	r3, 118 <__aeabi_uldivmod+0x18>
     102:	b94a      	cbnz	r2, 118 <__aeabi_uldivmod+0x18>
     104:	2900      	cmp	r1, #0
     106:	bf08      	it	eq
     108:	2800      	cmpeq	r0, #0
     10a:	bf1c      	itt	ne
     10c:	f04f 31ff 	movne.w	r1, #4294967295
     110:	f04f 30ff 	movne.w	r0, #4294967295
     114:	f000 b80c 	b.w	130 <__aeabi_idiv0>
				parsing = false;
     118:	f1ad 0c08 	sub.w	ip, sp, #8
			switch (*fmt) {
     11c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
				arg_idx--;
     120:	f000 f808 	bl	134 <__udivmoddi4>
				parsing = false;
     124:	f8dd e004 	ldr.w	lr, [sp, #4]
			switch (*fmt) {
     128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
				parsing = false;
     12c:	b004      	add	sp, #16
			switch (*fmt) {
     12e:	4770      	bx	lr

00000130 <__aeabi_idiv0>:
     130:	4770      	bx	lr
     132:	bf00      	nop

00000134 <__udivmoddi4>:
     134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			if (*++fmt == '\0') {
     138:	4686      	mov	lr, r0
     13a:	468c      	mov	ip, r1
     13c:	4608      	mov	r0, r1
     13e:	9e08      	ldr	r6, [sp, #32]
     140:	4615      	mov	r5, r2
			if (!parsing) {
     142:	4674      	mov	r4, lr
     144:	4619      	mov	r1, r3
			switch (*fmt) {
     146:	2b00      	cmp	r3, #0
     148:	f040 80c2 	bne.w	2d0 <CONFIG_FLASH_SIZE+0xd0>
     14c:	4285      	cmp	r5, r0
     14e:	fab2 f282 	clz	r2, r2
     152:	d945      	bls.n	1e0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x73>
     154:	b14a      	cbz	r2, 16a <CONFIG_IDLE_STACK_SIZE+0x2a>
     156:	f1c2 0320 	rsb	r3, r2, #32
     15a:	fa00 fc02 	lsl.w	ip, r0, r2
     15e:	fa2e f303 	lsr.w	r3, lr, r3
     162:	4095      	lsls	r5, r2
     164:	ea43 0c0c 	orr.w	ip, r3, ip
     168:	4094      	lsls	r4, r2
     16a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     16e:	b2a8      	uxth	r0, r5
     170:	fbbc f8fe 	udiv	r8, ip, lr
     174:	0c23      	lsrs	r3, r4, #16
     176:	fb0e cc18 	mls	ip, lr, r8, ip
     17a:	fb08 f900 	mul.w	r9, r8, r0
     17e:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
     182:	4599      	cmp	r9, r3
     184:	d928      	bls.n	1d8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x6b>
     186:	18eb      	adds	r3, r5, r3
     188:	f108 37ff 	add.w	r7, r8, #4294967295
     18c:	d204      	bcs.n	198 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2b>
     18e:	4599      	cmp	r9, r3
     190:	d902      	bls.n	198 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2b>
     192:	f1a8 0702 	sub.w	r7, r8, #2
     196:	442b      	add	r3, r5
     198:	eba3 0309 	sub.w	r3, r3, r9
     19c:	b2a4      	uxth	r4, r4
     19e:	fbb3 fcfe 	udiv	ip, r3, lr
     1a2:	fb0e 331c 	mls	r3, lr, ip, r3
     1a6:	fb0c f000 	mul.w	r0, ip, r0
     1aa:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     1ae:	42a0      	cmp	r0, r4
     1b0:	d914      	bls.n	1dc <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x6f>
     1b2:	192c      	adds	r4, r5, r4
     1b4:	f10c 33ff 	add.w	r3, ip, #4294967295
     1b8:	d204      	bcs.n	1c4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x57>
     1ba:	42a0      	cmp	r0, r4
     1bc:	d902      	bls.n	1c4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x57>
     1be:	f1ac 0302 	sub.w	r3, ip, #2
     1c2:	442c      	add	r4, r5
     1c4:	1a24      	subs	r4, r4, r0
     1c6:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
     1ca:	b11e      	cbz	r6, 1d4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x67>
     1cc:	40d4      	lsrs	r4, r2
     1ce:	2300      	movs	r3, #0
     1d0:	6034      	str	r4, [r6, #0]
     1d2:	6073      	str	r3, [r6, #4]
     1d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     1d8:	4647      	mov	r7, r8
     1da:	e7dd      	b.n	198 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2b>
     1dc:	4663      	mov	r3, ip
     1de:	e7f1      	b.n	1c4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x57>
     1e0:	bb92      	cbnz	r2, 248 <CONFIG_FLASH_SIZE+0x48>
     1e2:	1b43      	subs	r3, r0, r5
     1e4:	2101      	movs	r1, #1
     1e6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     1ea:	b2af      	uxth	r7, r5
     1ec:	fbb3 fcfe 	udiv	ip, r3, lr
     1f0:	0c20      	lsrs	r0, r4, #16
     1f2:	fb0e 331c 	mls	r3, lr, ip, r3
     1f6:	fb0c f807 	mul.w	r8, ip, r7
     1fa:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     1fe:	4598      	cmp	r8, r3
     200:	d962      	bls.n	2c8 <CONFIG_FLASH_SIZE+0xc8>
     202:	18eb      	adds	r3, r5, r3
     204:	f10c 30ff 	add.w	r0, ip, #4294967295
     208:	d204      	bcs.n	214 <CONFIG_FLASH_SIZE+0x14>
     20a:	4598      	cmp	r8, r3
     20c:	d902      	bls.n	214 <CONFIG_FLASH_SIZE+0x14>
     20e:	f1ac 0002 	sub.w	r0, ip, #2
     212:	442b      	add	r3, r5
     214:	eba3 0308 	sub.w	r3, r3, r8
				parsing = false;
     218:	b2a4      	uxth	r4, r4
     21a:	fbb3 fcfe 	udiv	ip, r3, lr
				align = VA_STACK_ALIGN(size_t);
     21e:	fb0e 331c 	mls	r3, lr, ip, r3
				continue;
     222:	fb0c f707 	mul.w	r7, ip, r7
				align = VA_STACK_ALIGN(ptrdiff_t);
     226:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
				continue;
     22a:	42a7      	cmp	r7, r4
				if (fmt[-1] == 'l') {
     22c:	d94e      	bls.n	2cc <CONFIG_FLASH_SIZE+0xcc>
     22e:	192c      	adds	r4, r5, r4
     230:	f10c 33ff 	add.w	r3, ip, #4294967295
		buf = (void *) ROUND_UP(buf, align);
     234:	d204      	bcs.n	240 <CONFIG_FLASH_SIZE+0x40>
     236:	42a7      	cmp	r7, r4
     238:	d902      	bls.n	240 <CONFIG_FLASH_SIZE+0x40>
     23a:	f1ac 0302 	sub.w	r3, ip, #2
     23e:	442c      	add	r4, r5
		if (buf0 != NULL && BUF_OFFSET + size > len) {
     240:	1be4      	subs	r4, r4, r7
     242:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     246:	e7c0      	b.n	1ca <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x5d>
     248:	f1c2 0320 	rsb	r3, r2, #32
		if (is_str_arg) {
     24c:	fa20 f103 	lsr.w	r1, r0, r3
			}
			buf += sizeof(char *);

			is_str_arg = false;
		} else if (size == sizeof(int)) {
     250:	4095      	lsls	r5, r2
     252:	4090      	lsls	r0, r2
     254:	fa2e f303 	lsr.w	r3, lr, r3

			if (buf0 != NULL) {
				*(long *)buf = v;
			}
			buf += sizeof(long);
		} else if (size == sizeof(long long)) {
     258:	4303      	orrs	r3, r0
     25a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     25e:	b2af      	uxth	r7, r5
			long long v = va_arg(ap, long long);
     260:	fbb1 fcfe 	udiv	ip, r1, lr
     264:	fb0e 101c 	mls	r0, lr, ip, r1
     268:	0c19      	lsrs	r1, r3, #16
     26a:	fb0c f807 	mul.w	r8, ip, r7
     26e:	ea41 4100 	orr.w	r1, r1, r0, lsl #16

			if (buf0 != NULL) {
     272:	4588      	cmp	r8, r1
				if (Z_CBPRINTF_VA_STACK_LL_DBL_MEMCPY) {
					memcpy(buf, &v, sizeof(long long));
				} else {
					*(long long *)buf = v;
     274:	fa04 f402 	lsl.w	r4, r4, r2
				}
			}
			buf += sizeof(long long);
     278:	d922      	bls.n	2c0 <CONFIG_FLASH_SIZE+0xc0>
     27a:	1869      	adds	r1, r5, r1
					if (fmt[-2] == 'l') {
     27c:	f10c 30ff 	add.w	r0, ip, #4294967295
     280:	d204      	bcs.n	28c <CONFIG_FLASH_SIZE+0x8c>
     282:	4588      	cmp	r8, r1
				parsing = false;
     284:	d902      	bls.n	28c <CONFIG_FLASH_SIZE+0x8c>
						align = VA_STACK_ALIGN(long);
     286:	f1ac 0002 	sub.w	r0, ip, #2
						size = sizeof(long);
     28a:	4429      	add	r1, r5
     28c:	eba1 0108 	sub.w	r1, r1, r8
						align = VA_STACK_ALIGN(long long);
     290:	b29b      	uxth	r3, r3
     292:	fbb1 fcfe 	udiv	ip, r1, lr
						size = sizeof(long long);
     296:	fb0e 111c 	mls	r1, lr, ip, r1
				if (fmt[-1] == 'L') {
     29a:	fb0c f707 	mul.w	r7, ip, r7
					v.d = va_arg(ap, double);
     29e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     2a2:	429f      	cmp	r7, r3
     2a4:	d90e      	bls.n	2c4 <CONFIG_FLASH_SIZE+0xc4>
     2a6:	18eb      	adds	r3, r5, r3
     2a8:	f10c 31ff 	add.w	r1, ip, #4294967295
     2ac:	d204      	bcs.n	2b8 <CONFIG_FLASH_SIZE+0xb8>
     2ae:	429f      	cmp	r7, r3
				buf = (void *) ROUND_UP(buf, align);
     2b0:	d902      	bls.n	2b8 <CONFIG_FLASH_SIZE+0xb8>
     2b2:	f1ac 0102 	sub.w	r1, ip, #2
				if (buf0 != NULL) {
     2b6:	442b      	add	r3, r5
					if (BUF_OFFSET + size > len) {
     2b8:	1bdb      	subs	r3, r3, r7
     2ba:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     2be:	e792      	b.n	1e6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x79>
					} else if (fmt[-1] == 'L') {
     2c0:	4660      	mov	r0, ip
     2c2:	e7e3      	b.n	28c <CONFIG_FLASH_SIZE+0x8c>
     2c4:	4661      	mov	r1, ip
						*(double *)buf = v.d;
     2c6:	e7f7      	b.n	2b8 <CONFIG_FLASH_SIZE+0xb8>
     2c8:	4660      	mov	r0, ip
				buf += size;
     2ca:	e7a3      	b.n	214 <CONFIG_FLASH_SIZE+0x14>
				parsing = false;
     2cc:	4663      	mov	r3, ip
				continue;
     2ce:	e7b7      	b.n	240 <CONFIG_FLASH_SIZE+0x40>
     2d0:	4283      	cmp	r3, r0
     2d2:	d906      	bls.n	2e2 <CONFIG_FLASH_SIZE+0xe2>
     2d4:	b916      	cbnz	r6, 2dc <CONFIG_FLASH_SIZE+0xdc>
					v.ld = va_arg(ap, long double);
     2d6:	2100      	movs	r1, #0
     2d8:	4608      	mov	r0, r1
     2da:	e77b      	b.n	1d4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x67>
     2dc:	e9c6 e000 	strd	lr, r0, [r6]
     2e0:	e7f9      	b.n	2d6 <CONFIG_FLASH_SIZE+0xd6>
     2e2:	fab3 f783 	clz	r7, r3
     2e6:	b98f      	cbnz	r7, 30c <CONFIG_FLASH_SIZE+0x10c>
					size = sizeof(long double);
     2e8:	4283      	cmp	r3, r0
						return -ENOSPC;
     2ea:	d301      	bcc.n	2f0 <CONFIG_FLASH_SIZE+0xf0>
     2ec:	4572      	cmp	r2, lr
     2ee:	d808      	bhi.n	302 <CONFIG_FLASH_SIZE+0x102>
						*(long double *)buf = v.ld;
     2f0:	ebbe 0402 	subs.w	r4, lr, r2
     2f4:	eb60 0303 	sbc.w	r3, r0, r3
				align = VA_STACK_ALIGN(void *);
     2f8:	2001      	movs	r0, #1
     2fa:	469c      	mov	ip, r3
				size = sizeof(void *);
     2fc:	b91e      	cbnz	r6, 306 <CONFIG_FLASH_SIZE+0x106>
     2fe:	2100      	movs	r1, #0
				is_str_arg = true;
     300:	e768      	b.n	1d4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x67>
				parsing = false;
     302:	4638      	mov	r0, r7
				align = VA_STACK_ALIGN(void *);
     304:	e7fa      	b.n	2fc <CONFIG_FLASH_SIZE+0xfc>
     306:	e9c6 4c00 	strd	r4, ip, [r6]
				size = sizeof(void *);
     30a:	e7f8      	b.n	2fe <CONFIG_FLASH_SIZE+0xfe>
			s = va_arg(ap, char *);
     30c:	f1c7 0c20 	rsb	ip, r7, #32
     310:	40bb      	lsls	r3, r7
     312:	fa22 f40c 	lsr.w	r4, r2, ip
     316:	431c      	orrs	r4, r3
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     318:	fa2e f10c 	lsr.w	r1, lr, ip
			if (*++fmt == '\0') {
     31c:	fa20 f30c 	lsr.w	r3, r0, ip
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
     320:	40b8      	lsls	r0, r7
     322:	4301      	orrs	r1, r0
     324:	ea4f 4914 	mov.w	r9, r4, lsr #16
     328:	fa0e f507 	lsl.w	r5, lr, r7
     32c:	fbb3 f8f9 	udiv	r8, r3, r9
     330:	fa1f fe84 	uxth.w	lr, r4
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     334:	fb09 3018 	mls	r0, r9, r8, r3
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);
     338:	0c0b      	lsrs	r3, r1, #16
     33a:	fb08 fa0e 	mul.w	sl, r8, lr
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     33e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
     342:	459a      	cmp	sl, r3
     344:	fa02 f207 	lsl.w	r2, r2, r7
						s_rw_cnt++;
     348:	d940      	bls.n	3cc <CONFIG_FLASH_SIZE+0x1cc>
     34a:	18e3      	adds	r3, r4, r3
     34c:	f108 30ff 	add.w	r0, r8, #4294967295
					len += 1;
     350:	d204      	bcs.n	35c <CONFIG_FLASH_SIZE+0x15c>
     352:	459a      	cmp	sl, r3
     354:	d902      	bls.n	35c <CONFIG_FLASH_SIZE+0x15c>
				} else if (rws_pos_en) {
     356:	f1a8 0002 	sub.w	r0, r8, #2
					len += 2;
     35a:	4423      	add	r3, r4
     35c:	eba3 030a 	sub.w	r3, r3, sl
					len += strlen(s) + 1 + 1;
     360:	b289      	uxth	r1, r1
     362:	fbb3 f8f9 	udiv	r8, r3, r9
     366:	fb09 3318 	mls	r3, r9, r8, r3
     36a:	fb08 fe0e 	mul.w	lr, r8, lr
			int v = va_arg(ap, int);
     36e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
     372:	458e      	cmp	lr, r1
			if (buf0 != NULL) {
     374:	d92c      	bls.n	3d0 <CONFIG_FLASH_SIZE+0x1d0>
				*(int *)buf = v;
     376:	1861      	adds	r1, r4, r1
			buf += sizeof(int);
     378:	f108 33ff 	add.w	r3, r8, #4294967295
	 * We remember the size of the argument list as a multiple of
	 * sizeof(int) and limit it to a 8-bit field. That means 1020 bytes
	 * worth of va_list, or about 127 arguments on a 64-bit system
	 * (twice that on 32-bit systems). That ought to be good enough.
	 */
	if (BUF_OFFSET / sizeof(int) > 255) {
     37c:	d204      	bcs.n	388 <CONFIG_FLASH_SIZE+0x188>
     37e:	458e      	cmp	lr, r1
     380:	d902      	bls.n	388 <CONFIG_FLASH_SIZE+0x188>
     382:	f1a8 0302 	sub.w	r3, r8, #2

	/*
	 * If all we wanted was to count required buffer size
	 * then we have it now.
	 */
	if (buf0 == NULL) {
     386:	4421      	add	r1, r4
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
	}

	/* Clear our buffer header. We made room for it initially. */
	*(char **)buf0 = NULL;
     388:	ea43 4000 	orr.w	r0, r3, r0, lsl #16

	/* Record end of argument list. */
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
     38c:	fba0 9802 	umull	r9, r8, r0, r2

	if (rws_pos_en) {
     390:	eba1 010e 	sub.w	r1, r1, lr
		/* Strings are appended, update location counter. */
		pkg_hdr->desc.str_cnt = 0;
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
     394:	4541      	cmp	r1, r8
     396:	46ce      	mov	lr, r9
		/* Strings are appended, update append counter. */
		pkg_hdr->desc.str_cnt = s_rw_cnt;
		pkg_hdr->desc.rw_str_cnt = 0;
	}

	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
     398:	4643      	mov	r3, r8
     39a:	d302      	bcc.n	3a2 <CONFIG_FLASH_SIZE+0x1a2>
#ifdef CONFIG_CBPRINTF_PACKAGE_HEADER_STORE_CREATION_FLAGS
	pkg_hdr->desc.pkg_flags = flags;
#endif

	/* Store strings pointer locations of read only strings. */
	if (s_ro_cnt) {
     39c:	d106      	bne.n	3ac <CONFIG_FLASH_SIZE+0x1ac>
			/* retrieve the string pointer */
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
			/* clear the in-buffer pointer (less entropy if compressed) */
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
			/* find the string length including terminating '\0' */
			size = strlen(s) + 1;
     39e:	454d      	cmp	r5, r9
     3a0:	d204      	bcs.n	3ac <CONFIG_FLASH_SIZE+0x1ac>
     3a2:	ebb9 0e02 	subs.w	lr, r9, r2
     3a6:	eb68 0304 	sbc.w	r3, r8, r4
     3aa:	3801      	subs	r0, #1
     3ac:	2e00      	cmp	r6, #0
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
     3ae:	d0a6      	beq.n	2fe <CONFIG_FLASH_SIZE+0xfe>
     3b0:	ebb5 020e 	subs.w	r2, r5, lr
     3b4:	eb61 0103 	sbc.w	r1, r1, r3
		pkg_hdr->desc.str_cnt = s_rw_cnt;
     3b8:	fa01 fc0c 	lsl.w	ip, r1, ip
		for (i = 0; i < s_idx; i++) {
     3bc:	fa22 f307 	lsr.w	r3, r2, r7
     3c0:	ea4c 0303 	orr.w	r3, ip, r3
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
     3c4:	40f9      	lsrs	r1, r7
     3c6:	e9c6 3100 	strd	r3, r1, [r6]
     3ca:	e798      	b.n	2fe <CONFIG_FLASH_SIZE+0xfe>
     3cc:	4640      	mov	r0, r8
     3ce:	e7c5      	b.n	35c <CONFIG_FLASH_SIZE+0x15c>
     3d0:	4643      	mov	r3, r8
     3d2:	e7d9      	b.n	388 <CONFIG_FLASH_SIZE+0x188>

000003d4 <main>:
 */

#include <zephyr/kernel.h>

void main(void)
{
     3d4:	b508      	push	{r3, lr}
	printk("Hello World! %s\n", CONFIG_BOARD);
     3d6:	4902      	ldr	r1, [pc, #8]	; (3e0 <main+0xc>)
     3d8:	4802      	ldr	r0, [pc, #8]	; (3e4 <main+0x10>)
     3da:	f003 fde7 	bl	3fac <printk>
}
     3de:	bd08      	pop	{r3, pc}
     3e0:	00005ce8 	.word	0x00005ce8
     3e4:	00005cfc 	.word	0x00005cfc

000003e8 <char_out>:
		for (i = 0; i < s_idx; i++) {
     3e8:	b508      	push	{r3, lr}
     3ea:	4b02      	ldr	r3, [pc, #8]	; (3f4 <char_out+0xc>)
		if (rws_pos_en) {
     3ec:	681b      	ldr	r3, [r3, #0]
     3ee:	4798      	blx	r3
			*buf++ = str_ptr_arg[i];
     3f0:	bd08      	pop	{r3, pc}
     3f2:	bf00      	nop
     3f4:	20000000 	.word	0x20000000

000003f8 <__printk_hook_install>:
     3f8:	4b01      	ldr	r3, [pc, #4]	; (400 <CONFIG_MAIN_STACK_SIZE>)
     3fa:	6018      	str	r0, [r3, #0]
     3fc:	4770      	bx	lr
			size = 0;
     3fe:	bf00      	nop
		}

		/* make sure it fits */
		if (BUF_OFFSET + 1 + size > len) {
     400:	20000000 	.word	0x20000000

00000404 <vprintk>:
     404:	b500      	push	{lr}
     406:	b083      	sub	sp, #12
     408:	4602      	mov	r2, r0
			return -ENOSPC;
		}
		/* store the pointer position prefix */
		*buf++ = str_ptr_pos[i];
     40a:	460b      	mov	r3, r1
     40c:	2100      	movs	r1, #0
     40e:	9100      	str	r1, [sp, #0]
     410:	4802      	ldr	r0, [pc, #8]	; (41c <vprintk+0x18>)
     412:	f000 f91d 	bl	650 <z_cbvprintf_impl>
     416:	b003      	add	sp, #12
		/* copy the string with its terminating '\0' */
		memcpy(buf, s, size);
     418:	f85d fb04 	ldr.w	pc, [sp], #4
     41c:	000003e9 	.word	0x000003e9

00000420 <process_event>:
     420:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	for (i = 0; i < s_idx; i++) {
     424:	b083      	sub	sp, #12
     426:	4604      	mov	r4, r0
     428:	4608      	mov	r0, r1
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
     42a:	4615      	mov	r5, r2
     42c:	8b23      	ldrh	r3, [r4, #24]
     42e:	f013 0f08 	tst.w	r3, #8
     432:	d105      	bne.n	440 <process_event+0x20>
     434:	f003 0607 	and.w	r6, r3, #7
     438:	2300      	movs	r3, #0
     43a:	9300      	str	r3, [sp, #0]
     43c:	9301      	str	r3, [sp, #4]
     43e:	e055      	b.n	4ec <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x4>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
     440:	2901      	cmp	r1, #1
     442:	d009      	beq.n	458 <process_event+0x38>
     444:	f043 0320 	orr.w	r3, r3, #32
     448:	8323      	strh	r3, [r4, #24]
     44a:	f385 8811 	msr	BASEPRI, r5
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
     44e:	f3bf 8f6f 	isb	sy
     452:	b003      	add	sp, #12
			size = strlen(s) + 1;
     454:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
     458:	f043 0310 	orr.w	r3, r3, #16
     45c:	8323      	strh	r3, [r4, #24]
	/*
	 * TODO: remove pointers for appended strings since they're useless.
	 * TODO: explore leveraging same mechanism to remove alignment padding
	 */

	return BUF_OFFSET;
     45e:	e7f4      	b.n	44a <process_event+0x2a>

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
     460:	4620      	mov	r0, r4
     462:	f003 fde5 	bl	4030 <process_recheck>
		return -EFAULT;
     466:	e043      	b.n	4f0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x8>
     468:	f8d4 9014 	ldr.w	r9, [r4, #20]
		return -ENOSPC;
     46c:	464a      	mov	r2, r9
     46e:	4669      	mov	r1, sp
     470:	4620      	mov	r0, r4
			return -ENOSPC;
     472:	f003 fdf6 	bl	4062 <process_complete>
     476:	f04f 0800 	mov.w	r8, #0
					return -EINVAL;
     47a:	8b23      	ldrh	r3, [r4, #24]
     47c:	f003 0707 	and.w	r7, r3, #7
					return -EINVAL;
     480:	42b7      	cmp	r7, r6
     482:	d069      	beq.n	558 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x70>
			return -EINVAL;
     484:	68a2      	ldr	r2, [r4, #8]
     486:	2a00      	cmp	r2, #0
     488:	d066      	beq.n	558 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x70>
		return -EINVAL;
     48a:	2201      	movs	r2, #1
     48c:	f043 0308 	orr.w	r3, r3, #8
				return -ENOSPC;
     490:	8323      	strh	r3, [r4, #24]
     492:	f385 8811 	msr	BASEPRI, r5
			return -ENOSPC;
     496:	f3bf 8f6f 	isb	sy
     49a:	2a00      	cmp	r2, #0
     49c:	d164      	bne.n	568 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x80>
     49e:	9b00      	ldr	r3, [sp, #0]
     4a0:	b12b      	cbz	r3, 4ae <process_event+0x8e>
     4a2:	464b      	mov	r3, r9
			if (do_monitors) {
				notify_monitors(mgr, state, res);
			}

			if (!sys_slist_is_empty(&clients)) {
				notify_all(mgr, &clients, state, res);
     4a4:	463a      	mov	r2, r7
     4a6:	4669      	mov	r1, sp
     4a8:	4620      	mov	r0, r4
     4aa:	f003 fe53 	bl	4154 <notify_all>
			}

			if (transit != NULL) {
     4ae:	f1b8 0f00 	cmp.w	r8, #0
     4b2:	d002      	beq.n	4ba <process_event+0x9a>
				transit(mgr, transition_complete);
     4b4:	4934      	ldr	r1, [pc, #208]	; (588 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xa0>)
     4b6:	4620      	mov	r0, r4
     4b8:	47c0      	blx	r8
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
     4ba:	f04f 0320 	mov.w	r3, #32
     4be:	f3ef 8511 	mrs	r5, BASEPRI
     4c2:	f383 8812 	msr	BASEPRI_MAX, r3
     4c6:	f3bf 8f6f 	isb	sy
			}

			key = k_spin_lock(&mgr->lock);
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
     4ca:	8b23      	ldrh	r3, [r4, #24]
     4cc:	f023 0308 	bic.w	r3, r3, #8
     4d0:	8323      	strh	r3, [r4, #24]
		}

		/* Process deferred events.  Completion takes priority
		 * over recheck.
		 */
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
     4d2:	8b23      	ldrh	r3, [r4, #24]
     4d4:	f013 0f10 	tst.w	r3, #16
     4d8:	d04c      	beq.n	574 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x8c>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     4da:	f023 0310 	bic.w	r3, r3, #16
     4de:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
     4e0:	2001      	movs	r0, #1
			evt = EVT_RECHECK;
		} else {
			;
		}

		state = mgr->flags & ONOFF_STATE_MASK;
     4e2:	8b26      	ldrh	r6, [r4, #24]
     4e4:	f006 0607 	and.w	r6, r6, #7
	} while (evt != EVT_NOP);
     4e8:	2800      	cmp	r0, #0
     4ea:	d0ae      	beq.n	44a <process_event+0x2a>
		if (evt == EVT_RECHECK) {
     4ec:	2802      	cmp	r0, #2
     4ee:	d0b7      	beq.n	460 <process_event+0x40>
		if (evt == EVT_NOP) {
     4f0:	2800      	cmp	r0, #0
     4f2:	d0aa      	beq.n	44a <process_event+0x2a>
		if (evt == EVT_COMPLETE) {
     4f4:	3801      	subs	r0, #1
     4f6:	2804      	cmp	r0, #4
     4f8:	d82a      	bhi.n	550 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x68>
     4fa:	a301      	add	r3, pc, #4	; (adr r3, 500 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x18>)
     4fc:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
     500:	00000469 	.word	0x00000469
     504:	00000551 	.word	0x00000551
     508:	00000515 	.word	0x00000515
     50c:	00000529 	.word	0x00000529
     510:	0000053d 	.word	0x0000053d
			transit = mgr->transitions->start;
     514:	6923      	ldr	r3, [r4, #16]
     516:	f8d3 8000 	ldr.w	r8, [r3]
			set_state(mgr, ONOFF_STATE_TO_ON);
     51a:	2106      	movs	r1, #6
     51c:	4620      	mov	r0, r4
     51e:	f003 fd5d 	bl	3fdc <set_state>
		res = 0;
     522:	f04f 0900 	mov.w	r9, #0
     526:	e7a8      	b.n	47a <process_event+0x5a>
			transit = mgr->transitions->stop;
     528:	6923      	ldr	r3, [r4, #16]
     52a:	f8d3 8004 	ldr.w	r8, [r3, #4]
			set_state(mgr, ONOFF_STATE_TO_OFF);
     52e:	2104      	movs	r1, #4
     530:	4620      	mov	r0, r4
     532:	f003 fd53 	bl	3fdc <set_state>
		res = 0;
     536:	f04f 0900 	mov.w	r9, #0
     53a:	e79e      	b.n	47a <process_event+0x5a>
			transit = mgr->transitions->reset;
     53c:	6923      	ldr	r3, [r4, #16]
     53e:	f8d3 8008 	ldr.w	r8, [r3, #8]
			set_state(mgr, ONOFF_STATE_RESETTING);
     542:	2105      	movs	r1, #5
     544:	4620      	mov	r0, r4
     546:	f003 fd49 	bl	3fdc <set_state>
		res = 0;
     54a:	f04f 0900 	mov.w	r9, #0
     54e:	e794      	b.n	47a <process_event+0x5a>
		if (evt == EVT_NOP) {
     550:	f04f 0800 	mov.w	r8, #0
     554:	46c1      	mov	r9, r8
     556:	e790      	b.n	47a <process_event+0x5a>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
     558:	9a00      	ldr	r2, [sp, #0]
		    || !sys_slist_is_empty(&clients)
     55a:	b10a      	cbz	r2, 560 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x78>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     55c:	2200      	movs	r2, #0
     55e:	e795      	b.n	48c <process_event+0x6c>
		    || (transit != NULL)) {
     560:	f1b8 0f00 	cmp.w	r8, #0
     564:	d192      	bne.n	48c <process_event+0x6c>
     566:	e7b4      	b.n	4d2 <process_event+0xb2>
				notify_monitors(mgr, state, res);
     568:	464a      	mov	r2, r9
     56a:	4639      	mov	r1, r7
     56c:	4620      	mov	r0, r4
     56e:	f003 fd3d 	bl	3fec <notify_monitors>
     572:	e794      	b.n	49e <process_event+0x7e>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
     574:	f013 0f20 	tst.w	r3, #32
     578:	d004      	beq.n	584 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x9c>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
     57a:	f023 0320 	bic.w	r3, r3, #32
     57e:	8323      	strh	r3, [r4, #24]
			evt = EVT_RECHECK;
     580:	2002      	movs	r0, #2
     582:	e7ae      	b.n	4e2 <process_event+0xc2>
		evt = EVT_NOP;
     584:	2000      	movs	r0, #0
     586:	e7ac      	b.n	4e2 <process_event+0xc2>
     588:	00004183 	.word	0x00004183

0000058c <extract_flags>:
 *
 * @return a pointer the first character that follows the flags.
 */
static inline const char *extract_flags(struct conversion *conv,
					const char *sp)
{
     58c:	4684      	mov	ip, r0
     58e:	4608      	mov	r0, r1
	bool loop = true;
     590:	2201      	movs	r2, #1
     592:	e026      	b.n	5e2 <extract_flags+0x56>

	do {
		switch (*sp) {
		case '-':
			conv->flag_dash = true;
     594:	f89c 3000 	ldrb.w	r3, [ip]
     598:	f043 0304 	orr.w	r3, r3, #4
     59c:	f88c 3000 	strb.w	r3, [ip]
			conv->flag_zero = true;
			break;
		default:
			loop = false;
		}
		if (loop) {
     5a0:	b1f2      	cbz	r2, 5e0 <extract_flags+0x54>
			++sp;
     5a2:	3001      	adds	r0, #1
     5a4:	e01c      	b.n	5e0 <extract_flags+0x54>
			conv->flag_plus = true;
     5a6:	f89c 3000 	ldrb.w	r3, [ip]
     5aa:	f043 0308 	orr.w	r3, r3, #8
     5ae:	f88c 3000 	strb.w	r3, [ip]
			break;
     5b2:	e7f5      	b.n	5a0 <extract_flags+0x14>
			conv->flag_space = true;
     5b4:	f89c 3000 	ldrb.w	r3, [ip]
     5b8:	f043 0310 	orr.w	r3, r3, #16
     5bc:	f88c 3000 	strb.w	r3, [ip]
			break;
     5c0:	e7ee      	b.n	5a0 <extract_flags+0x14>
			conv->flag_hash = true;
     5c2:	f89c 3000 	ldrb.w	r3, [ip]
     5c6:	f043 0320 	orr.w	r3, r3, #32
     5ca:	f88c 3000 	strb.w	r3, [ip]
			break;
     5ce:	e7e7      	b.n	5a0 <extract_flags+0x14>
			conv->flag_zero = true;
     5d0:	f89c 3000 	ldrb.w	r3, [ip]
     5d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     5d8:	f88c 3000 	strb.w	r3, [ip]
			break;
     5dc:	e7e0      	b.n	5a0 <extract_flags+0x14>
		switch (*sp) {
     5de:	2200      	movs	r2, #0
		}
	} while (loop);
     5e0:	b342      	cbz	r2, 634 <extract_flags+0xa8>
		switch (*sp) {
     5e2:	7803      	ldrb	r3, [r0, #0]
     5e4:	3b20      	subs	r3, #32
     5e6:	2b10      	cmp	r3, #16
     5e8:	d8f9      	bhi.n	5de <extract_flags+0x52>
     5ea:	a101      	add	r1, pc, #4	; (adr r1, 5f0 <extract_flags+0x64>)
     5ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
     5f0:	000005b5 	.word	0x000005b5
     5f4:	000005df 	.word	0x000005df
     5f8:	000005df 	.word	0x000005df
     5fc:	000005c3 	.word	0x000005c3
     600:	000005df 	.word	0x000005df
     604:	000005df 	.word	0x000005df
     608:	000005df 	.word	0x000005df
     60c:	000005df 	.word	0x000005df
     610:	000005df 	.word	0x000005df
     614:	000005df 	.word	0x000005df
     618:	000005df 	.word	0x000005df
     61c:	000005a7 	.word	0x000005a7
     620:	000005df 	.word	0x000005df
     624:	00000595 	.word	0x00000595
     628:	000005df 	.word	0x000005df
     62c:	000005df 	.word	0x000005df
     630:	000005d1 	.word	0x000005d1

	/* zero && dash => !zero */
	if (conv->flag_zero && conv->flag_dash) {
     634:	f89c 3000 	ldrb.w	r3, [ip]
     638:	f003 0344 	and.w	r3, r3, #68	; 0x44
     63c:	2b44      	cmp	r3, #68	; 0x44
     63e:	d000      	beq.n	642 <extract_flags+0xb6>
	}

	/* space && plus => !plus, handled in emitter code */

	return sp;
}
     640:	4770      	bx	lr
		conv->flag_zero = false;
     642:	f89c 3000 	ldrb.w	r3, [ip]
     646:	f36f 1386 	bfc	r3, #6, #1
     64a:	f88c 3000 	strb.w	r3, [ip]
     64e:	e7f7      	b.n	640 <extract_flags+0xb4>

00000650 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
     650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     654:	b091      	sub	sp, #68	; 0x44
     656:	4606      	mov	r6, r0
     658:	460d      	mov	r5, r1
     65a:	4691      	mov	r9, r2
     65c:	9303      	str	r3, [sp, #12]
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
     65e:	2400      	movs	r4, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
     660:	f899 0000 	ldrb.w	r0, [r9]
     664:	2800      	cmp	r0, #0
     666:	f000 82b9 	beq.w	bdc <__z_interrupt_stack_SIZEOF+0x39c>
		if (*fp != '%') {
     66a:	2825      	cmp	r0, #37	; 0x25
     66c:	d008      	beq.n	680 <z_cbvprintf_impl+0x30>
			OUTC(*fp++);
     66e:	f109 0901 	add.w	r9, r9, #1
     672:	4629      	mov	r1, r5
     674:	47b0      	blx	r6
     676:	2800      	cmp	r0, #0
     678:	f2c0 82b1 	blt.w	bde <__z_interrupt_stack_SIZEOF+0x39e>
     67c:	3401      	adds	r4, #1
			continue;
     67e:	e7ef      	b.n	660 <z_cbvprintf_impl+0x10>
		 * mitigate LLVM code generation bug.
		 */
		struct {
			union argument_value value;
			struct conversion conv;
		} state = {
     680:	2300      	movs	r3, #0
     682:	9304      	str	r3, [sp, #16]
     684:	9305      	str	r3, [sp, #20]
     686:	9306      	str	r3, [sp, #24]
     688:	9307      	str	r3, [sp, #28]
     68a:	9308      	str	r3, [sp, #32]
     68c:	9309      	str	r3, [sp, #36]	; 0x24
		int precision = -1;
		const char *bps = NULL;
		const char *bpe = buf + sizeof(buf);
		char sign = 0;

		fp = extract_conversion(conv, sp);
     68e:	4649      	mov	r1, r9
     690:	a806      	add	r0, sp, #24
     692:	f003 ff92 	bl	45ba <extract_conversion>
     696:	9002      	str	r0, [sp, #8]

		/* If dynamic width is specified, process it,
		 * otherwise set width if present.
		 */
		if (conv->width_star) {
     698:	f89d 3019 	ldrb.w	r3, [sp, #25]
     69c:	f013 0f01 	tst.w	r3, #1
     6a0:	f000 8097 	beq.w	7d2 <z_cbvprintf_impl+0x182>
			width = va_arg(ap, int);
     6a4:	9b03      	ldr	r3, [sp, #12]
     6a6:	1d1a      	adds	r2, r3, #4
     6a8:	9203      	str	r2, [sp, #12]
     6aa:	681f      	ldr	r7, [r3, #0]

			if (width < 0) {
     6ac:	2f00      	cmp	r7, #0
     6ae:	f2c0 8088 	blt.w	7c2 <z_cbvprintf_impl+0x172>

		/* If dynamic precision is specified, process it, otherwise
		 * set precision if present.  For floating point where
		 * precision is not present use 6.
		 */
		if (conv->prec_star) {
     6b2:	f89d 3019 	ldrb.w	r3, [sp, #25]
     6b6:	f013 0f04 	tst.w	r3, #4
     6ba:	f000 809c 	beq.w	7f6 <z_cbvprintf_impl+0x1a6>
			int arg = va_arg(ap, int);
     6be:	9b03      	ldr	r3, [sp, #12]
     6c0:	1d1a      	adds	r2, r3, #4
     6c2:	9203      	str	r2, [sp, #12]
     6c4:	f8d3 a000 	ldr.w	sl, [r3]

			if (arg < 0) {
     6c8:	f1ba 0f00 	cmp.w	sl, #0
     6cc:	f2c0 808a 	blt.w	7e4 <z_cbvprintf_impl+0x194>
		}

		/* Reuse width and precision memory in conv for value
		 * padding counts.
		 */
		conv->pad0_value = 0;
     6d0:	2300      	movs	r3, #0
     6d2:	9307      	str	r3, [sp, #28]
		conv->pad0_pre_exp = 0;
     6d4:	9308      	str	r3, [sp, #32]
		 * This can't be extracted to a helper function because
		 * passing a pointer to va_list doesn't work on x86_64.  See
		 * https://stackoverflow.com/a/8048892.
		 */
		enum specifier_cat_enum specifier_cat
			= (enum specifier_cat_enum)conv->specifier_cat;
     6d6:	f89d 301a 	ldrb.w	r3, [sp, #26]
     6da:	f003 0307 	and.w	r3, r3, #7
		enum length_mod_enum length_mod
			= (enum length_mod_enum)conv->length_mod;
     6de:	f89d 1019 	ldrb.w	r1, [sp, #25]
     6e2:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		/* Extract the value based on the argument category and length.
		 *
		 * Note that the length modifier doesn't affect the value of a
		 * pointer argument.
		 */
		if (specifier_cat == SPECIFIER_SINT) {
     6e6:	2b01      	cmp	r3, #1
     6e8:	f000 808e 	beq.w	808 <CONFIG_ISR_STACK_SIZE+0x8>
			if (length_mod == LENGTH_HH) {
				value->sint = (signed char)value->sint;
			} else if (length_mod == LENGTH_H) {
				value->sint = (short)value->sint;
			}
		} else if (specifier_cat == SPECIFIER_UINT) {
     6ec:	2b02      	cmp	r3, #2
     6ee:	f000 80d3 	beq.w	898 <__z_interrupt_stack_SIZEOF+0x58>
			if (length_mod == LENGTH_HH) {
				value->uint = (unsigned char)value->uint;
			} else if (length_mod == LENGTH_H) {
				value->uint = (unsigned short)value->uint;
			}
		} else if (specifier_cat == SPECIFIER_FP) {
     6f2:	2b04      	cmp	r3, #4
     6f4:	f000 8124 	beq.w	940 <__z_interrupt_stack_SIZEOF+0x100>
			if (length_mod == LENGTH_UPPER_L) {
				value->ldbl = va_arg(ap, long double);
			} else {
				value->dbl = va_arg(ap, double);
			}
		} else if (specifier_cat == SPECIFIER_PTR) {
     6f8:	2b03      	cmp	r3, #3
     6fa:	f000 813b 	beq.w	974 <__z_interrupt_stack_SIZEOF+0x134>
		/* We've now consumed all arguments related to this
		 * specification.  If the conversion is invalid, or is
		 * something we don't support, then output the original
		 * specification and move on.
		 */
		if (conv->invalid || conv->unsupported) {
     6fe:	f89d 8018 	ldrb.w	r8, [sp, #24]
     702:	f018 0b03 	ands.w	fp, r8, #3
     706:	f040 813b 	bne.w	980 <__z_interrupt_stack_SIZEOF+0x140>
		}

		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv->specifier) {
     70a:	f89d 301b 	ldrb.w	r3, [sp, #27]
     70e:	3b25      	subs	r3, #37	; 0x25
     710:	2b53      	cmp	r3, #83	; 0x53
     712:	f200 81ca 	bhi.w	aaa <__z_interrupt_stack_SIZEOF+0x26a>
     716:	e8df f013 	tbh	[pc, r3, lsl #1]
     71a:	0140      	.short	0x0140
     71c:	01c801c8 	.word	0x01c801c8
     720:	01c801c8 	.word	0x01c801c8
     724:	01c801c8 	.word	0x01c801c8
     728:	01c801c8 	.word	0x01c801c8
     72c:	01c801c8 	.word	0x01c801c8
     730:	01c801c8 	.word	0x01c801c8
     734:	01c801c8 	.word	0x01c801c8
     738:	01c801c8 	.word	0x01c801c8
     73c:	01c801c8 	.word	0x01c801c8
     740:	01c801c8 	.word	0x01c801c8
     744:	01c801c8 	.word	0x01c801c8
     748:	01c801c8 	.word	0x01c801c8
     74c:	01c801c8 	.word	0x01c801c8
     750:	01c801c8 	.word	0x01c801c8
     754:	01c801c8 	.word	0x01c801c8
     758:	01c801c8 	.word	0x01c801c8
     75c:	01c801c8 	.word	0x01c801c8
     760:	01c801c8 	.word	0x01c801c8
     764:	01c801c8 	.word	0x01c801c8
     768:	01c801c8 	.word	0x01c801c8
     76c:	01c801c8 	.word	0x01c801c8
     770:	01c801c8 	.word	0x01c801c8
     774:	01c801c8 	.word	0x01c801c8
     778:	01c801c8 	.word	0x01c801c8
     77c:	01c801c8 	.word	0x01c801c8
     780:	01c80181 	.word	0x01c80181
     784:	01c801c8 	.word	0x01c801c8
     788:	01c801c8 	.word	0x01c801c8
     78c:	01c801c8 	.word	0x01c801c8
     790:	01c801c8 	.word	0x01c801c8
     794:	015e01c8 	.word	0x015e01c8
     798:	01c80167 	.word	0x01c80167
     79c:	01c801c8 	.word	0x01c801c8
     7a0:	016701c8 	.word	0x016701c8
     7a4:	01c801c8 	.word	0x01c801c8
     7a8:	01c801c8 	.word	0x01c801c8
     7ac:	018101bd 	.word	0x018101bd
     7b0:	01c801a1 	.word	0x01c801a1
     7b4:	014d01c8 	.word	0x014d01c8
     7b8:	018101c8 	.word	0x018101c8
     7bc:	01c801c8 	.word	0x01c801c8
     7c0:	0181      	.short	0x0181
				conv->flag_dash = true;
     7c2:	f89d 3018 	ldrb.w	r3, [sp, #24]
     7c6:	f043 0304 	orr.w	r3, r3, #4
     7ca:	f88d 3018 	strb.w	r3, [sp, #24]
				width = -width;
     7ce:	427f      	negs	r7, r7
     7d0:	e76f      	b.n	6b2 <z_cbvprintf_impl+0x62>
		} else if (conv->width_present) {
     7d2:	f99d 3018 	ldrsb.w	r3, [sp, #24]
     7d6:	2b00      	cmp	r3, #0
     7d8:	db02      	blt.n	7e0 <z_cbvprintf_impl+0x190>
		int width = -1;
     7da:	f04f 37ff 	mov.w	r7, #4294967295
     7de:	e768      	b.n	6b2 <z_cbvprintf_impl+0x62>
			width = conv->width_value;
     7e0:	9f07      	ldr	r7, [sp, #28]
     7e2:	e766      	b.n	6b2 <z_cbvprintf_impl+0x62>
				conv->prec_present = false;
     7e4:	f89d 3019 	ldrb.w	r3, [sp, #25]
     7e8:	f36f 0341 	bfc	r3, #1, #1
     7ec:	f88d 3019 	strb.w	r3, [sp, #25]
		int precision = -1;
     7f0:	f04f 3aff 	mov.w	sl, #4294967295
     7f4:	e76c      	b.n	6d0 <z_cbvprintf_impl+0x80>
		} else if (conv->prec_present) {
     7f6:	f013 0f02 	tst.w	r3, #2
     7fa:	d002      	beq.n	802 <CONFIG_ISR_STACK_SIZE+0x2>
			precision = conv->prec_value;
     7fc:	f8dd a020 	ldr.w	sl, [sp, #32]
     800:	e766      	b.n	6d0 <z_cbvprintf_impl+0x80>
		int precision = -1;
     802:	f04f 3aff 	mov.w	sl, #4294967295
     806:	e763      	b.n	6d0 <z_cbvprintf_impl+0x80>
			switch (length_mod) {
     808:	1ecb      	subs	r3, r1, #3
     80a:	2b04      	cmp	r3, #4
     80c:	d804      	bhi.n	818 <CONFIG_ISR_STACK_SIZE+0x18>
     80e:	e8df f003 	tbb	[pc, r3]
     812:	1d0b      	.short	0x1d0b
     814:	3529      	.short	0x3529
     816:	35          	.byte	0x35
     817:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
     818:	9b03      	ldr	r3, [sp, #12]
     81a:	1d1a      	adds	r2, r3, #4
     81c:	9203      	str	r2, [sp, #12]
     81e:	681b      	ldr	r3, [r3, #0]
     820:	17da      	asrs	r2, r3, #31
     822:	9304      	str	r3, [sp, #16]
     824:	9205      	str	r2, [sp, #20]
				break;
     826:	e006      	b.n	836 <CONFIG_ISR_STACK_SIZE+0x36>
					value->sint = va_arg(ap, long);
     828:	9b03      	ldr	r3, [sp, #12]
     82a:	1d1a      	adds	r2, r3, #4
     82c:	9203      	str	r2, [sp, #12]
     82e:	681b      	ldr	r3, [r3, #0]
     830:	17da      	asrs	r2, r3, #31
     832:	9304      	str	r3, [sp, #16]
     834:	9205      	str	r2, [sp, #20]
			if (length_mod == LENGTH_HH) {
     836:	2901      	cmp	r1, #1
     838:	d028      	beq.n	88c <__z_interrupt_stack_SIZEOF+0x4c>
			} else if (length_mod == LENGTH_H) {
     83a:	2902      	cmp	r1, #2
     83c:	f47f af5f 	bne.w	6fe <z_cbvprintf_impl+0xae>
				value->sint = (short)value->sint;
     840:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
     844:	17da      	asrs	r2, r3, #31
     846:	9304      	str	r3, [sp, #16]
     848:	9205      	str	r2, [sp, #20]
     84a:	e758      	b.n	6fe <z_cbvprintf_impl+0xae>
					(sint_value_type)va_arg(ap, long long);
     84c:	9b03      	ldr	r3, [sp, #12]
     84e:	3307      	adds	r3, #7
     850:	f023 0307 	bic.w	r3, r3, #7
     854:	f103 0208 	add.w	r2, r3, #8
     858:	9203      	str	r2, [sp, #12]
     85a:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
     85e:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
     862:	e7e8      	b.n	836 <CONFIG_ISR_STACK_SIZE+0x36>
					(sint_value_type)va_arg(ap, intmax_t);
     864:	9b03      	ldr	r3, [sp, #12]
     866:	3307      	adds	r3, #7
     868:	f023 0307 	bic.w	r3, r3, #7
     86c:	f103 0208 	add.w	r2, r3, #8
     870:	9203      	str	r2, [sp, #12]
     872:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
     876:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
     87a:	e7dc      	b.n	836 <CONFIG_ISR_STACK_SIZE+0x36>
					(sint_value_type)va_arg(ap, ptrdiff_t);
     87c:	9b03      	ldr	r3, [sp, #12]
     87e:	1d1a      	adds	r2, r3, #4
     880:	9203      	str	r2, [sp, #12]
     882:	681b      	ldr	r3, [r3, #0]
     884:	17da      	asrs	r2, r3, #31
				value->sint =
     886:	9304      	str	r3, [sp, #16]
     888:	9205      	str	r2, [sp, #20]
				break;
     88a:	e7d4      	b.n	836 <CONFIG_ISR_STACK_SIZE+0x36>
				value->sint = (signed char)value->sint;
     88c:	f99d 3010 	ldrsb.w	r3, [sp, #16]
     890:	17da      	asrs	r2, r3, #31
     892:	9304      	str	r3, [sp, #16]
     894:	9205      	str	r2, [sp, #20]
     896:	e732      	b.n	6fe <z_cbvprintf_impl+0xae>
			switch (length_mod) {
     898:	1ecb      	subs	r3, r1, #3
     89a:	2b04      	cmp	r3, #4
     89c:	d804      	bhi.n	8a8 <__z_interrupt_stack_SIZEOF+0x68>
     89e:	e8df f003 	tbb	[pc, r3]
     8a2:	1f0b      	.short	0x1f0b
     8a4:	4135      	.short	0x4135
     8a6:	41          	.byte	0x41
     8a7:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
     8a8:	9b03      	ldr	r3, [sp, #12]
     8aa:	1d1a      	adds	r2, r3, #4
     8ac:	9203      	str	r2, [sp, #12]
     8ae:	681b      	ldr	r3, [r3, #0]
     8b0:	9304      	str	r3, [sp, #16]
     8b2:	2300      	movs	r3, #0
     8b4:	9305      	str	r3, [sp, #20]
				break;
     8b6:	e01e      	b.n	8f6 <__z_interrupt_stack_SIZEOF+0xb6>
				    && (conv->specifier == 'c')) {
     8b8:	f89d 301b 	ldrb.w	r3, [sp, #27]
				if ((!WCHAR_IS_SIGNED)
     8bc:	2b63      	cmp	r3, #99	; 0x63
     8be:	d007      	beq.n	8d0 <__z_interrupt_stack_SIZEOF+0x90>
					value->uint = va_arg(ap, unsigned long);
     8c0:	9b03      	ldr	r3, [sp, #12]
     8c2:	1d1a      	adds	r2, r3, #4
     8c4:	9203      	str	r2, [sp, #12]
     8c6:	681b      	ldr	r3, [r3, #0]
     8c8:	9304      	str	r3, [sp, #16]
     8ca:	2300      	movs	r3, #0
     8cc:	9305      	str	r3, [sp, #20]
     8ce:	e012      	b.n	8f6 <__z_interrupt_stack_SIZEOF+0xb6>
					value->uint = (wchar_t)va_arg(ap,
     8d0:	9b03      	ldr	r3, [sp, #12]
     8d2:	1d1a      	adds	r2, r3, #4
     8d4:	9203      	str	r2, [sp, #12]
     8d6:	681b      	ldr	r3, [r3, #0]
     8d8:	9304      	str	r3, [sp, #16]
     8da:	2300      	movs	r3, #0
     8dc:	9305      	str	r3, [sp, #20]
     8de:	e00a      	b.n	8f6 <__z_interrupt_stack_SIZEOF+0xb6>
					(uint_value_type)va_arg(ap,
     8e0:	9b03      	ldr	r3, [sp, #12]
     8e2:	3307      	adds	r3, #7
     8e4:	f023 0307 	bic.w	r3, r3, #7
     8e8:	f103 0208 	add.w	r2, r3, #8
     8ec:	9203      	str	r2, [sp, #12]
     8ee:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
     8f2:	e9cd 2304 	strd	r2, r3, [sp, #16]
			if (length_mod == LENGTH_HH) {
     8f6:	2901      	cmp	r1, #1
     8f8:	d01c      	beq.n	934 <__z_interrupt_stack_SIZEOF+0xf4>
			} else if (length_mod == LENGTH_H) {
     8fa:	2902      	cmp	r1, #2
     8fc:	f47f aeff 	bne.w	6fe <z_cbvprintf_impl+0xae>
				value->uint = (unsigned short)value->uint;
     900:	f8bd 3010 	ldrh.w	r3, [sp, #16]
     904:	9304      	str	r3, [sp, #16]
     906:	2300      	movs	r3, #0
     908:	9305      	str	r3, [sp, #20]
     90a:	e6f8      	b.n	6fe <z_cbvprintf_impl+0xae>
					(uint_value_type)va_arg(ap,
     90c:	9b03      	ldr	r3, [sp, #12]
     90e:	3307      	adds	r3, #7
     910:	f023 0307 	bic.w	r3, r3, #7
     914:	f103 0208 	add.w	r2, r3, #8
     918:	9203      	str	r2, [sp, #12]
     91a:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
     91e:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
     922:	e7e8      	b.n	8f6 <__z_interrupt_stack_SIZEOF+0xb6>
					(uint_value_type)va_arg(ap, size_t);
     924:	9b03      	ldr	r3, [sp, #12]
     926:	1d1a      	adds	r2, r3, #4
     928:	9203      	str	r2, [sp, #12]
     92a:	681b      	ldr	r3, [r3, #0]
				value->uint =
     92c:	9304      	str	r3, [sp, #16]
     92e:	2300      	movs	r3, #0
     930:	9305      	str	r3, [sp, #20]
				break;
     932:	e7e0      	b.n	8f6 <__z_interrupt_stack_SIZEOF+0xb6>
				value->uint = (unsigned char)value->uint;
     934:	f89d 3010 	ldrb.w	r3, [sp, #16]
     938:	9304      	str	r3, [sp, #16]
     93a:	2300      	movs	r3, #0
     93c:	9305      	str	r3, [sp, #20]
     93e:	e6de      	b.n	6fe <z_cbvprintf_impl+0xae>
			if (length_mod == LENGTH_UPPER_L) {
     940:	2908      	cmp	r1, #8
     942:	d00b      	beq.n	95c <__z_interrupt_stack_SIZEOF+0x11c>
				value->dbl = va_arg(ap, double);
     944:	9b03      	ldr	r3, [sp, #12]
     946:	3307      	adds	r3, #7
     948:	f023 0307 	bic.w	r3, r3, #7
     94c:	f103 0208 	add.w	r2, r3, #8
     950:	9203      	str	r2, [sp, #12]
     952:	e9d3 2300 	ldrd	r2, r3, [r3]
     956:	e9cd 2304 	strd	r2, r3, [sp, #16]
     95a:	e6d0      	b.n	6fe <z_cbvprintf_impl+0xae>
				value->ldbl = va_arg(ap, long double);
     95c:	9b03      	ldr	r3, [sp, #12]
     95e:	3307      	adds	r3, #7
     960:	f023 0307 	bic.w	r3, r3, #7
     964:	f103 0208 	add.w	r2, r3, #8
     968:	9203      	str	r2, [sp, #12]
     96a:	e9d3 2300 	ldrd	r2, r3, [r3]
     96e:	e9cd 2304 	strd	r2, r3, [sp, #16]
     972:	e6c4      	b.n	6fe <z_cbvprintf_impl+0xae>
			value->ptr = va_arg(ap, void *);
     974:	9b03      	ldr	r3, [sp, #12]
     976:	1d1a      	adds	r2, r3, #4
     978:	9203      	str	r2, [sp, #12]
     97a:	681b      	ldr	r3, [r3, #0]
     97c:	9304      	str	r3, [sp, #16]
     97e:	e6be      	b.n	6fe <z_cbvprintf_impl+0xae>
			OUTS(sp, fp);
     980:	9f02      	ldr	r7, [sp, #8]
     982:	463b      	mov	r3, r7
     984:	464a      	mov	r2, r9
     986:	4629      	mov	r1, r5
     988:	4630      	mov	r0, r6
     98a:	f003 febc 	bl	4706 <outs>
     98e:	2800      	cmp	r0, #0
     990:	f2c0 8125 	blt.w	bde <__z_interrupt_stack_SIZEOF+0x39e>
     994:	4404      	add	r4, r0
		fp = extract_conversion(conv, sp);
     996:	46b9      	mov	r9, r7
			continue;
     998:	e662      	b.n	660 <z_cbvprintf_impl+0x10>
		case '%':
			OUTC('%');
     99a:	4629      	mov	r1, r5
     99c:	2025      	movs	r0, #37	; 0x25
     99e:	47b0      	blx	r6
     9a0:	2800      	cmp	r0, #0
     9a2:	f2c0 811c 	blt.w	bde <__z_interrupt_stack_SIZEOF+0x39e>
     9a6:	3401      	adds	r4, #1
		char sign = 0;
     9a8:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
     9aa:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
     9ae:	f04f 0900 	mov.w	r9, #0
			break;
     9b2:	e07f      	b.n	ab4 <__z_interrupt_stack_SIZEOF+0x274>
		case 's': {
			bps = (const char *)value->ptr;
     9b4:	f8dd 9010 	ldr.w	r9, [sp, #16]

			size_t len;

			if (precision >= 0) {
     9b8:	f1ba 0f00 	cmp.w	sl, #0
     9bc:	db07      	blt.n	9ce <__z_interrupt_stack_SIZEOF+0x18e>
				len = strnlen(bps, precision);
     9be:	4651      	mov	r1, sl
     9c0:	4648      	mov	r0, r9
     9c2:	f003 ffcd 	bl	4960 <strnlen>
			} else {
				len = strlen(bps);
			}

			bpe = bps + len;
     9c6:	eb09 0a00 	add.w	sl, r9, r0
		char sign = 0;
     9ca:	46d8      	mov	r8, fp
			precision = -1;

			break;
     9cc:	e072      	b.n	ab4 <__z_interrupt_stack_SIZEOF+0x274>
				len = strlen(bps);
     9ce:	4648      	mov	r0, r9
     9d0:	f003 ffbd 	bl	494e <strlen>
     9d4:	e7f7      	b.n	9c6 <__z_interrupt_stack_SIZEOF+0x186>
		}
		case 'c':
			bps = buf;
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
     9d6:	9b04      	ldr	r3, [sp, #16]
     9d8:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
		char sign = 0;
     9dc:	46d8      	mov	r8, fp
			bpe = buf + 1;
     9de:	f10d 0a29 	add.w	sl, sp, #41	; 0x29
			bps = buf;
     9e2:	f10d 0928 	add.w	r9, sp, #40	; 0x28
			break;
     9e6:	e065      	b.n	ab4 <__z_interrupt_stack_SIZEOF+0x274>
		case 'd':
		case 'i':
			if (conv->flag_plus) {
     9e8:	f018 0f08 	tst.w	r8, #8
     9ec:	d105      	bne.n	9fa <__z_interrupt_stack_SIZEOF+0x1ba>
				sign = '+';
			} else if (conv->flag_space) {
     9ee:	f018 0810 	ands.w	r8, r8, #16
     9f2:	d004      	beq.n	9fe <__z_interrupt_stack_SIZEOF+0x1be>
				sign = ' ';
     9f4:	f04f 0820 	mov.w	r8, #32
     9f8:	e001      	b.n	9fe <__z_interrupt_stack_SIZEOF+0x1be>
				sign = '+';
     9fa:	f04f 082b 	mov.w	r8, #43	; 0x2b

			/* sint/uint overlay in the union, and so
			 * can't appear in read and write operations
			 * in the same statement.
			 */
			sint = value->sint;
     9fe:	9a04      	ldr	r2, [sp, #16]
     a00:	9b05      	ldr	r3, [sp, #20]
			if (sint < 0) {
     a02:	2b00      	cmp	r3, #0
     a04:	db02      	blt.n	a0c <__z_interrupt_stack_SIZEOF+0x1cc>
				sign = '-';
				value->uint = (uint_value_type)-sint;
			} else {
				value->uint = (uint_value_type)sint;
     a06:	9204      	str	r2, [sp, #16]
     a08:	9305      	str	r3, [sp, #20]
     a0a:	e008      	b.n	a1e <__z_interrupt_stack_SIZEOF+0x1de>
				value->uint = (uint_value_type)-sint;
     a0c:	4252      	negs	r2, r2
     a0e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     a12:	9204      	str	r2, [sp, #16]
     a14:	9305      	str	r3, [sp, #20]
				sign = '-';
     a16:	f04f 082d 	mov.w	r8, #45	; 0x2d
     a1a:	e000      	b.n	a1e <__z_interrupt_stack_SIZEOF+0x1de>
		switch (conv->specifier) {
     a1c:	46d8      	mov	r8, fp
			__fallthrough;
		case 'o':
		case 'u':
		case 'x':
		case 'X':
			bps = encode_uint(value->uint, conv, buf, bpe);
     a1e:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
     a22:	9300      	str	r3, [sp, #0]
     a24:	ab0a      	add	r3, sp, #40	; 0x28
     a26:	aa06      	add	r2, sp, #24
     a28:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
     a2c:	f003 fdfc 	bl	4628 <encode_uint>
     a30:	4681      	mov	r9, r0
			/* Update pad0 values based on precision and converted
			 * length.  Note that a non-empty sign is not in the
			 * converted sequence, but it does not affect the
			 * padding size.
			 */
			if (precision >= 0) {
     a32:	f1ba 0f00 	cmp.w	sl, #0
     a36:	db6c      	blt.n	b12 <__z_interrupt_stack_SIZEOF+0x2d2>
				size_t len = bpe - bps;
     a38:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
     a3c:	eba3 0309 	sub.w	r3, r3, r9

				/* Zero-padding flag is ignored for integer
				 * conversions with precision.
				 */
				conv->flag_zero = false;
     a40:	f89d 2018 	ldrb.w	r2, [sp, #24]
     a44:	f36f 1286 	bfc	r2, #6, #1
     a48:	f88d 2018 	strb.w	r2, [sp, #24]

				/* Set pad0_value to satisfy precision */
				if (len < (size_t)precision) {
     a4c:	459a      	cmp	sl, r3
     a4e:	d963      	bls.n	b18 <__z_interrupt_stack_SIZEOF+0x2d8>
					conv->pad0_value = precision - (int)len;
     a50:	ebaa 0303 	sub.w	r3, sl, r3
     a54:	9307      	str	r3, [sp, #28]
		const char *bpe = buf + sizeof(buf);
     a56:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
     a5a:	e02b      	b.n	ab4 <__z_interrupt_stack_SIZEOF+0x274>
		case 'p':
			/* Implementation-defined: null is "(nil)", non-null
			 * has 0x prefix followed by significant address hex
			 * digits, no leading zeros.
			 */
			if (value->ptr != NULL) {
     a5c:	9804      	ldr	r0, [sp, #16]
     a5e:	b928      	cbnz	r0, a6c <__z_interrupt_stack_SIZEOF+0x22c>
		char sign = 0;
     a60:	46d8      	mov	r8, fp

				goto prec_int_pad0;
			}

			bps = "(nil)";
			bpe = bps + 5;
     a62:	f8df a180 	ldr.w	sl, [pc, #384]	; be4 <__z_interrupt_stack_SIZEOF+0x3a4>
			bps = "(nil)";
     a66:	f1aa 0905 	sub.w	r9, sl, #5
     a6a:	e023      	b.n	ab4 <__z_interrupt_stack_SIZEOF+0x274>
				bps = encode_uint((uintptr_t)value->ptr, conv,
     a6c:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
     a70:	9300      	str	r3, [sp, #0]
     a72:	ab0a      	add	r3, sp, #40	; 0x28
     a74:	aa06      	add	r2, sp, #24
     a76:	2100      	movs	r1, #0
     a78:	f003 fdd6 	bl	4628 <encode_uint>
     a7c:	4681      	mov	r9, r0
				conv->altform_0c = true;
     a7e:	f89d 301a 	ldrb.w	r3, [sp, #26]
     a82:	f043 0310 	orr.w	r3, r3, #16
     a86:	f88d 301a 	strb.w	r3, [sp, #26]
				conv->specifier = 'x';
     a8a:	2378      	movs	r3, #120	; 0x78
     a8c:	f88d 301b 	strb.w	r3, [sp, #27]
		char sign = 0;
     a90:	46d8      	mov	r8, fp
				goto prec_int_pad0;
     a92:	e7ce      	b.n	a32 <__z_interrupt_stack_SIZEOF+0x1f2>

			break;
		case 'n':
			if (IS_ENABLED(CONFIG_CBPRINTF_N_SPECIFIER)) {
				store_count(conv, value->ptr, count);
     a94:	4622      	mov	r2, r4
     a96:	9904      	ldr	r1, [sp, #16]
     a98:	a806      	add	r0, sp, #24
     a9a:	f003 fe15 	bl	46c8 <store_count>
		char sign = 0;
     a9e:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
     aa0:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
     aa4:	f04f 0900 	mov.w	r9, #0
			}

			break;
     aa8:	e004      	b.n	ab4 <__z_interrupt_stack_SIZEOF+0x274>
		switch (conv->specifier) {
     aaa:	46d8      	mov	r8, fp
     aac:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
     ab0:	f04f 0900 	mov.w	r9, #0
		}

		/* If we don't have a converted value to emit, move
		 * on.
		 */
		if (bps == NULL) {
     ab4:	f1b9 0f00 	cmp.w	r9, #0
     ab8:	f000 808d 	beq.w	bd6 <__z_interrupt_stack_SIZEOF+0x396>
		 *   * any exponent content from the converted value
		 * * for non-FP:
		 *   * any pad0_prefix
		 *   * the converted value
		 */
		size_t nj_len = (bpe - bps);
     abc:	ebaa 0309 	sub.w	r3, sl, r9
		int pad_len = 0;

		if (sign != 0) {
     ac0:	f1b8 0f00 	cmp.w	r8, #0
     ac4:	d000      	beq.n	ac8 <__z_interrupt_stack_SIZEOF+0x288>
			nj_len += 1U;
     ac6:	3301      	adds	r3, #1
		}

		if (conv->altform_0c) {
     ac8:	f89d 201a 	ldrb.w	r2, [sp, #26]
     acc:	f012 0f10 	tst.w	r2, #16
     ad0:	d025      	beq.n	b1e <__z_interrupt_stack_SIZEOF+0x2de>
			nj_len += 2U;
     ad2:	3302      	adds	r3, #2
		} else if (conv->altform_0) {
			nj_len += 1U;
		}

		nj_len += conv->pad0_value;
     ad4:	9907      	ldr	r1, [sp, #28]
     ad6:	440b      	add	r3, r1
		if (conv->pad_fp) {
     ad8:	f012 0f40 	tst.w	r2, #64	; 0x40
     adc:	d001      	beq.n	ae2 <__z_interrupt_stack_SIZEOF+0x2a2>
			nj_len += conv->pad0_pre_exp;
     ade:	9a08      	ldr	r2, [sp, #32]
     ae0:	4413      	add	r3, r2
		 * result in no padding.
		 *
		 * If a non-negative padding width is present and we're doing
		 * right-justification, emit the padding now.
		 */
		if (width > 0) {
     ae2:	2f00      	cmp	r7, #0
     ae4:	dd31      	ble.n	b4a <__z_interrupt_stack_SIZEOF+0x30a>
			width -= (int)nj_len;
     ae6:	1aff      	subs	r7, r7, r3

			if (!conv->flag_dash) {
     ae8:	f89d 3018 	ldrb.w	r3, [sp, #24]
     aec:	f013 0f04 	tst.w	r3, #4
     af0:	d12b      	bne.n	b4a <__z_interrupt_stack_SIZEOF+0x30a>
				char pad = ' ';

				/* If we're zero-padding we have to emit the
				 * sign first.
				 */
				if (conv->flag_zero) {
     af2:	f013 0f40 	tst.w	r3, #64	; 0x40
     af6:	d017      	beq.n	b28 <__z_interrupt_stack_SIZEOF+0x2e8>
					if (sign != 0) {
     af8:	f1b8 0f00 	cmp.w	r8, #0
     afc:	d017      	beq.n	b2e <__z_interrupt_stack_SIZEOF+0x2ee>
						OUTC(sign);
     afe:	4629      	mov	r1, r5
     b00:	4640      	mov	r0, r8
     b02:	47b0      	blx	r6
     b04:	2800      	cmp	r0, #0
     b06:	db6a      	blt.n	bde <__z_interrupt_stack_SIZEOF+0x39e>
     b08:	3401      	adds	r4, #1
						sign = 0;
     b0a:	46d8      	mov	r8, fp
					}
					pad = '0';
     b0c:	f04f 0b30 	mov.w	fp, #48	; 0x30
     b10:	e00f      	b.n	b32 <__z_interrupt_stack_SIZEOF+0x2f2>
		const char *bpe = buf + sizeof(buf);
     b12:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
     b16:	e7cd      	b.n	ab4 <__z_interrupt_stack_SIZEOF+0x274>
     b18:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
     b1c:	e7ca      	b.n	ab4 <__z_interrupt_stack_SIZEOF+0x274>
		} else if (conv->altform_0) {
     b1e:	f012 0f08 	tst.w	r2, #8
     b22:	d0d7      	beq.n	ad4 <__z_interrupt_stack_SIZEOF+0x294>
			nj_len += 1U;
     b24:	3301      	adds	r3, #1
     b26:	e7d5      	b.n	ad4 <__z_interrupt_stack_SIZEOF+0x294>
				char pad = ' ';
     b28:	f04f 0b20 	mov.w	fp, #32
     b2c:	e001      	b.n	b32 <__z_interrupt_stack_SIZEOF+0x2f2>
					pad = '0';
     b2e:	f04f 0b30 	mov.w	fp, #48	; 0x30
     b32:	463b      	mov	r3, r7
				}

				while (width-- > 0) {
     b34:	1e5f      	subs	r7, r3, #1
     b36:	2b00      	cmp	r3, #0
     b38:	dd07      	ble.n	b4a <__z_interrupt_stack_SIZEOF+0x30a>
					OUTC(pad);
     b3a:	4629      	mov	r1, r5
     b3c:	4658      	mov	r0, fp
     b3e:	47b0      	blx	r6
     b40:	2800      	cmp	r0, #0
     b42:	db4c      	blt.n	bde <__z_interrupt_stack_SIZEOF+0x39e>
     b44:	3401      	adds	r4, #1
				while (width-- > 0) {
     b46:	463b      	mov	r3, r7
     b48:	e7f4      	b.n	b34 <__z_interrupt_stack_SIZEOF+0x2f4>
		}

		/* If we have a sign that hasn't been emitted, now's the
		 * time....
		 */
		if (sign != 0) {
     b4a:	f1b8 0f00 	cmp.w	r8, #0
     b4e:	d005      	beq.n	b5c <__z_interrupt_stack_SIZEOF+0x31c>
			OUTC(sign);
     b50:	4629      	mov	r1, r5
     b52:	4640      	mov	r0, r8
     b54:	47b0      	blx	r6
     b56:	2800      	cmp	r0, #0
     b58:	db41      	blt.n	bde <__z_interrupt_stack_SIZEOF+0x39e>
     b5a:	3401      	adds	r4, #1
				OUTC('0');
			}

			OUTS(cp, bpe);
		} else {
			if (conv->altform_0c | conv->altform_0) {
     b5c:	f89d 301a 	ldrb.w	r3, [sp, #26]
     b60:	f3c3 1200 	ubfx	r2, r3, #4, #1
     b64:	f3c3 03c0 	ubfx	r3, r3, #3, #1
     b68:	431a      	orrs	r2, r3
     b6a:	d005      	beq.n	b78 <__z_interrupt_stack_SIZEOF+0x338>
				OUTC('0');
     b6c:	4629      	mov	r1, r5
     b6e:	2030      	movs	r0, #48	; 0x30
     b70:	47b0      	blx	r6
     b72:	2800      	cmp	r0, #0
     b74:	db33      	blt.n	bde <__z_interrupt_stack_SIZEOF+0x39e>
     b76:	3401      	adds	r4, #1
			}

			if (conv->altform_0c) {
     b78:	f89d 301a 	ldrb.w	r3, [sp, #26]
     b7c:	f013 0f10 	tst.w	r3, #16
     b80:	d006      	beq.n	b90 <__z_interrupt_stack_SIZEOF+0x350>
				OUTC(conv->specifier);
     b82:	4629      	mov	r1, r5
     b84:	f89d 001b 	ldrb.w	r0, [sp, #27]
     b88:	47b0      	blx	r6
     b8a:	2800      	cmp	r0, #0
     b8c:	db27      	blt.n	bde <__z_interrupt_stack_SIZEOF+0x39e>
     b8e:	3401      	adds	r4, #1
			}

			pad_len = conv->pad0_value;
     b90:	9b07      	ldr	r3, [sp, #28]
			while (pad_len-- > 0) {
     b92:	f103 38ff 	add.w	r8, r3, #4294967295
     b96:	2b00      	cmp	r3, #0
     b98:	dd07      	ble.n	baa <__z_interrupt_stack_SIZEOF+0x36a>
				OUTC('0');
     b9a:	4629      	mov	r1, r5
     b9c:	2030      	movs	r0, #48	; 0x30
     b9e:	47b0      	blx	r6
     ba0:	2800      	cmp	r0, #0
     ba2:	db1c      	blt.n	bde <__z_interrupt_stack_SIZEOF+0x39e>
     ba4:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
     ba6:	4643      	mov	r3, r8
     ba8:	e7f3      	b.n	b92 <__z_interrupt_stack_SIZEOF+0x352>
			}

			OUTS(bps, bpe);
     baa:	4653      	mov	r3, sl
     bac:	464a      	mov	r2, r9
     bae:	4629      	mov	r1, r5
     bb0:	4630      	mov	r0, r6
     bb2:	f003 fda8 	bl	4706 <outs>
     bb6:	2800      	cmp	r0, #0
     bb8:	db11      	blt.n	bde <__z_interrupt_stack_SIZEOF+0x39e>
     bba:	4404      	add	r4, r0
		}

		/* Finish left justification */
		while (width > 0) {
     bbc:	2f00      	cmp	r7, #0
     bbe:	dd07      	ble.n	bd0 <__z_interrupt_stack_SIZEOF+0x390>
			OUTC(' ');
     bc0:	4629      	mov	r1, r5
     bc2:	2020      	movs	r0, #32
     bc4:	47b0      	blx	r6
     bc6:	2800      	cmp	r0, #0
     bc8:	db09      	blt.n	bde <__z_interrupt_stack_SIZEOF+0x39e>
     bca:	3401      	adds	r4, #1
			--width;
     bcc:	3f01      	subs	r7, #1
     bce:	e7f5      	b.n	bbc <__z_interrupt_stack_SIZEOF+0x37c>
		fp = extract_conversion(conv, sp);
     bd0:	f8dd 9008 	ldr.w	r9, [sp, #8]
     bd4:	e544      	b.n	660 <z_cbvprintf_impl+0x10>
     bd6:	f8dd 9008 	ldr.w	r9, [sp, #8]
     bda:	e541      	b.n	660 <z_cbvprintf_impl+0x10>
		}
	}

	return count;
     bdc:	4620      	mov	r0, r4
#undef OUTS
#undef OUTC
}
     bde:	b011      	add	sp, #68	; 0x44
     be0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     be4:	00005d29 	.word	0x00005d29

00000be8 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
     be8:	f001 bca8 	b.w	253c <SystemInit>

00000bec <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
     bec:	b570      	push	{r4, r5, r6, lr}
     bee:	4605      	mov	r5, r0
     bf0:	f04f 0320 	mov.w	r3, #32
     bf4:	f3ef 8611 	mrs	r6, BASEPRI
     bf8:	f383 8812 	msr	BASEPRI_MAX, r3
     bfc:	f3bf 8f6f 	isb	sy
     c00:	4b0e      	ldr	r3, [pc, #56]	; (c3c <pm_state_notify+0x50>)
     c02:	681c      	ldr	r4, [r3, #0]
     c04:	e00d      	b.n	c22 <pm_state_notify+0x36>
	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
		if (entering_state) {
			callback = notifier->state_entry;
		} else {
			callback = notifier->state_exit;
     c06:	68a2      	ldr	r2, [r4, #8]
		}

		if (callback) {
     c08:	b13a      	cbz	r2, c1a <pm_state_notify+0x2e>
			callback(z_cpus_pm_state[_current_cpu->id].state);
     c0a:	4b0d      	ldr	r3, [pc, #52]	; (c40 <pm_state_notify+0x54>)
     c0c:	7d1b      	ldrb	r3, [r3, #20]
     c0e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     c12:	490c      	ldr	r1, [pc, #48]	; (c44 <pm_state_notify+0x58>)
     c14:	f811 0023 	ldrb.w	r0, [r1, r3, lsl #2]
     c18:	4790      	blx	r2
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
     c1a:	4623      	mov	r3, r4
	return node->next;
     c1c:	6824      	ldr	r4, [r4, #0]
     c1e:	b104      	cbz	r4, c22 <pm_state_notify+0x36>
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
     c20:	b123      	cbz	r3, c2c <pm_state_notify+0x40>
     c22:	b12c      	cbz	r4, c30 <pm_state_notify+0x44>
		if (entering_state) {
     c24:	2d00      	cmp	r5, #0
     c26:	d0ee      	beq.n	c06 <pm_state_notify+0x1a>
			callback = notifier->state_entry;
     c28:	6862      	ldr	r2, [r4, #4]
     c2a:	e7ed      	b.n	c08 <pm_state_notify+0x1c>
     c2c:	461c      	mov	r4, r3
     c2e:	e7f8      	b.n	c22 <pm_state_notify+0x36>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     c30:	f386 8811 	msr	BASEPRI, r6
     c34:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
     c38:	bd70      	pop	{r4, r5, r6, pc}
     c3a:	bf00      	nop
     c3c:	20000270 	.word	0x20000270
     c40:	200007d4 	.word	0x200007d4
     c44:	20000264 	.word	0x20000264

00000c48 <pm_exit_pos_ops>:
{
     c48:	b508      	push	{r3, lr}
	if (pm_state_exit_post_ops != NULL) {
     c4a:	4b06      	ldr	r3, [pc, #24]	; (c64 <pm_exit_pos_ops+0x1c>)
     c4c:	b123      	cbz	r3, c58 <pm_exit_pos_ops+0x10>
		pm_state_exit_post_ops(info->state, info->substate_id);
     c4e:	7841      	ldrb	r1, [r0, #1]
     c50:	7800      	ldrb	r0, [r0, #0]
     c52:	f003 fef6 	bl	4a42 <pm_state_exit_post_ops>
}
     c56:	bd08      	pop	{r3, pc}
     c58:	2300      	movs	r3, #0
     c5a:	f383 8811 	msr	BASEPRI, r3
     c5e:	f3bf 8f6f 	isb	sy
     c62:	e7f8      	b.n	c56 <pm_exit_pos_ops+0xe>
     c64:	00004a43 	.word	0x00004a43

00000c68 <pm_system_resume>:

void pm_system_resume(void)
{
     c68:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
     c6a:	4b0e      	ldr	r3, [pc, #56]	; (ca4 <pm_system_resume+0x3c>)
     c6c:	7d1c      	ldrb	r4, [r3, #20]
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
     c6e:	4621      	mov	r1, r4
     c70:	480d      	ldr	r0, [pc, #52]	; (ca8 <pm_system_resume+0x40>)
     c72:	f003 fd63 	bl	473c <atomic_test_and_clear_bit>
     c76:	b900      	cbnz	r0, c7a <pm_system_resume+0x12>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
			0, 0};
	}
}
     c78:	bd70      	pop	{r4, r5, r6, pc}
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
     c7a:	0065      	lsls	r5, r4, #1
     c7c:	eb04 0044 	add.w	r0, r4, r4, lsl #1
     c80:	4e0a      	ldr	r6, [pc, #40]	; (cac <pm_system_resume+0x44>)
     c82:	eb06 0080 	add.w	r0, r6, r0, lsl #2
     c86:	f7ff ffdf 	bl	c48 <pm_exit_pos_ops>
		pm_state_notify(false);
     c8a:	2000      	movs	r0, #0
     c8c:	f7ff ffae 	bl	bec <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
     c90:	192b      	adds	r3, r5, r4
     c92:	0099      	lsls	r1, r3, #2
     c94:	eb06 0383 	add.w	r3, r6, r3, lsl #2
     c98:	2200      	movs	r2, #0
     c9a:	5072      	str	r2, [r6, r1]
     c9c:	605a      	str	r2, [r3, #4]
     c9e:	609a      	str	r2, [r3, #8]
}
     ca0:	e7ea      	b.n	c78 <pm_system_resume+0x10>
     ca2:	bf00      	nop
     ca4:	200007d4 	.word	0x200007d4
     ca8:	20000278 	.word	0x20000278
     cac:	20000264 	.word	0x20000264

00000cb0 <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
     cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     cb2:	4605      	mov	r5, r0
	uint8_t id = CURRENT_CPU;
     cb4:	4b38      	ldr	r3, [pc, #224]	; (d98 <pm_system_suspend+0xe8>)
     cb6:	7d1c      	ldrb	r4, [r3, #20]
	__asm__ volatile(
     cb8:	f04f 0320 	mov.w	r3, #32
     cbc:	f3ef 8611 	mrs	r6, BASEPRI
     cc0:	f383 8812 	msr	BASEPRI_MAX, r3
     cc4:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
     cc8:	eb04 0244 	add.w	r2, r4, r4, lsl #1
     ccc:	4b33      	ldr	r3, [pc, #204]	; (d9c <pm_system_suspend+0xec>)
     cce:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
     cd2:	2b00      	cmp	r3, #0
     cd4:	d039      	beq.n	d4a <pm_system_suspend+0x9a>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
     cd6:	4b32      	ldr	r3, [pc, #200]	; (da0 <pm_system_suspend+0xf0>)
     cd8:	eb03 0c82 	add.w	ip, r3, r2, lsl #2
     cdc:	4f2f      	ldr	r7, [pc, #188]	; (d9c <pm_system_suspend+0xec>)
     cde:	ea4f 0e82 	mov.w	lr, r2, lsl #2
     ce2:	eb07 0382 	add.w	r3, r7, r2, lsl #2
     ce6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
     cea:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
     cee:	2300      	movs	r3, #0
     cf0:	f807 300e 	strb.w	r3, [r7, lr]
	__asm__ volatile(
     cf4:	f386 8811 	msr	BASEPRI, r6
     cf8:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
     cfc:	eb04 0344 	add.w	r3, r4, r4, lsl #1
     d00:	4a27      	ldr	r2, [pc, #156]	; (da0 <pm_system_suspend+0xf0>)
     d02:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
     d06:	2b00      	cmp	r3, #0
     d08:	d044      	beq.n	d94 <pm_system_suspend+0xe4>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
     d0a:	f1b5 3fff 	cmp.w	r5, #4294967295
     d0e:	d12b      	bne.n	d68 <pm_system_suspend+0xb8>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
     d10:	f002 fcd8 	bl	36c4 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
     d14:	2001      	movs	r0, #1
     d16:	f7ff ff69 	bl	bec <pm_state_notify>
	atomic_set_bit(z_post_ops_required, id);
     d1a:	4621      	mov	r1, r4
     d1c:	4821      	ldr	r0, [pc, #132]	; (da4 <pm_system_suspend+0xf4>)
     d1e:	f003 fd29 	bl	4774 <atomic_set_bit>
	if (pm_state_set != NULL) {
     d22:	4b21      	ldr	r3, [pc, #132]	; (da8 <pm_system_suspend+0xf8>)
     d24:	b15b      	cbz	r3, d3e <pm_system_suspend+0x8e>
		pm_state_set(info->state, info->substate_id);
     d26:	4a1e      	ldr	r2, [pc, #120]	; (da0 <pm_system_suspend+0xf0>)
     d28:	eb04 0344 	add.w	r3, r4, r4, lsl #1
     d2c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
     d30:	eb04 0444 	add.w	r4, r4, r4, lsl #1
     d34:	7859      	ldrb	r1, [r3, #1]
     d36:	f812 0024 	ldrb.w	r0, [r2, r4, lsl #2]
     d3a:	f003 fe7a 	bl	4a32 <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
     d3e:	f7ff ff93 	bl	c68 <pm_system_resume>
	k_sched_unlock();
     d42:	f002 fe63 	bl	3a0c <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
     d46:	2001      	movs	r0, #1
}
     d48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		info = pm_policy_next_state(id, ticks);
     d4a:	4601      	mov	r1, r0
     d4c:	4620      	mov	r0, r4
     d4e:	f000 f831 	bl	db4 <pm_policy_next_state>
		if (info != NULL) {
     d52:	2800      	cmp	r0, #0
     d54:	d0ce      	beq.n	cf4 <pm_system_suspend+0x44>
			z_cpus_pm_state[id] = *info;
     d56:	eb04 0144 	add.w	r1, r4, r4, lsl #1
     d5a:	4b11      	ldr	r3, [pc, #68]	; (da0 <pm_system_suspend+0xf0>)
     d5c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
     d60:	c807      	ldmia	r0, {r0, r1, r2}
     d62:	e883 0007 	stmia.w	r3, {r0, r1, r2}
     d66:	e7c5      	b.n	cf4 <pm_system_suspend+0x44>
		     k_us_to_ticks_ceil32(
     d68:	eb04 0244 	add.w	r2, r4, r4, lsl #1
     d6c:	4b0c      	ldr	r3, [pc, #48]	; (da0 <pm_system_suspend+0xf0>)
     d6e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
     d72:	6898      	ldr	r0, [r3, #8]
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
     d74:	0c41      	lsrs	r1, r0, #17
     d76:	03c0      	lsls	r0, r0, #15
     d78:	4b0c      	ldr	r3, [pc, #48]	; (dac <pm_system_suspend+0xfc>)
     d7a:	18c0      	adds	r0, r0, r3
     d7c:	4a0c      	ldr	r2, [pc, #48]	; (db0 <pm_system_suspend+0x100>)
     d7e:	f04f 0300 	mov.w	r3, #0
     d82:	f141 0100 	adc.w	r1, r1, #0
     d86:	f7ff f9bb 	bl	100 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
     d8a:	2101      	movs	r1, #1
     d8c:	1a28      	subs	r0, r5, r0
     d8e:	f004 fde9 	bl	5964 <z_set_timeout_expiry>
     d92:	e7bd      	b.n	d10 <pm_system_suspend+0x60>
		return false;
     d94:	2000      	movs	r0, #0
     d96:	e7d7      	b.n	d48 <pm_system_suspend+0x98>
     d98:	200007d4 	.word	0x200007d4
     d9c:	20000258 	.word	0x20000258
     da0:	20000264 	.word	0x20000264
     da4:	20000278 	.word	0x20000278
     da8:	00004a33 	.word	0x00004a33
     dac:	000f423f 	.word	0x000f423f
     db0:	000f4240 	.word	0x000f4240

00000db4 <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
     db4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     db8:	b082      	sub	sp, #8
     dba:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
     dbc:	a901      	add	r1, sp, #4
     dbe:	f000 f845 	bl	e4c <pm_state_cpu_get_all>

	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
     dc2:	1e44      	subs	r4, r0, #1
     dc4:	b224      	sxth	r4, r4
     dc6:	e007      	b.n	dd8 <pm_policy_next_state+0x24>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
		    (exit_latency >= max_latency_ticks)) {
			continue;
		}

		if ((ticks == K_TICKS_FOREVER) ||
     dc8:	f1b6 3fff 	cmp.w	r6, #4294967295
     dcc:	d033      	beq.n	e36 <pm_policy_next_state+0x82>
		    (ticks >= (min_residency + exit_latency))) {
     dce:	4480      	add	r8, r0
		if ((ticks == K_TICKS_FOREVER) ||
     dd0:	45b0      	cmp	r8, r6
     dd2:	d930      	bls.n	e36 <pm_policy_next_state+0x82>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
     dd4:	3c01      	subs	r4, #1
     dd6:	b224      	sxth	r4, r4
     dd8:	2c00      	cmp	r4, #0
     dda:	db2b      	blt.n	e34 <pm_policy_next_state+0x80>
		const struct pm_state_info *state = &cpu_states[i];
     ddc:	9b01      	ldr	r3, [sp, #4]
     dde:	eb04 0244 	add.w	r2, r4, r4, lsl #1
     de2:	eb03 0582 	add.w	r5, r3, r2, lsl #2
		if (pm_policy_state_lock_is_active(state->state, state->substate_id)) {
     de6:	7869      	ldrb	r1, [r5, #1]
     de8:	f813 0022 	ldrb.w	r0, [r3, r2, lsl #2]
     dec:	f003 fcd5 	bl	479a <pm_policy_state_lock_is_active>
     df0:	2800      	cmp	r0, #0
     df2:	d1ef      	bne.n	dd4 <pm_policy_next_state+0x20>
		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
     df4:	6868      	ldr	r0, [r5, #4]
     df6:	0c41      	lsrs	r1, r0, #17
     df8:	03c0      	lsls	r0, r0, #15
     dfa:	4f11      	ldr	r7, [pc, #68]	; (e40 <pm_policy_next_state+0x8c>)
     dfc:	19c0      	adds	r0, r0, r7
     dfe:	4a11      	ldr	r2, [pc, #68]	; (e44 <pm_policy_next_state+0x90>)
     e00:	f04f 0300 	mov.w	r3, #0
     e04:	f141 0100 	adc.w	r1, r1, #0
     e08:	f7ff f97a 	bl	100 <__aeabi_uldivmod>
     e0c:	4680      	mov	r8, r0
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);
     e0e:	68ab      	ldr	r3, [r5, #8]
     e10:	0c59      	lsrs	r1, r3, #17
     e12:	03db      	lsls	r3, r3, #15
     e14:	19d8      	adds	r0, r3, r7
     e16:	4a0b      	ldr	r2, [pc, #44]	; (e44 <pm_policy_next_state+0x90>)
     e18:	f04f 0300 	mov.w	r3, #0
     e1c:	f141 0100 	adc.w	r1, r1, #0
     e20:	f7ff f96e 	bl	100 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
     e24:	4b08      	ldr	r3, [pc, #32]	; (e48 <pm_policy_next_state+0x94>)
     e26:	681b      	ldr	r3, [r3, #0]
     e28:	f1b3 3fff 	cmp.w	r3, #4294967295
     e2c:	d0cc      	beq.n	dc8 <pm_policy_next_state+0x14>
     e2e:	4283      	cmp	r3, r0
     e30:	d8ca      	bhi.n	dc8 <pm_policy_next_state+0x14>
     e32:	e7cf      	b.n	dd4 <pm_policy_next_state+0x20>
			return state;
		}
	}

	return NULL;
     e34:	2500      	movs	r5, #0
}
     e36:	4628      	mov	r0, r5
     e38:	b002      	add	sp, #8
     e3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     e3e:	bf00      	nop
     e40:	000f423f 	.word	0x000f423f
     e44:	000f4240 	.word	0x000f4240
     e48:	20000004 	.word	0x20000004

00000e4c <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
     e4c:	b908      	cbnz	r0, e52 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
     e4e:	4b02      	ldr	r3, [pc, #8]	; (e58 <pm_state_cpu_get_all+0xc>)
     e50:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
     e52:	2000      	movs	r0, #0
     e54:	4770      	bx	lr
     e56:	bf00      	nop
     e58:	00005d30 	.word	0x00005d30

00000e5c <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
     e5c:	4901      	ldr	r1, [pc, #4]	; (e64 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
     e5e:	2210      	movs	r2, #16
	str	r2, [r1]
     e60:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
     e62:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
     e64:	e000ed10 	.word	0xe000ed10

00000e68 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
     e68:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
     e6a:	4040      	eors	r0, r0
	msr	BASEPRI, r0
     e6c:	f380 8811 	msr	BASEPRI, r0
	isb
     e70:	f3bf 8f6f 	isb	sy
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
     e74:	f3bf 8f4f 	dsb	sy
     e78:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
     e7a:	b662      	cpsie	i
	isb
     e7c:	f3bf 8f6f 	isb	sy

	bx	lr
     e80:	4770      	bx	lr
     e82:	bf00      	nop

00000e84 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
     e84:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
     e86:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
     e88:	f381 8811 	msr	BASEPRI, r1

	_sleep_if_allowed wfe
     e8c:	f3bf 8f4f 	dsb	sy
     e90:	bf20      	wfe

	msr	BASEPRI, r0
     e92:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
     e96:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
     e98:	4770      	bx	lr
     e9a:	bf00      	nop

00000e9c <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
     e9c:	2800      	cmp	r0, #0
     e9e:	db07      	blt.n	eb0 <__NVIC_EnableIRQ+0x14>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     ea0:	f000 021f 	and.w	r2, r0, #31
     ea4:	0940      	lsrs	r0, r0, #5
     ea6:	2301      	movs	r3, #1
     ea8:	4093      	lsls	r3, r2
     eaa:	4a02      	ldr	r2, [pc, #8]	; (eb4 <__NVIC_EnableIRQ+0x18>)
     eac:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
  }
}
     eb0:	4770      	bx	lr
     eb2:	bf00      	nop
     eb4:	e000e100 	.word	0xe000e100

00000eb8 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
     eb8:	2800      	cmp	r0, #0
     eba:	db08      	blt.n	ece <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     ebc:	0149      	lsls	r1, r1, #5
     ebe:	b2c9      	uxtb	r1, r1
     ec0:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
     ec4:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
     ec8:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
     ecc:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     ece:	f000 000f 	and.w	r0, r0, #15
     ed2:	0149      	lsls	r1, r1, #5
     ed4:	b2c9      	uxtb	r1, r1
     ed6:	4b01      	ldr	r3, [pc, #4]	; (edc <__NVIC_SetPriority+0x24>)
     ed8:	5419      	strb	r1, [r3, r0]
  }
}
     eda:	4770      	bx	lr
     edc:	e000ed14 	.word	0xe000ed14

00000ee0 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
     ee0:	0942      	lsrs	r2, r0, #5
     ee2:	4b05      	ldr	r3, [pc, #20]	; (ef8 <arch_irq_is_enabled+0x18>)
     ee4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
     ee8:	f000 001f 	and.w	r0, r0, #31
     eec:	2301      	movs	r3, #1
     eee:	fa03 f000 	lsl.w	r0, r3, r0
}
     ef2:	4010      	ands	r0, r2
     ef4:	4770      	bx	lr
     ef6:	bf00      	nop
     ef8:	e000e100 	.word	0xe000e100

00000efc <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
     efc:	bf30      	wfi
    b z_SysNmiOnReset
     efe:	f7ff bffd 	b.w	efc <z_SysNmiOnReset>
     f02:	bf00      	nop

00000f04 <z_arm_prep_c>:
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
     f04:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
     f06:	4b0b      	ldr	r3, [pc, #44]	; (f34 <z_arm_prep_c+0x30>)
     f08:	4a0b      	ldr	r2, [pc, #44]	; (f38 <z_arm_prep_c+0x34>)
     f0a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
     f0e:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     f10:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     f14:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
     f18:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
     f1c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
     f20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
     f24:	f002 f952 	bl	31cc <z_bss_zero>
	z_data_copy();
     f28:	f002 fec8 	bl	3cbc <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
     f2c:	f000 fa2a 	bl	1384 <z_arm_interrupt_init>
	z_cstart();
     f30:	f002 f9aa 	bl	3288 <z_cstart>
     f34:	e000ed00 	.word	0xe000ed00
     f38:	00000000 	.word	0x00000000

00000f3c <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
     f3c:	4a0a      	ldr	r2, [pc, #40]	; (f68 <arch_swap+0x2c>)
     f3e:	6893      	ldr	r3, [r2, #8]
     f40:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	_current->arch.swap_return_value = _k_neg_eagain;
     f44:	4909      	ldr	r1, [pc, #36]	; (f6c <arch_swap+0x30>)
     f46:	6809      	ldr	r1, [r1, #0]
     f48:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
     f4c:	4908      	ldr	r1, [pc, #32]	; (f70 <arch_swap+0x34>)
     f4e:	684b      	ldr	r3, [r1, #4]
     f50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
     f54:	604b      	str	r3, [r1, #4]
     f56:	2300      	movs	r3, #0
     f58:	f383 8811 	msr	BASEPRI, r3
     f5c:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
     f60:	6893      	ldr	r3, [r2, #8]
}
     f62:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
     f66:	4770      	bx	lr
     f68:	200007d4 	.word	0x200007d4
     f6c:	00005f1c 	.word	0x00005f1c
     f70:	e000ed00 	.word	0xe000ed00

00000f74 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
     f74:	4913      	ldr	r1, [pc, #76]	; (fc4 <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
     f76:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
     f78:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
     f7c:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
     f7e:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
     f82:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
     f86:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
     f88:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
     f8c:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
     f90:	4f0d      	ldr	r7, [pc, #52]	; (fc8 <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
     f92:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
     f96:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
     f98:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
     f9a:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
     f9c:	f8d2 00a8 	ldr.w	r0, [r2, #168]	; 0xa8
    movs r3, #0
     fa0:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
     fa2:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
     fa6:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
     faa:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
     fac:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
     fae:	f000 fa99 	bl	14e4 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
     fb2:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
     fb6:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
     fba:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
     fbe:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
     fc2:	4770      	bx	lr
    ldr r1, =_kernel
     fc4:	200007d4 	.word	0x200007d4
    ldr v4, =_SCS_ICSR
     fc8:	e000ed04 	.word	0xe000ed04

00000fcc <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
     fcc:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
     fd0:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
     fd2:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
     fd6:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
     fda:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
     fdc:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
     fe0:	2902      	cmp	r1, #2
    beq _oops
     fe2:	d0ff      	beq.n	fe4 <_oops>

00000fe4 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
     fe4:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
     fe6:	f003 fbde 	bl	47a6 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
     fea:	bd01      	pop	{r0, pc}

00000fec <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
     fec:	b410      	push	{r4}
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
     fee:	f1a2 0420 	sub.w	r4, r2, #32
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
     ff2:	490e      	ldr	r1, [pc, #56]	; (102c <CONFIG_FPROTECT_BLOCK_SIZE+0x2c>)
     ff4:	f842 1c08 	str.w	r1, [r2, #-8]
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
     ff8:	f021 0101 	bic.w	r1, r1, #1
     ffc:	f842 1c08 	str.w	r1, [r2, #-8]
#endif
	iframe->a1 = (uint32_t)entry;
    1000:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    1004:	9b01      	ldr	r3, [sp, #4]
    1006:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    100a:	9b02      	ldr	r3, [sp, #8]
    100c:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    1010:	9b03      	ldr	r3, [sp, #12]
    1012:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    1016:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    101a:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe = (struct __basic_sf *)
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
    101e:	6504      	str	r4, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    1020:	2300      	movs	r3, #0
    1022:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    1026:	bc10      	pop	{r4}
    1028:	4770      	bx	lr
    102a:	bf00      	nop
    102c:	00003fc9 	.word	0x00003fc9

00001030 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    1030:	4b10      	ldr	r3, [pc, #64]	; (1074 <z_check_thread_stack_fail+0x44>)
    1032:	689b      	ldr	r3, [r3, #8]

	if (thread == NULL) {
    1034:	b1bb      	cbz	r3, 1066 <z_check_thread_stack_fail+0x36>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    1036:	f110 0f16 	cmn.w	r0, #22
    103a:	d00b      	beq.n	1054 <z_check_thread_stack_fail+0x24>
    103c:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    1040:	f1a2 0c40 	sub.w	ip, r2, #64	; 0x40
    1044:	4584      	cmp	ip, r0
    1046:	d810      	bhi.n	106a <z_check_thread_stack_fail+0x3a>
    1048:	4282      	cmp	r2, r0
    104a:	d910      	bls.n	106e <z_check_thread_stack_fail+0x3e>
    104c:	428a      	cmp	r2, r1
    104e:	d807      	bhi.n	1060 <z_check_thread_stack_fail+0x30>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    1050:	2000      	movs	r0, #0
    1052:	4770      	bx	lr
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    1054:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    1058:	428a      	cmp	r2, r1
    105a:	d801      	bhi.n	1060 <z_check_thread_stack_fail+0x30>
	return 0;
    105c:	2000      	movs	r0, #0
}
    105e:	4770      	bx	lr
		return thread->stack_info.start;
    1060:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
    1064:	4770      	bx	lr
		return 0;
    1066:	2000      	movs	r0, #0
    1068:	4770      	bx	lr
	return 0;
    106a:	2000      	movs	r0, #0
    106c:	4770      	bx	lr
    106e:	2000      	movs	r0, #0
    1070:	4770      	bx	lr
    1072:	bf00      	nop
    1074:	200007d4 	.word	0x200007d4

00001078 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    1078:	b508      	push	{r3, lr}
    107a:	460d      	mov	r5, r1
    107c:	4614      	mov	r4, r2
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    107e:	4b08      	ldr	r3, [pc, #32]	; (10a0 <arch_switch_to_main_thread+0x28>)
    1080:	6098      	str	r0, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    1082:	f000 fa2f 	bl	14e4 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    1086:	4620      	mov	r0, r4
    1088:	f385 8809 	msr	PSP, r5
    108c:	2100      	movs	r1, #0
    108e:	b663      	cpsie	if
    1090:	f381 8811 	msr	BASEPRI, r1
    1094:	f3bf 8f6f 	isb	sy
    1098:	2200      	movs	r2, #0
    109a:	2300      	movs	r3, #0
    109c:	f002 ff94 	bl	3fc8 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    10a0:	200007d4 	.word	0x200007d4

000010a4 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    10a4:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    10a6:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    10a8:	4a0b      	ldr	r2, [pc, #44]	; (10d8 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    10aa:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    10ac:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    10ae:	bf1e      	ittt	ne
	movne	r1, #0
    10b0:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    10b2:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    10b4:	f004 fb02 	blne	56bc <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    10b8:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    10ba:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    10be:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    10c2:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    10c6:	4905      	ldr	r1, [pc, #20]	; (10dc <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    10c8:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    10ca:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    10cc:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    10ce:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    10d2:	4903      	ldr	r1, [pc, #12]	; (10e0 <_isr_wrapper+0x3c>)
	bx r1
    10d4:	4708      	bx	r1
    10d6:	0000      	.short	0x0000
	ldr r2, =_kernel
    10d8:	200007d4 	.word	0x200007d4
	ldr r1, =_sw_isr_table
    10dc:	00005a98 	.word	0x00005a98
	ldr r1, =z_arm_int_exit
    10e0:	000010e5 	.word	0x000010e5

000010e4 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    10e4:	4b04      	ldr	r3, [pc, #16]	; (10f8 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    10e6:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    10e8:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    10ea:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    10ec:	d003      	beq.n	10f6 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    10ee:	4903      	ldr	r1, [pc, #12]	; (10fc <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    10f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    10f4:	600a      	str	r2, [r1, #0]

000010f6 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    10f6:	4770      	bx	lr
	ldr r3, =_kernel
    10f8:	200007d4 	.word	0x200007d4
	ldr r1, =_SCS_ICSR
    10fc:	e000ed04 	.word	0xe000ed04

00001100 <bus_fault>:
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
{
    1100:	b510      	push	{r4, lr}
    1102:	4614      	mov	r4, r2
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    1104:	4b12      	ldr	r3, [pc, #72]	; (1150 <bus_fault+0x50>)
    1106:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    1108:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    110a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    110c:	f413 7f00 	tst.w	r3, #512	; 0x200
    1110:	d00b      	beq.n	112a <bus_fault+0x2a>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    1112:	4b0f      	ldr	r3, [pc, #60]	; (1150 <bus_fault+0x50>)
    1114:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    1116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1118:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    111c:	d005      	beq.n	112a <bus_fault+0x2a>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
    111e:	b121      	cbz	r1, 112a <bus_fault+0x2a>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    1120:	4a0b      	ldr	r2, [pc, #44]	; (1150 <bus_fault+0x50>)
    1122:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1124:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    1128:	6293      	str	r3, [r2, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    112a:	4b09      	ldr	r3, [pc, #36]	; (1150 <bus_fault+0x50>)
    112c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    112e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1130:	f413 7f80 	tst.w	r3, #256	; 0x100
    1134:	d101      	bne.n	113a <bus_fault+0x3a>
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    1136:	4b06      	ldr	r3, [pc, #24]	; (1150 <bus_fault+0x50>)
    1138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    113a:	4a05      	ldr	r2, [pc, #20]	; (1150 <bus_fault+0x50>)
    113c:	6a93      	ldr	r3, [r2, #40]	; 0x28
    113e:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    1142:	6293      	str	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    1144:	2101      	movs	r1, #1
    1146:	f003 fb4b 	bl	47e0 <memory_fault_recoverable>
    114a:	7020      	strb	r0, [r4, #0]

	return reason;
}
    114c:	2000      	movs	r0, #0
    114e:	bd10      	pop	{r4, pc}
    1150:	e000ed00 	.word	0xe000ed00

00001154 <usage_fault>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    1154:	4b07      	ldr	r3, [pc, #28]	; (1174 <usage_fault+0x20>)
    1156:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    1158:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    115a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    115c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    115e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    1160:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    1162:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1164:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    1168:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    116c:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
    116e:	2000      	movs	r0, #0
    1170:	4770      	bx	lr
    1172:	bf00      	nop
    1174:	e000ed00 	.word	0xe000ed00

00001178 <z_arm_is_synchronous_svc>:
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

static inline bool z_arm_is_synchronous_svc(z_arch_esf_t *esf)
{
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    1178:	6981      	ldr	r1, [r0, #24]
	/* Note: ARMv6-M does not support CCR.BFHFNMIGN so this access
	 * could generate a fault if the pc was invalid.
	 */
	uint16_t fault_insn = *(ret_addr - 1);
#else
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    117a:	4b0d      	ldr	r3, [pc, #52]	; (11b0 <z_arm_is_synchronous_svc+0x38>)
    117c:	695a      	ldr	r2, [r3, #20]
    117e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    1182:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    1184:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1188:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();

	uint16_t fault_insn = *(ret_addr - 1);
    118c:	f831 1c02 	ldrh.w	r1, [r1, #-2]

	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    1190:	695a      	ldr	r2, [r3, #20]
    1192:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    1196:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    1198:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    119c:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
#endif /* ARMV6_M_ARMV8_M_BASELINE && !ARMV8_M_BASELINE */

	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    11a0:	f64d 7302 	movw	r3, #57090	; 0xdf02
    11a4:	4299      	cmp	r1, r3
    11a6:	d001      	beq.n	11ac <z_arm_is_synchronous_svc+0x34>
		((fault_insn & 0x00ff) == _SVC_CALL_RUNTIME_EXCEPT)) {
		return true;
	}
#undef _SVC_OPCODE
	return false;
    11a8:	2000      	movs	r0, #0
    11aa:	4770      	bx	lr
		return true;
    11ac:	2001      	movs	r0, #1
}
    11ae:	4770      	bx	lr
    11b0:	e000ed00 	.word	0xe000ed00

000011b4 <mem_manage_fault>:
{
    11b4:	b570      	push	{r4, r5, r6, lr}
    11b6:	4605      	mov	r5, r0
    11b8:	4616      	mov	r6, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    11ba:	4b25      	ldr	r3, [pc, #148]	; (1250 <mem_manage_fault+0x9c>)
    11bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    11be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    11c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    11c2:	f013 0f02 	tst.w	r3, #2
    11c6:	d00c      	beq.n	11e2 <mem_manage_fault+0x2e>
		uint32_t temp = SCB->MMFAR;
    11c8:	4b21      	ldr	r3, [pc, #132]	; (1250 <mem_manage_fault+0x9c>)
    11ca:	6b58      	ldr	r0, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    11cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    11ce:	f013 0f80 	tst.w	r3, #128	; 0x80
    11d2:	d02f      	beq.n	1234 <mem_manage_fault+0x80>
			if (from_hard_fault != 0) {
    11d4:	b139      	cbz	r1, 11e6 <mem_manage_fault+0x32>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    11d6:	4a1e      	ldr	r2, [pc, #120]	; (1250 <mem_manage_fault+0x9c>)
    11d8:	6a93      	ldr	r3, [r2, #40]	; 0x28
    11da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    11de:	6293      	str	r3, [r2, #40]	; 0x28
    11e0:	e001      	b.n	11e6 <mem_manage_fault+0x32>
	uint32_t mmfar = -EINVAL;
    11e2:	f06f 0015 	mvn.w	r0, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    11e6:	4b1a      	ldr	r3, [pc, #104]	; (1250 <mem_manage_fault+0x9c>)
    11e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    11ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    11ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    11ee:	f013 0f10 	tst.w	r3, #16
    11f2:	d104      	bne.n	11fe <mem_manage_fault+0x4a>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    11f4:	4b16      	ldr	r3, [pc, #88]	; (1250 <mem_manage_fault+0x9c>)
    11f6:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    11f8:	f014 0402 	ands.w	r4, r4, #2
    11fc:	d004      	beq.n	1208 <mem_manage_fault+0x54>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    11fe:	4b14      	ldr	r3, [pc, #80]	; (1250 <mem_manage_fault+0x9c>)
    1200:	685c      	ldr	r4, [r3, #4]
    1202:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
    1206:	d118      	bne.n	123a <mem_manage_fault+0x86>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    1208:	4b11      	ldr	r3, [pc, #68]	; (1250 <mem_manage_fault+0x9c>)
    120a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    120c:	f013 0f20 	tst.w	r3, #32
    1210:	d004      	beq.n	121c <mem_manage_fault+0x68>
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    1212:	4a0f      	ldr	r2, [pc, #60]	; (1250 <mem_manage_fault+0x9c>)
    1214:	6a53      	ldr	r3, [r2, #36]	; 0x24
    1216:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    121a:	6253      	str	r3, [r2, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    121c:	4a0c      	ldr	r2, [pc, #48]	; (1250 <mem_manage_fault+0x9c>)
    121e:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1220:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    1224:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    1226:	2101      	movs	r1, #1
    1228:	4628      	mov	r0, r5
    122a:	f003 fad9 	bl	47e0 <memory_fault_recoverable>
    122e:	7030      	strb	r0, [r6, #0]
}
    1230:	4620      	mov	r0, r4
    1232:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t mmfar = -EINVAL;
    1234:	f06f 0015 	mvn.w	r0, #21
    1238:	e7d5      	b.n	11e6 <mem_manage_fault+0x32>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    123a:	4629      	mov	r1, r5
    123c:	f7ff fef8 	bl	1030 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    1240:	4604      	mov	r4, r0
    1242:	2800      	cmp	r0, #0
    1244:	d0e0      	beq.n	1208 <mem_manage_fault+0x54>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    1246:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    124a:	2402      	movs	r4, #2
    124c:	e7dc      	b.n	1208 <mem_manage_fault+0x54>
    124e:	bf00      	nop
    1250:	e000ed00 	.word	0xe000ed00

00001254 <hard_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t hard_fault(z_arch_esf_t *esf, bool *recoverable)
{
    1254:	b538      	push	{r3, r4, r5, lr}
    1256:	4605      	mov	r5, r0
		reason = esf->basic.r0;
	}

	*recoverable = memory_fault_recoverable(esf, true);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	*recoverable = false;
    1258:	2300      	movs	r3, #0
    125a:	700b      	strb	r3, [r1, #0]

	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    125c:	4b1a      	ldr	r3, [pc, #104]	; (12c8 <hard_fault+0x74>)
    125e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    1260:	f010 0002 	ands.w	r0, r0, #2
    1264:	d12d      	bne.n	12c2 <hard_fault+0x6e>
    1266:	460c      	mov	r4, r1
		PR_EXC("  Bus fault on vector table read");
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    1268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    126a:	2b00      	cmp	r3, #0
    126c:	db2a      	blt.n	12c4 <hard_fault+0x70>
		PR_EXC("  Debug event");
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    126e:	4b16      	ldr	r3, [pc, #88]	; (12c8 <hard_fault+0x74>)
    1270:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    1272:	f010 4080 	ands.w	r0, r0, #1073741824	; 0x40000000
    1276:	d025      	beq.n	12c4 <hard_fault+0x70>
		PR_EXC("  Fault escalation (see below)");
		if (z_arm_is_synchronous_svc(esf)) {
    1278:	4628      	mov	r0, r5
    127a:	f7ff ff7d 	bl	1178 <z_arm_is_synchronous_svc>
    127e:	b108      	cbz	r0, 1284 <hard_fault+0x30>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
			reason = esf->basic.r0;
    1280:	6828      	ldr	r0, [r5, #0]
    1282:	e01f      	b.n	12c4 <hard_fault+0x70>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
    1284:	4b10      	ldr	r3, [pc, #64]	; (12c8 <hard_fault+0x74>)
    1286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1288:	f013 0fff 	tst.w	r3, #255	; 0xff
    128c:	d10d      	bne.n	12aa <hard_fault+0x56>
			reason = mem_manage_fault(esf, 1, recoverable);
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
    128e:	4b0e      	ldr	r3, [pc, #56]	; (12c8 <hard_fault+0x74>)
    1290:	6a98      	ldr	r0, [r3, #40]	; 0x28
    1292:	f410 407f 	ands.w	r0, r0, #65280	; 0xff00
    1296:	d10e      	bne.n	12b6 <hard_fault+0x62>
			reason = bus_fault(esf, 1, recoverable);
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
    1298:	4b0b      	ldr	r3, [pc, #44]	; (12c8 <hard_fault+0x74>)
    129a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    129c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    12a0:	d310      	bcc.n	12c4 <hard_fault+0x70>
			reason = usage_fault(esf);
    12a2:	4628      	mov	r0, r5
    12a4:	f7ff ff56 	bl	1154 <usage_fault>
    12a8:	e00c      	b.n	12c4 <hard_fault+0x70>
			reason = mem_manage_fault(esf, 1, recoverable);
    12aa:	4622      	mov	r2, r4
    12ac:	2101      	movs	r1, #1
    12ae:	4628      	mov	r0, r5
    12b0:	f7ff ff80 	bl	11b4 <mem_manage_fault>
    12b4:	e006      	b.n	12c4 <hard_fault+0x70>
			reason = bus_fault(esf, 1, recoverable);
    12b6:	4622      	mov	r2, r4
    12b8:	2101      	movs	r1, #1
    12ba:	4628      	mov	r0, r5
    12bc:	f7ff ff20 	bl	1100 <bus_fault>
    12c0:	e000      	b.n	12c4 <hard_fault+0x70>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    12c2:	2000      	movs	r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	return reason;
}
    12c4:	bd38      	pop	{r3, r4, r5, pc}
    12c6:	bf00      	nop
    12c8:	e000ed00 	.word	0xe000ed00

000012cc <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    12cc:	b570      	push	{r4, r5, r6, lr}
    12ce:	b08a      	sub	sp, #40	; 0x28
    12d0:	460c      	mov	r4, r1
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    12d2:	4b22      	ldr	r3, [pc, #136]	; (135c <z_arm_fault+0x90>)
    12d4:	6859      	ldr	r1, [r3, #4]
    12d6:	f3c1 0108 	ubfx	r1, r1, #0, #9
    12da:	2300      	movs	r3, #0
    12dc:	f383 8811 	msr	BASEPRI, r3
    12e0:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    12e4:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    12e8:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    12ec:	d115      	bne.n	131a <z_arm_fault+0x4e>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    12ee:	f002 030c 	and.w	r3, r2, #12
    12f2:	2b08      	cmp	r3, #8
    12f4:	d014      	beq.n	1320 <z_arm_fault+0x54>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    12f6:	f012 0f08 	tst.w	r2, #8
    12fa:	d00b      	beq.n	1314 <z_arm_fault+0x48>
	*nested_exc = false;
    12fc:	2600      	movs	r6, #0

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
    12fe:	f10d 0227 	add.w	r2, sp, #39	; 0x27
    1302:	4620      	mov	r0, r4
    1304:	f003 fa71 	bl	47ea <fault_handle>
    1308:	4605      	mov	r5, r0
	if (recoverable) {
    130a:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    130e:	b153      	cbz	r3, 1326 <z_arm_fault+0x5a>
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
	}

	z_arm_fatal_error(reason, &esf_copy);
}
    1310:	b00a      	add	sp, #40	; 0x28
    1312:	bd70      	pop	{r4, r5, r6, pc}
			ptr_esf = (z_arch_esf_t *)msp;
    1314:	4604      	mov	r4, r0
			*nested_exc = true;
    1316:	2601      	movs	r6, #1
    1318:	e7f1      	b.n	12fe <z_arm_fault+0x32>
	*nested_exc = false;
    131a:	2600      	movs	r6, #0
		return NULL;
    131c:	4634      	mov	r4, r6
    131e:	e7ee      	b.n	12fe <z_arm_fault+0x32>
	*nested_exc = false;
    1320:	2600      	movs	r6, #0
		return NULL;
    1322:	4634      	mov	r4, r6
    1324:	e7eb      	b.n	12fe <z_arm_fault+0x32>
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    1326:	2220      	movs	r2, #32
    1328:	4621      	mov	r1, r4
    132a:	a801      	add	r0, sp, #4
    132c:	f003 fb22 	bl	4974 <memcpy>
	if (nested_exc) {
    1330:	b14e      	cbz	r6, 1346 <z_arm_fault+0x7a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    1332:	9b08      	ldr	r3, [sp, #32]
    1334:	f3c3 0208 	ubfx	r2, r3, #0, #9
    1338:	b95a      	cbnz	r2, 1352 <z_arm_fault+0x86>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    133a:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    133e:	ea6f 2343 	mvn.w	r3, r3, lsl #9
    1342:	9308      	str	r3, [sp, #32]
    1344:	e005      	b.n	1352 <z_arm_fault+0x86>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    1346:	9b08      	ldr	r3, [sp, #32]
    1348:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    134c:	f023 0301 	bic.w	r3, r3, #1
    1350:	9308      	str	r3, [sp, #32]
	z_arm_fatal_error(reason, &esf_copy);
    1352:	a901      	add	r1, sp, #4
    1354:	4628      	mov	r0, r5
    1356:	f003 fa22 	bl	479e <z_arm_fatal_error>
    135a:	e7d9      	b.n	1310 <z_arm_fault+0x44>
    135c:	e000ed00 	.word	0xe000ed00

00001360 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    1360:	4a02      	ldr	r2, [pc, #8]	; (136c <z_arm_fault_init+0xc>)
    1362:	6953      	ldr	r3, [r2, #20]
    1364:	f043 0310 	orr.w	r3, r3, #16
    1368:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    136a:	4770      	bx	lr
    136c:	e000ed00 	.word	0xe000ed00

00001370 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    1370:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    1374:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    1378:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    137a:	4672      	mov	r2, lr
	bl z_arm_fault
    137c:	f7ff ffa6 	bl	12cc <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    1380:	bd01      	pop	{r0, pc}
    1382:	bf00      	nop

00001384 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    1384:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    1386:	e006      	b.n	1396 <z_arm_interrupt_init+0x12>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1388:	f003 030f 	and.w	r3, r3, #15
    138c:	4909      	ldr	r1, [pc, #36]	; (13b4 <z_arm_interrupt_init+0x30>)
    138e:	4419      	add	r1, r3
    1390:	2320      	movs	r3, #32
    1392:	760b      	strb	r3, [r1, #24]
    1394:	3201      	adds	r2, #1
    1396:	2a2f      	cmp	r2, #47	; 0x2f
    1398:	dc0a      	bgt.n	13b0 <z_arm_interrupt_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
    139a:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
    139c:	2b00      	cmp	r3, #0
    139e:	dbf3      	blt.n	1388 <z_arm_interrupt_init+0x4>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    13a0:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    13a4:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    13a8:	2120      	movs	r1, #32
    13aa:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
    13ae:	e7f1      	b.n	1394 <z_arm_interrupt_init+0x10>
	}
}
    13b0:	4770      	bx	lr
    13b2:	bf00      	nop
    13b4:	e000ecfc 	.word	0xe000ecfc

000013b8 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_DEBUG_THREAD_INFO)
    /* Clear z_sys_post_kernel flag for RTOS aware debuggers */
    movs.n r0, #0
    13b8:	2000      	movs	r0, #0
    ldr r1, =z_sys_post_kernel
    13ba:	4913      	ldr	r1, [pc, #76]	; (1408 <__start+0x50>)
    strb r0, [r1]
    13bc:	7008      	strb	r0, [r1, #0]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    13be:	2000      	movs	r0, #0
    msr CONTROL, r0
    13c0:	f380 8814 	msr	CONTROL, r0
    isb
    13c4:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    13c8:	f7ff fc0e 	bl	be8 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    13cc:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    13ce:	490f      	ldr	r1, [pc, #60]	; (140c <__start+0x54>)
    str r0, [r1]
    13d0:	6008      	str	r0, [r1, #0]
    dsb
    13d2:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    13d6:	480e      	ldr	r0, [pc, #56]	; (1410 <__start+0x58>)
    msr msp, r0
    13d8:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    13dc:	f000 f830 	bl	1440 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    13e0:	2020      	movs	r0, #32
    msr BASEPRI, r0
    13e2:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    13e6:	480b      	ldr	r0, [pc, #44]	; (1414 <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    13e8:	f44f 6104 	mov.w	r1, #2112	; 0x840
    adds r0, r0, r1
    13ec:	1840      	adds	r0, r0, r1
    msr PSP, r0
    13ee:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    13f2:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    13f6:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    13f8:	4308      	orrs	r0, r1
    msr CONTROL, r0
    13fa:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    13fe:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    1402:	f7ff fd7f 	bl	f04 <z_arm_prep_c>
    1406:	0000      	.short	0x0000
    ldr r1, =z_sys_post_kernel
    1408:	20000816 	.word	0x20000816
    ldr r1, =_SCS_MPU_CTRL
    140c:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    1410:	20001600 	.word	0x20001600
    ldr r0, =z_interrupt_stacks
    1414:	20000840 	.word	0x20000840

00001418 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    1418:	4b08      	ldr	r3, [pc, #32]	; (143c <z_arm_clear_arm_mpu_config+0x24>)
    141a:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
	int num_regions =
    141e:	f3c0 2007 	ubfx	r0, r0, #8, #8

	for (i = 0; i < num_regions; i++) {
    1422:	2300      	movs	r3, #0
    1424:	e006      	b.n	1434 <z_arm_clear_arm_mpu_config+0x1c>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
    1426:	4a05      	ldr	r2, [pc, #20]	; (143c <z_arm_clear_arm_mpu_config+0x24>)
    1428:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  MPU->RASR = 0U;
    142c:	2100      	movs	r1, #0
    142e:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
    1432:	3301      	adds	r3, #1
    1434:	4283      	cmp	r3, r0
    1436:	dbf6      	blt.n	1426 <z_arm_clear_arm_mpu_config+0xe>
		ARM_MPU_ClrRegion(i);
	}
}
    1438:	4770      	bx	lr
    143a:	bf00      	nop
    143c:	e000ed00 	.word	0xe000ed00

00001440 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    1440:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    1442:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    1444:	2400      	movs	r4, #0
    1446:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    144a:	f7ff ffe5 	bl	1418 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    144e:	4623      	mov	r3, r4
    1450:	e008      	b.n	1464 <z_arm_init_arch_hw_at_boot+0x24>
		NVIC->ICER[i] = 0xFFFFFFFF;
    1452:	f103 0120 	add.w	r1, r3, #32
    1456:	4a0e      	ldr	r2, [pc, #56]	; (1490 <z_arm_init_arch_hw_at_boot+0x50>)
    1458:	f04f 30ff 	mov.w	r0, #4294967295
    145c:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    1460:	3301      	adds	r3, #1
    1462:	b2db      	uxtb	r3, r3
    1464:	2b07      	cmp	r3, #7
    1466:	d9f4      	bls.n	1452 <z_arm_init_arch_hw_at_boot+0x12>
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    1468:	2300      	movs	r3, #0
    146a:	e008      	b.n	147e <z_arm_init_arch_hw_at_boot+0x3e>
		NVIC->ICPR[i] = 0xFFFFFFFF;
    146c:	f103 0160 	add.w	r1, r3, #96	; 0x60
    1470:	4a07      	ldr	r2, [pc, #28]	; (1490 <z_arm_init_arch_hw_at_boot+0x50>)
    1472:	f04f 30ff 	mov.w	r0, #4294967295
    1476:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    147a:	3301      	adds	r3, #1
    147c:	b2db      	uxtb	r3, r3
    147e:	2b07      	cmp	r3, #7
    1480:	d9f4      	bls.n	146c <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
    1482:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    1484:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1488:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    148c:	bd10      	pop	{r4, pc}
    148e:	bf00      	nop
    1490:	e000e100 	.word	0xe000e100

00001494 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    1494:	b508      	push	{r3, lr}
	if (_current == thread) {
    1496:	4b0a      	ldr	r3, [pc, #40]	; (14c0 <z_impl_k_thread_abort+0x2c>)
    1498:	689b      	ldr	r3, [r3, #8]
    149a:	4283      	cmp	r3, r0
    149c:	d002      	beq.n	14a4 <z_impl_k_thread_abort+0x10>
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
		}
	}

	z_thread_abort(thread);
    149e:	f002 fbd5 	bl	3c4c <z_thread_abort>
}
    14a2:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    14a4:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    14a8:	2b00      	cmp	r3, #0
    14aa:	d0f8      	beq.n	149e <z_impl_k_thread_abort+0xa>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    14ac:	4b05      	ldr	r3, [pc, #20]	; (14c4 <z_impl_k_thread_abort+0x30>)
    14ae:	685a      	ldr	r2, [r3, #4]
    14b0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    14b4:	605a      	str	r2, [r3, #4]
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    14b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    14b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    14bc:	625a      	str	r2, [r3, #36]	; 0x24
    14be:	e7ee      	b.n	149e <z_impl_k_thread_abort+0xa>
    14c0:	200007d4 	.word	0x200007d4
    14c4:	e000ed00 	.word	0xe000ed00

000014c8 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    14c8:	b508      	push	{r3, lr}
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    14ca:	4b03      	ldr	r3, [pc, #12]	; (14d8 <z_arm_configure_static_mpu_regions+0x10>)
    14cc:	4a03      	ldr	r2, [pc, #12]	; (14dc <z_arm_configure_static_mpu_regions+0x14>)
    14ce:	2101      	movs	r1, #1
    14d0:	4803      	ldr	r0, [pc, #12]	; (14e0 <z_arm_configure_static_mpu_regions+0x18>)
    14d2:	f003 fa10 	bl	48f6 <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    14d6:	bd08      	pop	{r3, pc}
    14d8:	20020000 	.word	0x20020000
    14dc:	20000000 	.word	0x20000000
    14e0:	00005d30 	.word	0x00005d30

000014e4 <z_arm_configure_dynamic_mpu_regions>:
 *
 * This function is not inherently thread-safe, but the memory domain
 * spinlock needs to be held anyway.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
    14e4:	b508      	push	{r3, lr}
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    14e6:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
    14ea:	3b40      	subs	r3, #64	; 0x40
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    14ec:	4804      	ldr	r0, [pc, #16]	; (1500 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    14ee:	6003      	str	r3, [r0, #0]
	dynamic_regions[region_num].size = guard_size;
    14f0:	2340      	movs	r3, #64	; 0x40
    14f2:	6043      	str	r3, [r0, #4]
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    14f4:	4b03      	ldr	r3, [pc, #12]	; (1504 <z_arm_configure_dynamic_mpu_regions+0x20>)
    14f6:	6083      	str	r3, [r0, #8]

	/* Configure the dynamic MPU regions */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    14f8:	2101      	movs	r1, #1
    14fa:	f003 fa00 	bl	48fe <arm_core_mpu_configure_dynamic_mpu_regions>
						   region_num);
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_enable();
#endif
}
    14fe:	bd08      	pop	{r3, pc}
    1500:	2000027c 	.word	0x2000027c
    1504:	150b0000 	.word	0x150b0000

00001508 <region_init>:
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    1508:	4a08      	ldr	r2, [pc, #32]	; (152c <region_init+0x24>)
    150a:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98

	set_region_base_address(region_conf->base & MPU_RBAR_ADDR_Msk);
	set_region_attributes(region_conf->attr.rasr);
	set_region_size(region_conf->size | MPU_RASR_ENABLE_Msk);
#else
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    150e:	680b      	ldr	r3, [r1, #0]
    1510:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    1514:	4303      	orrs	r3, r0
    1516:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    151a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    151e:	688b      	ldr	r3, [r1, #8]
    1520:	f043 0301 	orr.w	r3, r3, #1
    1524:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	LOG_DBG("[%d] 0x%08x 0x%08x",
		index, region_conf->base, region_conf->attr.rasr);
#endif
}
    1528:	4770      	bx	lr
    152a:	bf00      	nop
    152c:	e000ed00 	.word	0xe000ed00

00001530 <mpu_configure_static_mpu_regions>:
 */
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
    1530:	b510      	push	{r4, lr}
	int mpu_reg_index = static_regions_num;
    1532:	4c03      	ldr	r4, [pc, #12]	; (1540 <mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    1534:	2301      	movs	r3, #1
    1536:	7822      	ldrb	r2, [r4, #0]
    1538:	f003 f9b5 	bl	48a6 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    153c:	7020      	strb	r0, [r4, #0]

	return mpu_reg_index;
}
    153e:	bd10      	pop	{r4, pc}
    1540:	20000810 	.word	0x20000810

00001544 <mpu_configure_dynamic_mpu_regions>:
 * If the dynamic MPU regions configuration has not been successfully
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    1544:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    1546:	2300      	movs	r3, #0
    1548:	4a09      	ldr	r2, [pc, #36]	; (1570 <mpu_configure_dynamic_mpu_regions+0x2c>)
    154a:	7812      	ldrb	r2, [r2, #0]
    154c:	f003 f9ab 	bl	48a6 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    1550:	f110 0f16 	cmn.w	r0, #22
    1554:	d00a      	beq.n	156c <mpu_configure_dynamic_mpu_regions+0x28>

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    1556:	4603      	mov	r3, r0
    1558:	e006      	b.n	1568 <mpu_configure_dynamic_mpu_regions+0x24>
  MPU->RNR = rnr;
    155a:	4a06      	ldr	r2, [pc, #24]	; (1574 <mpu_configure_dynamic_mpu_regions+0x30>)
    155c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  MPU->RASR = 0U;
    1560:	2100      	movs	r1, #0
    1562:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
    1566:	3301      	adds	r3, #1
    1568:	2b07      	cmp	r3, #7
    156a:	ddf6      	ble.n	155a <mpu_configure_dynamic_mpu_regions+0x16>
			ARM_MPU_ClrRegion(i);
		}
	}

	return mpu_reg_index;
}
    156c:	bd08      	pop	{r3, pc}
    156e:	bf00      	nop
    1570:	20000810 	.word	0x20000810
    1574:	e000ed00 	.word	0xe000ed00

00001578 <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    1578:	4b04      	ldr	r3, [pc, #16]	; (158c <arm_core_mpu_enable+0x14>)
    157a:	2205      	movs	r2, #5
    157c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    1580:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1584:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    1588:	4770      	bx	lr
    158a:	bf00      	nop
    158c:	e000ed00 	.word	0xe000ed00

00001590 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    1590:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    1594:	4b02      	ldr	r3, [pc, #8]	; (15a0 <arm_core_mpu_disable+0x10>)
    1596:	2200      	movs	r2, #0
    1598:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    159c:	4770      	bx	lr
    159e:	bf00      	nop
    15a0:	e000ed00 	.word	0xe000ed00

000015a4 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    15a4:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    15a6:	4b0e      	ldr	r3, [pc, #56]	; (15e0 <z_arm_mpu_init+0x3c>)
    15a8:	681d      	ldr	r5, [r3, #0]
    15aa:	2d08      	cmp	r5, #8
    15ac:	d815      	bhi.n	15da <z_arm_mpu_init+0x36>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    15ae:	f7ff ffef 	bl	1590 <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    15b2:	2400      	movs	r4, #0
    15b4:	e009      	b.n	15ca <z_arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    15b6:	4b0a      	ldr	r3, [pc, #40]	; (15e0 <z_arm_mpu_init+0x3c>)
    15b8:	6859      	ldr	r1, [r3, #4]
    15ba:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    15be:	0093      	lsls	r3, r2, #2
    15c0:	4419      	add	r1, r3
    15c2:	4620      	mov	r0, r4
    15c4:	f7ff ffa0 	bl	1508 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    15c8:	3401      	adds	r4, #1
    15ca:	42a5      	cmp	r5, r4
    15cc:	d8f3      	bhi.n	15b6 <z_arm_mpu_init+0x12>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    15ce:	4b05      	ldr	r3, [pc, #20]	; (15e4 <z_arm_mpu_init+0x40>)
    15d0:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
    15d2:	f7ff ffd1 	bl	1578 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    15d6:	2000      	movs	r0, #0
}
    15d8:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
    15da:	f04f 30ff 	mov.w	r0, #4294967295
    15de:	e7fb      	b.n	15d8 <z_arm_mpu_init+0x34>
    15e0:	00005d40 	.word	0x00005d40
    15e4:	20000810 	.word	0x20000810

000015e8 <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
    15e8:	4b01      	ldr	r3, [pc, #4]	; (15f0 <__stdout_hook_install+0x8>)
    15ea:	6018      	str	r0, [r3, #0]
}
    15ec:	4770      	bx	lr
    15ee:	bf00      	nop
    15f0:	20000008 	.word	0x20000008

000015f4 <__NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
    15f4:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    15f8:	4905      	ldr	r1, [pc, #20]	; (1610 <__NVIC_SystemReset+0x1c>)
    15fa:	68ca      	ldr	r2, [r1, #12]
    15fc:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    1600:	4b04      	ldr	r3, [pc, #16]	; (1614 <__NVIC_SystemReset+0x20>)
    1602:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    1604:	60cb      	str	r3, [r1, #12]
    1606:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    160a:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    160c:	e7fd      	b.n	160a <__NVIC_SystemReset+0x16>
    160e:	bf00      	nop
    1610:	e000ed00 	.word	0xe000ed00
    1614:	05fa0004 	.word	0x05fa0004

00001618 <nordicsemi_nrf52_init>:
	__asm__ volatile(
    1618:	f04f 0320 	mov.w	r3, #32
    161c:	f3ef 8211 	mrs	r2, BASEPRI
    1620:	f383 8812 	msr	BASEPRI_MAX, r3
    1624:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    1628:	2301      	movs	r3, #1
    162a:	4906      	ldr	r1, [pc, #24]	; (1644 <nordicsemi_nrf52_init+0x2c>)
    162c:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    1630:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    1634:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
    1638:	f382 8811 	msr	BASEPRI, r2
    163c:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    1640:	2000      	movs	r0, #0
    1642:	4770      	bx	lr
    1644:	4001e000 	.word	0x4001e000

00001648 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    1648:	b130      	cbz	r0, 1658 <arch_busy_wait+0x10>

void arch_busy_wait(uint32_t time_us)
{
    164a:	b508      	push	{r3, lr}
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    164c:	4b03      	ldr	r3, [pc, #12]	; (165c <arch_busy_wait+0x14>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    164e:	0180      	lsls	r0, r0, #6
    1650:	f043 0301 	orr.w	r3, r3, #1
    1654:	4798      	blx	r3
	nrfx_coredep_delay_us(time_us);
}
    1656:	bd08      	pop	{r3, pc}
    1658:	4770      	bx	lr
    165a:	bf00      	nop
    165c:	00005ce0 	.word	0x00005ce0

00001660 <get_hf_flags>:
static uint32_t *get_hf_flags(void)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;

	return &data->subsys[CLOCK_CONTROL_NRF_TYPE_HFCLK].flags;
}
    1660:	4800      	ldr	r0, [pc, #0]	; (1664 <get_hf_flags+0x4>)
    1662:	4770      	bx	lr
    1664:	200002dc 	.word	0x200002dc

00001668 <get_subsys>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    1668:	4b03      	ldr	r3, [pc, #12]	; (1678 <get_subsys+0x10>)
    166a:	1ac0      	subs	r0, r0, r3
    166c:	1080      	asrs	r0, r0, #2

	return (clock_control_subsys_t)offset;
}
    166e:	4b03      	ldr	r3, [pc, #12]	; (167c <get_subsys+0x14>)
    1670:	fb03 f000 	mul.w	r0, r3, r0
    1674:	4770      	bx	lr
    1676:	bf00      	nop
    1678:	2000029c 	.word	0x2000029c
    167c:	b6db6db7 	.word	0xb6db6db7

00001680 <onoff_stop>:

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    1680:	b538      	push	{r3, r4, r5, lr}
    1682:	4605      	mov	r5, r0
    1684:	460c      	mov	r4, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    1686:	f7ff ffef 	bl	1668 <get_subsys>
    168a:	4601      	mov	r1, r0
    168c:	2240      	movs	r2, #64	; 0x40
    168e:	4803      	ldr	r0, [pc, #12]	; (169c <onoff_stop+0x1c>)
    1690:	f003 fa75 	bl	4b7e <stop>
    1694:	4601      	mov	r1, r0
	notify(mgr, res);
    1696:	4628      	mov	r0, r5
    1698:	47a0      	blx	r4
}
    169a:	bd38      	pop	{r3, r4, r5, pc}
    169c:	00005a20 	.word	0x00005a20

000016a0 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    16a0:	b530      	push	{r4, r5, lr}
    16a2:	b083      	sub	sp, #12
    16a4:	4605      	mov	r5, r0
    16a6:	460c      	mov	r4, r1
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    16a8:	f7ff ffde 	bl	1668 <get_subsys>
    16ac:	4601      	mov	r1, r0
    16ae:	2340      	movs	r3, #64	; 0x40
    16b0:	9300      	str	r3, [sp, #0]
    16b2:	4623      	mov	r3, r4
    16b4:	4a05      	ldr	r2, [pc, #20]	; (16cc <onoff_start+0x2c>)
    16b6:	4806      	ldr	r0, [pc, #24]	; (16d0 <onoff_start+0x30>)
    16b8:	f003 fa7b 	bl	4bb2 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    16bc:	1e01      	subs	r1, r0, #0
    16be:	db01      	blt.n	16c4 <onoff_start+0x24>
		notify(mgr, err);
	}
}
    16c0:	b003      	add	sp, #12
    16c2:	bd30      	pop	{r4, r5, pc}
		notify(mgr, err);
    16c4:	4628      	mov	r0, r5
    16c6:	47a0      	blx	r4
}
    16c8:	e7fa      	b.n	16c0 <onoff_start+0x20>
    16ca:	bf00      	nop
    16cc:	00004bfb 	.word	0x00004bfb
    16d0:	00005a20 	.word	0x00005a20

000016d4 <clock_event_handler>:
		__ASSERT_NO_MSG(false);
	}
}

static void clock_event_handler(nrfx_clock_evt_type_t event)
{
    16d4:	b508      	push	{r3, lr}
	const struct device *dev = CLOCK_DEVICE;

	switch (event) {
    16d6:	b110      	cbz	r0, 16de <clock_event_handler+0xa>
    16d8:	2801      	cmp	r0, #1
    16da:	d00d      	beq.n	16f8 <clock_event_handler+0x24>
		break;
	default:
		__ASSERT_NO_MSG(0);
		break;
	}
}
    16dc:	bd08      	pop	{r3, pc}
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    16de:	2100      	movs	r1, #0
    16e0:	4808      	ldr	r0, [pc, #32]	; (1704 <clock_event_handler+0x30>)
    16e2:	f003 f9d7 	bl	4a94 <get_sub_data>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    16e6:	6883      	ldr	r3, [r0, #8]
    16e8:	f013 0f07 	tst.w	r3, #7
    16ec:	d1f6      	bne.n	16dc <clock_event_handler+0x8>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    16ee:	2100      	movs	r1, #0
    16f0:	4804      	ldr	r0, [pc, #16]	; (1704 <clock_event_handler+0x30>)
    16f2:	f003 fa32 	bl	4b5a <clkstarted_handle>
    16f6:	e7f1      	b.n	16dc <clock_event_handler+0x8>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    16f8:	2101      	movs	r1, #1
    16fa:	4802      	ldr	r0, [pc, #8]	; (1704 <clock_event_handler+0x30>)
    16fc:	f003 fa2d 	bl	4b5a <clkstarted_handle>
}
    1700:	e7ec      	b.n	16dc <clock_event_handler+0x8>
    1702:	bf00      	nop
    1704:	00005a20 	.word	0x00005a20

00001708 <generic_hfclk_start>:
{
    1708:	b510      	push	{r4, lr}
    170a:	b082      	sub	sp, #8
	__asm__ volatile(
    170c:	f04f 0320 	mov.w	r3, #32
    1710:	f3ef 8411 	mrs	r4, BASEPRI
    1714:	f383 8812 	msr	BASEPRI_MAX, r3
    1718:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    171c:	4a14      	ldr	r2, [pc, #80]	; (1770 <generic_hfclk_start+0x68>)
    171e:	6813      	ldr	r3, [r2, #0]
    1720:	f043 0102 	orr.w	r1, r3, #2
    1724:	6011      	str	r1, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    1726:	f013 0f01 	tst.w	r3, #1
    172a:	d109      	bne.n	1740 <generic_hfclk_start+0x38>
	bool already_started = false;
    172c:	2300      	movs	r3, #0
	__asm__ volatile(
    172e:	f384 8811 	msr	BASEPRI, r4
    1732:	f3bf 8f6f 	isb	sy
	if (already_started) {
    1736:	b9b3      	cbnz	r3, 1766 <generic_hfclk_start+0x5e>
	hfclk_start();
    1738:	f003 fa67 	bl	4c0a <hfclk_start>
}
    173c:	b002      	add	sp, #8
    173e:	bd10      	pop	{r4, pc}
    return nrf_clock_event_address_get(NRF_CLOCK, event);
}

NRFX_STATIC_INLINE bool nrfx_clock_is_running(nrf_clock_domain_t domain, void * p_clk_src)
{
    return nrf_clock_is_running(NRF_CLOCK, domain, p_clk_src);
    1740:	f10d 0207 	add.w	r2, sp, #7
    1744:	2101      	movs	r1, #1
    1746:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    174a:	f003 f980 	bl	4a4e <nrf_clock_is_running>
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    174e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1752:	2b01      	cmp	r3, #1
    1754:	d001      	beq.n	175a <generic_hfclk_start+0x52>
	bool already_started = false;
    1756:	2300      	movs	r3, #0
    1758:	e7e9      	b.n	172e <generic_hfclk_start+0x26>
			set_on_state(get_hf_flags());
    175a:	f7ff ff81 	bl	1660 <get_hf_flags>
    175e:	f003 f9e9 	bl	4b34 <set_on_state>
			already_started = true;
    1762:	2301      	movs	r3, #1
    1764:	e7e3      	b.n	172e <generic_hfclk_start+0x26>
		clkstarted_handle(CLOCK_DEVICE,
    1766:	2100      	movs	r1, #0
    1768:	4802      	ldr	r0, [pc, #8]	; (1774 <generic_hfclk_start+0x6c>)
    176a:	f003 f9f6 	bl	4b5a <clkstarted_handle>
		return;
    176e:	e7e5      	b.n	173c <generic_hfclk_start+0x34>
    1770:	200002ec 	.word	0x200002ec
    1774:	00005a20 	.word	0x00005a20

00001778 <generic_hfclk_stop>:
{
    1778:	b510      	push	{r4, lr}
	__asm__ volatile(
    177a:	f04f 0320 	mov.w	r3, #32
    177e:	f3ef 8411 	mrs	r4, BASEPRI
    1782:	f383 8812 	msr	BASEPRI_MAX, r3
    1786:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_GENERIC;
    178a:	4a08      	ldr	r2, [pc, #32]	; (17ac <generic_hfclk_stop+0x34>)
    178c:	6813      	ldr	r3, [r2, #0]
    178e:	f023 0102 	bic.w	r1, r3, #2
    1792:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_BT)) {
    1794:	f013 0f01 	tst.w	r3, #1
    1798:	d004      	beq.n	17a4 <generic_hfclk_stop+0x2c>
	__asm__ volatile(
    179a:	f384 8811 	msr	BASEPRI, r4
    179e:	f3bf 8f6f 	isb	sy
}
    17a2:	bd10      	pop	{r4, pc}
		hfclk_stop();
    17a4:	f003 fa3b 	bl	4c1e <hfclk_stop>
    17a8:	e7f7      	b.n	179a <generic_hfclk_stop+0x22>
    17aa:	bf00      	nop
    17ac:	200002ec 	.word	0x200002ec

000017b0 <lfclk_spinwait>:
{
    17b0:	b570      	push	{r4, r5, r6, lr}
    17b2:	b082      	sub	sp, #8
    17b4:	4605      	mov	r5, r0
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    17b6:	2801      	cmp	r0, #1
    17b8:	d107      	bne.n	17ca <lfclk_spinwait+0x1a>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    17ba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    17be:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    17c2:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    17c6:	2b01      	cmp	r3, #1
    17c8:	d04c      	beq.n	1864 <lfclk_spinwait+0xb4>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    17ca:	f003 ff62 	bl	5692 <k_is_in_isr>
    17ce:	4604      	mov	r4, r0
    17d0:	b918      	cbnz	r0, 17da <lfclk_spinwait+0x2a>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
    17d2:	4b28      	ldr	r3, [pc, #160]	; (1874 <lfclk_spinwait+0xc4>)
    17d4:	781b      	ldrb	r3, [r3, #0]
    17d6:	2b00      	cmp	r3, #0
    17d8:	d139      	bne.n	184e <lfclk_spinwait+0x9e>
	__asm__ volatile(
    17da:	f04f 0320 	mov.w	r3, #32
    17de:	f3ef 8611 	mrs	r6, BASEPRI
    17e2:	f383 8812 	msr	BASEPRI_MAX, r3
    17e6:	f3bf 8f6f 	isb	sy
    17ea:	2401      	movs	r4, #1
	if (!isr_mode) {
    17ec:	b924      	cbnz	r4, 17f8 <lfclk_spinwait+0x48>
    p_reg->INTENCLR = mask;
    17ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    17f2:	2202      	movs	r2, #2
    17f4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    17f8:	aa01      	add	r2, sp, #4
    17fa:	2100      	movs	r1, #0
    17fc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    1800:	f003 f925 	bl	4a4e <nrf_clock_is_running>
	while (!(nrfx_clock_is_running(d, (void *)&type)
    1804:	b120      	cbz	r0, 1810 <lfclk_spinwait+0x60>
		 && ((type == target_type)
    1806:	9b01      	ldr	r3, [sp, #4]
	while (!(nrfx_clock_is_running(d, (void *)&type)
    1808:	2b01      	cmp	r3, #1
    180a:	d026      	beq.n	185a <lfclk_spinwait+0xaa>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    180c:	2d01      	cmp	r5, #1
    180e:	d024      	beq.n	185a <lfclk_spinwait+0xaa>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    1810:	b1fc      	cbz	r4, 1852 <lfclk_spinwait+0xa2>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    1812:	4630      	mov	r0, r6
    1814:	f7ff fb36 	bl	e84 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    1818:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    181c:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    1820:	2b00      	cmp	r3, #0
    1822:	d1e9      	bne.n	17f8 <lfclk_spinwait+0x48>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    1824:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1828:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    182c:	2b00      	cmp	r3, #0
    182e:	d0e3      	beq.n	17f8 <lfclk_spinwait+0x48>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    1830:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1834:	2200      	movs	r2, #0
    1836:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    183a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    183e:	2201      	movs	r2, #1
    1840:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1844:	490c      	ldr	r1, [pc, #48]	; (1878 <lfclk_spinwait+0xc8>)
    1846:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    184a:	609a      	str	r2, [r3, #8]
}
    184c:	e7d4      	b.n	17f8 <lfclk_spinwait+0x48>
	int key = isr_mode ? irq_lock() : 0;
    184e:	2600      	movs	r6, #0
    1850:	e7cc      	b.n	17ec <lfclk_spinwait+0x3c>
				k_msleep(1);
    1852:	2001      	movs	r0, #1
    1854:	f003 f9ed 	bl	4c32 <k_msleep>
    1858:	e7de      	b.n	1818 <lfclk_spinwait+0x68>
	if (isr_mode) {
    185a:	b12c      	cbz	r4, 1868 <lfclk_spinwait+0xb8>
	__asm__ volatile(
    185c:	f386 8811 	msr	BASEPRI, r6
    1860:	f3bf 8f6f 	isb	sy
}
    1864:	b002      	add	sp, #8
    1866:	bd70      	pop	{r4, r5, r6, pc}
    p_reg->INTENSET = mask;
    1868:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    186c:	2202      	movs	r2, #2
    186e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    1872:	e7f7      	b.n	1864 <lfclk_spinwait+0xb4>
    1874:	20000816 	.word	0x20000816
    1878:	e000e100 	.word	0xe000e100

0000187c <api_blocking_start>:
{
    187c:	b500      	push	{lr}
    187e:	b085      	sub	sp, #20
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    1880:	f8cd d000 	str.w	sp, [sp]
    1884:	f8cd d004 	str.w	sp, [sp, #4]
    1888:	2300      	movs	r3, #0
    188a:	9302      	str	r3, [sp, #8]
    188c:	2301      	movs	r3, #1
    188e:	9303      	str	r3, [sp, #12]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    1890:	466b      	mov	r3, sp
    1892:	4a07      	ldr	r2, [pc, #28]	; (18b0 <api_blocking_start+0x34>)
    1894:	f003 f9a9 	bl	4bea <api_start>
	if (err < 0) {
    1898:	2800      	cmp	r0, #0
    189a:	db05      	blt.n	18a8 <api_blocking_start+0x2c>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    189c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    18a0:	2300      	movs	r3, #0
    18a2:	4668      	mov	r0, sp
    18a4:	f001 fe54 	bl	3550 <z_impl_k_sem_take>
}
    18a8:	b005      	add	sp, #20
    18aa:	f85d fb04 	ldr.w	pc, [sp], #4
    18ae:	bf00      	nop
    18b0:	00004c5f 	.word	0x00004c5f

000018b4 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
    18b4:	b570      	push	{r4, r5, r6, lr}
    18b6:	4606      	mov	r6, r0
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    18b8:	2200      	movs	r2, #0
    18ba:	2101      	movs	r1, #1
    18bc:	4610      	mov	r0, r2
    18be:	f002 ff7d 	bl	47bc <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    18c2:	4811      	ldr	r0, [pc, #68]	; (1908 <clk_init+0x54>)
    18c4:	f000 ff12 	bl	26ec <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    18c8:	4b10      	ldr	r3, [pc, #64]	; (190c <clk_init+0x58>)
    18ca:	4298      	cmp	r0, r3
    18cc:	d119      	bne.n	1902 <clk_init+0x4e>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    18ce:	f003 fdbc 	bl	544a <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
    18d2:	2400      	movs	r4, #0
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
    18d4:	2c01      	cmp	r4, #1
    18d6:	d812      	bhi.n	18fe <clk_init+0x4a>
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
    18d8:	4621      	mov	r1, r4
    18da:	4630      	mov	r0, r6
    18dc:	f003 f8da 	bl	4a94 <get_sub_data>
    18e0:	4605      	mov	r5, r0

		err = onoff_manager_init(get_onoff_manager(dev, i),
    18e2:	4621      	mov	r1, r4
    18e4:	4630      	mov	r0, r6
    18e6:	f003 f8e0 	bl	4aaa <get_onoff_manager>
    18ea:	4909      	ldr	r1, [pc, #36]	; (1910 <clk_init+0x5c>)
    18ec:	f002 fc57 	bl	419e <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    18f0:	2800      	cmp	r0, #0
    18f2:	db05      	blt.n	1900 <clk_init+0x4c>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    18f4:	2301      	movs	r3, #1
    18f6:	60ab      	str	r3, [r5, #8]
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
    18f8:	441c      	add	r4, r3
    18fa:	b2e4      	uxtb	r4, r4
    18fc:	e7ea      	b.n	18d4 <clk_init+0x20>
	}

	return 0;
    18fe:	2000      	movs	r0, #0
}
    1900:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    1902:	f06f 0004 	mvn.w	r0, #4
    1906:	e7fb      	b.n	1900 <clk_init+0x4c>
    1908:	000016d5 	.word	0x000016d5
    190c:	0bad0000 	.word	0x0bad0000
    1910:	00005d74 	.word	0x00005d74

00001914 <z_nrf_clock_control_lf_on>:
{
    1914:	b510      	push	{r4, lr}
    1916:	4604      	mov	r4, r0
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    1918:	4b10      	ldr	r3, [pc, #64]	; (195c <z_nrf_clock_control_lf_on+0x48>)
    191a:	2101      	movs	r1, #1
    191c:	f3bf 8f5b 	dmb	ish
    1920:	e853 2f00 	ldrex	r2, [r3]
    1924:	e843 1000 	strex	r0, r1, [r3]
    1928:	2800      	cmp	r0, #0
    192a:	d1f9      	bne.n	1920 <z_nrf_clock_control_lf_on+0xc>
    192c:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    1930:	b11a      	cbz	r2, 193a <z_nrf_clock_control_lf_on+0x26>
	switch (start_mode) {
    1932:	1e63      	subs	r3, r4, #1
    1934:	2b01      	cmp	r3, #1
    1936:	d90d      	bls.n	1954 <z_nrf_clock_control_lf_on+0x40>
}
    1938:	bd10      	pop	{r4, pc}
				get_onoff_manager(CLOCK_DEVICE,
    193a:	4809      	ldr	r0, [pc, #36]	; (1960 <z_nrf_clock_control_lf_on+0x4c>)
    193c:	f003 f8b5 	bl	4aaa <get_onoff_manager>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    1940:	4908      	ldr	r1, [pc, #32]	; (1964 <z_nrf_clock_control_lf_on+0x50>)
    1942:	2300      	movs	r3, #0
    1944:	604b      	str	r3, [r1, #4]
    1946:	608b      	str	r3, [r1, #8]
    1948:	60cb      	str	r3, [r1, #12]
    194a:	2301      	movs	r3, #1
    194c:	608b      	str	r3, [r1, #8]
		err = onoff_request(mgr, &cli);
    194e:	f002 fc43 	bl	41d8 <onoff_request>
    1952:	e7ee      	b.n	1932 <z_nrf_clock_control_lf_on+0x1e>
		lfclk_spinwait(start_mode);
    1954:	4620      	mov	r0, r4
    1956:	f7ff ff2b 	bl	17b0 <lfclk_spinwait>
		break;
    195a:	e7ed      	b.n	1938 <z_nrf_clock_control_lf_on+0x24>
    195c:	20000298 	.word	0x20000298
    1960:	00005a20 	.word	0x00005a20
    1964:	20000288 	.word	0x20000288

00001968 <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
    1968:	b510      	push	{r4, lr}
    196a:	4604      	mov	r4, r0
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    196c:	280a      	cmp	r0, #10
    196e:	d006      	beq.n	197e <console_out+0x16>
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
    1970:	b2e1      	uxtb	r1, r4
			     unsigned char out_char);

static inline void z_impl_uart_poll_out(const struct device *dev,
					unsigned char out_char)
{
	const struct uart_driver_api *api =
    1972:	4806      	ldr	r0, [pc, #24]	; (198c <console_out+0x24>)
    1974:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    1976:	685b      	ldr	r3, [r3, #4]
    1978:	4798      	blx	r3

	return c;
}
    197a:	4620      	mov	r0, r4
    197c:	bd10      	pop	{r4, pc}
	const struct uart_driver_api *api =
    197e:	4803      	ldr	r0, [pc, #12]	; (198c <console_out+0x24>)
    1980:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
    1982:	685b      	ldr	r3, [r3, #4]
    1984:	210d      	movs	r1, #13
    1986:	4798      	blx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_poll_out(dev, out_char);
}
    1988:	e7f2      	b.n	1970 <console_out+0x8>
    198a:	bf00      	nop
    198c:	00005a80 	.word	0x00005a80

00001990 <uart_console_hook_install>:
/**
 * @brief Install printk/stdout hook for UART console output
 */

static void uart_console_hook_install(void)
{
    1990:	b510      	push	{r4, lr}
#if defined(CONFIG_STDOUT_CONSOLE)
	__stdout_hook_install(console_out);
    1992:	4c04      	ldr	r4, [pc, #16]	; (19a4 <uart_console_hook_install+0x14>)
    1994:	4620      	mov	r0, r4
    1996:	f7ff fe27 	bl	15e8 <__stdout_hook_install>
#endif
#if defined(CONFIG_PRINTK)
	__printk_hook_install(console_out);
    199a:	4620      	mov	r0, r4
    199c:	f7fe fd2c 	bl	3f8 <__printk_hook_install>
#endif
}
    19a0:	bd10      	pop	{r4, pc}
    19a2:	bf00      	nop
    19a4:	00001969 	.word	0x00001969

000019a8 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    19a8:	b508      	push	{r3, lr}
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    19aa:	4805      	ldr	r0, [pc, #20]	; (19c0 <uart_console_init+0x18>)
    19ac:	f003 fe2c 	bl	5608 <z_device_is_ready>

	ARG_UNUSED(arg);

	if (!device_is_ready(uart_console_dev)) {
    19b0:	b118      	cbz	r0, 19ba <uart_console_init+0x12>
		return -ENODEV;
	}

	uart_console_hook_install();
    19b2:	f7ff ffed 	bl	1990 <uart_console_hook_install>

	return 0;
    19b6:	2000      	movs	r0, #0
}
    19b8:	bd08      	pop	{r3, pc}
		return -ENODEV;
    19ba:	f06f 0012 	mvn.w	r0, #18
    19be:	e7fb      	b.n	19b8 <uart_console_init+0x10>
    19c0:	00005a80 	.word	0x00005a80

000019c4 <get_dev>:
			dev = DEVICE_DT_INST_GET(i); \
		}

	if (0) {
	} /* Followed by else if from FOREACH macro. Done to avoid return statement in macro.  */
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    19c4:	b128      	cbz	r0, 19d2 <get_dev+0xe>
    19c6:	2801      	cmp	r0, #1
    19c8:	d101      	bne.n	19ce <get_dev+0xa>
    19ca:	4803      	ldr	r0, [pc, #12]	; (19d8 <get_dev+0x14>)
	#undef GPIO_NRF_GET_DEV

	return dev;
}
    19cc:	4770      	bx	lr
	const struct device *dev = NULL;
    19ce:	2000      	movs	r0, #0
    19d0:	4770      	bx	lr
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    19d2:	4802      	ldr	r0, [pc, #8]	; (19dc <get_dev+0x18>)
    19d4:	4770      	bx	lr
    19d6:	bf00      	nop
    19d8:	00005a38 	.word	0x00005a38
    19dc:	00005a50 	.word	0x00005a50

000019e0 <gpio_nrfx_pin_interrupt_configure>:
{
    19e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    19e2:	b085      	sub	sp, #20
    19e4:	460e      	mov	r6, r1
    19e6:	4619      	mov	r1, r3
	return port->config;
    19e8:	6843      	ldr	r3, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    19ea:	7b1b      	ldrb	r3, [r3, #12]
    19ec:	f006 051f 	and.w	r5, r6, #31
    19f0:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    19f4:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
    19f8:	d022      	beq.n	1a40 <gpio_nrfx_pin_interrupt_configure+0x60>
    19fa:	4607      	mov	r7, r0
    19fc:	4614      	mov	r4, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
    19fe:	2300      	movs	r3, #0
    1a00:	9301      	str	r3, [sp, #4]
    1a02:	9302      	str	r3, [sp, #8]
		.trigger = get_trigger(mode, trig),
    1a04:	4610      	mov	r0, r2
    1a06:	f003 fa0c 	bl	4e22 <get_trigger>
	nrfx_gpiote_trigger_config_t trigger_config = {
    1a0a:	f88d 0004 	strb.w	r0, [sp, #4]
	return port->config;
    1a0e:	687b      	ldr	r3, [r7, #4]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    1a10:	6899      	ldr	r1, [r3, #8]
    1a12:	40f1      	lsrs	r1, r6
    1a14:	f011 0f01 	tst.w	r1, #1
    1a18:	d102      	bne.n	1a20 <gpio_nrfx_pin_interrupt_configure+0x40>
    1a1a:	f1b4 7fa0 	cmp.w	r4, #20971520	; 0x1400000
    1a1e:	d014      	beq.n	1a4a <gpio_nrfx_pin_interrupt_configure+0x6a>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    1a20:	2300      	movs	r3, #0
    1a22:	aa01      	add	r2, sp, #4
    1a24:	4619      	mov	r1, r3
    1a26:	4628      	mov	r0, r5
    1a28:	f001 f904 	bl	2c34 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    1a2c:	4b1b      	ldr	r3, [pc, #108]	; (1a9c <gpio_nrfx_pin_interrupt_configure+0xbc>)
    1a2e:	4298      	cmp	r0, r3
    1a30:	d131      	bne.n	1a96 <gpio_nrfx_pin_interrupt_configure+0xb6>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    1a32:	2101      	movs	r1, #1
    1a34:	4628      	mov	r0, r5
    1a36:	f001 fa5d 	bl	2ef4 <nrfx_gpiote_trigger_enable>
	return 0;
    1a3a:	2000      	movs	r0, #0
}
    1a3c:	b005      	add	sp, #20
    1a3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrfx_gpiote_trigger_disable(abs_pin);
    1a40:	4628      	mov	r0, r5
    1a42:	f001 fa89 	bl	2f58 <nrfx_gpiote_trigger_disable>
		return 0;
    1a46:	2000      	movs	r0, #0
    1a48:	e7f8      	b.n	1a3c <gpio_nrfx_pin_interrupt_configure+0x5c>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    1a4a:	f005 031f 	and.w	r3, r5, #31

    return pin_number >> 5;
    1a4e:	096a      	lsrs	r2, r5, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    1a50:	2a01      	cmp	r2, #1
    1a52:	d014      	beq.n	1a7e <gpio_nrfx_pin_interrupt_configure+0x9e>
        case 0: return NRF_P0;
    1a54:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    1a58:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    1a5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    1a60:	f013 0f01 	tst.w	r3, #1
    1a64:	d1dc      	bne.n	1a20 <gpio_nrfx_pin_interrupt_configure+0x40>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    1a66:	f10d 010f 	add.w	r1, sp, #15
    1a6a:	4628      	mov	r0, r5
    1a6c:	f001 f9e6 	bl	2e3c <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    1a70:	4b0b      	ldr	r3, [pc, #44]	; (1aa0 <gpio_nrfx_pin_interrupt_configure+0xc0>)
    1a72:	4298      	cmp	r0, r3
    1a74:	d005      	beq.n	1a82 <gpio_nrfx_pin_interrupt_configure+0xa2>
		trigger_config.p_in_channel = &ch;
    1a76:	f10d 030f 	add.w	r3, sp, #15
    1a7a:	9302      	str	r3, [sp, #8]
    1a7c:	e7d0      	b.n	1a20 <gpio_nrfx_pin_interrupt_configure+0x40>
        case 1: return NRF_P1;
    1a7e:	4a09      	ldr	r2, [pc, #36]	; (1aa4 <gpio_nrfx_pin_interrupt_configure+0xc4>)
    1a80:	e7ea      	b.n	1a58 <gpio_nrfx_pin_interrupt_configure+0x78>
			err = nrfx_gpiote_channel_alloc(&ch);
    1a82:	f10d 000f 	add.w	r0, sp, #15
    1a86:	f001 fa2d 	bl	2ee4 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    1a8a:	4b04      	ldr	r3, [pc, #16]	; (1a9c <gpio_nrfx_pin_interrupt_configure+0xbc>)
    1a8c:	4298      	cmp	r0, r3
    1a8e:	d0f2      	beq.n	1a76 <gpio_nrfx_pin_interrupt_configure+0x96>
				return -ENOMEM;
    1a90:	f06f 000b 	mvn.w	r0, #11
    1a94:	e7d2      	b.n	1a3c <gpio_nrfx_pin_interrupt_configure+0x5c>
		return -EINVAL;
    1a96:	f06f 0015 	mvn.w	r0, #21
    1a9a:	e7cf      	b.n	1a3c <gpio_nrfx_pin_interrupt_configure+0x5c>
    1a9c:	0bad0000 	.word	0x0bad0000
    1aa0:	0bad0004 	.word	0x0bad0004
    1aa4:	50000300 	.word	0x50000300

00001aa8 <gpio_nrfx_pin_configure>:
{
    1aa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1aac:	b086      	sub	sp, #24
    1aae:	460e      	mov	r6, r1
    1ab0:	4614      	mov	r4, r2
	return port->config;
    1ab2:	f8d0 8004 	ldr.w	r8, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    1ab6:	f898 300c 	ldrb.w	r3, [r8, #12]
    1aba:	f001 051f 	and.w	r5, r1, #31
    1abe:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    1ac2:	f10d 0117 	add.w	r1, sp, #23
    1ac6:	4628      	mov	r0, r5
    1ac8:	f001 f9b8 	bl	2e3c <nrfx_gpiote_channel_get>
    1acc:	4607      	mov	r7, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    1ace:	f414 3f40 	tst.w	r4, #196608	; 0x30000
    1ad2:	d03a      	beq.n	1b4a <gpio_nrfx_pin_configure+0xa2>
	nrfx_gpiote_trigger_config_t trigger_config = {
    1ad4:	2100      	movs	r1, #0
    1ad6:	9103      	str	r1, [sp, #12]
    1ad8:	9104      	str	r1, [sp, #16]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    1ada:	460b      	mov	r3, r1
    1adc:	aa03      	add	r2, sp, #12
    1ade:	4628      	mov	r0, r5
    1ae0:	f001 f8a8 	bl	2c34 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    1ae4:	4b33      	ldr	r3, [pc, #204]	; (1bb4 <gpio_nrfx_pin_configure+0x10c>)
    1ae6:	4298      	cmp	r0, r3
    1ae8:	d161      	bne.n	1bae <gpio_nrfx_pin_configure+0x106>
	if (free_ch) {
    1aea:	429f      	cmp	r7, r3
    1aec:	d03d      	beq.n	1b6a <gpio_nrfx_pin_configure+0xc2>
	if (flags & GPIO_OUTPUT) {
    1aee:	f414 3f00 	tst.w	r4, #131072	; 0x20000
    1af2:	d049      	beq.n	1b88 <gpio_nrfx_pin_configure+0xe0>
		int rv = get_drive(flags, &drive);
    1af4:	f10d 0103 	add.w	r1, sp, #3
    1af8:	4620      	mov	r0, r4
    1afa:	f003 f917 	bl	4d2c <get_drive>
		if (rv != 0) {
    1afe:	4607      	mov	r7, r0
    1b00:	bb50      	cbnz	r0, 1b58 <gpio_nrfx_pin_configure+0xb0>
		nrfx_gpiote_output_config_t output_config = {
    1b02:	f89d 3003 	ldrb.w	r3, [sp, #3]
    1b06:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    1b0a:	f414 3f80 	tst.w	r4, #65536	; 0x10000
    1b0e:	bf0c      	ite	eq
    1b10:	2301      	moveq	r3, #1
    1b12:	2300      	movne	r3, #0
		nrfx_gpiote_output_config_t output_config = {
    1b14:	f88d 3005 	strb.w	r3, [sp, #5]
			.pull = get_pull(flags)
    1b18:	4620      	mov	r0, r4
    1b1a:	f003 f94a 	bl	4db2 <get_pull>
		nrfx_gpiote_output_config_t output_config = {
    1b1e:	f88d 0006 	strb.w	r0, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    1b22:	f414 2f00 	tst.w	r4, #524288	; 0x80000
    1b26:	d025      	beq.n	1b74 <gpio_nrfx_pin_configure+0xcc>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    1b28:	f8d8 2004 	ldr.w	r2, [r8, #4]
    1b2c:	2301      	movs	r3, #1
    1b2e:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
    1b30:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    1b34:	2200      	movs	r2, #0
    1b36:	a901      	add	r1, sp, #4
    1b38:	4628      	mov	r0, r5
    1b3a:	f001 f90f 	bl	2d5c <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    1b3e:	4b1d      	ldr	r3, [pc, #116]	; (1bb4 <gpio_nrfx_pin_configure+0x10c>)
    1b40:	4298      	cmp	r0, r3
    1b42:	d009      	beq.n	1b58 <gpio_nrfx_pin_configure+0xb0>
    1b44:	f06f 0715 	mvn.w	r7, #21
    1b48:	e006      	b.n	1b58 <gpio_nrfx_pin_configure+0xb0>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
    1b4a:	4628      	mov	r0, r5
    1b4c:	f001 fa26 	bl	2f9c <nrfx_gpiote_pin_uninit>
		if (free_ch) {
    1b50:	4b18      	ldr	r3, [pc, #96]	; (1bb4 <gpio_nrfx_pin_configure+0x10c>)
    1b52:	429f      	cmp	r7, r3
    1b54:	d004      	beq.n	1b60 <gpio_nrfx_pin_configure+0xb8>
		return 0;
    1b56:	2700      	movs	r7, #0
}
    1b58:	4638      	mov	r0, r7
    1b5a:	b006      	add	sp, #24
    1b5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			err = nrfx_gpiote_channel_free(ch);
    1b60:	f89d 0017 	ldrb.w	r0, [sp, #23]
    1b64:	f001 f9b6 	bl	2ed4 <nrfx_gpiote_channel_free>
    1b68:	e7f5      	b.n	1b56 <gpio_nrfx_pin_configure+0xae>
		err = nrfx_gpiote_channel_free(ch);
    1b6a:	f89d 0017 	ldrb.w	r0, [sp, #23]
    1b6e:	f001 f9b1 	bl	2ed4 <nrfx_gpiote_channel_free>
    1b72:	e7bc      	b.n	1aee <gpio_nrfx_pin_configure+0x46>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    1b74:	f414 2f80 	tst.w	r4, #262144	; 0x40000
    1b78:	d0dc      	beq.n	1b34 <gpio_nrfx_pin_configure+0x8c>
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    1b7a:	f8d8 2004 	ldr.w	r2, [r8, #4]
    1b7e:	2301      	movs	r3, #1
    1b80:	40b3      	lsls	r3, r6
    p_reg->OUTCLR = clr_mask;
    1b82:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
    1b86:	e7d5      	b.n	1b34 <gpio_nrfx_pin_configure+0x8c>
		.pull = get_pull(flags)
    1b88:	4620      	mov	r0, r4
    1b8a:	f003 f912 	bl	4db2 <get_pull>
	nrfx_gpiote_input_config_t input_config = {
    1b8e:	f88d 0008 	strb.w	r0, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    1b92:	2300      	movs	r3, #0
    1b94:	461a      	mov	r2, r3
    1b96:	a902      	add	r1, sp, #8
    1b98:	4628      	mov	r0, r5
    1b9a:	f001 f84b 	bl	2c34 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    1b9e:	4b05      	ldr	r3, [pc, #20]	; (1bb4 <gpio_nrfx_pin_configure+0x10c>)
    1ba0:	4298      	cmp	r0, r3
    1ba2:	d101      	bne.n	1ba8 <gpio_nrfx_pin_configure+0x100>
    1ba4:	2700      	movs	r7, #0
    1ba6:	e7d7      	b.n	1b58 <gpio_nrfx_pin_configure+0xb0>
    1ba8:	f06f 0715 	mvn.w	r7, #21
    1bac:	e7d4      	b.n	1b58 <gpio_nrfx_pin_configure+0xb0>
		return -EINVAL;
    1bae:	f06f 0715 	mvn.w	r7, #21
    1bb2:	e7d1      	b.n	1b58 <gpio_nrfx_pin_configure+0xb0>
    1bb4:	0bad0000 	.word	0x0bad0000

00001bb8 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    1bb8:	b508      	push	{r3, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    1bba:	f001 f981 	bl	2ec0 <nrfx_gpiote_is_init>
    1bbe:	b108      	cbz	r0, 1bc4 <gpio_nrfx_init+0xc>
		return 0;
    1bc0:	2000      	movs	r0, #0

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    1bc2:	bd08      	pop	{r3, pc}
	err = nrfx_gpiote_init(0/*not used*/);
    1bc4:	f001 f952 	bl	2e6c <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    1bc8:	4b08      	ldr	r3, [pc, #32]	; (1bec <gpio_nrfx_init+0x34>)
    1bca:	4298      	cmp	r0, r3
    1bcc:	d10a      	bne.n	1be4 <gpio_nrfx_init+0x2c>
	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    1bce:	2100      	movs	r1, #0
    1bd0:	4807      	ldr	r0, [pc, #28]	; (1bf0 <gpio_nrfx_init+0x38>)
    1bd2:	f001 f92d 	bl	2e30 <nrfx_gpiote_global_callback_set>
	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    1bd6:	2200      	movs	r2, #0
    1bd8:	2105      	movs	r1, #5
    1bda:	2006      	movs	r0, #6
    1bdc:	f002 fdee 	bl	47bc <z_arm_irq_priority_set>
	return 0;
    1be0:	2000      	movs	r0, #0
    1be2:	e7ee      	b.n	1bc2 <gpio_nrfx_init+0xa>
		return -EIO;
    1be4:	f06f 0004 	mvn.w	r0, #4
    1be8:	e7eb      	b.n	1bc2 <gpio_nrfx_init+0xa>
    1bea:	bf00      	nop
    1bec:	0bad0000 	.word	0x0bad0000
    1bf0:	00004e5b 	.word	0x00004e5b

00001bf4 <baudrate_set>:
#endif
};

static inline NRF_UARTE_Type *get_uarte_instance(const struct device *dev)
{
	const struct uarte_nrfx_config *config = dev->config;
    1bf4:	6843      	ldr	r3, [r0, #4]

	return config->uarte_regs;
    1bf6:	681a      	ldr	r2, [r3, #0]
static int baudrate_set(const struct device *dev, uint32_t baudrate)
{
	nrf_uarte_baudrate_t nrf_baudrate; /* calculated baudrate divisor */
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	switch (baudrate) {
    1bf8:	f5b1 4f16 	cmp.w	r1, #38400	; 0x9600
    1bfc:	d06f      	beq.n	1cde <baudrate_set+0xea>
    1bfe:	d83a      	bhi.n	1c76 <baudrate_set+0x82>
    1c00:	f5b1 5f16 	cmp.w	r1, #9600	; 0x2580
    1c04:	d06e      	beq.n	1ce4 <baudrate_set+0xf0>
    1c06:	d90a      	bls.n	1c1e <baudrate_set+0x2a>
    1c08:	f5b1 4fe1 	cmp.w	r1, #28800	; 0x7080
    1c0c:	d075      	beq.n	1cfa <baudrate_set+0x106>
    1c0e:	d924      	bls.n	1c5a <baudrate_set+0x66>
    1c10:	f647 2312 	movw	r3, #31250	; 0x7a12
    1c14:	4299      	cmp	r1, r3
    1c16:	d12b      	bne.n	1c70 <baudrate_set+0x7c>
		break;
	case 28800:
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
		break;
	case 31250:
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    1c18:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    1c1c:	e013      	b.n	1c46 <baudrate_set+0x52>
	switch (baudrate) {
    1c1e:	f5b1 6f96 	cmp.w	r1, #1200	; 0x4b0
    1c22:	d061      	beq.n	1ce8 <baudrate_set+0xf4>
    1c24:	d907      	bls.n	1c36 <baudrate_set+0x42>
    1c26:	f5b1 6f16 	cmp.w	r1, #2400	; 0x960
    1c2a:	d063      	beq.n	1cf4 <baudrate_set+0x100>
    1c2c:	f5b1 5f96 	cmp.w	r1, #4800	; 0x12c0
    1c30:	d110      	bne.n	1c54 <baudrate_set+0x60>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    1c32:	4b3c      	ldr	r3, [pc, #240]	; (1d24 <baudrate_set+0x130>)
    1c34:	e007      	b.n	1c46 <baudrate_set+0x52>
	switch (baudrate) {
    1c36:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
    1c3a:	d058      	beq.n	1cee <baudrate_set+0xfa>
    1c3c:	f5b1 7f16 	cmp.w	r1, #600	; 0x258
    1c40:	d105      	bne.n	1c4e <baudrate_set+0x5a>
		nrf_baudrate = 0x00027000;
    1c42:	f44f 331c 	mov.w	r3, #159744	; 0x27000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    1c46:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
		return -EINVAL;
	}

	nrf_uarte_baudrate_set(uarte, nrf_baudrate);

	return 0;
    1c4a:	2000      	movs	r0, #0
    1c4c:	4770      	bx	lr
	switch (baudrate) {
    1c4e:	f06f 0015 	mvn.w	r0, #21
    1c52:	4770      	bx	lr
    1c54:	f06f 0015 	mvn.w	r0, #21
    1c58:	4770      	bx	lr
    1c5a:	f5b1 5f61 	cmp.w	r1, #14400	; 0x3840
    1c5e:	d04e      	beq.n	1cfe <baudrate_set+0x10a>
    1c60:	f5b1 4f96 	cmp.w	r1, #19200	; 0x4b00
    1c64:	d101      	bne.n	1c6a <baudrate_set+0x76>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    1c66:	4b30      	ldr	r3, [pc, #192]	; (1d28 <baudrate_set+0x134>)
    1c68:	e7ed      	b.n	1c46 <baudrate_set+0x52>
	switch (baudrate) {
    1c6a:	f06f 0015 	mvn.w	r0, #21
    1c6e:	4770      	bx	lr
    1c70:	f06f 0015 	mvn.w	r0, #21
    1c74:	4770      	bx	lr
    1c76:	f5b1 3f61 	cmp.w	r1, #230400	; 0x38400
    1c7a:	d042      	beq.n	1d02 <baudrate_set+0x10e>
    1c7c:	d909      	bls.n	1c92 <baudrate_set+0x9e>
    1c7e:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
    1c82:	d046      	beq.n	1d12 <baudrate_set+0x11e>
    1c84:	d91f      	bls.n	1cc6 <baudrate_set+0xd2>
    1c86:	4b29      	ldr	r3, [pc, #164]	; (1d2c <baudrate_set+0x138>)
    1c88:	4299      	cmp	r1, r3
    1c8a:	d148      	bne.n	1d1e <baudrate_set+0x12a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    1c8c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    1c90:	e7d9      	b.n	1c46 <baudrate_set+0x52>
	switch (baudrate) {
    1c92:	f5b1 3f96 	cmp.w	r1, #76800	; 0x12c00
    1c96:	d037      	beq.n	1d08 <baudrate_set+0x114>
    1c98:	d905      	bls.n	1ca6 <baudrate_set+0xb2>
    1c9a:	f5b1 3fe1 	cmp.w	r1, #115200	; 0x1c200
    1c9e:	d10f      	bne.n	1cc0 <baudrate_set+0xcc>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    1ca0:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    1ca4:	e7cf      	b.n	1c46 <baudrate_set+0x52>
	switch (baudrate) {
    1ca6:	f64d 23c0 	movw	r3, #56000	; 0xdac0
    1caa:	4299      	cmp	r1, r3
    1cac:	d02e      	beq.n	1d0c <baudrate_set+0x118>
    1cae:	f5b1 4f61 	cmp.w	r1, #57600	; 0xe100
    1cb2:	d102      	bne.n	1cba <baudrate_set+0xc6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    1cb4:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    1cb8:	e7c5      	b.n	1c46 <baudrate_set+0x52>
	switch (baudrate) {
    1cba:	f06f 0015 	mvn.w	r0, #21
    1cbe:	4770      	bx	lr
    1cc0:	f06f 0015 	mvn.w	r0, #21
    1cc4:	4770      	bx	lr
    1cc6:	4b1a      	ldr	r3, [pc, #104]	; (1d30 <baudrate_set+0x13c>)
    1cc8:	4299      	cmp	r1, r3
    1cca:	d025      	beq.n	1d18 <baudrate_set+0x124>
    1ccc:	f5b1 2fe1 	cmp.w	r1, #460800	; 0x70800
    1cd0:	d102      	bne.n	1cd8 <baudrate_set+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    1cd2:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    1cd6:	e7b6      	b.n	1c46 <baudrate_set+0x52>
	switch (baudrate) {
    1cd8:	f06f 0015 	mvn.w	r0, #21
    1cdc:	4770      	bx	lr
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    1cde:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    1ce2:	e7b0      	b.n	1c46 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    1ce4:	4b13      	ldr	r3, [pc, #76]	; (1d34 <baudrate_set+0x140>)
    1ce6:	e7ae      	b.n	1c46 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    1ce8:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    1cec:	e7ab      	b.n	1c46 <baudrate_set+0x52>
	switch (baudrate) {
    1cee:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    1cf2:	e7a8      	b.n	1c46 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    1cf4:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    1cf8:	e7a5      	b.n	1c46 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    1cfa:	4b0f      	ldr	r3, [pc, #60]	; (1d38 <baudrate_set+0x144>)
    1cfc:	e7a3      	b.n	1c46 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    1cfe:	4b0f      	ldr	r3, [pc, #60]	; (1d3c <baudrate_set+0x148>)
    1d00:	e7a1      	b.n	1c46 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    1d02:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    1d06:	e79e      	b.n	1c46 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    1d08:	4b0d      	ldr	r3, [pc, #52]	; (1d40 <baudrate_set+0x14c>)
    1d0a:	e79c      	b.n	1c46 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    1d0c:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    1d10:	e799      	b.n	1c46 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    1d12:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    1d16:	e796      	b.n	1c46 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    1d18:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    1d1c:	e793      	b.n	1c46 <baudrate_set+0x52>
	switch (baudrate) {
    1d1e:	f06f 0015 	mvn.w	r0, #21
}
    1d22:	4770      	bx	lr
    1d24:	0013b000 	.word	0x0013b000
    1d28:	004ea000 	.word	0x004ea000
    1d2c:	000f4240 	.word	0x000f4240
    1d30:	0003d090 	.word	0x0003d090
    1d34:	00275000 	.word	0x00275000
    1d38:	0075c000 	.word	0x0075c000
    1d3c:	003af000 	.word	0x003af000
    1d40:	013a9000 	.word	0x013a9000

00001d44 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    1d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1d46:	4605      	mov	r5, r0
    1d48:	460e      	mov	r6, r1
	struct uarte_nrfx_data *data = dev->data;
    1d4a:	6907      	ldr	r7, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    1d4c:	f003 fca1 	bl	5692 <k_is_in_isr>
    1d50:	b910      	cbnz	r0, 1d58 <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
    1d52:	4b12      	ldr	r3, [pc, #72]	; (1d9c <uarte_nrfx_poll_out+0x58>)
    1d54:	781b      	ldrb	r3, [r3, #0]
    1d56:	b983      	cbnz	r3, 1d7a <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    1d58:	f04f 0320 	mov.w	r3, #32
    1d5c:	f3ef 8411 	mrs	r4, BASEPRI
    1d60:	f383 8812 	msr	BASEPRI_MAX, r3
    1d64:	f3bf 8f6f 	isb	sy
#endif

	if (isr_mode) {
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
    1d68:	4628      	mov	r0, r5
    1d6a:	f003 f939 	bl	4fe0 <is_tx_ready>
    1d6e:	b940      	cbnz	r0, 1d82 <uarte_nrfx_poll_out+0x3e>
	__asm__ volatile(
    1d70:	f384 8811 	msr	BASEPRI, r4
    1d74:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    1d78:	e7ee      	b.n	1d58 <uarte_nrfx_poll_out+0x14>
			}

			irq_unlock(key);
		}
	} else {
		key = wait_tx_ready(dev);
    1d7a:	4628      	mov	r0, r5
    1d7c:	f003 f995 	bl	50aa <wait_tx_ready>
    1d80:	4604      	mov	r4, r0
	}

	*data->char_out = c;
    1d82:	693b      	ldr	r3, [r7, #16]
    1d84:	701e      	strb	r6, [r3, #0]
	tx_start(dev, data->char_out, 1);
    1d86:	2201      	movs	r2, #1
    1d88:	6939      	ldr	r1, [r7, #16]
    1d8a:	4628      	mov	r0, r5
    1d8c:	f003 f942 	bl	5014 <tx_start>
	__asm__ volatile(
    1d90:	f384 8811 	msr	BASEPRI, r4
    1d94:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
    1d98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1d9a:	bf00      	nop
    1d9c:	20000816 	.word	0x20000816

00001da0 <endtx_stoptx_ppi_init>:
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int endtx_stoptx_ppi_init(NRF_UARTE_Type *uarte,
				 struct uarte_nrfx_data *data)
{
    1da0:	b538      	push	{r3, r4, r5, lr}
    1da2:	4604      	mov	r4, r0
    1da4:	460d      	mov	r5, r1
	nrfx_err_t ret;

	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    1da6:	f101 0018 	add.w	r0, r1, #24
    1daa:	f001 f94b 	bl	3044 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    1dae:	4b0c      	ldr	r3, [pc, #48]	; (1de0 <endtx_stoptx_ppi_init+0x40>)
    1db0:	4298      	cmp	r0, r3
    1db2:	d111      	bne.n	1dd8 <endtx_stoptx_ppi_init+0x38>
		LOG_ERR("Failed to allocate PPI Channel");
		return -EIO;
	}

	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    1db4:	7e2b      	ldrb	r3, [r5, #24]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    1db6:	f504 7190 	add.w	r1, r4, #288	; 0x120
    return (uint32_t)p_reg + (uint32_t)task;
    1dba:	340c      	adds	r4, #12
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    1dbc:	4a09      	ldr	r2, [pc, #36]	; (1de4 <endtx_stoptx_ppi_init+0x44>)
    1dbe:	33a2      	adds	r3, #162	; 0xa2
    1dc0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
    p_reg->CH[(uint32_t) channel].TEP = tep;
    1dc4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    1dc8:	605c      	str	r4, [r3, #4]
		nrf_uarte_event_address_get(uarte, NRF_UARTE_EVENT_ENDTX),
		nrf_uarte_task_address_get(uarte, NRF_UARTE_TASK_STOPTX));
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    1dca:	7e29      	ldrb	r1, [r5, #24]
    1dcc:	2301      	movs	r3, #1
    1dce:	408b      	lsls	r3, r1
    p_reg->CHENSET = mask;
    1dd0:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504

	return 0;
    1dd4:	2000      	movs	r0, #0
}
    1dd6:	bd38      	pop	{r3, r4, r5, pc}
		return -EIO;
    1dd8:	f06f 0004 	mvn.w	r0, #4
    1ddc:	e7fb      	b.n	1dd6 <endtx_stoptx_ppi_init+0x36>
    1dde:	bf00      	nop
    1de0:	0bad0000 	.word	0x0bad0000
    1de4:	4001f000 	.word	0x4001f000

00001de8 <set_comparator>:
	return (a - b) & COUNTER_MAX;
}

static void set_comparator(int32_t chan, uint32_t cyc)
{
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    1de8:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
    1dec:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    1df0:	4b01      	ldr	r3, [pc, #4]	; (1df8 <set_comparator+0x10>)
    1df2:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
    1df6:	4770      	bx	lr
    1df8:	40011000 	.word	0x40011000

00001dfc <event_enable>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
}

static void event_enable(int32_t chan)
{
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    1dfc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    1e00:	4083      	lsls	r3, r0
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    1e02:	4a02      	ldr	r2, [pc, #8]	; (1e0c <event_enable+0x10>)
    1e04:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
}
    1e08:	4770      	bx	lr
    1e0a:	bf00      	nop
    1e0c:	40011000 	.word	0x40011000

00001e10 <event_disable>:

static void event_disable(int32_t chan)
{
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    1e10:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    1e14:	4083      	lsls	r3, r0
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    1e16:	4a02      	ldr	r2, [pc, #8]	; (1e20 <event_disable+0x10>)
    1e18:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
}
    1e1c:	4770      	bx	lr
    1e1e:	bf00      	nop
    1e20:	40011000 	.word	0x40011000

00001e24 <counter>:
     return p_reg->COUNTER;
    1e24:	4b01      	ldr	r3, [pc, #4]	; (1e2c <counter+0x8>)
    1e26:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

static uint32_t counter(void)
{
	return nrf_rtc_counter_get(RTC);
}
    1e2a:	4770      	bx	lr
    1e2c:	40011000 	.word	0x40011000

00001e30 <set_alarm>:
 * @param[in] chan A channel for which a new CC value is to be set.
 *
 * @param[in] req_cc Requested CC register value to be set.
 */
static void set_alarm(int32_t chan, uint32_t req_cc)
{
    1e30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1e34:	4606      	mov	r6, r0
    1e36:	4688      	mov	r8, r1
	 * (however, even if such spurious event was generated, it would be
	 * properly filtered out in process_channel(), where the target time
	 * is checked).
	 * Clear also the event as it may already be generated at this point.
	 */
	event_disable(chan);
    1e38:	f7ff ffea 	bl	1e10 <event_disable>
	event_clear(chan);
    1e3c:	4630      	mov	r0, r6
    1e3e:	f003 f9ec 	bl	521a <event_clear>
	uint32_t cc_val = req_cc;
    1e42:	4645      	mov	r5, r8
	uint32_t cc_inc = MIN_CYCLES_FROM_NOW;
    1e44:	2703      	movs	r7, #3
    1e46:	e001      	b.n	1e4c <set_alarm+0x1c>
				} else {
					break;
				}
			}

			cc_val = now + cc_inc;
    1e48:	193d      	adds	r5, r7, r4
			cc_inc++;
    1e4a:	3701      	adds	r7, #1
		set_comparator(chan, cc_val);
    1e4c:	4629      	mov	r1, r5
    1e4e:	4630      	mov	r0, r6
    1e50:	f7ff ffca 	bl	1de8 <set_comparator>
		event_enable(chan);
    1e54:	4630      	mov	r0, r6
    1e56:	f7ff ffd1 	bl	1dfc <event_enable>
		now = counter();
    1e5a:	f7ff ffe3 	bl	1e24 <counter>
    1e5e:	4604      	mov	r4, r0
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
    1e60:	1cc1      	adds	r1, r0, #3
    1e62:	4628      	mov	r0, r5
    1e64:	f003 f9c8 	bl	51f8 <counter_sub>
    1e68:	4b0b      	ldr	r3, [pc, #44]	; (1e98 <set_alarm+0x68>)
    1e6a:	4298      	cmp	r0, r3
    1e6c:	d911      	bls.n	1e92 <set_alarm+0x62>
			if (event_check(chan)) {
    1e6e:	4630      	mov	r0, r6
    1e70:	f003 f9c6 	bl	5200 <event_check>
    1e74:	2800      	cmp	r0, #0
    1e76:	d0e7      	beq.n	1e48 <set_alarm+0x18>
				now = counter();
    1e78:	f7ff ffd4 	bl	1e24 <counter>
    1e7c:	4604      	mov	r4, r0
				if (counter_sub(now, req_cc) > COUNTER_HALF_SPAN) {
    1e7e:	4641      	mov	r1, r8
    1e80:	f003 f9ba 	bl	51f8 <counter_sub>
    1e84:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    1e88:	d903      	bls.n	1e92 <set_alarm+0x62>
					event_clear(chan);
    1e8a:	4630      	mov	r0, r6
    1e8c:	f003 f9c5 	bl	521a <event_clear>
    1e90:	e7da      	b.n	1e48 <set_alarm+0x18>
		} else {
			break;
		}
	}
}
    1e92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1e96:	bf00      	nop
    1e98:	007ffffd 	.word	0x007ffffd

00001e9c <compare_int_lock>:
{
    1e9c:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    1e9e:	2301      	movs	r3, #1
    1ea0:	4083      	lsls	r3, r0
    1ea2:	ea6f 0c03 	mvn.w	ip, r3
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    1ea6:	4a0e      	ldr	r2, [pc, #56]	; (1ee0 <compare_int_lock+0x44>)
    1ea8:	f3bf 8f5b 	dmb	ish
    1eac:	e852 1f00 	ldrex	r1, [r2]
    1eb0:	ea01 0e0c 	and.w	lr, r1, ip
    1eb4:	e842 e400 	strex	r4, lr, [r2]
    1eb8:	2c00      	cmp	r4, #0
    1eba:	d1f7      	bne.n	1eac <compare_int_lock+0x10>
    1ebc:	f3bf 8f5b 	dmb	ish
	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    1ec0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    1ec4:	4082      	lsls	r2, r0
    p_reg->INTENCLR = mask;
    1ec6:	4807      	ldr	r0, [pc, #28]	; (1ee4 <compare_int_lock+0x48>)
    1ec8:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    1ecc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1ed0:	f3bf 8f6f 	isb	sy
	return prev & BIT(chan);
    1ed4:	420b      	tst	r3, r1
}
    1ed6:	bf14      	ite	ne
    1ed8:	2001      	movne	r0, #1
    1eda:	2000      	moveq	r0, #0
    1edc:	bd10      	pop	{r4, pc}
    1ede:	bf00      	nop
    1ee0:	2000030c 	.word	0x2000030c
    1ee4:	40011000 	.word	0x40011000

00001ee8 <channel_processing_check_and_clear>:
	sys_clock_announce(dticks);
}

static bool channel_processing_check_and_clear(int32_t chan)
{
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    1ee8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    1eec:	4083      	lsls	r3, r0
    return p_reg->INTENSET & mask;
    1eee:	4a14      	ldr	r2, [pc, #80]	; (1f40 <channel_processing_check_and_clear+0x58>)
    1ef0:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    1ef4:	4213      	tst	r3, r2
    1ef6:	d101      	bne.n	1efc <channel_processing_check_and_clear+0x14>
			event_clear(chan);
			return true;
		}
	}

	return false;
    1ef8:	2000      	movs	r0, #0
}
    1efa:	4770      	bx	lr
{
    1efc:	b510      	push	{r4, lr}
    1efe:	4604      	mov	r4, r0
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
    1f00:	2301      	movs	r3, #1
    1f02:	4083      	lsls	r3, r0
    1f04:	43db      	mvns	r3, r3
    1f06:	490f      	ldr	r1, [pc, #60]	; (1f44 <channel_processing_check_and_clear+0x5c>)
    1f08:	f3bf 8f5b 	dmb	ish
    1f0c:	e851 2f00 	ldrex	r2, [r1]
    1f10:	ea02 0003 	and.w	r0, r2, r3
    1f14:	e841 0c00 	strex	ip, r0, [r1]
    1f18:	f1bc 0f00 	cmp.w	ip, #0
    1f1c:	d1f6      	bne.n	1f0c <channel_processing_check_and_clear+0x24>
    1f1e:	f3bf 8f5b 	dmb	ish
    1f22:	fa22 f304 	lsr.w	r3, r2, r4
    1f26:	f013 0f01 	tst.w	r3, #1
    1f2a:	d103      	bne.n	1f34 <channel_processing_check_and_clear+0x4c>
		    event_check(chan)) {
    1f2c:	4620      	mov	r0, r4
    1f2e:	f003 f967 	bl	5200 <event_check>
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
    1f32:	b118      	cbz	r0, 1f3c <channel_processing_check_and_clear+0x54>
			event_clear(chan);
    1f34:	4620      	mov	r0, r4
    1f36:	f003 f970 	bl	521a <event_clear>
			return true;
    1f3a:	2001      	movs	r0, #1
}
    1f3c:	bd10      	pop	{r4, pc}
    1f3e:	bf00      	nop
    1f40:	40011000 	.word	0x40011000
    1f44:	20000308 	.word	0x20000308

00001f48 <compare_int_unlock>:
	if (key) {
    1f48:	b901      	cbnz	r1, 1f4c <compare_int_unlock+0x4>
}
    1f4a:	4770      	bx	lr
		atomic_or(&int_mask, BIT(chan));
    1f4c:	2301      	movs	r3, #1
    1f4e:	4083      	lsls	r3, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    1f50:	4a11      	ldr	r2, [pc, #68]	; (1f98 <compare_int_unlock+0x50>)
    1f52:	f3bf 8f5b 	dmb	ish
    1f56:	e852 cf00 	ldrex	ip, [r2]
    1f5a:	ea4c 0c03 	orr.w	ip, ip, r3
    1f5e:	e842 c100 	strex	r1, ip, [r2]
    1f62:	2900      	cmp	r1, #0
    1f64:	d1f7      	bne.n	1f56 <compare_int_unlock+0xe>
    1f66:	f3bf 8f5b 	dmb	ish
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    1f6a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    1f6e:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
    1f70:	4a0a      	ldr	r2, [pc, #40]	; (1f9c <compare_int_unlock+0x54>)
    1f72:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    1f76:	f3bf 8f5b 	dmb	ish
    1f7a:	4b09      	ldr	r3, [pc, #36]	; (1fa0 <compare_int_unlock+0x58>)
    1f7c:	681b      	ldr	r3, [r3, #0]
    1f7e:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    1f82:	40c3      	lsrs	r3, r0
    1f84:	f013 0f01 	tst.w	r3, #1
    1f88:	d0df      	beq.n	1f4a <compare_int_unlock+0x2>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1f8a:	4b06      	ldr	r3, [pc, #24]	; (1fa4 <compare_int_unlock+0x5c>)
    1f8c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    1f90:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
    1f94:	e7d9      	b.n	1f4a <compare_int_unlock+0x2>
    1f96:	bf00      	nop
    1f98:	2000030c 	.word	0x2000030c
    1f9c:	40011000 	.word	0x40011000
    1fa0:	20000308 	.word	0x20000308
    1fa4:	e000e100 	.word	0xe000e100

00001fa8 <sys_clock_timeout_handler>:
{
    1fa8:	b538      	push	{r3, r4, r5, lr}
    1faa:	4614      	mov	r4, r2
	uint32_t cc_value = absolute_time_to_cc(expire_time);
    1fac:	4610      	mov	r0, r2
    1fae:	4619      	mov	r1, r3
    1fb0:	f003 f93f 	bl	5232 <absolute_time_to_cc>
    1fb4:	4602      	mov	r2, r0
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
    1fb6:	490d      	ldr	r1, [pc, #52]	; (1fec <sys_clock_timeout_handler+0x44>)
    1fb8:	680b      	ldr	r3, [r1, #0]
    1fba:	1ae0      	subs	r0, r4, r3
	last_count += dticks * CYC_PER_TICK;
    1fbc:	181b      	adds	r3, r3, r0
    1fbe:	684c      	ldr	r4, [r1, #4]
    1fc0:	f144 0400 	adc.w	r4, r4, #0
    1fc4:	600b      	str	r3, [r1, #0]
    1fc6:	604c      	str	r4, [r1, #4]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    1fc8:	f5a2 1300 	sub.w	r3, r2, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
    1fcc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    1fd0:	d209      	bcs.n	1fe6 <sys_clock_timeout_handler+0x3e>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    1fd2:	4b07      	ldr	r3, [pc, #28]	; (1ff0 <sys_clock_timeout_handler+0x48>)
    1fd4:	681b      	ldr	r3, [r3, #0]
    1fd6:	0a19      	lsrs	r1, r3, #8
    1fd8:	061b      	lsls	r3, r3, #24
    1fda:	18d4      	adds	r4, r2, r3
    1fdc:	f141 0500 	adc.w	r5, r1, #0
    1fe0:	4b04      	ldr	r3, [pc, #16]	; (1ff4 <sys_clock_timeout_handler+0x4c>)
    1fe2:	e9c3 4500 	strd	r4, r5, [r3]
	sys_clock_announce(dticks);
    1fe6:	f001 ff55 	bl	3e94 <sys_clock_announce>
}
    1fea:	bd38      	pop	{r3, r4, r5, pc}
    1fec:	200000e0 	.word	0x200000e0
    1ff0:	20000310 	.word	0x20000310
    1ff4:	200000e8 	.word	0x200000e8

00001ff8 <z_nrf_rtc_timer_read>:
{
    1ff8:	b538      	push	{r3, r4, r5, lr}
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    1ffa:	4b0d      	ldr	r3, [pc, #52]	; (2030 <z_nrf_rtc_timer_read+0x38>)
    1ffc:	681c      	ldr	r4, [r3, #0]
    1ffe:	0a25      	lsrs	r5, r4, #8
    2000:	0624      	lsls	r4, r4, #24
  __ASM volatile ("dmb 0xF":::"memory");
    2002:	f3bf 8f5f 	dmb	sy
	uint32_t cntr = counter();
    2006:	f7ff ff0d 	bl	1e24 <counter>
    200a:	4603      	mov	r3, r0
	val += cntr;
    200c:	1900      	adds	r0, r0, r4
    200e:	f145 0100 	adc.w	r1, r5, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    2012:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    2016:	d20a      	bcs.n	202e <z_nrf_rtc_timer_read+0x36>
		if (val < anchor) {
    2018:	4b06      	ldr	r3, [pc, #24]	; (2034 <z_nrf_rtc_timer_read+0x3c>)
    201a:	e9d3 2300 	ldrd	r2, r3, [r3]
    201e:	4290      	cmp	r0, r2
    2020:	eb71 0303 	sbcs.w	r3, r1, r3
    2024:	d203      	bcs.n	202e <z_nrf_rtc_timer_read+0x36>
			val += COUNTER_SPAN;
    2026:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    202a:	f141 0100 	adc.w	r1, r1, #0
}
    202e:	bd38      	pop	{r3, r4, r5, pc}
    2030:	20000310 	.word	0x20000310
    2034:	200000e8 	.word	0x200000e8

00002038 <compare_set_nolocks>:
{
    2038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    203a:	4606      	mov	r6, r0
    203c:	4614      	mov	r4, r2
    203e:	461d      	mov	r5, r3
	uint32_t cc_value = absolute_time_to_cc(target_time);
    2040:	4610      	mov	r0, r2
    2042:	4619      	mov	r1, r3
    2044:	f003 f8f5 	bl	5232 <absolute_time_to_cc>
    2048:	4607      	mov	r7, r0
	uint64_t curr_time = z_nrf_rtc_timer_read();
    204a:	f7ff ffd5 	bl	1ff8 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    204e:	42a0      	cmp	r0, r4
    2050:	eb71 0305 	sbcs.w	r3, r1, r5
    2054:	d215      	bcs.n	2082 <compare_set_nolocks+0x4a>
		if (target_time - curr_time > COUNTER_HALF_SPAN) {
    2056:	1a20      	subs	r0, r4, r0
    2058:	eb65 0101 	sbc.w	r1, r5, r1
    205c:	4b17      	ldr	r3, [pc, #92]	; (20bc <compare_set_nolocks+0x84>)
    205e:	4298      	cmp	r0, r3
    2060:	f171 0100 	sbcs.w	r1, r1, #0
    2064:	d227      	bcs.n	20b6 <compare_set_nolocks+0x7e>
		if (target_time != cc_data[chan].target_time) {
    2066:	4b16      	ldr	r3, [pc, #88]	; (20c0 <compare_set_nolocks+0x88>)
    2068:	eb03 1306 	add.w	r3, r3, r6, lsl #4
    206c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    2070:	42ab      	cmp	r3, r5
    2072:	bf08      	it	eq
    2074:	42a2      	cmpeq	r2, r4
    2076:	d012      	beq.n	209e <compare_set_nolocks+0x66>
			set_alarm(chan, cc_value);
    2078:	4639      	mov	r1, r7
    207a:	4630      	mov	r0, r6
    207c:	f7ff fed8 	bl	1e30 <set_alarm>
    2080:	e00d      	b.n	209e <compare_set_nolocks+0x66>
		atomic_or(&force_isr_mask, BIT(chan));
    2082:	2301      	movs	r3, #1
    2084:	40b3      	lsls	r3, r6
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    2086:	4a0f      	ldr	r2, [pc, #60]	; (20c4 <compare_set_nolocks+0x8c>)
    2088:	f3bf 8f5b 	dmb	ish
    208c:	e852 0f00 	ldrex	r0, [r2]
    2090:	4318      	orrs	r0, r3
    2092:	e842 0100 	strex	r1, r0, [r2]
    2096:	2900      	cmp	r1, #0
    2098:	d1f8      	bne.n	208c <compare_set_nolocks+0x54>
    209a:	f3bf 8f5b 	dmb	ish
	cc_data[chan].target_time = target_time;
    209e:	4b08      	ldr	r3, [pc, #32]	; (20c0 <compare_set_nolocks+0x88>)
    20a0:	0132      	lsls	r2, r6, #4
    20a2:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    20a6:	e9c6 4502 	strd	r4, r5, [r6, #8]
	cc_data[chan].callback = handler;
    20aa:	9906      	ldr	r1, [sp, #24]
    20ac:	5099      	str	r1, [r3, r2]
	cc_data[chan].user_context = user_data;
    20ae:	9b07      	ldr	r3, [sp, #28]
    20b0:	6073      	str	r3, [r6, #4]
	return ret;
    20b2:	2000      	movs	r0, #0
}
    20b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return -EINVAL;
    20b6:	f06f 0015 	mvn.w	r0, #21
    20ba:	e7fb      	b.n	20b4 <compare_set_nolocks+0x7c>
    20bc:	00800001 	.word	0x00800001
    20c0:	200000d0 	.word	0x200000d0
    20c4:	20000308 	.word	0x20000308

000020c8 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    20c8:	b530      	push	{r4, r5, lr}
    20ca:	b083      	sub	sp, #12
    p_reg->PRESCALER = val;
    20cc:	2300      	movs	r3, #0
    20ce:	4a1d      	ldr	r2, [pc, #116]	; (2144 <sys_clock_driver_init+0x7c>)
    20d0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			CLOCK_CONTROL_NRF_LF_START_AVAILABLE :
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    20d4:	2b00      	cmp	r3, #0
    20d6:	dd24      	ble.n	2122 <sys_clock_driver_init+0x5a>
    p_reg->INTENSET = mask;
    20d8:	4c1a      	ldr	r4, [pc, #104]	; (2144 <sys_clock_driver_init+0x7c>)
    20da:	2502      	movs	r5, #2
    20dc:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    20e0:	4b19      	ldr	r3, [pc, #100]	; (2148 <sys_clock_driver_init+0x80>)
    20e2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    20e6:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    20ea:	2200      	movs	r2, #0
    20ec:	2101      	movs	r1, #1
    20ee:	2011      	movs	r0, #17
    20f0:	f002 fb64 	bl	47bc <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    20f4:	2011      	movs	r0, #17
    20f6:	f002 fb5c 	bl	47b2 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    20fa:	2301      	movs	r3, #1
    20fc:	60a3      	str	r3, [r4, #8]
    20fe:	6023      	str	r3, [r4, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    2100:	4a12      	ldr	r2, [pc, #72]	; (214c <sys_clock_driver_init+0x84>)
    2102:	6013      	str	r3, [r2, #0]
	}

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		MAX_CYCLES : CYC_PER_TICK;

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    2104:	2400      	movs	r4, #0
    2106:	9401      	str	r4, [sp, #4]
    2108:	4b11      	ldr	r3, [pc, #68]	; (2150 <sys_clock_driver_init+0x88>)
    210a:	9300      	str	r3, [sp, #0]
    210c:	4a11      	ldr	r2, [pc, #68]	; (2154 <sys_clock_driver_init+0x8c>)
    210e:	2300      	movs	r3, #0
    2110:	4620      	mov	r0, r4
    2112:	f003 f89f 	bl	5254 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    2116:	4628      	mov	r0, r5
    2118:	f7ff fbfc 	bl	1914 <z_nrf_clock_control_lf_on>

	return 0;
}
    211c:	4620      	mov	r0, r4
    211e:	b003      	add	sp, #12
    2120:	bd30      	pop	{r4, r5, pc}
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    2122:	4a0d      	ldr	r2, [pc, #52]	; (2158 <sys_clock_driver_init+0x90>)
    2124:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    2128:	f04f 30ff 	mov.w	r0, #4294967295
    212c:	f04f 31ff 	mov.w	r1, #4294967295
    2130:	e9c2 0102 	strd	r0, r1, [r2, #8]
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    2134:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    2138:	409a      	lsls	r2, r3
    p_reg->INTENSET = mask;
    213a:	4902      	ldr	r1, [pc, #8]	; (2144 <sys_clock_driver_init+0x7c>)
    213c:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    2140:	3301      	adds	r3, #1
    2142:	e7c7      	b.n	20d4 <sys_clock_driver_init+0xc>
    2144:	40011000 	.word	0x40011000
    2148:	e000e100 	.word	0xe000e100
    214c:	2000030c 	.word	0x2000030c
    2150:	00001fa9 	.word	0x00001fa9
    2154:	007fffff 	.word	0x007fffff
    2158:	200000d0 	.word	0x200000d0

0000215c <process_channel>:
{
    215c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2160:	b082      	sub	sp, #8
    2162:	4604      	mov	r4, r0
	if (channel_processing_check_and_clear(chan)) {
    2164:	f7ff fec0 	bl	1ee8 <channel_processing_check_and_clear>
    2168:	b910      	cbnz	r0, 2170 <process_channel+0x14>
}
    216a:	b002      	add	sp, #8
    216c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		curr_time = z_nrf_rtc_timer_read();
    2170:	f7ff ff42 	bl	1ff8 <z_nrf_rtc_timer_read>
    2174:	4682      	mov	sl, r0
    2176:	460d      	mov	r5, r1
		mcu_critical_state = full_int_lock();
    2178:	f003 f85e 	bl	5238 <full_int_lock>
    217c:	4606      	mov	r6, r0
		expire_time = cc_data[chan].target_time;
    217e:	4b15      	ldr	r3, [pc, #84]	; (21d4 <process_channel+0x78>)
    2180:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    2184:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
    2188:	45c2      	cmp	sl, r8
    218a:	eb75 0509 	sbcs.w	r5, r5, r9
    218e:	d20b      	bcs.n	21a8 <process_channel+0x4c>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    2190:	2500      	movs	r5, #0
		full_int_unlock(mcu_critical_state);
    2192:	4630      	mov	r0, r6
    2194:	f003 f859 	bl	524a <full_int_unlock>
		if (handler) {
    2198:	2d00      	cmp	r5, #0
    219a:	d0e6      	beq.n	216a <process_channel+0xe>
			handler(chan, expire_time, user_context);
    219c:	9700      	str	r7, [sp, #0]
    219e:	4642      	mov	r2, r8
    21a0:	464b      	mov	r3, r9
    21a2:	4620      	mov	r0, r4
    21a4:	47a8      	blx	r5
}
    21a6:	e7e0      	b.n	216a <process_channel+0xe>
			handler = cc_data[chan].callback;
    21a8:	4a0a      	ldr	r2, [pc, #40]	; (21d4 <process_channel+0x78>)
    21aa:	0123      	lsls	r3, r4, #4
    21ac:	eb02 1104 	add.w	r1, r2, r4, lsl #4
    21b0:	58d5      	ldr	r5, [r2, r3]
			user_context = cc_data[chan].user_context;
    21b2:	684f      	ldr	r7, [r1, #4]
			cc_data[chan].callback = NULL;
    21b4:	2000      	movs	r0, #0
    21b6:	50d0      	str	r0, [r2, r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    21b8:	f04f 32ff 	mov.w	r2, #4294967295
    21bc:	f04f 33ff 	mov.w	r3, #4294967295
    21c0:	e9c1 2302 	strd	r2, r3, [r1, #8]
			event_disable(chan);
    21c4:	4620      	mov	r0, r4
    21c6:	f7ff fe23 	bl	1e10 <event_disable>
			event_clear(chan);
    21ca:	4620      	mov	r0, r4
    21cc:	f003 f825 	bl	521a <event_clear>
    21d0:	e7df      	b.n	2192 <process_channel+0x36>
    21d2:	bf00      	nop
    21d4:	200000d0 	.word	0x200000d0

000021d8 <rtc_nrf_isr>:
{
    21d8:	b510      	push	{r4, lr}
    return p_reg->INTENSET & mask;
    21da:	4b0e      	ldr	r3, [pc, #56]	; (2214 <rtc_nrf_isr+0x3c>)
    21dc:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    21e0:	f013 0f02 	tst.w	r3, #2
    21e4:	d00d      	beq.n	2202 <rtc_nrf_isr+0x2a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    21e6:	4b0b      	ldr	r3, [pc, #44]	; (2214 <rtc_nrf_isr+0x3c>)
    21e8:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    21ec:	b14b      	cbz	r3, 2202 <rtc_nrf_isr+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    21ee:	4b09      	ldr	r3, [pc, #36]	; (2214 <rtc_nrf_isr+0x3c>)
    21f0:	2200      	movs	r2, #0
    21f2:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    21f6:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		overflow_cnt++;
    21fa:	4a07      	ldr	r2, [pc, #28]	; (2218 <rtc_nrf_isr+0x40>)
    21fc:	6813      	ldr	r3, [r2, #0]
    21fe:	3301      	adds	r3, #1
    2200:	6013      	str	r3, [r2, #0]
{
    2202:	2400      	movs	r4, #0
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    2204:	2c00      	cmp	r4, #0
    2206:	dd00      	ble.n	220a <rtc_nrf_isr+0x32>
}
    2208:	bd10      	pop	{r4, pc}
		process_channel(chan);
    220a:	4620      	mov	r0, r4
    220c:	f7ff ffa6 	bl	215c <process_channel>
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    2210:	3401      	adds	r4, #1
    2212:	e7f7      	b.n	2204 <rtc_nrf_isr+0x2c>
    2214:	40011000 	.word	0x40011000
    2218:	20000310 	.word	0x20000310

0000221c <sys_clock_set_timeout>:
{
    221c:	b510      	push	{r4, lr}
    221e:	b082      	sub	sp, #8
	if (ticks == K_TICKS_FOREVER) {
    2220:	f1b0 3fff 	cmp.w	r0, #4294967295
    2224:	d006      	beq.n	2234 <sys_clock_set_timeout+0x18>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
    2226:	2801      	cmp	r0, #1
    2228:	dd09      	ble.n	223e <sys_clock_set_timeout+0x22>
    222a:	4b15      	ldr	r3, [pc, #84]	; (2280 <sys_clock_set_timeout+0x64>)
    222c:	4298      	cmp	r0, r3
    222e:	dc24      	bgt.n	227a <sys_clock_set_timeout+0x5e>
    2230:	4604      	mov	r4, r0
    2232:	e005      	b.n	2240 <sys_clock_set_timeout+0x24>
		sys_busy = false;
    2234:	4b13      	ldr	r3, [pc, #76]	; (2284 <sys_clock_set_timeout+0x68>)
    2236:	2200      	movs	r2, #0
    2238:	701a      	strb	r2, [r3, #0]
		cyc = MAX_TICKS * CYC_PER_TICK;
    223a:	4c13      	ldr	r4, [pc, #76]	; (2288 <sys_clock_set_timeout+0x6c>)
    223c:	e003      	b.n	2246 <sys_clock_set_timeout+0x2a>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
    223e:	2401      	movs	r4, #1
		sys_busy = true;
    2240:	4b10      	ldr	r3, [pc, #64]	; (2284 <sys_clock_set_timeout+0x68>)
    2242:	2201      	movs	r2, #1
    2244:	701a      	strb	r2, [r3, #0]
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    2246:	f7ff fed7 	bl	1ff8 <z_nrf_rtc_timer_read>
    224a:	4b10      	ldr	r3, [pc, #64]	; (228c <sys_clock_set_timeout+0x70>)
    224c:	681a      	ldr	r2, [r3, #0]
    224e:	685b      	ldr	r3, [r3, #4]
    2250:	1a80      	subs	r0, r0, r2
	if (unannounced >= COUNTER_HALF_SPAN) {
    2252:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    2256:	d300      	bcc.n	225a <sys_clock_set_timeout+0x3e>
		cyc = 0;
    2258:	2400      	movs	r4, #0
	cyc += unannounced;
    225a:	4404      	add	r4, r0
	if (cyc > MAX_CYCLES) {
    225c:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
    2260:	d300      	bcc.n	2264 <sys_clock_set_timeout+0x48>
		cyc = MAX_CYCLES;
    2262:	4c09      	ldr	r4, [pc, #36]	; (2288 <sys_clock_set_timeout+0x6c>)
	uint64_t target_time = cyc + last_count;
    2264:	2000      	movs	r0, #0
    2266:	1912      	adds	r2, r2, r4
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    2268:	9001      	str	r0, [sp, #4]
    226a:	4909      	ldr	r1, [pc, #36]	; (2290 <sys_clock_set_timeout+0x74>)
    226c:	9100      	str	r1, [sp, #0]
    226e:	f143 0300 	adc.w	r3, r3, #0
    2272:	f002 ffef 	bl	5254 <compare_set>
}
    2276:	b002      	add	sp, #8
    2278:	bd10      	pop	{r4, pc}
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
    227a:	4c03      	ldr	r4, [pc, #12]	; (2288 <sys_clock_set_timeout+0x6c>)
    227c:	e7e0      	b.n	2240 <sys_clock_set_timeout+0x24>
    227e:	bf00      	nop
    2280:	007ffffe 	.word	0x007ffffe
    2284:	20000815 	.word	0x20000815
    2288:	007fffff 	.word	0x007fffff
    228c:	200000e0 	.word	0x200000e0
    2290:	00001fa9 	.word	0x00001fa9

00002294 <sys_clock_elapsed>:
{
    2294:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    2296:	f7ff feaf 	bl	1ff8 <z_nrf_rtc_timer_read>
    229a:	4b02      	ldr	r3, [pc, #8]	; (22a4 <sys_clock_elapsed+0x10>)
    229c:	681b      	ldr	r3, [r3, #0]
}
    229e:	1ac0      	subs	r0, r0, r3
    22a0:	bd08      	pop	{r3, pc}
    22a2:	bf00      	nop
    22a4:	200000e0 	.word	0x200000e0

000022a8 <nrf_gpio_pin_write>:
    if (value == 0)
    22a8:	b969      	cbnz	r1, 22c6 <nrf_gpio_pin_write+0x1e>
    *p_pin = pin_number & 0x1F;
    22aa:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
    22ae:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    22b0:	2801      	cmp	r0, #1
    22b2:	d006      	beq.n	22c2 <nrf_gpio_pin_write+0x1a>
        case 0: return NRF_P0;
    22b4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    22b8:	2301      	movs	r3, #1
    22ba:	408b      	lsls	r3, r1
    p_reg->OUTCLR = clr_mask;
    22bc:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
    22c0:	4770      	bx	lr
        case 1: return NRF_P1;
    22c2:	4a08      	ldr	r2, [pc, #32]	; (22e4 <nrf_gpio_pin_write+0x3c>)
    22c4:	e7f8      	b.n	22b8 <nrf_gpio_pin_write+0x10>
    *p_pin = pin_number & 0x1F;
    22c6:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
    22ca:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    22cc:	2801      	cmp	r0, #1
    22ce:	d006      	beq.n	22de <nrf_gpio_pin_write+0x36>
        case 0: return NRF_P0;
    22d0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    22d4:	2301      	movs	r3, #1
    22d6:	408b      	lsls	r3, r1
    p_reg->OUTSET = set_mask;
    22d8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
}
    22dc:	4770      	bx	lr
        case 1: return NRF_P1;
    22de:	4a01      	ldr	r2, [pc, #4]	; (22e4 <nrf_gpio_pin_write+0x3c>)
    22e0:	e7f8      	b.n	22d4 <nrf_gpio_pin_write+0x2c>
    22e2:	bf00      	nop
    22e4:	50000300 	.word	0x50000300

000022e8 <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    22e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    22ec:	b083      	sub	sp, #12
    22ee:	4607      	mov	r7, r0
    22f0:	468a      	mov	sl, r1
    22f2:	4693      	mov	fp, r2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    22f4:	2500      	movs	r5, #0
    22f6:	e02c      	b.n	2352 <pinctrl_configure_pins+0x6a>
		uint32_t write = NO_WRITE;
		nrf_gpio_pin_dir_t dir;
		nrf_gpio_pin_input_t input;

		if (pin == NRF_PIN_DISCONNECTED) {
			pin = 0xFFFFFFFFU;
    22f8:	f04f 34ff 	mov.w	r4, #4294967295
    22fc:	e036      	b.n	236c <pinctrl_configure_pins+0x84>
		}

		switch (NRF_GET_FUN(pins[i])) {
#if defined(NRF_PSEL_UART)
		case NRF_FUN_UART_TX:
			NRF_PSEL_UART(reg, TXD) = pin;
    22fe:	f8cb 450c 	str.w	r4, [fp, #1292]	; 0x50c
			write = 1U;
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    2302:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    2304:	9601      	str	r6, [sp, #4]
			write = 1U;
    2306:	4631      	mov	r1, r6
		default:
			return -ENOTSUP;
		}

		/* configure GPIO properties */
		if (pin != NRF_PIN_DISCONNECTED) {
    2308:	2c7f      	cmp	r4, #127	; 0x7f
    230a:	d020      	beq.n	234e <pinctrl_configure_pins+0x66>
			if (write != NO_WRITE) {
    230c:	f1b1 3fff 	cmp.w	r1, #4294967295
    2310:	f040 80d8 	bne.w	24c4 <pinctrl_configure_pins+0x1dc>
				nrf_gpio_pin_write(pin, write);
			}

			/* force input and disconnected buffer for low power */
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
    2314:	f857 2009 	ldr.w	r2, [r7, r9]
    2318:	f412 5f00 	tst.w	r2, #8192	; 0x2000
    231c:	d002      	beq.n	2324 <pinctrl_configure_pins+0x3c>
				dir = NRF_GPIO_PIN_DIR_INPUT;
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    231e:	2601      	movs	r6, #1
				dir = NRF_GPIO_PIN_DIR_INPUT;
    2320:	2300      	movs	r3, #0
    2322:	9301      	str	r3, [sp, #4]
			}

			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
    2324:	f3c2 12c1 	ubfx	r2, r2, #7, #2
    *p_pin = pin_number & 0x1F;
    2328:	f004 011f 	and.w	r1, r4, #31
    return pin_number >> 5;
    232c:	0964      	lsrs	r4, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    232e:	2c01      	cmp	r4, #1
    2330:	f000 80cc 	beq.w	24cc <pinctrl_configure_pins+0x1e4>
        case 0: return NRF_P0;
    2334:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    2338:	9b01      	ldr	r3, [sp, #4]
    233a:	ea43 0346 	orr.w	r3, r3, r6, lsl #1
           ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos) |
    233e:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    2342:	ea43 2308 	orr.w	r3, r3, r8, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
    2346:	f501 72e0 	add.w	r2, r1, #448	; 0x1c0
    234a:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    234e:	3501      	adds	r5, #1
    2350:	b2ed      	uxtb	r5, r5
    2352:	4555      	cmp	r5, sl
    2354:	f080 80bc 	bcs.w	24d0 <pinctrl_configure_pins+0x1e8>
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    2358:	ea4f 0985 	mov.w	r9, r5, lsl #2
    235c:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
    2360:	f3c3 2843 	ubfx	r8, r3, #9, #4
		uint32_t pin = NRF_GET_PIN(pins[i]);
    2364:	f003 047f 	and.w	r4, r3, #127	; 0x7f
		if (pin == NRF_PIN_DISCONNECTED) {
    2368:	2c7f      	cmp	r4, #127	; 0x7f
    236a:	d0c5      	beq.n	22f8 <pinctrl_configure_pins+0x10>
		switch (NRF_GET_FUN(pins[i])) {
    236c:	0c1b      	lsrs	r3, r3, #16
    236e:	2b19      	cmp	r3, #25
    2370:	f200 80b0 	bhi.w	24d4 <pinctrl_configure_pins+0x1ec>
    2374:	a201      	add	r2, pc, #4	; (adr r2, 237c <pinctrl_configure_pins+0x94>)
    2376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    237a:	bf00      	nop
    237c:	000022ff 	.word	0x000022ff
    2380:	000023e5 	.word	0x000023e5
    2384:	000023f3 	.word	0x000023f3
    2388:	000023ff 	.word	0x000023ff
    238c:	0000240d 	.word	0x0000240d
    2390:	0000241b 	.word	0x0000241b
    2394:	00002427 	.word	0x00002427
    2398:	000024d5 	.word	0x000024d5
    239c:	000024d5 	.word	0x000024d5
    23a0:	000024d5 	.word	0x000024d5
    23a4:	000024d5 	.word	0x000024d5
    23a8:	00002435 	.word	0x00002435
    23ac:	00002449 	.word	0x00002449
    23b0:	000024d5 	.word	0x000024d5
    23b4:	000024d5 	.word	0x000024d5
    23b8:	000024d5 	.word	0x000024d5
    23bc:	000024d5 	.word	0x000024d5
    23c0:	000024d5 	.word	0x000024d5
    23c4:	000024d5 	.word	0x000024d5
    23c8:	000024d5 	.word	0x000024d5
    23cc:	000024d5 	.word	0x000024d5
    23d0:	000024d5 	.word	0x000024d5
    23d4:	0000245d 	.word	0x0000245d
    23d8:	0000246f 	.word	0x0000246f
    23dc:	00002481 	.word	0x00002481
    23e0:	00002493 	.word	0x00002493
			NRF_PSEL_UART(reg, RXD) = pin;
    23e4:	f8cb 4514 	str.w	r4, [fp, #1300]	; 0x514
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    23e8:	2600      	movs	r6, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
    23ea:	9601      	str	r6, [sp, #4]
		uint32_t write = NO_WRITE;
    23ec:	f04f 31ff 	mov.w	r1, #4294967295
			break;
    23f0:	e78a      	b.n	2308 <pinctrl_configure_pins+0x20>
			NRF_PSEL_UART(reg, RTS) = pin;
    23f2:	f8cb 4508 	str.w	r4, [fp, #1288]	; 0x508
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    23f6:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    23f8:	9601      	str	r6, [sp, #4]
			write = 1U;
    23fa:	4631      	mov	r1, r6
			break;
    23fc:	e784      	b.n	2308 <pinctrl_configure_pins+0x20>
			NRF_PSEL_UART(reg, CTS) = pin;
    23fe:	f8cb 4510 	str.w	r4, [fp, #1296]	; 0x510
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    2402:	2600      	movs	r6, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
    2404:	9601      	str	r6, [sp, #4]
		uint32_t write = NO_WRITE;
    2406:	f04f 31ff 	mov.w	r1, #4294967295
			break;
    240a:	e77d      	b.n	2308 <pinctrl_configure_pins+0x20>
			NRF_PSEL_SPIM(reg, SCK) = pin;
    240c:	f8cb 4508 	str.w	r4, [fp, #1288]	; 0x508
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    2410:	2600      	movs	r6, #0
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    2412:	2301      	movs	r3, #1
    2414:	9301      	str	r3, [sp, #4]
			write = 0U;
    2416:	4631      	mov	r1, r6
			break;
    2418:	e776      	b.n	2308 <pinctrl_configure_pins+0x20>
			NRF_PSEL_SPIM(reg, MOSI) = pin;
    241a:	f8cb 450c 	str.w	r4, [fp, #1292]	; 0x50c
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    241e:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    2420:	9601      	str	r6, [sp, #4]
			write = 0U;
    2422:	2100      	movs	r1, #0
			break;
    2424:	e770      	b.n	2308 <pinctrl_configure_pins+0x20>
			NRF_PSEL_SPIM(reg, MISO) = pin;
    2426:	f8cb 4510 	str.w	r4, [fp, #1296]	; 0x510
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    242a:	2600      	movs	r6, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
    242c:	9601      	str	r6, [sp, #4]
		uint32_t write = NO_WRITE;
    242e:	f04f 31ff 	mov.w	r1, #4294967295
			break;
    2432:	e769      	b.n	2308 <pinctrl_configure_pins+0x20>
			NRF_PSEL_TWIM(reg, SCL) = pin;
    2434:	f8cb 4508 	str.w	r4, [fp, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
    2438:	f1b8 0f00 	cmp.w	r8, #0
    243c:	d032      	beq.n	24a4 <pinctrl_configure_pins+0x1bc>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    243e:	2600      	movs	r6, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
    2440:	9601      	str	r6, [sp, #4]
		uint32_t write = NO_WRITE;
    2442:	f04f 31ff 	mov.w	r1, #4294967295
    2446:	e75f      	b.n	2308 <pinctrl_configure_pins+0x20>
			NRF_PSEL_TWIM(reg, SDA) = pin;
    2448:	f8cb 450c 	str.w	r4, [fp, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
    244c:	f1b8 0f00 	cmp.w	r8, #0
    2450:	d030      	beq.n	24b4 <pinctrl_configure_pins+0x1cc>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    2452:	2600      	movs	r6, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
    2454:	9601      	str	r6, [sp, #4]
		uint32_t write = NO_WRITE;
    2456:	f04f 31ff 	mov.w	r1, #4294967295
    245a:	e755      	b.n	2308 <pinctrl_configure_pins+0x20>
			NRF_PSEL_PWM(reg, OUT[0]) = pin;
    245c:	f8cb 4560 	str.w	r4, [fp, #1376]	; 0x560
			write = NRF_GET_INVERT(pins[i]);
    2460:	f857 1009 	ldr.w	r1, [r7, r9]
    2464:	f3c1 3180 	ubfx	r1, r1, #14, #1
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    2468:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    246a:	9601      	str	r6, [sp, #4]
			break;
    246c:	e74c      	b.n	2308 <pinctrl_configure_pins+0x20>
			NRF_PSEL_PWM(reg, OUT[1]) = pin;
    246e:	f8cb 4564 	str.w	r4, [fp, #1380]	; 0x564
			write = NRF_GET_INVERT(pins[i]);
    2472:	f857 1009 	ldr.w	r1, [r7, r9]
    2476:	f3c1 3180 	ubfx	r1, r1, #14, #1
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    247a:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    247c:	9601      	str	r6, [sp, #4]
			break;
    247e:	e743      	b.n	2308 <pinctrl_configure_pins+0x20>
			NRF_PSEL_PWM(reg, OUT[2]) = pin;
    2480:	f8cb 4568 	str.w	r4, [fp, #1384]	; 0x568
			write = NRF_GET_INVERT(pins[i]);
    2484:	f857 1009 	ldr.w	r1, [r7, r9]
    2488:	f3c1 3180 	ubfx	r1, r1, #14, #1
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    248c:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    248e:	9601      	str	r6, [sp, #4]
			break;
    2490:	e73a      	b.n	2308 <pinctrl_configure_pins+0x20>
			NRF_PSEL_PWM(reg, OUT[3]) = pin;
    2492:	f8cb 456c 	str.w	r4, [fp, #1388]	; 0x56c
			write = NRF_GET_INVERT(pins[i]);
    2496:	f857 1009 	ldr.w	r1, [r7, r9]
    249a:	f3c1 3180 	ubfx	r1, r1, #14, #1
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    249e:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    24a0:	9601      	str	r6, [sp, #4]
			break;
    24a2:	e731      	b.n	2308 <pinctrl_configure_pins+0x20>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    24a4:	4646      	mov	r6, r8
			dir = NRF_GPIO_PIN_DIR_INPUT;
    24a6:	f8cd 8004 	str.w	r8, [sp, #4]
		uint32_t write = NO_WRITE;
    24aa:	f04f 31ff 	mov.w	r1, #4294967295
				drive = NRF_DRIVE_S0D1;
    24ae:	f04f 0806 	mov.w	r8, #6
    24b2:	e729      	b.n	2308 <pinctrl_configure_pins+0x20>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    24b4:	4646      	mov	r6, r8
			dir = NRF_GPIO_PIN_DIR_INPUT;
    24b6:	f8cd 8004 	str.w	r8, [sp, #4]
		uint32_t write = NO_WRITE;
    24ba:	f04f 31ff 	mov.w	r1, #4294967295
				drive = NRF_DRIVE_S0D1;
    24be:	f04f 0806 	mov.w	r8, #6
    24c2:	e721      	b.n	2308 <pinctrl_configure_pins+0x20>
				nrf_gpio_pin_write(pin, write);
    24c4:	4620      	mov	r0, r4
    24c6:	f7ff feef 	bl	22a8 <nrf_gpio_pin_write>
    24ca:	e723      	b.n	2314 <pinctrl_configure_pins+0x2c>
        case 1: return NRF_P1;
    24cc:	4804      	ldr	r0, [pc, #16]	; (24e0 <pinctrl_configure_pins+0x1f8>)
    24ce:	e733      	b.n	2338 <pinctrl_configure_pins+0x50>
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
    24d0:	2000      	movs	r0, #0
    24d2:	e001      	b.n	24d8 <pinctrl_configure_pins+0x1f0>
		switch (NRF_GET_FUN(pins[i])) {
    24d4:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    24d8:	b003      	add	sp, #12
    24da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    24de:	bf00      	nop
    24e0:	50000300 	.word	0x50000300

000024e4 <__NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
    24e4:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    24e8:	4905      	ldr	r1, [pc, #20]	; (2500 <__NVIC_SystemReset+0x1c>)
    24ea:	68ca      	ldr	r2, [r1, #12]
    24ec:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    24f0:	4b04      	ldr	r3, [pc, #16]	; (2504 <__NVIC_SystemReset+0x20>)
    24f2:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    24f4:	60cb      	str	r3, [r1, #12]
    24f6:	f3bf 8f4f 	dsb	sy
    __NOP();
    24fa:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    24fc:	e7fd      	b.n	24fa <__NVIC_SystemReset+0x16>
    24fe:	bf00      	nop
    2500:	e000ed00 	.word	0xe000ed00
    2504:	05fa0004 	.word	0x05fa0004

00002508 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    2508:	4b02      	ldr	r3, [pc, #8]	; (2514 <nvmc_wait+0xc>)
    250a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    250e:	2b00      	cmp	r3, #0
    2510:	d0fa      	beq.n	2508 <nvmc_wait>
}
    2512:	4770      	bx	lr
    2514:	4001e000 	.word	0x4001e000

00002518 <nvmc_config>:

/*  Configure the NVMC to "mode".
    Mode must be an enumerator of field NVMC_CONFIG_WEN */
void nvmc_config(uint32_t mode)
{
    2518:	b508      	push	{r3, lr}
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    251a:	4b03      	ldr	r3, [pc, #12]	; (2528 <nvmc_config+0x10>)
    251c:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    nvmc_wait();
    2520:	f7ff fff2 	bl	2508 <nvmc_wait>
}
    2524:	bd08      	pop	{r3, pc}
    2526:	bf00      	nop
    2528:	4001e000 	.word	0x4001e000

0000252c <SystemCoreClockUpdate>:

void SystemCoreClockUpdate(void)
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    252c:	4b01      	ldr	r3, [pc, #4]	; (2534 <SystemCoreClockUpdate+0x8>)
    252e:	4a02      	ldr	r2, [pc, #8]	; (2538 <SystemCoreClockUpdate+0xc>)
    2530:	601a      	str	r2, [r3, #0]
}
    2532:	4770      	bx	lr
    2534:	20000044 	.word	0x20000044
    2538:	03d09000 	.word	0x03d09000

0000253c <SystemInit>:

void SystemInit(void)
{
    253c:	b538      	push	{r3, r4, r5, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    253e:	f002 febf 	bl	52c0 <nrf52_errata_36>
    2542:	b140      	cbz	r0, 2556 <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
    2544:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2548:	2200      	movs	r2, #0
    254a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    254e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    2552:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    2556:	f002 febd 	bl	52d4 <nrf52_errata_66>
    255a:	2800      	cmp	r0, #0
    255c:	d046      	beq.n	25ec <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    255e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    2562:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    2566:	4b3b      	ldr	r3, [pc, #236]	; (2654 <SystemInit+0x118>)
    2568:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    256c:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    2570:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    2574:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    2578:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    257c:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    2580:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    2584:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    2588:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    258c:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    2590:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    2594:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    2598:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    259c:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    25a0:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    25a4:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    25a8:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    25ac:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    25b0:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    25b4:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    25b8:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    25bc:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    25c0:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    25c4:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    25c8:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    25cc:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    25d0:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    25d4:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    25d8:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    25dc:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    25e0:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    25e4:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    25e8:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    25ec:	f002 fe7c 	bl	52e8 <nrf52_errata_136>
    25f0:	b160      	cbz	r0, 260c <SystemInit+0xd0>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    25f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    25f6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    25fa:	f013 0f01 	tst.w	r3, #1
    25fe:	d005      	beq.n	260c <SystemInit+0xd0>
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    2600:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2604:	f06f 0201 	mvn.w	r2, #1
    2608:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
        __DSB();
        __ISB();
    #endif

    nrf52_handle_approtect();
    260c:	f002 fe85 	bl	531a <nrf52_handle_approtect>

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    2610:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    2614:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    2618:	2b00      	cmp	r3, #0
    261a:	db08      	blt.n	262e <SystemInit+0xf2>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    261c:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    2620:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    2624:	2b00      	cmp	r3, #0
    2626:	db02      	blt.n	262e <SystemInit+0xf2>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
    2628:	f7ff ff80 	bl	252c <SystemCoreClockUpdate>
}
    262c:	bd38      	pop	{r3, r4, r5, pc}
            nvmc_config(NVMC_CONFIG_WEN_Wen);
    262e:	2001      	movs	r0, #1
    2630:	f7ff ff72 	bl	2518 <nvmc_config>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    2634:	f04f 2410 	mov.w	r4, #268439552	; 0x10001000
    2638:	2512      	movs	r5, #18
    263a:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
            nvmc_wait();
    263e:	f7ff ff63 	bl	2508 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    2642:	f8c4 5204 	str.w	r5, [r4, #516]	; 0x204
            nvmc_wait();
    2646:	f7ff ff5f 	bl	2508 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
    264a:	2000      	movs	r0, #0
    264c:	f7ff ff64 	bl	2518 <nvmc_config>
            NVIC_SystemReset();
    2650:	f7ff ff48 	bl	24e4 <__NVIC_SystemReset>
    2654:	4000c000 	.word	0x4000c000

00002658 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    2658:	b510      	push	{r4, lr}
    int8_t idx;
    uint32_t new_mask, prev_mask;

    do {
        prev_mask = *p_mask;
    265a:	6804      	ldr	r4, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    265c:	fab4 f384 	clz	r3, r4
    2660:	f1c3 031f 	rsb	r3, r3, #31
    2664:	fa5f fc83 	uxtb.w	ip, r3
        if (idx < 0) {
    2668:	2b00      	cmp	r3, #0
    266a:	db16      	blt.n	269a <nrfx_flag32_alloc+0x42>
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    266c:	2201      	movs	r2, #1
    266e:	fa02 f303 	lsl.w	r3, r2, r3
    2672:	ea24 0303 	bic.w	r3, r4, r3
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    2676:	f3bf 8f5b 	dmb	ish
    267a:	e850 2f00 	ldrex	r2, [r0]
    267e:	42a2      	cmp	r2, r4
    2680:	d104      	bne.n	268c <nrfx_flag32_alloc+0x34>
    2682:	e840 3e00 	strex	lr, r3, [r0]
    2686:	f1be 0f00 	cmp.w	lr, #0
    268a:	d1f6      	bne.n	267a <nrfx_flag32_alloc+0x22>
    268c:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    2690:	d1e3      	bne.n	265a <nrfx_flag32_alloc+0x2>

    *p_flag = idx;
    2692:	f881 c000 	strb.w	ip, [r1]

    return NRFX_SUCCESS;
    2696:	4802      	ldr	r0, [pc, #8]	; (26a0 <nrfx_flag32_alloc+0x48>)
}
    2698:	bd10      	pop	{r4, pc}
            return NRFX_ERROR_NO_MEM;
    269a:	4802      	ldr	r0, [pc, #8]	; (26a4 <nrfx_flag32_alloc+0x4c>)
    269c:	e7fc      	b.n	2698 <nrfx_flag32_alloc+0x40>
    269e:	bf00      	nop
    26a0:	0bad0000 	.word	0x0bad0000
    26a4:	0bad0002 	.word	0x0bad0002

000026a8 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    26a8:	6803      	ldr	r3, [r0, #0]
    26aa:	40cb      	lsrs	r3, r1
    26ac:	f013 0f01 	tst.w	r3, #1
    26b0:	d115      	bne.n	26de <nrfx_flag32_free+0x36>
{
    26b2:	b500      	push	{lr}
    {
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
    26b4:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
    26b6:	2301      	movs	r3, #1
    26b8:	408b      	lsls	r3, r1
    26ba:	4313      	orrs	r3, r2
    26bc:	f3bf 8f5b 	dmb	ish
    26c0:	e850 cf00 	ldrex	ip, [r0]
    26c4:	4594      	cmp	ip, r2
    26c6:	d104      	bne.n	26d2 <nrfx_flag32_free+0x2a>
    26c8:	e840 3e00 	strex	lr, r3, [r0]
    26cc:	f1be 0f00 	cmp.w	lr, #0
    26d0:	d1f6      	bne.n	26c0 <nrfx_flag32_free+0x18>
    26d2:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    26d6:	d1ed      	bne.n	26b4 <nrfx_flag32_free+0xc>

    return NRFX_SUCCESS;
    26d8:	4802      	ldr	r0, [pc, #8]	; (26e4 <nrfx_flag32_free+0x3c>)
}
    26da:	f85d fb04 	ldr.w	pc, [sp], #4
        return NRFX_ERROR_INVALID_PARAM;
    26de:	4802      	ldr	r0, [pc, #8]	; (26e8 <nrfx_flag32_free+0x40>)
}
    26e0:	4770      	bx	lr
    26e2:	bf00      	nop
    26e4:	0bad0000 	.word	0x0bad0000
    26e8:	0bad0004 	.word	0x0bad0004

000026ec <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    26ec:	4b05      	ldr	r3, [pc, #20]	; (2704 <nrfx_clock_init+0x18>)
    26ee:	791b      	ldrb	r3, [r3, #4]
    26f0:	b92b      	cbnz	r3, 26fe <nrfx_clock_init+0x12>
    else
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
    26f2:	4b04      	ldr	r3, [pc, #16]	; (2704 <nrfx_clock_init+0x18>)
    26f4:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    26f6:	2201      	movs	r2, #1
    26f8:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    26fa:	4803      	ldr	r0, [pc, #12]	; (2708 <nrfx_clock_init+0x1c>)
    26fc:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    26fe:	4803      	ldr	r0, [pc, #12]	; (270c <nrfx_clock_init+0x20>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    2700:	4770      	bx	lr
    2702:	bf00      	nop
    2704:	20000314 	.word	0x20000314
    2708:	0bad0000 	.word	0x0bad0000
    270c:	0bad000c 	.word	0x0bad000c

00002710 <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    2710:	b508      	push	{r3, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    2712:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2716:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    271a:	b163      	cbz	r3, 2736 <nrfx_power_clock_irq_handler+0x26>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    271c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2720:	2000      	movs	r0, #0
    2722:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
    2726:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    272a:	2201      	movs	r2, #1
    272c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    2730:	4b13      	ldr	r3, [pc, #76]	; (2780 <nrfx_power_clock_irq_handler+0x70>)
    2732:	681b      	ldr	r3, [r3, #0]
    2734:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    2736:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    273a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    273e:	b19b      	cbz	r3, 2768 <nrfx_power_clock_irq_handler+0x58>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2740:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2744:	2200      	movs	r2, #0
    2746:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    274a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    274e:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    2752:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    2756:	f012 0f03 	tst.w	r2, #3
    275a:	d106      	bne.n	276a <nrfx_power_clock_irq_handler+0x5a>
    p_reg->LFCLKSRC = (uint32_t)(source);
    275c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2760:	2201      	movs	r2, #1
    2762:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2766:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    2768:	bd08      	pop	{r3, pc}
    p_reg->INTENCLR = mask;
    276a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    276e:	2202      	movs	r2, #2
    2770:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    2774:	4b02      	ldr	r3, [pc, #8]	; (2780 <nrfx_power_clock_irq_handler+0x70>)
    2776:	681b      	ldr	r3, [r3, #0]
    2778:	2001      	movs	r0, #1
    277a:	4798      	blx	r3
}
    277c:	e7f4      	b.n	2768 <nrfx_power_clock_irq_handler+0x58>
    277e:	bf00      	nop
    2780:	20000314 	.word	0x20000314

00002784 <nrf_gpio_reconfigure>:
{
    2784:	b5f0      	push	{r4, r5, r6, r7, lr}
    2786:	461c      	mov	r4, r3
    2788:	9f05      	ldr	r7, [sp, #20]
    278a:	9e06      	ldr	r6, [sp, #24]
    *p_pin = pin_number & 0x1F;
    278c:	f000 0c1f 	and.w	ip, r0, #31
    return pin_number >> 5;
    2790:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    2792:	2801      	cmp	r0, #1
    2794:	d035      	beq.n	2802 <nrf_gpio_reconfigure+0x7e>
        case 0: return NRF_P0;
    2796:	f04f 45a0 	mov.w	r5, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
    279a:	f50c 73e0 	add.w	r3, ip, #448	; 0x1c0
    279e:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    27a2:	b381      	cbz	r1, 2806 <nrf_gpio_reconfigure+0x82>
    27a4:	2001      	movs	r0, #1
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    27a6:	b382      	cbz	r2, 280a <nrf_gpio_reconfigure+0x86>
    27a8:	f04f 0e02 	mov.w	lr, #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    27ac:	ea40 000e 	orr.w	r0, r0, lr
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    27b0:	b374      	cbz	r4, 2810 <nrf_gpio_reconfigure+0x8c>
    27b2:	f04f 0e0c 	mov.w	lr, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    27b6:	ea40 000e 	orr.w	r0, r0, lr
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    27ba:	b367      	cbz	r7, 2816 <nrf_gpio_reconfigure+0x92>
    27bc:	f44f 6ee0 	mov.w	lr, #1792	; 0x700
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    27c0:	ea40 000e 	orr.w	r0, r0, lr
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    27c4:	b356      	cbz	r6, 281c <nrf_gpio_reconfigure+0x98>
    27c6:	f44f 3e40 	mov.w	lr, #196608	; 0x30000
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    27ca:	ea40 000e 	orr.w	r0, r0, lr
    cnf &= ~to_update;
    27ce:	ea23 0000 	bic.w	r0, r3, r0
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    27d2:	b331      	cbz	r1, 2822 <nrf_gpio_reconfigure+0x9e>
    27d4:	780b      	ldrb	r3, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    27d6:	b332      	cbz	r2, 2826 <nrf_gpio_reconfigure+0xa2>
    27d8:	7812      	ldrb	r2, [r2, #0]
    27da:	0052      	lsls	r2, r2, #1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    27dc:	4313      	orrs	r3, r2
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    27de:	b324      	cbz	r4, 282a <nrf_gpio_reconfigure+0xa6>
    27e0:	7822      	ldrb	r2, [r4, #0]
    27e2:	0092      	lsls	r2, r2, #2
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    27e4:	4313      	orrs	r3, r2
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    27e6:	b317      	cbz	r7, 282e <nrf_gpio_reconfigure+0xaa>
    27e8:	783a      	ldrb	r2, [r7, #0]
    27ea:	0212      	lsls	r2, r2, #8
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    27ec:	4313      	orrs	r3, r2
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
    27ee:	b306      	cbz	r6, 2832 <nrf_gpio_reconfigure+0xae>
    27f0:	7832      	ldrb	r2, [r6, #0]
    27f2:	0412      	lsls	r2, r2, #16
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    27f4:	4313      	orrs	r3, r2
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    27f6:	4303      	orrs	r3, r0
    reg->PIN_CNF[pin_number] = cnf;
    27f8:	f50c 7ce0 	add.w	ip, ip, #448	; 0x1c0
    27fc:	f845 302c 	str.w	r3, [r5, ip, lsl #2]
}
    2800:	bdf0      	pop	{r4, r5, r6, r7, pc}
        case 1: return NRF_P1;
    2802:	4d0d      	ldr	r5, [pc, #52]	; (2838 <nrf_gpio_reconfigure+0xb4>)
    2804:	e7c9      	b.n	279a <nrf_gpio_reconfigure+0x16>
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    2806:	2000      	movs	r0, #0
    2808:	e7cd      	b.n	27a6 <nrf_gpio_reconfigure+0x22>
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    280a:	f04f 0e00 	mov.w	lr, #0
    280e:	e7cd      	b.n	27ac <nrf_gpio_reconfigure+0x28>
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    2810:	f04f 0e00 	mov.w	lr, #0
    2814:	e7cf      	b.n	27b6 <nrf_gpio_reconfigure+0x32>
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    2816:	f04f 0e00 	mov.w	lr, #0
    281a:	e7d1      	b.n	27c0 <nrf_gpio_reconfigure+0x3c>
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    281c:	f04f 0e00 	mov.w	lr, #0
    2820:	e7d3      	b.n	27ca <nrf_gpio_reconfigure+0x46>
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    2822:	2300      	movs	r3, #0
    2824:	e7d7      	b.n	27d6 <nrf_gpio_reconfigure+0x52>
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    2826:	2200      	movs	r2, #0
    2828:	e7d8      	b.n	27dc <nrf_gpio_reconfigure+0x58>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    282a:	2200      	movs	r2, #0
    282c:	e7da      	b.n	27e4 <nrf_gpio_reconfigure+0x60>
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    282e:	2200      	movs	r2, #0
    2830:	e7dc      	b.n	27ec <nrf_gpio_reconfigure+0x68>
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
    2832:	2200      	movs	r2, #0
    2834:	e7de      	b.n	27f4 <nrf_gpio_reconfigure+0x70>
    2836:	bf00      	nop
    2838:	50000300 	.word	0x50000300

0000283c <nrf_gpio_latches_read_and_clear>:
{
    283c:	b500      	push	{lr}
    283e:	b083      	sub	sp, #12
    2840:	4684      	mov	ip, r0
    2842:	468e      	mov	lr, r1
    NRF_GPIO_Type * gpio_regs[GPIO_COUNT] = GPIO_REG_LIST;
    2844:	4b0d      	ldr	r3, [pc, #52]	; (287c <nrf_gpio_latches_read_and_clear+0x40>)
    2846:	e893 0003 	ldmia.w	r3, {r0, r1}
    284a:	ab02      	add	r3, sp, #8
    284c:	e903 0003 	stmdb	r3, {r0, r1}
    for (i = start_port; i < (start_port + length); i++)
    2850:	4663      	mov	r3, ip
    2852:	e00b      	b.n	286c <nrf_gpio_latches_read_and_clear+0x30>
        *p_masks = gpio_regs[i]->LATCH;
    2854:	a902      	add	r1, sp, #8
    2856:	eb01 0183 	add.w	r1, r1, r3, lsl #2
    285a:	f851 1c08 	ldr.w	r1, [r1, #-8]
    285e:	f8d1 0520 	ldr.w	r0, [r1, #1312]	; 0x520
    2862:	f842 0b04 	str.w	r0, [r2], #4
        gpio_regs[i]->LATCH = *p_masks;
    2866:	f8c1 0520 	str.w	r0, [r1, #1312]	; 0x520
    for (i = start_port; i < (start_port + length); i++)
    286a:	3301      	adds	r3, #1
    286c:	eb0c 000e 	add.w	r0, ip, lr
    2870:	4298      	cmp	r0, r3
    2872:	d8ef      	bhi.n	2854 <nrf_gpio_latches_read_and_clear+0x18>
}
    2874:	b003      	add	sp, #12
    2876:	f85d fb04 	ldr.w	pc, [sp], #4
    287a:	bf00      	nop
    287c:	00005cd0 	.word	0x00005cd0

00002880 <pin_in_use>:
 *
 * @return True if pin is in use.
 */
static bool pin_in_use(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    2880:	3008      	adds	r0, #8
    2882:	4b03      	ldr	r3, [pc, #12]	; (2890 <pin_in_use+0x10>)
    2884:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    2888:	f000 0001 	and.w	r0, r0, #1
    288c:	4770      	bx	lr
    288e:	bf00      	nop
    2890:	20000048 	.word	0x20000048

00002894 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    2894:	3008      	adds	r0, #8
    2896:	4b03      	ldr	r3, [pc, #12]	; (28a4 <pin_in_use_by_te+0x10>)
    2898:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    289c:	f3c0 1040 	ubfx	r0, r0, #5, #1
    28a0:	4770      	bx	lr
    28a2:	bf00      	nop
    28a4:	20000048 	.word	0x20000048

000028a8 <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
    28a8:	3008      	adds	r0, #8
    28aa:	4b04      	ldr	r3, [pc, #16]	; (28bc <pin_has_trigger+0x14>)
    28ac:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    28b0:	f010 001c 	ands.w	r0, r0, #28
    28b4:	bf18      	it	ne
    28b6:	2001      	movne	r0, #1
    28b8:	4770      	bx	lr
    28ba:	bf00      	nop
    28bc:	20000048 	.word	0x20000048

000028c0 <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    28c0:	3008      	adds	r0, #8
    28c2:	4b03      	ldr	r3, [pc, #12]	; (28d0 <pin_is_output+0x10>)
    28c4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    28c8:	f3c0 0040 	ubfx	r0, r0, #1, #1
    28cc:	4770      	bx	lr
    28ce:	bf00      	nop
    28d0:	20000048 	.word	0x20000048

000028d4 <pin_te_get>:
}

/* Returns gpiote TE channel associated with the pin */
static uint8_t pin_te_get(nrfx_gpiote_pin_t pin)
{
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    28d4:	3008      	adds	r0, #8
    28d6:	4b02      	ldr	r3, [pc, #8]	; (28e0 <pin_te_get+0xc>)
    28d8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    28dc:	0b40      	lsrs	r0, r0, #13
    28de:	4770      	bx	lr
    28e0:	20000048 	.word	0x20000048

000028e4 <handler_in_use>:
}

static bool handler_in_use(int32_t handler_id)
{

    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    28e4:	2200      	movs	r2, #0
    28e6:	e004      	b.n	28f2 <handler_in_use+0xe>
    {
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    28e8:	f04f 33ff 	mov.w	r3, #4294967295
    28ec:	4283      	cmp	r3, r0
    28ee:	d00f      	beq.n	2910 <handler_in_use+0x2c>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    28f0:	3201      	adds	r2, #1
    28f2:	2a29      	cmp	r2, #41	; 0x29
    28f4:	d80a      	bhi.n	290c <handler_in_use+0x28>
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    28f6:	f102 0308 	add.w	r3, r2, #8
    28fa:	4906      	ldr	r1, [pc, #24]	; (2914 <handler_in_use+0x30>)
    28fc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    2900:	f413 7f80 	tst.w	r3, #256	; 0x100
    2904:	d0f0      	beq.n	28e8 <handler_in_use+0x4>
    2906:	f3c3 2343 	ubfx	r3, r3, #9, #4
    290a:	e7ef      	b.n	28ec <handler_in_use+0x8>
        {
            return true;
        }
    }

    return false;
    290c:	2000      	movs	r0, #0
    290e:	4770      	bx	lr
            return true;
    2910:	2001      	movs	r0, #1
}
    2912:	4770      	bx	lr
    2914:	20000048 	.word	0x20000048

00002918 <find_handler>:
    return NRFX_SUCCESS;
}

static int32_t find_handler(nrfx_gpiote_interrupt_handler_t handler, void * p_context)
{
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
    2918:	2300      	movs	r3, #0
    291a:	b113      	cbz	r3, 2922 <find_handler+0xa>
        {
            return i;
        }
    }

    return -1;
    291c:	f04f 30ff 	mov.w	r0, #4294967295
}
    2920:	4770      	bx	lr
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    2922:	4a07      	ldr	r2, [pc, #28]	; (2940 <find_handler+0x28>)
    2924:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
    2928:	4282      	cmp	r2, r0
    292a:	d001      	beq.n	2930 <find_handler+0x18>
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
    292c:	3301      	adds	r3, #1
    292e:	e7f4      	b.n	291a <find_handler+0x2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    2930:	4a03      	ldr	r2, [pc, #12]	; (2940 <find_handler+0x28>)
    2932:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    2936:	6852      	ldr	r2, [r2, #4]
    2938:	428a      	cmp	r2, r1
    293a:	d1f7      	bne.n	292c <find_handler+0x14>
            return i;
    293c:	4618      	mov	r0, r3
    293e:	4770      	bx	lr
    2940:	20000048 	.word	0x20000048

00002944 <get_initial_sense>:
    return NRFX_SUCCESS;
}

static inline nrf_gpio_pin_sense_t get_initial_sense(nrfx_gpiote_pin_t pin)
{
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    2944:	f100 0208 	add.w	r2, r0, #8
    2948:	4b0f      	ldr	r3, [pc, #60]	; (2988 <get_initial_sense+0x44>)
    294a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    294e:	f3c3 0382 	ubfx	r3, r3, #2, #3
    nrf_gpio_pin_sense_t sense;

    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    2952:	2b04      	cmp	r3, #4
    2954:	d012      	beq.n	297c <get_initial_sense+0x38>
    {
        sense = NRF_GPIO_PIN_SENSE_LOW;
    }
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    2956:	2b05      	cmp	r3, #5
    2958:	d012      	beq.n	2980 <get_initial_sense+0x3c>
    *p_pin = pin_number & 0x1F;
    295a:	f000 021f 	and.w	r2, r0, #31
    return pin_number >> 5;
    295e:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    2960:	2801      	cmp	r0, #1
    2962:	d009      	beq.n	2978 <get_initial_sense+0x34>
        case 0: return NRF_P0;
    2964:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    return p_reg->IN;
    2968:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    296c:	40d3      	lsrs	r3, r2
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    }
    else
    {
        /* If edge detection start with sensing opposite state. */
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    296e:	f013 0f01 	tst.w	r3, #1
    2972:	d007      	beq.n	2984 <get_initial_sense+0x40>
    2974:	2003      	movs	r0, #3
    2976:	4770      	bx	lr
        case 1: return NRF_P1;
    2978:	4b04      	ldr	r3, [pc, #16]	; (298c <get_initial_sense+0x48>)
    297a:	e7f5      	b.n	2968 <get_initial_sense+0x24>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    297c:	2003      	movs	r0, #3
    297e:	4770      	bx	lr
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    2980:	2002      	movs	r0, #2
    2982:	4770      	bx	lr
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    2984:	2002      	movs	r0, #2
    }

    return sense;
}
    2986:	4770      	bx	lr
    2988:	20000048 	.word	0x20000048
    298c:	50000300 	.word	0x50000300

00002990 <channel_handler_get>:
}

/* Return handler associated with given pin or null. */
static nrfx_gpiote_handler_config_t const * channel_handler_get(nrfx_gpiote_pin_t pin)
{
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    2990:	3008      	adds	r0, #8
    2992:	4b06      	ldr	r3, [pc, #24]	; (29ac <channel_handler_get+0x1c>)
    2994:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
    2998:	f410 7f80 	tst.w	r0, #256	; 0x100
    299c:	d004      	beq.n	29a8 <channel_handler_get+0x18>
    299e:	f3c0 2043 	ubfx	r0, r0, #9, #4
    if (handler_id == PIN_FLAG_NO_HANDLER)
    {
        return NULL;
    }

    return &m_cb.handlers[handler_id];
    29a2:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    29a6:	4770      	bx	lr
        return NULL;
    29a8:	2000      	movs	r0, #0
}
    29aa:	4770      	bx	lr
    29ac:	20000048 	.word	0x20000048

000029b0 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    29b0:	b570      	push	{r4, r5, r6, lr}
    29b2:	4604      	mov	r4, r0
    29b4:	460d      	mov	r5, r1
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);
    29b6:	f7ff ffeb 	bl	2990 <channel_handler_get>

    if (handler)
    29ba:	b120      	cbz	r0, 29c6 <call_handler+0x16>
    {
        handler->handler(pin, trigger, handler->p_context);
    29bc:	6806      	ldr	r6, [r0, #0]
    29be:	6842      	ldr	r2, [r0, #4]
    29c0:	4629      	mov	r1, r5
    29c2:	4620      	mov	r0, r4
    29c4:	47b0      	blx	r6
    }
    if (m_cb.global_handler.handler)
    29c6:	4b04      	ldr	r3, [pc, #16]	; (29d8 <call_handler+0x28>)
    29c8:	689b      	ldr	r3, [r3, #8]
    29ca:	b123      	cbz	r3, 29d6 <call_handler+0x26>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    29cc:	4a02      	ldr	r2, [pc, #8]	; (29d8 <call_handler+0x28>)
    29ce:	68d2      	ldr	r2, [r2, #12]
    29d0:	4629      	mov	r1, r5
    29d2:	4620      	mov	r0, r4
    29d4:	4798      	blx	r3
    }
}
    29d6:	bd70      	pop	{r4, r5, r6, pc}
    29d8:	20000048 	.word	0x20000048

000029dc <next_sense_cond_call_handler>:

static void next_sense_cond_call_handler(nrfx_gpiote_pin_t     pin,
                                         nrfx_gpiote_trigger_t trigger,
                                         nrf_gpio_pin_sense_t  sense)
{
    29dc:	b570      	push	{r4, r5, r6, lr}
    29de:	4606      	mov	r6, r0
    29e0:	460c      	mov	r4, r1
    29e2:	4615      	mov	r5, r2
    if (is_level(trigger))
    29e4:	4608      	mov	r0, r1
    29e6:	f002 fdee 	bl	55c6 <is_level>
    29ea:	b960      	cbnz	r0, 2a06 <next_sense_cond_call_handler+0x2a>
    {
        /* Reconfigure sense to the opposite level, so the internal PINx.DETECT signal
         * can be deasserted. Therefore PORT event can be generated again,
         * unless some other PINx.DETECT signal is still active. */
        nrf_gpio_pin_sense_t next_sense = (sense == NRF_GPIO_PIN_SENSE_HIGH) ?
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    29ec:	2d02      	cmp	r5, #2
    29ee:	d028      	beq.n	2a42 <next_sense_cond_call_handler+0x66>
    29f0:	2102      	movs	r1, #2

        nrf_gpio_cfg_sense_set(pin, next_sense);
    29f2:	4630      	mov	r0, r6
    29f4:	f002 fdbf 	bl	5576 <nrf_gpio_cfg_sense_set>

        /* Invoke user handler only if the sensed pin level matches its polarity
         * configuration. Call handler unconditionally in case of toggle trigger or
         * level trigger. */
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    29f8:	2c03      	cmp	r4, #3
    29fa:	d026      	beq.n	2a4a <next_sense_cond_call_handler+0x6e>
    29fc:	2d02      	cmp	r5, #2
    29fe:	d022      	beq.n	2a46 <next_sense_cond_call_handler+0x6a>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    2a00:	2d03      	cmp	r5, #3
    2a02:	d027      	beq.n	2a54 <next_sense_cond_call_handler+0x78>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
        {
            call_handler(pin, trigger);
        }
    }
}
    2a04:	bd70      	pop	{r4, r5, r6, pc}
        call_handler(pin, trigger);
    2a06:	4621      	mov	r1, r4
    2a08:	4630      	mov	r0, r6
    2a0a:	f7ff ffd1 	bl	29b0 <call_handler>
    *p_pin = pin_number & 0x1F;
    2a0e:	f006 031f 	and.w	r3, r6, #31
    return pin_number >> 5;
    2a12:	0972      	lsrs	r2, r6, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    2a14:	2a01      	cmp	r2, #1
    2a16:	d012      	beq.n	2a3e <next_sense_cond_call_handler+0x62>
        case 0: return NRF_P0;
    2a18:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    2a1c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    2a20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2a24:	f3c3 4301 	ubfx	r3, r3, #16, #2
        if (nrf_gpio_pin_sense_get(pin) == sense)
    2a28:	429d      	cmp	r5, r3
    2a2a:	d1eb      	bne.n	2a04 <next_sense_cond_call_handler+0x28>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    2a2c:	2100      	movs	r1, #0
    2a2e:	4630      	mov	r0, r6
    2a30:	f002 fda1 	bl	5576 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    2a34:	4629      	mov	r1, r5
    2a36:	4630      	mov	r0, r6
    2a38:	f002 fd9d 	bl	5576 <nrf_gpio_cfg_sense_set>
    2a3c:	e7e2      	b.n	2a04 <next_sense_cond_call_handler+0x28>
        case 1: return NRF_P1;
    2a3e:	4a07      	ldr	r2, [pc, #28]	; (2a5c <next_sense_cond_call_handler+0x80>)
    2a40:	e7ec      	b.n	2a1c <next_sense_cond_call_handler+0x40>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    2a42:	2103      	movs	r1, #3
    2a44:	e7d5      	b.n	29f2 <next_sense_cond_call_handler+0x16>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    2a46:	2c01      	cmp	r4, #1
    2a48:	d1da      	bne.n	2a00 <next_sense_cond_call_handler+0x24>
            call_handler(pin, trigger);
    2a4a:	4621      	mov	r1, r4
    2a4c:	4630      	mov	r0, r6
    2a4e:	f7ff ffaf 	bl	29b0 <call_handler>
}
    2a52:	e7d7      	b.n	2a04 <next_sense_cond_call_handler+0x28>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    2a54:	2c02      	cmp	r4, #2
    2a56:	d1d5      	bne.n	2a04 <next_sense_cond_call_handler+0x28>
    2a58:	e7f7      	b.n	2a4a <next_sense_cond_call_handler+0x6e>
    2a5a:	bf00      	nop
    2a5c:	50000300 	.word	0x50000300

00002a60 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    2a60:	f100 0208 	add.w	r2, r0, #8
    2a64:	4b0e      	ldr	r3, [pc, #56]	; (2aa0 <release_handler+0x40>)
    2a66:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    2a6a:	f413 7f80 	tst.w	r3, #256	; 0x100
    2a6e:	d016      	beq.n	2a9e <release_handler+0x3e>
{
    2a70:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    2a72:	f3c3 2443 	ubfx	r4, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    2a76:	4610      	mov	r0, r2
    2a78:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    2a7c:	4a08      	ldr	r2, [pc, #32]	; (2aa0 <release_handler+0x40>)
    2a7e:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    if (!handler_in_use(handler_id))
    2a82:	4620      	mov	r0, r4
    2a84:	f7ff ff2e 	bl	28e4 <handler_in_use>
    2a88:	b100      	cbz	r0, 2a8c <release_handler+0x2c>
}
    2a8a:	bd10      	pop	{r4, pc}
        m_cb.handlers[handler_id].handler = NULL;
    2a8c:	4804      	ldr	r0, [pc, #16]	; (2aa0 <release_handler+0x40>)
    2a8e:	2300      	movs	r3, #0
    2a90:	f840 3034 	str.w	r3, [r0, r4, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    2a94:	4621      	mov	r1, r4
    2a96:	3068      	adds	r0, #104	; 0x68
    2a98:	f7ff fe06 	bl	26a8 <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
    2a9c:	e7f5      	b.n	2a8a <release_handler+0x2a>
    2a9e:	4770      	bx	lr
    2aa0:	20000048 	.word	0x20000048

00002aa4 <pin_handler_trigger_uninit>:
{
    2aa4:	b510      	push	{r4, lr}
    2aa6:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin))
    2aa8:	f7ff fef4 	bl	2894 <pin_in_use_by_te>
    2aac:	b140      	cbz	r0, 2ac0 <pin_handler_trigger_uninit+0x1c>
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    2aae:	4620      	mov	r0, r4
    2ab0:	f7ff ff10 	bl	28d4 <pin_te_get>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    2ab4:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    2ab8:	4b06      	ldr	r3, [pc, #24]	; (2ad4 <pin_handler_trigger_uninit+0x30>)
    2aba:	2200      	movs	r2, #0
    2abc:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    release_handler(pin);
    2ac0:	4620      	mov	r0, r4
    2ac2:	f7ff ffcd 	bl	2a60 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    2ac6:	3408      	adds	r4, #8
    2ac8:	4b03      	ldr	r3, [pc, #12]	; (2ad8 <pin_handler_trigger_uninit+0x34>)
    2aca:	2200      	movs	r2, #0
    2acc:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
}
    2ad0:	bd10      	pop	{r4, pc}
    2ad2:	bf00      	nop
    2ad4:	40006000 	.word	0x40006000
    2ad8:	20000048 	.word	0x20000048

00002adc <pin_handler_set>:
{
    2adc:	b570      	push	{r4, r5, r6, lr}
    2ade:	b082      	sub	sp, #8
    2ae0:	4605      	mov	r5, r0
    2ae2:	460e      	mov	r6, r1
    2ae4:	4614      	mov	r4, r2
    release_handler(pin);
    2ae6:	f7ff ffbb 	bl	2a60 <release_handler>
    if (!handler)
    2aea:	b326      	cbz	r6, 2b36 <pin_handler_set+0x5a>
    handler_id = find_handler(handler, p_context);
    2aec:	4621      	mov	r1, r4
    2aee:	4630      	mov	r0, r6
    2af0:	f7ff ff12 	bl	2918 <find_handler>
    if (handler_id < 0)
    2af4:	1e03      	subs	r3, r0, #0
    2af6:	db13      	blt.n	2b20 <pin_handler_set+0x44>
    m_cb.handlers[handler_id].handler = handler;
    2af8:	4910      	ldr	r1, [pc, #64]	; (2b3c <pin_handler_set+0x60>)
    2afa:	f841 6033 	str.w	r6, [r1, r3, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    2afe:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
    2b02:	6054      	str	r4, [r2, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    2b04:	f105 0008 	add.w	r0, r5, #8
    2b08:	f831 2010 	ldrh.w	r2, [r1, r0, lsl #1]
    2b0c:	025b      	lsls	r3, r3, #9
    2b0e:	b29b      	uxth	r3, r3
    2b10:	4313      	orrs	r3, r2
    2b12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    2b16:	f821 3010 	strh.w	r3, [r1, r0, lsl #1]
    return NRFX_SUCCESS;
    2b1a:	4809      	ldr	r0, [pc, #36]	; (2b40 <pin_handler_set+0x64>)
}
    2b1c:	b002      	add	sp, #8
    2b1e:	bd70      	pop	{r4, r5, r6, pc}
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    2b20:	f10d 0107 	add.w	r1, sp, #7
    2b24:	4807      	ldr	r0, [pc, #28]	; (2b44 <pin_handler_set+0x68>)
    2b26:	f7ff fd97 	bl	2658 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    2b2a:	4b05      	ldr	r3, [pc, #20]	; (2b40 <pin_handler_set+0x64>)
    2b2c:	4298      	cmp	r0, r3
    2b2e:	d1f5      	bne.n	2b1c <pin_handler_set+0x40>
        handler_id = (int32_t)id;
    2b30:	f89d 3007 	ldrb.w	r3, [sp, #7]
    2b34:	e7e0      	b.n	2af8 <pin_handler_set+0x1c>
        return NRFX_SUCCESS;
    2b36:	4802      	ldr	r0, [pc, #8]	; (2b40 <pin_handler_set+0x64>)
    2b38:	e7f0      	b.n	2b1c <pin_handler_set+0x40>
    2b3a:	bf00      	nop
    2b3c:	20000048 	.word	0x20000048
    2b40:	0bad0000 	.word	0x0bad0000
    2b44:	200000b0 	.word	0x200000b0

00002b48 <port_event_handle>:
    }
    return false;
}

static void port_event_handle(void)
{
    2b48:	b570      	push	{r4, r5, r6, lr}
    2b4a:	b082      	sub	sp, #8
    uint32_t latch[GPIO_COUNT];

    nrf_gpio_latches_read_and_clear(0, GPIO_COUNT, latch);
    2b4c:	466a      	mov	r2, sp
    2b4e:	2102      	movs	r1, #2
    2b50:	2000      	movs	r0, #0
    2b52:	f7ff fe73 	bl	283c <nrf_gpio_latches_read_and_clear>
    2b56:	e040      	b.n	2bda <port_event_handle+0x92>
    2b58:	4e22      	ldr	r6, [pc, #136]	; (2be4 <port_event_handle+0x9c>)
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    2b5a:	f505 73e0 	add.w	r3, r5, #448	; 0x1c0
    2b5e:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);

                nrf_bitmask_bit_clear(pin, latch);
                sense = nrf_gpio_pin_sense_get(pin);

                next_sense_cond_call_handler(pin, trigger, sense);
    2b62:	f3c2 4201 	ubfx	r2, r2, #16, #2
    2b66:	f7ff ff39 	bl	29dc <next_sense_cond_call_handler>
    reg->LATCH = (1 << pin_number);
    2b6a:	2301      	movs	r3, #1
    2b6c:	40ab      	lsls	r3, r5
    2b6e:	f8c6 3520 	str.w	r3, [r6, #1312]	; 0x520
            while (latch[i])
    2b72:	ab02      	add	r3, sp, #8
    2b74:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    2b78:	f853 0c08 	ldr.w	r0, [r3, #-8]
    2b7c:	b300      	cbz	r0, 2bc0 <port_event_handle+0x78>
                uint32_t pin = NRF_CTZ(latch[i]);
    2b7e:	fa90 f0a0 	rbit	r0, r0
    2b82:	fab0 f080 	clz	r0, r0
                pin += 32 * i;
    2b86:	eb00 1044 	add.w	r0, r0, r4, lsl #5
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    2b8a:	f100 0208 	add.w	r2, r0, #8
    2b8e:	4b16      	ldr	r3, [pc, #88]	; (2be8 <port_event_handle+0xa0>)
    2b90:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
    2b94:	f3c1 0182 	ubfx	r1, r1, #2, #3
 * @param[in,out] p_mask Pointer to mask with bit fields.
 */
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    2b98:	08c5      	lsrs	r5, r0, #3
    bit = BITMASK_RELBIT_GET(bit);
    2b9a:	f000 0607 	and.w	r6, r0, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    2b9e:	f81d 2005 	ldrb.w	r2, [sp, r5]
    2ba2:	2301      	movs	r3, #1
    2ba4:	40b3      	lsls	r3, r6
    2ba6:	43db      	mvns	r3, r3
    2ba8:	b25b      	sxtb	r3, r3
    2baa:	4013      	ands	r3, r2
    2bac:	f80d 3005 	strb.w	r3, [sp, r5]
    *p_pin = pin_number & 0x1F;
    2bb0:	f000 051f 	and.w	r5, r0, #31
    return pin_number >> 5;
    2bb4:	0943      	lsrs	r3, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    2bb6:	2b01      	cmp	r3, #1
    2bb8:	d0ce      	beq.n	2b58 <port_event_handle+0x10>
        case 0: return NRF_P0;
    2bba:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
    2bbe:	e7cc      	b.n	2b5a <port_event_handle+0x12>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    2bc0:	3401      	adds	r4, #1
    2bc2:	2c01      	cmp	r4, #1
    2bc4:	d9d5      	bls.n	2b72 <port_event_handle+0x2a>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    2bc6:	4b09      	ldr	r3, [pc, #36]	; (2bec <port_event_handle+0xa4>)
    2bc8:	2200      	movs	r2, #0
    2bca:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    2bce:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
        }

        /* All pins have been handled, clear PORT, check latch again in case
         * something came between deciding to exit and clearing PORT event. */
        nrf_gpiote_event_clear(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT);
    } while (latch_pending_read_and_check(latch));
    2bd2:	4668      	mov	r0, sp
    2bd4:	f002 fcfc 	bl	55d0 <latch_pending_read_and_check>
    2bd8:	b108      	cbz	r0, 2bde <port_event_handle+0x96>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    2bda:	2400      	movs	r4, #0
    2bdc:	e7f1      	b.n	2bc2 <port_event_handle+0x7a>
}
    2bde:	b002      	add	sp, #8
    2be0:	bd70      	pop	{r4, r5, r6, pc}
    2be2:	bf00      	nop
    2be4:	50000300 	.word	0x50000300
    2be8:	20000048 	.word	0x20000048
    2bec:	40006000 	.word	0x40006000

00002bf0 <gpiote_evt_handle>:
    } while (input_read_and_check(input, pins_to_check));
}
#endif // defined(NRF_GPIO_LATCH_PRESENT)

static void gpiote_evt_handle(uint32_t mask)
{
    2bf0:	b538      	push	{r3, r4, r5, lr}
    2bf2:	4604      	mov	r4, r0
    while (mask)
    2bf4:	e018      	b.n	2c28 <gpiote_evt_handle+0x38>
    {
        uint32_t ch = NRF_CTZ(mask);
    2bf6:	fa94 f3a4 	rbit	r3, r4
    2bfa:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    2bfe:	2201      	movs	r2, #1
    2c00:	409a      	lsls	r2, r3
    2c02:	ea24 0402 	bic.w	r4, r4, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    2c06:	4a0a      	ldr	r2, [pc, #40]	; (2c30 <gpiote_evt_handle+0x40>)
    2c08:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    2c0c:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
    2c10:	f3c5 2505 	ubfx	r5, r5, #8, #6
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    2c14:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
        nrfx_gpiote_pin_t pin = nrf_gpiote_event_pin_get(NRF_GPIOTE, ch);
        nrf_gpiote_polarity_t polarity = nrf_gpiote_event_polarity_get(NRF_GPIOTE, ch);

        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    2c18:	f3c0 4001 	ubfx	r0, r0, #16, #2
    2c1c:	f002 fcd1 	bl	55c2 <gpiote_polarity_to_trigger>
    2c20:	4601      	mov	r1, r0
    2c22:	4628      	mov	r0, r5
    2c24:	f7ff fec4 	bl	29b0 <call_handler>
    while (mask)
    2c28:	2c00      	cmp	r4, #0
    2c2a:	d1e4      	bne.n	2bf6 <gpiote_evt_handle+0x6>
    }
}
    2c2c:	bd38      	pop	{r3, r4, r5, pc}
    2c2e:	bf00      	nop
    2c30:	40006000 	.word	0x40006000

00002c34 <nrfx_gpiote_input_configure>:
{
    2c34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2c38:	b084      	sub	sp, #16
    2c3a:	4604      	mov	r4, r0
    2c3c:	4615      	mov	r5, r2
    2c3e:	461e      	mov	r6, r3
    if (p_input_config)
    2c40:	b309      	cbz	r1, 2c86 <nrfx_gpiote_input_configure+0x52>
    2c42:	460f      	mov	r7, r1
        if (pin_is_task_output(pin))
    2c44:	f002 fca7 	bl	5596 <pin_is_task_output>
    2c48:	2800      	cmp	r0, #0
    2c4a:	d13f      	bne.n	2ccc <nrfx_gpiote_input_configure+0x98>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    2c4c:	2300      	movs	r3, #0
    2c4e:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
    2c52:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    2c56:	9301      	str	r3, [sp, #4]
    2c58:	9300      	str	r3, [sp, #0]
    2c5a:	463b      	mov	r3, r7
    2c5c:	f10d 020f 	add.w	r2, sp, #15
    2c60:	f10d 010e 	add.w	r1, sp, #14
    2c64:	4620      	mov	r0, r4
    2c66:	f7ff fd8d 	bl	2784 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    2c6a:	4a38      	ldr	r2, [pc, #224]	; (2d4c <nrfx_gpiote_input_configure+0x118>)
    2c6c:	f104 0108 	add.w	r1, r4, #8
    2c70:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    2c74:	f023 0302 	bic.w	r3, r3, #2
    2c78:	b29b      	uxth	r3, r3
    2c7a:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    2c7e:	f043 0301 	orr.w	r3, r3, #1
    2c82:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
    2c86:	b1bd      	cbz	r5, 2cb8 <nrfx_gpiote_input_configure+0x84>
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    2c88:	782f      	ldrb	r7, [r5, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    2c8a:	f8d5 8004 	ldr.w	r8, [r5, #4]
        if (pin_is_output(pin))
    2c8e:	4620      	mov	r0, r4
    2c90:	f7ff fe16 	bl	28c0 <pin_is_output>
    2c94:	b1e0      	cbz	r0, 2cd0 <nrfx_gpiote_input_configure+0x9c>
            if (use_evt)
    2c96:	f1b8 0f00 	cmp.w	r8, #0
    2c9a:	d151      	bne.n	2d40 <nrfx_gpiote_input_configure+0x10c>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    2c9c:	4a2b      	ldr	r2, [pc, #172]	; (2d4c <nrfx_gpiote_input_configure+0x118>)
    2c9e:	f104 0108 	add.w	r1, r4, #8
    2ca2:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    2ca6:	f023 031c 	bic.w	r3, r3, #28
    2caa:	b29b      	uxth	r3, r3
    2cac:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    2cb0:	ea43 0387 	orr.w	r3, r3, r7, lsl #2
    2cb4:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_handler_config)
    2cb8:	2e00      	cmp	r6, #0
    2cba:	d045      	beq.n	2d48 <nrfx_gpiote_input_configure+0x114>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    2cbc:	6872      	ldr	r2, [r6, #4]
    2cbe:	6831      	ldr	r1, [r6, #0]
    2cc0:	4620      	mov	r0, r4
    2cc2:	f7ff ff0b 	bl	2adc <pin_handler_set>
}
    2cc6:	b004      	add	sp, #16
    2cc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return NRFX_ERROR_INVALID_PARAM;
    2ccc:	4820      	ldr	r0, [pc, #128]	; (2d50 <nrfx_gpiote_input_configure+0x11c>)
    2cce:	e7fa      	b.n	2cc6 <nrfx_gpiote_input_configure+0x92>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    2cd0:	4a1e      	ldr	r2, [pc, #120]	; (2d4c <nrfx_gpiote_input_configure+0x118>)
    2cd2:	f104 0108 	add.w	r1, r4, #8
    2cd6:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    2cda:	f023 0320 	bic.w	r3, r3, #32
    2cde:	04db      	lsls	r3, r3, #19
    2ce0:	0cdb      	lsrs	r3, r3, #19
    2ce2:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
            if (use_evt)
    2ce6:	f1b8 0f00 	cmp.w	r8, #0
    2cea:	d0d7      	beq.n	2c9c <nrfx_gpiote_input_configure+0x68>
                if (!edge)
    2cec:	2f03      	cmp	r7, #3
    2cee:	d829      	bhi.n	2d44 <nrfx_gpiote_input_configure+0x110>
                uint8_t ch = *p_trigger_config->p_in_channel;
    2cf0:	686b      	ldr	r3, [r5, #4]
    2cf2:	781d      	ldrb	r5, [r3, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    2cf4:	b937      	cbnz	r7, 2d04 <nrfx_gpiote_input_configure+0xd0>
    p_reg->CONFIG[idx] = 0;
    2cf6:	f505 75a2 	add.w	r5, r5, #324	; 0x144
    2cfa:	4b16      	ldr	r3, [pc, #88]	; (2d54 <nrfx_gpiote_input_configure+0x120>)
    2cfc:	2200      	movs	r2, #0
    2cfe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
    2d02:	e7cb      	b.n	2c9c <nrfx_gpiote_input_configure+0x68>
                    nrf_gpiote_polarity_t polarity = gpiote_trigger_to_polarity(trigger);
    2d04:	4638      	mov	r0, r7
    2d06:	f002 fc5d 	bl	55c4 <gpiote_trigger_to_polarity>
    2d0a:	4603      	mov	r3, r0
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    2d0c:	4811      	ldr	r0, [pc, #68]	; (2d54 <nrfx_gpiote_input_configure+0x120>)
    2d0e:	f505 71a2 	add.w	r1, r5, #324	; 0x144
    2d12:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
    2d16:	f022 0203 	bic.w	r2, r2, #3
    2d1a:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
                    nrf_gpiote_event_configure(NRF_GPIOTE, ch, pin, polarity);
    2d1e:	4622      	mov	r2, r4
    2d20:	4629      	mov	r1, r5
    2d22:	f002 fbf0 	bl	5506 <nrf_gpiote_event_configure>
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    2d26:	4a09      	ldr	r2, [pc, #36]	; (2d4c <nrfx_gpiote_input_configure+0x118>)
    2d28:	f104 0108 	add.w	r1, r4, #8
    2d2c:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    2d30:	036d      	lsls	r5, r5, #13
    2d32:	b2ad      	uxth	r5, r5
    2d34:	432b      	orrs	r3, r5
    2d36:	f043 0320 	orr.w	r3, r3, #32
    2d3a:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    2d3e:	e7ad      	b.n	2c9c <nrfx_gpiote_input_configure+0x68>
                return NRFX_ERROR_INVALID_PARAM;
    2d40:	4803      	ldr	r0, [pc, #12]	; (2d50 <nrfx_gpiote_input_configure+0x11c>)
    2d42:	e7c0      	b.n	2cc6 <nrfx_gpiote_input_configure+0x92>
                    return NRFX_ERROR_INVALID_PARAM;
    2d44:	4802      	ldr	r0, [pc, #8]	; (2d50 <nrfx_gpiote_input_configure+0x11c>)
    2d46:	e7be      	b.n	2cc6 <nrfx_gpiote_input_configure+0x92>
        err = NRFX_SUCCESS;
    2d48:	4803      	ldr	r0, [pc, #12]	; (2d58 <nrfx_gpiote_input_configure+0x124>)
    2d4a:	e7bc      	b.n	2cc6 <nrfx_gpiote_input_configure+0x92>
    2d4c:	20000048 	.word	0x20000048
    2d50:	0bad0004 	.word	0x0bad0004
    2d54:	40006000 	.word	0x40006000
    2d58:	0bad0000 	.word	0x0bad0000

00002d5c <nrfx_gpiote_output_configure>:
{
    2d5c:	b570      	push	{r4, r5, r6, lr}
    2d5e:	b084      	sub	sp, #16
    2d60:	4604      	mov	r4, r0
    2d62:	4615      	mov	r5, r2
    if (p_config)
    2d64:	b329      	cbz	r1, 2db2 <nrfx_gpiote_output_configure+0x56>
    2d66:	460e      	mov	r6, r1
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    2d68:	f002 fc24 	bl	55b4 <pin_is_input>
    2d6c:	b120      	cbz	r0, 2d78 <nrfx_gpiote_output_configure+0x1c>
    2d6e:	4620      	mov	r0, r4
    2d70:	f7ff fd90 	bl	2894 <pin_in_use_by_te>
    2d74:	2800      	cmp	r0, #0
    2d76:	d138      	bne.n	2dea <nrfx_gpiote_output_configure+0x8e>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    2d78:	4620      	mov	r0, r4
    2d7a:	f7ff fd95 	bl	28a8 <pin_has_trigger>
    2d7e:	b110      	cbz	r0, 2d86 <nrfx_gpiote_output_configure+0x2a>
    2d80:	7873      	ldrb	r3, [r6, #1]
    2d82:	2b01      	cmp	r3, #1
    2d84:	d031      	beq.n	2dea <nrfx_gpiote_output_configure+0x8e>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
    2d86:	2301      	movs	r3, #1
    2d88:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    2d8c:	2300      	movs	r3, #0
    2d8e:	9301      	str	r3, [sp, #4]
    2d90:	9600      	str	r6, [sp, #0]
    2d92:	1cb3      	adds	r3, r6, #2
    2d94:	1c72      	adds	r2, r6, #1
    2d96:	f10d 010f 	add.w	r1, sp, #15
    2d9a:	4620      	mov	r0, r4
    2d9c:	f7ff fcf2 	bl	2784 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    2da0:	4a1f      	ldr	r2, [pc, #124]	; (2e20 <nrfx_gpiote_output_configure+0xc4>)
    2da2:	f104 0108 	add.w	r1, r4, #8
    2da6:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    2daa:	f043 0303 	orr.w	r3, r3, #3
    2dae:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
    2db2:	b385      	cbz	r5, 2e16 <nrfx_gpiote_output_configure+0xba>
        if (pin_is_input(pin))
    2db4:	4620      	mov	r0, r4
    2db6:	f002 fbfd 	bl	55b4 <pin_is_input>
    2dba:	bb70      	cbnz	r0, 2e1a <nrfx_gpiote_output_configure+0xbe>
        uint32_t ch = p_task_config->task_ch;
    2dbc:	782e      	ldrb	r6, [r5, #0]
    p_reg->CONFIG[idx] = 0;
    2dbe:	f506 72a2 	add.w	r2, r6, #324	; 0x144
    2dc2:	4b18      	ldr	r3, [pc, #96]	; (2e24 <nrfx_gpiote_output_configure+0xc8>)
    2dc4:	2100      	movs	r1, #0
    2dc6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    2dca:	4a15      	ldr	r2, [pc, #84]	; (2e20 <nrfx_gpiote_output_configure+0xc4>)
    2dcc:	f104 0108 	add.w	r1, r4, #8
    2dd0:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    2dd4:	f023 0320 	bic.w	r3, r3, #32
    2dd8:	04db      	lsls	r3, r3, #19
    2dda:	0cdb      	lsrs	r3, r3, #19
    2ddc:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    2de0:	786b      	ldrb	r3, [r5, #1]
    2de2:	b923      	cbnz	r3, 2dee <nrfx_gpiote_output_configure+0x92>
    return NRFX_SUCCESS;
    2de4:	4810      	ldr	r0, [pc, #64]	; (2e28 <nrfx_gpiote_output_configure+0xcc>)
}
    2de6:	b004      	add	sp, #16
    2de8:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_INVALID_PARAM;
    2dea:	4810      	ldr	r0, [pc, #64]	; (2e2c <nrfx_gpiote_output_configure+0xd0>)
    2dec:	e7fb      	b.n	2de6 <nrfx_gpiote_output_configure+0x8a>
                                      p_task_config->init_val);
    2dee:	78aa      	ldrb	r2, [r5, #2]
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
    2df0:	9200      	str	r2, [sp, #0]
    2df2:	4622      	mov	r2, r4
    2df4:	4631      	mov	r1, r6
    2df6:	480b      	ldr	r0, [pc, #44]	; (2e24 <nrfx_gpiote_output_configure+0xc8>)
    2df8:	f002 fb9e 	bl	5538 <nrf_gpiote_task_configure>
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    2dfc:	4a08      	ldr	r2, [pc, #32]	; (2e20 <nrfx_gpiote_output_configure+0xc4>)
    2dfe:	3408      	adds	r4, #8
    2e00:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
    2e04:	0376      	lsls	r6, r6, #13
    2e06:	b2b6      	uxth	r6, r6
    2e08:	4333      	orrs	r3, r6
    2e0a:	f043 0320 	orr.w	r3, r3, #32
    2e0e:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
    return NRFX_SUCCESS;
    2e12:	4805      	ldr	r0, [pc, #20]	; (2e28 <nrfx_gpiote_output_configure+0xcc>)
    2e14:	e7e7      	b.n	2de6 <nrfx_gpiote_output_configure+0x8a>
    2e16:	4804      	ldr	r0, [pc, #16]	; (2e28 <nrfx_gpiote_output_configure+0xcc>)
    2e18:	e7e5      	b.n	2de6 <nrfx_gpiote_output_configure+0x8a>
            return NRFX_ERROR_INVALID_PARAM;
    2e1a:	4804      	ldr	r0, [pc, #16]	; (2e2c <nrfx_gpiote_output_configure+0xd0>)
    2e1c:	e7e3      	b.n	2de6 <nrfx_gpiote_output_configure+0x8a>
    2e1e:	bf00      	nop
    2e20:	20000048 	.word	0x20000048
    2e24:	40006000 	.word	0x40006000
    2e28:	0bad0000 	.word	0x0bad0000
    2e2c:	0bad0004 	.word	0x0bad0004

00002e30 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    2e30:	4b01      	ldr	r3, [pc, #4]	; (2e38 <nrfx_gpiote_global_callback_set+0x8>)
    2e32:	6098      	str	r0, [r3, #8]
    m_cb.global_handler.p_context = p_context;
    2e34:	60d9      	str	r1, [r3, #12]
}
    2e36:	4770      	bx	lr
    2e38:	20000048 	.word	0x20000048

00002e3c <nrfx_gpiote_channel_get>:
{
    2e3c:	b538      	push	{r3, r4, r5, lr}
    2e3e:	4604      	mov	r4, r0
    2e40:	460d      	mov	r5, r1
    if (pin_in_use_by_te(pin))
    2e42:	f7ff fd27 	bl	2894 <pin_in_use_by_te>
    2e46:	b140      	cbz	r0, 2e5a <nrfx_gpiote_channel_get+0x1e>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    2e48:	f104 0008 	add.w	r0, r4, #8
    2e4c:	4b04      	ldr	r3, [pc, #16]	; (2e60 <nrfx_gpiote_channel_get+0x24>)
    2e4e:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
    2e52:	0b5b      	lsrs	r3, r3, #13
    2e54:	702b      	strb	r3, [r5, #0]
        return NRFX_SUCCESS;
    2e56:	4803      	ldr	r0, [pc, #12]	; (2e64 <nrfx_gpiote_channel_get+0x28>)
}
    2e58:	bd38      	pop	{r3, r4, r5, pc}
        return NRFX_ERROR_INVALID_PARAM;
    2e5a:	4803      	ldr	r0, [pc, #12]	; (2e68 <nrfx_gpiote_channel_get+0x2c>)
    2e5c:	e7fc      	b.n	2e58 <nrfx_gpiote_channel_get+0x1c>
    2e5e:	bf00      	nop
    2e60:	20000048 	.word	0x20000048
    2e64:	0bad0000 	.word	0x0bad0000
    2e68:	0bad0004 	.word	0x0bad0004

00002e6c <nrfx_gpiote_init>:
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    2e6c:	4b0f      	ldr	r3, [pc, #60]	; (2eac <nrfx_gpiote_init+0x40>)
    2e6e:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
    2e72:	b10b      	cbz	r3, 2e78 <nrfx_gpiote_init+0xc>
        return err_code;
    2e74:	480e      	ldr	r0, [pc, #56]	; (2eb0 <nrfx_gpiote_init+0x44>)
}
    2e76:	4770      	bx	lr
{
    2e78:	b510      	push	{r4, lr}
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    2e7a:	4c0e      	ldr	r4, [pc, #56]	; (2eb4 <nrfx_gpiote_init+0x48>)
    2e7c:	2254      	movs	r2, #84	; 0x54
    2e7e:	2100      	movs	r1, #0
    2e80:	4620      	mov	r0, r4
    2e82:	f001 fda6 	bl	49d2 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    2e86:	2006      	movs	r0, #6
    2e88:	f001 fc93 	bl	47b2 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    2e8c:	4b0a      	ldr	r3, [pc, #40]	; (2eb8 <nrfx_gpiote_init+0x4c>)
    2e8e:	2200      	movs	r2, #0
    2e90:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    2e94:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    2e98:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    2e9c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    2ea0:	2301      	movs	r3, #1
    2ea2:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    2ea6:	65a3      	str	r3, [r4, #88]	; 0x58
    return err_code;
    2ea8:	4804      	ldr	r0, [pc, #16]	; (2ebc <nrfx_gpiote_init+0x50>)
}
    2eaa:	bd10      	pop	{r4, pc}
    2eac:	20000048 	.word	0x20000048
    2eb0:	0bad0005 	.word	0x0bad0005
    2eb4:	20000058 	.word	0x20000058
    2eb8:	40006000 	.word	0x40006000
    2ebc:	0bad0000 	.word	0x0bad0000

00002ec0 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    2ec0:	4b03      	ldr	r3, [pc, #12]	; (2ed0 <nrfx_gpiote_is_init+0x10>)
    2ec2:	f893 006c 	ldrb.w	r0, [r3, #108]	; 0x6c
}
    2ec6:	3800      	subs	r0, #0
    2ec8:	bf18      	it	ne
    2eca:	2001      	movne	r0, #1
    2ecc:	4770      	bx	lr
    2ece:	bf00      	nop
    2ed0:	20000048 	.word	0x20000048

00002ed4 <nrfx_gpiote_channel_free>:
{
    2ed4:	b508      	push	{r3, lr}
    2ed6:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    2ed8:	4801      	ldr	r0, [pc, #4]	; (2ee0 <nrfx_gpiote_channel_free+0xc>)
    2eda:	f7ff fbe5 	bl	26a8 <nrfx_flag32_free>
}
    2ede:	bd08      	pop	{r3, pc}
    2ee0:	200000ac 	.word	0x200000ac

00002ee4 <nrfx_gpiote_channel_alloc>:
{
    2ee4:	b508      	push	{r3, lr}
    2ee6:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    2ee8:	4801      	ldr	r0, [pc, #4]	; (2ef0 <nrfx_gpiote_channel_alloc+0xc>)
    2eea:	f7ff fbb5 	bl	2658 <nrfx_flag32_alloc>
}
    2eee:	bd08      	pop	{r3, pc}
    2ef0:	200000ac 	.word	0x200000ac

00002ef4 <nrfx_gpiote_trigger_enable>:
{
    2ef4:	b538      	push	{r3, r4, r5, lr}
    2ef6:	4604      	mov	r4, r0
    2ef8:	460d      	mov	r5, r1
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    2efa:	f7ff fccb 	bl	2894 <pin_in_use_by_te>
    2efe:	b300      	cbz	r0, 2f42 <nrfx_gpiote_trigger_enable+0x4e>
    2f00:	4620      	mov	r0, r4
    2f02:	f002 fb57 	bl	55b4 <pin_is_input>
    2f06:	b1e0      	cbz	r0, 2f42 <nrfx_gpiote_trigger_enable+0x4e>
        uint8_t ch = pin_te_get(pin);
    2f08:	4620      	mov	r0, r4
    2f0a:	f7ff fce3 	bl	28d4 <pin_te_get>
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    2f0e:	0083      	lsls	r3, r0, #2
    2f10:	f503 7380 	add.w	r3, r3, #256	; 0x100
    return ((uint32_t)p_reg + event);
    2f14:	b29b      	uxth	r3, r3
    2f16:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    2f1a:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    2f1e:	2200      	movs	r2, #0
    2f20:	601a      	str	r2, [r3, #0]
    2f22:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    2f24:	4a0b      	ldr	r2, [pc, #44]	; (2f54 <nrfx_gpiote_trigger_enable+0x60>)
    2f26:	f500 71a2 	add.w	r1, r0, #324	; 0x144
    2f2a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
    2f2e:	f043 0301 	orr.w	r3, r3, #1
    2f32:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
        if (int_enable)
    2f36:	b15d      	cbz	r5, 2f50 <nrfx_gpiote_trigger_enable+0x5c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    2f38:	2301      	movs	r3, #1
    2f3a:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
    2f3c:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    2f40:	e006      	b.n	2f50 <nrfx_gpiote_trigger_enable+0x5c>
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    2f42:	4620      	mov	r0, r4
    2f44:	f7ff fcfe 	bl	2944 <get_initial_sense>
    2f48:	4601      	mov	r1, r0
    2f4a:	4620      	mov	r0, r4
    2f4c:	f002 fb13 	bl	5576 <nrf_gpio_cfg_sense_set>
}
    2f50:	bd38      	pop	{r3, r4, r5, pc}
    2f52:	bf00      	nop
    2f54:	40006000 	.word	0x40006000

00002f58 <nrfx_gpiote_trigger_disable>:
{
    2f58:	b510      	push	{r4, lr}
    2f5a:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    2f5c:	f7ff fc9a 	bl	2894 <pin_in_use_by_te>
    2f60:	b1a0      	cbz	r0, 2f8c <nrfx_gpiote_trigger_disable+0x34>
    2f62:	4620      	mov	r0, r4
    2f64:	f002 fb26 	bl	55b4 <pin_is_input>
    2f68:	b180      	cbz	r0, 2f8c <nrfx_gpiote_trigger_disable+0x34>
        uint8_t ch = pin_te_get(pin);
    2f6a:	4620      	mov	r0, r4
    2f6c:	f7ff fcb2 	bl	28d4 <pin_te_get>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    2f70:	2201      	movs	r2, #1
    2f72:	4082      	lsls	r2, r0
    p_reg->INTENCLR = mask;
    2f74:	4b08      	ldr	r3, [pc, #32]	; (2f98 <nrfx_gpiote_trigger_disable+0x40>)
    2f76:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    2f7a:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    2f7e:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
    2f82:	f022 0203 	bic.w	r2, r2, #3
    2f86:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
}
    2f8a:	e003      	b.n	2f94 <nrfx_gpiote_trigger_disable+0x3c>
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    2f8c:	2100      	movs	r1, #0
    2f8e:	4620      	mov	r0, r4
    2f90:	f002 faf1 	bl	5576 <nrf_gpio_cfg_sense_set>
}
    2f94:	bd10      	pop	{r4, pc}
    2f96:	bf00      	nop
    2f98:	40006000 	.word	0x40006000

00002f9c <nrfx_gpiote_pin_uninit>:
{
    2f9c:	b510      	push	{r4, lr}
    2f9e:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    2fa0:	f7ff fc6e 	bl	2880 <pin_in_use>
    2fa4:	b908      	cbnz	r0, 2faa <nrfx_gpiote_pin_uninit+0xe>
        return NRFX_ERROR_INVALID_PARAM;
    2fa6:	480c      	ldr	r0, [pc, #48]	; (2fd8 <nrfx_gpiote_pin_uninit+0x3c>)
}
    2fa8:	bd10      	pop	{r4, pc}
    nrfx_gpiote_trigger_disable(pin);
    2faa:	4620      	mov	r0, r4
    2fac:	f7ff ffd4 	bl	2f58 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    2fb0:	4620      	mov	r0, r4
    2fb2:	f7ff fd77 	bl	2aa4 <pin_handler_trigger_uninit>
    *p_pin = pin_number & 0x1F;
    2fb6:	f004 031f 	and.w	r3, r4, #31
    return pin_number >> 5;
    2fba:	0964      	lsrs	r4, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    2fbc:	2c01      	cmp	r4, #1
    2fbe:	d008      	beq.n	2fd2 <nrfx_gpiote_pin_uninit+0x36>
        case 0: return NRF_P0;
    2fc0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    2fc4:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    2fc8:	2102      	movs	r1, #2
    2fca:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    return NRFX_SUCCESS;
    2fce:	4803      	ldr	r0, [pc, #12]	; (2fdc <nrfx_gpiote_pin_uninit+0x40>)
    2fd0:	e7ea      	b.n	2fa8 <nrfx_gpiote_pin_uninit+0xc>
        case 1: return NRF_P1;
    2fd2:	4a03      	ldr	r2, [pc, #12]	; (2fe0 <nrfx_gpiote_pin_uninit+0x44>)
    2fd4:	e7f6      	b.n	2fc4 <nrfx_gpiote_pin_uninit+0x28>
    2fd6:	bf00      	nop
    2fd8:	0bad0004 	.word	0x0bad0004
    2fdc:	0bad0000 	.word	0x0bad0000
    2fe0:	50000300 	.word	0x50000300

00002fe4 <nrfx_gpiote_irq_handler>:

void nrfx_gpiote_irq_handler(void)
{
    2fe4:	b538      	push	{r3, r4, r5, lr}
    uint32_t status = 0;
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    2fe6:	2001      	movs	r0, #1
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    2fe8:	f44f 7380 	mov.w	r3, #256	; 0x100

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    2fec:	2100      	movs	r1, #0
    uint32_t status = 0;
    2fee:	460c      	mov	r4, r1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    2ff0:	e003      	b.n	2ffa <nrfx_gpiote_irq_handler+0x16>
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
        }
        mask <<= 1;
    2ff2:	0040      	lsls	r0, r0, #1
        /* Incrementing to next event, utilizing the fact that events are grouped together
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    2ff4:	3304      	adds	r3, #4
    2ff6:	b29b      	uxth	r3, r3
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    2ff8:	3101      	adds	r1, #1
    2ffa:	2907      	cmp	r1, #7
    2ffc:	d814      	bhi.n	3028 <nrfx_gpiote_irq_handler+0x44>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2ffe:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    3002:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    3006:	6812      	ldr	r2, [r2, #0]
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    3008:	2a00      	cmp	r2, #0
    300a:	d0f2      	beq.n	2ff2 <nrfx_gpiote_irq_handler+0xe>
    return p_reg->INTENSET & mask;
    300c:	4a0c      	ldr	r2, [pc, #48]	; (3040 <nrfx_gpiote_irq_handler+0x5c>)
    300e:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    3012:	4210      	tst	r0, r2
    3014:	d0ed      	beq.n	2ff2 <nrfx_gpiote_irq_handler+0xe>
    return ((uint32_t)p_reg + event);
    3016:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    301a:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    301e:	2500      	movs	r5, #0
    3020:	6015      	str	r5, [r2, #0]
    3022:	6812      	ldr	r2, [r2, #0]
            status |= mask;
    3024:	4304      	orrs	r4, r0
    3026:	e7e4      	b.n	2ff2 <nrfx_gpiote_irq_handler+0xe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3028:	4b05      	ldr	r3, [pc, #20]	; (3040 <nrfx_gpiote_irq_handler+0x5c>)
    302a:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    302e:	b91b      	cbnz	r3, 3038 <nrfx_gpiote_irq_handler+0x54>
    {
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
    3030:	4620      	mov	r0, r4
    3032:	f7ff fddd 	bl	2bf0 <gpiote_evt_handle>
}
    3036:	bd38      	pop	{r3, r4, r5, pc}
        port_event_handle();
    3038:	f7ff fd86 	bl	2b48 <port_event_handle>
    303c:	e7f8      	b.n	3030 <nrfx_gpiote_irq_handler+0x4c>
    303e:	bf00      	nop
    3040:	40006000 	.word	0x40006000

00003044 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    3044:	b508      	push	{r3, lr}
    3046:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
    3048:	4801      	ldr	r0, [pc, #4]	; (3050 <nrfx_ppi_channel_alloc+0xc>)
    304a:	f7ff fb05 	bl	2658 <nrfx_flag32_alloc>
}
    304e:	bd08      	pop	{r3, pc}
    3050:	200000b8 	.word	0x200000b8

00003054 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
    3054:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    3056:	4c14      	ldr	r4, [pc, #80]	; (30a8 <_DoInit+0x54>)
    3058:	2303      	movs	r3, #3
    305a:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    305c:	6163      	str	r3, [r4, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    305e:	4a13      	ldr	r2, [pc, #76]	; (30ac <_DoInit+0x58>)
    3060:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    3062:	4b13      	ldr	r3, [pc, #76]	; (30b0 <_DoInit+0x5c>)
    3064:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    3066:	f44f 6380 	mov.w	r3, #1024	; 0x400
    306a:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
    306c:	2300      	movs	r3, #0
    306e:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    3070:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    3072:	62e3      	str	r3, [r4, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
    3074:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    3076:	4a0f      	ldr	r2, [pc, #60]	; (30b4 <_DoInit+0x60>)
    3078:	6662      	str	r2, [r4, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    307a:	2210      	movs	r2, #16
    307c:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    307e:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    3080:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    3082:	6763      	str	r3, [r4, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    3084:	490c      	ldr	r1, [pc, #48]	; (30b8 <_DoInit+0x64>)
    3086:	1de0      	adds	r0, r4, #7
    3088:	f001 fc3d 	bl	4906 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    308c:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
    3090:	490a      	ldr	r1, [pc, #40]	; (30bc <_DoInit+0x68>)
    3092:	4620      	mov	r0, r4
    3094:	f001 fc37 	bl	4906 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    3098:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
    309c:	2320      	movs	r3, #32
    309e:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    30a0:	f3bf 8f5f 	dmb	sy
}
    30a4:	bd10      	pop	{r4, pc}
    30a6:	bf00      	nop
    30a8:	2000072c 	.word	0x2000072c
    30ac:	00005f04 	.word	0x00005f04
    30b0:	2000032c 	.word	0x2000032c
    30b4:	2000031c 	.word	0x2000031c
    30b8:	00005f10 	.word	0x00005f10
    30bc:	00005f14 	.word	0x00005f14

000030c0 <z_device_state_init>:
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
	const struct device *dev = __device_start;
    30c0:	4b03      	ldr	r3, [pc, #12]	; (30d0 <z_device_state_init+0x10>)

	while (dev < __device_end) {
    30c2:	e000      	b.n	30c6 <z_device_state_init+0x6>
		z_object_init(dev);
		++dev;
    30c4:	3318      	adds	r3, #24
	while (dev < __device_end) {
    30c6:	4a03      	ldr	r2, [pc, #12]	; (30d4 <z_device_state_init+0x14>)
    30c8:	4293      	cmp	r3, r2
    30ca:	d3fb      	bcc.n	30c4 <z_device_state_init+0x4>
	}
}
    30cc:	4770      	bx	lr
    30ce:	bf00      	nop
    30d0:	00005a20 	.word	0x00005a20
    30d4:	00005a98 	.word	0x00005a98

000030d8 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
static void z_sys_init_run_level(enum init_level level)
{
    30d8:	b570      	push	{r4, r5, r6, lr}
    30da:	4606      	mov	r6, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    30dc:	4b11      	ldr	r3, [pc, #68]	; (3124 <z_sys_init_run_level+0x4c>)
    30de:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    30e2:	e009      	b.n	30f8 <z_sys_init_run_level+0x20>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
				if (rc < 0) {
					rc = -rc;
    30e4:	4240      	negs	r0, r0
    30e6:	e017      	b.n	3118 <z_sys_init_run_level+0x40>
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
    30e8:	68eb      	ldr	r3, [r5, #12]
    30ea:	7018      	strb	r0, [r3, #0]
			}
			dev->state->initialized = true;
    30ec:	68ea      	ldr	r2, [r5, #12]
    30ee:	7853      	ldrb	r3, [r2, #1]
    30f0:	f043 0301 	orr.w	r3, r3, #1
    30f4:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    30f6:	3408      	adds	r4, #8
    30f8:	1c73      	adds	r3, r6, #1
    30fa:	4a0a      	ldr	r2, [pc, #40]	; (3124 <z_sys_init_run_level+0x4c>)
    30fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3100:	42a3      	cmp	r3, r4
    3102:	d90d      	bls.n	3120 <z_sys_init_run_level+0x48>
		const struct device *dev = entry->dev;
    3104:	6865      	ldr	r5, [r4, #4]
		int rc = entry->init(dev);
    3106:	6823      	ldr	r3, [r4, #0]
    3108:	4628      	mov	r0, r5
    310a:	4798      	blx	r3
		if (dev != NULL) {
    310c:	2d00      	cmp	r5, #0
    310e:	d0f2      	beq.n	30f6 <z_sys_init_run_level+0x1e>
			if (rc != 0) {
    3110:	2800      	cmp	r0, #0
    3112:	d0eb      	beq.n	30ec <z_sys_init_run_level+0x14>
				if (rc < 0) {
    3114:	2800      	cmp	r0, #0
    3116:	dbe5      	blt.n	30e4 <z_sys_init_run_level+0xc>
				if (rc > UINT8_MAX) {
    3118:	28ff      	cmp	r0, #255	; 0xff
    311a:	dde5      	ble.n	30e8 <z_sys_init_run_level+0x10>
					rc = UINT8_MAX;
    311c:	20ff      	movs	r0, #255	; 0xff
    311e:	e7e3      	b.n	30e8 <z_sys_init_run_level+0x10>
		}
	}
}
    3120:	bd70      	pop	{r4, r5, r6, pc}
    3122:	bf00      	nop
    3124:	00005f30 	.word	0x00005f30

00003128 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
    3128:	b510      	push	{r4, lr}
    312a:	b086      	sub	sp, #24
	struct k_thread *thread = &z_idle_threads[i];
    312c:	23b0      	movs	r3, #176	; 0xb0
    312e:	4c10      	ldr	r4, [pc, #64]	; (3170 <init_idle_thread+0x48>)
    3130:	fb03 4400 	mla	r4, r3, r0, r4
	k_thread_stack_t *stack = z_idle_stacks[i];
    3134:	eb00 0c40 	add.w	ip, r0, r0, lsl #1
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    3138:	4b0e      	ldr	r3, [pc, #56]	; (3174 <init_idle_thread+0x4c>)
    313a:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
	z_setup_new_thread(thread, stack,
    313e:	4a0e      	ldr	r2, [pc, #56]	; (3178 <init_idle_thread+0x50>)
    3140:	9205      	str	r2, [sp, #20]
    3142:	2201      	movs	r2, #1
    3144:	9204      	str	r2, [sp, #16]
    3146:	220f      	movs	r2, #15
    3148:	9203      	str	r2, [sp, #12]
    314a:	2200      	movs	r2, #0
    314c:	9202      	str	r2, [sp, #8]
    314e:	9201      	str	r2, [sp, #4]
    3150:	9300      	str	r3, [sp, #0]
    3152:	4b0a      	ldr	r3, [pc, #40]	; (317c <init_idle_thread+0x54>)
    3154:	f44f 72a0 	mov.w	r2, #320	; 0x140
    3158:	4909      	ldr	r1, [pc, #36]	; (3180 <init_idle_thread+0x58>)
    315a:	eb01 11cc 	add.w	r1, r1, ip, lsl #7
    315e:	4620      	mov	r0, r4
    3160:	f000 f906 	bl	3370 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    3164:	7b63      	ldrb	r3, [r4, #13]
    3166:	f023 0304 	bic.w	r3, r3, #4
    316a:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
    316c:	b006      	add	sp, #24
    316e:	bd10      	pop	{r4, pc}
    3170:	200000f0 	.word	0x200000f0
    3174:	200007d4 	.word	0x200007d4
    3178:	00005f20 	.word	0x00005f20
    317c:	000034cd 	.word	0x000034cd
    3180:	20001080 	.word	0x20001080

00003184 <bg_thread_main>:
{
    3184:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    3186:	4b0a      	ldr	r3, [pc, #40]	; (31b0 <bg_thread_main+0x2c>)
    3188:	2201      	movs	r2, #1
    318a:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    318c:	2003      	movs	r0, #3
    318e:	f7ff ffa3 	bl	30d8 <z_sys_init_run_level>
	boot_banner();
    3192:	f000 ff01 	bl	3f98 <boot_banner>
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
    3196:	2004      	movs	r0, #4
    3198:	f7ff ff9e 	bl	30d8 <z_sys_init_run_level>
	z_init_static_threads();
    319c:	f000 f94c 	bl	3438 <z_init_static_threads>
	(void)main();
    31a0:	f7fd f918 	bl	3d4 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    31a4:	4a03      	ldr	r2, [pc, #12]	; (31b4 <bg_thread_main+0x30>)
    31a6:	7b13      	ldrb	r3, [r2, #12]
    31a8:	f023 0301 	bic.w	r3, r3, #1
    31ac:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    31ae:	bd08      	pop	{r3, pc}
    31b0:	20000816 	.word	0x20000816
    31b4:	200001a0 	.word	0x200001a0

000031b8 <switch_to_main_thread>:
	return stack_ptr;
}

__boot_func
static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
    31b8:	b508      	push	{r3, lr}
    31ba:	4601      	mov	r1, r0
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    31bc:	4a01      	ldr	r2, [pc, #4]	; (31c4 <switch_to_main_thread+0xc>)
    31be:	4802      	ldr	r0, [pc, #8]	; (31c8 <switch_to_main_thread+0x10>)
    31c0:	f7fd ff5a 	bl	1078 <arch_switch_to_main_thread>
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */
	z_swap_unlocked();
#endif
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    31c4:	00003185 	.word	0x00003185
    31c8:	200001a0 	.word	0x200001a0

000031cc <z_bss_zero>:
{
    31cc:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    31ce:	4803      	ldr	r0, [pc, #12]	; (31dc <z_bss_zero+0x10>)
    31d0:	4a03      	ldr	r2, [pc, #12]	; (31e0 <z_bss_zero+0x14>)
    31d2:	1a12      	subs	r2, r2, r0
    31d4:	2100      	movs	r1, #0
    31d6:	f002 fa41 	bl	565c <z_early_memset>
}
    31da:	bd08      	pop	{r3, pc}
    31dc:	200000d0 	.word	0x200000d0
    31e0:	20000818 	.word	0x20000818

000031e4 <z_init_cpu>:
{
    31e4:	b510      	push	{r4, lr}
    31e6:	4604      	mov	r4, r0
	init_idle_thread(id);
    31e8:	f7ff ff9e 	bl	3128 <init_idle_thread>
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    31ec:	23b0      	movs	r3, #176	; 0xb0
    31ee:	490b      	ldr	r1, [pc, #44]	; (321c <z_init_cpu+0x38>)
    31f0:	fb03 1104 	mla	r1, r3, r4, r1
    31f4:	4a0a      	ldr	r2, [pc, #40]	; (3220 <z_init_cpu+0x3c>)
    31f6:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    31fa:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    31fe:	60d9      	str	r1, [r3, #12]
	_kernel.cpus[id].id = id;
    3200:	751c      	strb	r4, [r3, #20]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    3202:	eb04 1144 	add.w	r1, r4, r4, lsl #5
    3206:	4b07      	ldr	r3, [pc, #28]	; (3224 <z_init_cpu+0x40>)
    3208:	eb03 1381 	add.w	r3, r3, r1, lsl #6
    320c:	f503 6304 	add.w	r3, r3, #2112	; 0x840
	_kernel.cpus[id].irq_stack =
    3210:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    3214:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
    3218:	6053      	str	r3, [r2, #4]
}
    321a:	bd10      	pop	{r4, pc}
    321c:	200000f0 	.word	0x200000f0
    3220:	200007d4 	.word	0x200007d4
    3224:	20000840 	.word	0x20000840

00003228 <prepare_multithreading>:
{
    3228:	b570      	push	{r4, r5, r6, lr}
    322a:	b086      	sub	sp, #24
	z_sched_init();
    322c:	f000 fc40 	bl	3ab0 <z_sched_init>
	_kernel.ready_q.cache = &z_main_thread;
    3230:	4d10      	ldr	r5, [pc, #64]	; (3274 <prepare_multithreading+0x4c>)
    3232:	4b11      	ldr	r3, [pc, #68]	; (3278 <prepare_multithreading+0x50>)
    3234:	61dd      	str	r5, [r3, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    3236:	4b11      	ldr	r3, [pc, #68]	; (327c <prepare_multithreading+0x54>)
    3238:	9305      	str	r3, [sp, #20]
    323a:	2301      	movs	r3, #1
    323c:	9304      	str	r3, [sp, #16]
    323e:	2400      	movs	r4, #0
    3240:	9403      	str	r4, [sp, #12]
    3242:	9402      	str	r4, [sp, #8]
    3244:	9401      	str	r4, [sp, #4]
    3246:	9400      	str	r4, [sp, #0]
    3248:	4b0d      	ldr	r3, [pc, #52]	; (3280 <prepare_multithreading+0x58>)
    324a:	f44f 6280 	mov.w	r2, #1024	; 0x400
    324e:	490d      	ldr	r1, [pc, #52]	; (3284 <prepare_multithreading+0x5c>)
    3250:	4628      	mov	r0, r5
    3252:	f000 f88d 	bl	3370 <z_setup_new_thread>
    3256:	4606      	mov	r6, r0
    3258:	7b6b      	ldrb	r3, [r5, #13]
    325a:	f023 0304 	bic.w	r3, r3, #4
    325e:	736b      	strb	r3, [r5, #13]
	z_ready_thread(&z_main_thread);
    3260:	4628      	mov	r0, r5
    3262:	f002 fa76 	bl	5752 <z_ready_thread>
	z_init_cpu(0);
    3266:	4620      	mov	r0, r4
    3268:	f7ff ffbc 	bl	31e4 <z_init_cpu>
}
    326c:	4630      	mov	r0, r6
    326e:	b006      	add	sp, #24
    3270:	bd70      	pop	{r4, r5, r6, pc}
    3272:	bf00      	nop
    3274:	200001a0 	.word	0x200001a0
    3278:	200007d4 	.word	0x200007d4
    327c:	00005f28 	.word	0x00005f28
    3280:	00003185 	.word	0x00003185
    3284:	20001200 	.word	0x20001200

00003288 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    3288:	b500      	push	{lr}
    328a:	b0ad      	sub	sp, #180	; 0xb4
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    328c:	2000      	movs	r0, #0
    328e:	f7ff ff23 	bl	30d8 <z_sys_init_run_level>
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    3292:	4b1d      	ldr	r3, [pc, #116]	; (3308 <z_cstart+0x80>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    3294:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    3298:	4c1c      	ldr	r4, [pc, #112]	; (330c <z_cstart+0x84>)
    329a:	6963      	ldr	r3, [r4, #20]
    329c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    32a0:	6163      	str	r3, [r4, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    32a2:	23e0      	movs	r3, #224	; 0xe0
    32a4:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    32a8:	2500      	movs	r5, #0
    32aa:	77e5      	strb	r5, [r4, #31]
    32ac:	7625      	strb	r5, [r4, #24]
    32ae:	7665      	strb	r5, [r4, #25]
    32b0:	76a5      	strb	r5, [r4, #26]
    32b2:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    32b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
    32b8:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    32bc:	6263      	str	r3, [r4, #36]	; 0x24
    32be:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    32c2:	f7fe f84d 	bl	1360 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    32c6:	f7fd fdc9 	bl	e5c <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    32ca:	f04f 33ff 	mov.w	r3, #4294967295
    32ce:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    32d0:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    32d2:	f7fe f967 	bl	15a4 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    32d6:	f7fe f8f7 	bl	14c8 <z_arm_configure_static_mpu_regions>
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
    32da:	2401      	movs	r4, #1
    32dc:	f88d 400d 	strb.w	r4, [sp, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
    32e0:	f88d 400c 	strb.w	r4, [sp, #12]
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
    32e4:	9526      	str	r5, [sp, #152]	; 0x98
	dummy_thread->stack_info.size = 0U;
    32e6:	9527      	str	r5, [sp, #156]	; 0x9c
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif
#if (CONFIG_HEAP_MEM_POOL_SIZE > 0)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
    32e8:	9529      	str	r5, [sp, #164]	; 0xa4

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
    32ea:	4b09      	ldr	r3, [pc, #36]	; (3310 <z_cstart+0x88>)
    32ec:	f8c3 d008 	str.w	sp, [r3, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    32f0:	f7ff fee6 	bl	30c0 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
    32f4:	4620      	mov	r0, r4
    32f6:	f7ff feef 	bl	30d8 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    32fa:	2002      	movs	r0, #2
    32fc:	f7ff feec 	bl	30d8 <z_sys_init_run_level>
	timing_init();
	timing_start();
#endif

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
    3300:	f7ff ff92 	bl	3228 <prepare_multithreading>
    3304:	f7ff ff58 	bl	31b8 <switch_to_main_thread>
    3308:	20001080 	.word	0x20001080
    330c:	e000ed00 	.word	0xe000ed00
    3310:	200007d4 	.word	0x200007d4

00003314 <z_thread_monitor_exit>:
	__asm__ volatile(
    3314:	f04f 0320 	mov.w	r3, #32
    3318:	f3ef 8111 	mrs	r1, BASEPRI
    331c:	f383 8812 	msr	BASEPRI_MAX, r3
    3320:	f3bf 8f6f 	isb	sy
 */
void z_thread_monitor_exit(struct k_thread *thread)
{
	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	if (thread == _kernel.threads) {
    3324:	4b0a      	ldr	r3, [pc, #40]	; (3350 <z_thread_monitor_exit+0x3c>)
    3326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3328:	4283      	cmp	r3, r0
    332a:	d104      	bne.n	3336 <z_thread_monitor_exit+0x22>
		_kernel.threads = _kernel.threads->next_thread;
    332c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    332e:	4b08      	ldr	r3, [pc, #32]	; (3350 <z_thread_monitor_exit+0x3c>)
    3330:	629a      	str	r2, [r3, #40]	; 0x28
    3332:	e007      	b.n	3344 <z_thread_monitor_exit+0x30>
		struct k_thread *prev_thread;

		prev_thread = _kernel.threads;
		while ((prev_thread != NULL) &&
			(thread != prev_thread->next_thread)) {
			prev_thread = prev_thread->next_thread;
    3334:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
    3336:	b113      	cbz	r3, 333e <z_thread_monitor_exit+0x2a>
			(thread != prev_thread->next_thread)) {
    3338:	6f1a      	ldr	r2, [r3, #112]	; 0x70
		while ((prev_thread != NULL) &&
    333a:	4282      	cmp	r2, r0
    333c:	d1fa      	bne.n	3334 <z_thread_monitor_exit+0x20>
		}
		if (prev_thread != NULL) {
    333e:	b10b      	cbz	r3, 3344 <z_thread_monitor_exit+0x30>
			prev_thread->next_thread = thread->next_thread;
    3340:	6f02      	ldr	r2, [r0, #112]	; 0x70
    3342:	671a      	str	r2, [r3, #112]	; 0x70
	__asm__ volatile(
    3344:	f381 8811 	msr	BASEPRI, r1
    3348:	f3bf 8f6f 	isb	sy
		}
	}

	k_spin_unlock(&z_thread_monitor_lock, key);
}
    334c:	4770      	bx	lr
    334e:	bf00      	nop
    3350:	200007d4 	.word	0x200007d4

00003354 <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, k_timeout_t delay)
{
    3354:	b508      	push	{r3, lr}
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    3356:	ea53 0102 	orrs.w	r1, r3, r2
    335a:	d102      	bne.n	3362 <schedule_new_thread+0xe>
	z_impl_k_thread_start(thread);
    335c:	f002 f99f 	bl	569e <z_impl_k_thread_start>
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
    3360:	bd08      	pop	{r3, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    3362:	4902      	ldr	r1, [pc, #8]	; (336c <schedule_new_thread+0x18>)
    3364:	3018      	adds	r0, #24
    3366:	f000 fd0b 	bl	3d80 <z_add_timeout>
    336a:	e7f9      	b.n	3360 <schedule_new_thread+0xc>
    336c:	0000578b 	.word	0x0000578b

00003370 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    3370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3374:	b085      	sub	sp, #20
    3376:	4604      	mov	r4, r0
    3378:	460f      	mov	r7, r1
    337a:	4615      	mov	r5, r2
    337c:	461e      	mov	r6, r3
    337e:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
    3382:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
    3386:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
    338a:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    338e:	f100 0358 	add.w	r3, r0, #88	; 0x58
 * @param list the doubly-linked list
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    3392:	6583      	str	r3, [r0, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
    3394:	65c3      	str	r3, [r0, #92]	; 0x5c
	k_object_access_grant(new_thread, new_thread);
#endif
	z_waitq_init(&new_thread->join_queue);

	/* Initialize various struct k_thread members */
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
    3396:	9b12      	ldr	r3, [sp, #72]	; 0x48
    3398:	2204      	movs	r2, #4
    339a:	9911      	ldr	r1, [sp, #68]	; 0x44
    339c:	f002 f983 	bl	56a6 <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
    33a0:	462a      	mov	r2, r5
    33a2:	4639      	mov	r1, r7
    33a4:	4620      	mov	r0, r4
    33a6:	f002 f961 	bl	566c <setup_thread_stack>
    33aa:	4605      	mov	r5, r0
	 */
	__ASSERT_NO_MSG(arch_mem_coherent(new_thread));
	__ASSERT_NO_MSG(!arch_mem_coherent(stack));
#endif

	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    33ac:	f8cd 8008 	str.w	r8, [sp, #8]
    33b0:	f8cd 9004 	str.w	r9, [sp, #4]
    33b4:	f8cd a000 	str.w	sl, [sp]
    33b8:	4633      	mov	r3, r6
    33ba:	4602      	mov	r2, r0
    33bc:	4639      	mov	r1, r7
    33be:	4620      	mov	r0, r4
    33c0:	f7fd fe14 	bl	fec <arch_new_thread>

	/* static threads overwrite it afterwards with real value */
	new_thread->init_data = NULL;
    33c4:	2300      	movs	r3, #0
    33c6:	6563      	str	r3, [r4, #84]	; 0x54
#ifdef CONFIG_THREAD_CUSTOM_DATA
	/* Initialize custom data field (value is opaque to kernel) */
	new_thread->custom_data = NULL;
#endif
#ifdef CONFIG_THREAD_MONITOR
	new_thread->entry.pEntry = entry;
    33c8:	6626      	str	r6, [r4, #96]	; 0x60
	new_thread->entry.parameter1 = p1;
    33ca:	f8c4 a064 	str.w	sl, [r4, #100]	; 0x64
	new_thread->entry.parameter2 = p2;
    33ce:	f8c4 9068 	str.w	r9, [r4, #104]	; 0x68
	new_thread->entry.parameter3 = p3;
    33d2:	f8c4 806c 	str.w	r8, [r4, #108]	; 0x6c
	__asm__ volatile(
    33d6:	f04f 0320 	mov.w	r3, #32
    33da:	f3ef 8211 	mrs	r2, BASEPRI
    33de:	f383 8812 	msr	BASEPRI_MAX, r3
    33e2:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	new_thread->next_thread = _kernel.threads;
    33e6:	4b13      	ldr	r3, [pc, #76]	; (3434 <z_setup_new_thread+0xc4>)
    33e8:	6a99      	ldr	r1, [r3, #40]	; 0x28
    33ea:	6721      	str	r1, [r4, #112]	; 0x70
	_kernel.threads = new_thread;
    33ec:	629c      	str	r4, [r3, #40]	; 0x28
	__asm__ volatile(
    33ee:	f382 8811 	msr	BASEPRI, r2
    33f2:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&z_thread_monitor_lock, key);
#endif
#ifdef CONFIG_THREAD_NAME
	if (name != NULL) {
    33f6:	f1bb 0f00 	cmp.w	fp, #0
    33fa:	d013      	beq.n	3424 <z_setup_new_thread+0xb4>
		strncpy(new_thread->name, name,
    33fc:	221f      	movs	r2, #31
    33fe:	4659      	mov	r1, fp
    3400:	f104 0074 	add.w	r0, r4, #116	; 0x74
    3404:	f001 fa89 	bl	491a <strncpy>
			CONFIG_THREAD_MAX_NAME_LEN - 1);
		/* Ensure NULL termination, truncate if longer */
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
    3408:	2300      	movs	r3, #0
    340a:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
		new_thread->base.cpu_mask = -1; /* allow all cpus */
	}
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
    340e:	4b09      	ldr	r3, [pc, #36]	; (3434 <z_setup_new_thread+0xc4>)
    3410:	689b      	ldr	r3, [r3, #8]
    3412:	b15b      	cbz	r3, 342c <z_setup_new_thread+0xbc>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
    3414:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    3418:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
#endif

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, create, new_thread);

	return stack_ptr;
}
    341c:	4628      	mov	r0, r5
    341e:	b005      	add	sp, #20
    3420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		new_thread->name[0] = '\0';
    3424:	2300      	movs	r3, #0
    3426:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    342a:	e7f0      	b.n	340e <z_setup_new_thread+0x9e>
		new_thread->resource_pool = NULL;
    342c:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		return stack_ptr;
    3430:	e7f4      	b.n	341c <z_setup_new_thread+0xac>
    3432:	bf00      	nop
    3434:	200007d4 	.word	0x200007d4

00003438 <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
    3438:	b530      	push	{r4, r5, lr}
    343a:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
    343c:	4c21      	ldr	r4, [pc, #132]	; (34c4 <z_init_static_threads+0x8c>)
    343e:	e014      	b.n	346a <z_init_static_threads+0x32>
		z_setup_new_thread(
    3440:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    3442:	9305      	str	r3, [sp, #20]
    3444:	6a23      	ldr	r3, [r4, #32]
    3446:	9304      	str	r3, [sp, #16]
    3448:	69e3      	ldr	r3, [r4, #28]
    344a:	9303      	str	r3, [sp, #12]
    344c:	69a3      	ldr	r3, [r4, #24]
    344e:	9302      	str	r3, [sp, #8]
    3450:	6963      	ldr	r3, [r4, #20]
    3452:	9301      	str	r3, [sp, #4]
    3454:	6923      	ldr	r3, [r4, #16]
    3456:	9300      	str	r3, [sp, #0]
    3458:	68e3      	ldr	r3, [r4, #12]
    345a:	68a2      	ldr	r2, [r4, #8]
    345c:	6861      	ldr	r1, [r4, #4]
    345e:	6820      	ldr	r0, [r4, #0]
    3460:	f7ff ff86 	bl	3370 <z_setup_new_thread>
			thread_data->init_p3,
			thread_data->init_prio,
			thread_data->init_options,
			thread_data->init_name);

		thread_data->init_thread->init_data = thread_data;
    3464:	6823      	ldr	r3, [r4, #0]
    3466:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    3468:	3430      	adds	r4, #48	; 0x30
    346a:	4b17      	ldr	r3, [pc, #92]	; (34c8 <z_init_static_threads+0x90>)
    346c:	429c      	cmp	r4, r3
    346e:	d3e7      	bcc.n	3440 <z_init_static_threads+0x8>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
    3470:	f000 f928 	bl	36c4 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    3474:	4c13      	ldr	r4, [pc, #76]	; (34c4 <z_init_static_threads+0x8c>)
    3476:	e000      	b.n	347a <z_init_static_threads+0x42>
    3478:	3430      	adds	r4, #48	; 0x30
    347a:	4b13      	ldr	r3, [pc, #76]	; (34c8 <z_init_static_threads+0x90>)
    347c:	429c      	cmp	r4, r3
    347e:	d21c      	bcs.n	34ba <z_init_static_threads+0x82>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    3480:	6a60      	ldr	r0, [r4, #36]	; 0x24
    3482:	f1b0 3fff 	cmp.w	r0, #4294967295
    3486:	d0f7      	beq.n	3478 <z_init_static_threads+0x40>
			schedule_new_thread(thread_data->init_thread,
    3488:	6825      	ldr	r5, [r4, #0]
					    K_MSEC(thread_data->init_delay));
    348a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    348e:	17c1      	asrs	r1, r0, #31
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    3490:	03c9      	lsls	r1, r1, #15
    3492:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    3496:	03c0      	lsls	r0, r0, #15
    3498:	f240 33e7 	movw	r3, #999	; 0x3e7
    349c:	18c0      	adds	r0, r0, r3
    349e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    34a2:	f04f 0300 	mov.w	r3, #0
    34a6:	f141 0100 	adc.w	r1, r1, #0
    34aa:	f7fc fe29 	bl	100 <__aeabi_uldivmod>
    34ae:	4602      	mov	r2, r0
    34b0:	460b      	mov	r3, r1
			schedule_new_thread(thread_data->init_thread,
    34b2:	4628      	mov	r0, r5
    34b4:	f7ff ff4e 	bl	3354 <schedule_new_thread>
    34b8:	e7de      	b.n	3478 <z_init_static_threads+0x40>
		}
	}
	k_sched_unlock();
    34ba:	f000 faa7 	bl	3a0c <k_sched_unlock>
}
    34be:	b007      	add	sp, #28
    34c0:	bd30      	pop	{r4, r5, pc}
    34c2:	bf00      	nop
    34c4:	00005c18 	.word	0x00005c18
    34c8:	00005c18 	.word	0x00005c18

000034cc <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    34cc:	b508      	push	{r3, lr}
    34ce:	e001      	b.n	34d4 <idle+0x8>
	arch_cpu_idle();
    34d0:	f7fd fcca 	bl	e68 <arch_cpu_idle>
	__asm__ volatile(
    34d4:	f04f 0220 	mov.w	r2, #32
    34d8:	f3ef 8311 	mrs	r3, BASEPRI
    34dc:	f382 8812 	msr	BASEPRI_MAX, r2
    34e0:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    34e4:	f002 fa27 	bl	5936 <z_get_next_timeout_expiry>
    34e8:	4b05      	ldr	r3, [pc, #20]	; (3500 <idle+0x34>)
    34ea:	6198      	str	r0, [r3, #24]
	return !z_sys_post_kernel;
    34ec:	4b05      	ldr	r3, [pc, #20]	; (3504 <idle+0x38>)
    34ee:	781b      	ldrb	r3, [r3, #0]
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    34f0:	2b00      	cmp	r3, #0
    34f2:	d0ed      	beq.n	34d0 <idle+0x4>
    34f4:	f7fd fbdc 	bl	cb0 <pm_system_suspend>
    34f8:	2800      	cmp	r0, #0
    34fa:	d1eb      	bne.n	34d4 <idle+0x8>
    34fc:	e7e8      	b.n	34d0 <idle+0x4>
    34fe:	bf00      	nop
    3500:	200007d4 	.word	0x200007d4
    3504:	20000816 	.word	0x20000816

00003508 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    3508:	b538      	push	{r3, r4, r5, lr}
    350a:	4604      	mov	r4, r0
    350c:	f04f 0320 	mov.w	r3, #32
    3510:	f3ef 8511 	mrs	r5, BASEPRI
    3514:	f383 8812 	msr	BASEPRI_MAX, r3
    3518:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    351c:	f002 f9b0 	bl	5880 <z_unpend_first_thread>

	if (thread != NULL) {
    3520:	b148      	cbz	r0, 3536 <z_impl_k_sem_give+0x2e>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    3522:	2200      	movs	r2, #0
    3524:	f8c0 20ac 	str.w	r2, [r0, #172]	; 0xac
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    3528:	f002 f913 	bl	5752 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    352c:	4629      	mov	r1, r5
    352e:	4807      	ldr	r0, [pc, #28]	; (354c <z_impl_k_sem_give+0x44>)
    3530:	f000 f8b2 	bl	3698 <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    3534:	bd38      	pop	{r3, r4, r5, pc}
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    3536:	68a3      	ldr	r3, [r4, #8]
    3538:	68e2      	ldr	r2, [r4, #12]
    353a:	4293      	cmp	r3, r2
    353c:	d003      	beq.n	3546 <z_impl_k_sem_give+0x3e>
    353e:	2201      	movs	r2, #1
    3540:	4413      	add	r3, r2
    3542:	60a3      	str	r3, [r4, #8]
}
    3544:	e7f2      	b.n	352c <z_impl_k_sem_give+0x24>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    3546:	2200      	movs	r2, #0
    3548:	e7fa      	b.n	3540 <z_impl_k_sem_give+0x38>
    354a:	bf00      	nop
    354c:	20000800 	.word	0x20000800

00003550 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    3550:	b510      	push	{r4, lr}
    3552:	b082      	sub	sp, #8
    3554:	f04f 0420 	mov.w	r4, #32
    3558:	f3ef 8111 	mrs	r1, BASEPRI
    355c:	f384 8812 	msr	BASEPRI_MAX, r4
    3560:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    3564:	6884      	ldr	r4, [r0, #8]
    3566:	b144      	cbz	r4, 357a <z_impl_k_sem_take+0x2a>
		sem->count--;
    3568:	3c01      	subs	r4, #1
    356a:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
    356c:	f381 8811 	msr	BASEPRI, r1
    3570:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    3574:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    3576:	b002      	add	sp, #8
    3578:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    357a:	ea53 0402 	orrs.w	r4, r3, r2
    357e:	d006      	beq.n	358e <z_impl_k_sem_take+0x3e>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    3580:	9200      	str	r2, [sp, #0]
    3582:	9301      	str	r3, [sp, #4]
    3584:	4602      	mov	r2, r0
    3586:	4805      	ldr	r0, [pc, #20]	; (359c <z_impl_k_sem_take+0x4c>)
    3588:	f000 f9ea 	bl	3960 <z_pend_curr>
	return ret;
    358c:	e7f3      	b.n	3576 <z_impl_k_sem_take+0x26>
    358e:	f381 8811 	msr	BASEPRI, r1
    3592:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    3596:	f06f 000f 	mvn.w	r0, #15
    359a:	e7ec      	b.n	3576 <z_impl_k_sem_take+0x26>
    359c:	20000800 	.word	0x20000800

000035a0 <sliceable>:


static inline int is_preempt(struct k_thread *thread)
{
	/* explanation in kernel_struct.h */
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    35a0:	89c3      	ldrh	r3, [r0, #14]
static inline bool sliceable(struct k_thread *thread)
{
	bool ret = is_preempt(thread)
		&& !z_is_thread_prevented_from_running(thread)
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
		&& !z_is_idle_thread_object(thread);
    35a2:	2b7f      	cmp	r3, #127	; 0x7f
    35a4:	d80e      	bhi.n	35c4 <sliceable+0x24>
	uint8_t state = thread->base.thread_state;
    35a6:	7b43      	ldrb	r3, [r0, #13]
		&& !z_is_thread_prevented_from_running(thread)
    35a8:	f013 0f1f 	tst.w	r3, #31
    35ac:	d10c      	bne.n	35c8 <sliceable+0x28>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    35ae:	f990 200e 	ldrsb.w	r2, [r0, #14]
    35b2:	4b08      	ldr	r3, [pc, #32]	; (35d4 <sliceable+0x34>)
    35b4:	681b      	ldr	r3, [r3, #0]
    35b6:	429a      	cmp	r2, r3
    35b8:	db08      	blt.n	35cc <sliceable+0x2c>
		&& !z_is_idle_thread_object(thread);
    35ba:	4b07      	ldr	r3, [pc, #28]	; (35d8 <sliceable+0x38>)
    35bc:	4298      	cmp	r0, r3
    35be:	d007      	beq.n	35d0 <sliceable+0x30>
    35c0:	2001      	movs	r0, #1
    35c2:	4770      	bx	lr
    35c4:	2000      	movs	r0, #0
    35c6:	4770      	bx	lr
    35c8:	2000      	movs	r0, #0
    35ca:	4770      	bx	lr
    35cc:	2000      	movs	r0, #0
    35ce:	4770      	bx	lr
    35d0:	2000      	movs	r0, #0
#ifdef CONFIG_TIMESLICE_PER_THREAD
	ret |= thread->base.slice_ticks != 0;
#endif

	return ret;
}
    35d2:	4770      	bx	lr
    35d4:	20000804 	.word	0x20000804
    35d8:	200000f0 	.word	0x200000f0

000035dc <add_thread_timeout>:
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    35dc:	f1b3 3fff 	cmp.w	r3, #4294967295
    35e0:	bf08      	it	eq
    35e2:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    35e6:	d100      	bne.n	35ea <add_thread_timeout+0xe>
    35e8:	4770      	bx	lr
{
    35ea:	b508      	push	{r3, lr}
    35ec:	4902      	ldr	r1, [pc, #8]	; (35f8 <add_thread_timeout+0x1c>)
    35ee:	3018      	adds	r0, #24
    35f0:	f000 fbc6 	bl	3d80 <z_add_timeout>
		z_add_thread_timeout(thread, timeout);
	}
}
    35f4:	bd08      	pop	{r3, pc}
    35f6:	bf00      	nop
    35f8:	0000578b 	.word	0x0000578b

000035fc <z_reset_time_slice>:
{
    35fc:	b510      	push	{r4, lr}
	int ret = slice_ticks;
    35fe:	4b07      	ldr	r3, [pc, #28]	; (361c <z_reset_time_slice+0x20>)
    3600:	681c      	ldr	r4, [r3, #0]
	if (slice_time(curr) != 0) {
    3602:	b904      	cbnz	r4, 3606 <z_reset_time_slice+0xa>
}
    3604:	bd10      	pop	{r4, pc}
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
    3606:	f7fe fe45 	bl	2294 <sys_clock_elapsed>
    360a:	4404      	add	r4, r0
    360c:	4b04      	ldr	r3, [pc, #16]	; (3620 <z_reset_time_slice+0x24>)
    360e:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
    3610:	2100      	movs	r1, #0
    3612:	4b02      	ldr	r3, [pc, #8]	; (361c <z_reset_time_slice+0x20>)
    3614:	6818      	ldr	r0, [r3, #0]
    3616:	f002 f9a5 	bl	5964 <z_set_timeout_expiry>
}
    361a:	e7f3      	b.n	3604 <z_reset_time_slice+0x8>
    361c:	20000808 	.word	0x20000808
    3620:	200007d4 	.word	0x200007d4

00003624 <k_sched_time_slice_set>:
{
    3624:	b570      	push	{r4, r5, r6, lr}
    3626:	4604      	mov	r4, r0
    3628:	460e      	mov	r6, r1
	LOCKED(&sched_spinlock) {
    362a:	2300      	movs	r3, #0
	__asm__ volatile(
    362c:	f04f 0220 	mov.w	r2, #32
    3630:	f3ef 8511 	mrs	r5, BASEPRI
    3634:	f382 8812 	msr	BASEPRI_MAX, r2
    3638:	f3bf 8f6f 	isb	sy
	z_spin_lock_set_owner(l);
#if defined(CONFIG_SPIN_LOCK_TIME_LIMIT) && (CONFIG_SPIN_LOCK_TIME_LIMIT != 0)
	l->lock_time = sys_clock_cycle_get_32();
#endif /* CONFIG_SPIN_LOCK_TIME_LIMIT */
#endif/* CONFIG_SPIN_VALIDATE */
	return k;
    363c:	e00e      	b.n	365c <k_sched_time_slice_set+0x38>
			slice_ticks = MAX(2, slice_ticks);
    363e:	2802      	cmp	r0, #2
    3640:	bfb8      	it	lt
    3642:	2002      	movlt	r0, #2
    3644:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
    3646:	4b11      	ldr	r3, [pc, #68]	; (368c <k_sched_time_slice_set+0x68>)
    3648:	601e      	str	r6, [r3, #0]
		z_reset_time_slice(_current);
    364a:	4b11      	ldr	r3, [pc, #68]	; (3690 <k_sched_time_slice_set+0x6c>)
    364c:	6898      	ldr	r0, [r3, #8]
    364e:	f7ff ffd5 	bl	35fc <z_reset_time_slice>
	__asm__ volatile(
    3652:	f385 8811 	msr	BASEPRI, r5
    3656:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    365a:	2301      	movs	r3, #1
    365c:	b9a3      	cbnz	r3, 3688 <k_sched_time_slice_set+0x64>
		_current_cpu->slice_ticks = 0;
    365e:	4b0c      	ldr	r3, [pc, #48]	; (3690 <k_sched_time_slice_set+0x6c>)
    3660:	2200      	movs	r2, #0
    3662:	611a      	str	r2, [r3, #16]
			return (uint32_t)((t * to_hz + off) / from_hz);
    3664:	0c61      	lsrs	r1, r4, #17
    3666:	03e0      	lsls	r0, r4, #15
    3668:	f240 33e7 	movw	r3, #999	; 0x3e7
    366c:	18c0      	adds	r0, r0, r3
    366e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    3672:	f04f 0300 	mov.w	r3, #0
    3676:	f141 0100 	adc.w	r1, r1, #0
    367a:	f7fc fd41 	bl	100 <__aeabi_uldivmod>
		slice_ticks = k_ms_to_ticks_ceil32(slice);
    367e:	4b05      	ldr	r3, [pc, #20]	; (3694 <k_sched_time_slice_set+0x70>)
    3680:	6018      	str	r0, [r3, #0]
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    3682:	2c00      	cmp	r4, #0
    3684:	dcdb      	bgt.n	363e <k_sched_time_slice_set+0x1a>
    3686:	e7de      	b.n	3646 <k_sched_time_slice_set+0x22>
}
    3688:	bd70      	pop	{r4, r5, r6, pc}
    368a:	bf00      	nop
    368c:	20000804 	.word	0x20000804
    3690:	200007d4 	.word	0x200007d4
    3694:	20000808 	.word	0x20000808

00003698 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
    3698:	b508      	push	{r3, lr}
	if (resched(key.key) && need_swap()) {
    369a:	460b      	mov	r3, r1
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    369c:	b959      	cbnz	r1, 36b6 <z_reschedule+0x1e>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    369e:	f3ef 8205 	mrs	r2, IPSR
    36a2:	b942      	cbnz	r2, 36b6 <z_reschedule+0x1e>
	new_thread = _kernel.ready_q.cache;
    36a4:	4a06      	ldr	r2, [pc, #24]	; (36c0 <z_reschedule+0x28>)
    36a6:	69d0      	ldr	r0, [r2, #28]
	return new_thread != _current;
    36a8:	6892      	ldr	r2, [r2, #8]
	if (resched(key.key) && need_swap()) {
    36aa:	4290      	cmp	r0, r2
    36ac:	d003      	beq.n	36b6 <z_reschedule+0x1e>
	ret = arch_swap(key);
    36ae:	4608      	mov	r0, r1
    36b0:	f7fd fc44 	bl	f3c <arch_swap>
		z_swap(lock, key);
    36b4:	e003      	b.n	36be <z_reschedule+0x26>
    36b6:	f383 8811 	msr	BASEPRI, r3
    36ba:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(lock, key);
		signal_pending_ipi();
	}
}
    36be:	bd08      	pop	{r3, pc}
    36c0:	200007d4 	.word	0x200007d4

000036c4 <k_sched_lock>:
	}
}

void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
    36c4:	2300      	movs	r3, #0
	__asm__ volatile(
    36c6:	f04f 0220 	mov.w	r2, #32
    36ca:	f3ef 8111 	mrs	r1, BASEPRI
    36ce:	f382 8812 	msr	BASEPRI_MAX, r2
    36d2:	f3bf 8f6f 	isb	sy
    36d6:	e009      	b.n	36ec <k_sched_lock+0x28>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    36d8:	4b06      	ldr	r3, [pc, #24]	; (36f4 <k_sched_lock+0x30>)
    36da:	689a      	ldr	r2, [r3, #8]
    36dc:	7bd3      	ldrb	r3, [r2, #15]
    36de:	3b01      	subs	r3, #1
    36e0:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    36e2:	f381 8811 	msr	BASEPRI, r1
    36e6:	f3bf 8f6f 	isb	sy
    36ea:	2301      	movs	r3, #1
    36ec:	2b00      	cmp	r3, #0
    36ee:	d0f3      	beq.n	36d8 <k_sched_lock+0x14>
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    36f0:	4770      	bx	lr
    36f2:	bf00      	nop
    36f4:	200007d4 	.word	0x200007d4

000036f8 <update_cache>:
{
    36f8:	b538      	push	{r3, r4, r5, lr}
    36fa:	4604      	mov	r4, r0
	return _priq_run_best(curr_cpu_runq());
    36fc:	4810      	ldr	r0, [pc, #64]	; (3740 <update_cache+0x48>)
    36fe:	f002 f821 	bl	5744 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    3702:	4605      	mov	r5, r0
    3704:	b170      	cbz	r0, 3724 <update_cache+0x2c>
	if (preempt_ok != 0) {
    3706:	b984      	cbnz	r4, 372a <update_cache+0x32>
	if (z_is_thread_prevented_from_running(_current)) {
    3708:	4b0e      	ldr	r3, [pc, #56]	; (3744 <update_cache+0x4c>)
    370a:	689b      	ldr	r3, [r3, #8]
	uint8_t state = thread->base.thread_state;
    370c:	7b5a      	ldrb	r2, [r3, #13]
    370e:	f012 0f1f 	tst.w	r2, #31
    3712:	d10a      	bne.n	372a <update_cache+0x32>
 * @return true if node is linked into a list, false if it is not
 */

static inline bool sys_dnode_is_linked(const sys_dnode_t *node)
{
	return node->next != NULL;
    3714:	69aa      	ldr	r2, [r5, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    3716:	b942      	cbnz	r2, 372a <update_cache+0x32>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    3718:	89da      	ldrh	r2, [r3, #14]
	if (is_preempt(_current) || is_metairq(thread)) {
    371a:	2a7f      	cmp	r2, #127	; 0x7f
    371c:	d905      	bls.n	372a <update_cache+0x32>
		_kernel.ready_q.cache = _current;
    371e:	4a09      	ldr	r2, [pc, #36]	; (3744 <update_cache+0x4c>)
    3720:	61d3      	str	r3, [r2, #28]
    3722:	e00b      	b.n	373c <update_cache+0x44>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    3724:	4b07      	ldr	r3, [pc, #28]	; (3744 <update_cache+0x4c>)
    3726:	68dd      	ldr	r5, [r3, #12]
    3728:	e7ed      	b.n	3706 <update_cache+0xe>
		if (thread != _current) {
    372a:	4b06      	ldr	r3, [pc, #24]	; (3744 <update_cache+0x4c>)
    372c:	689b      	ldr	r3, [r3, #8]
    372e:	42ab      	cmp	r3, r5
    3730:	d002      	beq.n	3738 <update_cache+0x40>
			z_reset_time_slice(thread);
    3732:	4628      	mov	r0, r5
    3734:	f7ff ff62 	bl	35fc <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    3738:	4b02      	ldr	r3, [pc, #8]	; (3744 <update_cache+0x4c>)
    373a:	61dd      	str	r5, [r3, #28]
}
    373c:	bd38      	pop	{r3, r4, r5, pc}
    373e:	bf00      	nop
    3740:	200007f4 	.word	0x200007f4
    3744:	200007d4 	.word	0x200007d4

00003748 <move_thread_to_end_of_prio_q>:
{
    3748:	b538      	push	{r3, r4, r5, lr}
    374a:	4605      	mov	r5, r0
	return (thread->base.thread_state & state) != 0U;
    374c:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
    374e:	f990 300d 	ldrsb.w	r3, [r0, #13]
    3752:	2b00      	cmp	r3, #0
    3754:	db0a      	blt.n	376c <move_thread_to_end_of_prio_q+0x24>
	thread->base.thread_state |= _THREAD_QUEUED;
    3756:	7b6b      	ldrb	r3, [r5, #13]
    3758:	f063 037f 	orn	r3, r3, #127	; 0x7f
    375c:	736b      	strb	r3, [r5, #13]
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    375e:	4b1b      	ldr	r3, [pc, #108]	; (37cc <move_thread_to_end_of_prio_q+0x84>)
    3760:	f853 4f20 	ldr.w	r4, [r3, #32]!
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3764:	429c      	cmp	r4, r3
    3766:	d110      	bne.n	378a <move_thread_to_end_of_prio_q+0x42>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    3768:	2400      	movs	r4, #0
    376a:	e00e      	b.n	378a <move_thread_to_end_of_prio_q+0x42>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    376c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    3770:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    3772:	4601      	mov	r1, r0
    3774:	4816      	ldr	r0, [pc, #88]	; (37d0 <move_thread_to_end_of_prio_q+0x88>)
    3776:	f001 ffcf 	bl	5718 <z_priq_dumb_remove>
}
    377a:	e7ec      	b.n	3756 <move_thread_to_end_of_prio_q+0xe>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    377c:	6863      	ldr	r3, [r4, #4]

	node->prev = prev;
    377e:	606b      	str	r3, [r5, #4]
	node->next = successor;
    3780:	602c      	str	r4, [r5, #0]
	prev->next = node;
    3782:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    3784:	6065      	str	r5, [r4, #4]
}
    3786:	e017      	b.n	37b8 <move_thread_to_end_of_prio_q+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    3788:	2400      	movs	r4, #0
    378a:	b16c      	cbz	r4, 37a8 <move_thread_to_end_of_prio_q+0x60>
		if (z_sched_prio_cmp(thread, t) > 0) {
    378c:	4621      	mov	r1, r4
    378e:	4628      	mov	r0, r5
    3790:	f001 ff9e 	bl	56d0 <z_sched_prio_cmp>
    3794:	2800      	cmp	r0, #0
    3796:	dcf1      	bgt.n	377c <move_thread_to_end_of_prio_q+0x34>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    3798:	2c00      	cmp	r4, #0
    379a:	d0f6      	beq.n	378a <move_thread_to_end_of_prio_q+0x42>
	return (node == list->tail) ? NULL : node->next;
    379c:	4b0b      	ldr	r3, [pc, #44]	; (37cc <move_thread_to_end_of_prio_q+0x84>)
    379e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    37a0:	429c      	cmp	r4, r3
    37a2:	d0f1      	beq.n	3788 <move_thread_to_end_of_prio_q+0x40>
    37a4:	6824      	ldr	r4, [r4, #0]
    37a6:	e7f0      	b.n	378a <move_thread_to_end_of_prio_q+0x42>
	sys_dnode_t *const tail = list->tail;
    37a8:	4b08      	ldr	r3, [pc, #32]	; (37cc <move_thread_to_end_of_prio_q+0x84>)
    37aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    37ac:	f103 0120 	add.w	r1, r3, #32
    37b0:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    37b2:	606a      	str	r2, [r5, #4]
	tail->next = node;
    37b4:	6015      	str	r5, [r2, #0]
	list->tail = node;
    37b6:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(thread == _current);
    37b8:	4b04      	ldr	r3, [pc, #16]	; (37cc <move_thread_to_end_of_prio_q+0x84>)
    37ba:	6898      	ldr	r0, [r3, #8]
    37bc:	42a8      	cmp	r0, r5
    37be:	bf14      	ite	ne
    37c0:	2000      	movne	r0, #0
    37c2:	2001      	moveq	r0, #1
    37c4:	f7ff ff98 	bl	36f8 <update_cache>
}
    37c8:	bd38      	pop	{r3, r4, r5, pc}
    37ca:	bf00      	nop
    37cc:	200007d4 	.word	0x200007d4
    37d0:	200007f4 	.word	0x200007f4

000037d4 <slice_expired_locked>:
{
    37d4:	b538      	push	{r3, r4, r5, lr}
    37d6:	4604      	mov	r4, r0
	struct k_thread *curr = _current;
    37d8:	4b07      	ldr	r3, [pc, #28]	; (37f8 <slice_expired_locked+0x24>)
    37da:	689d      	ldr	r5, [r3, #8]
	uint8_t state = thread->base.thread_state;
    37dc:	7b6b      	ldrb	r3, [r5, #13]
	if (!z_is_thread_prevented_from_running(curr)) {
    37de:	f013 0f1f 	tst.w	r3, #31
    37e2:	d004      	beq.n	37ee <slice_expired_locked+0x1a>
	z_reset_time_slice(curr);
    37e4:	4628      	mov	r0, r5
    37e6:	f7ff ff09 	bl	35fc <z_reset_time_slice>
}
    37ea:	4620      	mov	r0, r4
    37ec:	bd38      	pop	{r3, r4, r5, pc}
		move_thread_to_end_of_prio_q(curr);
    37ee:	4628      	mov	r0, r5
    37f0:	f7ff ffaa 	bl	3748 <move_thread_to_end_of_prio_q>
    37f4:	e7f6      	b.n	37e4 <slice_expired_locked+0x10>
    37f6:	bf00      	nop
    37f8:	200007d4 	.word	0x200007d4

000037fc <z_time_slice>:
{
    37fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    37fe:	4605      	mov	r5, r0
	__asm__ volatile(
    3800:	f04f 0320 	mov.w	r3, #32
    3804:	f3ef 8611 	mrs	r6, BASEPRI
    3808:	f383 8812 	msr	BASEPRI_MAX, r3
    380c:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    3810:	4b15      	ldr	r3, [pc, #84]	; (3868 <z_time_slice+0x6c>)
    3812:	6898      	ldr	r0, [r3, #8]
    3814:	4b15      	ldr	r3, [pc, #84]	; (386c <z_time_slice+0x70>)
    3816:	681b      	ldr	r3, [r3, #0]
    3818:	4298      	cmp	r0, r3
    381a:	d011      	beq.n	3840 <z_time_slice+0x44>
    381c:	4634      	mov	r4, r6
	pending_current = NULL;
    381e:	4b13      	ldr	r3, [pc, #76]	; (386c <z_time_slice+0x70>)
    3820:	2200      	movs	r2, #0
    3822:	601a      	str	r2, [r3, #0]
	int ret = slice_ticks;
    3824:	4b12      	ldr	r3, [pc, #72]	; (3870 <z_time_slice+0x74>)
    3826:	681b      	ldr	r3, [r3, #0]
	if (slice_time(_current) && sliceable(_current)) {
    3828:	b1b3      	cbz	r3, 3858 <z_time_slice+0x5c>
    382a:	f7ff feb9 	bl	35a0 <sliceable>
    382e:	b198      	cbz	r0, 3858 <z_time_slice+0x5c>
		if (ticks >= _current_cpu->slice_ticks) {
    3830:	4b0d      	ldr	r3, [pc, #52]	; (3868 <z_time_slice+0x6c>)
    3832:	691b      	ldr	r3, [r3, #16]
    3834:	42ab      	cmp	r3, r5
    3836:	dd0a      	ble.n	384e <z_time_slice+0x52>
			_current_cpu->slice_ticks -= ticks;
    3838:	1b5b      	subs	r3, r3, r5
    383a:	4a0b      	ldr	r2, [pc, #44]	; (3868 <z_time_slice+0x6c>)
    383c:	6113      	str	r3, [r2, #16]
    383e:	e00e      	b.n	385e <z_time_slice+0x62>
		z_reset_time_slice(_current);
    3840:	f7ff fedc 	bl	35fc <z_reset_time_slice>
	__asm__ volatile(
    3844:	f386 8811 	msr	BASEPRI, r6
    3848:	f3bf 8f6f 	isb	sy
		return;
    384c:	e00b      	b.n	3866 <z_time_slice+0x6a>
			key = slice_expired_locked(key);
    384e:	4630      	mov	r0, r6
    3850:	f7ff ffc0 	bl	37d4 <slice_expired_locked>
    3854:	4604      	mov	r4, r0
    3856:	e002      	b.n	385e <z_time_slice+0x62>
		_current_cpu->slice_ticks = 0;
    3858:	4b03      	ldr	r3, [pc, #12]	; (3868 <z_time_slice+0x6c>)
    385a:	2200      	movs	r2, #0
    385c:	611a      	str	r2, [r3, #16]
    385e:	f384 8811 	msr	BASEPRI, r4
    3862:	f3bf 8f6f 	isb	sy
}
    3866:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3868:	200007d4 	.word	0x200007d4
    386c:	20000800 	.word	0x20000800
    3870:	20000808 	.word	0x20000808

00003874 <ready_thread>:
	return (thread->base.thread_state & state) != 0U;
    3874:	7b42      	ldrb	r2, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    3876:	f990 300d 	ldrsb.w	r3, [r0, #13]
    387a:	2b00      	cmp	r3, #0
    387c:	db33      	blt.n	38e6 <ready_thread+0x72>
{
    387e:	b570      	push	{r4, r5, r6, lr}
    3880:	4604      	mov	r4, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    3882:	f012 0f1f 	tst.w	r2, #31
    3886:	d101      	bne.n	388c <ready_thread+0x18>
	return node->next != NULL;
    3888:	6986      	ldr	r6, [r0, #24]
    388a:	b106      	cbz	r6, 388e <ready_thread+0x1a>
}
    388c:	bd70      	pop	{r4, r5, r6, pc}
	thread->base.thread_state |= _THREAD_QUEUED;
    388e:	f062 027f 	orn	r2, r2, #127	; 0x7f
    3892:	7342      	strb	r2, [r0, #13]
	return list->head == list;
    3894:	4b14      	ldr	r3, [pc, #80]	; (38e8 <ready_thread+0x74>)
    3896:	f853 5f20 	ldr.w	r5, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    389a:	429d      	cmp	r5, r3
    389c:	d108      	bne.n	38b0 <ready_thread+0x3c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    389e:	4635      	mov	r5, r6
    38a0:	e006      	b.n	38b0 <ready_thread+0x3c>
	sys_dnode_t *const prev = successor->prev;
    38a2:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
    38a4:	6063      	str	r3, [r4, #4]
	node->next = successor;
    38a6:	6025      	str	r5, [r4, #0]
	prev->next = node;
    38a8:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    38aa:	606c      	str	r4, [r5, #4]
}
    38ac:	e017      	b.n	38de <ready_thread+0x6a>
    38ae:	4635      	mov	r5, r6
    38b0:	b16d      	cbz	r5, 38ce <ready_thread+0x5a>
		if (z_sched_prio_cmp(thread, t) > 0) {
    38b2:	4629      	mov	r1, r5
    38b4:	4620      	mov	r0, r4
    38b6:	f001 ff0b 	bl	56d0 <z_sched_prio_cmp>
    38ba:	2800      	cmp	r0, #0
    38bc:	dcf1      	bgt.n	38a2 <ready_thread+0x2e>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    38be:	2d00      	cmp	r5, #0
    38c0:	d0f6      	beq.n	38b0 <ready_thread+0x3c>
	return (node == list->tail) ? NULL : node->next;
    38c2:	4b09      	ldr	r3, [pc, #36]	; (38e8 <ready_thread+0x74>)
    38c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    38c6:	429d      	cmp	r5, r3
    38c8:	d0f1      	beq.n	38ae <ready_thread+0x3a>
    38ca:	682d      	ldr	r5, [r5, #0]
    38cc:	e7f0      	b.n	38b0 <ready_thread+0x3c>
	sys_dnode_t *const tail = list->tail;
    38ce:	4b06      	ldr	r3, [pc, #24]	; (38e8 <ready_thread+0x74>)
    38d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    38d2:	f103 0120 	add.w	r1, r3, #32
    38d6:	6021      	str	r1, [r4, #0]
	node->prev = tail;
    38d8:	6062      	str	r2, [r4, #4]
	tail->next = node;
    38da:	6014      	str	r4, [r2, #0]
	list->tail = node;
    38dc:	625c      	str	r4, [r3, #36]	; 0x24
		update_cache(0);
    38de:	2000      	movs	r0, #0
    38e0:	f7ff ff0a 	bl	36f8 <update_cache>
}
    38e4:	e7d2      	b.n	388c <ready_thread+0x18>
    38e6:	4770      	bx	lr
    38e8:	200007d4 	.word	0x200007d4

000038ec <z_sched_start>:
{
    38ec:	b510      	push	{r4, lr}
	__asm__ volatile(
    38ee:	f04f 0320 	mov.w	r3, #32
    38f2:	f3ef 8411 	mrs	r4, BASEPRI
    38f6:	f383 8812 	msr	BASEPRI_MAX, r3
    38fa:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    38fe:	7b43      	ldrb	r3, [r0, #13]
	if (z_has_thread_started(thread)) {
    3900:	f013 0f04 	tst.w	r3, #4
    3904:	d104      	bne.n	3910 <z_sched_start+0x24>
	__asm__ volatile(
    3906:	f384 8811 	msr	BASEPRI, r4
    390a:	f3bf 8f6f 	isb	sy
}
    390e:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    3910:	f023 0304 	bic.w	r3, r3, #4
    3914:	7343      	strb	r3, [r0, #13]
	ready_thread(thread);
    3916:	f7ff ffad 	bl	3874 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    391a:	4621      	mov	r1, r4
    391c:	4801      	ldr	r0, [pc, #4]	; (3924 <z_sched_start+0x38>)
    391e:	f7ff febb 	bl	3698 <z_reschedule>
    3922:	e7f4      	b.n	390e <z_sched_start+0x22>
    3924:	2000080c 	.word	0x2000080c

00003928 <unready_thread>:
{
    3928:	b510      	push	{r4, lr}
    392a:	4604      	mov	r4, r0
	return (thread->base.thread_state & state) != 0U;
    392c:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
    392e:	f990 300d 	ldrsb.w	r3, [r0, #13]
    3932:	2b00      	cmp	r3, #0
    3934:	db08      	blt.n	3948 <unready_thread+0x20>
	update_cache(thread == _current);
    3936:	4b08      	ldr	r3, [pc, #32]	; (3958 <unready_thread+0x30>)
    3938:	6898      	ldr	r0, [r3, #8]
    393a:	42a0      	cmp	r0, r4
    393c:	bf14      	ite	ne
    393e:	2000      	movne	r0, #0
    3940:	2001      	moveq	r0, #1
    3942:	f7ff fed9 	bl	36f8 <update_cache>
}
    3946:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
    3948:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    394c:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    394e:	4601      	mov	r1, r0
    3950:	4802      	ldr	r0, [pc, #8]	; (395c <unready_thread+0x34>)
    3952:	f001 fee1 	bl	5718 <z_priq_dumb_remove>
}
    3956:	e7ee      	b.n	3936 <unready_thread+0xe>
    3958:	200007d4 	.word	0x200007d4
    395c:	200007f4 	.word	0x200007f4

00003960 <z_pend_curr>:
{
    3960:	b510      	push	{r4, lr}
    3962:	460c      	mov	r4, r1
    3964:	4611      	mov	r1, r2
	pending_current = _current;
    3966:	480a      	ldr	r0, [pc, #40]	; (3990 <z_pend_curr+0x30>)
    3968:	6882      	ldr	r2, [r0, #8]
    396a:	4b0a      	ldr	r3, [pc, #40]	; (3994 <z_pend_curr+0x34>)
    396c:	601a      	str	r2, [r3, #0]
	__asm__ volatile(
    396e:	f04f 0220 	mov.w	r2, #32
    3972:	f3ef 8311 	mrs	r3, BASEPRI
    3976:	f382 8812 	msr	BASEPRI_MAX, r2
    397a:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
    397e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    3982:	6880      	ldr	r0, [r0, #8]
    3984:	f001 ff70 	bl	5868 <pend_locked>
    3988:	4620      	mov	r0, r4
    398a:	f7fd fad7 	bl	f3c <arch_swap>
}
    398e:	bd10      	pop	{r4, pc}
    3990:	200007d4 	.word	0x200007d4
    3994:	20000800 	.word	0x20000800

00003998 <z_impl_k_thread_suspend>:
{
    3998:	b538      	push	{r3, r4, r5, lr}
    399a:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    399c:	3018      	adds	r0, #24
    399e:	f001 ffac 	bl	58fa <z_abort_timeout>
	LOCKED(&sched_spinlock) {
    39a2:	2300      	movs	r3, #0
    39a4:	f04f 0220 	mov.w	r2, #32
    39a8:	f3ef 8511 	mrs	r5, BASEPRI
    39ac:	f382 8812 	msr	BASEPRI_MAX, r2
    39b0:	f3bf 8f6f 	isb	sy
    39b4:	e010      	b.n	39d8 <z_impl_k_thread_suspend+0x40>
	thread->base.thread_state |= _THREAD_SUSPENDED;
    39b6:	7b63      	ldrb	r3, [r4, #13]
    39b8:	f043 0310 	orr.w	r3, r3, #16
    39bc:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
    39be:	4b11      	ldr	r3, [pc, #68]	; (3a04 <z_impl_k_thread_suspend+0x6c>)
    39c0:	6898      	ldr	r0, [r3, #8]
    39c2:	42a0      	cmp	r0, r4
    39c4:	bf14      	ite	ne
    39c6:	2000      	movne	r0, #0
    39c8:	2001      	moveq	r0, #1
    39ca:	f7ff fe95 	bl	36f8 <update_cache>
	__asm__ volatile(
    39ce:	f385 8811 	msr	BASEPRI, r5
    39d2:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    39d6:	2301      	movs	r3, #1
    39d8:	b963      	cbnz	r3, 39f4 <z_impl_k_thread_suspend+0x5c>
	return (thread->base.thread_state & state) != 0U;
    39da:	7b62      	ldrb	r2, [r4, #13]
		if (z_is_thread_queued(thread)) {
    39dc:	f994 300d 	ldrsb.w	r3, [r4, #13]
    39e0:	2b00      	cmp	r3, #0
    39e2:	dae8      	bge.n	39b6 <z_impl_k_thread_suspend+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    39e4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    39e8:	7362      	strb	r2, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    39ea:	4621      	mov	r1, r4
    39ec:	4806      	ldr	r0, [pc, #24]	; (3a08 <z_impl_k_thread_suspend+0x70>)
    39ee:	f001 fe93 	bl	5718 <z_priq_dumb_remove>
}
    39f2:	e7e0      	b.n	39b6 <z_impl_k_thread_suspend+0x1e>
	if (thread == _current) {
    39f4:	4b03      	ldr	r3, [pc, #12]	; (3a04 <z_impl_k_thread_suspend+0x6c>)
    39f6:	689b      	ldr	r3, [r3, #8]
    39f8:	42a3      	cmp	r3, r4
    39fa:	d000      	beq.n	39fe <z_impl_k_thread_suspend+0x66>
}
    39fc:	bd38      	pop	{r3, r4, r5, pc}
		z_reschedule_unlocked();
    39fe:	f001 fe7f 	bl	5700 <z_reschedule_unlocked>
}
    3a02:	e7fb      	b.n	39fc <z_impl_k_thread_suspend+0x64>
    3a04:	200007d4 	.word	0x200007d4
    3a08:	200007f4 	.word	0x200007f4

00003a0c <k_sched_unlock>:

void k_sched_unlock(void)
{
    3a0c:	b510      	push	{r4, lr}
	LOCKED(&sched_spinlock) {
    3a0e:	2300      	movs	r3, #0
	__asm__ volatile(
    3a10:	f04f 0220 	mov.w	r2, #32
    3a14:	f3ef 8411 	mrs	r4, BASEPRI
    3a18:	f382 8812 	msr	BASEPRI_MAX, r2
    3a1c:	f3bf 8f6f 	isb	sy
    3a20:	e00c      	b.n	3a3c <k_sched_unlock+0x30>
		__ASSERT(_current->base.sched_locked != 0U, "");
		__ASSERT(!arch_is_in_isr(), "");

		++_current->base.sched_locked;
    3a22:	4b09      	ldr	r3, [pc, #36]	; (3a48 <k_sched_unlock+0x3c>)
    3a24:	689a      	ldr	r2, [r3, #8]
    3a26:	7bd3      	ldrb	r3, [r2, #15]
    3a28:	3301      	adds	r3, #1
    3a2a:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    3a2c:	2000      	movs	r0, #0
    3a2e:	f7ff fe63 	bl	36f8 <update_cache>
	__asm__ volatile(
    3a32:	f384 8811 	msr	BASEPRI, r4
    3a36:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    3a3a:	2301      	movs	r3, #1
    3a3c:	2b00      	cmp	r3, #0
    3a3e:	d0f0      	beq.n	3a22 <k_sched_unlock+0x16>
	LOG_DBG("scheduler unlocked (%p:%d)",
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
    3a40:	f001 fe5e 	bl	5700 <z_reschedule_unlocked>
}
    3a44:	bd10      	pop	{r4, pc}
    3a46:	bf00      	nop
    3a48:	200007d4 	.word	0x200007d4

00003a4c <end_thread>:
static void end_thread(struct k_thread *thread)
{
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
    3a4c:	7b43      	ldrb	r3, [r0, #13]
    3a4e:	f013 0f08 	tst.w	r3, #8
    3a52:	d12a      	bne.n	3aaa <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x12>
{
    3a54:	b510      	push	{r4, lr}
    3a56:	4604      	mov	r4, r0
		thread->base.thread_state |= _THREAD_DEAD;
    3a58:	f043 0208 	orr.w	r2, r3, #8
    3a5c:	7342      	strb	r2, [r0, #13]
		thread->base.thread_state &= ~_THREAD_ABORTING;
    3a5e:	f023 0220 	bic.w	r2, r3, #32
    3a62:	f042 0208 	orr.w	r2, r2, #8
    3a66:	7342      	strb	r2, [r0, #13]
		if (z_is_thread_queued(thread)) {
    3a68:	f012 0f80 	tst.w	r2, #128	; 0x80
    3a6c:	d113      	bne.n	3a96 <end_thread+0x4a>
			dequeue_thread(thread);
		}
		if (thread->base.pended_on != NULL) {
    3a6e:	68a3      	ldr	r3, [r4, #8]
    3a70:	b113      	cbz	r3, 3a78 <end_thread+0x2c>
			unpend_thread_no_timeout(thread);
    3a72:	4620      	mov	r0, r4
    3a74:	f001 fe58 	bl	5728 <unpend_thread_no_timeout>
    3a78:	f104 0018 	add.w	r0, r4, #24
    3a7c:	f001 ff3d 	bl	58fa <z_abort_timeout>
		}
		(void)z_abort_thread_timeout(thread);
		unpend_all(&thread->join_queue);
    3a80:	f104 0058 	add.w	r0, r4, #88	; 0x58
    3a84:	f001 feb0 	bl	57e8 <unpend_all>
		update_cache(1);
    3a88:	2001      	movs	r0, #1
    3a8a:	f7ff fe35 	bl	36f8 <update_cache>

		SYS_PORT_TRACING_FUNC(k_thread, sched_abort, thread);

		z_thread_monitor_exit(thread);
    3a8e:	4620      	mov	r0, r4
    3a90:	f7ff fc40 	bl	3314 <z_thread_monitor_exit>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
    3a94:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
    3a96:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    3a9a:	f043 0308 	orr.w	r3, r3, #8
    3a9e:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    3aa0:	4601      	mov	r1, r0
    3aa2:	4802      	ldr	r0, [pc, #8]	; (3aac <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x14>)
    3aa4:	f001 fe38 	bl	5718 <z_priq_dumb_remove>
}
    3aa8:	e7e1      	b.n	3a6e <end_thread+0x22>
    3aaa:	4770      	bx	lr
    3aac:	200007f4 	.word	0x200007f4

00003ab0 <z_sched_init>:
{
    3ab0:	b508      	push	{r3, lr}
	init_ready_q(&_kernel.ready_q);
    3ab2:	4804      	ldr	r0, [pc, #16]	; (3ac4 <z_sched_init+0x14>)
    3ab4:	f001 ff06 	bl	58c4 <init_ready_q>
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    3ab8:	2100      	movs	r1, #0
    3aba:	4608      	mov	r0, r1
    3abc:	f7ff fdb2 	bl	3624 <k_sched_time_slice_set>
}
    3ac0:	bd08      	pop	{r3, pc}
    3ac2:	bf00      	nop
    3ac4:	200007f0 	.word	0x200007f0

00003ac8 <z_impl_k_yield>:
{
    3ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    3aca:	f04f 0320 	mov.w	r3, #32
    3ace:	f3ef 8611 	mrs	r6, BASEPRI
    3ad2:	f383 8812 	msr	BASEPRI_MAX, r3
    3ad6:	f3bf 8f6f 	isb	sy
		dequeue_thread(_current);
    3ada:	4c1d      	ldr	r4, [pc, #116]	; (3b50 <z_impl_k_yield+0x88>)
    3adc:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    3ade:	7b4b      	ldrb	r3, [r1, #13]
    3ae0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    3ae4:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
    3ae6:	f104 0720 	add.w	r7, r4, #32
    3aea:	4638      	mov	r0, r7
    3aec:	f001 fe14 	bl	5718 <z_priq_dumb_remove>
	queue_thread(_current);
    3af0:	68a5      	ldr	r5, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    3af2:	7b6b      	ldrb	r3, [r5, #13]
    3af4:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3af8:	736b      	strb	r3, [r5, #13]
	return list->head == list;
    3afa:	6a24      	ldr	r4, [r4, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3afc:	42bc      	cmp	r4, r7
    3afe:	d108      	bne.n	3b12 <z_impl_k_yield+0x4a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    3b00:	2400      	movs	r4, #0
    3b02:	e006      	b.n	3b12 <z_impl_k_yield+0x4a>
	sys_dnode_t *const prev = successor->prev;
    3b04:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    3b06:	606b      	str	r3, [r5, #4]
	node->next = successor;
    3b08:	602c      	str	r4, [r5, #0]
	prev->next = node;
    3b0a:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    3b0c:	6065      	str	r5, [r4, #4]
}
    3b0e:	e017      	b.n	3b40 <z_impl_k_yield+0x78>
    3b10:	2400      	movs	r4, #0
    3b12:	b16c      	cbz	r4, 3b30 <z_impl_k_yield+0x68>
		if (z_sched_prio_cmp(thread, t) > 0) {
    3b14:	4621      	mov	r1, r4
    3b16:	4628      	mov	r0, r5
    3b18:	f001 fdda 	bl	56d0 <z_sched_prio_cmp>
    3b1c:	2800      	cmp	r0, #0
    3b1e:	dcf1      	bgt.n	3b04 <z_impl_k_yield+0x3c>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    3b20:	2c00      	cmp	r4, #0
    3b22:	d0f6      	beq.n	3b12 <z_impl_k_yield+0x4a>
	return (node == list->tail) ? NULL : node->next;
    3b24:	4b0a      	ldr	r3, [pc, #40]	; (3b50 <z_impl_k_yield+0x88>)
    3b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3b28:	429c      	cmp	r4, r3
    3b2a:	d0f1      	beq.n	3b10 <z_impl_k_yield+0x48>
    3b2c:	6824      	ldr	r4, [r4, #0]
    3b2e:	e7f0      	b.n	3b12 <z_impl_k_yield+0x4a>
	sys_dnode_t *const tail = list->tail;
    3b30:	4b07      	ldr	r3, [pc, #28]	; (3b50 <z_impl_k_yield+0x88>)
    3b32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    3b34:	f103 0120 	add.w	r1, r3, #32
    3b38:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    3b3a:	606a      	str	r2, [r5, #4]
	tail->next = node;
    3b3c:	6015      	str	r5, [r2, #0]
	list->tail = node;
    3b3e:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(1);
    3b40:	2001      	movs	r0, #1
    3b42:	f7ff fdd9 	bl	36f8 <update_cache>
    3b46:	4630      	mov	r0, r6
    3b48:	f7fd f9f8 	bl	f3c <arch_swap>
}
    3b4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3b4e:	bf00      	nop
    3b50:	200007d4 	.word	0x200007d4

00003b54 <z_tick_sleep>:
{
    3b54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (ticks == 0) {
    3b58:	ea50 0301 	orrs.w	r3, r0, r1
    3b5c:	d038      	beq.n	3bd0 <z_tick_sleep+0x7c>
    3b5e:	4604      	mov	r4, r0
    3b60:	460e      	mov	r6, r1
	if (Z_TICK_ABS(ticks) <= 0) {
    3b62:	f06f 0301 	mvn.w	r3, #1
    3b66:	1a1b      	subs	r3, r3, r0
    3b68:	f04f 32ff 	mov.w	r2, #4294967295
    3b6c:	eb62 0201 	sbc.w	r2, r2, r1
    3b70:	2b01      	cmp	r3, #1
    3b72:	f172 0200 	sbcs.w	r2, r2, #0
    3b76:	db2f      	blt.n	3bd8 <z_tick_sleep+0x84>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    3b78:	f06f 0501 	mvn.w	r5, #1
    3b7c:	1a2d      	subs	r5, r5, r0
    3b7e:	f04f 0320 	mov.w	r3, #32
    3b82:	f3ef 8811 	mrs	r8, BASEPRI
    3b86:	f383 8812 	msr	BASEPRI_MAX, r3
    3b8a:	f3bf 8f6f 	isb	sy
	pending_current = _current;
    3b8e:	4f14      	ldr	r7, [pc, #80]	; (3be0 <z_tick_sleep+0x8c>)
    3b90:	68b8      	ldr	r0, [r7, #8]
    3b92:	4b14      	ldr	r3, [pc, #80]	; (3be4 <z_tick_sleep+0x90>)
    3b94:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    3b96:	f7ff fec7 	bl	3928 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    3b9a:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    3b9c:	4622      	mov	r2, r4
    3b9e:	4633      	mov	r3, r6
    3ba0:	4911      	ldr	r1, [pc, #68]	; (3be8 <z_tick_sleep+0x94>)
    3ba2:	3018      	adds	r0, #24
    3ba4:	f000 f8ec 	bl	3d80 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    3ba8:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    3baa:	7b53      	ldrb	r3, [r2, #13]
    3bac:	f043 0310 	orr.w	r3, r3, #16
    3bb0:	7353      	strb	r3, [r2, #13]
    3bb2:	4640      	mov	r0, r8
    3bb4:	f7fd f9c2 	bl	f3c <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    3bb8:	f001 feff 	bl	59ba <sys_clock_tick_get_32>
    3bbc:	1a28      	subs	r0, r5, r0
    3bbe:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    3bc2:	2801      	cmp	r0, #1
    3bc4:	f173 0300 	sbcs.w	r3, r3, #0
    3bc8:	da00      	bge.n	3bcc <z_tick_sleep+0x78>
	return 0;
    3bca:	2000      	movs	r0, #0
}
    3bcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	z_impl_k_yield();
    3bd0:	f7ff ff7a 	bl	3ac8 <z_impl_k_yield>
		return 0;
    3bd4:	2000      	movs	r0, #0
    3bd6:	e7f9      	b.n	3bcc <z_tick_sleep+0x78>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    3bd8:	f001 feef 	bl	59ba <sys_clock_tick_get_32>
    3bdc:	1905      	adds	r5, r0, r4
    3bde:	e7ce      	b.n	3b7e <z_tick_sleep+0x2a>
    3be0:	200007d4 	.word	0x200007d4
    3be4:	20000800 	.word	0x20000800
    3be8:	0000578b 	.word	0x0000578b

00003bec <z_impl_k_sleep>:
{
    3bec:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    3bee:	f1b1 3fff 	cmp.w	r1, #4294967295
    3bf2:	bf08      	it	eq
    3bf4:	f1b0 3fff 	cmpeq.w	r0, #4294967295
    3bf8:	d018      	beq.n	3c2c <z_impl_k_sleep+0x40>
	ticks = z_tick_sleep(ticks);
    3bfa:	f7ff ffab 	bl	3b54 <z_tick_sleep>
	int32_t ret = k_ticks_to_ms_floor64(ticks);
    3bfe:	17c2      	asrs	r2, r0, #31
			return ((t * to_hz + off) / from_hz);
    3c00:	0151      	lsls	r1, r2, #5
    3c02:	ea41 61d0 	orr.w	r1, r1, r0, lsr #27
    3c06:	0143      	lsls	r3, r0, #5
    3c08:	1a1b      	subs	r3, r3, r0
    3c0a:	eb61 0102 	sbc.w	r1, r1, r2
    3c0e:	0089      	lsls	r1, r1, #2
    3c10:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
    3c14:	009b      	lsls	r3, r3, #2
    3c16:	181b      	adds	r3, r3, r0
    3c18:	eb42 0201 	adc.w	r2, r2, r1
    3c1c:	00d2      	lsls	r2, r2, #3
    3c1e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
    3c22:	f3c3 3310 	ubfx	r3, r3, #12, #17
    3c26:	ea43 4042 	orr.w	r0, r3, r2, lsl #17
}
    3c2a:	bd08      	pop	{r3, pc}
		k_thread_suspend(_current);
    3c2c:	4b03      	ldr	r3, [pc, #12]	; (3c3c <z_impl_k_sleep+0x50>)
    3c2e:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    3c30:	f7ff feb2 	bl	3998 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
    3c34:	f04f 30ff 	mov.w	r0, #4294967295
    3c38:	e7f7      	b.n	3c2a <z_impl_k_sleep+0x3e>
    3c3a:	bf00      	nop
    3c3c:	200007d4 	.word	0x200007d4

00003c40 <z_impl_z_current_get>:
}
    3c40:	4b01      	ldr	r3, [pc, #4]	; (3c48 <z_impl_z_current_get+0x8>)
    3c42:	6898      	ldr	r0, [r3, #8]
    3c44:	4770      	bx	lr
    3c46:	bf00      	nop
    3c48:	200007d4 	.word	0x200007d4

00003c4c <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
    3c4c:	b570      	push	{r4, r5, r6, lr}
    3c4e:	f04f 0320 	mov.w	r3, #32
    3c52:	f3ef 8511 	mrs	r5, BASEPRI
    3c56:	f383 8812 	msr	BASEPRI_MAX, r3
    3c5a:	f3bf 8f6f 	isb	sy
    3c5e:	462e      	mov	r6, r5
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
    3c60:	7b03      	ldrb	r3, [r0, #12]
    3c62:	f013 0f01 	tst.w	r3, #1
    3c66:	d109      	bne.n	3c7c <z_thread_abort+0x30>
    3c68:	4604      	mov	r4, r0
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
		return;
	}

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    3c6a:	7b43      	ldrb	r3, [r0, #13]
    3c6c:	f013 0f08 	tst.w	r3, #8
    3c70:	d00f      	beq.n	3c92 <z_thread_abort+0x46>
	__asm__ volatile(
    3c72:	f385 8811 	msr	BASEPRI, r5
    3c76:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		return;
    3c7a:	e009      	b.n	3c90 <z_thread_abort+0x44>
    3c7c:	f385 8811 	msr	BASEPRI, r5
    3c80:	f3bf 8f6f 	isb	sy
		k_panic();
    3c84:	4040      	eors	r0, r0
    3c86:	f380 8811 	msr	BASEPRI, r0
    3c8a:	f04f 0004 	mov.w	r0, #4
    3c8e:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    3c90:	bd70      	pop	{r4, r5, r6, pc}
	end_thread(thread);
    3c92:	f7ff fedb 	bl	3a4c <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
    3c96:	4b08      	ldr	r3, [pc, #32]	; (3cb8 <z_thread_abort+0x6c>)
    3c98:	689b      	ldr	r3, [r3, #8]
    3c9a:	42a3      	cmp	r3, r4
    3c9c:	d004      	beq.n	3ca8 <z_thread_abort+0x5c>
    3c9e:	f386 8811 	msr	BASEPRI, r6
    3ca2:	f3bf 8f6f 	isb	sy
    3ca6:	e7f3      	b.n	3c90 <z_thread_abort+0x44>
    3ca8:	f3ef 8305 	mrs	r3, IPSR
    3cac:	2b00      	cmp	r3, #0
    3cae:	d1f6      	bne.n	3c9e <z_thread_abort+0x52>
    3cb0:	4628      	mov	r0, r5
    3cb2:	f7fd f943 	bl	f3c <arch_swap>
	return ret;
    3cb6:	e7f2      	b.n	3c9e <z_thread_abort+0x52>
    3cb8:	200007d4 	.word	0x200007d4

00003cbc <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    3cbc:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    3cbe:	4806      	ldr	r0, [pc, #24]	; (3cd8 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    3cc0:	4a06      	ldr	r2, [pc, #24]	; (3cdc <z_data_copy+0x20>)
    3cc2:	1a12      	subs	r2, r2, r0
    3cc4:	4906      	ldr	r1, [pc, #24]	; (3ce0 <z_data_copy+0x24>)
    3cc6:	f001 fccd 	bl	5664 <z_early_memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    3cca:	4a06      	ldr	r2, [pc, #24]	; (3ce4 <z_data_copy+0x28>)
    3ccc:	4906      	ldr	r1, [pc, #24]	; (3ce8 <z_data_copy+0x2c>)
    3cce:	4807      	ldr	r0, [pc, #28]	; (3cec <z_data_copy+0x30>)
    3cd0:	f001 fcc8 	bl	5664 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    3cd4:	bd08      	pop	{r3, pc}
    3cd6:	bf00      	nop
    3cd8:	20000000 	.word	0x20000000
    3cdc:	200000ce 	.word	0x200000ce
    3ce0:	00005f7c 	.word	0x00005f7c
    3ce4:	00000000 	.word	0x00000000
    3ce8:	00005f7c 	.word	0x00005f7c
    3cec:	20000000 	.word	0x20000000

00003cf0 <first>:
	return list->head == list;
    3cf0:	4b03      	ldr	r3, [pc, #12]	; (3d00 <first+0x10>)
    3cf2:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3cf4:	4298      	cmp	r0, r3
    3cf6:	d000      	beq.n	3cfa <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
    3cf8:	4770      	bx	lr
    3cfa:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
    3cfc:	e7fc      	b.n	3cf8 <first+0x8>
    3cfe:	bf00      	nop
    3d00:	200000bc 	.word	0x200000bc

00003d04 <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    3d04:	b130      	cbz	r0, 3d14 <next+0x10>
	return (node == list->tail) ? NULL : node->next;
    3d06:	4a04      	ldr	r2, [pc, #16]	; (3d18 <next+0x14>)
    3d08:	6852      	ldr	r2, [r2, #4]
    3d0a:	4290      	cmp	r0, r2
    3d0c:	d001      	beq.n	3d12 <next+0xe>
    3d0e:	6800      	ldr	r0, [r0, #0]
    3d10:	4770      	bx	lr
    3d12:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
    3d14:	4770      	bx	lr
    3d16:	bf00      	nop
    3d18:	200000bc 	.word	0x200000bc

00003d1c <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
    3d1c:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    3d1e:	4b04      	ldr	r3, [pc, #16]	; (3d30 <elapsed+0x14>)
    3d20:	681b      	ldr	r3, [r3, #0]
    3d22:	b10b      	cbz	r3, 3d28 <elapsed+0xc>
    3d24:	2000      	movs	r0, #0
}
    3d26:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    3d28:	f7fe fab4 	bl	2294 <sys_clock_elapsed>
    3d2c:	e7fb      	b.n	3d26 <elapsed+0xa>
    3d2e:	bf00      	nop
    3d30:	2000080c 	.word	0x2000080c

00003d34 <next_timeout>:

static int32_t next_timeout(void)
{
    3d34:	b510      	push	{r4, lr}
	struct _timeout *to = first();
    3d36:	f7ff ffdb 	bl	3cf0 <first>
    3d3a:	4604      	mov	r4, r0
	int32_t ticks_elapsed = elapsed();
    3d3c:	f7ff ffee 	bl	3d1c <elapsed>
	int32_t ret;

	if ((to == NULL) ||
    3d40:	b17c      	cbz	r4, 3d62 <next_timeout+0x2e>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    3d42:	6923      	ldr	r3, [r4, #16]
    3d44:	6962      	ldr	r2, [r4, #20]
    3d46:	1a1b      	subs	r3, r3, r0
    3d48:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
    3d4c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    3d50:	f172 0100 	sbcs.w	r1, r2, #0
    3d54:	da08      	bge.n	3d68 <next_timeout+0x34>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
    3d56:	2a00      	cmp	r2, #0
    3d58:	db01      	blt.n	3d5e <next_timeout+0x2a>
    3d5a:	4618      	mov	r0, r3
    3d5c:	e006      	b.n	3d6c <next_timeout+0x38>
    3d5e:	2300      	movs	r3, #0
    3d60:	e7fb      	b.n	3d5a <next_timeout+0x26>
		ret = MAX_WAIT;
    3d62:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    3d66:	e001      	b.n	3d6c <next_timeout+0x38>
    3d68:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    3d6c:	4b03      	ldr	r3, [pc, #12]	; (3d7c <next_timeout+0x48>)
    3d6e:	691b      	ldr	r3, [r3, #16]
    3d70:	b113      	cbz	r3, 3d78 <next_timeout+0x44>
    3d72:	4283      	cmp	r3, r0
    3d74:	da00      	bge.n	3d78 <next_timeout+0x44>
		ret = _current_cpu->slice_ticks;
    3d76:	4618      	mov	r0, r3
	}
#endif
	return ret;
}
    3d78:	bd10      	pop	{r4, pc}
    3d7a:	bf00      	nop
    3d7c:	200007d4 	.word	0x200007d4

00003d80 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    3d80:	f1b3 3fff 	cmp.w	r3, #4294967295
    3d84:	bf08      	it	eq
    3d86:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    3d8a:	d07b      	beq.n	3e84 <z_add_timeout+0x104>
{
    3d8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3d90:	4604      	mov	r4, r0
    3d92:	4692      	mov	sl, r2
    3d94:	461d      	mov	r5, r3
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    3d96:	6081      	str	r1, [r0, #8]

	LOCKED(&timeout_lock) {
    3d98:	2300      	movs	r3, #0
	__asm__ volatile(
    3d9a:	f04f 0220 	mov.w	r2, #32
    3d9e:	f3ef 8711 	mrs	r7, BASEPRI
    3da2:	f382 8812 	msr	BASEPRI_MAX, r2
    3da6:	f3bf 8f6f 	isb	sy
    3daa:	e026      	b.n	3dfa <z_add_timeout+0x7a>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;

			to->dticks = MAX(1, ticks);
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    3dac:	f11a 0801 	adds.w	r8, sl, #1
    3db0:	f145 0900 	adc.w	r9, r5, #0
    3db4:	f7ff ffb2 	bl	3d1c <elapsed>
    3db8:	eb18 0300 	adds.w	r3, r8, r0
    3dbc:	eb49 70e0 	adc.w	r0, r9, r0, asr #31
    3dc0:	6123      	str	r3, [r4, #16]
    3dc2:	6160      	str	r0, [r4, #20]
    3dc4:	e03b      	b.n	3e3e <z_add_timeout+0xbe>
		}

		for (t = first(); t != NULL; t = next(t)) {
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
    3dc6:	1a52      	subs	r2, r2, r1
    3dc8:	eb66 0303 	sbc.w	r3, r6, r3
    3dcc:	6102      	str	r2, [r0, #16]
    3dce:	6143      	str	r3, [r0, #20]
	sys_dnode_t *const prev = successor->prev;
    3dd0:	6843      	ldr	r3, [r0, #4]
	node->prev = prev;
    3dd2:	6063      	str	r3, [r4, #4]
	node->next = successor;
    3dd4:	6020      	str	r0, [r4, #0]
	prev->next = node;
    3dd6:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    3dd8:	6044      	str	r4, [r0, #4]
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
    3dda:	e005      	b.n	3de8 <z_add_timeout+0x68>
	sys_dnode_t *const tail = list->tail;
    3ddc:	4b2a      	ldr	r3, [pc, #168]	; (3e88 <z_add_timeout+0x108>)
    3dde:	685a      	ldr	r2, [r3, #4]
	node->next = list;
    3de0:	6023      	str	r3, [r4, #0]
	node->prev = tail;
    3de2:	6062      	str	r2, [r4, #4]
	tail->next = node;
    3de4:	6014      	str	r4, [r2, #0]
	list->tail = node;
    3de6:	605c      	str	r4, [r3, #4]
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    3de8:	f7ff ff82 	bl	3cf0 <first>
    3dec:	4284      	cmp	r4, r0
    3dee:	d03a      	beq.n	3e66 <z_add_timeout+0xe6>
	__asm__ volatile(
    3df0:	f387 8811 	msr	BASEPRI, r7
    3df4:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    3df8:	2301      	movs	r3, #1
    3dfa:	2b00      	cmp	r3, #0
    3dfc:	d140      	bne.n	3e80 <z_add_timeout+0x100>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    3dfe:	4653      	mov	r3, sl
    3e00:	f06f 0101 	mvn.w	r1, #1
    3e04:	ebb1 010a 	subs.w	r1, r1, sl
    3e08:	f04f 30ff 	mov.w	r0, #4294967295
    3e0c:	eb60 0205 	sbc.w	r2, r0, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    3e10:	2a00      	cmp	r2, #0
    3e12:	dbcb      	blt.n	3dac <z_add_timeout+0x2c>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    3e14:	4a1d      	ldr	r2, [pc, #116]	; (3e8c <z_add_timeout+0x10c>)
    3e16:	6811      	ldr	r1, [r2, #0]
    3e18:	6852      	ldr	r2, [r2, #4]
    3e1a:	185b      	adds	r3, r3, r1
    3e1c:	eb42 0205 	adc.w	r2, r2, r5
    3e20:	f06f 0101 	mvn.w	r1, #1
    3e24:	1ac9      	subs	r1, r1, r3
    3e26:	eb60 0302 	sbc.w	r3, r0, r2
			to->dticks = MAX(1, ticks);
    3e2a:	4608      	mov	r0, r1
    3e2c:	461a      	mov	r2, r3
    3e2e:	2901      	cmp	r1, #1
    3e30:	f173 0300 	sbcs.w	r3, r3, #0
    3e34:	da01      	bge.n	3e3a <z_add_timeout+0xba>
    3e36:	2001      	movs	r0, #1
    3e38:	2200      	movs	r2, #0
    3e3a:	6120      	str	r0, [r4, #16]
    3e3c:	6162      	str	r2, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
    3e3e:	f7ff ff57 	bl	3cf0 <first>
    3e42:	2800      	cmp	r0, #0
    3e44:	d0ca      	beq.n	3ddc <z_add_timeout+0x5c>
			if (t->dticks > to->dticks) {
    3e46:	6902      	ldr	r2, [r0, #16]
    3e48:	6946      	ldr	r6, [r0, #20]
    3e4a:	6921      	ldr	r1, [r4, #16]
    3e4c:	6963      	ldr	r3, [r4, #20]
    3e4e:	4291      	cmp	r1, r2
    3e50:	eb73 0e06 	sbcs.w	lr, r3, r6
    3e54:	dbb7      	blt.n	3dc6 <z_add_timeout+0x46>
			to->dticks -= t->dticks;
    3e56:	1a89      	subs	r1, r1, r2
    3e58:	eb63 0306 	sbc.w	r3, r3, r6
    3e5c:	6121      	str	r1, [r4, #16]
    3e5e:	6163      	str	r3, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
    3e60:	f7ff ff50 	bl	3d04 <next>
    3e64:	e7ed      	b.n	3e42 <z_add_timeout+0xc2>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    3e66:	f7ff ff65 	bl	3d34 <next_timeout>

			if (next_time == 0 ||
    3e6a:	4603      	mov	r3, r0
    3e6c:	b118      	cbz	r0, 3e76 <z_add_timeout+0xf6>
			    _current_cpu->slice_ticks != next_time) {
    3e6e:	4a08      	ldr	r2, [pc, #32]	; (3e90 <z_add_timeout+0x110>)
    3e70:	6912      	ldr	r2, [r2, #16]
			if (next_time == 0 ||
    3e72:	4282      	cmp	r2, r0
    3e74:	d0bc      	beq.n	3df0 <z_add_timeout+0x70>
				sys_clock_set_timeout(next_time, false);
    3e76:	2100      	movs	r1, #0
    3e78:	4618      	mov	r0, r3
    3e7a:	f7fe f9cf 	bl	221c <sys_clock_set_timeout>
    3e7e:	e7b7      	b.n	3df0 <z_add_timeout+0x70>
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    3e80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3e84:	4770      	bx	lr
    3e86:	bf00      	nop
    3e88:	200000bc 	.word	0x200000bc
    3e8c:	20000250 	.word	0x20000250
    3e90:	200007d4 	.word	0x200007d4

00003e94 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
    3e94:	b570      	push	{r4, r5, r6, lr}
    3e96:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    3e98:	f7ff fcb0 	bl	37fc <z_time_slice>
	__asm__ volatile(
    3e9c:	f04f 0320 	mov.w	r3, #32
    3ea0:	f3ef 8611 	mrs	r6, BASEPRI
    3ea4:	f383 8812 	msr	BASEPRI_MAX, r3
    3ea8:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    3eac:	4b28      	ldr	r3, [pc, #160]	; (3f50 <sys_clock_announce+0xbc>)
    3eae:	601c      	str	r4, [r3, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
    3eb0:	e021      	b.n	3ef6 <sys_clock_announce+0x62>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    3eb2:	4a28      	ldr	r2, [pc, #160]	; (3f54 <sys_clock_announce+0xc0>)
    3eb4:	6813      	ldr	r3, [r2, #0]
    3eb6:	6851      	ldr	r1, [r2, #4]
    3eb8:	195b      	adds	r3, r3, r5
    3eba:	eb41 71e5 	adc.w	r1, r1, r5, asr #31
    3ebe:	6013      	str	r3, [r2, #0]
    3ec0:	6051      	str	r1, [r2, #4]
		t->dticks = 0;
    3ec2:	2200      	movs	r2, #0
    3ec4:	2300      	movs	r3, #0
    3ec6:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
    3eca:	4620      	mov	r0, r4
    3ecc:	f001 fcfe 	bl	58cc <remove_timeout>
	__asm__ volatile(
    3ed0:	f386 8811 	msr	BASEPRI, r6
    3ed4:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
    3ed8:	68a3      	ldr	r3, [r4, #8]
    3eda:	4620      	mov	r0, r4
    3edc:	4798      	blx	r3
	__asm__ volatile(
    3ede:	f04f 0320 	mov.w	r3, #32
    3ee2:	f3ef 8611 	mrs	r6, BASEPRI
    3ee6:	f383 8812 	msr	BASEPRI_MAX, r3
    3eea:	f3bf 8f6f 	isb	sy
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
    3eee:	4a18      	ldr	r2, [pc, #96]	; (3f50 <sys_clock_announce+0xbc>)
    3ef0:	6813      	ldr	r3, [r2, #0]
    3ef2:	1b5b      	subs	r3, r3, r5
    3ef4:	6013      	str	r3, [r2, #0]
	while (first() != NULL && first()->dticks <= announce_remaining) {
    3ef6:	f7ff fefb 	bl	3cf0 <first>
    3efa:	4604      	mov	r4, r0
    3efc:	b138      	cbz	r0, 3f0e <sys_clock_announce+0x7a>
    3efe:	6905      	ldr	r5, [r0, #16]
    3f00:	6941      	ldr	r1, [r0, #20]
    3f02:	4b13      	ldr	r3, [pc, #76]	; (3f50 <sys_clock_announce+0xbc>)
    3f04:	681a      	ldr	r2, [r3, #0]
    3f06:	17d3      	asrs	r3, r2, #31
    3f08:	42aa      	cmp	r2, r5
    3f0a:	418b      	sbcs	r3, r1
    3f0c:	dad1      	bge.n	3eb2 <sys_clock_announce+0x1e>
	}

	if (first() != NULL) {
    3f0e:	b144      	cbz	r4, 3f22 <sys_clock_announce+0x8e>
		first()->dticks -= announce_remaining;
    3f10:	6923      	ldr	r3, [r4, #16]
    3f12:	6962      	ldr	r2, [r4, #20]
    3f14:	490e      	ldr	r1, [pc, #56]	; (3f50 <sys_clock_announce+0xbc>)
    3f16:	6809      	ldr	r1, [r1, #0]
    3f18:	1a5b      	subs	r3, r3, r1
    3f1a:	eb62 72e1 	sbc.w	r2, r2, r1, asr #31
    3f1e:	6123      	str	r3, [r4, #16]
    3f20:	6162      	str	r2, [r4, #20]
	}

	curr_tick += announce_remaining;
    3f22:	4a0c      	ldr	r2, [pc, #48]	; (3f54 <sys_clock_announce+0xc0>)
    3f24:	4d0a      	ldr	r5, [pc, #40]	; (3f50 <sys_clock_announce+0xbc>)
    3f26:	6828      	ldr	r0, [r5, #0]
    3f28:	6813      	ldr	r3, [r2, #0]
    3f2a:	6851      	ldr	r1, [r2, #4]
    3f2c:	181b      	adds	r3, r3, r0
    3f2e:	eb41 71e0 	adc.w	r1, r1, r0, asr #31
    3f32:	6013      	str	r3, [r2, #0]
    3f34:	6051      	str	r1, [r2, #4]
	announce_remaining = 0;
    3f36:	2400      	movs	r4, #0
    3f38:	602c      	str	r4, [r5, #0]

	sys_clock_set_timeout(next_timeout(), false);
    3f3a:	f7ff fefb 	bl	3d34 <next_timeout>
    3f3e:	4621      	mov	r1, r4
    3f40:	f7fe f96c 	bl	221c <sys_clock_set_timeout>
	__asm__ volatile(
    3f44:	f386 8811 	msr	BASEPRI, r6
    3f48:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    3f4c:	bd70      	pop	{r4, r5, r6, pc}
    3f4e:	bf00      	nop
    3f50:	2000080c 	.word	0x2000080c
    3f54:	20000250 	.word	0x20000250

00003f58 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    3f58:	b510      	push	{r4, lr}
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
    3f5a:	2200      	movs	r2, #0
	__asm__ volatile(
    3f5c:	f04f 0320 	mov.w	r3, #32
    3f60:	f3ef 8411 	mrs	r4, BASEPRI
    3f64:	f383 8812 	msr	BASEPRI_MAX, r3
    3f68:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;
    3f6c:	4613      	mov	r3, r2
    3f6e:	4611      	mov	r1, r2
    3f70:	e00c      	b.n	3f8c <sys_clock_tick_get+0x34>
		t = curr_tick + elapsed();
    3f72:	f7ff fed3 	bl	3d1c <elapsed>
    3f76:	4a07      	ldr	r2, [pc, #28]	; (3f94 <sys_clock_tick_get+0x3c>)
    3f78:	6813      	ldr	r3, [r2, #0]
    3f7a:	6851      	ldr	r1, [r2, #4]
    3f7c:	18c3      	adds	r3, r0, r3
    3f7e:	eb41 71e0 	adc.w	r1, r1, r0, asr #31
	__asm__ volatile(
    3f82:	f384 8811 	msr	BASEPRI, r4
    3f86:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    3f8a:	2201      	movs	r2, #1
    3f8c:	2a00      	cmp	r2, #0
    3f8e:	d0f0      	beq.n	3f72 <sys_clock_tick_get+0x1a>
	}
	return t;
}
    3f90:	4618      	mov	r0, r3
    3f92:	bd10      	pop	{r4, pc}
    3f94:	20000250 	.word	0x20000250

00003f98 <boot_banner>:
#else
#define BANNER_VERSION KERNEL_VERSION_STRING
#endif

void boot_banner(void)
{
    3f98:	b508      	push	{r3, lr}
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
    3f9a:	4802      	ldr	r0, [pc, #8]	; (3fa4 <boot_banner+0xc>)
    3f9c:	f000 f806 	bl	3fac <printk>
#endif /* CONFIG_BOOT_BANNER */
}
    3fa0:	bd08      	pop	{r3, pc}
    3fa2:	bf00      	nop
    3fa4:	00005f4c 	.word	0x00005f4c

00003fa8 <arch_printk_char_out>:
{
	ARG_UNUSED(c);

	/* do nothing */
	return 0;
}
    3fa8:	2000      	movs	r0, #0
    3faa:	4770      	bx	lr

00003fac <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
    3fac:	b40f      	push	{r0, r1, r2, r3}
    3fae:	b500      	push	{lr}
    3fb0:	b083      	sub	sp, #12
    3fb2:	a904      	add	r1, sp, #16
    3fb4:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    3fb8:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
    3fba:	f7fc fa23 	bl	404 <vprintk>

	va_end(ap);
}
    3fbe:	b003      	add	sp, #12
    3fc0:	f85d eb04 	ldr.w	lr, [sp], #4
    3fc4:	b004      	add	sp, #16
    3fc6:	4770      	bx	lr

00003fc8 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    3fc8:	b508      	push	{r3, lr}
    3fca:	4604      	mov	r4, r0
    3fcc:	4608      	mov	r0, r1
    3fce:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    3fd0:	461a      	mov	r2, r3
    3fd2:	47a0      	blx	r4
	return z_impl_z_current_get();
    3fd4:	f7ff fe34 	bl	3c40 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    3fd8:	f7fd fa5c 	bl	1494 <z_impl_k_thread_abort>

00003fdc <set_state>:
	mgr->flags = (state & ONOFF_STATE_MASK)
    3fdc:	f001 0107 	and.w	r1, r1, #7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    3fe0:	8b03      	ldrh	r3, [r0, #24]
    3fe2:	f023 0307 	bic.w	r3, r3, #7
    3fe6:	430b      	orrs	r3, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
    3fe8:	8303      	strh	r3, [r0, #24]
}
    3fea:	4770      	bx	lr

00003fec <notify_monitors>:
{
    3fec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3ff0:	4606      	mov	r6, r0
    3ff2:	460f      	mov	r7, r1
    3ff4:	4690      	mov	r8, r2
	return list->head;
    3ff6:	6881      	ldr	r1, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    3ff8:	b121      	cbz	r1, 4004 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x4>
	return node->next;
    3ffa:	680c      	ldr	r4, [r1, #0]
    3ffc:	b13c      	cbz	r4, 400e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xe>
Z_GENLIST_PEEK_NEXT(slist, snode)
    3ffe:	b931      	cbnz	r1, 400e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xe>
    4000:	460c      	mov	r4, r1
    4002:	e004      	b.n	400e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xe>
    4004:	460c      	mov	r4, r1
    4006:	e002      	b.n	400e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xe>
    4008:	4623      	mov	r3, r4
    400a:	4621      	mov	r1, r4
    400c:	461c      	mov	r4, r3
    400e:	b169      	cbz	r1, 402c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2c>
		mon->callback(mgr, mon, state, res);
    4010:	684d      	ldr	r5, [r1, #4]
    4012:	4643      	mov	r3, r8
    4014:	463a      	mov	r2, r7
    4016:	4630      	mov	r0, r6
    4018:	47a8      	blx	r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    401a:	2c00      	cmp	r4, #0
    401c:	d0f4      	beq.n	4008 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x8>
	return node->next;
    401e:	6823      	ldr	r3, [r4, #0]
    4020:	2b00      	cmp	r3, #0
    4022:	d0f2      	beq.n	400a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xa>
Z_GENLIST_PEEK_NEXT(slist, snode)
    4024:	2c00      	cmp	r4, #0
    4026:	d1f0      	bne.n	400a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xa>
    4028:	4623      	mov	r3, r4
    402a:	e7ee      	b.n	400a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xa>
}
    402c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00004030 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    4030:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    4032:	f013 0307 	ands.w	r3, r3, #7
    4036:	d103      	bne.n	4040 <process_recheck+0x10>
	return list->head;
    4038:	6802      	ldr	r2, [r0, #0]
	    && !sys_slist_is_empty(&mgr->clients)) {
    403a:	b10a      	cbz	r2, 4040 <process_recheck+0x10>
		evt = EVT_START;
    403c:	2003      	movs	r0, #3
    403e:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    4040:	2b02      	cmp	r3, #2
    4042:	d003      	beq.n	404c <process_recheck+0x1c>
	} else if ((state == ONOFF_STATE_ERROR)
    4044:	2b01      	cmp	r3, #1
    4046:	d006      	beq.n	4056 <process_recheck+0x26>
	int evt = EVT_NOP;
    4048:	2000      	movs	r0, #0
    404a:	4770      	bx	lr
		   && (mgr->refs == 0U)) {
    404c:	8b42      	ldrh	r2, [r0, #26]
    404e:	2a00      	cmp	r2, #0
    4050:	d1f8      	bne.n	4044 <process_recheck+0x14>
		evt = EVT_STOP;
    4052:	2004      	movs	r0, #4
    4054:	4770      	bx	lr
    4056:	6803      	ldr	r3, [r0, #0]
		   && !sys_slist_is_empty(&mgr->clients)) {
    4058:	b10b      	cbz	r3, 405e <process_recheck+0x2e>
		evt = EVT_RESET;
    405a:	2005      	movs	r0, #5
}
    405c:	4770      	bx	lr
	int evt = EVT_NOP;
    405e:	2000      	movs	r0, #0
    4060:	4770      	bx	lr

00004062 <process_complete>:
{
    4062:	b510      	push	{r4, lr}
    4064:	4604      	mov	r4, r0
    4066:	468c      	mov	ip, r1
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    4068:	8b03      	ldrh	r3, [r0, #24]
	if (res < 0) {
    406a:	2a00      	cmp	r2, #0
    406c:	db07      	blt.n	407e <process_complete+0x1c>
    406e:	f003 0307 	and.w	r3, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    4072:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    4074:	2a01      	cmp	r2, #1
    4076:	d90e      	bls.n	4096 <process_complete+0x34>
	} else if (state == ONOFF_STATE_TO_OFF) {
    4078:	2b04      	cmp	r3, #4
    407a:	d036      	beq.n	40ea <process_complete+0x88>
}
    407c:	bd10      	pop	{r4, pc}
		*clients = mgr->clients;
    407e:	e9d0 0100 	ldrd	r0, r1, [r0]
    4082:	e88c 0003 	stmia.w	ip, {r0, r1}
	list->head = NULL;
    4086:	2300      	movs	r3, #0
    4088:	6023      	str	r3, [r4, #0]
	list->tail = NULL;
    408a:	6063      	str	r3, [r4, #4]
		set_state(mgr, ONOFF_STATE_ERROR);
    408c:	2101      	movs	r1, #1
    408e:	4620      	mov	r0, r4
    4090:	f7ff ffa4 	bl	3fdc <set_state>
    4094:	e7f2      	b.n	407c <process_complete+0x1a>
		*clients = mgr->clients;
    4096:	e9d0 0100 	ldrd	r0, r1, [r0]
    409a:	e88c 0003 	stmia.w	ip, {r0, r1}
	list->head = NULL;
    409e:	2200      	movs	r2, #0
    40a0:	6022      	str	r2, [r4, #0]
	list->tail = NULL;
    40a2:	6062      	str	r2, [r4, #4]
		if (state == ONOFF_STATE_TO_ON) {
    40a4:	2b06      	cmp	r3, #6
    40a6:	d11b      	bne.n	40e0 <process_complete+0x7e>
	return list->head;
    40a8:	f8dc 3000 	ldr.w	r3, [ip]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    40ac:	b153      	cbz	r3, 40c4 <process_complete+0x62>
				mgr->refs += 1U;
    40ae:	8b62      	ldrh	r2, [r4, #26]
    40b0:	3201      	adds	r2, #1
    40b2:	8362      	strh	r2, [r4, #26]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    40b4:	461a      	mov	r2, r3
	return node->next;
    40b6:	681b      	ldr	r3, [r3, #0]
    40b8:	2b00      	cmp	r3, #0
    40ba:	d0f7      	beq.n	40ac <process_complete+0x4a>
Z_GENLIST_PEEK_NEXT(slist, snode)
    40bc:	2a00      	cmp	r2, #0
    40be:	d1f5      	bne.n	40ac <process_complete+0x4a>
    40c0:	4613      	mov	r3, r2
    40c2:	e7f3      	b.n	40ac <process_complete+0x4a>
			set_state(mgr, ONOFF_STATE_ON);
    40c4:	2102      	movs	r1, #2
    40c6:	4620      	mov	r0, r4
    40c8:	f7ff ff88 	bl	3fdc <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
    40cc:	4620      	mov	r0, r4
    40ce:	f7ff ffaf 	bl	4030 <process_recheck>
    40d2:	2800      	cmp	r0, #0
    40d4:	d0d2      	beq.n	407c <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    40d6:	8b23      	ldrh	r3, [r4, #24]
    40d8:	f043 0320 	orr.w	r3, r3, #32
    40dc:	8323      	strh	r3, [r4, #24]
    40de:	e7cd      	b.n	407c <process_complete+0x1a>
			set_state(mgr, ONOFF_STATE_OFF);
    40e0:	2100      	movs	r1, #0
    40e2:	4620      	mov	r0, r4
    40e4:	f7ff ff7a 	bl	3fdc <set_state>
    40e8:	e7f0      	b.n	40cc <process_complete+0x6a>
		set_state(mgr, ONOFF_STATE_OFF);
    40ea:	2100      	movs	r1, #0
    40ec:	f7ff ff76 	bl	3fdc <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
    40f0:	4620      	mov	r0, r4
    40f2:	f7ff ff9d 	bl	4030 <process_recheck>
    40f6:	2800      	cmp	r0, #0
    40f8:	d0c0      	beq.n	407c <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    40fa:	8b23      	ldrh	r3, [r4, #24]
    40fc:	f043 0320 	orr.w	r3, r3, #32
    4100:	8323      	strh	r3, [r4, #24]
}
    4102:	e7bb      	b.n	407c <process_complete+0x1a>

00004104 <validate_args>:
	if ((mgr == NULL) || (cli == NULL)) {
    4104:	b150      	cbz	r0, 411c <validate_args+0x18>
{
    4106:	b510      	push	{r4, lr}
    4108:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    410a:	b151      	cbz	r1, 4122 <validate_args+0x1e>
	int rv = sys_notify_validate(&cli->notify);
    410c:	1d08      	adds	r0, r1, #4
    410e:	f000 f8c4 	bl	429a <sys_notify_validate>
	if ((rv == 0)
    4112:	b910      	cbnz	r0, 411a <validate_args+0x16>
	    && ((cli->notify.flags
    4114:	68a3      	ldr	r3, [r4, #8]
    4116:	2b03      	cmp	r3, #3
    4118:	d806      	bhi.n	4128 <validate_args+0x24>
}
    411a:	bd10      	pop	{r4, pc}
		return -EINVAL;
    411c:	f06f 0015 	mvn.w	r0, #21
}
    4120:	4770      	bx	lr
		return -EINVAL;
    4122:	f06f 0015 	mvn.w	r0, #21
    4126:	e7f8      	b.n	411a <validate_args+0x16>
		rv = -EINVAL;
    4128:	f06f 0015 	mvn.w	r0, #21
    412c:	e7f5      	b.n	411a <validate_args+0x16>

0000412e <notify_one>:
{
    412e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4132:	4607      	mov	r7, r0
    4134:	460c      	mov	r4, r1
    4136:	4616      	mov	r6, r2
    4138:	461d      	mov	r5, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    413a:	4619      	mov	r1, r3
    413c:	1d20      	adds	r0, r4, #4
    413e:	f000 f8c3 	bl	42c8 <sys_notify_finalize>
	if (cb) {
    4142:	b128      	cbz	r0, 4150 <notify_one+0x22>
    4144:	4680      	mov	r8, r0
		cb(mgr, cli, state, res);
    4146:	462b      	mov	r3, r5
    4148:	4632      	mov	r2, r6
    414a:	4621      	mov	r1, r4
    414c:	4638      	mov	r0, r7
    414e:	47c0      	blx	r8
}
    4150:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00004154 <notify_all>:
{
    4154:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4158:	4680      	mov	r8, r0
    415a:	460c      	mov	r4, r1
    415c:	4617      	mov	r7, r2
    415e:	461e      	mov	r6, r3
	while (!sys_slist_is_empty(list)) {
    4160:	e004      	b.n	416c <notify_all+0x18>
		notify_one(mgr, cli, state, res);
    4162:	4633      	mov	r3, r6
    4164:	463a      	mov	r2, r7
    4166:	4640      	mov	r0, r8
    4168:	f7ff ffe1 	bl	412e <notify_one>
	return list->head;
    416c:	6821      	ldr	r1, [r4, #0]
	while (!sys_slist_is_empty(list)) {
    416e:	b131      	cbz	r1, 417e <notify_all+0x2a>
	return node->next;
    4170:	680d      	ldr	r5, [r1, #0]
	list->head = node;
    4172:	6025      	str	r5, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    4174:	6863      	ldr	r3, [r4, #4]
    4176:	428b      	cmp	r3, r1
    4178:	d1f3      	bne.n	4162 <notify_all+0xe>
	list->tail = node;
    417a:	6065      	str	r5, [r4, #4]
}
    417c:	e7f1      	b.n	4162 <notify_all+0xe>
}
    417e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00004182 <transition_complete>:
{
    4182:	b508      	push	{r3, lr}
	__asm__ volatile(
    4184:	f04f 0c20 	mov.w	ip, #32
    4188:	f3ef 8211 	mrs	r2, BASEPRI
    418c:	f38c 8812 	msr	BASEPRI_MAX, ip
    4190:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    4194:	6141      	str	r1, [r0, #20]
	process_event(mgr, EVT_COMPLETE, key);
    4196:	2101      	movs	r1, #1
    4198:	f7fc f942 	bl	420 <process_event>
}
    419c:	bd08      	pop	{r3, pc}

0000419e <onoff_manager_init>:
	if ((mgr == NULL)
    419e:	4603      	mov	r3, r0
    41a0:	b170      	cbz	r0, 41c0 <onoff_manager_init+0x22>
	    || (transitions == NULL)
    41a2:	b181      	cbz	r1, 41c6 <onoff_manager_init+0x28>
	    || (transitions->start == NULL)
    41a4:	680a      	ldr	r2, [r1, #0]
    41a6:	b18a      	cbz	r2, 41cc <onoff_manager_init+0x2e>
	    || (transitions->stop == NULL)) {
    41a8:	684a      	ldr	r2, [r1, #4]
    41aa:	b192      	cbz	r2, 41d2 <onoff_manager_init+0x34>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    41ac:	2000      	movs	r0, #0
    41ae:	6018      	str	r0, [r3, #0]
    41b0:	6058      	str	r0, [r3, #4]
    41b2:	6098      	str	r0, [r3, #8]
    41b4:	60d8      	str	r0, [r3, #12]
    41b6:	6118      	str	r0, [r3, #16]
    41b8:	6158      	str	r0, [r3, #20]
    41ba:	6198      	str	r0, [r3, #24]
    41bc:	6119      	str	r1, [r3, #16]
	return 0;
    41be:	4770      	bx	lr
		return -EINVAL;
    41c0:	f06f 0015 	mvn.w	r0, #21
    41c4:	4770      	bx	lr
    41c6:	f06f 0015 	mvn.w	r0, #21
    41ca:	4770      	bx	lr
    41cc:	f06f 0015 	mvn.w	r0, #21
    41d0:	4770      	bx	lr
    41d2:	f06f 0015 	mvn.w	r0, #21
}
    41d6:	4770      	bx	lr

000041d8 <onoff_request>:
	k_spin_unlock(&mgr->lock, key);
}

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    41d8:	b570      	push	{r4, r5, r6, lr}
    41da:	4605      	mov	r5, r0
    41dc:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    41de:	f7ff ff91 	bl	4104 <validate_args>

	if (rv < 0) {
    41e2:	1e04      	subs	r4, r0, #0
    41e4:	db30      	blt.n	4248 <onoff_request+0x70>
    41e6:	f04f 0320 	mov.w	r3, #32
    41ea:	f3ef 8211 	mrs	r2, BASEPRI
    41ee:	f383 8812 	msr	BASEPRI_MAX, r3
    41f2:	f3bf 8f6f 	isb	sy
    41f6:	4696      	mov	lr, r2
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    41f8:	f8b5 c018 	ldrh.w	ip, [r5, #24]
    41fc:	f00c 0c07 	and.w	ip, ip, #7

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    4200:	8b6b      	ldrh	r3, [r5, #26]
    4202:	f64f 71ff 	movw	r1, #65535	; 0xffff
    4206:	428b      	cmp	r3, r1
    4208:	d02c      	beq.n	4264 <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
    420a:	4664      	mov	r4, ip
	if (state == ONOFF_STATE_ON) {
    420c:	f1bc 0f02 	cmp.w	ip, #2
    4210:	d008      	beq.n	4224 <onoff_request+0x4c>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
	} else if ((state == ONOFF_STATE_OFF)
    4212:	f1bc 0f06 	cmp.w	ip, #6
    4216:	d819      	bhi.n	424c <onoff_request+0x74>
    4218:	e8df f00c 	tbb	[pc, ip]
    421c:	1818181e 	.word	0x1818181e
    4220:	2a1e      	.short	0x2a1e
    4222:	1e          	.byte	0x1e
    4223:	00          	.byte	0x00
		mgr->refs += 1U;
    4224:	3301      	adds	r3, #1
    4226:	836b      	strh	r3, [r5, #26]
		notify = true;
    4228:	2301      	movs	r3, #1
	bool start = false;             /* trigger a start transition */
    422a:	2100      	movs	r1, #0
	bool add_client = false;        /* add client to pending list */
    422c:	4608      	mov	r0, r1
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
		rv = -EIO;
	}

out:
	if (add_client) {
    422e:	b128      	cbz	r0, 423c <onoff_request+0x64>
	parent->next = child;
    4230:	2000      	movs	r0, #0
    4232:	6030      	str	r0, [r6, #0]
	return list->tail;
    4234:	6868      	ldr	r0, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
    4236:	b308      	cbz	r0, 427c <onoff_request+0xa4>
	parent->next = child;
    4238:	6006      	str	r6, [r0, #0]
	list->tail = node;
    423a:	606e      	str	r6, [r5, #4]
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
    423c:	bb09      	cbnz	r1, 4282 <onoff_request+0xaa>
	__asm__ volatile(
    423e:	f38e 8811 	msr	BASEPRI, lr
    4242:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    4246:	bb0b      	cbnz	r3, 428c <onoff_request+0xb4>
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    4248:	4620      	mov	r0, r4
    424a:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
    424c:	f06f 0404 	mvn.w	r4, #4
    4250:	2300      	movs	r3, #0
    4252:	4619      	mov	r1, r3
    4254:	4618      	mov	r0, r3
    4256:	e7ea      	b.n	422e <onoff_request+0x56>
		start = (state == ONOFF_STATE_OFF);
    4258:	fabc f18c 	clz	r1, ip
    425c:	0949      	lsrs	r1, r1, #5
	bool notify = false;            /* do client notification */
    425e:	2300      	movs	r3, #0
		add_client = true;
    4260:	2001      	movs	r0, #1
    4262:	e7e4      	b.n	422e <onoff_request+0x56>
		rv = -EAGAIN;
    4264:	f06f 040a 	mvn.w	r4, #10
	bool notify = false;            /* do client notification */
    4268:	2300      	movs	r3, #0
	bool start = false;             /* trigger a start transition */
    426a:	4619      	mov	r1, r3
	bool add_client = false;        /* add client to pending list */
    426c:	4618      	mov	r0, r3
    426e:	e7de      	b.n	422e <onoff_request+0x56>
	if (state == ONOFF_STATE_ON) {
    4270:	f06f 0485 	mvn.w	r4, #133	; 0x85
    4274:	2300      	movs	r3, #0
    4276:	4619      	mov	r1, r3
    4278:	4618      	mov	r0, r3
    427a:	e7d8      	b.n	422e <onoff_request+0x56>
    427c:	606e      	str	r6, [r5, #4]
	list->head = node;
    427e:	602e      	str	r6, [r5, #0]
}
    4280:	e7dc      	b.n	423c <onoff_request+0x64>
		process_event(mgr, EVT_RECHECK, key);
    4282:	2102      	movs	r1, #2
    4284:	4628      	mov	r0, r5
    4286:	f7fc f8cb 	bl	420 <process_event>
    428a:	e7dd      	b.n	4248 <onoff_request+0x70>
			notify_one(mgr, cli, state, 0);
    428c:	2300      	movs	r3, #0
    428e:	4662      	mov	r2, ip
    4290:	4631      	mov	r1, r6
    4292:	4628      	mov	r0, r5
    4294:	f7ff ff4b 	bl	412e <notify_one>
    4298:	e7d6      	b.n	4248 <onoff_request+0x70>

0000429a <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    429a:	4602      	mov	r2, r0
    429c:	b158      	cbz	r0, 42b6 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    429e:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    42a0:	f003 0303 	and.w	r3, r3, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    42a4:	2b01      	cmp	r3, #1
    42a6:	d003      	beq.n	42b0 <sys_notify_validate+0x16>
    42a8:	2b03      	cmp	r3, #3
    42aa:	d107      	bne.n	42bc <sys_notify_validate+0x22>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    42ac:	6803      	ldr	r3, [r0, #0]
    42ae:	b143      	cbz	r3, 42c2 <sys_notify_validate+0x28>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    42b0:	2000      	movs	r0, #0
    42b2:	6090      	str	r0, [r2, #8]
    42b4:	4770      	bx	lr
		return -EINVAL;
    42b6:	f06f 0015 	mvn.w	r0, #21
    42ba:	4770      	bx	lr
	switch (sys_notify_get_method(notify)) {
    42bc:	f06f 0015 	mvn.w	r0, #21
    42c0:	4770      	bx	lr
			rv = -EINVAL;
    42c2:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    42c6:	4770      	bx	lr

000042c8 <sys_notify_finalize>:

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    42c8:	4603      	mov	r3, r0
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    42ca:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    42cc:	f002 0203 	and.w	r2, r2, #3
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    42d0:	6081      	str	r1, [r0, #8]
	switch (method) {
    42d2:	2a03      	cmp	r2, #3
    42d4:	d103      	bne.n	42de <sys_notify_finalize+0x16>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    42d6:	6800      	ldr	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    42d8:	2200      	movs	r2, #0
    42da:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    42dc:	4770      	bx	lr
	sys_notify_generic_callback rv = NULL;
    42de:	2000      	movs	r0, #0
    42e0:	e7fa      	b.n	42d8 <sys_notify_finalize+0x10>

000042e2 <extract_decimal>:
{
    42e2:	4684      	mov	ip, r0
	const char *sp = *str;
    42e4:	6802      	ldr	r2, [r0, #0]
	size_t val = 0;
    42e6:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp)) {
    42e8:	e006      	b.n	42f8 <extract_decimal+0x16>
		val = 10U * val + *sp++ - '0';
    42ea:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    42ee:	3201      	adds	r2, #1
    42f0:	eb03 0340 	add.w	r3, r3, r0, lsl #1
    42f4:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    42f8:	7813      	ldrb	r3, [r2, #0]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    42fa:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
    42fe:	2909      	cmp	r1, #9
    4300:	d9f3      	bls.n	42ea <extract_decimal+0x8>
	*str = sp;
    4302:	f8cc 2000 	str.w	r2, [ip]
}
    4306:	4770      	bx	lr

00004308 <extract_width>:
{
    4308:	b530      	push	{r4, r5, lr}
    430a:	b083      	sub	sp, #12
    430c:	4604      	mov	r4, r0
    430e:	9101      	str	r1, [sp, #4]
	conv->width_present = true;
    4310:	7803      	ldrb	r3, [r0, #0]
    4312:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    4316:	7003      	strb	r3, [r0, #0]
	if (*sp == '*') {
    4318:	460d      	mov	r5, r1
    431a:	780b      	ldrb	r3, [r1, #0]
    431c:	2b2a      	cmp	r3, #42	; 0x2a
    431e:	d018      	beq.n	4352 <extract_width+0x4a>
	size_t width = extract_decimal(&sp);
    4320:	a801      	add	r0, sp, #4
    4322:	f7ff ffde 	bl	42e2 <extract_decimal>
	if (sp != wp) {
    4326:	9b01      	ldr	r3, [sp, #4]
    4328:	429d      	cmp	r5, r3
    432a:	d00f      	beq.n	434c <extract_width+0x44>
		conv->width_present = true;
    432c:	7823      	ldrb	r3, [r4, #0]
    432e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    4332:	7023      	strb	r3, [r4, #0]
		conv->width_value = width;
    4334:	6060      	str	r0, [r4, #4]
		conv->unsupported |= ((conv->width_value < 0)
    4336:	b2db      	uxtb	r3, r3
    4338:	f3c3 0340 	ubfx	r3, r3, #1, #1
				      || (width != (size_t)conv->width_value));
    433c:	2800      	cmp	r0, #0
    433e:	db10      	blt.n	4362 <extract_width+0x5a>
    4340:	2200      	movs	r2, #0
		conv->unsupported |= ((conv->width_value < 0)
    4342:	4313      	orrs	r3, r2
    4344:	7822      	ldrb	r2, [r4, #0]
    4346:	f363 0241 	bfi	r2, r3, #1, #1
    434a:	7022      	strb	r2, [r4, #0]
	return sp;
    434c:	9801      	ldr	r0, [sp, #4]
}
    434e:	b003      	add	sp, #12
    4350:	bd30      	pop	{r4, r5, pc}
		conv->width_star = true;
    4352:	7843      	ldrb	r3, [r0, #1]
    4354:	f043 0301 	orr.w	r3, r3, #1
    4358:	7043      	strb	r3, [r0, #1]
		return ++sp;
    435a:	4608      	mov	r0, r1
    435c:	3001      	adds	r0, #1
    435e:	9001      	str	r0, [sp, #4]
    4360:	e7f5      	b.n	434e <extract_width+0x46>
				      || (width != (size_t)conv->width_value));
    4362:	2201      	movs	r2, #1
    4364:	e7ed      	b.n	4342 <extract_width+0x3a>

00004366 <extract_prec>:
{
    4366:	b510      	push	{r4, lr}
    4368:	b082      	sub	sp, #8
    436a:	9101      	str	r1, [sp, #4]
	conv->prec_present = (*sp == '.');
    436c:	780b      	ldrb	r3, [r1, #0]
    436e:	2b2e      	cmp	r3, #46	; 0x2e
    4370:	bf14      	ite	ne
    4372:	2300      	movne	r3, #0
    4374:	2301      	moveq	r3, #1
    4376:	7842      	ldrb	r2, [r0, #1]
    4378:	f363 0241 	bfi	r2, r3, #1, #1
    437c:	7042      	strb	r2, [r0, #1]
	if (!conv->prec_present) {
    437e:	b1c3      	cbz	r3, 43b2 <extract_prec+0x4c>
    4380:	4604      	mov	r4, r0
	++sp;
    4382:	9b01      	ldr	r3, [sp, #4]
    4384:	1c5a      	adds	r2, r3, #1
    4386:	9201      	str	r2, [sp, #4]
	if (*sp == '*') {
    4388:	785b      	ldrb	r3, [r3, #1]
    438a:	2b2a      	cmp	r3, #42	; 0x2a
    438c:	d013      	beq.n	43b6 <extract_prec+0x50>
	size_t prec = extract_decimal(&sp);
    438e:	a801      	add	r0, sp, #4
    4390:	f7ff ffa7 	bl	42e2 <extract_decimal>
	conv->prec_value = prec;
    4394:	60a0      	str	r0, [r4, #8]
	conv->unsupported |= ((conv->prec_value < 0)
    4396:	7823      	ldrb	r3, [r4, #0]
    4398:	f3c3 0340 	ubfx	r3, r3, #1, #1
			      || (prec != (size_t)conv->prec_value));
    439c:	2800      	cmp	r0, #0
    439e:	db12      	blt.n	43c6 <extract_prec+0x60>
    43a0:	2200      	movs	r2, #0
	conv->unsupported |= ((conv->prec_value < 0)
    43a2:	4313      	orrs	r3, r2
    43a4:	7822      	ldrb	r2, [r4, #0]
    43a6:	f363 0241 	bfi	r2, r3, #1, #1
    43aa:	7022      	strb	r2, [r4, #0]
	return sp;
    43ac:	9801      	ldr	r0, [sp, #4]
}
    43ae:	b002      	add	sp, #8
    43b0:	bd10      	pop	{r4, pc}
		return sp;
    43b2:	4608      	mov	r0, r1
    43b4:	e7fb      	b.n	43ae <extract_prec+0x48>
		conv->prec_star = true;
    43b6:	7843      	ldrb	r3, [r0, #1]
    43b8:	f043 0304 	orr.w	r3, r3, #4
    43bc:	7043      	strb	r3, [r0, #1]
		return ++sp;
    43be:	4610      	mov	r0, r2
    43c0:	3001      	adds	r0, #1
    43c2:	9001      	str	r0, [sp, #4]
    43c4:	e7f3      	b.n	43ae <extract_prec+0x48>
			      || (prec != (size_t)conv->prec_value));
    43c6:	2201      	movs	r2, #1
    43c8:	e7eb      	b.n	43a2 <extract_prec+0x3c>

000043ca <extract_length>:
{
    43ca:	4602      	mov	r2, r0
	switch (*sp) {
    43cc:	780b      	ldrb	r3, [r1, #0]
    43ce:	3b4c      	subs	r3, #76	; 0x4c
    43d0:	2b2e      	cmp	r3, #46	; 0x2e
    43d2:	d85b      	bhi.n	448c <extract_length+0xc2>
    43d4:	e8df f003 	tbb	[pc, r3]
    43d8:	5a5a5a4f 	.word	0x5a5a5a4f
    43dc:	5a5a5a5a 	.word	0x5a5a5a5a
    43e0:	5a5a5a5a 	.word	0x5a5a5a5a
    43e4:	5a5a5a5a 	.word	0x5a5a5a5a
    43e8:	5a5a5a5a 	.word	0x5a5a5a5a
    43ec:	5a5a5a5a 	.word	0x5a5a5a5a
    43f0:	5a5a5a5a 	.word	0x5a5a5a5a
    43f4:	5a3a5a18 	.word	0x5a3a5a18
    43f8:	5a5a5a29 	.word	0x5a5a5a29
    43fc:	5a5a5a5a 	.word	0x5a5a5a5a
    4400:	5a5a5a48 	.word	0x5a5a5a48
    4404:	5a5a      	.short	0x5a5a
    4406:	41          	.byte	0x41
    4407:	00          	.byte	0x00
		if (*++sp == 'h') {
    4408:	1c48      	adds	r0, r1, #1
    440a:	784b      	ldrb	r3, [r1, #1]
    440c:	2b68      	cmp	r3, #104	; 0x68
    440e:	d005      	beq.n	441c <extract_length+0x52>
			conv->length_mod = LENGTH_H;
    4410:	7853      	ldrb	r3, [r2, #1]
    4412:	2102      	movs	r1, #2
    4414:	f361 03c6 	bfi	r3, r1, #3, #4
    4418:	7053      	strb	r3, [r2, #1]
    441a:	4770      	bx	lr
			conv->length_mod = LENGTH_HH;
    441c:	7853      	ldrb	r3, [r2, #1]
    441e:	2001      	movs	r0, #1
    4420:	f360 03c6 	bfi	r3, r0, #3, #4
    4424:	7053      	strb	r3, [r2, #1]
			++sp;
    4426:	1c88      	adds	r0, r1, #2
    4428:	4770      	bx	lr
		if (*++sp == 'l') {
    442a:	1c48      	adds	r0, r1, #1
    442c:	784b      	ldrb	r3, [r1, #1]
    442e:	2b6c      	cmp	r3, #108	; 0x6c
    4430:	d005      	beq.n	443e <extract_length+0x74>
			conv->length_mod = LENGTH_L;
    4432:	7853      	ldrb	r3, [r2, #1]
    4434:	2103      	movs	r1, #3
    4436:	f361 03c6 	bfi	r3, r1, #3, #4
    443a:	7053      	strb	r3, [r2, #1]
    443c:	4770      	bx	lr
			conv->length_mod = LENGTH_LL;
    443e:	7853      	ldrb	r3, [r2, #1]
    4440:	2004      	movs	r0, #4
    4442:	f360 03c6 	bfi	r3, r0, #3, #4
    4446:	7053      	strb	r3, [r2, #1]
			++sp;
    4448:	1c88      	adds	r0, r1, #2
    444a:	4770      	bx	lr
		conv->length_mod = LENGTH_J;
    444c:	7853      	ldrb	r3, [r2, #1]
    444e:	2005      	movs	r0, #5
    4450:	f360 03c6 	bfi	r3, r0, #3, #4
    4454:	7053      	strb	r3, [r2, #1]
		++sp;
    4456:	1c48      	adds	r0, r1, #1
		break;
    4458:	4770      	bx	lr
		conv->length_mod = LENGTH_Z;
    445a:	7853      	ldrb	r3, [r2, #1]
    445c:	2006      	movs	r0, #6
    445e:	f360 03c6 	bfi	r3, r0, #3, #4
    4462:	7053      	strb	r3, [r2, #1]
		++sp;
    4464:	1c48      	adds	r0, r1, #1
		break;
    4466:	4770      	bx	lr
		conv->length_mod = LENGTH_T;
    4468:	7853      	ldrb	r3, [r2, #1]
    446a:	2007      	movs	r0, #7
    446c:	f360 03c6 	bfi	r3, r0, #3, #4
    4470:	7053      	strb	r3, [r2, #1]
		++sp;
    4472:	1c48      	adds	r0, r1, #1
		break;
    4474:	4770      	bx	lr
		conv->length_mod = LENGTH_UPPER_L;
    4476:	7853      	ldrb	r3, [r2, #1]
    4478:	2008      	movs	r0, #8
    447a:	f360 03c6 	bfi	r3, r0, #3, #4
    447e:	7053      	strb	r3, [r2, #1]
		++sp;
    4480:	1c48      	adds	r0, r1, #1
		conv->unsupported = true;
    4482:	7813      	ldrb	r3, [r2, #0]
    4484:	f043 0302 	orr.w	r3, r3, #2
    4488:	7013      	strb	r3, [r2, #0]
		break;
    448a:	4770      	bx	lr
		conv->length_mod = LENGTH_NONE;
    448c:	7853      	ldrb	r3, [r2, #1]
    448e:	f36f 03c6 	bfc	r3, #3, #4
    4492:	7053      	strb	r3, [r2, #1]
		break;
    4494:	4608      	mov	r0, r1
}
    4496:	4770      	bx	lr

00004498 <extract_specifier>:
{
    4498:	b500      	push	{lr}
    449a:	4602      	mov	r2, r0
	conv->specifier = *sp++;
    449c:	4608      	mov	r0, r1
    449e:	f810 3b01 	ldrb.w	r3, [r0], #1
    44a2:	70d3      	strb	r3, [r2, #3]
	switch (conv->specifier) {
    44a4:	2b78      	cmp	r3, #120	; 0x78
    44a6:	d817      	bhi.n	44d8 <extract_specifier+0x40>
    44a8:	2b6e      	cmp	r3, #110	; 0x6e
    44aa:	d229      	bcs.n	4500 <extract_specifier+0x68>
    44ac:	2b69      	cmp	r3, #105	; 0x69
    44ae:	d813      	bhi.n	44d8 <extract_specifier+0x40>
    44b0:	2b58      	cmp	r3, #88	; 0x58
    44b2:	d317      	bcc.n	44e4 <extract_specifier+0x4c>
    44b4:	f1a3 0c58 	sub.w	ip, r3, #88	; 0x58
    44b8:	fa5f fc8c 	uxtb.w	ip, ip
    44bc:	2101      	movs	r1, #1
    44be:	fa01 f10c 	lsl.w	r1, r1, ip
    44c2:	f411 4f62 	tst.w	r1, #57856	; 0xe200
    44c6:	d114      	bne.n	44f2 <extract_specifier+0x5a>
    44c8:	f640 0c01 	movw	ip, #2049	; 0x801
    44cc:	ea11 0f0c 	tst.w	r1, ip
    44d0:	d155      	bne.n	457e <extract_specifier+0xe6>
    44d2:	f411 3f04 	tst.w	r1, #135168	; 0x21000
    44d6:	d13a      	bne.n	454e <extract_specifier+0xb6>
		conv->invalid = true;
    44d8:	7813      	ldrb	r3, [r2, #0]
    44da:	f043 0301 	orr.w	r3, r3, #1
    44de:	7013      	strb	r3, [r2, #0]
	bool unsupported = false;
    44e0:	2100      	movs	r1, #0
		break;
    44e2:	e042      	b.n	456a <extract_specifier+0xd2>
	switch (conv->specifier) {
    44e4:	2b41      	cmp	r3, #65	; 0x41
    44e6:	d004      	beq.n	44f2 <extract_specifier+0x5a>
    44e8:	d3f6      	bcc.n	44d8 <extract_specifier+0x40>
    44ea:	3b45      	subs	r3, #69	; 0x45
    44ec:	b2db      	uxtb	r3, r3
    44ee:	2b02      	cmp	r3, #2
    44f0:	d8f2      	bhi.n	44d8 <extract_specifier+0x40>
		conv->specifier_cat = SPECIFIER_FP;
    44f2:	7893      	ldrb	r3, [r2, #2]
    44f4:	2104      	movs	r1, #4
    44f6:	f361 0302 	bfi	r3, r1, #0, #3
    44fa:	7093      	strb	r3, [r2, #2]
			unsupported = true;
    44fc:	2101      	movs	r1, #1
			break;
    44fe:	e034      	b.n	456a <extract_specifier+0xd2>
	switch (conv->specifier) {
    4500:	f1a3 016e 	sub.w	r1, r3, #110	; 0x6e
    4504:	b2c9      	uxtb	r1, r1
    4506:	f04f 0c01 	mov.w	ip, #1
    450a:	fa0c fc01 	lsl.w	ip, ip, r1
    450e:	f240 4182 	movw	r1, #1154	; 0x482
    4512:	ea1c 0f01 	tst.w	ip, r1
    4516:	bf14      	ite	ne
    4518:	f04f 0e01 	movne.w	lr, #1
    451c:	f04f 0e00 	moveq.w	lr, #0
    4520:	d12d      	bne.n	457e <extract_specifier+0xe6>
    4522:	f01c 0f24 	tst.w	ip, #36	; 0x24
    4526:	bf14      	ite	ne
    4528:	2101      	movne	r1, #1
    452a:	2100      	moveq	r1, #0
    452c:	d139      	bne.n	45a2 <extract_specifier+0x10a>
    452e:	f01c 0c01 	ands.w	ip, ip, #1
    4532:	d0d1      	beq.n	44d8 <extract_specifier+0x40>
		conv->specifier_cat = SPECIFIER_PTR;
    4534:	7893      	ldrb	r3, [r2, #2]
    4536:	f04f 0e03 	mov.w	lr, #3
    453a:	f36e 0302 	bfi	r3, lr, #0, #3
    453e:	7093      	strb	r3, [r2, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
    4540:	7853      	ldrb	r3, [r2, #1]
    4542:	f003 0378 	and.w	r3, r3, #120	; 0x78
    4546:	2b40      	cmp	r3, #64	; 0x40
    4548:	d10f      	bne.n	456a <extract_specifier+0xd2>
			unsupported = true;
    454a:	4661      	mov	r1, ip
    454c:	e00d      	b.n	456a <extract_specifier+0xd2>
		conv->specifier_cat = SPECIFIER_SINT;
    454e:	7891      	ldrb	r1, [r2, #2]
    4550:	f04f 0c01 	mov.w	ip, #1
    4554:	f36c 0102 	bfi	r1, ip, #0, #3
    4558:	7091      	strb	r1, [r2, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
    455a:	7851      	ldrb	r1, [r2, #1]
    455c:	f001 0178 	and.w	r1, r1, #120	; 0x78
    4560:	2940      	cmp	r1, #64	; 0x40
    4562:	d013      	beq.n	458c <extract_specifier+0xf4>
		if (conv->specifier == 'c') {
    4564:	2b63      	cmp	r3, #99	; 0x63
    4566:	d018      	beq.n	459a <extract_specifier+0x102>
	bool unsupported = false;
    4568:	2100      	movs	r1, #0
	conv->unsupported |= unsupported;
    456a:	7813      	ldrb	r3, [r2, #0]
    456c:	f3c3 0c40 	ubfx	ip, r3, #1, #1
    4570:	ea41 010c 	orr.w	r1, r1, ip
    4574:	f361 0341 	bfi	r3, r1, #1, #1
    4578:	7013      	strb	r3, [r2, #0]
}
    457a:	f85d fb04 	ldr.w	pc, [sp], #4
		conv->specifier_cat = SPECIFIER_UINT;
    457e:	7891      	ldrb	r1, [r2, #2]
    4580:	f04f 0c02 	mov.w	ip, #2
    4584:	f36c 0102 	bfi	r1, ip, #0, #3
    4588:	7091      	strb	r1, [r2, #2]
    458a:	e7e6      	b.n	455a <extract_specifier+0xc2>
			conv->invalid = true;
    458c:	f892 c000 	ldrb.w	ip, [r2]
    4590:	f04c 0c01 	orr.w	ip, ip, #1
    4594:	f882 c000 	strb.w	ip, [r2]
    4598:	e7e4      	b.n	4564 <extract_specifier+0xcc>
			unsupported = (conv->length_mod != LENGTH_NONE);
    459a:	3900      	subs	r1, #0
    459c:	bf18      	it	ne
    459e:	2101      	movne	r1, #1
    45a0:	e7e3      	b.n	456a <extract_specifier+0xd2>
		conv->specifier_cat = SPECIFIER_PTR;
    45a2:	7893      	ldrb	r3, [r2, #2]
    45a4:	f04f 0c03 	mov.w	ip, #3
    45a8:	f36c 0302 	bfi	r3, ip, #0, #3
    45ac:	7093      	strb	r3, [r2, #2]
		if (conv->length_mod != LENGTH_NONE) {
    45ae:	7853      	ldrb	r3, [r2, #1]
    45b0:	f013 0f78 	tst.w	r3, #120	; 0x78
    45b4:	d1d9      	bne.n	456a <extract_specifier+0xd2>
	bool unsupported = false;
    45b6:	4671      	mov	r1, lr
    45b8:	e7d7      	b.n	456a <extract_specifier+0xd2>

000045ba <extract_conversion>:
{
    45ba:	b510      	push	{r4, lr}
    45bc:	4604      	mov	r4, r0
    45be:	4608      	mov	r0, r1
	*conv = (struct conversion) {
    45c0:	2300      	movs	r3, #0
    45c2:	6023      	str	r3, [r4, #0]
    45c4:	6063      	str	r3, [r4, #4]
    45c6:	60a3      	str	r3, [r4, #8]
	if (*sp == '%') {
    45c8:	784b      	ldrb	r3, [r1, #1]
    45ca:	2b25      	cmp	r3, #37	; 0x25
    45cc:	d014      	beq.n	45f8 <extract_conversion+0x3e>
    45ce:	3101      	adds	r1, #1
	sp = extract_flags(conv, sp);
    45d0:	4620      	mov	r0, r4
    45d2:	f7fb ffdb 	bl	58c <extract_flags>
    45d6:	4601      	mov	r1, r0
	sp = extract_width(conv, sp);
    45d8:	4620      	mov	r0, r4
    45da:	f7ff fe95 	bl	4308 <extract_width>
    45de:	4601      	mov	r1, r0
	sp = extract_prec(conv, sp);
    45e0:	4620      	mov	r0, r4
    45e2:	f7ff fec0 	bl	4366 <extract_prec>
    45e6:	4601      	mov	r1, r0
	sp = extract_length(conv, sp);
    45e8:	4620      	mov	r0, r4
    45ea:	f7ff feee 	bl	43ca <extract_length>
    45ee:	4601      	mov	r1, r0
	sp = extract_specifier(conv, sp);
    45f0:	4620      	mov	r0, r4
    45f2:	f7ff ff51 	bl	4498 <extract_specifier>
}
    45f6:	bd10      	pop	{r4, pc}
		conv->specifier = *sp++;
    45f8:	3002      	adds	r0, #2
    45fa:	70e3      	strb	r3, [r4, #3]
		return sp;
    45fc:	e7fb      	b.n	45f6 <extract_conversion+0x3c>

000045fe <conversion_radix>:
	switch (specifier) {
    45fe:	286f      	cmp	r0, #111	; 0x6f
    4600:	d00c      	beq.n	461c <conversion_radix+0x1e>
    4602:	d905      	bls.n	4610 <conversion_radix+0x12>
    4604:	2870      	cmp	r0, #112	; 0x70
    4606:	d00b      	beq.n	4620 <conversion_radix+0x22>
    4608:	2878      	cmp	r0, #120	; 0x78
    460a:	d10b      	bne.n	4624 <conversion_radix+0x26>
		return 16;
    460c:	2010      	movs	r0, #16
    460e:	4770      	bx	lr
	switch (specifier) {
    4610:	2858      	cmp	r0, #88	; 0x58
    4612:	d001      	beq.n	4618 <conversion_radix+0x1a>
    4614:	200a      	movs	r0, #10
    4616:	4770      	bx	lr
		return 16;
    4618:	2010      	movs	r0, #16
    461a:	4770      	bx	lr
		return 8;
    461c:	2008      	movs	r0, #8
    461e:	4770      	bx	lr
		return 16;
    4620:	2010      	movs	r0, #16
    4622:	4770      	bx	lr
	switch (specifier) {
    4624:	200a      	movs	r0, #10
}
    4626:	4770      	bx	lr

00004628 <encode_uint>:
{
    4628:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    462c:	4605      	mov	r5, r0
    462e:	460c      	mov	r4, r1
    4630:	4693      	mov	fp, r2
    4632:	4699      	mov	r9, r3
    4634:	9f0a      	ldr	r7, [sp, #40]	; 0x28
	bool upcase = isupper((int)conv->specifier);
    4636:	78d0      	ldrb	r0, [r2, #3]
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    4638:	f1a0 0a41 	sub.w	sl, r0, #65	; 0x41
	const unsigned int radix = conversion_radix(conv->specifier);
    463c:	f7ff ffdf 	bl	45fe <conversion_radix>
    4640:	4606      	mov	r6, r0
	char *bp = bps + (bpe - bps);
    4642:	e015      	b.n	4670 <encode_uint+0x48>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    4644:	f1ba 0f19 	cmp.w	sl, #25
    4648:	d820      	bhi.n	468c <encode_uint+0x64>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    464a:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
    464c:	3237      	adds	r2, #55	; 0x37
    464e:	b2d2      	uxtb	r2, r2
    4650:	f807 2d01 	strb.w	r2, [r7, #-1]!
		value /= radix;
    4654:	4632      	mov	r2, r6
    4656:	4643      	mov	r3, r8
    4658:	4628      	mov	r0, r5
    465a:	4621      	mov	r1, r4
    465c:	f7fb fd50 	bl	100 <__aeabi_uldivmod>
	} while ((value != 0) && (bps < bp));
    4660:	42b5      	cmp	r5, r6
    4662:	f174 0400 	sbcs.w	r4, r4, #0
    4666:	d315      	bcc.n	4694 <encode_uint+0x6c>
    4668:	454f      	cmp	r7, r9
    466a:	d913      	bls.n	4694 <encode_uint+0x6c>
		value /= radix;
    466c:	4605      	mov	r5, r0
    466e:	460c      	mov	r4, r1
		unsigned int lsv = (unsigned int)(value % radix);
    4670:	f04f 0800 	mov.w	r8, #0
    4674:	4632      	mov	r2, r6
    4676:	4643      	mov	r3, r8
    4678:	4628      	mov	r0, r5
    467a:	4621      	mov	r1, r4
    467c:	f7fb fd40 	bl	100 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    4680:	2a09      	cmp	r2, #9
    4682:	d8df      	bhi.n	4644 <encode_uint+0x1c>
    4684:	b2d2      	uxtb	r2, r2
    4686:	3230      	adds	r2, #48	; 0x30
    4688:	b2d2      	uxtb	r2, r2
    468a:	e7e1      	b.n	4650 <encode_uint+0x28>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    468c:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
    468e:	3257      	adds	r2, #87	; 0x57
    4690:	b2d2      	uxtb	r2, r2
    4692:	e7dd      	b.n	4650 <encode_uint+0x28>
	if (conv->flag_hash) {
    4694:	f89b 3000 	ldrb.w	r3, [fp]
    4698:	f013 0f20 	tst.w	r3, #32
    469c:	d003      	beq.n	46a6 <encode_uint+0x7e>
		if (radix == 8) {
    469e:	2e08      	cmp	r6, #8
    46a0:	d004      	beq.n	46ac <encode_uint+0x84>
		} else if (radix == 16) {
    46a2:	2e10      	cmp	r6, #16
    46a4:	d009      	beq.n	46ba <encode_uint+0x92>
}
    46a6:	4638      	mov	r0, r7
    46a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			conv->altform_0 = true;
    46ac:	f89b 3002 	ldrb.w	r3, [fp, #2]
    46b0:	f043 0308 	orr.w	r3, r3, #8
    46b4:	f88b 3002 	strb.w	r3, [fp, #2]
    46b8:	e7f5      	b.n	46a6 <encode_uint+0x7e>
			conv->altform_0c = true;
    46ba:	f89b 3002 	ldrb.w	r3, [fp, #2]
    46be:	f043 0310 	orr.w	r3, r3, #16
    46c2:	f88b 3002 	strb.w	r3, [fp, #2]
    46c6:	e7ee      	b.n	46a6 <encode_uint+0x7e>

000046c8 <store_count>:
	switch ((enum length_mod_enum)conv->length_mod) {
    46c8:	7843      	ldrb	r3, [r0, #1]
    46ca:	f3c3 03c3 	ubfx	r3, r3, #3, #4
    46ce:	2b07      	cmp	r3, #7
    46d0:	d818      	bhi.n	4704 <store_count+0x3c>
    46d2:	e8df f003 	tbb	[pc, r3]
    46d6:	0604      	.short	0x0604
    46d8:	100c0a08 	.word	0x100c0a08
    46dc:	1614      	.short	0x1614
		*(int *)dp = count;
    46de:	600a      	str	r2, [r1, #0]
		break;
    46e0:	4770      	bx	lr
		*(signed char *)dp = (signed char)count;
    46e2:	700a      	strb	r2, [r1, #0]
		break;
    46e4:	4770      	bx	lr
		*(short *)dp = (short)count;
    46e6:	800a      	strh	r2, [r1, #0]
		break;
    46e8:	4770      	bx	lr
		*(long *)dp = (long)count;
    46ea:	600a      	str	r2, [r1, #0]
		break;
    46ec:	4770      	bx	lr
		*(long long *)dp = (long long)count;
    46ee:	17d3      	asrs	r3, r2, #31
    46f0:	600a      	str	r2, [r1, #0]
    46f2:	604b      	str	r3, [r1, #4]
		break;
    46f4:	4770      	bx	lr
		*(intmax_t *)dp = (intmax_t)count;
    46f6:	17d3      	asrs	r3, r2, #31
    46f8:	600a      	str	r2, [r1, #0]
    46fa:	604b      	str	r3, [r1, #4]
		break;
    46fc:	4770      	bx	lr
		*(size_t *)dp = (size_t)count;
    46fe:	600a      	str	r2, [r1, #0]
		break;
    4700:	4770      	bx	lr
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    4702:	600a      	str	r2, [r1, #0]
}
    4704:	4770      	bx	lr

00004706 <outs>:
{
    4706:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    470a:	4607      	mov	r7, r0
    470c:	460e      	mov	r6, r1
    470e:	4614      	mov	r4, r2
    4710:	4698      	mov	r8, r3
	size_t count = 0;
    4712:	2500      	movs	r5, #0
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    4714:	e006      	b.n	4724 <outs+0x1e>
		int rc = out((int)*sp++, ctx);
    4716:	4631      	mov	r1, r6
    4718:	f814 0b01 	ldrb.w	r0, [r4], #1
    471c:	47b8      	blx	r7
		if (rc < 0) {
    471e:	2800      	cmp	r0, #0
    4720:	db09      	blt.n	4736 <outs+0x30>
		++count;
    4722:	3501      	adds	r5, #1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    4724:	4544      	cmp	r4, r8
    4726:	d3f6      	bcc.n	4716 <outs+0x10>
    4728:	f1b8 0f00 	cmp.w	r8, #0
    472c:	d102      	bne.n	4734 <outs+0x2e>
    472e:	7823      	ldrb	r3, [r4, #0]
    4730:	2b00      	cmp	r3, #0
    4732:	d1f0      	bne.n	4716 <outs+0x10>
	return (int)count;
    4734:	4628      	mov	r0, r5
}
    4736:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000473a <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    473a:	4770      	bx	lr

0000473c <atomic_test_and_clear_bit>:
 * @param bit Bit number (starting from 0).
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
    473c:	b500      	push	{lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
    473e:	f001 021f 	and.w	r2, r1, #31
    4742:	2301      	movs	r3, #1
    4744:	4093      	lsls	r3, r2
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    4746:	0949      	lsrs	r1, r1, #5
    4748:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    474c:	43d9      	mvns	r1, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    474e:	f3bf 8f5b 	dmb	ish
    4752:	e850 2f00 	ldrex	r2, [r0]
    4756:	ea02 0c01 	and.w	ip, r2, r1
    475a:	e840 ce00 	strex	lr, ip, [r0]
    475e:	f1be 0f00 	cmp.w	lr, #0
    4762:	d1f6      	bne.n	4752 <atomic_test_and_clear_bit+0x16>
    4764:	f3bf 8f5b 	dmb	ish

	return (old & mask) != 0;
    4768:	4213      	tst	r3, r2
}
    476a:	bf14      	ite	ne
    476c:	2001      	movne	r0, #1
    476e:	2000      	moveq	r0, #0
    4770:	f85d fb04 	ldr.w	pc, [sp], #4

00004774 <atomic_set_bit>:
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    4774:	f001 021f 	and.w	r2, r1, #31
    4778:	2301      	movs	r3, #1
    477a:	4093      	lsls	r3, r2

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    477c:	0949      	lsrs	r1, r1, #5
    477e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    4782:	f3bf 8f5b 	dmb	ish
    4786:	e850 2f00 	ldrex	r2, [r0]
    478a:	431a      	orrs	r2, r3
    478c:	e840 2100 	strex	r1, r2, [r0]
    4790:	2900      	cmp	r1, #0
    4792:	d1f8      	bne.n	4786 <atomic_set_bit+0x12>
    4794:	f3bf 8f5b 	dmb	ish
}
    4798:	4770      	bx	lr

0000479a <pm_policy_state_lock_is_active>:
			return (atomic_get(&substate_lock_t[i].lock) != 0);
		}
	}

	return false;
}
    479a:	2000      	movs	r0, #0
    479c:	4770      	bx	lr

0000479e <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    479e:	b508      	push	{r3, lr}

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    47a0:	f000 ff42 	bl	5628 <z_fatal_error>
}
    47a4:	bd08      	pop	{r3, pc}

000047a6 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
    47a6:	b508      	push	{r3, lr}
    47a8:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    47aa:	6800      	ldr	r0, [r0, #0]
    47ac:	f7ff fff7 	bl	479e <z_arm_fatal_error>
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
    47b0:	bd08      	pop	{r3, pc}

000047b2 <arch_irq_enable>:
{
    47b2:	b508      	push	{r3, lr}
	NVIC_EnableIRQ((IRQn_Type)irq);
    47b4:	b240      	sxtb	r0, r0
    47b6:	f7fc fb71 	bl	e9c <__NVIC_EnableIRQ>
}
    47ba:	bd08      	pop	{r3, pc}

000047bc <z_arm_irq_priority_set>:
 * The priority is verified if ASSERT_ON is enabled. The maximum number
 * of priority levels is a little complex, as there are some hardware
 * priority levels which are reserved.
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
    47bc:	b508      	push	{r3, lr}
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    47be:	3101      	adds	r1, #1
    47c0:	b240      	sxtb	r0, r0
    47c2:	f7fc fb79 	bl	eb8 <__NVIC_SetPriority>
}
    47c6:	bd08      	pop	{r3, pc}

000047c8 <z_irq_spurious>:
 * Installed in all _sw_isr_table slots at boot time. Throws an error if
 * called.
 *
 */
void z_irq_spurious(const void *unused)
{
    47c8:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    47ca:	2100      	movs	r1, #0
    47cc:	2001      	movs	r0, #1
    47ce:	f7ff ffe6 	bl	479e <z_arm_fatal_error>
}
    47d2:	bd08      	pop	{r3, pc}

000047d4 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    47d4:	b508      	push	{r3, lr}
	handler();
    47d6:	f7fc fb91 	bl	efc <z_SysNmiOnReset>
	z_arm_int_exit();
    47da:	f7fc fc83 	bl	10e4 <z_arm_exc_exit>
}
    47de:	bd08      	pop	{r3, pc}

000047e0 <memory_fault_recoverable>:
}
    47e0:	2000      	movs	r0, #0
    47e2:	4770      	bx	lr

000047e4 <debug_monitor>:
	*recoverable = false;
    47e4:	2300      	movs	r3, #0
    47e6:	700b      	strb	r3, [r1, #0]
}
    47e8:	4770      	bx	lr

000047ea <fault_handle>:
{
    47ea:	b508      	push	{r3, lr}
	*recoverable = false;
    47ec:	2300      	movs	r3, #0
    47ee:	7013      	strb	r3, [r2, #0]
	switch (fault) {
    47f0:	1ecb      	subs	r3, r1, #3
    47f2:	2b09      	cmp	r3, #9
    47f4:	d81a      	bhi.n	482c <fault_handle+0x42>
    47f6:	e8df f003 	tbb	[pc, r3]
    47fa:	0905      	.short	0x0905
    47fc:	1919110d 	.word	0x1919110d
    4800:	14191919 	.word	0x14191919
		reason = hard_fault(esf, recoverable);
    4804:	4611      	mov	r1, r2
    4806:	f7fc fd25 	bl	1254 <hard_fault>
		break;
    480a:	e010      	b.n	482e <fault_handle+0x44>
		reason = mem_manage_fault(esf, 0, recoverable);
    480c:	2100      	movs	r1, #0
    480e:	f7fc fcd1 	bl	11b4 <mem_manage_fault>
		break;
    4812:	e00c      	b.n	482e <fault_handle+0x44>
		reason = bus_fault(esf, 0, recoverable);
    4814:	2100      	movs	r1, #0
    4816:	f7fc fc73 	bl	1100 <bus_fault>
		break;
    481a:	e008      	b.n	482e <fault_handle+0x44>
		reason = usage_fault(esf);
    481c:	f7fc fc9a 	bl	1154 <usage_fault>
		break;
    4820:	e005      	b.n	482e <fault_handle+0x44>
		debug_monitor(esf, recoverable);
    4822:	4611      	mov	r1, r2
    4824:	f7ff ffde 	bl	47e4 <debug_monitor>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    4828:	2000      	movs	r0, #0
		break;
    482a:	e000      	b.n	482e <fault_handle+0x44>
	switch (fault) {
    482c:	2000      	movs	r0, #0
}
    482e:	bd08      	pop	{r3, pc}

00004830 <mpu_partition_is_valid>:
		((part->size & (part->size - 1U)) == 0U)
    4830:	6843      	ldr	r3, [r0, #4]
    4832:	1e5a      	subs	r2, r3, #1
		&&
    4834:	4213      	tst	r3, r2
    4836:	d106      	bne.n	4846 <mpu_partition_is_valid+0x16>
		&&
    4838:	2b1f      	cmp	r3, #31
    483a:	d906      	bls.n	484a <mpu_partition_is_valid+0x1a>
		((part->start & (part->size - 1U)) == 0U);
    483c:	6803      	ldr	r3, [r0, #0]
		&&
    483e:	421a      	tst	r2, r3
    4840:	d005      	beq.n	484e <mpu_partition_is_valid+0x1e>
    4842:	2000      	movs	r0, #0
    4844:	4770      	bx	lr
    4846:	2000      	movs	r0, #0
    4848:	4770      	bx	lr
    484a:	2000      	movs	r0, #0
    484c:	4770      	bx	lr
    484e:	2001      	movs	r0, #1
}
    4850:	4770      	bx	lr

00004852 <region_allocate_and_init>:
	if (index > (get_num_regions() - 1U)) {
    4852:	2807      	cmp	r0, #7
    4854:	d805      	bhi.n	4862 <region_allocate_and_init+0x10>
{
    4856:	b510      	push	{r4, lr}
    4858:	4604      	mov	r4, r0
	region_init(index, region_conf);
    485a:	f7fc fe55 	bl	1508 <region_init>
	return index;
    485e:	4620      	mov	r0, r4
}
    4860:	bd10      	pop	{r4, pc}
		return -EINVAL;
    4862:	f06f 0015 	mvn.w	r0, #21
}
    4866:	4770      	bx	lr

00004868 <mpu_configure_region>:
{
    4868:	b500      	push	{lr}
    486a:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
    486c:	680b      	ldr	r3, [r1, #0]
    486e:	9301      	str	r3, [sp, #4]
		&new_region->attr, new_region->start, new_region->size);
    4870:	684b      	ldr	r3, [r1, #4]
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    4872:	688a      	ldr	r2, [r1, #8]
	if (size <= 32U) {
    4874:	2b20      	cmp	r3, #32
    4876:	d912      	bls.n	489e <mpu_configure_region+0x36>
	if (size > (1UL << 31)) {
    4878:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    487c:	d811      	bhi.n	48a2 <mpu_configure_region+0x3a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    487e:	3b01      	subs	r3, #1
    4880:	fab3 f383 	clz	r3, r3
    4884:	f1c3 031f 	rsb	r3, r3, #31
    4888:	005b      	lsls	r3, r3, #1
    488a:	f003 033e 	and.w	r3, r3, #62	; 0x3e
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    488e:	4313      	orrs	r3, r2
    4890:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
    4892:	a901      	add	r1, sp, #4
    4894:	f7ff ffdd 	bl	4852 <region_allocate_and_init>
}
    4898:	b005      	add	sp, #20
    489a:	f85d fb04 	ldr.w	pc, [sp], #4
		return REGION_32B;
    489e:	2308      	movs	r3, #8
    48a0:	e7f5      	b.n	488e <mpu_configure_region+0x26>
		return REGION_4G;
    48a2:	233e      	movs	r3, #62	; 0x3e
    48a4:	e7f3      	b.n	488e <mpu_configure_region+0x26>

000048a6 <mpu_configure_regions>:
{
    48a6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    48aa:	4680      	mov	r8, r0
    48ac:	460f      	mov	r7, r1
    48ae:	4699      	mov	r9, r3
	int reg_index = start_reg_index;
    48b0:	4616      	mov	r6, r2
	for (i = 0; i < regions_num; i++) {
    48b2:	2500      	movs	r5, #0
    48b4:	e009      	b.n	48ca <mpu_configure_regions+0x24>
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    48b6:	4621      	mov	r1, r4
    48b8:	b2f0      	uxtb	r0, r6
    48ba:	f7ff ffd5 	bl	4868 <mpu_configure_region>
    48be:	4606      	mov	r6, r0
		if (reg_index == -EINVAL) {
    48c0:	f110 0f16 	cmn.w	r0, #22
    48c4:	d014      	beq.n	48f0 <mpu_configure_regions+0x4a>
		reg_index++;
    48c6:	3601      	adds	r6, #1
	for (i = 0; i < regions_num; i++) {
    48c8:	3501      	adds	r5, #1
    48ca:	42bd      	cmp	r5, r7
    48cc:	da10      	bge.n	48f0 <mpu_configure_regions+0x4a>
		if (regions[i].size == 0U) {
    48ce:	eb05 0445 	add.w	r4, r5, r5, lsl #1
    48d2:	eb08 0484 	add.w	r4, r8, r4, lsl #2
    48d6:	6862      	ldr	r2, [r4, #4]
    48d8:	2a00      	cmp	r2, #0
    48da:	d0f5      	beq.n	48c8 <mpu_configure_regions+0x22>
		if (do_sanity_check &&
    48dc:	f1b9 0f00 	cmp.w	r9, #0
    48e0:	d0e9      	beq.n	48b6 <mpu_configure_regions+0x10>
				(!mpu_partition_is_valid(&regions[i]))) {
    48e2:	4620      	mov	r0, r4
    48e4:	f7ff ffa4 	bl	4830 <mpu_partition_is_valid>
		if (do_sanity_check &&
    48e8:	2800      	cmp	r0, #0
    48ea:	d1e4      	bne.n	48b6 <mpu_configure_regions+0x10>
			return -EINVAL;
    48ec:	f06f 0615 	mvn.w	r6, #21
}
    48f0:	4630      	mov	r0, r6
    48f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000048f6 <arm_core_mpu_configure_static_mpu_regions>:
{
    48f6:	b508      	push	{r3, lr}
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    48f8:	f7fc fe1a 	bl	1530 <mpu_configure_static_mpu_regions>
}
    48fc:	bd08      	pop	{r3, pc}

000048fe <arm_core_mpu_configure_dynamic_mpu_regions>:
{
    48fe:	b508      	push	{r3, lr}
	if (mpu_configure_dynamic_mpu_regions(dynamic_regions, regions_num)
    4900:	f7fc fe20 	bl	1544 <mpu_configure_dynamic_mpu_regions>
}
    4904:	bd08      	pop	{r3, pc}

00004906 <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
    4906:	4602      	mov	r2, r0
    4908:	e002      	b.n	4910 <strcpy+0xa>
		*d = *s;
    490a:	f802 3b01 	strb.w	r3, [r2], #1
		d++;
		s++;
    490e:	3101      	adds	r1, #1
	while (*s != '\0') {
    4910:	780b      	ldrb	r3, [r1, #0]
    4912:	2b00      	cmp	r3, #0
    4914:	d1f9      	bne.n	490a <strcpy+0x4>
	}

	*d = '\0';
    4916:	7013      	strb	r3, [r2, #0]

	return dest;
}
    4918:	4770      	bx	lr

0000491a <strncpy>:

char *strncpy(char *ZRESTRICT d, const char *ZRESTRICT s, size_t n)
{
	char *dest = d;

	while ((n > 0) && *s != '\0') {
    491a:	4603      	mov	r3, r0
    491c:	b1a2      	cbz	r2, 4948 <strncpy+0x2e>
{
    491e:	b410      	push	{r4}
	while ((n > 0) && *s != '\0') {
    4920:	780c      	ldrb	r4, [r1, #0]
    4922:	b12c      	cbz	r4, 4930 <strncpy+0x16>
		*d = *s;
    4924:	f803 4b01 	strb.w	r4, [r3], #1
		s++;
    4928:	3101      	adds	r1, #1
		d++;
		n--;
    492a:	3a01      	subs	r2, #1
	while ((n > 0) && *s != '\0') {
    492c:	2a00      	cmp	r2, #0
    492e:	d1f7      	bne.n	4920 <strncpy+0x6>
	}

	while (n > 0) {
    4930:	b122      	cbz	r2, 493c <strncpy+0x22>
		*d = '\0';
    4932:	2100      	movs	r1, #0
    4934:	f803 1b01 	strb.w	r1, [r3], #1
		d++;
		n--;
    4938:	3a01      	subs	r2, #1
    493a:	e7f9      	b.n	4930 <strncpy+0x16>
	}

	return dest;
}
    493c:	bc10      	pop	{r4}
    493e:	4770      	bx	lr
		*d = '\0';
    4940:	2100      	movs	r1, #0
    4942:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    4946:	3a01      	subs	r2, #1
	while (n > 0) {
    4948:	2a00      	cmp	r2, #0
    494a:	d1f9      	bne.n	4940 <strncpy+0x26>
    494c:	4770      	bx	lr

0000494e <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    494e:	4603      	mov	r3, r0
	size_t n = 0;
    4950:	2000      	movs	r0, #0

	while (*s != '\0') {
    4952:	e001      	b.n	4958 <strlen+0xa>
		s++;
    4954:	3301      	adds	r3, #1
		n++;
    4956:	3001      	adds	r0, #1
	while (*s != '\0') {
    4958:	781a      	ldrb	r2, [r3, #0]
    495a:	2a00      	cmp	r2, #0
    495c:	d1fa      	bne.n	4954 <strlen+0x6>
	}

	return n;
}
    495e:	4770      	bx	lr

00004960 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    4960:	4603      	mov	r3, r0
	size_t n = 0;
    4962:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    4964:	e001      	b.n	496a <strnlen+0xa>
		s++;
    4966:	3301      	adds	r3, #1
		n++;
    4968:	3001      	adds	r0, #1
	while (*s != '\0' && n < maxlen) {
    496a:	781a      	ldrb	r2, [r3, #0]
    496c:	b10a      	cbz	r2, 4972 <strnlen+0x12>
    496e:	4288      	cmp	r0, r1
    4970:	d3f9      	bcc.n	4966 <strnlen+0x6>
	}

	return n;
}
    4972:	4770      	bx	lr

00004974 <memcpy>:
	const unsigned char *s_byte = (const unsigned char *)s;

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
    4974:	ea80 0301 	eor.w	r3, r0, r1
    4978:	f013 0f03 	tst.w	r3, #3
    497c:	d001      	beq.n	4982 <memcpy+0xe>
	unsigned char *d_byte = (unsigned char *)d;
    497e:	4603      	mov	r3, r0
    4980:	e023      	b.n	49ca <memcpy+0x56>
    4982:	4603      	mov	r3, r0

		/* do byte-sized copying until word-aligned or finished */

		while (((uintptr_t)d_byte) & mask) {
    4984:	f013 0f03 	tst.w	r3, #3
    4988:	d00f      	beq.n	49aa <memcpy+0x36>
			if (n == 0) {
    498a:	b30a      	cbz	r2, 49d0 <memcpy+0x5c>
				return d;
			}
			*(d_byte++) = *(s_byte++);
    498c:	f811 cb01 	ldrb.w	ip, [r1], #1
    4990:	f803 cb01 	strb.w	ip, [r3], #1
			n--;
    4994:	3a01      	subs	r2, #1
    4996:	e7f5      	b.n	4984 <memcpy+0x10>
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
		*(d_byte++) = *(s_byte++);
    4998:	f811 cb01 	ldrb.w	ip, [r1], #1
    499c:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
    49a0:	3a01      	subs	r2, #1
	while (n > 0) {
    49a2:	2a00      	cmp	r2, #0
    49a4:	d1f8      	bne.n	4998 <memcpy+0x24>
	}

	return d;
}
    49a6:	bc10      	pop	{r4}
    49a8:	4770      	bx	lr
		while (n >= sizeof(mem_word_t)) {
    49aa:	2a03      	cmp	r2, #3
    49ac:	d90d      	bls.n	49ca <memcpy+0x56>
{
    49ae:	b410      	push	{r4}
			*(d_word++) = *(s_word++);
    49b0:	f851 4b04 	ldr.w	r4, [r1], #4
    49b4:	f843 4b04 	str.w	r4, [r3], #4
			n -= sizeof(mem_word_t);
    49b8:	3a04      	subs	r2, #4
		while (n >= sizeof(mem_word_t)) {
    49ba:	2a03      	cmp	r2, #3
    49bc:	d8f8      	bhi.n	49b0 <memcpy+0x3c>
    49be:	e7f0      	b.n	49a2 <memcpy+0x2e>
		*(d_byte++) = *(s_byte++);
    49c0:	f811 cb01 	ldrb.w	ip, [r1], #1
    49c4:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
    49c8:	3a01      	subs	r2, #1
	while (n > 0) {
    49ca:	2a00      	cmp	r2, #0
    49cc:	d1f8      	bne.n	49c0 <memcpy+0x4c>
    49ce:	4770      	bx	lr
}
    49d0:	4770      	bx	lr

000049d2 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    49d2:	fa5f fc81 	uxtb.w	ip, r1
	unsigned char *d_byte = (unsigned char *)buf;
    49d6:	4603      	mov	r3, r0

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    49d8:	e002      	b.n	49e0 <memset+0xe>
		if (n == 0) {
			return buf;
		}
		*(d_byte++) = c_byte;
    49da:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
    49de:	3a01      	subs	r2, #1
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    49e0:	f013 0f03 	tst.w	r3, #3
    49e4:	d002      	beq.n	49ec <memset+0x1a>
		if (n == 0) {
    49e6:	2a00      	cmp	r2, #0
    49e8:	d1f7      	bne.n	49da <memset+0x8>
    49ea:	e00f      	b.n	4a0c <memset+0x3a>
	}

	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;
    49ec:	b2c9      	uxtb	r1, r1

	c_word |= c_word << 8;
    49ee:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
	c_word |= c_word << 16;
    49f2:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
    49f6:	2a03      	cmp	r2, #3
    49f8:	d906      	bls.n	4a08 <memset+0x36>
		*(d_word++) = c_word;
    49fa:	f843 1b04 	str.w	r1, [r3], #4
		n -= sizeof(mem_word_t);
    49fe:	3a04      	subs	r2, #4
    4a00:	e7f9      	b.n	49f6 <memset+0x24>

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
		*(d_byte++) = c_byte;
    4a02:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
    4a06:	3a01      	subs	r2, #1
	while (n > 0) {
    4a08:	2a00      	cmp	r2, #0
    4a0a:	d1fa      	bne.n	4a02 <memset+0x30>
	}

	return buf;
}
    4a0c:	4770      	bx	lr

00004a0e <_stdout_hook_default>:
}
    4a0e:	f04f 30ff 	mov.w	r0, #4294967295
    4a12:	4770      	bx	lr

00004a14 <sys_arch_reboot>:
{
    4a14:	b508      	push	{r3, lr}
    *p_gpregret = val;
    4a16:	b2c0      	uxtb	r0, r0
    4a18:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4a1c:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
	NVIC_SystemReset();
    4a20:	f7fc fde8 	bl	15f4 <__NVIC_SystemReset>

00004a24 <nrf_power_system_off>:
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    4a24:	2301      	movs	r3, #1
    4a26:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    4a2a:	f3bf 8f4f 	dsb	sy
        __WFE();
    4a2e:	bf20      	wfe
    while (true)
    4a30:	e7fd      	b.n	4a2e <nrf_power_system_off+0xa>

00004a32 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
    4a32:	2806      	cmp	r0, #6
    4a34:	d000      	beq.n	4a38 <pm_state_set+0x6>
    4a36:	4770      	bx	lr
{
    4a38:	b508      	push	{r3, lr}
	case PM_STATE_SOFT_OFF:
		nrf_power_system_off(NRF_POWER);
    4a3a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    4a3e:	f7ff fff1 	bl	4a24 <nrf_power_system_off>

00004a42 <pm_state_exit_post_ops>:
    4a42:	2300      	movs	r3, #0
    4a44:	f383 8811 	msr	BASEPRI, r3
    4a48:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    4a4c:	4770      	bx	lr

00004a4e <nrf_clock_is_running>:
    switch (domain)
    4a4e:	b119      	cbz	r1, 4a58 <nrf_clock_is_running+0xa>
    4a50:	2901      	cmp	r1, #1
    4a52:	d00e      	beq.n	4a72 <nrf_clock_is_running+0x24>
    4a54:	2000      	movs	r0, #0
    4a56:	4770      	bx	lr
            if (p_clk_src != NULL)
    4a58:	b122      	cbz	r2, 4a64 <nrf_clock_is_running+0x16>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    4a5a:	f8d0 3418 	ldr.w	r3, [r0, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    4a5e:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    4a62:	6013      	str	r3, [r2, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    4a64:	f8d0 3418 	ldr.w	r3, [r0, #1048]	; 0x418
    4a68:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    4a6c:	d10e      	bne.n	4a8c <nrf_clock_is_running+0x3e>
    return false;
    4a6e:	2000      	movs	r0, #0
    4a70:	4770      	bx	lr
            if (p_clk_src != NULL)
    4a72:	b122      	cbz	r2, 4a7e <nrf_clock_is_running+0x30>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    4a74:	f8d0 340c 	ldr.w	r3, [r0, #1036]	; 0x40c
    4a78:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    4a7c:	7013      	strb	r3, [r2, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    4a7e:	f8d0 340c 	ldr.w	r3, [r0, #1036]	; 0x40c
    4a82:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    4a86:	d103      	bne.n	4a90 <nrf_clock_is_running+0x42>
    return false;
    4a88:	2000      	movs	r0, #0
    4a8a:	4770      	bx	lr
                return true;
    4a8c:	2001      	movs	r0, #1
    4a8e:	4770      	bx	lr
                return true;
    4a90:	2001      	movs	r0, #1
}
    4a92:	4770      	bx	lr

00004a94 <get_sub_data>:
	struct nrf_clock_control_data *data = dev->data;
    4a94:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
    4a96:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    4a9a:	0089      	lsls	r1, r1, #2
    4a9c:	3138      	adds	r1, #56	; 0x38
}
    4a9e:	4408      	add	r0, r1
    4aa0:	4770      	bx	lr

00004aa2 <get_sub_config>:
	const struct nrf_clock_control_config *config =
    4aa2:	6840      	ldr	r0, [r0, #4]
}
    4aa4:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
    4aa8:	4770      	bx	lr

00004aaa <get_onoff_manager>:
	struct nrf_clock_control_data *data = dev->data;
    4aaa:	6900      	ldr	r0, [r0, #16]
	return &data->mgr[type];
    4aac:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
}
    4ab0:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    4ab4:	4770      	bx	lr

00004ab6 <get_status>:
{
    4ab6:	b508      	push	{r3, lr}
	return GET_STATUS(get_sub_data(dev, type)->flags);
    4ab8:	b2c9      	uxtb	r1, r1
    4aba:	f7ff ffeb 	bl	4a94 <get_sub_data>
    4abe:	6880      	ldr	r0, [r0, #8]
}
    4ac0:	f000 0007 	and.w	r0, r0, #7
    4ac4:	bd08      	pop	{r3, pc}

00004ac6 <set_off_state>:
	__asm__ volatile(
    4ac6:	f04f 0320 	mov.w	r3, #32
    4aca:	f3ef 8211 	mrs	r2, BASEPRI
    4ace:	f383 8812 	msr	BASEPRI_MAX, r3
    4ad2:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    4ad6:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    4ad8:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    4adc:	d001      	beq.n	4ae2 <set_off_state+0x1c>
    4ade:	428b      	cmp	r3, r1
    4ae0:	d107      	bne.n	4af2 <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    4ae2:	2301      	movs	r3, #1
    4ae4:	6003      	str	r3, [r0, #0]
	int err = 0;
    4ae6:	2000      	movs	r0, #0
	__asm__ volatile(
    4ae8:	f382 8811 	msr	BASEPRI, r2
    4aec:	f3bf 8f6f 	isb	sy
}
    4af0:	4770      	bx	lr
		err = -EPERM;
    4af2:	f04f 30ff 	mov.w	r0, #4294967295
    4af6:	e7f7      	b.n	4ae8 <set_off_state+0x22>

00004af8 <set_starting_state>:
	__asm__ volatile(
    4af8:	f04f 0320 	mov.w	r3, #32
    4afc:	f3ef 8211 	mrs	r2, BASEPRI
    4b00:	f383 8812 	msr	BASEPRI_MAX, r3
    4b04:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    4b08:	6803      	ldr	r3, [r0, #0]
    4b0a:	f003 0cc0 	and.w	ip, r3, #192	; 0xc0
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    4b0e:	f003 0307 	and.w	r3, r3, #7
    4b12:	2b01      	cmp	r3, #1
    4b14:	d008      	beq.n	4b28 <set_starting_state+0x30>
	} else if (current_ctx != ctx) {
    4b16:	458c      	cmp	ip, r1
    4b18:	d009      	beq.n	4b2e <set_starting_state+0x36>
		err = -EPERM;
    4b1a:	f04f 30ff 	mov.w	r0, #4294967295
	__asm__ volatile(
    4b1e:	f382 8811 	msr	BASEPRI, r2
    4b22:	f3bf 8f6f 	isb	sy
}
    4b26:	4770      	bx	lr
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    4b28:	6001      	str	r1, [r0, #0]
	int err = 0;
    4b2a:	2000      	movs	r0, #0
    4b2c:	e7f7      	b.n	4b1e <set_starting_state+0x26>
		err = -EALREADY;
    4b2e:	f06f 0077 	mvn.w	r0, #119	; 0x77
    4b32:	e7f4      	b.n	4b1e <set_starting_state+0x26>

00004b34 <set_on_state>:
	__asm__ volatile(
    4b34:	f04f 0320 	mov.w	r3, #32
    4b38:	f3ef 8211 	mrs	r2, BASEPRI
    4b3c:	f383 8812 	msr	BASEPRI_MAX, r3
    4b40:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    4b44:	6803      	ldr	r3, [r0, #0]
    4b46:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    4b4a:	f043 0302 	orr.w	r3, r3, #2
    4b4e:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    4b50:	f382 8811 	msr	BASEPRI, r2
    4b54:	f3bf 8f6f 	isb	sy
}
    4b58:	4770      	bx	lr

00004b5a <clkstarted_handle>:
{
    4b5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4b5c:	4606      	mov	r6, r0
    4b5e:	460c      	mov	r4, r1
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
    4b60:	f7ff ff98 	bl	4a94 <get_sub_data>
	clock_control_cb_t callback = sub_data->cb;
    4b64:	6805      	ldr	r5, [r0, #0]
	void *user_data = sub_data->user_data;
    4b66:	6847      	ldr	r7, [r0, #4]
	sub_data->cb = NULL;
    4b68:	2300      	movs	r3, #0
    4b6a:	f840 3b08 	str.w	r3, [r0], #8
	set_on_state(&sub_data->flags);
    4b6e:	f7ff ffe1 	bl	4b34 <set_on_state>
	if (callback) {
    4b72:	b11d      	cbz	r5, 4b7c <clkstarted_handle+0x22>
		callback(dev, (clock_control_subsys_t)type, user_data);
    4b74:	463a      	mov	r2, r7
    4b76:	4621      	mov	r1, r4
    4b78:	4630      	mov	r0, r6
    4b7a:	47a8      	blx	r5
}
    4b7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00004b7e <stop>:
{
    4b7e:	b570      	push	{r4, r5, r6, lr}
    4b80:	4606      	mov	r6, r0
    4b82:	4615      	mov	r5, r2
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    4b84:	b2cc      	uxtb	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    4b86:	4621      	mov	r1, r4
    4b88:	f7ff ff84 	bl	4a94 <get_sub_data>
	err = set_off_state(&subdata->flags, ctx);
    4b8c:	4629      	mov	r1, r5
    4b8e:	3008      	adds	r0, #8
    4b90:	f7ff ff99 	bl	4ac6 <set_off_state>
	if (err < 0) {
    4b94:	2800      	cmp	r0, #0
    4b96:	db06      	blt.n	4ba6 <stop+0x28>
	get_sub_config(dev, type)->stop();
    4b98:	4621      	mov	r1, r4
    4b9a:	4630      	mov	r0, r6
    4b9c:	f7ff ff81 	bl	4aa2 <get_sub_config>
    4ba0:	6843      	ldr	r3, [r0, #4]
    4ba2:	4798      	blx	r3
	return 0;
    4ba4:	2000      	movs	r0, #0
}
    4ba6:	bd70      	pop	{r4, r5, r6, pc}

00004ba8 <api_stop>:
{
    4ba8:	b508      	push	{r3, lr}
	return stop(dev, subsys, CTX_API);
    4baa:	2280      	movs	r2, #128	; 0x80
    4bac:	f7ff ffe7 	bl	4b7e <stop>
}
    4bb0:	bd08      	pop	{r3, pc}

00004bb2 <async_start>:
{
    4bb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4bb6:	4606      	mov	r6, r0
    4bb8:	4690      	mov	r8, r2
    4bba:	461f      	mov	r7, r3
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    4bbc:	b2cd      	uxtb	r5, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    4bbe:	4629      	mov	r1, r5
    4bc0:	f7ff ff68 	bl	4a94 <get_sub_data>
    4bc4:	4604      	mov	r4, r0
	err = set_starting_state(&subdata->flags, ctx);
    4bc6:	9906      	ldr	r1, [sp, #24]
    4bc8:	3008      	adds	r0, #8
    4bca:	f7ff ff95 	bl	4af8 <set_starting_state>
	if (err < 0) {
    4bce:	2800      	cmp	r0, #0
    4bd0:	db09      	blt.n	4be6 <async_start+0x34>
	subdata->cb = cb;
    4bd2:	f8c4 8000 	str.w	r8, [r4]
	subdata->user_data = user_data;
    4bd6:	6067      	str	r7, [r4, #4]
	 get_sub_config(dev, type)->start();
    4bd8:	4629      	mov	r1, r5
    4bda:	4630      	mov	r0, r6
    4bdc:	f7ff ff61 	bl	4aa2 <get_sub_config>
    4be0:	6803      	ldr	r3, [r0, #0]
    4be2:	4798      	blx	r3
	return 0;
    4be4:	2000      	movs	r0, #0
}
    4be6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00004bea <api_start>:
{
    4bea:	b510      	push	{r4, lr}
    4bec:	b082      	sub	sp, #8
	return async_start(dev, subsys, cb, user_data, CTX_API);
    4bee:	2480      	movs	r4, #128	; 0x80
    4bf0:	9400      	str	r4, [sp, #0]
    4bf2:	f7ff ffde 	bl	4bb2 <async_start>
}
    4bf6:	b002      	add	sp, #8
    4bf8:	bd10      	pop	{r4, pc}

00004bfa <onoff_started_callback>:
{
    4bfa:	b510      	push	{r4, lr}
    4bfc:	4614      	mov	r4, r2
	struct onoff_manager *mgr = get_onoff_manager(dev, type);
    4bfe:	b2c9      	uxtb	r1, r1
    4c00:	f7ff ff53 	bl	4aaa <get_onoff_manager>
	notify(mgr, 0);
    4c04:	2100      	movs	r1, #0
    4c06:	47a0      	blx	r4
}
    4c08:	bd10      	pop	{r4, pc}

00004c0a <hfclk_start>:
{
    4c0a:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    4c0c:	2001      	movs	r0, #1
    4c0e:	f000 fc26 	bl	545e <nrfx_clock_start>
}
    4c12:	bd08      	pop	{r3, pc}

00004c14 <lfclk_start>:
{
    4c14:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    4c16:	2000      	movs	r0, #0
    4c18:	f000 fc21 	bl	545e <nrfx_clock_start>
}
    4c1c:	bd08      	pop	{r3, pc}

00004c1e <hfclk_stop>:
{
    4c1e:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    4c20:	2001      	movs	r0, #1
    4c22:	f000 fc6c 	bl	54fe <nrfx_clock_stop>
}
    4c26:	bd08      	pop	{r3, pc}

00004c28 <lfclk_stop>:
{
    4c28:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    4c2a:	2000      	movs	r0, #0
    4c2c:	f000 fc67 	bl	54fe <nrfx_clock_stop>
}
    4c30:	bd08      	pop	{r3, pc}

00004c32 <k_msleep>:
{
    4c32:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
    4c34:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    4c38:	17c1      	asrs	r1, r0, #31
    4c3a:	03c9      	lsls	r1, r1, #15
    4c3c:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    4c40:	03c0      	lsls	r0, r0, #15
    4c42:	f240 33e7 	movw	r3, #999	; 0x3e7
    4c46:	18c0      	adds	r0, r0, r3
    4c48:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    4c4c:	f04f 0300 	mov.w	r3, #0
    4c50:	f141 0100 	adc.w	r1, r1, #0
    4c54:	f7fb fa54 	bl	100 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
    4c58:	f7fe ffc8 	bl	3bec <z_impl_k_sleep>
}
    4c5c:	bd08      	pop	{r3, pc}

00004c5e <blocking_start_callback>:
{
    4c5e:	b508      	push	{r3, lr}
    4c60:	4610      	mov	r0, r2
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    4c62:	f7fe fc51 	bl	3508 <z_impl_k_sem_give>
}
    4c66:	bd08      	pop	{r3, pc}

00004c68 <sys_slist_remove>:
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
    4c68:	460b      	mov	r3, r1
    4c6a:	b139      	cbz	r1, 4c7c <sys_slist_remove+0x14>
	return node->next;
    4c6c:	6811      	ldr	r1, [r2, #0]
	parent->next = child;
    4c6e:	6019      	str	r1, [r3, #0]
	return list->tail;
    4c70:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
    4c72:	428a      	cmp	r2, r1
    4c74:	d009      	beq.n	4c8a <sys_slist_remove+0x22>
	parent->next = child;
    4c76:	2300      	movs	r3, #0
    4c78:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    4c7a:	4770      	bx	lr
	return node->next;
    4c7c:	6813      	ldr	r3, [r2, #0]
	list->head = node;
    4c7e:	6003      	str	r3, [r0, #0]
	return list->tail;
    4c80:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
    4c82:	428a      	cmp	r2, r1
    4c84:	d1f7      	bne.n	4c76 <sys_slist_remove+0xe>
	list->tail = node;
    4c86:	6043      	str	r3, [r0, #4]
}
    4c88:	e7f5      	b.n	4c76 <sys_slist_remove+0xe>
	list->tail = node;
    4c8a:	6043      	str	r3, [r0, #4]
}
    4c8c:	e7f3      	b.n	4c76 <sys_slist_remove+0xe>

00004c8e <sys_slist_find_and_remove>:
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    4c8e:	b508      	push	{r3, lr}
    4c90:	460a      	mov	r2, r1
	return list->head;
    4c92:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    4c94:	2100      	movs	r1, #0
    4c96:	e001      	b.n	4c9c <sys_slist_find_and_remove+0xe>
    4c98:	4619      	mov	r1, r3
    4c9a:	681b      	ldr	r3, [r3, #0]
    4c9c:	b12b      	cbz	r3, 4caa <sys_slist_find_and_remove+0x1c>
    4c9e:	4293      	cmp	r3, r2
    4ca0:	d1fa      	bne.n	4c98 <sys_slist_find_and_remove+0xa>
    4ca2:	f7ff ffe1 	bl	4c68 <sys_slist_remove>
    4ca6:	2001      	movs	r0, #1
    4ca8:	e000      	b.n	4cac <sys_slist_find_and_remove+0x1e>
    4caa:	2000      	movs	r0, #0
    4cac:	bd08      	pop	{r3, pc}

00004cae <gpio_manage_callback>:
 * @return 0 on success, negative errno otherwise.
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
    4cae:	b570      	push	{r4, r5, r6, lr}
    4cb0:	4604      	mov	r4, r0
    4cb2:	460d      	mov	r5, r1
    4cb4:	4616      	mov	r6, r2
	return list->head;
    4cb6:	6803      	ldr	r3, [r0, #0]
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
    4cb8:	b133      	cbz	r3, 4cc8 <gpio_manage_callback+0x1a>
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
    4cba:	f7ff ffe8 	bl	4c8e <sys_slist_find_and_remove>
    4cbe:	b970      	cbnz	r0, 4cde <gpio_manage_callback+0x30>
			if (!set) {
    4cc0:	b91e      	cbnz	r6, 4cca <gpio_manage_callback+0x1c>
				return -EINVAL;
    4cc2:	f06f 0015 	mvn.w	r0, #21
    4cc6:	e006      	b.n	4cd6 <gpio_manage_callback+0x28>
			}
		}
	} else if (!set) {
    4cc8:	b132      	cbz	r2, 4cd8 <gpio_manage_callback+0x2a>
    4cca:	6823      	ldr	r3, [r4, #0]
	parent->next = child;
    4ccc:	602b      	str	r3, [r5, #0]
	list->head = node;
    4cce:	6025      	str	r5, [r4, #0]
	return list->tail;
    4cd0:	6863      	ldr	r3, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
    4cd2:	b143      	cbz	r3, 4ce6 <gpio_manage_callback+0x38>

	if (set) {
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
    4cd4:	2000      	movs	r0, #0
}
    4cd6:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    4cd8:	f06f 0015 	mvn.w	r0, #21
    4cdc:	e7fb      	b.n	4cd6 <gpio_manage_callback+0x28>
	if (set) {
    4cde:	2e00      	cmp	r6, #0
    4ce0:	d1f3      	bne.n	4cca <gpio_manage_callback+0x1c>
	return 0;
    4ce2:	2000      	movs	r0, #0
    4ce4:	e7f7      	b.n	4cd6 <gpio_manage_callback+0x28>
	list->tail = node;
    4ce6:	6065      	str	r5, [r4, #4]
    4ce8:	2000      	movs	r0, #0
}
    4cea:	e7f4      	b.n	4cd6 <gpio_manage_callback+0x28>

00004cec <gpio_fire_callbacks>:
 * @param pins The actual pin mask that triggered the interrupt
 */
static inline void gpio_fire_callbacks(sys_slist_t *list,
					const struct device *port,
					uint32_t pins)
{
    4cec:	b570      	push	{r4, r5, r6, lr}
    4cee:	460e      	mov	r6, r1
    4cf0:	4615      	mov	r5, r2
	return list->head;
    4cf2:	6801      	ldr	r1, [r0, #0]
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    4cf4:	b121      	cbz	r1, 4d00 <gpio_fire_callbacks+0x14>
	return node->next;
    4cf6:	680c      	ldr	r4, [r1, #0]
    4cf8:	b13c      	cbz	r4, 4d0a <gpio_fire_callbacks+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
    4cfa:	b931      	cbnz	r1, 4d0a <gpio_fire_callbacks+0x1e>
    4cfc:	460c      	mov	r4, r1
    4cfe:	e004      	b.n	4d0a <gpio_fire_callbacks+0x1e>
    4d00:	460c      	mov	r4, r1
    4d02:	e002      	b.n	4d0a <gpio_fire_callbacks+0x1e>
    4d04:	4623      	mov	r3, r4
    4d06:	4621      	mov	r1, r4
    4d08:	461c      	mov	r4, r3
    4d0a:	b171      	cbz	r1, 4d2a <gpio_fire_callbacks+0x3e>
		if (cb->pin_mask & pins) {
    4d0c:	688a      	ldr	r2, [r1, #8]
    4d0e:	402a      	ands	r2, r5
    4d10:	d002      	beq.n	4d18 <gpio_fire_callbacks+0x2c>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    4d12:	684b      	ldr	r3, [r1, #4]
    4d14:	4630      	mov	r0, r6
    4d16:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    4d18:	2c00      	cmp	r4, #0
    4d1a:	d0f3      	beq.n	4d04 <gpio_fire_callbacks+0x18>
	return node->next;
    4d1c:	6823      	ldr	r3, [r4, #0]
    4d1e:	2b00      	cmp	r3, #0
    4d20:	d0f1      	beq.n	4d06 <gpio_fire_callbacks+0x1a>
Z_GENLIST_PEEK_NEXT(slist, snode)
    4d22:	2c00      	cmp	r4, #0
    4d24:	d1ef      	bne.n	4d06 <gpio_fire_callbacks+0x1a>
    4d26:	4623      	mov	r3, r4
    4d28:	e7ed      	b.n	4d06 <gpio_fire_callbacks+0x1a>
		}
	}
}
    4d2a:	bd70      	pop	{r4, r5, r6, pc}

00004d2c <get_drive>:
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    4d2c:	f020 00f9 	bic.w	r0, r0, #249	; 0xf9
    4d30:	0580      	lsls	r0, r0, #22
    4d32:	0d80      	lsrs	r0, r0, #22
    4d34:	f5b0 7f83 	cmp.w	r0, #262	; 0x106
    4d38:	d033      	beq.n	4da2 <get_drive+0x76>
    4d3a:	d816      	bhi.n	4d6a <get_drive+0x3e>
    4d3c:	2806      	cmp	r0, #6
    4d3e:	d02c      	beq.n	4d9a <get_drive+0x6e>
    4d40:	d906      	bls.n	4d50 <get_drive+0x24>
    4d42:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
    4d46:	d10d      	bne.n	4d64 <get_drive+0x38>
		*drive = NRF_GPIO_PIN_H0S1;
    4d48:	2301      	movs	r3, #1
    4d4a:	700b      	strb	r3, [r1, #0]
	return 0;
    4d4c:	2000      	movs	r0, #0
		break;
    4d4e:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    4d50:	b300      	cbz	r0, 4d94 <get_drive+0x68>
    4d52:	2802      	cmp	r0, #2
    4d54:	d103      	bne.n	4d5e <get_drive+0x32>
		*drive = NRF_GPIO_PIN_D0S1;
    4d56:	2304      	movs	r3, #4
    4d58:	700b      	strb	r3, [r1, #0]
	return 0;
    4d5a:	2000      	movs	r0, #0
		break;
    4d5c:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    4d5e:	f06f 0015 	mvn.w	r0, #21
    4d62:	4770      	bx	lr
    4d64:	f06f 0015 	mvn.w	r0, #21
    4d68:	4770      	bx	lr
    4d6a:	f240 2302 	movw	r3, #514	; 0x202
    4d6e:	4298      	cmp	r0, r3
    4d70:	d01b      	beq.n	4daa <get_drive+0x7e>
    4d72:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
    4d76:	d103      	bne.n	4d80 <get_drive+0x54>
		*drive = NRF_GPIO_PIN_H0H1;
    4d78:	2303      	movs	r3, #3
    4d7a:	700b      	strb	r3, [r1, #0]
	return 0;
    4d7c:	2000      	movs	r0, #0
		break;
    4d7e:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    4d80:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    4d84:	d103      	bne.n	4d8e <get_drive+0x62>
		*drive = NRF_GPIO_PIN_S0H1;
    4d86:	2302      	movs	r3, #2
    4d88:	700b      	strb	r3, [r1, #0]
	return 0;
    4d8a:	2000      	movs	r0, #0
		break;
    4d8c:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    4d8e:	f06f 0015 	mvn.w	r0, #21
    4d92:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0S1;
    4d94:	2000      	movs	r0, #0
    4d96:	7008      	strb	r0, [r1, #0]
		break;
    4d98:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0D1;
    4d9a:	2306      	movs	r3, #6
    4d9c:	700b      	strb	r3, [r1, #0]
	return 0;
    4d9e:	2000      	movs	r0, #0
		break;
    4da0:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_H0D1;
    4da2:	2307      	movs	r3, #7
    4da4:	700b      	strb	r3, [r1, #0]
	return 0;
    4da6:	2000      	movs	r0, #0
		break;
    4da8:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_D0H1;
    4daa:	2305      	movs	r3, #5
    4dac:	700b      	strb	r3, [r1, #0]
	return 0;
    4dae:	2000      	movs	r0, #0
}
    4db0:	4770      	bx	lr

00004db2 <get_pull>:
	if (flags & GPIO_PULL_UP) {
    4db2:	f010 0f10 	tst.w	r0, #16
    4db6:	d104      	bne.n	4dc2 <get_pull+0x10>
	} else if (flags & GPIO_PULL_DOWN) {
    4db8:	f010 0f20 	tst.w	r0, #32
    4dbc:	d103      	bne.n	4dc6 <get_pull+0x14>
	return NRF_GPIO_PIN_NOPULL;
    4dbe:	2000      	movs	r0, #0
    4dc0:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLUP;
    4dc2:	2003      	movs	r0, #3
    4dc4:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLDOWN;
    4dc6:	2001      	movs	r0, #1
}
    4dc8:	4770      	bx	lr

00004dca <gpio_nrfx_port_get_raw>:
	return port->config;
    4dca:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    4dcc:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    4dce:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    4dd2:	600b      	str	r3, [r1, #0]
}
    4dd4:	2000      	movs	r0, #0
    4dd6:	4770      	bx	lr

00004dd8 <gpio_nrfx_port_set_masked_raw>:
	return port->config;
    4dd8:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    4dda:	685b      	ldr	r3, [r3, #4]
	const uint32_t set_mask = value & mask;
    4ddc:	ea02 0001 	and.w	r0, r2, r1
	const uint32_t clear_mask = (~set_mask) & mask;
    4de0:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
    4de4:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
    4de8:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
    4dec:	2000      	movs	r0, #0
    4dee:	4770      	bx	lr

00004df0 <gpio_nrfx_port_set_bits_raw>:
	return port->config;
    4df0:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    4df2:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
    4df4:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
}
    4df8:	2000      	movs	r0, #0
    4dfa:	4770      	bx	lr

00004dfc <gpio_nrfx_port_clear_bits_raw>:
	return port->config;
    4dfc:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    4dfe:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
    4e00:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
    4e04:	2000      	movs	r0, #0
    4e06:	4770      	bx	lr

00004e08 <gpio_nrfx_port_toggle_bits>:
	return port->config;
    4e08:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    4e0a:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    4e0c:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	const uint32_t set_mask = value & mask;
    4e10:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
    4e14:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
    4e16:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
    4e1a:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
    4e1e:	2000      	movs	r0, #0
    4e20:	4770      	bx	lr

00004e22 <get_trigger>:
	if (mode == GPIO_INT_MODE_LEVEL) {
    4e22:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    4e26:	d007      	beq.n	4e38 <get_trigger+0x16>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    4e28:	f1b1 6fc0 	cmp.w	r1, #100663296	; 0x6000000
    4e2c:	d00d      	beq.n	4e4a <get_trigger+0x28>
    4e2e:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
    4e32:	d008      	beq.n	4e46 <get_trigger+0x24>
    4e34:	2001      	movs	r0, #1
}
    4e36:	4770      	bx	lr
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    4e38:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
    4e3c:	d001      	beq.n	4e42 <get_trigger+0x20>
    4e3e:	2005      	movs	r0, #5
    4e40:	4770      	bx	lr
    4e42:	2004      	movs	r0, #4
    4e44:	4770      	bx	lr
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    4e46:	2002      	movs	r0, #2
    4e48:	4770      	bx	lr
    4e4a:	2003      	movs	r0, #3
    4e4c:	4770      	bx	lr

00004e4e <gpio_nrfx_manage_callback>:
{
    4e4e:	b508      	push	{r3, lr}
	return port->data;
    4e50:	6900      	ldr	r0, [r0, #16]
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    4e52:	3004      	adds	r0, #4
    4e54:	f7ff ff2b 	bl	4cae <gpio_manage_callback>
}
    4e58:	bd08      	pop	{r3, pc}

00004e5a <nrfx_gpio_handler>:
{
    4e5a:	b510      	push	{r4, lr}
    *p_pin = pin_number & 0x1F;
    4e5c:	f000 041f 	and.w	r4, r0, #31
	const struct device *port = get_dev(port_id);
    4e60:	0940      	lsrs	r0, r0, #5
    4e62:	f7fc fdaf 	bl	19c4 <get_dev>
	if (port == NULL) {
    4e66:	b130      	cbz	r0, 4e76 <nrfx_gpio_handler+0x1c>
    4e68:	4601      	mov	r1, r0
	return port->data;
    4e6a:	6900      	ldr	r0, [r0, #16]
	gpio_fire_callbacks(list, port, BIT(pin));
    4e6c:	2201      	movs	r2, #1
    4e6e:	40a2      	lsls	r2, r4
    4e70:	3004      	adds	r0, #4
    4e72:	f7ff ff3b 	bl	4cec <gpio_fire_callbacks>
}
    4e76:	bd10      	pop	{r4, pc}

00004e78 <endtx_isr>:
	const struct uarte_nrfx_config *config = dev->config;
    4e78:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    4e7a:	681a      	ldr	r2, [r3, #0]
	__asm__ volatile(
    4e7c:	f04f 0120 	mov.w	r1, #32
    4e80:	f3ef 8311 	mrs	r3, BASEPRI
    4e84:	f381 8812 	msr	BASEPRI_MAX, r1
    4e88:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4e8c:	f8d2 1120 	ldr.w	r1, [r2, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    4e90:	b131      	cbz	r1, 4ea0 <endtx_isr+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4e92:	2100      	movs	r1, #0
    4e94:	f8c2 1120 	str.w	r1, [r2, #288]	; 0x120
    4e98:	f8d2 1120 	ldr.w	r1, [r2, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4e9c:	2101      	movs	r1, #1
    4e9e:	60d1      	str	r1, [r2, #12]
	__asm__ volatile(
    4ea0:	f383 8811 	msr	BASEPRI, r3
    4ea4:	f3bf 8f6f 	isb	sy
}
    4ea8:	4770      	bx	lr

00004eaa <uarte_nrfx_isr_int>:
{
    4eaa:	b538      	push	{r3, r4, r5, lr}
	const struct uarte_nrfx_config *config = dev->config;
    4eac:	6845      	ldr	r5, [r0, #4]
	return config->uarte_regs;
    4eae:	682c      	ldr	r4, [r5, #0]
    return p_reg->INTENSET & mask;
    4eb0:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    4eb4:	f413 7f80 	tst.w	r3, #256	; 0x100
    4eb8:	d002      	beq.n	4ec0 <uarte_nrfx_isr_int+0x16>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4eba:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    4ebe:	b9d3      	cbnz	r3, 4ef6 <uarte_nrfx_isr_int+0x4c>
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    4ec0:	686b      	ldr	r3, [r5, #4]
    4ec2:	f013 0f10 	tst.w	r3, #16
    4ec6:	d015      	beq.n	4ef4 <uarte_nrfx_isr_int+0x4a>
	__asm__ volatile(
    4ec8:	f04f 0220 	mov.w	r2, #32
    4ecc:	f3ef 8311 	mrs	r3, BASEPRI
    4ed0:	f382 8812 	msr	BASEPRI_MAX, r2
    4ed4:	f3bf 8f6f 	isb	sy
    4ed8:	f8d4 2158 	ldr.w	r2, [r4, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    4edc:	b112      	cbz	r2, 4ee4 <uarte_nrfx_isr_int+0x3a>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    4ede:	2200      	movs	r2, #0
    4ee0:	f8c4 2500 	str.w	r2, [r4, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    4ee4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    4ee8:	f8c4 2308 	str.w	r2, [r4, #776]	; 0x308
	__asm__ volatile(
    4eec:	f383 8811 	msr	BASEPRI, r3
    4ef0:	f3bf 8f6f 	isb	sy
}
    4ef4:	bd38      	pop	{r3, r4, r5, pc}
		endtx_isr(dev);
    4ef6:	f7ff ffbf 	bl	4e78 <endtx_isr>
    4efa:	e7e1      	b.n	4ec0 <uarte_nrfx_isr_int+0x16>

00004efc <uarte_nrfx_configure>:
{
    4efc:	b570      	push	{r4, r5, r6, lr}
    4efe:	b082      	sub	sp, #8
    4f00:	4605      	mov	r5, r0
    4f02:	460c      	mov	r4, r1
	struct uarte_nrfx_data *data = dev->data;
    4f04:	6906      	ldr	r6, [r0, #16]
	switch (cfg->stop_bits) {
    4f06:	794b      	ldrb	r3, [r1, #5]
    4f08:	2b01      	cmp	r3, #1
    4f0a:	d006      	beq.n	4f1a <uarte_nrfx_configure+0x1e>
    4f0c:	2b03      	cmp	r3, #3
    4f0e:	d011      	beq.n	4f34 <uarte_nrfx_configure+0x38>
    4f10:	f06f 0285 	mvn.w	r2, #133	; 0x85
}
    4f14:	4610      	mov	r0, r2
    4f16:	b002      	add	sp, #8
    4f18:	bd70      	pop	{r4, r5, r6, pc}
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
    4f1a:	2300      	movs	r3, #0
    4f1c:	f88d 3002 	strb.w	r3, [sp, #2]
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    4f20:	79a3      	ldrb	r3, [r4, #6]
    4f22:	2b03      	cmp	r3, #3
    4f24:	d146      	bne.n	4fb4 <uarte_nrfx_configure+0xb8>
	switch (cfg->flow_ctrl) {
    4f26:	79e3      	ldrb	r3, [r4, #7]
    4f28:	b143      	cbz	r3, 4f3c <uarte_nrfx_configure+0x40>
    4f2a:	2b01      	cmp	r3, #1
    4f2c:	d015      	beq.n	4f5a <uarte_nrfx_configure+0x5e>
    4f2e:	f06f 0285 	mvn.w	r2, #133	; 0x85
    4f32:	e7ef      	b.n	4f14 <uarte_nrfx_configure+0x18>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    4f34:	2310      	movs	r3, #16
    4f36:	f88d 3002 	strb.w	r3, [sp, #2]
		break;
    4f3a:	e7f1      	b.n	4f20 <uarte_nrfx_configure+0x24>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
    4f3c:	2300      	movs	r3, #0
    4f3e:	f88d 3000 	strb.w	r3, [sp]
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
    4f42:	2300      	movs	r3, #0
    4f44:	f8ad 3004 	strh.w	r3, [sp, #4]
	switch (cfg->parity) {
    4f48:	7923      	ldrb	r3, [r4, #4]
    4f4a:	2b01      	cmp	r3, #1
    4f4c:	d02a      	beq.n	4fa4 <uarte_nrfx_configure+0xa8>
    4f4e:	2b02      	cmp	r3, #2
    4f50:	d024      	beq.n	4f9c <uarte_nrfx_configure+0xa0>
    4f52:	b133      	cbz	r3, 4f62 <uarte_nrfx_configure+0x66>
    4f54:	f06f 0285 	mvn.w	r2, #133	; 0x85
    4f58:	e7dc      	b.n	4f14 <uarte_nrfx_configure+0x18>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_ENABLED;
    4f5a:	2301      	movs	r3, #1
    4f5c:	f88d 3000 	strb.w	r3, [sp]
		break;
    4f60:	e7ef      	b.n	4f42 <uarte_nrfx_configure+0x46>
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
    4f62:	f88d 3001 	strb.w	r3, [sp, #1]
	if (baudrate_set(dev, cfg->baudrate) != 0) {
    4f66:	6821      	ldr	r1, [r4, #0]
    4f68:	4628      	mov	r0, r5
    4f6a:	f7fc fe43 	bl	1bf4 <baudrate_set>
    4f6e:	4602      	mov	r2, r0
    4f70:	bb18      	cbnz	r0, 4fba <uarte_nrfx_configure+0xbe>
	const struct uarte_nrfx_config *config = dev->config;
    4f72:	686b      	ldr	r3, [r5, #4]
	return config->uarte_regs;
    4f74:	6819      	ldr	r1, [r3, #0]
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    4f76:	f89d 3001 	ldrb.w	r3, [sp, #1]
                    | (uint32_t)p_cfg->stop
    4f7a:	f89d 0002 	ldrb.w	r0, [sp, #2]
    4f7e:	4303      	orrs	r3, r0
                    | (uint32_t)p_cfg->paritytype
    4f80:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    4f84:	4303      	orrs	r3, r0
                    | (uint32_t)p_cfg->hwfc;
    4f86:	f89d 0000 	ldrb.w	r0, [sp]
    4f8a:	4303      	orrs	r3, r0
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    4f8c:	f8c1 356c 	str.w	r3, [r1, #1388]	; 0x56c
	data->uart_config = *cfg;
    4f90:	3604      	adds	r6, #4
    4f92:	e894 0003 	ldmia.w	r4, {r0, r1}
    4f96:	e886 0003 	stmia.w	r6, {r0, r1}
	return 0;
    4f9a:	e7bb      	b.n	4f14 <uarte_nrfx_configure+0x18>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    4f9c:	230e      	movs	r3, #14
    4f9e:	f88d 3001 	strb.w	r3, [sp, #1]
		break;
    4fa2:	e7e0      	b.n	4f66 <uarte_nrfx_configure+0x6a>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    4fa4:	230e      	movs	r3, #14
    4fa6:	f88d 3001 	strb.w	r3, [sp, #1]
		uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_ODD;
    4faa:	f44f 7380 	mov.w	r3, #256	; 0x100
    4fae:	f8ad 3004 	strh.w	r3, [sp, #4]
		break;
    4fb2:	e7d8      	b.n	4f66 <uarte_nrfx_configure+0x6a>
		return -ENOTSUP;
    4fb4:	f06f 0285 	mvn.w	r2, #133	; 0x85
    4fb8:	e7ac      	b.n	4f14 <uarte_nrfx_configure+0x18>
		return -ENOTSUP;
    4fba:	f06f 0285 	mvn.w	r2, #133	; 0x85
    4fbe:	e7a9      	b.n	4f14 <uarte_nrfx_configure+0x18>

00004fc0 <uarte_nrfx_config_get>:
{
    4fc0:	460a      	mov	r2, r1
	struct uarte_nrfx_data *data = dev->data;
    4fc2:	6903      	ldr	r3, [r0, #16]
	*cfg = data->uart_config;
    4fc4:	3304      	adds	r3, #4
    4fc6:	e893 0003 	ldmia.w	r3, {r0, r1}
    4fca:	e882 0003 	stmia.w	r2, {r0, r1}
}
    4fce:	2000      	movs	r0, #0
    4fd0:	4770      	bx	lr

00004fd2 <uarte_nrfx_err_check>:
	const struct uarte_nrfx_config *config = dev->config;
    4fd2:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    4fd4:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    4fd6:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    4fda:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    4fde:	4770      	bx	lr

00004fe0 <is_tx_ready>:
	const struct uarte_nrfx_config *config = dev->config;
    4fe0:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    4fe2:	681a      	ldr	r2, [r3, #0]
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    4fe4:	685b      	ldr	r3, [r3, #4]
    4fe6:	f003 0302 	and.w	r3, r3, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4fea:	f8d2 1158 	ldr.w	r1, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    4fee:	b929      	cbnz	r1, 4ffc <is_tx_ready+0x1c>
    4ff0:	b933      	cbnz	r3, 5000 <is_tx_ready+0x20>
    4ff2:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
    4ff6:	b92b      	cbnz	r3, 5004 <is_tx_ready+0x24>
    4ff8:	2000      	movs	r0, #0
    4ffa:	4770      	bx	lr
    4ffc:	2001      	movs	r0, #1
    4ffe:	4770      	bx	lr
    5000:	2000      	movs	r0, #0
    5002:	4770      	bx	lr
    5004:	2001      	movs	r0, #1
}
    5006:	4770      	bx	lr

00005008 <uarte_enable>:
	const struct uarte_nrfx_config *config = dev->config;
    5008:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    500a:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    500c:	2208      	movs	r2, #8
    500e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
    5012:	4770      	bx	lr

00005014 <tx_start>:
{
    5014:	b510      	push	{r4, lr}
	const struct uarte_nrfx_config *config = dev->config;
    5016:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    5018:	681c      	ldr	r4, [r3, #0]

NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    501a:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    501e:	f8c4 2548 	str.w	r2, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5022:	2200      	movs	r2, #0
    5024:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
    5028:	f8d4 1120 	ldr.w	r1, [r4, #288]	; 0x120
    502c:	f8c4 2158 	str.w	r2, [r4, #344]	; 0x158
    5030:	f8d4 2158 	ldr.w	r2, [r4, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    5034:	685b      	ldr	r3, [r3, #4]
    5036:	f013 0f10 	tst.w	r3, #16
    503a:	d102      	bne.n	5042 <tx_start+0x2e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    503c:	2301      	movs	r3, #1
    503e:	60a3      	str	r3, [r4, #8]
}
    5040:	bd10      	pop	{r4, pc}
		uarte_enable(dev, UARTE_LOW_POWER_TX);
    5042:	2101      	movs	r1, #1
    5044:	f7ff ffe0 	bl	5008 <uarte_enable>
    p_reg->INTENSET = mask;
    5048:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    504c:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
    5050:	e7f4      	b.n	503c <tx_start+0x28>

00005052 <uarte_nrfx_poll_in>:
{
    5052:	b410      	push	{r4}
	const struct uarte_nrfx_data *data = dev->data;
    5054:	6904      	ldr	r4, [r0, #16]
	const struct uarte_nrfx_config *config = dev->config;
    5056:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    5058:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    505a:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    505e:	b15a      	cbz	r2, 5078 <uarte_nrfx_poll_in+0x26>
	*c = *data->rx_data;
    5060:	6962      	ldr	r2, [r4, #20]
    5062:	7812      	ldrb	r2, [r2, #0]
    5064:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5066:	2000      	movs	r0, #0
    5068:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    506c:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5070:	2201      	movs	r2, #1
    5072:	601a      	str	r2, [r3, #0]
}
    5074:	bc10      	pop	{r4}
    5076:	4770      	bx	lr
		return -1;
    5078:	f04f 30ff 	mov.w	r0, #4294967295
    507c:	e7fa      	b.n	5074 <uarte_nrfx_poll_in+0x22>

0000507e <k_msleep>:
{
    507e:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
    5080:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    5084:	17c1      	asrs	r1, r0, #31
    5086:	03c9      	lsls	r1, r1, #15
    5088:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    508c:	03c0      	lsls	r0, r0, #15
    508e:	f240 33e7 	movw	r3, #999	; 0x3e7
    5092:	18c0      	adds	r0, r0, r3
    5094:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    5098:	f04f 0300 	mov.w	r3, #0
    509c:	f141 0100 	adc.w	r1, r1, #0
    50a0:	f7fb f82e 	bl	100 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
    50a4:	f7fe fda2 	bl	3bec <z_impl_k_sleep>
}
    50a8:	bd08      	pop	{r3, pc}

000050aa <wait_tx_ready>:
{
    50aa:	b570      	push	{r4, r5, r6, lr}
    50ac:	4606      	mov	r6, r0
    50ae:	e013      	b.n	50d8 <wait_tx_ready+0x2e>
		if (res) {
    50b0:	b17d      	cbz	r5, 50d2 <wait_tx_ready+0x28>
	__asm__ volatile(
    50b2:	f04f 0320 	mov.w	r3, #32
    50b6:	f3ef 8411 	mrs	r4, BASEPRI
    50ba:	f383 8812 	msr	BASEPRI_MAX, r3
    50be:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    50c2:	4630      	mov	r0, r6
    50c4:	f7ff ff8c 	bl	4fe0 <is_tx_ready>
    50c8:	b998      	cbnz	r0, 50f2 <wait_tx_ready+0x48>
	__asm__ volatile(
    50ca:	f384 8811 	msr	BASEPRI, r4
    50ce:	f3bf 8f6f 	isb	sy
			k_msleep(1);
    50d2:	2001      	movs	r0, #1
    50d4:	f7ff ffd3 	bl	507e <k_msleep>
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    50d8:	2464      	movs	r4, #100	; 0x64
    50da:	4630      	mov	r0, r6
    50dc:	f7ff ff80 	bl	4fe0 <is_tx_ready>
    50e0:	4605      	mov	r5, r0
    50e2:	2800      	cmp	r0, #0
    50e4:	d1e4      	bne.n	50b0 <wait_tx_ready+0x6>
    50e6:	2001      	movs	r0, #1
    50e8:	f000 f927 	bl	533a <nrfx_busy_wait>
    50ec:	3c01      	subs	r4, #1
    50ee:	d1f4      	bne.n	50da <wait_tx_ready+0x30>
    50f0:	e7de      	b.n	50b0 <wait_tx_ready+0x6>
}
    50f2:	4620      	mov	r0, r4
    50f4:	bd70      	pop	{r4, r5, r6, pc}

000050f6 <pinctrl_apply_state>:
 * @retval -ENOENT If given state id does not exist.
 * @retval -errno Negative errno for other failures.
 */
static inline int pinctrl_apply_state(const struct pinctrl_dev_config *config,
				      uint8_t id)
{
    50f6:	b510      	push	{r4, lr}
    50f8:	b082      	sub	sp, #8
    50fa:	4604      	mov	r4, r0
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    50fc:	aa01      	add	r2, sp, #4
    50fe:	f000 f8c2 	bl	5286 <pinctrl_lookup_state>
	if (ret < 0) {
    5102:	2800      	cmp	r0, #0
    5104:	db05      	blt.n	5112 <pinctrl_apply_state+0x1c>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    5106:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    5108:	6822      	ldr	r2, [r4, #0]
    510a:	7919      	ldrb	r1, [r3, #4]
    510c:	6818      	ldr	r0, [r3, #0]
    510e:	f7fd f8eb 	bl	22e8 <pinctrl_configure_pins>
}
    5112:	b002      	add	sp, #8
    5114:	bd10      	pop	{r4, pc}

00005116 <uarte_instance_init>:

static int uarte_instance_init(const struct device *dev,
			       uint8_t interrupts_active)
{
    5116:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    511a:	4604      	mov	r4, r0
	const struct uarte_nrfx_config *config = dev->config;
    511c:	6847      	ldr	r7, [r0, #4]
	return config->uarte_regs;
    511e:	683e      	ldr	r6, [r7, #0]
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = dev->data;
    5120:	f8d0 8010 	ldr.w	r8, [r0, #16]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    5124:	2100      	movs	r1, #0
    5126:	f8c6 1500 	str.w	r1, [r6, #1280]	; 0x500
	const struct uarte_nrfx_config *cfg = dev->config;

	nrf_uarte_disable(uarte);

	data->dev = dev;
    512a:	f8c8 0000 	str.w	r0, [r8]

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
    512e:	68f8      	ldr	r0, [r7, #12]
    5130:	f7ff ffe1 	bl	50f6 <pinctrl_apply_state>
	if (err < 0) {
    5134:	1e05      	subs	r5, r0, #0
    5136:	db35      	blt.n	51a4 <uarte_instance_init+0x8e>
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &data->uart_config);
    5138:	f108 0104 	add.w	r1, r8, #4
    513c:	4620      	mov	r0, r4
    513e:	f7ff fedd 	bl	4efc <uarte_nrfx_configure>
	if (err) {
    5142:	4605      	mov	r5, r0
    5144:	bb70      	cbnz	r0, 51a4 <uarte_instance_init+0x8e>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    5146:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    5148:	f013 0f02 	tst.w	r3, #2
    514c:	d12d      	bne.n	51aa <uarte_instance_init+0x94>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    514e:	2308      	movs	r3, #8
    5150:	f8c6 3500 	str.w	r3, [r6, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (!cfg->disable_rx) {
    5154:	7a3b      	ldrb	r3, [r7, #8]
    5156:	b95b      	cbnz	r3, 5170 <uarte_instance_init+0x5a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5158:	f8c6 3110 	str.w	r3, [r6, #272]	; 0x110
    515c:	f8d6 3110 	ldr.w	r3, [r6, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, data->rx_data, 1);
    5160:	f8d8 3014 	ldr.w	r3, [r8, #20]

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    5164:	f8c6 3534 	str.w	r3, [r6, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    5168:	2301      	movs	r3, #1
    516a:	f8c6 3538 	str.w	r3, [r6, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    516e:	6033      	str	r3, [r6, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    5170:	687b      	ldr	r3, [r7, #4]
    5172:	f013 0f02 	tst.w	r3, #2
    5176:	d103      	bne.n	5180 <uarte_instance_init+0x6a>
    p_reg->INTENSET = mask;
    5178:	f44f 7380 	mov.w	r3, #256	; 0x100
    517c:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    5180:	687b      	ldr	r3, [r7, #4]
    5182:	f013 0f10 	tst.w	r3, #16
    5186:	d003      	beq.n	5190 <uarte_instance_init+0x7a>
    5188:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    518c:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, data->char_out, 0);
    5190:	f8d8 3010 	ldr.w	r3, [r8, #16]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    5194:	f8c6 3544 	str.w	r3, [r6, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    5198:	2300      	movs	r3, #0
    519a:	f8c6 3548 	str.w	r3, [r6, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    519e:	2301      	movs	r3, #1
    51a0:	60b3      	str	r3, [r6, #8]
    51a2:	60f3      	str	r3, [r6, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    51a4:	4628      	mov	r0, r5
    51a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		err = endtx_stoptx_ppi_init(uarte, data);
    51aa:	4641      	mov	r1, r8
    51ac:	4630      	mov	r0, r6
    51ae:	f7fc fdf7 	bl	1da0 <endtx_stoptx_ppi_init>
		if (err < 0) {
    51b2:	2800      	cmp	r0, #0
    51b4:	dacb      	bge.n	514e <uarte_instance_init+0x38>
			return err;
    51b6:	4605      	mov	r5, r0
    51b8:	e7f4      	b.n	51a4 <uarte_instance_init+0x8e>

000051ba <uarte_0_init>:
		(__attribute__((__section__(LINKER_DT_NODE_REGION_NAME(	       \
			DT_PHANDLE(UARTE(idx), memory_regions)))))),	       \
		())

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    51ba:	b510      	push	{r4, lr}
    51bc:	4604      	mov	r4, r0
    51be:	2200      	movs	r2, #0
    51c0:	2101      	movs	r1, #1
    51c2:	2002      	movs	r0, #2
    51c4:	f7ff fafa 	bl	47bc <z_arm_irq_priority_set>
    51c8:	2002      	movs	r0, #2
    51ca:	f7ff faf2 	bl	47b2 <arch_irq_enable>
    51ce:	2100      	movs	r1, #0
    51d0:	4620      	mov	r0, r4
    51d2:	f7ff ffa0 	bl	5116 <uarte_instance_init>
    51d6:	bd10      	pop	{r4, pc}

000051d8 <uarte_1_init>:
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
    51d8:	b510      	push	{r4, lr}
    51da:	4604      	mov	r4, r0
    51dc:	2200      	movs	r2, #0
    51de:	2101      	movs	r1, #1
    51e0:	2028      	movs	r0, #40	; 0x28
    51e2:	f7ff faeb 	bl	47bc <z_arm_irq_priority_set>
    51e6:	2028      	movs	r0, #40	; 0x28
    51e8:	f7ff fae3 	bl	47b2 <arch_irq_enable>
    51ec:	2100      	movs	r1, #0
    51ee:	4620      	mov	r0, r4
    51f0:	f7ff ff91 	bl	5116 <uarte_instance_init>
    51f4:	bd10      	pop	{r4, pc}

000051f6 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    51f6:	4770      	bx	lr

000051f8 <counter_sub>:
	return (a - b) & COUNTER_MAX;
    51f8:	1a40      	subs	r0, r0, r1
}
    51fa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    51fe:	4770      	bx	lr

00005200 <event_check>:
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    5200:	f100 0350 	add.w	r3, r0, #80	; 0x50
    5204:	009b      	lsls	r3, r3, #2
    5206:	b29b      	uxth	r3, r3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5208:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    520c:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    5210:	6818      	ldr	r0, [r3, #0]
}
    5212:	3800      	subs	r0, #0
    5214:	bf18      	it	ne
    5216:	2001      	movne	r0, #1
    5218:	4770      	bx	lr

0000521a <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    521a:	f100 0350 	add.w	r3, r0, #80	; 0x50
    521e:	009b      	lsls	r3, r3, #2
    5220:	b29b      	uxth	r3, r3
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    5222:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    5226:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    522a:	2200      	movs	r2, #0
    522c:	601a      	str	r2, [r3, #0]
    522e:	681b      	ldr	r3, [r3, #0]
}
    5230:	4770      	bx	lr

00005232 <absolute_time_to_cc>:
}
    5232:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    5236:	4770      	bx	lr

00005238 <full_int_lock>:
	__asm__ volatile(
    5238:	f04f 0320 	mov.w	r3, #32
    523c:	f3ef 8011 	mrs	r0, BASEPRI
    5240:	f383 8812 	msr	BASEPRI_MAX, r3
    5244:	f3bf 8f6f 	isb	sy
}
    5248:	4770      	bx	lr

0000524a <full_int_unlock>:
	__asm__ volatile(
    524a:	f380 8811 	msr	BASEPRI, r0
    524e:	f3bf 8f6f 	isb	sy
}
    5252:	4770      	bx	lr

00005254 <compare_set>:
{
    5254:	b5f0      	push	{r4, r5, r6, r7, lr}
    5256:	b083      	sub	sp, #12
    5258:	4604      	mov	r4, r0
    525a:	4617      	mov	r7, r2
    525c:	461d      	mov	r5, r3
	key = compare_int_lock(chan);
    525e:	f7fc fe1d 	bl	1e9c <compare_int_lock>
    5262:	4606      	mov	r6, r0
	int ret = compare_set_nolocks(chan, target_time, handler, user_data);
    5264:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5266:	9301      	str	r3, [sp, #4]
    5268:	9b08      	ldr	r3, [sp, #32]
    526a:	9300      	str	r3, [sp, #0]
    526c:	463a      	mov	r2, r7
    526e:	462b      	mov	r3, r5
    5270:	4620      	mov	r0, r4
    5272:	f7fc fee1 	bl	2038 <compare_set_nolocks>
    5276:	4605      	mov	r5, r0
	compare_int_unlock(chan, key);
    5278:	4631      	mov	r1, r6
    527a:	4620      	mov	r0, r4
    527c:	f7fc fe64 	bl	1f48 <compare_int_unlock>
}
    5280:	4628      	mov	r0, r5
    5282:	b003      	add	sp, #12
    5284:	bdf0      	pop	{r4, r5, r6, r7, pc}

00005286 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
    5286:	b500      	push	{lr}
	*state = &config->states[0];
    5288:	6843      	ldr	r3, [r0, #4]
    528a:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
    528c:	e001      	b.n	5292 <pinctrl_lookup_state+0xc>
		if (id == (*state)->id) {
			return 0;
		}

		(*state)++;
    528e:	3308      	adds	r3, #8
    5290:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
    5292:	6813      	ldr	r3, [r2, #0]
    5294:	f890 c008 	ldrb.w	ip, [r0, #8]
    5298:	f8d0 e004 	ldr.w	lr, [r0, #4]
    529c:	eb0e 0ccc 	add.w	ip, lr, ip, lsl #3
    52a0:	4563      	cmp	r3, ip
    52a2:	d205      	bcs.n	52b0 <pinctrl_lookup_state+0x2a>
		if (id == (*state)->id) {
    52a4:	f893 c005 	ldrb.w	ip, [r3, #5]
    52a8:	458c      	cmp	ip, r1
    52aa:	d1f0      	bne.n	528e <pinctrl_lookup_state+0x8>
			return 0;
    52ac:	2000      	movs	r0, #0
    52ae:	e001      	b.n	52b4 <pinctrl_lookup_state+0x2e>
	}

	return -ENOENT;
    52b0:	f06f 0001 	mvn.w	r0, #1
}
    52b4:	f85d fb04 	ldr.w	pc, [sp], #4

000052b8 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    52b8:	b508      	push	{r3, lr}

	LOG_PANIC();

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
    52ba:	2000      	movs	r0, #0
    52bc:	f7ff fbaa 	bl	4a14 <sys_arch_reboot>

000052c0 <nrf52_errata_36>:
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    52c0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    52c4:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
                        return true;
                }
            }
        #endif
        #if defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)
            if (var1 == 0x0D)
    52c8:	2b0d      	cmp	r3, #13
    52ca:	d001      	beq.n	52d0 <nrf52_errata_36+0x10>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    52cc:	2000      	movs	r0, #0
    52ce:	4770      	bx	lr
                        return true;
    52d0:	2001      	movs	r0, #1
    #endif
}
    52d2:	4770      	bx	lr

000052d4 <nrf52_errata_66>:
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    52d4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    52d8:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
                        return true;
                }
            }
        #endif
        #if defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)
            if (var1 == 0x0D)
    52dc:	2b0d      	cmp	r3, #13
    52de:	d001      	beq.n	52e4 <nrf52_errata_66+0x10>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    52e0:	2000      	movs	r0, #0
    52e2:	4770      	bx	lr
                        return true;
    52e4:	2001      	movs	r0, #1
    #endif
}
    52e6:	4770      	bx	lr

000052e8 <nrf52_errata_136>:
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    52e8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    52ec:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
                        return true;
                }
            }
        #endif
        #if defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)
            if (var1 == 0x0D)
    52f0:	2b0d      	cmp	r3, #13
    52f2:	d001      	beq.n	52f8 <nrf52_errata_136+0x10>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    52f4:	2000      	movs	r0, #0
    52f6:	4770      	bx	lr
                        return true;
    52f8:	2001      	movs	r0, #1
    #endif
}
    52fa:	4770      	bx	lr

000052fc <nrf52_configuration_249>:
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    52fc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    5300:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    5304:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                        return true;
                }
            }
        #endif
        #if defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)
            if (var1 == 0x0D)
    5308:	2a0d      	cmp	r2, #13
    530a:	d001      	beq.n	5310 <nrf52_configuration_249+0x14>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    530c:	2000      	movs	r0, #0
    530e:	4770      	bx	lr
                switch(var2)
    5310:	b10b      	cbz	r3, 5316 <nrf52_configuration_249+0x1a>
                        return true;
    5312:	2001      	movs	r0, #1
    #endif
}
    5314:	4770      	bx	lr
                switch(var2)
    5316:	2000      	movs	r0, #0
    5318:	4770      	bx	lr

0000531a <nrf52_handle_approtect>:
        Otherwise, the fw branch state is loaded from UICR, emulating the legacy APPROTECT behavior.

         The same mechanism is implemented for SECURE APPROTECT, with the macros
         ENABLE_SECURE_APPROTECT and ENABLE_SECURE_APPROTECT_USER_HANDLING. */
static inline void nrf52_handle_approtect(void)
{
    531a:	b508      	push	{r3, lr}
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    531c:	f7ff ffee 	bl	52fc <nrf52_configuration_249>
    5320:	b138      	cbz	r0, 5332 <nrf52_handle_approtect+0x18>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    5322:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    5326:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    532a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    532e:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558
            }
        #endif
    #endif
}
    5332:	bd08      	pop	{r3, pc}

00005334 <nrfx_isr>:
#include <nrfx.h>
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
    5334:	b508      	push	{r3, lr}
	((nrfx_irq_handler_t)irq_handler)();
    5336:	4780      	blx	r0
}
    5338:	bd08      	pop	{r3, pc}

0000533a <nrfx_busy_wait>:

void nrfx_busy_wait(uint32_t usec_to_wait)
{
    533a:	b508      	push	{r3, lr}
	z_impl_k_busy_wait(usec_to_wait);
    533c:	f000 fb41 	bl	59c2 <z_impl_k_busy_wait>
	if (IS_ENABLED(CONFIG_SYS_CLOCK_EXISTS)) {
		k_busy_wait(usec_to_wait);
	} else {
		nrfx_coredep_delay_us(usec_to_wait);
	}
}
    5340:	bd08      	pop	{r3, pc}

00005342 <nrf_clock_is_running>:
    switch (domain)
    5342:	b119      	cbz	r1, 534c <nrf_clock_is_running+0xa>
    5344:	2901      	cmp	r1, #1
    5346:	d00e      	beq.n	5366 <nrf_clock_is_running+0x24>
    5348:	2000      	movs	r0, #0
    534a:	4770      	bx	lr
            if (p_clk_src != NULL)
    534c:	b122      	cbz	r2, 5358 <nrf_clock_is_running+0x16>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    534e:	f8d0 3418 	ldr.w	r3, [r0, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    5352:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    5356:	6013      	str	r3, [r2, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    5358:	f8d0 3418 	ldr.w	r3, [r0, #1048]	; 0x418
    535c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    5360:	d10e      	bne.n	5380 <nrf_clock_is_running+0x3e>
    return false;
    5362:	2000      	movs	r0, #0
    5364:	4770      	bx	lr
            if (p_clk_src != NULL)
    5366:	b122      	cbz	r2, 5372 <nrf_clock_is_running+0x30>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    5368:	f8d0 340c 	ldr.w	r3, [r0, #1036]	; 0x40c
    536c:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    5370:	7013      	strb	r3, [r2, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    5372:	f8d0 340c 	ldr.w	r3, [r0, #1036]	; 0x40c
    5376:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    537a:	d103      	bne.n	5384 <nrf_clock_is_running+0x42>
    return false;
    537c:	2000      	movs	r0, #0
    537e:	4770      	bx	lr
                return true;
    5380:	2001      	movs	r0, #1
    5382:	4770      	bx	lr
                return true;
    5384:	2001      	movs	r0, #1
}
    5386:	4770      	bx	lr

00005388 <clock_initial_lfclksrc_get>:
}
    5388:	2000      	movs	r0, #0
    538a:	4770      	bx	lr

0000538c <nrfx_power_clock_irq_init>:
extern "C" {
#endif


__STATIC_INLINE void nrfx_power_clock_irq_init(void)
{
    538c:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    538e:	2000      	movs	r0, #0
    5390:	f7fb fda6 	bl	ee0 <arch_irq_is_enabled>
    5394:	b100      	cbz	r0, 5398 <nrfx_power_clock_irq_init+0xc>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    }
}
    5396:	bd08      	pop	{r3, pc}
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    5398:	f7ff fa0b 	bl	47b2 <arch_irq_enable>
}
    539c:	e7fb      	b.n	5396 <nrfx_power_clock_irq_init+0xa>

0000539e <clock_stop>:
{
    539e:	b570      	push	{r4, r5, r6, lr}
    53a0:	b082      	sub	sp, #8
    switch (domain)
    53a2:	4606      	mov	r6, r0
    53a4:	b118      	cbz	r0, 53ae <clock_stop+0x10>
    53a6:	2801      	cmp	r0, #1
    53a8:	d016      	beq.n	53d8 <clock_stop+0x3a>
}
    53aa:	b002      	add	sp, #8
    53ac:	bd70      	pop	{r4, r5, r6, pc}
    p_reg->INTENCLR = mask;
    53ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    53b2:	2202      	movs	r2, #2
    53b4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    53b8:	2200      	movs	r2, #0
    53ba:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    53be:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    53c2:	2201      	movs	r2, #1
    53c4:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    53c6:	2301      	movs	r3, #1
    53c8:	f88d 3007 	strb.w	r3, [sp, #7]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    53cc:	429e      	cmp	r6, r3
    53ce:	d00f      	beq.n	53f0 <clock_stop+0x52>
    53d0:	2500      	movs	r5, #0
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    53d2:	f242 7410 	movw	r4, #10000	; 0x2710
    53d6:	e013      	b.n	5400 <clock_stop+0x62>
    p_reg->INTENCLR = mask;
    53d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    53dc:	2201      	movs	r2, #1
    53de:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    53e2:	2100      	movs	r1, #0
    53e4:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    53e8:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    53ec:	605a      	str	r2, [r3, #4]
}
    53ee:	e7ea      	b.n	53c6 <clock_stop+0x28>
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    53f0:	f10d 0507 	add.w	r5, sp, #7
    53f4:	e7ed      	b.n	53d2 <clock_stop+0x34>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    53f6:	2001      	movs	r0, #1
    53f8:	f7ff ff9f 	bl	533a <nrfx_busy_wait>
    53fc:	3c01      	subs	r4, #1
    53fe:	d0d4      	beq.n	53aa <clock_stop+0xc>
    return nrf_clock_is_running(NRF_CLOCK, domain, p_clk_src);
    5400:	462a      	mov	r2, r5
    5402:	4631      	mov	r1, r6
    5404:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    5408:	f7ff ff9b 	bl	5342 <nrf_clock_is_running>
    540c:	2800      	cmp	r0, #0
    540e:	d0cc      	beq.n	53aa <clock_stop+0xc>
    5410:	2d00      	cmp	r5, #0
    5412:	d0f0      	beq.n	53f6 <clock_stop+0x58>
    5414:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5418:	2b01      	cmp	r3, #1
    541a:	d0ec      	beq.n	53f6 <clock_stop+0x58>
    541c:	e7c5      	b.n	53aa <clock_stop+0xc>

0000541e <clock_lfclksrc_tweak>:
{
    541e:	b538      	push	{r3, r4, r5, lr}
    5420:	4604      	mov	r4, r0
    bool is_correct_clk = (*p_lfclksrc == NRFX_CLOCK_CONFIG_LF_SRC);
    5422:	6803      	ldr	r3, [r0, #0]
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    5424:	2b01      	cmp	r3, #1
    5426:	d002      	beq.n	542e <clock_lfclksrc_tweak+0x10>
    5428:	b933      	cbnz	r3, 5438 <clock_lfclksrc_tweak+0x1a>
    542a:	2301      	movs	r3, #1
    542c:	e000      	b.n	5430 <clock_lfclksrc_tweak+0x12>
    542e:	2301      	movs	r3, #1
    if (!is_correct_clk)
    5430:	461d      	mov	r5, r3
    5432:	b11b      	cbz	r3, 543c <clock_lfclksrc_tweak+0x1e>
}
    5434:	4628      	mov	r0, r5
    5436:	bd38      	pop	{r3, r4, r5, pc}
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    5438:	2300      	movs	r3, #0
    543a:	e7f9      	b.n	5430 <clock_lfclksrc_tweak+0x12>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    543c:	2000      	movs	r0, #0
    543e:	f7ff ffae 	bl	539e <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
    5442:	f7ff ffa1 	bl	5388 <clock_initial_lfclksrc_get>
    5446:	6020      	str	r0, [r4, #0]
    5448:	e7f4      	b.n	5434 <clock_lfclksrc_tweak+0x16>

0000544a <nrfx_clock_enable>:
{
    544a:	b508      	push	{r3, lr}
    nrfx_power_clock_irq_init();
    544c:	f7ff ff9e 	bl	538c <nrfx_power_clock_irq_init>
    nrf_clock_lf_src_set(NRF_CLOCK, clock_initial_lfclksrc_get());
    5450:	f7ff ff9a 	bl	5388 <clock_initial_lfclksrc_get>
    p_reg->LFCLKSRC = (uint32_t)(source);
    5454:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5458:	f8c3 0518 	str.w	r0, [r3, #1304]	; 0x518
}
    545c:	bd08      	pop	{r3, pc}

0000545e <nrfx_clock_start>:
    switch (domain)
    545e:	b110      	cbz	r0, 5466 <nrfx_clock_start+0x8>
    5460:	2801      	cmp	r0, #1
    5462:	d040      	beq.n	54e6 <nrfx_clock_start+0x88>
    5464:	4770      	bx	lr
{
    5466:	b500      	push	{lr}
    5468:	b083      	sub	sp, #12
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    546a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    546e:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    5472:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    5476:	9301      	str	r3, [sp, #4]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    5478:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
    547c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    5480:	d11b      	bne.n	54ba <nrfx_clock_start+0x5c>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    5482:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5486:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    548a:	f013 0f01 	tst.w	r3, #1
    548e:	d118      	bne.n	54c2 <nrfx_clock_start+0x64>
                    lfclksrc = clock_initial_lfclksrc_get();
    5490:	f7ff ff7a 	bl	5388 <clock_initial_lfclksrc_get>
    5494:	9001      	str	r0, [sp, #4]
    p_reg->LFCLKSRC = (uint32_t)(source);
    5496:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    549a:	9a01      	ldr	r2, [sp, #4]
    549c:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    54a0:	2200      	movs	r2, #0
    54a2:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    54a6:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
    54aa:	2202      	movs	r2, #2
    54ac:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    54b0:	2201      	movs	r2, #1
    54b2:	609a      	str	r2, [r3, #8]
}
    54b4:	b003      	add	sp, #12
    54b6:	f85d fb04 	ldr.w	pc, [sp], #4
                    (void)clock_lfclksrc_tweak(&lfclksrc);
    54ba:	a801      	add	r0, sp, #4
    54bc:	f7ff ffaf 	bl	541e <clock_lfclksrc_tweak>
    54c0:	e7e9      	b.n	5496 <nrfx_clock_start+0x38>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    54c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    54c6:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    54ca:	f003 0303 	and.w	r3, r3, #3
                    lfclksrc = nrf_clock_lf_srccopy_get(NRF_CLOCK);
    54ce:	9301      	str	r3, [sp, #4]
                    if (clock_lfclksrc_tweak(&lfclksrc))
    54d0:	a801      	add	r0, sp, #4
    54d2:	f7ff ffa4 	bl	541e <clock_lfclksrc_tweak>
    54d6:	2800      	cmp	r0, #0
    54d8:	d0dd      	beq.n	5496 <nrfx_clock_start+0x38>
    p_reg->INTENSET = mask;
    54da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    54de:	2202      	movs	r2, #2
    54e0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
                        break;
    54e4:	e7e6      	b.n	54b4 <nrfx_clock_start+0x56>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    54e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    54ea:	2200      	movs	r2, #0
    54ec:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    54f0:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    54f4:	2201      	movs	r2, #1
    54f6:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    54fa:	601a      	str	r2, [r3, #0]
    54fc:	4770      	bx	lr

000054fe <nrfx_clock_stop>:
{
    54fe:	b508      	push	{r3, lr}
    clock_stop(domain);
    5500:	f7ff ff4d 	bl	539e <clock_stop>
}
    5504:	bd08      	pop	{r3, pc}

00005506 <nrf_gpiote_event_configure>:
{
    5506:	b410      	push	{r4}
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    5508:	f501 71a2 	add.w	r1, r1, #324	; 0x144
    550c:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
    5510:	f424 344f 	bic.w	r4, r4, #211968	; 0x33c00
    5514:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    5518:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    551c:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
    5520:	0212      	lsls	r2, r2, #8
    5522:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
    5526:	041b      	lsls	r3, r3, #16
    5528:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    552c:	431a      	orrs	r2, r3
    552e:	4314      	orrs	r4, r2
    5530:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
}
    5534:	bc10      	pop	{r4}
    5536:	4770      	bx	lr

00005538 <nrf_gpiote_task_configure>:
{
    5538:	b410      	push	{r4}
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    553a:	f501 71a2 	add.w	r1, r1, #324	; 0x144
    553e:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
    5542:	f424 1499 	bic.w	r4, r4, #1253376	; 0x132000
    5546:	f424 54f8 	bic.w	r4, r4, #7936	; 0x1f00
    554a:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    554e:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
    5552:	0212      	lsls	r2, r2, #8
    5554:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    5558:	041b      	lsls	r3, r3, #16
    555a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    555e:	431a      	orrs	r2, r3
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    5560:	f89d 3004 	ldrb.w	r3, [sp, #4]
    5564:	051b      	lsls	r3, r3, #20
    5566:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    556a:	431a      	orrs	r2, r3
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    556c:	4314      	orrs	r4, r2
    556e:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
}
    5572:	bc10      	pop	{r4}
    5574:	4770      	bx	lr

00005576 <nrf_gpio_cfg_sense_set>:
{
    5576:	b500      	push	{lr}
    5578:	b085      	sub	sp, #20
    557a:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    557e:	f10d 030f 	add.w	r3, sp, #15
    5582:	9301      	str	r3, [sp, #4]
    5584:	2100      	movs	r1, #0
    5586:	9100      	str	r1, [sp, #0]
    5588:	460b      	mov	r3, r1
    558a:	460a      	mov	r2, r1
    558c:	f7fd f8fa 	bl	2784 <nrf_gpio_reconfigure>
}
    5590:	b005      	add	sp, #20
    5592:	f85d fb04 	ldr.w	pc, [sp], #4

00005596 <pin_is_task_output>:
{
    5596:	b510      	push	{r4, lr}
    5598:	4604      	mov	r4, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    559a:	f7fd f991 	bl	28c0 <pin_is_output>
    559e:	b128      	cbz	r0, 55ac <pin_is_task_output+0x16>
    55a0:	4620      	mov	r0, r4
    55a2:	f7fd f977 	bl	2894 <pin_in_use_by_te>
    55a6:	b118      	cbz	r0, 55b0 <pin_is_task_output+0x1a>
    55a8:	2001      	movs	r0, #1
    55aa:	e000      	b.n	55ae <pin_is_task_output+0x18>
    55ac:	2000      	movs	r0, #0
}
    55ae:	bd10      	pop	{r4, pc}
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    55b0:	2000      	movs	r0, #0
    55b2:	e7fc      	b.n	55ae <pin_is_task_output+0x18>

000055b4 <pin_is_input>:
{
    55b4:	b508      	push	{r3, lr}
    return !pin_is_output(pin);
    55b6:	f7fd f983 	bl	28c0 <pin_is_output>
    55ba:	f080 0001 	eor.w	r0, r0, #1
}
    55be:	b2c0      	uxtb	r0, r0
    55c0:	bd08      	pop	{r3, pc}

000055c2 <gpiote_polarity_to_trigger>:
}
    55c2:	4770      	bx	lr

000055c4 <gpiote_trigger_to_polarity>:
}
    55c4:	4770      	bx	lr

000055c6 <is_level>:
}
    55c6:	2803      	cmp	r0, #3
    55c8:	bf94      	ite	ls
    55ca:	2000      	movls	r0, #0
    55cc:	2001      	movhi	r0, #1
    55ce:	4770      	bx	lr

000055d0 <latch_pending_read_and_check>:
{
    55d0:	b510      	push	{r4, lr}
    55d2:	4604      	mov	r4, r0
    nrf_gpio_latches_read_and_clear(0, GPIO_COUNT, latch);
    55d4:	4602      	mov	r2, r0
    55d6:	2102      	movs	r1, #2
    55d8:	2000      	movs	r0, #0
    55da:	f7fd f92f 	bl	283c <nrf_gpio_latches_read_and_clear>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
    55de:	2300      	movs	r3, #0
    55e0:	2b01      	cmp	r3, #1
    55e2:	d804      	bhi.n	55ee <latch_pending_read_and_check+0x1e>
        if (latch[port_idx])
    55e4:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
    55e8:	b91a      	cbnz	r2, 55f2 <latch_pending_read_and_check+0x22>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
    55ea:	3301      	adds	r3, #1
    55ec:	e7f8      	b.n	55e0 <latch_pending_read_and_check+0x10>
    return false;
    55ee:	2000      	movs	r0, #0
}
    55f0:	bd10      	pop	{r4, pc}
            return true;
    55f2:	2001      	movs	r0, #1
    55f4:	e7fc      	b.n	55f0 <latch_pending_read_and_check+0x20>

000055f6 <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
    55f6:	b508      	push	{r3, lr}
  _DoInit();
    55f8:	f7fd fd2c 	bl	3054 <_DoInit>
}
    55fc:	bd08      	pop	{r3, pc}

000055fe <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
    55fe:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
    5600:	f7ff fff9 	bl	55f6 <SEGGER_RTT_Init>

	return 0;
}
    5604:	2000      	movs	r0, #0
    5606:	bd08      	pop	{r3, pc}

00005608 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    5608:	b160      	cbz	r0, 5624 <z_device_is_ready+0x1c>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    560a:	68c3      	ldr	r3, [r0, #12]
    560c:	785a      	ldrb	r2, [r3, #1]
    560e:	f012 0f01 	tst.w	r2, #1
    5612:	d003      	beq.n	561c <z_device_is_ready+0x14>
    5614:	781b      	ldrb	r3, [r3, #0]
    5616:	b11b      	cbz	r3, 5620 <z_device_is_ready+0x18>
    5618:	2000      	movs	r0, #0
    561a:	4770      	bx	lr
    561c:	2000      	movs	r0, #0
    561e:	4770      	bx	lr
    5620:	2001      	movs	r0, #1
    5622:	4770      	bx	lr
		return false;
    5624:	2000      	movs	r0, #0
}
    5626:	4770      	bx	lr

00005628 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    5628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    562a:	4605      	mov	r5, r0
    562c:	460e      	mov	r6, r1
	__asm__ volatile(
    562e:	f04f 0320 	mov.w	r3, #32
    5632:	f3ef 8711 	mrs	r7, BASEPRI
    5636:	f383 8812 	msr	BASEPRI_MAX, r3
    563a:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    563e:	f7fe faff 	bl	3c40 <z_impl_z_current_get>
    5642:	4604      	mov	r4, r0

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
    5644:	4631      	mov	r1, r6
    5646:	4628      	mov	r0, r5
    5648:	f7ff fe36 	bl	52b8 <k_sys_fatal_error_handler>
	__asm__ volatile(
    564c:	f387 8811 	msr	BASEPRI, r7
    5650:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    5654:	4620      	mov	r0, r4
    5656:	f7fb ff1d 	bl	1494 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    565a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000565c <z_early_memset>:
{
    565c:	b508      	push	{r3, lr}
	(void) memset(dst, c, n);
    565e:	f7ff f9b8 	bl	49d2 <memset>
}
    5662:	bd08      	pop	{r3, pc}

00005664 <z_early_memcpy>:
{
    5664:	b508      	push	{r3, lr}
	(void) memcpy(dst, src, n);
    5666:	f7ff f985 	bl	4974 <memcpy>
}
    566a:	bd08      	pop	{r3, pc}

0000566c <setup_thread_stack>:
{
    566c:	b410      	push	{r4}
    566e:	4603      	mov	r3, r0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    5670:	3207      	adds	r2, #7
    5672:	f022 0207 	bic.w	r2, r2, #7
    5676:	f102 0040 	add.w	r0, r2, #64	; 0x40

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    567a:	f101 0440 	add.w	r4, r1, #64	; 0x40
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
    567e:	f8c3 4098 	str.w	r4, [r3, #152]	; 0x98
	new_thread->stack_info.size = stack_buf_size;
    5682:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	new_thread->stack_info.delta = delta;
    5686:	2200      	movs	r2, #0
    5688:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
}
    568c:	4408      	add	r0, r1
    568e:	bc10      	pop	{r4}
    5690:	4770      	bx	lr

00005692 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    5692:	f3ef 8005 	mrs	r0, IPSR
}
    5696:	3800      	subs	r0, #0
    5698:	bf18      	it	ne
    569a:	2001      	movne	r0, #1
    569c:	4770      	bx	lr

0000569e <z_impl_k_thread_start>:
{
    569e:	b508      	push	{r3, lr}
	z_sched_start(thread);
    56a0:	f7fe f924 	bl	38ec <z_sched_start>
}
    56a4:	bd08      	pop	{r3, pc}

000056a6 <z_init_thread_base>:
#endif

void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
    56a6:	b410      	push	{r4}
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
    56a8:	2400      	movs	r4, #0
    56aa:	6084      	str	r4, [r0, #8]
	thread_base->user_options = (uint8_t)options;
    56ac:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    56ae:	7342      	strb	r2, [r0, #13]

	thread_base->prio = priority;
    56b0:	7381      	strb	r1, [r0, #14]

	thread_base->sched_locked = 0U;
    56b2:	73c4      	strb	r4, [r0, #15]
	node->next = NULL;
    56b4:	6184      	str	r4, [r0, #24]
	node->prev = NULL;
    56b6:	61c4      	str	r4, [r0, #28]
#endif

	/* swap_data does not need to be initialized */

	z_init_thread_timeout(thread_base);
}
    56b8:	bc10      	pop	{r4}
    56ba:	4770      	bx	lr

000056bc <z_pm_save_idle_exit>:
{
    56bc:	b508      	push	{r3, lr}
	pm_system_resume();
    56be:	f7fb fad3 	bl	c68 <pm_system_resume>
	sys_clock_idle_exit();
    56c2:	f7ff fd98 	bl	51f6 <sys_clock_idle_exit>
}
    56c6:	bd08      	pop	{r3, pc}

000056c8 <thread_active_elsewhere>:
}
    56c8:	2000      	movs	r0, #0
    56ca:	4770      	bx	lr

000056cc <pended_on_thread>:
}
    56cc:	6880      	ldr	r0, [r0, #8]
    56ce:	4770      	bx	lr

000056d0 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
    56d0:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    56d4:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
    56d8:	4283      	cmp	r3, r0
    56da:	d001      	beq.n	56e0 <z_sched_prio_cmp+0x10>
		return b2 - b1;
    56dc:	1ac0      	subs	r0, r0, r3
    56de:	4770      	bx	lr
	return 0;
    56e0:	2000      	movs	r0, #0
}
    56e2:	4770      	bx	lr

000056e4 <z_reschedule_irqlock>:
{
    56e4:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    56e6:	4603      	mov	r3, r0
    56e8:	b928      	cbnz	r0, 56f6 <z_reschedule_irqlock+0x12>
    56ea:	f3ef 8205 	mrs	r2, IPSR
    56ee:	b912      	cbnz	r2, 56f6 <z_reschedule_irqlock+0x12>
	ret = arch_swap(key);
    56f0:	f7fb fc24 	bl	f3c <arch_swap>
	return ret;
    56f4:	e003      	b.n	56fe <z_reschedule_irqlock+0x1a>
    56f6:	f383 8811 	msr	BASEPRI, r3
    56fa:	f3bf 8f6f 	isb	sy
}
    56fe:	bd08      	pop	{r3, pc}

00005700 <z_reschedule_unlocked>:
{
    5700:	b508      	push	{r3, lr}
	__asm__ volatile(
    5702:	f04f 0320 	mov.w	r3, #32
    5706:	f3ef 8011 	mrs	r0, BASEPRI
    570a:	f383 8812 	msr	BASEPRI_MAX, r3
    570e:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    5712:	f7ff ffe7 	bl	56e4 <z_reschedule_irqlock>
}
    5716:	bd08      	pop	{r3, pc}

00005718 <z_priq_dumb_remove>:
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
    5718:	684a      	ldr	r2, [r1, #4]
	sys_dnode_t *const next = node->next;
    571a:	680b      	ldr	r3, [r1, #0]

	prev->next = next;
    571c:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    571e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    5720:	2300      	movs	r3, #0
    5722:	600b      	str	r3, [r1, #0]
	node->prev = NULL;
    5724:	604b      	str	r3, [r1, #4]
}
    5726:	4770      	bx	lr

00005728 <unpend_thread_no_timeout>:
{
    5728:	b510      	push	{r4, lr}
    572a:	4604      	mov	r4, r0
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    572c:	f7ff ffce 	bl	56cc <pended_on_thread>
    5730:	4621      	mov	r1, r4
    5732:	f7ff fff1 	bl	5718 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    5736:	7b63      	ldrb	r3, [r4, #13]
    5738:	f023 0302 	bic.w	r3, r3, #2
    573c:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    573e:	2300      	movs	r3, #0
    5740:	60a3      	str	r3, [r4, #8]
}
    5742:	bd10      	pop	{r4, pc}

00005744 <z_priq_dumb_best>:
{
    5744:	4603      	mov	r3, r0
	return list->head == list;
    5746:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5748:	4283      	cmp	r3, r0
    574a:	d000      	beq.n	574e <z_priq_dumb_best+0xa>
}
    574c:	4770      	bx	lr
	struct k_thread *thread = NULL;
    574e:	2000      	movs	r0, #0
	return thread;
    5750:	e7fc      	b.n	574c <z_priq_dumb_best+0x8>

00005752 <z_ready_thread>:
{
    5752:	b538      	push	{r3, r4, r5, lr}
    5754:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
    5756:	2300      	movs	r3, #0
    5758:	f04f 0220 	mov.w	r2, #32
    575c:	f3ef 8511 	mrs	r5, BASEPRI
    5760:	f382 8812 	msr	BASEPRI_MAX, r2
    5764:	f3bf 8f6f 	isb	sy
    5768:	e004      	b.n	5774 <z_ready_thread+0x22>
	__asm__ volatile(
    576a:	f385 8811 	msr	BASEPRI, r5
    576e:	f3bf 8f6f 	isb	sy
    5772:	2301      	movs	r3, #1
    5774:	b943      	cbnz	r3, 5788 <z_ready_thread+0x36>
		if (!thread_active_elsewhere(thread)) {
    5776:	4620      	mov	r0, r4
    5778:	f7ff ffa6 	bl	56c8 <thread_active_elsewhere>
    577c:	2800      	cmp	r0, #0
    577e:	d1f4      	bne.n	576a <z_ready_thread+0x18>
			ready_thread(thread);
    5780:	4620      	mov	r0, r4
    5782:	f7fe f877 	bl	3874 <ready_thread>
    5786:	e7f0      	b.n	576a <z_ready_thread+0x18>
}
    5788:	bd38      	pop	{r3, r4, r5, pc}

0000578a <z_thread_timeout>:
{
    578a:	b570      	push	{r4, r5, r6, lr}
    578c:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
    578e:	f1a0 0618 	sub.w	r6, r0, #24
	LOCKED(&sched_spinlock) {
    5792:	2300      	movs	r3, #0
	__asm__ volatile(
    5794:	f04f 0220 	mov.w	r2, #32
    5798:	f3ef 8511 	mrs	r5, BASEPRI
    579c:	f382 8812 	msr	BASEPRI_MAX, r2
    57a0:	f3bf 8f6f 	isb	sy
    57a4:	e011      	b.n	57ca <z_thread_timeout+0x40>
	thread->base.thread_state &= ~_THREAD_PRESTART;
    57a6:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    57aa:	f023 0204 	bic.w	r2, r3, #4
    57ae:	f804 2c0b 	strb.w	r2, [r4, #-11]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    57b2:	f023 0314 	bic.w	r3, r3, #20
    57b6:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
    57ba:	4630      	mov	r0, r6
    57bc:	f7fe f85a 	bl	3874 <ready_thread>
	__asm__ volatile(
    57c0:	f385 8811 	msr	BASEPRI, r5
    57c4:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    57c8:	2301      	movs	r3, #1
    57ca:	b963      	cbnz	r3, 57e6 <z_thread_timeout+0x5c>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
    57cc:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		if (!killed) {
    57d0:	f013 0f28 	tst.w	r3, #40	; 0x28
    57d4:	d1f4      	bne.n	57c0 <z_thread_timeout+0x36>
			if (thread->base.pended_on != NULL) {
    57d6:	f854 3c10 	ldr.w	r3, [r4, #-16]
    57da:	2b00      	cmp	r3, #0
    57dc:	d0e3      	beq.n	57a6 <z_thread_timeout+0x1c>
				unpend_thread_no_timeout(thread);
    57de:	4630      	mov	r0, r6
    57e0:	f7ff ffa2 	bl	5728 <unpend_thread_no_timeout>
    57e4:	e7df      	b.n	57a6 <z_thread_timeout+0x1c>
}
    57e6:	bd70      	pop	{r4, r5, r6, pc}

000057e8 <unpend_all>:
{
    57e8:	b538      	push	{r3, r4, r5, lr}
    57ea:	4605      	mov	r5, r0
	return list->head == list;
    57ec:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    57ee:	42a5      	cmp	r5, r4
    57f0:	d00e      	beq.n	5810 <unpend_all+0x28>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    57f2:	b16c      	cbz	r4, 5810 <unpend_all+0x28>
		unpend_thread_no_timeout(thread);
    57f4:	4620      	mov	r0, r4
    57f6:	f7ff ff97 	bl	5728 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    57fa:	f104 0018 	add.w	r0, r4, #24
    57fe:	f000 f87c 	bl	58fa <z_abort_timeout>
    5802:	2300      	movs	r3, #0
    5804:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
		ready_thread(thread);
    5808:	4620      	mov	r0, r4
    580a:	f7fe f833 	bl	3874 <ready_thread>
    580e:	e7ed      	b.n	57ec <unpend_all+0x4>
}
    5810:	bd38      	pop	{r3, r4, r5, pc}

00005812 <add_to_waitq_locked>:
{
    5812:	b570      	push	{r4, r5, r6, lr}
    5814:	4605      	mov	r5, r0
    5816:	460e      	mov	r6, r1
	unready_thread(thread);
    5818:	f7fe f886 	bl	3928 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    581c:	7b6b      	ldrb	r3, [r5, #13]
    581e:	f043 0302 	orr.w	r3, r3, #2
    5822:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
    5824:	b1fe      	cbz	r6, 5866 <add_to_waitq_locked+0x54>
		thread->base.pended_on = wait_q;
    5826:	60ae      	str	r6, [r5, #8]
	return list->head == list;
    5828:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    582a:	42a6      	cmp	r6, r4
    582c:	d108      	bne.n	5840 <add_to_waitq_locked+0x2e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    582e:	2400      	movs	r4, #0
    5830:	e006      	b.n	5840 <add_to_waitq_locked+0x2e>
	sys_dnode_t *const prev = successor->prev;
    5832:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    5834:	606b      	str	r3, [r5, #4]
	node->next = successor;
    5836:	602c      	str	r4, [r5, #0]
	prev->next = node;
    5838:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    583a:	6065      	str	r5, [r4, #4]
}
    583c:	e013      	b.n	5866 <add_to_waitq_locked+0x54>
    583e:	2400      	movs	r4, #0
    5840:	b164      	cbz	r4, 585c <add_to_waitq_locked+0x4a>
		if (z_sched_prio_cmp(thread, t) > 0) {
    5842:	4621      	mov	r1, r4
    5844:	4628      	mov	r0, r5
    5846:	f7ff ff43 	bl	56d0 <z_sched_prio_cmp>
    584a:	2800      	cmp	r0, #0
    584c:	dcf1      	bgt.n	5832 <add_to_waitq_locked+0x20>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    584e:	2c00      	cmp	r4, #0
    5850:	d0f6      	beq.n	5840 <add_to_waitq_locked+0x2e>
	return (node == list->tail) ? NULL : node->next;
    5852:	6873      	ldr	r3, [r6, #4]
    5854:	429c      	cmp	r4, r3
    5856:	d0f2      	beq.n	583e <add_to_waitq_locked+0x2c>
    5858:	6824      	ldr	r4, [r4, #0]
    585a:	e7f1      	b.n	5840 <add_to_waitq_locked+0x2e>
	sys_dnode_t *const tail = list->tail;
    585c:	6873      	ldr	r3, [r6, #4]
	node->next = list;
    585e:	602e      	str	r6, [r5, #0]
	node->prev = tail;
    5860:	606b      	str	r3, [r5, #4]
	tail->next = node;
    5862:	601d      	str	r5, [r3, #0]
	list->tail = node;
    5864:	6075      	str	r5, [r6, #4]
}
    5866:	bd70      	pop	{r4, r5, r6, pc}

00005868 <pend_locked>:
{
    5868:	b570      	push	{r4, r5, r6, lr}
    586a:	4604      	mov	r4, r0
    586c:	4616      	mov	r6, r2
    586e:	461d      	mov	r5, r3
	add_to_waitq_locked(thread, wait_q);
    5870:	f7ff ffcf 	bl	5812 <add_to_waitq_locked>
	add_thread_timeout(thread, timeout);
    5874:	4632      	mov	r2, r6
    5876:	462b      	mov	r3, r5
    5878:	4620      	mov	r0, r4
    587a:	f7fd feaf 	bl	35dc <add_thread_timeout>
}
    587e:	bd70      	pop	{r4, r5, r6, pc}

00005880 <z_unpend_first_thread>:
{
    5880:	b570      	push	{r4, r5, r6, lr}
    5882:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
    5884:	2300      	movs	r3, #0
	__asm__ volatile(
    5886:	f04f 0220 	mov.w	r2, #32
    588a:	f3ef 8511 	mrs	r5, BASEPRI
    588e:	f382 8812 	msr	BASEPRI_MAX, r2
    5892:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
    5896:	461c      	mov	r4, r3
    5898:	e004      	b.n	58a4 <z_unpend_first_thread+0x24>
	__asm__ volatile(
    589a:	f385 8811 	msr	BASEPRI, r5
    589e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    58a2:	2301      	movs	r3, #1
    58a4:	b963      	cbnz	r3, 58c0 <z_unpend_first_thread+0x40>
		thread = _priq_wait_best(&wait_q->waitq);
    58a6:	4630      	mov	r0, r6
    58a8:	f7ff ff4c 	bl	5744 <z_priq_dumb_best>
		if (thread != NULL) {
    58ac:	4604      	mov	r4, r0
    58ae:	2800      	cmp	r0, #0
    58b0:	d0f3      	beq.n	589a <z_unpend_first_thread+0x1a>
			unpend_thread_no_timeout(thread);
    58b2:	f7ff ff39 	bl	5728 <unpend_thread_no_timeout>
    58b6:	f104 0018 	add.w	r0, r4, #24
    58ba:	f000 f81e 	bl	58fa <z_abort_timeout>
    58be:	e7ec      	b.n	589a <z_unpend_first_thread+0x1a>
}
    58c0:	4620      	mov	r0, r4
    58c2:	bd70      	pop	{r4, r5, r6, pc}

000058c4 <init_ready_q>:
	sys_dlist_init(&rq->runq);
    58c4:	1d03      	adds	r3, r0, #4
	list->head = (sys_dnode_t *)list;
    58c6:	6043      	str	r3, [r0, #4]
	list->tail = (sys_dnode_t *)list;
    58c8:	6083      	str	r3, [r0, #8]
}
    58ca:	4770      	bx	lr

000058cc <remove_timeout>:
{
    58cc:	b510      	push	{r4, lr}
    58ce:	4604      	mov	r4, r0
	if (next(t) != NULL) {
    58d0:	f7fe fa18 	bl	3d04 <next>
    58d4:	b148      	cbz	r0, 58ea <remove_timeout+0x1e>
    58d6:	4602      	mov	r2, r0
		next(t)->dticks += t->dticks;
    58d8:	6903      	ldr	r3, [r0, #16]
    58da:	6941      	ldr	r1, [r0, #20]
    58dc:	6920      	ldr	r0, [r4, #16]
    58de:	181b      	adds	r3, r3, r0
    58e0:	6960      	ldr	r0, [r4, #20]
    58e2:	eb41 0100 	adc.w	r1, r1, r0
    58e6:	6113      	str	r3, [r2, #16]
    58e8:	6151      	str	r1, [r2, #20]
	sys_dnode_t *const prev = node->prev;
    58ea:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
    58ec:	6823      	ldr	r3, [r4, #0]
	prev->next = next;
    58ee:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    58f0:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    58f2:	2300      	movs	r3, #0
    58f4:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
    58f6:	6063      	str	r3, [r4, #4]
}
    58f8:	bd10      	pop	{r4, pc}

000058fa <z_abort_timeout>:
{
    58fa:	b570      	push	{r4, r5, r6, lr}
    58fc:	4604      	mov	r4, r0
	LOCKED(&timeout_lock) {
    58fe:	2300      	movs	r3, #0
	__asm__ volatile(
    5900:	f04f 0220 	mov.w	r2, #32
    5904:	f3ef 8611 	mrs	r6, BASEPRI
    5908:	f382 8812 	msr	BASEPRI_MAX, r2
    590c:	f3bf 8f6f 	isb	sy
	int ret = -EINVAL;
    5910:	f06f 0015 	mvn.w	r0, #21
    5914:	e004      	b.n	5920 <z_abort_timeout+0x26>
	__asm__ volatile(
    5916:	f386 8811 	msr	BASEPRI, r6
    591a:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    591e:	2301      	movs	r3, #1
    5920:	461d      	mov	r5, r3
    5922:	b93b      	cbnz	r3, 5934 <z_abort_timeout+0x3a>
	return node->next != NULL;
    5924:	6823      	ldr	r3, [r4, #0]
		if (sys_dnode_is_linked(&to->node)) {
    5926:	2b00      	cmp	r3, #0
    5928:	d0f5      	beq.n	5916 <z_abort_timeout+0x1c>
			remove_timeout(to);
    592a:	4620      	mov	r0, r4
    592c:	f7ff ffce 	bl	58cc <remove_timeout>
			ret = 0;
    5930:	4628      	mov	r0, r5
    5932:	e7f0      	b.n	5916 <z_abort_timeout+0x1c>
}
    5934:	bd70      	pop	{r4, r5, r6, pc}

00005936 <z_get_next_timeout_expiry>:
{
    5936:	b510      	push	{r4, lr}
	LOCKED(&timeout_lock) {
    5938:	2300      	movs	r3, #0
	__asm__ volatile(
    593a:	f04f 0220 	mov.w	r2, #32
    593e:	f3ef 8411 	mrs	r4, BASEPRI
    5942:	f382 8812 	msr	BASEPRI_MAX, r2
    5946:	f3bf 8f6f 	isb	sy
	int32_t ret = (int32_t) K_TICKS_FOREVER;
    594a:	f04f 30ff 	mov.w	r0, #4294967295
    594e:	e006      	b.n	595e <z_get_next_timeout_expiry+0x28>
		ret = next_timeout();
    5950:	f7fe f9f0 	bl	3d34 <next_timeout>
	__asm__ volatile(
    5954:	f384 8811 	msr	BASEPRI, r4
    5958:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    595c:	2301      	movs	r3, #1
    595e:	2b00      	cmp	r3, #0
    5960:	d0f6      	beq.n	5950 <z_get_next_timeout_expiry+0x1a>
}
    5962:	bd10      	pop	{r4, pc}

00005964 <z_set_timeout_expiry>:
{
    5964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5966:	4606      	mov	r6, r0
    5968:	460f      	mov	r7, r1
	LOCKED(&timeout_lock) {
    596a:	2300      	movs	r3, #0
	__asm__ volatile(
    596c:	f04f 0220 	mov.w	r2, #32
    5970:	f3ef 8511 	mrs	r5, BASEPRI
    5974:	f382 8812 	msr	BASEPRI_MAX, r2
    5978:	f3bf 8f6f 	isb	sy
    597c:	e00a      	b.n	5994 <z_set_timeout_expiry+0x30>
			      || (ticks <= next_to);
    597e:	2401      	movs	r4, #1
		bool sooner = (next_to == K_TICKS_FOREVER)
    5980:	f004 0401 	and.w	r4, r4, #1
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    5984:	2801      	cmp	r0, #1
    5986:	dd00      	ble.n	598a <z_set_timeout_expiry+0x26>
    5988:	b97c      	cbnz	r4, 59aa <z_set_timeout_expiry+0x46>
	__asm__ volatile(
    598a:	f385 8811 	msr	BASEPRI, r5
    598e:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    5992:	2301      	movs	r3, #1
    5994:	461c      	mov	r4, r3
    5996:	b97b      	cbnz	r3, 59b8 <z_set_timeout_expiry+0x54>
		int next_to = next_timeout();
    5998:	f7fe f9cc 	bl	3d34 <next_timeout>
			      || (ticks <= next_to);
    599c:	f1b0 3fff 	cmp.w	r0, #4294967295
    59a0:	d0ed      	beq.n	597e <z_set_timeout_expiry+0x1a>
    59a2:	42b0      	cmp	r0, r6
    59a4:	dbec      	blt.n	5980 <z_set_timeout_expiry+0x1c>
    59a6:	2401      	movs	r4, #1
    59a8:	e7ea      	b.n	5980 <z_set_timeout_expiry+0x1c>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    59aa:	4639      	mov	r1, r7
    59ac:	42b0      	cmp	r0, r6
    59ae:	bfa8      	it	ge
    59b0:	4630      	movge	r0, r6
    59b2:	f7fc fc33 	bl	221c <sys_clock_set_timeout>
    59b6:	e7e8      	b.n	598a <z_set_timeout_expiry+0x26>
}
    59b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000059ba <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    59ba:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    59bc:	f7fe facc 	bl	3f58 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    59c0:	bd08      	pop	{r3, pc}

000059c2 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    59c2:	b900      	cbnz	r0, 59c6 <z_impl_k_busy_wait+0x4>
    59c4:	4770      	bx	lr
{
    59c6:	b508      	push	{r3, lr}
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    59c8:	f7fb fe3e 	bl	1648 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    59cc:	bd08      	pop	{r3, pc}

000059ce <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    59ce:	4770      	bx	lr
